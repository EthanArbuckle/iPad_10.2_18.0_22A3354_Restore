void *CMSessionMgrFindVolumeButtonClient(unsigned int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  NSPointerArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  NSPointerArray *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t k;
  void *v20;
  __objc2_class **p_superclass;
  BOOL v22;
  BOOL v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSPointerArray *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t m;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t n;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ii;
  int v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t kk;
  int v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t mm;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t nn;
  uint64_t v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  _BYTE v111[128];
  _BYTE v112[128];
  _BYTE v113[128];
  _BYTE v114[128];
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  _BYTE v118[128];
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (CMSMUtility_IsSharePlayCapableCallSessionActive())
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v106, v119, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v107;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v107 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * i);
          if (objc_msgSend(v7, "isActive")
            && CMSUtility_GetWantsToBeVolumeButtonClient(v7)
            && CMSUtility_IsSharePlayCapableMediaSession(v7))
          {
            v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: SharePlay-capable media session"), objc_msgSend(v7, "clientName"));
            goto LABEL_15;
          }
        }
        v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v106, v119, 16);
        if (v4)
          continue;
        break;
      }
    }
    v8 = 0;
    v7 = 0;
LABEL_15:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (v7)
      goto LABEL_55;
  }
  else
  {
    v8 = 0;
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v9 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v10 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v102, v118, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v103;
    while (2)
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)v103 != v12)
          objc_enumerationMutation(v9);
        v7 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * j);
        if (objc_msgSend(v7, "hasPhoneCallBehavior")
          && objc_msgSend(v7, "isActive")
          && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
        {
          v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: phone call"), objc_msgSend(v7, "clientName"));
          goto LABEL_28;
        }
      }
      v11 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v102, v118, 16);
      if (v11)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_28:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (!v7)
  {
    v69 = a1;
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v14 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v15 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
    if (v15)
    {
      v16 = v15;
      v7 = 0;
      v17 = 0;
      v18 = *(_QWORD *)v99;
      while (2)
      {
        for (k = 0; k != v16; ++k)
        {
          if (*(_QWORD *)v99 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * k);
          if (objc_msgSend(v20, "isActive")
            && objc_msgSend(v20, "isPlaying")
            && (objc_msgSend(v20, "doesntActuallyPlayAudio") & 1) == 0
            && CMSUtility_GetWantsToBeVolumeButtonClient(v20))
          {
            if (CMSUtility_IsSessionOnlyPlayingLocally(v20) && !CMSUtility_ShouldSilentMute(v20))
            {
              v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: session only playing locally"), objc_msgSend(v20, "clientName"));
              v17 = v20;
              goto LABEL_49;
            }
            if (!CMSMDeviceState_IsHomePodHub())
            {
              if (CMSUtility_ShouldSilentMute(v20))
              {
                v7 = v20;
              }
              else
              {
                v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client might be %@ for reason: session playing but not only locally"), objc_msgSend(v20, "clientName"));
                v17 = v20;
              }
            }
          }
        }
        v16 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
        if (v16)
          continue;
        break;
      }
    }
    else
    {
      v7 = 0;
      v17 = 0;
    }
LABEL_49:
    p_superclass = MXSession.superclass;
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!v17 && v7)
    {
      v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: session playing but muted"), objc_msgSend(v7, "clientName"));
LABEL_54:
      a1 = v69;
      goto LABEL_55;
    }
    if (v17)
    {
      v7 = v17;
      goto LABEL_54;
    }
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v27 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v28 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v27, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v95;
      a1 = v69;
      while (2)
      {
        for (m = 0; m != v29; ++m)
        {
          if (*(_QWORD *)v95 != v30)
            objc_enumerationMutation(v27);
          v7 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * m);
          if (CMSUtility_GetIsActive(v7))
          {
            CMSUtility_GetAudioCategory(v7, v32);
            if (FigCFEqual())
            {
              CMSUtility_GetAudioMode(v7, v33);
              if (FigCFEqual())
              {
                v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: Active EmergencyAlert~CustomVolume session"), objc_msgSend(v7, "clientName"));
                goto LABEL_80;
              }
            }
          }
        }
        v29 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v27, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
        if (v29)
          continue;
        break;
      }
      v7 = 0;
LABEL_80:
      p_superclass = (__objc2_class **)(MXSession + 8);
    }
    else
    {
      v7 = 0;
      a1 = v69;
    }
    objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!v7)
    {
      objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v34 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
      v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
      if (v35)
      {
        v36 = v35;
        v37 = *(_QWORD *)v91;
        while (2)
        {
          for (n = 0; n != v36; ++n)
          {
            if (*(_QWORD *)v91 != v37)
              objc_enumerationMutation(v34);
            v7 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * n);
            if (objc_msgSend(v7, "wantsVolumeChangesWhenPausedOrInactive"))
            {
              v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: wantsVolumeChangesWhenPausedOrInactive (i.e. a volume slider)"), objc_msgSend(v7, "clientName"));
              goto LABEL_93;
            }
          }
          v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
          if (v36)
            continue;
          break;
        }
      }
      v7 = 0;
LABEL_93:
      objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
      if (!v7)
      {
        objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v39 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
        if (v40)
        {
          v41 = v40;
          v42 = *(_QWORD *)v87;
          while (2)
          {
            for (ii = 0; ii != v41; ++ii)
            {
              if (*(_QWORD *)v87 != v42)
                objc_enumerationMutation(v39);
              v7 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * ii);
              if (objc_msgSend(v7, "isActive")
                && objc_msgSend(v7, "wantsVolumeChangesWhenPaused")
                && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
              {
                v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: wantsVolumeChangesWhenPaused (and session is active)"), objc_msgSend(v7, "clientName"));
                goto LABEL_106;
              }
            }
            v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
            if (v41)
              continue;
            break;
          }
        }
        v7 = 0;
LABEL_106:
        objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
        if (!v7)
        {
          v44 = +[MXSystemController getPIDForAnyAppThatWantsVolumeChanges](MXSystemController, "getPIDForAnyAppThatWantsVolumeChanges");
          if (!v44)
            goto LABEL_166;
          v45 = v44;
          objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v46 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
          v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v82, v113, 16);
          if (v47)
          {
            v48 = v47;
            v49 = *(_QWORD *)v83;
            while (2)
            {
              for (jj = 0; jj != v48; ++jj)
              {
                if (*(_QWORD *)v83 != v49)
                  objc_enumerationMutation(v46);
                v7 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * jj);
                if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v45
                  && objc_msgSend(v7, "isActive")
                  && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                {
                  v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: appWantsVolumeChanges is true, and session is active"), objc_msgSend(v7, "clientName"));
                  goto LABEL_120;
                }
              }
              v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v82, v113, 16);
              if (v48)
                continue;
              break;
            }
          }
          v7 = 0;
LABEL_120:
          objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
          if (!v7)
          {
            objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v51 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
            v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v78, v112, 16);
            if (v52)
            {
              v53 = v52;
              v54 = *(_QWORD *)v79;
              while (2)
              {
                for (kk = 0; kk != v53; ++kk)
                {
                  if (*(_QWORD *)v79 != v54)
                    objc_enumerationMutation(v51);
                  v7 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * kk);
                  if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v45
                    && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                  {
                    v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: appWantsVolumeChanges is true, and session is not active"), objc_msgSend(v7, "clientName"));
                    goto LABEL_132;
                  }
                }
                v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v78, v112, 16);
                if (v53)
                  continue;
                break;
              }
            }
            v7 = 0;
LABEL_132:
            objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
            if (!v7)
            {
LABEL_166:
              if (CMSMDeviceState_DeviceIsLocked())
              {
                v56 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
                if (!v56)
                  return 0;
                v57 = v56;
                objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
                v76 = 0u;
                v77 = 0u;
                v74 = 0u;
                v75 = 0u;
                v58 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
                v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v74, v111, 16);
                if (v59)
                {
                  v60 = v59;
                  v61 = *(_QWORD *)v75;
                  while (2)
                  {
                    for (mm = 0; mm != v60; ++mm)
                    {
                      if (*(_QWORD *)v75 != v61)
                        objc_enumerationMutation(v58);
                      v7 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * mm);
                      if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v57
                        && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                      {
                        v68 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: nowPlayingApp and screen is locked"), objc_msgSend(v7, "clientName"));
                        goto LABEL_162;
                      }
                    }
                    v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v74, v111, 16);
                    if (v60)
                      continue;
                    break;
                  }
                }
              }
              else
              {
                objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListBeginIteration");
                v72 = 0u;
                v73 = 0u;
                v70 = 0u;
                v71 = 0u;
                v63 = (void *)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionList");
                v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v70, v110, 16);
                if (v64)
                {
                  v65 = v64;
                  v66 = *(_QWORD *)v71;
                  while (2)
                  {
                    for (nn = 0; nn != v65; ++nn)
                    {
                      if (*(_QWORD *)v71 != v66)
                        objc_enumerationMutation(v63);
                      v7 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * nn);
                      if ((MX_FeatureFlags_IsAudiomxdEnabled()
                         || objc_msgSend(v7, "isAudioSession"))
                        && objc_msgSend(v7, "isActive")
                        && (objc_msgSend(v7, "applicationState") == 8
                         || objc_msgSend(v7, "isTheAssistant"))
                        && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                      {
                        v68 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Volume button client is %@ for reason: VoiceAssistant OR session is active and app is in the foreground"), objc_msgSend(v7, "clientName"));
LABEL_162:
                        v8 = v68;
                        goto LABEL_163;
                      }
                    }
                    v65 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v70, v110, 16);
                    if (v65)
                      continue;
                    break;
                  }
                }
              }
              v7 = 0;
LABEL_163:
              objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "mxCoreSessionListEndIteration");
            }
          }
        }
      }
    }
  }
LABEL_55:
  if (v7)
    v22 = v8 == 0;
  else
    v22 = 1;
  v24 = v22 || a1 > 0xE || ((1 << a1) & 0x5836) == 0;
  if (!v24 && dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7;
}

CFTypeRef vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  AudioObjectPropertyScope v12;
  __CFDictionary *RouteConfigurationDictionary;
  BOOL v14;
  OSStatus PropertyData;
  const __CFArray *v16;
  BOOL v17;
  CFTypeID v18;
  const void **p_cf;
  uint64_t v20;
  const void **v21;
  CFTypeRef cf;
  const __CFArray *outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  if (a5 == 1)
    v12 = 1768845428;
  else
    v12 = 1869968496;
  inAddress.mSelector = 1634759267;
  inAddress.mScope = v12;
  inAddress.mElement = 0;
  ioDataSize = 8;
  outData = 0;
  RouteConfigurationDictionary = 0;
  if (!CMSMUtility_IsSharePlayCallSessionActive())
  {
    if (CMSMUtility_IsSharePlayMediaSessionActive()
      || (dword_1EE2B3BEC == a1 ? (v14 = dword_1EE2B3BF0 == a2) : (v14 = 0),
          v14 && FigCFEqual() && FigCFEqual()))
    {
      RouteConfigurationDictionary = 0;
    }
    else
    {
      RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
    }
  }
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  cf = 0;
  v16 = outData;
  if (PropertyData)
    v17 = 1;
  else
    v17 = outData == 0;
  if (!v17)
  {
    v18 = CFGetTypeID(outData);
    if (v18 == CFArrayGetTypeID() && CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_cf = &cf;
        v20 = a6;
        v21 = 0;
      }
      else
      {
        v21 = &cf;
        v20 = a6;
        p_cf = 0;
      }
      vaemGetPortListForDevice(outData, v20, p_cf, v21);
      if (cf)
        CFRetain(cf);
    }
    v16 = outData;
  }
  if (v16)
  {
    CFRelease(v16);
    outData = 0;
  }
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  return cf;
}

uint64_t CMSMUtility_IsSharePlayCallSessionActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (CMSUtility_GetIsActive(v5) && (objc_msgSend(v5, "isSharePlayCallSession") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_14;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_IsSharePlayMediaSessionActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (CMSUtility_GetIsActive(v5) && (objc_msgSend(v5, "isSharePlayMediaSession") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_14;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t MX_FeatureFlags_IsSharePlayEnabled()
{
  if (MX_FeatureFlags_IsSharePlayEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSharePlayEnabled_onceToken, &__block_literal_global_12);
  return MX_FeatureFlags_IsSharePlayEnabled_sharePlayEnabled;
}

__CFArray *cmsmCopyPickableRoutesForRouteConfiguration(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSDictionary *v6;
  void *CategoryStringWithModeAppended;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const void *v12;
  __objc2_class **p_superclass;
  __CFArray *v14;
  uint64_t v15;
  CFMutableArrayRef Mutable;
  BOOL v17;
  char v18;
  const __CFDictionary *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  MXEndpointDescriptorCache *v24;
  __CFArray *v25;
  const __CFArray *v26;
  CFIndex Count;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v29;
  CFIndex i;
  const void *ValueAtIndex;
  char SupportedFeatures;
  __CFString *v33;
  CFMutableArrayRef v34;
  const CFArrayCallBacks *v35;
  int v36;
  int v37;
  int v38;
  MXEndpointDescriptorCache *v39;
  __CFArray *v40;
  const __CFArray *v41;
  CFIndex v42;
  CFIndex v43;
  CFIndex v44;
  uint64_t v45;
  const void *v46;
  uint64_t CMBaseObject;
  void (*v48)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *NonConnectedBTRouteDescription;
  __CFDictionary *v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, const __CFAllocator *, _OWORD *);
  const __CFArray *v53;
  const __CFArray *v54;
  uint64_t UpTimeNanoseconds;
  CFIndex v56;
  CFIndex v57;
  CFIndex v58;
  const __CFDictionary *v59;
  const void *Value;
  const void *v61;
  const void *v62;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertySelector mSelector;
  unsigned int v65;
  int v66;
  uint64_t v67;
  const __CFDictionary *v68;
  int IsQuiesceableWiredConnectionEnabled;
  __CFArray *RouteDescriptionArrayFromPortIDsForRouteConfiguration;
  void *v71;
  __CFArray *v72;
  int v73;
  int v74;
  __CFDictionary *v75;
  NSDictionary *v76;
  const void *v77;
  void *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  __CFArray *v87;
  CFIndex v88;
  const __CFDictionary *v89;
  int v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t k;
  void *v96;
  CFTypeID v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t j;
  void *v106;
  uint64_t v107;
  _OWORD *v108;
  uint64_t v109;
  uint64_t v110;
  const __CFArray *v111;
  int v112;
  void *v113;
  void *v114;
  __CFArray *theArray;
  __CFArray *v116;
  void *v117;
  char v118;
  void *v119;
  uint64_t v120;
  __CFArray *v121;
  const void *v122;
  int key;
  int ShouldIncludePortTypeForRouteConfiguration;
  uint64_t v125;
  const void *v126;
  const void *v127;
  const __CFAllocator *allocator;
  __CFArray *obj;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  CFTypeRef v135;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  os_log_type_t type[8];
  _BYTE v139[128];
  CFTypeRef cf[16];
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  CFRange v145;
  CFRange v146;
  CFRange v147;
  CFRange v148;
  CFRange v149;
  CFRange v150;

  v6 = (NSDictionary *)a1;
  v144 = *MEMORY[0x1E0C80C00];
  CategoryStringWithModeAppended = (void *)CMSMUtility_CreateCategoryStringWithModeAppended(a1, a2);
  v8 = objc_alloc(MEMORY[0x1E0CB3940]);
  v127 = a3;
  if (a3)
    v9 = objc_msgSend(v8, "initWithFormat:", CFSTR("%lu"), objc_msgSend((id)objc_msgSend(a3, "description"), "hash"));
  else
    v9 = objc_msgSend(v8, "initWithUTF8String:", "null");
  v10 = (void *)v9;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@%@%@"), CategoryStringWithModeAppended, 0x1E30A5E88, v9);
  if (objc_msgSend(a4, "count"))
    v12 = a4;
  else
    v12 = 0;
  p_superclass = MXSession.superclass;
  -[NSRecursiveLock lock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "lock");
  v14 = 0;
  v15 = a2;
  if (!v12)
  {
    if (-[NSMutableDictionary count](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "count"))
    {
      v14 = (__CFArray *)(id)-[NSMutableDictionary objectForKey:](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "objectForKey:", v11);
    }
    else
    {
      v14 = 0;
    }
  }
  -[NSRecursiveLock unlock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "unlock");
  if (v14 || !CategoryStringWithModeAppended)
    goto LABEL_156;
  v135 = 0;
  cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(v6, a2, v127, v12, (__CFDictionary **)&v135);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v14 = Mutable;
  if (v6)
    v17 = a2 == 0;
  else
    v17 = 1;
  v18 = v17;
  v118 = v18;
  v122 = v12;
  obj = Mutable;
  v119 = v10;
  v120 = (uint64_t)v6;
  v117 = v11;
  if (!v17)
  {
    v19 = (const __CFDictionary *)v135;
    v20 = cmsmCopyWirelessPortsArrayForRouteConfiguration(v6, a2, v12);
    if (v20)
    {
      v21 = v20;
      if (CFArrayGetCount(v20))
        theArray = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration((uint64_t)v6, v21, 1, v19);
      else
        theArray = 0;
      CFRelease(v21);
    }
    else
    {
      theArray = 0;
    }
    VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v6);
    VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
    ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, 0x70617061u);
    key = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, 0x70617073u);
    v24 = +[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance");
    v25 = -[MXEndpointDescriptorCache copyAvailableEndpointsForManager:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyAvailableEndpointsForManager:", -[MXEndpointDescriptorCache getEndpointManagerForType:](v24, "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]));
    if (v25)
    {
      v26 = v25;
      Count = CFArrayGetCount(v25);
      v112 = VADModeFromFigModeName;
      if (theArray)
        MutableCopy = CFArrayCreateMutableCopy(0, 0, theArray);
      else
        MutableCopy = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      v29 = MutableCopy;
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v26, i);
          if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
          {
            SupportedFeatures = FigEndpointGetSupportedFeatures();
            if ((SupportedFeatures & 2) != 0 && ShouldIncludePortTypeForRouteConfiguration)
              cmsmCreateAndInsertAirPlayRouteDescription((uint64_t)ValueAtIndex, 0x1E30A8A28, v29);
            if ((SupportedFeatures & 1) != 0 && key)
            {
              FigRoutingManagerGetMirroringModeFromEndpoint((uint64_t)ValueAtIndex);
              if (FigCFEqual())
                v33 = CFSTR("MirroringMode_SecondScreen");
              else
                v33 = CFSTR("AirPlayAudioType_AirPlayScreen");
              cmsmCreateAndInsertAirPlayRouteDescription((uint64_t)ValueAtIndex, (uint64_t)v33, v29);
            }
          }
        }
      }
      v34 = CFArrayCreateMutableCopy(allocator, 0, v29);
      if (v29)
        CFRelease(v29);
      v111 = v34;
      CFRelease(v26);
      v11 = v117;
      v14 = obj;
      VADModeFromFigModeName = v112;
    }
    else
    {
      v111 = 0;
    }
    v35 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v116 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    v121 = CFArrayCreateMutable(allocator, 0, v35);
    v36 = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, 0x70687062u);
    v37 = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, 0x70687042u);
    v38 = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, 0x706C656Fu);
    v39 = +[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance");
    v40 = -[MXEndpointDescriptorCache copyAvailableEndpointsForManager:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyAvailableEndpointsForManager:", -[MXEndpointDescriptorCache getEndpointManagerForType:](v39, "getEndpointManagerForType:", *MEMORY[0x1E0CA3A60]));
    if (v40)
    {
      v41 = v40;
      if (v36 || v37 || v38)
      {
        v42 = CFArrayGetCount(v40);
        if (v42 >= 1)
        {
          v43 = v42;
          v44 = 0;
          v45 = *MEMORY[0x1E0CA4280];
          v125 = *MEMORY[0x1E0CA4258];
          do
          {
            v46 = CFArrayGetValueAtIndex(v41, v44);
            cf[0] = 0;
            CMBaseObject = FigEndpointGetCMBaseObject();
            v48 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v48)
              v48(CMBaseObject, v45, allocator, cf);
            if (FigCFEqual())
            {
              NonConnectedBTRouteDescription = cmsmCreateNonConnectedBTRouteDescription((uint64_t)v46);
              if (NonConnectedBTRouteDescription)
              {
                v50 = NonConnectedBTRouteDescription;
                CFArrayAppendValue(v121, NonConnectedBTRouteDescription);
                *(_QWORD *)&v141[0] = 0;
                v51 = FigEndpointGetCMBaseObject();
                v52 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
                if (v52)
                  v52(v51, v125, allocator, v141);
                if (*(_QWORD *)&v141[0])
                  CFRelease(*(CFTypeRef *)&v141[0]);
                CFRelease(v50);
              }
            }
            if (cf[0])
              CFRelease(cf[0]);
            ++v44;
            v14 = obj;
          }
          while (v43 != v44);
        }
      }
      CFRelease(v41);
      v12 = v122;
    }
    v53 = v116;
    if (v121 && CFArrayGetCount(v121))
    {
      v145.length = CFArrayGetCount(v121);
      v145.location = 0;
      CFArrayAppendArray(v116, v121, v145);
    }
    v10 = v119;
    v6 = (NSDictionary *)v120;
    p_superclass = (__objc2_class **)(MXSession + 8);
    v15 = a2;
    v54 = v111;
    if (v111 && CFArrayGetCount(v111))
    {
      v146.length = CFArrayGetCount(v111);
      v146.location = 0;
      CFArrayAppendArray(v116, v111, v146);
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if ((unint64_t)(UpTimeNanoseconds - cmsmLogBluetoothDetails_availableRoutesLastLoggedTimestamp) >= 0x2540BE400)
    {
      v113 = CategoryStringWithModeAppended;
      v110 = UpTimeNanoseconds;
      if (v116)
      {
        v56 = CFArrayGetCount(v116);
        if (v56 >= 1)
        {
          v57 = v56;
          v58 = 0;
          v126 = (const void *)*MEMORY[0x1E0C9AE50];
          do
          {
            v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(v53, v58);
            if (CFDictionaryGetValue(v59, CFSTR("IsBTRoute")) == v126)
            {
              Value = CFDictionaryGetValue(v59, CFSTR("RouteName"));
              v61 = CFDictionaryGetValue(v59, CFSTR("RouteUID"));
              v62 = CFDictionaryGetValue(v59, CFSTR("BTDetails_ProductID"));
              CFDictionaryGetValue(v59, CFSTR("BTDetails_IsHFPRoute"));
              if (dword_1EE2B3F38)
              {
                inAddress.mSelector = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                mSelector = inAddress.mSelector;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
                  v65 = mSelector;
                else
                  v65 = mSelector & 0xFFFFFFFE;
                if (v65)
                {
                  v66 = FigCFEqual();
                  LODWORD(v141[0]) = 136316163;
                  *(_QWORD *)((char *)v141 + 4) = "cmsmLogBluetoothDetails";
                  WORD6(v141[0]) = 2113;
                  *(_QWORD *)((char *)v141 + 14) = Value;
                  WORD3(v141[1]) = 2113;
                  *((_QWORD *)&v141[1] + 1) = v61;
                  LOWORD(v142) = 2114;
                  *(_QWORD *)((char *)&v142 + 2) = v62;
                  WORD5(v142) = 1024;
                  HIDWORD(v142) = v66;
                  LODWORD(v109) = 48;
                  v108 = v141;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                p_superclass = (__objc2_class **)(MXSession + 8);
                v6 = (NSDictionary *)v120;
                v15 = a2;
                v53 = v116;
              }
            }
            ++v58;
          }
          while (v57 != v58);
        }
      }
      cmsmLogBluetoothDetails_availableRoutesLastLoggedTimestamp = v110;
      v10 = v119;
      v11 = v117;
      v12 = v122;
      v14 = obj;
      v54 = v111;
      CategoryStringWithModeAppended = v113;
    }
    if (theArray)
      CFRelease(theArray);
    if (v54)
      CFRelease(v54);
    if (v121)
      CFRelease(v121);
    if (v53)
    {
      if (CFArrayGetCount(v53) && CFArrayGetCount(v53))
      {
        v147.length = CFArrayGetCount(v53);
        v147.location = 0;
        CFArrayAppendArray(v14, v53, v147);
      }
      CFRelease(v53);
    }
  }
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
  {
    v67 = v15;
    v68 = (const __CFDictionary *)v135;
    IsQuiesceableWiredConnectionEnabled = MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled();
    RouteDescriptionArrayFromPortIDsForRouteConfiguration = 0;
    if (v67 && v6 && IsQuiesceableWiredConnectionEnabled)
    {
      v71 = cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration();
      if (objc_msgSend(v71, "count"))
        RouteDescriptionArrayFromPortIDsForRouteConfiguration = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration((uint64_t)v6, v71, 1, v68);
      else
        RouteDescriptionArrayFromPortIDsForRouteConfiguration = 0;
      if (!-[__CFArray count](RouteDescriptionArrayFromPortIDsForRouteConfiguration, "count", v108, v109))
      {

        RouteDescriptionArrayFromPortIDsForRouteConfiguration = 0;
      }

    }
    if (-[__CFArray count](RouteDescriptionArrayFromPortIDsForRouteConfiguration, "count", v108))
    {
      v148.length = -[__CFArray count](RouteDescriptionArrayFromPortIDsForRouteConfiguration, "count");
      v148.location = 0;
      CFArrayAppendArray(v14, RouteDescriptionArrayFromPortIDsForRouteConfiguration, v148);
    }

    v15 = a2;
  }
  if ((FigCFEqual() || FigCFEqual()) && FigCFEqual())
  {
    if (v6)
    {
      if (v15)
      {
        *(_QWORD *)type = 0;
        ioDataSize = 8;
        *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"strpptuo";
        inAddress.mElement = 0;
        if (!AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, type))
        {
          if (*(_QWORD *)type)
          {
            v98 = CFGetTypeID(*(CFTypeRef *)type);
            if (v98 == CFArrayGetTypeID())
            {
              v99 = CategoryStringWithModeAppended;
              v100 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              memset(v141, 0, sizeof(v141));
              v142 = 0u;
              v143 = 0u;
              v101 = *(void **)type;
              v102 = objc_msgSend(*(id *)type, "countByEnumeratingWithState:objects:count:", v141, cf, 16);
              if (v102)
              {
                v103 = v102;
                v104 = **(_QWORD **)&v141[1];
                do
                {
                  for (j = 0; j != v103; ++j)
                  {
                    if (**(_QWORD **)&v141[1] != v104)
                      objc_enumerationMutation(v101);
                    v106 = *(void **)(*((_QWORD *)&v141[0] + 1) + 8 * j);
                    v107 = objc_msgSend(v106, "unsignedIntValue", v108);
                    if (vaeGetPortTypeFromPortID(v107) == 1885892706
                      && !vaeIsAvailableForVoicePrompts(v107)
                      && vaeGetVADEndpointTypeForPort(v107) == 1701869160)
                    {
                      objc_msgSend(v100, "addObject:", v106);
                    }
                  }
                  v103 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", v141, cf, 16);
                }
                while (v103);
              }
              if (*(_QWORD *)type)
              {
                CFRelease(*(CFTypeRef *)type);
                *(_QWORD *)type = 0;
              }
              v6 = (NSDictionary *)v120;
              v72 = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(v120, v100, 1, 0);
              CategoryStringWithModeAppended = v99;
              v10 = v119;
              v11 = v117;
              v12 = v122;
              v15 = a2;
              v14 = obj;
              if (v100)
                CFRelease(v100);
              p_superclass = (__objc2_class **)(MXSession + 8);
              goto LABEL_118;
            }
            if (*(_QWORD *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(_QWORD *)type = 0;
            }
          }
        }
      }
    }
    v72 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
LABEL_118:
    v149.length = CFArrayGetCount(v72);
    v149.location = 0;
    CFArrayAppendArray(v14, v72, v149);
    if (v72)
      CFRelease(v72);
  }
  v73 = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v6);
  v74 = CMSMVAUtility_GetVADModeFromFigModeName(v15);
  v75 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(0, v73, v74, v127, v12);
  CFArrayAppendValue(v14, v75);
  LODWORD(cf[0]) = 0;
  FigCFDictionaryGetInt32IfPresent();
  if ((v118 & 1) == 0)
  {
    v76 = v6;
    v77 = v12;
    v78 = CategoryStringWithModeAppended;
    v79 = (int)cf[0];
    v80 = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v76);
    v81 = v15;
    v82 = v80;
    v83 = CMSMVAUtility_GetVADModeFromFigModeName(v81);
    v84 = cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(v82, v83, v77);
    if ((unint64_t)objc_msgSend(v84, "count") <= 1)
    {

      CategoryStringWithModeAppended = v78;
      v12 = v122;
    }
    else
    {
      v85 = 1;
      if (objc_msgSend((id)objc_msgSend(v84, "objectAtIndex:", 1), "unsignedIntValue") == v79)
      {
        v86 = 0;
      }
      else
      {
        v85 = objc_msgSend(v84, "count") - 1;
        v86 = 1;
      }
      CategoryStringWithModeAppended = v78;
      v87 = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(v120, (void *)objc_msgSend(v84, "subarrayWithRange:", v86, v85, v108), 0, 0);

      v12 = v122;
      if (v87)
      {
        if (CFArrayGetCount(v87))
        {
          v150.length = CFArrayGetCount(v87);
          v150.location = 0;
          CFArrayAppendArray(v14, v87, v150);
        }
        CFRelease(v87);
      }
    }
  }
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_134:
    v90 = 1;
  }
  else
  {
    v88 = 0;
    while (1)
    {
      v89 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v88);
      if (cmsmRouteDescriptionEqual((CFDictionaryRef)v135, v89))
        break;
      if (++v88 >= CFArrayGetCount(v14))
        goto LABEL_134;
    }
    CFDictionarySetValue(v89, CFSTR("RouteCurrentlyPicked"), (const void *)*MEMORY[0x1E0C9AE50]);
    v90 = 0;
  }
  if (v135)
  {
    CFRelease(v135);
    v135 = 0;
  }
  if (v90)
    CFDictionarySetValue(v75, CFSTR("RouteCurrentlyPicked"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (v75)
    CFRelease(v75);
  if (v14)
  {
    if (vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts())
    {
      v114 = CategoryStringWithModeAppended;
      v91 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v131 = 0u;
      v132 = 0u;
      v133 = 0u;
      v134 = 0u;
      v92 = -[__CFArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v131, v139, 16);
      if (v92)
      {
        v93 = v92;
        v94 = *(_QWORD *)v132;
        do
        {
          for (k = 0; k != v93; ++k)
          {
            if (*(_QWORD *)v132 != v94)
              objc_enumerationMutation(obj);
            v96 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v131 + 1) + 8 * k), "mutableCopy", v108);
            if (vaeGetPortTypeFromPortID(objc_msgSend((id)objc_msgSend(v96, "objectForKey:", CFSTR("PortNumber")), "unsignedIntValue")) == 1885565807)
            {
              objc_msgSend(v96, "setObject:forKey:", CFSTR("Speaker"), CFSTR("RouteName"));
              objc_msgSend(v96, "setObject:forKey:", CFSTR("Speaker"), CFSTR("RouteUID"));
            }
            objc_msgSend(v91, "addObject:", v96);

          }
          v93 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v131, v139, 16);
        }
        while (v93);
      }

      v14 = (__CFArray *)objc_msgSend(v91, "copy");
      CategoryStringWithModeAppended = v114;
      v10 = v119;
      v11 = v117;
      p_superclass = MXSession.superclass;
      v12 = v122;
    }
    if (!v12)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "propertiesLock"), "lock");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "pickableRoutesDescriptions"), "setObject:forKey:", v14, v11);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "propertiesLock"), "unlock");
    }
  }
LABEL_156:

  return v14;
}

uint64_t CMSMVAUtility_GetVADModeFromFigModeName(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;

  v1 = 1768776806;
  if (a1
    && -[MXSessionManager figModeTypeToVADModeType](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figModeTypeToVADModeType"))
  {
    v3 = -[NSDictionary objectForKey:](-[MXSessionManager figModeTypeToVADModeType](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figModeTypeToVADModeType"), "objectForKey:", a1);
    if (v3)
      return v3;
    else
      return 1768776806;
  }
  return v1;
}

NSDictionary *CMSMVAUtility_GetVADCategoryFromFigCategoryName(NSDictionary *result)
{
  NSDictionary *v1;

  if (result)
  {
    v1 = result;
    result = -[MXSessionManager figCategoryToVADCategoryDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figCategoryToVADCategoryDict");
    if (result)
      return (NSDictionary *)-[NSDictionary objectForKey:](-[MXSessionManager figCategoryToVADCategoryDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figCategoryToVADCategoryDict"), "objectForKey:", v1);
  }
  return result;
}

uint64_t vaemShouldIncludePortTypeForRouteConfiguration(int a1, int a2, const void *a3, AudioObjectPropertyElement a4)
{
  __CFDictionary *RouteConfigurationDictionary;
  int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270727370;
  inAddress.mElement = a4;
  outData = 0;
  ioDataSize = 4;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  return outData;
}

__CFDictionary *CMSMVAUtility_CreateRouteConfigurationDictionary(int a1, int a2, const void *a3, const void *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  BOOL v13;
  int v15;
  int valuePtr;

  v15 = a2;
  valuePtr = a1;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1)
  {
    v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    if (v10)
      CFDictionarySetValue(Mutable, CFSTR("category"), v10);
    if (a2)
    {
      v11 = CFNumberCreate(v8, kCFNumberSInt32Type, &v15);
      if (v11)
      {
        v12 = v11;
        CFDictionarySetValue(Mutable, CFSTR("mode"), v11);
        CFRelease(v12);
      }
    }
    if (v10)
      CFRelease(v10);
  }
  if (a3)
    CFDictionarySetValue(Mutable, CFSTR("initiation context"), a3);
  if (a4)
    CFDictionarySetValue(Mutable, CFSTR("allowed port types"), a4);
  if (CFDictionaryGetCount(Mutable))
    v13 = 1;
  else
    v13 = Mutable == 0;
  if (!v13)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t CMSMUtility_CreateCategoryStringWithModeAppended(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@%@%@"), a1, 0x1E30A5E88, a2);
  else
    return 0;
}

uint64_t vaemGetPortListForDevice(const __CFArray *a1, uint64_t a2, const void **a3, const void **a4)
{
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  const void *Value;
  const __CFNumber *v12;
  int VirtualAudioDeviceType;
  uint64_t result;
  const void *v15;
  const void **v16;
  int valuePtr;

  if (CFArrayGetCount(a1) >= 1)
  {
    v16 = a4;
    for (i = 0; CFArrayGetCount(a1) > i; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
      if (ValueAtIndex)
      {
        v9 = ValueAtIndex;
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID())
        {
          Value = CFDictionaryGetValue(v9, CFSTR("device UID"));
          v12 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("device type"));
          if (FigCFEqual() || FigCFEqual() && FigCFEqual())
          {
            if (a3)
              *a3 = CFDictionaryGetValue(v9, CFSTR("input ports"));
            if (v16)
            {
              v15 = CFDictionaryGetValue(v9, CFSTR("output ports"));
              result = 0;
              *v16 = v15;
              return result;
            }
            return 0;
          }
          if (!Value && v12)
          {
            VirtualAudioDeviceType = vaemGetVirtualAudioDeviceType(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
            valuePtr = 0;
            CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
            if (VirtualAudioDeviceType == valuePtr
              || (VirtualAudioDeviceType == 1987279219 || VirtualAudioDeviceType == 1987279212)
              && (valuePtr == 1987279219 || valuePtr == 1987279212))
            {
              if (a3)
                *a3 = CFDictionaryGetValue(v9, CFSTR("input ports"));
              if (v16)
                *v16 = CFDictionaryGetValue(v9, CFSTR("output ports"));
              return 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

void CMSMUtility_PostNotificationToSession(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
  {
    objc_msgSend(a1, "clientName");
    v4 = objc_msgSend(a1, "copyMXSessionList");
  }
  else
  {
    if (!objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v5 = 0;
      if (!a2)
        goto LABEL_16;
      goto LABEL_8;
    }
    objc_msgSend(a1, "clientName");
    v4 = objc_msgSend(a1, "copyMXSessionSecureList");
  }
  v5 = (void *)v4;
  if (!a2)
    goto LABEL_16;
LABEL_8:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v6 = CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(v5);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

LABEL_16:
}

void *CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(void *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)MEMORY[0x194035B20]();
  v3 = (void *)objc_msgSend(a1, "sortedArrayUsingComparator:", &__block_literal_global_22);
  v4 = v3;
  objc_autoreleasePoolPop(v2);
  return v3;
}

void *CMSUtility_GetClientName(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "clientName");
  return a1;
}

__CFArray *MXEndpointDescriptorCopyReducedForManager(const __CFArray *a1, uint64_t a2)
{
  __CFArray *Mutable;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v5 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    FigCFDictionaryGetValue();
    if (FigCFEqual())
    {
      if (a2)
        ValueAtIndex = (const void *)FigCFDictionaryGetValue();
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v5;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

uint64_t MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled()
{
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_onceToken, &__block_literal_global_61);
  return MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_sIsQuiesceableWiredConnectionEnabled;
}

uint64_t _VAEndpointManager_CopyPropertyWithQualifier(uint64_t a1, const void *a2, uint64_t a3, int *a4, _QWORD *a5)
{
  uint64_t result;
  unsigned int VADPortIDFromVADPortType;
  void *v10;
  int v11;
  CFTypeRef *v12;
  unsigned __int16 v13;
  float v14;
  void *v15;

  CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (a4 && a2 && a5)
  {
    *a5 = 0;
    if (CFEqual(a2, CFSTR("VAEM_VADPortIDFromVADPortType")))
    {
      VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(*a4);
      v10 = MXCFNumberCreateFromSInt64(VADPortIDFromVADPortType);
LABEL_17:
      v15 = v10;
      result = 0;
      *a5 = v15;
      return result;
    }
    if (CFEqual(a2, CFSTR("VAEM_IsPlayAndRecordCategory")))
    {
      v11 = *a4;
      v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (*a4 > 1668313665)
      {
        if (v11 != 1668313666)
        {
          v13 = 29299;
LABEL_14:
          if (v11 != (v13 | 0x63700000))
            v12 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        }
      }
      else if (v11 != 1668301427)
      {
        v13 = 24946;
        goto LABEL_14;
      }
      v10 = (void *)CFRetain(*v12);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("VAEM_ScalarEquivalent")))
    {
      v14 = __exp10f(*(float *)a4 / 20.0);
      v10 = MXCFNumberCreateFromFloat32(v14);
      goto LABEL_17;
    }
    result = CFEqual(a2, CFSTR("VAEM_EndpointForPort"));
    if ((_DWORD)result)
    {
      v10 = (void *)vaemCopyEndpointForPort(*a4);
      goto LABEL_17;
    }
  }
  return result;
}

CFTypeRef vaemCopyEndpointForPort(int a1)
{
  CFTypeRef result;
  CFNumberRef v3;
  const void *Value;
  int valuePtr;

  result = 0;
  valuePtr = a1;
  if (a1 && qword_1EE2B2B88)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2B2B88, v3);
    if (Value
      || (vaemAddToPortEndpointCache(valuePtr),
          (Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2B2B88, v3)) != 0))
    {
      if (v3)
        CFRelease(v3);
      return CFRetain(Value);
    }
    else
    {
      if (v3)
        CFRelease(v3);
      return 0;
    }
  }
  return result;
}

uint64_t cmsmRouteDescriptionEqual(CFDictionaryRef theDict, const __CFDictionary *a2)
{
  uint64_t result;

  if (theDict)
  {
    CFDictionaryGetValue(theDict, CFSTR("RouteType"));
    if (!a2)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (a2)
LABEL_3:
    CFDictionaryGetValue(a2, CFSTR("RouteType"));
LABEL_5:
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    if (FigCFEqual() && FigCFEqual())
    {
      return 1;
    }
    else if (FigCFEqual())
    {
      CFDictionaryGetValue(theDict, CFSTR("RouteUID"));
      CFDictionaryGetValue(a2, CFSTR("RouteUID"));
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        CFDictionaryGetValue(theDict, CFSTR("RouteSubtype"));
        CFDictionaryGetValue(a2, CFSTR("RouteSubtype"));
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          CFDictionaryGetValue(theDict, CFSTR("RouteSupportsAirPlayVideo"));
          CFDictionaryGetValue(a2, CFSTR("RouteSupportsAirPlayVideo"));
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            CFDictionaryGetValue(theDict, CFSTR("RouteSupportsAirPlayScreen"));
            CFDictionaryGetValue(a2, CFSTR("RouteSupportsAirPlayScreen"));
            return FigCFEqual() != 0;
          }
        }
      }
    }
    else
    {
      CFDictionaryGetValue(theDict, CFSTR("AVAudioRouteName"));
      CFDictionaryGetValue(a2, CFSTR("AVAudioRouteName"));
      return FigCFEqual();
    }
  }
  return result;
}

CFTypeRef cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  __CFDictionary *RouteConfigurationDictionary;
  AudioObjectPropertyScope v9;
  OSStatus PropertyData;
  const __CFArray *v11;
  BOOL v12;
  CFTypeID v13;
  const void **p_cf;
  uint64_t v15;
  const void **v16;
  CFTypeRef cf;
  const __CFArray *outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  cf = 0;
  outData = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
  if (a5 == 1)
    v9 = 1768845428;
  else
    v9 = 1869968496;
  inAddress.mSelector = 1634629490;
  inAddress.mScope = v9;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  v11 = outData;
  if (PropertyData)
    v12 = 1;
  else
    v12 = outData == 0;
  if (!v12)
  {
    v13 = CFGetTypeID(outData);
    if (v13 == CFArrayGetTypeID() && CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_cf = &cf;
        v15 = a6;
        v16 = 0;
      }
      else
      {
        v16 = &cf;
        v15 = a6;
        p_cf = 0;
      }
      vaemGetPortListForDevice(outData, v15, p_cf, v16);
      if (cf)
        CFRetain(cf);
    }
    v11 = outData;
  }
  if (v11)
    CFRelease(v11);
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  return cf;
}

BOOL CMSMDeviceState_DeviceIsLocked()
{
  uint64_t v0;
  int v1;

  MEMORY[0x1940352BC](qword_1EE2B2A60);
  v0 = byte_1EE2B29CC;
  v1 = byte_1EE2B29D4;
  MEMORY[0x1940352C8](qword_1EE2B2A60);
  if (!v1)
    return sMKBGetLockStatus && sMKBGetLockStatus(0) != 0;
  return v0;
}

__CFArray *cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(uint64_t a1, void *a2, int a3, const __CFDictionary *a4)
{
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __CFDictionary *v12;
  BOOL v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  CFTypeRef v18;
  CFIndex v19;
  const __CFDictionary *v20;
  CFIndex v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CFTypeRef v27;
  CFTypeRef cf;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  _BYTE v35[128];
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(a2);
        v12 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "unsignedIntValue"), 0, 0, 0, 0);
        CFArrayAppendValue(Mutable, v12);
        if (v12)
          CFRelease(v12);
      }
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
    }
    while (v9);
  }
  if (FigCFEqual())
    v13 = Mutable == 0;
  else
    v13 = 1;
  if (!v13)
  {
    Count = CFArrayGetCount(Mutable);
    if (Count >= 2)
    {
      v15 = Count;
      v33 = 0;
      v34 = 0;
      cmsmCopyHFPOrA2DPBTDeviceDetails(a4, (const __CFString **)&v33, (__CFString **)&v34, 0);
      v16 = 0;
      while (1)
      {
        v31 = 0;
        v32 = 0;
        v30 = 0;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v16);
        cmsmCopyHFPOrA2DPBTDeviceDetails(ValueAtIndex, (const __CFString **)&v32, (__CFString **)&v31, &v30);
        v18 = v31;
        if (!v31)
          goto LABEL_40;
        v19 = v16 + 1;
        if (v16 + 1 >= v15)
          goto LABEL_39;
        do
        {
          cf = 0;
          v29 = 0;
          v27 = 0;
          v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v19);
          cmsmCopyHFPOrA2DPBTDeviceDetails(v20, (const __CFString **)&v29, (__CFString **)&cf, &v27);
          if (FigCFEqual())
          {
            if (FigCFEqual() && FigCFEqual())
            {
              if (FigCFEqual())
                v21 = v19;
              else
                v21 = v16;
LABEL_29:
              CFArrayRemoveValueAtIndex(Mutable, v21);
              --v15;
              goto LABEL_31;
            }
            if (FigCFEqual() && FigCFEqual())
            {
              if (FigCFEqual())
                v21 = v16;
              else
                v21 = v19;
              goto LABEL_29;
            }
          }
          ++v19;
LABEL_31:
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v27)
          {
            CFRelease(v27);
            v27 = 0;
          }
          if (v29)
            CFRelease(v29);
        }
        while (v19 < v15);
        v18 = v31;
        if (v31)
        {
LABEL_39:
          CFRelease(v18);
          v31 = 0;
        }
LABEL_40:
        if (v30)
        {
          CFRelease(v30);
          v30 = 0;
        }
        if (v32)
          CFRelease(v32);
        if (++v16 >= v15)
        {
          if (v34)
          {
            CFRelease(v34);
            v34 = 0;
          }
          if (v33)
            CFRelease(v33);
          break;
        }
      }
    }
  }
  if (a3)
  {
    v37.length = CFArrayGetCount(Mutable);
    v37.location = 0;
    CFArraySortValues(Mutable, v37, (CFComparatorFunction)routeDescriptionComparator, (void *)0x20);
  }
  return Mutable;
}

uint64_t mxCoreSessionRef_notificationCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void MXDispatchAsyncAndWait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  void *v14;
  void *v15;
  _QWORD block[6];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v14 = (void *)MEMORY[0x194035B20]();
  v15 = (void *)MEMORY[0x194035B20]();
  v25 = 0;
  v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      CreateACQDispatchID();
  }
  objc_autoreleasePoolPop(v15);
  v26 = v24;
  v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      MEMORY[0x1940347A0](&v26, 0, "MXDispatchAsyncAndWait", a1, a2, a3, a4, a5);
  }
  objc_autoreleasePoolPop(v14);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsyncAndWait_block_invoke;
  block[3] = &unk_1E309E5C0;
  v17 = v26;
  v18 = v27;
  v19 = a1;
  v23 = a3;
  v20 = a2;
  v21 = a4;
  v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_barrier_async_and_wait(a6, block);
}

void MXDispatchAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  void *v14;
  void *v15;
  _QWORD block[6];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v14 = (void *)MEMORY[0x194035B20]();
  v15 = (void *)MEMORY[0x194035B20]();
  v25 = 0;
  v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      CreateACQDispatchID();
  }
  objc_autoreleasePoolPop(v15);
  v26 = v24;
  v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      MEMORY[0x1940347A0](&v26, 0, "MXDispatchAsync", a1, a2, a3, a4, a5);
  }
  objc_autoreleasePoolPop(v14);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsync_block_invoke;
  block[3] = &unk_1E309E5C0;
  v17 = v26;
  v18 = v27;
  v19 = a1;
  v23 = a3;
  v20 = a2;
  v21 = a4;
  v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_barrier_async(a6, block);
}

uint64_t MX_FeatureFlags_IsAudiomxdEnabled()
{
  return _os_feature_enabled_impl();
}

void sub_193601BE8(void *a1, int a2)
{
  uint64_t v2;
  id v4;

  v4 = objc_begin_catch(a1);
  if (a2 == 2)
    objc_exception_throw(v4);
  HandleDispatchBlockException(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(unsigned int *)(v2 + 104), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  __break(1u);
}

void sub_193601C14(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CMSMDeviceState_IsAudiomxd()
{
  return HIBYTE(gDeviceState);
}

uint64_t CMSMDeviceState_IsMediaserverd()
{
  return gDeviceState;
}

const UInt8 *_routingContextUtilities_getContextForUUIDFromDict(CFDictionaryRef theDict, void *key)
{
  const UInt8 *result;
  const __CFData *Value;

  result = 0;
  if (theDict)
  {
    if (key)
    {
      Value = (const __CFData *)CFDictionaryGetValue(theDict, key);
      if (!Value || (result = CFDataGetBytePtr(Value)) == 0)
      {
        CFDictionaryRemoveValue(theDict, key);
        return 0;
      }
    }
  }
  return result;
}

void __discoveryManager_postNotificationForDiscoverer_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

void discoveryManager_logDiscoverers(uint64_t a1, int a2)
{
  int v2;
  unint64_t v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  uint64_t v6;
  const __CFArray *Copy;
  CFIndex Count;
  unint64_t v9;
  unint64_t v10;
  const void *ValueAtIndex;
  const void *v12;
  uint64_t v13;
  void (*v14)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *);
  void (*v15)(const void *, const __CFString *, const __CFAllocator *, _BYTE *);
  void (*v16)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v18;
  unsigned int v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v27;
  _BYTE v28[12];
  __int16 v29;
  __CFString *v30;
  CFTypeRef cf[18];

  v2 = a2;
  v3 = 0;
  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    Mutable = CFStringCreateMutable(v4, 0);
    MEMORY[0x1940352F8](*(_QWORD *)(a1 + 256));
    v6 = a1 + 24 * v3;
    Copy = CFArrayCreateCopy(v4, *(CFArrayRef *)(v6 + 24));
    CFStringAppendFormat(Mutable, 0, CFSTR("CURRENT DISCOVERYMODE %@ ::"), *(_QWORD *)(v6 + 32));
    MEMORY[0x194035304](*(_QWORD *)(a1 + 256));
    if (Copy)
    {
      Count = CFArrayGetCount(Copy);
      CFStringAppendFormat(Mutable, 0, CFSTR("Discoverers %ld\n"), Count);
      if (Count >= 1)
      {
        v9 = 0;
        v10 = 1;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Copy, v9);
          v12 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
          if (5 * (v9 / 5) == v9)
          {
            if (v3 > 6)
              v13 = 0;
            else
              v13 = *((_QWORD *)&off_1E3098F08 + v3);
            CFStringAppendFormat(Mutable, 0, CFSTR("Discoverer Type: %@"), v13, v23);
          }
          if (!v12)
            goto LABEL_30;
          cf[0] = 0;
          v14 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v14)
            v14(v12, CFSTR("DiscoveryMode"), v4, cf);
          *(_QWORD *)v28 = 0;
          v15 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v15)
            v15(v12, CFSTR("clientName"), v4, v28);
          v27 = 0;
          v16 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v16)
            v16(v12, CFSTR("discovererUUID"), v4, &v27);
          if (cf[0] && *(_QWORD *)v28)
            break;
          if (cf[0])
          {
            CFStringAppendFormat(Mutable, 0, CFSTR("\n \t\t[%d] NONAME=%@"), v9, cf[0], v24);
LABEL_22:
            if (v27)
              CFStringAppendFormat(Mutable, 0, CFSTR(" uuid=%@"), v27);
          }
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          if (*(_QWORD *)v28)
          {
            CFRelease(*(CFTypeRef *)v28);
            *(_QWORD *)v28 = 0;
          }
          CFRelease(v12);
          if (v27)
            CFRelease(v27);
LABEL_30:
          if (Count - 1 == v9)
          {
            if (v2 && dword_1EE2B3DE8)
            {
              LODWORD(v27) = 0;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v18 = v27;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
                v19 = v18;
              else
                v19 = v18 & 0xFFFFFFFE;
              if (v19)
              {
                *(_DWORD *)v28 = 136315394;
                *(_QWORD *)&v28[4] = "discoveryManager_logDiscoverers";
                v29 = 2114;
                v30 = Mutable;
                LODWORD(v23) = 22;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v2 = a2;
            }
          }
          else if (5 * (v10 / 5) - 1 == v9)
          {
            if (v2 && dword_1EE2B3DE8)
            {
              LODWORD(v27) = 0;
              v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v21 = v27;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                v22 = v21;
              else
                v22 = v21 & 0xFFFFFFFE;
              if (v22)
              {
                *(_DWORD *)v28 = 136315394;
                *(_QWORD *)&v28[4] = "discoveryManager_logDiscoverers";
                v29 = 2114;
                v30 = Mutable;
                LODWORD(v23) = 22;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v2 = a2;
            }
            if (Mutable)
              CFRelease(Mutable);
            Mutable = CFStringCreateMutable(v4, 0);
          }
          ++v9;
          ++v10;
          if (Count == v9)
            goto LABEL_52;
        }
        CFStringAppendFormat(Mutable, 0, CFSTR("\n \t\t[%d] %@=%@"), v9, *(_QWORD *)v28, cf[0]);
        goto LABEL_22;
      }
LABEL_52:
      if (Mutable)
LABEL_53:
        CFRelease(Mutable);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("Discoverers %ld\n"), 0);
      if (Mutable)
        goto LABEL_53;
    }
    if (Copy)
      CFRelease(Copy);
    ++v3;
  }
  while (v3 != 9);
}

uint64_t discoverer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v15;
  CFTypeRef *v16;
  uint64_t v17;
  const __CFArray *v18;
  CFTypeRef v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v12 = 4294949956;
    goto LABEL_9;
  }
  v10 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DiscoveryMode")))
  {
    DerivedStorage = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
    {
LABEL_8:
      v12 = 0;
      *a4 = DerivedStorage;
      goto LABEL_9;
    }
LABEL_4:
    DerivedStorage = (uint64_t)CFRetain((CFTypeRef)DerivedStorage);
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("clientPID")))
  {
    v11 = (const void *)(v10 + 12);
LABEL_7:
    DerivedStorage = (uint64_t)CFNumberCreate(a3, kCFNumberSInt32Type, v11);
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("clientName")))
  {
    DerivedStorage = *(_QWORD *)(v10 + 16);
    if (!DerivedStorage)
      goto LABEL_8;
    goto LABEL_4;
  }
  if (CFEqual(a2, CFSTR("BluetoothRoutesOnly")))
  {
    DerivedStorage = *(_QWORD *)(v10 + 24);
    if (!DerivedStorage)
      goto LABEL_8;
    goto LABEL_4;
  }
  if (CFEqual(a2, CFSTR("audioSessionID")))
  {
    v11 = (const void *)(v10 + 8);
    goto LABEL_7;
  }
  DerivedStorage = CFEqual(a2, CFSTR("discoversLocalRoute"));
  if (!(_DWORD)DerivedStorage)
  {
    if (CFEqual(a2, CFSTR("discovererUUID")))
    {
      DerivedStorage = *(_QWORD *)(v10 + 56);
      if (!DerivedStorage)
        goto LABEL_8;
      goto LABEL_4;
    }
    if (CFEqual(a2, CFSTR("OnBehalfOf")))
    {
      DerivedStorage = *(_QWORD *)(v10 + 32);
      if (!DerivedStorage)
        goto LABEL_8;
      goto LABEL_4;
    }
    if (CFEqual(a2, CFSTR("routePresent")))
    {
      DerivedStorage = FigRouteDiscoveryManagerCopyRoutePresentForType((uint64_t)a3, *(_DWORD *)(v10 + 40), (uint64_t)a4);
      v12 = DerivedStorage;
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("userSelectionAvailable")))
    {
      MEMORY[0x1940352BC](*(_QWORD *)(v10 + 64));
      if (*(_BYTE *)(v10 + 72))
        v16 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      else
        v16 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v19 = *v16;
      if (*v16)
        v19 = CFRetain(v19);
      *a4 = v19;
      if (dword_1EE2B3DE8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      DerivedStorage = MEMORY[0x1940352C8](*(_QWORD *)(v10 + 64));
LABEL_48:
      v12 = 0;
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
      v17 = FigGetUpTimeNanoseconds();
      MEMORY[0x1940352BC](*(_QWORD *)(v10 + 64));
      v18 = (const __CFArray *)*(id *)(v10 + 88);
      if ((unint64_t)(v17 - *(_QWORD *)(v10 + 48)) > 0x2540BE3FFLL)
        *(_QWORD *)(v10 + 48) = v17;
    }
    else
    {
      DerivedStorage = CFEqual(a2, CFSTR("availableRouteDescriptors"));
      if (!(_DWORD)DerivedStorage)
      {
        v12 = 4294954512;
        goto LABEL_9;
      }
      if (FigCFEqual() && MX_FeatureFlags_IsCorianderEnabled())
      {
        DerivedStorage = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D20]);
        goto LABEL_8;
      }
      v21 = FigGetUpTimeNanoseconds();
      MEMORY[0x1940352BC](*(_QWORD *)(v10 + 64));
      v18 = (const __CFArray *)*(id *)(v10 + 80);
      if ((unint64_t)(v21 - *(_QWORD *)(v10 + 48)) > 0x2540BE3FFLL)
      {
        *(_QWORD *)(v10 + 48) = v21;
        MEMORY[0x1940352C8](*(_QWORD *)(v10 + 64));
        *a4 = v18;
        DerivedStorage = FigRouteDiscovererShouldLogForClient();
        if ((_DWORD)DerivedStorage)
          discoverer_logAvailableRouteDetails(*(_QWORD *)(v10 + 16), *(_DWORD *)(v10 + 40), v18);
        goto LABEL_48;
      }
    }
    DerivedStorage = MEMORY[0x1940352C8](*(_QWORD *)(v10 + 64));
    v12 = 0;
    *a4 = v18;
    goto LABEL_9;
  }
  v12 = 0;
  v15 = (_QWORD *)MEMORY[0x1E0C9AE40];
  if ((*(_DWORD *)(v10 + 40) & 0xFFFFFFFA) != 0)
    v15 = (_QWORD *)MEMORY[0x1E0C9AE50];
  *a4 = *v15;
LABEL_9:
  v13 = (void *)MEMORY[0x194035B20](DerivedStorage, v9);
  -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "discoverer_CopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  objc_autoreleasePoolPop(v13);
  return v12;
}

uint64_t discoveryManager_copyDiscovererFromWeakRef(const void *a1)
{
  CFTypeID v1;

  if (a1 && (v1 = CFGetTypeID(a1), v1 == FigCFWeakReferenceHolderGetTypeID()))
    return FigCFWeakReferenceHolderCopyReferencedObject();
  else
    return 0;
}

void __cmsSetAudioCategory_block_invoke(uint64_t a1)
{
  CMSUtility_UpdateRoutingContextForSession(*(void **)(a1 + 32));

}

void _routingContextUtilities_copyPickedEndpoints(uint64_t a1, _QWORD *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  const UInt8 *v9;
  CFTypeRef v10;
  const void *LeaderWeakRef;
  const UInt8 *ContextFromWeakRef;

  *a2 = 0;
  if (*(_DWORD *)a1 != 10)
  {
    if (_routingContextUtilities_getLeaderWeakRef(a1))
    {
      LeaderWeakRef = _routingContextUtilities_getLeaderWeakRef(a1);
      if (!LeaderWeakRef)
        return;
      ContextFromWeakRef = _routingContextUtilities_getContextFromWeakRef((uint64_t)LeaderWeakRef);
      if (!ContextFromWeakRef)
      {
        _routingContextUtilities_removeLeader(a1);
        return;
      }
      v10 = (CFTypeRef)*((_QWORD *)ContextFromWeakRef + 9);
      if (!v10)
        goto LABEL_16;
    }
    else
    {
      v10 = *(CFTypeRef *)(a1 + 72);
      if (!v10)
      {
LABEL_16:
        *a2 = v10;
        return;
      }
    }
LABEL_15:
    v10 = CFRetain(v10);
    goto LABEL_16;
  }
  _routingContextUtilities_pruneLeaders(*(const __CFArray **)(a1 + 80));
  v4 = *(const __CFArray **)(a1 + 80);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
        v9 = _routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex);
        if (v9)
        {
          v10 = (CFTypeRef)*((_QWORD *)v9 + 9);
          if (v10)
            break;
        }
        if (v6 == ++v7)
          return;
      }
      goto LABEL_15;
    }
  }
}

const void *_routingContextUtilities_getLeaderWeakRef(uint64_t a1)
{
  if (a1 && CFArrayGetCount(*(CFArrayRef *)(a1 + 80)) >= 1)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), 0);
  else
    return 0;
}

CFMutableArrayRef routingContextUtilities_copyEndpointNames(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  __CFArray *Mutable;
  CFIndex v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, uint64_t, uint64_t, void **);
  void *value;

  if (!a1)
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Count = CFArrayGetCount(a1);
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    v5 = 0;
    v6 = *MEMORY[0x1E0CA4348];
    do
    {
      CFArrayGetValueAtIndex(a1, v5);
      value = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v8)
        v8(CMBaseObject, v6, v3, &value);
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        if (value)
          CFRelease(value);
      }
      ++v5;
    }
    while (Count != v5);
  }
  return Mutable;
}

BOOL FigRouteDiscovererShouldLogForClient()
{
  return FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual() != 0;
}

void CMSMUtility_NotifyEachMatchingSession(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  CMSMUtility_ApplyForEachMatchingSessionGuts(a1, a2, a3, 0, a4, a5, a6);
}

void _routingContextUtilities_copyPickedEndpointAtIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  const __CFArray *v5;
  CFIndex Count;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  _routingContextUtilities_copyPickedEndpoints(a1, &theArray);
  v5 = theArray;
  if (a2 < 0 || (!theArray ? (Count = 0) : (Count = CFArrayGetCount(theArray)), Count <= a2))
  {
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, a2);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
  }
  *a3 = ValueAtIndex;
  if (v5)
    CFRelease(v5);
}

void __cmsCopyInitialRouteSharingPolicyToSession_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[7];

  v2 = MX_CoreServices_CopyInitialRouteSharingPolicyForBundleID(*(_QWORD *)(a1 + 40));
  v3 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2;
  v5[3] = &unk_1E30995F0;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = v2;
  v5[6] = v4;
  MXDispatchAsync((uint64_t)"cmsCopyInitialRouteSharingPolicyToSession_block_invoke", (uint64_t)"CMSessionManager.m", 6565, 0, 0, v3, (uint64_t)v5);
}

void *MX_CoreServices_CopyInitialRouteSharingPolicyForBundleID(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = 0;
  if (a1 && gCoreServicesIsInitialized)
  {
    v2 = (void *)objc_msgSend((id)gLSApplicationProxyClass, "applicationProxyForIdentifier:", a1);
    v3 = (id)objc_opt_new();
    objc_msgSend(v3, "addObject:", CFSTR("AVInitialRouteSharingPolicy"));
    v1 = (void *)objc_msgSend((id)objc_msgSend(v2, "objectsForInfoDictionaryKeys:", v3), "stringForKey:", CFSTR("AVInitialRouteSharingPolicy"));
    v4 = v1;
  }
  return v1;
}

__CFString *routingContextUtilities_getFeatureString(int a1)
{
  if ((a1 - 1) > 0xD)
    return 0;
  else
    return off_1E30997B0[a1 - 1];
}

void __cmsmApplicationStateChangedNotificationCallback_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_DoesInheritApplicationStateFromPID, *(_QWORD *)(a1 + 32), (unint64_t)CMSUtilityApplier_InheritApplicationStateAndPostApplicationStateDidChangeNotification, *(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t CMSessionMgrHandleApplicationStateChange(const __CFNumber *a1, CFNumberRef number, uint64_t a3)
{
  _BOOL4 BackgroundEntitlement;
  void *CMSessionWithDisplayID;
  NSObject *v8;
  const __CFString *StringForApplicationState;
  const char *v10;
  const char *v11;
  _BOOL4 v12;
  const char *v13;
  uint64_t result;
  MXSessionManager *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  MXNowPlayingAppManager *v21;
  uint64_t v22;
  int v23;
  uint64_t valuePtr;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const __CFString *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (!number)
    return 4294954315;
  CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (a1)
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if ((int)valuePtr < 1)
    return 4294954315;
  CMSessionMgrSetApplicationStateFromPID(valuePtr, HIDWORD(valuePtr));
  CMSMNotificationUtility_PostApplicationStateDidChange(number, a1);
  BackgroundEntitlement = CMSMUtility_FetchBackgroundEntitlement(valuePtr);
  CMSessionWithDisplayID = CMSMUtility_GetCMSessionWithDisplayID(a3);
  v8 = MXGetSessionLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = objc_msgSend(CMSessionWithDisplayID, "clientName");
    v23 = valuePtr;
    StringForApplicationState = CMSMUtility_GetStringForApplicationState(HIDWORD(valuePtr));
    if (BackgroundEntitlement)
      v10 = "YES";
    else
      v10 = "NO";
    if (CMSUtility_IsLongFormVideoSession(CMSessionWithDisplayID))
      v11 = "YES";
    else
      v11 = "NO";
    v12 = -[MXSessionManager isLongFormVideoApp:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isLongFormVideoApp:", a3);
    *(_DWORD *)buf = 136448770;
    v26 = "-CMSessionMgr-";
    v27 = 2082;
    if (v12)
      v13 = "YES";
    else
      v13 = "NO";
    v28 = "CMSessionMgrHandleApplicationStateChange";
    v29 = 1024;
    v30 = 16816;
    v31 = 2114;
    v32 = a3;
    v33 = 2114;
    v34 = v22;
    v35 = 2048;
    v36 = CMSessionWithDisplayID;
    v37 = 1024;
    v38 = v23;
    v39 = 2114;
    v40 = StringForApplicationState;
    v41 = 2082;
    v42 = v10;
    v43 = 2082;
    v44 = v11;
    v45 = 2082;
    v46 = v13;
    _os_log_impl(&dword_1935FC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Client %{public}@ with session %{public}@ [%p] with pid '%d' is now %{public}@. Background entitlement: %{public}s ActiveLongFormVideoSession: %{public}s IsLongFormVideoApp %{public}s", buf, 0x68u);
  }
  result = 0;
  switch(HIDWORD(valuePtr))
  {
    case 1:
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled())
      {
        v15 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
        -[MXSessionManager removeEntryFromMutedBundleIDCache:bundleID:](v15, "removeEntryFromMutedBundleIDCache:bundleID:", valuePtr, 0);
      }
      goto LABEL_42;
    case 2:
      -[NSArray containsObject:](-[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs"), "containsObject:", a1);
      if (!CMSMUtility_DoesActiveAirPlayVideoSessionExistForPID(valuePtr))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID((uint64_t)a1, 1);
      }
      CMSystemSoundMgr_DeactivateSystemSoundsForPID(valuePtr);
      CMSystemSoundMgr_StopSystemSoundsforPID();
      goto LABEL_42;
    case 4:
      if (BackgroundEntitlement)
      {
        if (CMSMUtility_AnySessionBelongingToPIDIsActiveAndStopsWhenBackgrounded(valuePtr))
        {
          CMSMNotificationUtility_PostPauseCommandToPlayingLockStoppers((uint64_t)a1);
          if (dword_1EE2B3F38)
          {
            v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMNotificationUtility_PostStopCommandToActiveLockStoppers((uint64_t)a1);
          CMSystemSoundMgr_StopSystemSoundsforPID();
        }
      }
      else if (!CMSUtility_SessionWithPIDCanContinueAirPlayingVideoIfScreenIsLocked(valuePtr))
      {
        CMSMNotificationUtility_PostPauseCommandNotificationToMatchingNotStoppedClients((uint64_t)a1);
        if (dword_1EE2B3F38)
        {
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID((uint64_t)a1, 1);
        CMSystemSoundMgr_StopSystemSoundsforPID();
        v20 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
        if (v20 == (_DWORD)valuePtr)
        {
          v21 = +[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance");
          -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](v21, "updateNowPlayingApp:session:reasonForUpdate:", valuePtr, 0, 2);
        }
      }
      CMSystemSoundMgr_DeactivateSystemSoundsForPID(valuePtr);
      goto LABEL_42;
    case 8:
      if (BackgroundEntitlement)
      {
        if (!CMSUtility_SessionWithPIDWasLockStopper(valuePtr))
        {
          CMSystemSoundMgr_ActivateSystemSoundsForPID(valuePtr);
          goto LABEL_42;
        }
        buf[0] = 0;
        CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsMatchingLockStopperThatMustResume, (uint64_t)a1, (unint64_t)CMSUtilityApplier_ResumeWaitingLockStopper, (uint64_t)buf);
        if (dword_1EE2B3F38)
          goto LABEL_30;
      }
      else
      {
        CMSMNotificationUtility_PostResumeCommandToMatchingWaitingClients((uint64_t)a1);
        if (dword_1EE2B3F38)
        {
LABEL_30:
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CMSMNotificationUtility_PostEndInterruptionCommandToMatchingWaitingClients((uint64_t)a1);
LABEL_42:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void CMSMUtility_ApplyForEachMatchingSession(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5)
{
  CMSMUtility_ApplyForEachMatchingSessionGuts(a1, a2, a3, a4, 0, a5, 0);
}

const __CFString *CMSMUtility_GetStringForApplicationState(unsigned int a1)
{
  if (a1 > 8)
    return CFSTR("(really) Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E309CBA0 + (int)a1);
}

uint64_t MXGetSessionLog()
{
  if (MXGetSessionLog_onceToken != -1)
    dispatch_once(&MXGetSessionLog_onceToken, &__block_literal_global_3_0);
  return MXGetSessionLog__log;
}

void sub_193603EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSessionMgrSetApplicationStateFromPID(int a1, unsigned int a2)
{
  const __CFAllocator *v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  BOOL v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v8;
  int valuePtr;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  valuePtr = a1;
  if (a2 <= 8 && ((1 << a2) & 0x117) != 0)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &v8);
    v5 = v4;
    if (v3)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsSameClient, (uint64_t)v3, (unint64_t)CMSUtilityApplier_SetApplicationState, (uint64_t)v4);
      goto LABEL_11;
    }
    if (v3)
    {
LABEL_11:
      CFRelease(v3);
      if (!v5)
        return;
      goto LABEL_12;
    }
    if (v4)
LABEL_12:
      CFRelease(v5);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CMSMNotificationUtility_PostApplicationStateDidChange(void *a1, const void *a2)
{
  const __CFString *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  CFIndex v7;
  void *v8;
  CFDictionaryRef v9;
  NSObject *v10;
  _QWORD v11[7];
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v4 = CFSTR("ApplicationState");
  v5 = a1 != 0;
  v6 = CFSTR("ApplicationState") != 0;
  v7 = v5 & v6;
  if (v5 && v6)
  {
    v8 = a1;
  }
  else
  {
    v4 = 0;
    v8 = 0;
  }
  keys[0] = (void *)v4;
  values = v8;
  v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, v7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
    CFRetain(a2);
  if (a1)
    CFRetain(a1);
  v10 = MXGetNotificationSenderQueue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CMSMNotificationUtility_PostApplicationStateDidChange_block_invoke;
  v11[3] = &__block_descriptor_56_e5_v8__0l;
  v11[4] = a2;
  v11[5] = v9;
  v11[6] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostApplicationStateDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1080, 0, 0, v10, (uint64_t)v11);
}

uint64_t FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID(int a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  _QWORD v18[7];
  int v19;
  int v20;

  result = 4294954296;
  if (a3 && a4)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v12 = CFArrayCreateMutable(v9, 0, v10);
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v13 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v13 = 0;
    v14 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v14 = 504;
    v15 = *(NSObject **)v14;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID_block_invoke;
    v18[3] = &__block_descriptor_64_e5_v8__0l;
    v19 = a2;
    v20 = a1;
    v18[4] = v13;
    v18[5] = Mutable;
    v18[6] = v12;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID", (uint64_t)"FigRoutingManagerContextUtilities.m", 3738, 0, 0, v15, (uint64_t)v18);
    if (Mutable)
      v16 = CFRetain(Mutable);
    else
      v16 = 0;
    *a3 = v16;
    if (v12)
      v17 = CFRetain(v12);
    else
      v17 = 0;
    *a4 = v17;
    if (Mutable)
      CFRelease(Mutable);
    if (v12)
      CFRelease(v12);
    return 0;
  }
  return result;
}

void CMSMNotificationUtility_PostEndInterruptionCommandToMatchingWaitingClients(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsSameClientAndWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground, a1, (unint64_t)CMSUtilityApplier_PostNotification_EndInterruptionCommand, a1);
}

uint64_t CMSUtility_SessionWithPIDWasLockStopper(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1
          && (objc_msgSend(v7, "stopsWhenDeviceLocks") & 1) != 0)
        {
          v8 = 1;
          goto LABEL_12;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

void vaemPostAvailableEndpointsChangedNotification(char a1)
{
  NSObject *v2;
  _QWORD v3[4];
  char v4;

  if (qword_1EE2B3BE0)
  {
    CFRetain((CFTypeRef)qword_1EE2B3BE0);
    v2 = MXGetNotificationSenderQueue();
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __vaemPostAvailableEndpointsChangedNotification_block_invoke;
    v3[3] = &__block_descriptor_33_e5_v8__0l;
    v4 = a1;
    MXDispatchAsync((uint64_t)"vaemPostAvailableEndpointsChangedNotification", (uint64_t)"CMSessionManager_VAEndpointManager.m", 11135, 0, 0, v2, (uint64_t)v3);
  }
}

void __vaemPostAvailableEndpointsChangedNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (*(_BYTE *)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease((CFTypeRef)qword_1EE2B3BE0);
}

uint64_t __cmsmUpdatePickableRouteDescriptionLists_block_invoke(uint64_t a1)
{
  return CMSMNotificationUtility_PostPickableRoutesDidChange(*(_BYTE *)(a1 + 32));
}

uint64_t CMSMNotificationUtility_PostPickableRoutesDidChange(char a1)
{
  NSObject *v2;
  _QWORD v4[4];
  char v5;

  v2 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostPickableRoutesDidChange_block_invoke;
  v4[3] = &__block_descriptor_33_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostPickableRoutesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1157, 0, 0, v2, (uint64_t)v4);
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("PickableRoutesDidChange"), 0, 1);
}

uint64_t __vaemVADSerializationListener_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](gCMSM);
  CMSMVAUtility_AudioObjectSetPropertyData();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return MEMORY[0x1940352C8](gCMSM);
}

uint64_t __vaemVADRouteChangeListener_block_invoke()
{
  return cmsmUpdatePickableRouteDescriptionLists(1);
}

uint64_t __cmsSetIsActive_block_invoke(uint64_t a1)
{
  return CMSUtility_DeactivateTimerHandler(objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "ID"), "longLongValue"), *(double *)(a1 + 40));
}

void CMSMNotificationUtility_PostResumeCommandToMatchingWaitingClients(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsSameClientAndWaitingToResumeWhenDeviceUnlocksOrInForeground, a1, (unint64_t)CMSUtilityApplier_PostNotification_ResumeCommand, a1);
}

uint64_t CMSystemSoundMgr_DeactivateSystemSoundsForPID(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  int v4;

  if (gCMSS_1)
  {
    v1 = result;
    MEMORY[0x1940352BC](gCMSS_12);
    for (i = gCMSS_0; i; i = *(_QWORD *)i)
    {
      if (*(_DWORD *)(i + 12) == (_DWORD)v1)
      {
        if (*(_BYTE *)(i + 16) && *(_BYTE *)(i + 18))
        {
          v3 = *(unsigned int *)(i + 8);
          v4 = v1;
          if ((v3 - 1103) <= 2)
          {
            cmsmRemoveSystemSoundAudioCategoriesThatMixIn(v1);
            v3 = *(unsigned int *)(i + 8);
            v4 = *(_DWORD *)(i + 12);
          }
          cmsmPrewarmAudioForSSID(0, v3, v4);
          *(_BYTE *)(i + 18) = 0;
        }
        if (*(_BYTE *)(i + 17))
        {
          if (*(_BYTE *)(i + 19))
          {
            cmsmPrewarmVibeForSSID(0, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
            *(_BYTE *)(i + 19) = 0;
          }
        }
        CMSMSleep_ReleasePrewarmIdleSleepPreventor(*(_DWORD *)(i + 8), *(_DWORD *)(i + 12));
      }
    }
    JUMPOUT(0x1940352C8);
  }
  return result;
}

void CMSMNotificationUtility_PostVideoStreamsDidChange()
{
  id CurrentlyAirPlayingVideoStreamsDictionary;
  const void *v1;

  CurrentlyAirPlayingVideoStreamsDictionary = CMSMUtility_CreateCurrentlyAirPlayingVideoStreamsDictionary((uint64_t)CFSTR("BundleID"), (uint64_t)CFSTR("VideoRoutes"));
  if (!FigCFEqual())
  {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("VideoStreamsDidChange"), CurrentlyAirPlayingVideoStreamsDictionary, 0);
    v1 = (const void *)CMSMNotificationUtility_PostVideoStreamsDidChange_cachedVideoStreamsPayload;
    CMSMNotificationUtility_PostVideoStreamsDidChange_cachedVideoStreamsPayload = (uint64_t)CurrentlyAirPlayingVideoStreamsDictionary;
    if (CurrentlyAirPlayingVideoStreamsDictionary)
      CFRetain(CurrentlyAirPlayingVideoStreamsDictionary);
    if (v1)
      CFRelease(v1);
  }
  if (CurrentlyAirPlayingVideoStreamsDictionary)
    CFRelease(CurrentlyAirPlayingVideoStreamsDictionary);
}

void sub_193606120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id FigRouteDiscoveryManagerCopyCachedAudioSessionRouteInformation()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v0 = (uint64_t)&qword_1EE2B3330;
  else
    v0 = 256;
  if (qword_1EE2B3238)
    v1 = (uint64_t)&qword_1EE2B3340;
  else
    v1 = 272;
  MEMORY[0x1940352F8](*(_QWORD *)v0);
  v2 = *(id *)v1;
  MEMORY[0x194035304](*(_QWORD *)v0);
  return v2;
}

uint64_t FigRouteDiscoveryManagerAddDiscoverer(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  const void *v5;
  __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  __CFArray **v9;
  __CFArray *v10;
  uint64_t v11;
  __CFArray *v12;
  uint64_t v13;
  uint64_t v14;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v3 = qword_1EE2B3238;
  if (qword_1EE2B3238)
    v4 = &discoverManager_getSharedManager_discoveryState;
  else
    v4 = 0;
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  v6 = *(__CFArray **)&v4[24 * a2 + 24];
  discoveryManager_logDiscoverers((uint64_t)v4, 0);
  if (a2 == 3)
  {
    v11 = (uint64_t)&unk_1EE2B3278;
    if (!v3)
      v11 = 72;
    v12 = *(__CFArray **)v11;
    v13 = 48;
    if (v3)
      v13 = (uint64_t)&unk_1EE2B3260;
    v6 = *(__CFArray **)v13;
    if (v3)
      v14 = (uint64_t)&qword_1EE2B3330;
    else
      v14 = 256;
    MEMORY[0x1940352F8](*(_QWORD *)v14);
    CFArrayAppendValue(v12, v5);
    goto LABEL_29;
  }
  if (a2 != 6)
  {
    if (v3)
      v14 = (uint64_t)&qword_1EE2B3330;
    else
      v14 = 256;
    MEMORY[0x1940352F8](*(_QWORD *)v14);
LABEL_29:
    CFArrayAppendValue(v6, v5);
    MEMORY[0x194035304](*(_QWORD *)v14);
    goto LABEL_30;
  }
  v7 = 0;
  if (v3)
    v8 = (uint64_t)&qword_1EE2B3330;
  else
    v8 = 256;
  v9 = (__CFArray **)(v4 + 24);
  do
  {
    if (v7 != 3 && v7 != 6)
    {
      v10 = *v9;
      MEMORY[0x1940352F8](*(_QWORD *)v8);
      CFArrayAppendValue(v10, v5);
      MEMORY[0x194035304](*(_QWORD *)v8);
    }
    ++v7;
    v9 += 3;
  }
  while (v7 != 9);
LABEL_30:
  discoveryManager_logDiscoverers((uint64_t)v4, 0);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t CMSMUtility_AnySessionBelongingToPIDIsActiveAndStopsWhenBackgrounded(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1
          && objc_msgSend(v7, "stopsWhenDeviceLocks")
          && (objc_msgSend(v7, "isActive") & 1) != 0)
        {
          v8 = 1;
          goto LABEL_13;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

CFTypeRef FigRoutingManagerCopyFirstEndpointToAutoConnect(CFArrayRef theArray)
{
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v9;
  CFTypeRef v10;
  CFTypeRef cf;

  v2 = 0;
  v3 = *MEMORY[0x1E0CA4130];
  v4 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    v5 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v5)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
      v8(CMBaseObject, v3, v4, &cf);
    v9 = FigCFEqual();
    v10 = 0;
    if (ValueAtIndex && v9)
      v10 = CFRetain(ValueAtIndex);
    if (cf)
      CFRelease(cf);
    ++v2;
    if (v10)
      return v10;
  }
  return 0;
}

uint64_t CMSystemSoundMgr_ActivateSystemSoundsForPID(uint64_t result)
{
  int v1;
  uint64_t i;

  if (gCMSS_1)
  {
    v1 = result;
    MEMORY[0x1940352BC](gCMSS_12);
    for (i = gCMSS_0; i; i = *(_QWORD *)i)
    {
      if (*(_DWORD *)(i + 12) == v1)
      {
        if (*(_BYTE *)(i + 16) && !*(_BYTE *)(i + 18))
        {
          cmsmPrewarmAudioForSSID(1, *(unsigned int *)(i + 8), v1);
          *(_BYTE *)(i + 18) = 1;
        }
        if (*(_BYTE *)(i + 17))
        {
          if (!*(_BYTE *)(i + 19))
          {
            cmsmPrewarmVibeForSSID(1, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
            *(_BYTE *)(i + 19) = 1;
          }
        }
        CMSMSleep_CreatePrewarmIdleSleepPreventor(*(unsigned int *)(i + 8), *(unsigned int *)(i + 12));
      }
    }
    JUMPOUT(0x1940352C8);
  }
  return result;
}

uint64_t CMSMUtility_SomeClientIsPlaying()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isPlaying") && !objc_msgSend(v5, "doesntActuallyPlayAudio"))
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

void *CMSUtility_CopyActiveDuckerForSession(void *a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v2);
      v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v6);
      if (objc_msgSend(v7, "isActive"))
      {
        if (objc_msgSend(v7, "interruptionStyle") == 32
          && CMSUtilityPredicate_ShouldDuck(v7, a1))
        {
          break;
        }
      }
      if (v4 == ++v6)
      {
        v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v7 = 0;
  }
  v8 = v7;
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v7;
}

uint64_t CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(void *a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if ((objc_msgSend(v7, "isIDSMXCoreSession") & 1) == 0)
        {
          v8 = objc_msgSend(v7, "isHardwareSafetySession");
          if (v7 != a1 && (v8 & 1) == 0 && CMSUtility_IsNonIDSClientActiveOnDestination(v7))
          {
            v9 = 1;
            goto LABEL_14;
          }
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v9;
}

uint64_t CMSUtility_IsNonIDSClientActiveOnDestination(void *a1)
{
  uint64_t result;
  uint64_t v3;

  if ((objc_msgSend(a1, "isIDSMXCoreSession") & 1) != 0)
    return 0;
  result = objc_msgSend(a1, "isActive");
  if ((_DWORD)result)
  {
    if ((objc_msgSend(a1, "doesntActuallyPlayAudio") & 1) != 0
      || (objc_msgSend(a1, "hwControlFlags") & 0x20000) == 0 && (objc_msgSend(a1, "hwControlFlags") & 2) == 0)
    {
      return 0;
    }
    v3 = objc_msgSend(a1, "audioDestinationPriority");
    if (a1)
    {
      if (v3)
        -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v3);
    }
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t CMSMUtility_PhoneCallOrRingtoneExists()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if ((objc_msgSend(v5, "isIDSMXCoreSession") & 1) == 0
          && objc_msgSend(v5, "isActive")
          && ((objc_msgSend(v5, "hasPhoneCallBehavior") & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5)))
        {
          v6 = 1;
          goto LABEL_14;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

void *CMSUtility_IsAudioCategoryRingtone(void *result)
{
  if (result)
  {
    objc_msgSend(result, "audioCategory");
    return (void *)FigCFEqual();
  }
  return result;
}

void vaemConfigurePVMSettings(const __CFString *a1, int a2)
{
  __CFArray *v4;
  __CFArray *v5;
  int NumberOfCurrentOutputPorts;
  int v7;
  CFIndex v8;
  void *ControllingRoutingSession;
  void *SharePlayCapableActiveMediaSession;
  NSObject *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v13;
  __int128 v14;
  __int128 v15;
  const void *v16;
  char v17;
  char v18;
  const void *v19;
  __int128 v20;
  __int128 v21;
  const void *v22;
  char v23;
  char DoesPortSupportDoAP;
  id v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  float v29;
  NSObject *v30;
  const __CFString *v31;
  const void *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t VolumeSequenceNumber;
  const __CFString *v40;
  const __CFString *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!PVMGetEnabled())
    PVMSetEnabled(1);
  vaemCurrentRouteHasVolumeControlListenerGuts();
  v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  v5 = CMSMUtility_CopyCurrentRouteTypes();
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!FigCFArrayContainsValue() || (v7 = 1, a2 != 1919904885) && a2 != 1919971701)
  {
    if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue())
    {
LABEL_15:
      v7 = 0;
      goto LABEL_16;
    }
    if (NumberOfCurrentOutputPorts)
    {
      v8 = 0;
      do
      {
        CFArrayGetValueAtIndex(v5, v8);
        if (FigCFEqual() || FigCFEqual())
        {
          CFArrayGetValueAtIndex(v4, v8);
          if (FigCFEqual())
            goto LABEL_15;
        }
      }
      while (NumberOfCurrentOutputPorts != ++v8);
    }
    v7 = 1;
  }
LABEL_16:
  ControllingRoutingSession = CMSMUtility_GetControllingRoutingSession();
  if (ControllingRoutingSession)
  {
    objc_msgSend(ControllingRoutingSession, "audioMode");
    if (FigCFEqual())
    {
      if (FigCFEqual())
        a1 = CFSTR("VideoChatForMedia");
    }
  }
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v45);
  if (!CMSMUtility_IsSiriControllingRoutingAndNotVolume())
  {
    SharePlayCapableActiveMediaSession = CMSMUtility_GetSharePlayCapableActiveMediaSession();
    v43 = v7;
    if (CMSMUtility_IsSharePlayCapableCallSessionActive()
      && SharePlayCapableActiveMediaSession
      && (objc_msgSend(SharePlayCapableActiveMediaSession, "currentlyControllingFlags") & 0x10) != 0)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v41 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v34, v36), "getUncustomizedCategory:", objc_msgSend(SharePlayCapableActiveMediaSession, "audioCategory"));
      v19 = (const void *)objc_msgSend(SharePlayCapableActiveMediaSession, "audioMode");
      v20 = v46;
      v21 = v45;
      v22 = (const void *)v47;
      v23 = byte_1EE2B3BE8;
      DoesPortSupportDoAP = vaeDoesPortSupportDoAP(DWORD2(v47));
      VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
      PVMSetCurrentState(v41, v19, (void *)v21, (void *)v20, *((const void **)&v20 + 1), *((const __CFString **)&v21 + 1), v22, v43, v23, DoesPortSupportDoAP, VolumeSequenceNumber);
    }
    else
    {
      v40 = a1;
      if (dword_1EE2B3F38)
      {
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v13 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v34, v36), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"));
      v14 = v46;
      v15 = v45;
      v16 = (const void *)v47;
      v17 = byte_1EE2B3BE8;
      v18 = vaeDoesPortSupportDoAP(DWORD2(v47));
      v37 = CMSMUtility_GetVolumeSequenceNumber();
      PVMSetCurrentState(v13, v40, (void *)v15, (void *)v14, *((const void **)&v14 + 1), *((const __CFString **)&v15 + 1), v16, v43, v17, v18, v37);
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      v25 = -[MXAdditiveRoutingManager copyActiveVoiceOverSessionPlayingToOnDemandVAD](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyActiveVoiceOverSessionPlayingToOnDemandVAD");
      if (v25)
      {
        v26 = *((_QWORD *)&v45 + 1);
        v27 = v46;
        v28 = v47;
        v48 = *((_QWORD *)&v45 + 1);
        v49 = v45;
        v44 = v45;
        v50 = *((_QWORD *)&v46 + 1);
        v51 = v46;
        v52 = v47;
        v29 = PVMGetVolumePreference(CFSTR("VoiceOver"), CFSTR("Default"), (uint64_t)&v48);
        v42 = CMSMUtility_GetVolumeSequenceNumber();
        if (dword_1EE2B3F38)
        {
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        -[MXSessionManager setVoiceOverVADVolumeNeedsUpdate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v35, v38), "setVoiceOverVADVolumeNeedsUpdate:", 1);
        v31 = (const __CFString *)objc_msgSend(v25, "audioCategory");
        v32 = (const void *)objc_msgSend(v25, "audioMode");
        v48 = v26;
        v49 = v44;
        v50 = *((_QWORD *)&v27 + 1);
        v51 = v27;
        v52 = v28;
        if (PVMSetRawVolumePreference(v31, v32, (uint64_t)&v48, v42, 1, 0, v29))
        {
          v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }

    }
    vaemUpdatePVMSettingsForInputGain();
  }
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
}

NSString *CMSMUtility_CopyCurrentlyActiveCategory()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  NSString *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v5, "audioCategory")))
        {
          v6 = -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory");
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_IsSharePlayCapableCallSessionActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (CMSUtility_GetIsActive(v5) && (objc_msgSend(v5, "isSharePlayCapableCallSession") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_14;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
{
  int v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  CFTypeRef cf;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActive") && (objc_msgSend(v6, "isPlaying") & 1) != 0)
        {
          v7 = 1;
        }
        else if (objc_msgSend(v6, "isActive")
               && objc_msgSend(v6, "isActiveOverAirPlayVideo"))
        {
          v7 = objc_msgSend(v6, "isAudioOnlyAirPlayVideoActive") ^ 1;
        }
        else
        {
          v7 = 0;
        }
        v8 = objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue") != v0 || v7 == 0;
        if (!v8 && CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(v6))
        {
          cf = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(objc_msgSend(v6, "routingContextUUID"), 0, (uint64_t)&cf);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)
            || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
          {
            if (cf)
              CFRelease(cf);
            v9 = 1;
            goto LABEL_28;
          }
          if (cf)
            CFRelease(cf);
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v3)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_28:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v9;
}

void *CMSUtility_GetIsActive(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isActive");
  return result;
}

void *CMSUtility_GetIsEligibleForNowPlayingAppConsideration(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isEligibleForNowPlayingAppConsideration");
  return result;
}

void *CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    result = (void *)objc_msgSend(result, "isEligibleForNowPlayingAppConsideration");
    if ((_DWORD)result)
    {
      result = (void *)objc_msgSend(v1, "allowedToBeNowPlayingApp");
      if ((_DWORD)result)
        return (void *)+[MXSystemController getCanBeNowPlayingAppForPID:](MXSystemController, "getCanBeNowPlayingAppForPID:", objc_msgSend((id)objc_msgSend(v1, "clientPID"), "intValue"));
    }
  }
  return result;
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange()
{
  uint64_t result;
  int v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = CMSMNP_GetNowPlayingAppIsPlaying();
  if (CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange_nowPlayingAppIsPlayingCached != (_DWORD)result)
  {
    v1 = result;
    if ((_DWORD)result)
    {
      if (!qword_1EE2B3C80)
      {
        v4 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1), CFSTR("State"), -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID"), CFSTR("DisplayID"), 0);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        result = +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("NowPlayingAppIsPlayingDidChange"), v4, 0, v6, v7);
        goto LABEL_16;
      }
      dispatch_source_cancel((dispatch_source_t)qword_1EE2B3C80);
      if (qword_1EE2B3C80)
      {
        dispatch_release((dispatch_object_t)qword_1EE2B3C80);
        qword_1EE2B3C80 = 0;
      }
      v2 = MXGetSerialQueue();
      result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 0.25, (uint64_t)&__block_literal_global_16_0, 0, 0);
      qword_1EE2B3C80 = result;
      if (result)
      {
LABEL_16:
        CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange_nowPlayingAppIsPlayingCached = v1;
        return result;
      }
      LODWORD(result) = v1;
    }
    else
    {
      if (qword_1EE2B3C80)
      {
        dispatch_source_cancel((dispatch_source_t)qword_1EE2B3C80);
        if (qword_1EE2B3C80)
        {
          dispatch_release((dispatch_object_t)qword_1EE2B3C80);
          qword_1EE2B3C80 = 0;
        }
      }
      v3 = MXGetSerialQueue();
      result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v3, 0.25, (uint64_t)&__block_literal_global_18_2, 0, 0);
      qword_1EE2B3C80 = result;
      if (result)
        goto LABEL_16;
    }
    result = CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(result);
    goto LABEL_16;
  }
  return result;
}

uint64_t CMSMNP_GetNowPlayingAppIsPlaying()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  int v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!CMSMDeviceState_IsHomePodHub()
    && -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID") < 1)
  {
    return 0;
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive"))
        {
          if (objc_msgSend(v5, "isPlaying"))
          {
            if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v5))
            {
              v6 = objc_msgSend((id)objc_msgSend(v5, "clientPID"), "intValue");
              if (v6 == -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID"))
              {
                v7 = 1;
                goto LABEL_16;
              }
            }
          }
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v2)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_16:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v7;
}

void *CMSMUtility_GetSharePlayCapableActiveMediaSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
LABEL_4:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v8 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v4);
      if (objc_msgSend(v5, "isActive"))
      {
        if (CMSUtility_IsSharePlayCapableMediaSession(v5))
          break;
      }
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          goto LABEL_4;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSUtility_IsSharePlayCapableMediaSession(void *a1)
{
  uint64_t result;

  result = MX_FeatureFlags_IsSharePlayEnabled();
  if ((_DWORD)result)
  {
    if ((objc_msgSend(a1, "isSharePlayMediaSession") & 1) != 0)
      return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(a1, "routingContextUUID")) == 0;
    result = (uint64_t)CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1);
    if ((_DWORD)result)
      return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(a1, "routingContextUUID")) == 0;
  }
  return result;
}

void vaemUpdatePVMSettingsForInputGain()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  float v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (CMSMUtility_GetNumberOfCurrentInputPorts() != 1 && byte_1EE2B2C1B)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v1)
    {
      v2 = v1;
      v3 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v2; ++i)
        {
          if (*(_QWORD *)v8 != v3)
            objc_enumerationMutation(v0);
          v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * i);
          if (objc_msgSend(v5, "isActive")
            && (objc_msgSend(v5, "currentlyControllingFlags") & 2) != 0
            && objc_msgSend(v5, "desiredInputGainScalar"))
          {
            objc_msgSend((id)objc_msgSend(v5, "desiredInputGainScalar"), "floatValue");
            vaemSetDeviceInputGainScalar(v6);
            -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
            return;
          }
        }
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          continue;
        break;
      }
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    vaemSetInputGainFromPreferenceIfPresent();
  }
}

uint64_t vaemHandleVolumeControlDidChange(uint64_t result)
{
  int v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (byte_1EE2B3BE8 != (_DWORD)result)
  {
    v1 = result;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    byte_1EE2B3BE8 = v1;
    return CMSMNotificationUtility_PostCurrentRouteHasVolumeControlDidChange(v1);
  }
  return result;
}

void vaemCurrentRouteHasVolumeControlListenerGuts()
{
  uint64_t CurrentOutputPortAtIndex;
  int PortTypeFromPortID;
  uint64_t CurrentDeviceIdentifierAtIndex;
  OpaqueFigEndpoint *v4;
  const __CFBoolean *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, const __CFBoolean **);
  uint64_t Value;
  _BOOL8 HasVolumeControl;
  const __CFBoolean *v10;

  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  PortTypeFromPortID = vaeGetPortTypeFromPortID(CurrentOutputPortAtIndex);
  if (PortTypeFromPortID != 1885433971 && PortTypeFromPortID != 1885433953)
  {
    HasVolumeControl = vaemCurrentRouteHasVolumeControl();
    vaemHandleVolumeControlDidChange(HasVolumeControl);
    return;
  }
  CurrentDeviceIdentifierAtIndex = CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
  v4 = FigRoutingManagerCopyEndpointWithDeviceID(CurrentDeviceIdentifierAtIndex, 1, *MEMORY[0x1E0CA3A58], 0);
  v5 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
  v10 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
  if (v4)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA44A8], *MEMORY[0x1E0C9AE00], &v10);
      v5 = v10;
    }
    if (!v5)
      goto LABEL_14;
    Value = CFBooleanGetValue(v5);
    vaemHandleVolumeControlDidChange(Value);
    v5 = v10;
  }
  if (v5)
  {
    CFRelease(v5);
    v10 = 0;
  }
  if (v4)
LABEL_14:
    CFRelease(v4);
}

BOOL vaemCurrentRouteHasVolumeControl()
{
  OSStatus PropertyData;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  int outData;

  ioDataSize = 4;
  outData = 1;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"pscvptuo";
  inAddress.mElement = 0;
  PropertyData = AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
  return (PropertyData | outData) != 0;
}

uint64_t vaeDoesPortSupportDoAP(AudioObjectID a1)
{
  uint64_t result;
  OSStatus PropertyData;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;

  ioDataSize = 4;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F62646F6170;
  inAddress.mElement = 0;
  result = AudioObjectHasProperty(a1, &inAddress);
  if ((_DWORD)result)
  {
    PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
    result = 0;
    if (!PropertyData)
      return outData != 0;
  }
  return result;
}

uint64_t CMSMUtility_GetVolumeSequenceNumber()
{
  return FigAtomicIncrement64();
}

uint64_t CMSMUtility_GetNumberOfCurrentInputPorts()
{
  return dword_1EE2B3C2C;
}

uint64_t CMSMUtility_GetCurrentRouteInfoAtIndex@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  _OWORD v6[3];

  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28 > a1)
  {
    MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, a1, (uint64_t)v6);
    v4 = v6[1];
    *a2 = v6[0];
    a2[1] = v4;
    a2[2] = v6[2];
  }
  return MEMORY[0x1940352C8](gCMSM);
}

__CFArray *CMSMUtility_CopyCurrentRouteIdentifiers()
{
  __CFArray *Mutable;
  unint64_t v1;
  const __CFString *v2;
  uint64_t v4;
  const __CFString *v5;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28)
  {
    v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v1, (uint64_t)&v4);
      if (v5)
        v2 = v5;
      else
        v2 = &stru_1E30A1A48;
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1EE2B3C28);
  }
  MEMORY[0x1940352C8](gCMSM);
  return Mutable;
}

void sub_193609E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t CMSUtility_SessionWithPIDIsPlaying(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v7, "isPlaying")
          && objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          v8 = 1;
          goto LABEL_12;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

uint64_t MXSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  OS_dispatch_queue *v8;
  uint64_t UpTimeNanoseconds;
  int v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a1 && a2)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v8 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __MXSessionSetProperty_block_invoke;
      v13[3] = &unk_1E3099668;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 342, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = objc_msgSend(a1, "setPropertyForKey:value:", a2, a3);
      *((_DWORD *)v15 + 6) = v10;
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionSetProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
    }
    objc_autoreleasePoolPop(v7);
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_19360B44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19360B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSMUtility_ApplyForEachMatchingSessionGuts(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  uint64_t v29;
  id v31;
  id obj;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a4 || !a5)
  {
    if (!a4)
      a6 = 0;
    if (a4 | a5)
    {
      v29 = a6;
      v13 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
      v31 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      obj = v13;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v42;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v42 != v16)
              objc_enumerationMutation(obj);
            v18 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
            if ((!a2 || a2(a1, *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * i), a3))
              && (!a7
               || MX_RunningBoardServices_GetApplicationStateForPID(objc_msgSend((id)objc_msgSend(v18, "clientPID"), "intValue"), 0)- 1 >= 2))
            {
              objc_msgSend(v31, "addObject:", v18);
            }
          }
          v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
        }
        while (v15);
      }
      v19 = CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(v31);
      v20 = v19;
      if (a5)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
        if (v21)
        {
          v22 = v21;
          v23 = *(_QWORD *)v38;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v38 != v23)
                objc_enumerationMutation(v20);
              CMSMUtility_PostNotificationToSession(*(void **)(*((_QWORD *)&v37 + 1) + 8 * j), a5);
            }
            v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
          }
          while (v22);
        }
      }
      else if (a4)
      {
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v25 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
        if (v25)
        {
          v26 = v25;
          v27 = *(_QWORD *)v34;
          do
          {
            for (k = 0; k != v26; ++k)
            {
              if (*(_QWORD *)v34 != v27)
                objc_enumerationMutation(v20);
              ((void (*)(_QWORD, uint64_t))a4)(*(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * k), v29);
            }
            v26 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
          }
          while (v26);
        }
      }

    }
  }
}

uint64_t CMSUtilityPredicate_True()
{
  return 1;
}

CFNumberRef CMSUtilityPredicate_IsSameClient(int a1, void *a2, CFNumberRef number)
{
  CFNumberRef result;
  int v5;
  int valuePtr;

  result = number;
  if (number)
  {
    valuePtr = 0;
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return (CFNumberRef)(v5 == valuePtr);
  }
  return result;
}

BOOL CMSUtilityPredicate_DoesInheritApplicationStateFromPID(int a1, void *a2, CFNumberRef number)
{
  int v4;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!valuePtr)
    return 0;
  v4 = objc_msgSend(a2, "pidToInheritAppStateFrom");
  return v4 == valuePtr;
}

BOOL CMSUtilityPredicate_IsSameClientAndWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground(int a1, void *a2, CFNumberRef number)
{
  int v4;
  _BOOL8 result;
  int v6;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  v4 = objc_msgSend(a2, "waitingForEndInterruptionWhenDeviceUnlocksOrInForeground");
  result = 0;
  if (v4)
  {
    v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v6 == valuePtr;
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsSameClientAndWaitingToResumeWhenDeviceUnlocksOrInForeground(int a1, void *a2, CFNumberRef number)
{
  uint64_t result;
  int v5;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if ((objc_msgSend(a2, "waitingToResumeWhenDeviceUnlocksOrInForeground") & 1) != 0
    || (result = objc_msgSend(a2, "wasInterruptedByNowPlayingApp"), (_DWORD)result))
  {
    v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsMatchingLockStopperThatMustResume(int a1, void *a2, CFNumberRef number)
{
  uint64_t result;
  int v5;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (objc_msgSend(a2, "stopsWhenDeviceLocks")
    && (objc_msgSend(a2, "isPlaying") & 1) == 0
    && (objc_msgSend(a2, "waitingToResumeWhenDeviceUnlocksOrInForeground") & 1) != 0
    || (result = objc_msgSend(a2, "wasInterruptedByNowPlayingApp"), (_DWORD)result))
  {
    v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

CFArrayRef vaemCopyAvailableVADUIDs()
{
  if (qword_1EE2B2C38)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)qword_1EE2B2C38);
  else
    return 0;
}

void CMSMDebugUtility_PrintDictionary(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *context;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x194035B20]();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(a1);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  objc_autoreleasePoolPop(context);
}

void sub_19360DFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19360E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void CMSMDebugUtility_PrintCollection(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *context;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x194035B20]();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(a1);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  objc_autoreleasePoolPop(context);
}

uint64_t CMSUtilityPredicate_IsSomeOtherActiveSession(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 == a1)
    return 0;
  else
    return objc_msgSend(a2, "isActive", v2, v3);
}

uint64_t vaemGetFullMute()
{
  int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  *(_QWORD *)&inAddress.mSelector = 0x6F757470706F6D75;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

uint64_t CMSUtilityApplier_SetApplicationState(void *a1, CFNumberRef number)
{
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return objc_msgSend(a1, "setApplicationState:", valuePtr);
}

uint64_t CMSMUtility_GetCurrentRouteTypeAtIndex(uint64_t a1)
{
  __n128 CMSRouteInfoAt;
  uint64_t v3;
  _QWORD v5[6];

  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28 <= a1)
  {
    v3 = 0;
  }
  else
  {
    CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, a1, (uint64_t)v5);
    v3 = v5[0];
  }
  MEMORY[0x1940352C8](gCMSM, CMSRouteInfoAt);
  return v3;
}

BOOL CMSUtilityPredicate_IsSameClientAndActive(int a1, void *a2, CFNumberRef number)
{
  int v4;
  _BOOL8 result;
  int v6;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  v4 = objc_msgSend(a2, "isActive");
  result = 0;
  if (v4)
  {
    v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    if (v6 == valuePtr)
    {
      objc_msgSend(a2, "audioCategory");
      return FigCFEqual() == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsSomeOtherForegroundAndActiveSession(void *a1, void *a2)
{
  uint64_t result;

  if (a2 == a1)
    return 0;
  result = objc_msgSend(a2, "isActive");
  if ((_DWORD)result)
    return objc_msgSend(a2, "applicationState") == 8;
  return result;
}

CFPropertyListRef cmsmDeepCopyPickedRoute()
{
  return cmsDeepCopyPickedRoute(0);
}

uint64_t vaemHeadphoneJackIsConnected(int a1)
{
  if (a1)
    return byte_1EE2B2C18;
  if (vaemGetVADPortIDFromVADPortType(1886680175))
    return 1;
  return vaemGetVADPortIDFromVADPortType(1885892727) != 0;
}

uint64_t vaemHeadphoneJackHasInput(int a1)
{
  if (a1)
    return byte_1EE2B2C19;
  if (vaemGetVADPortIDFromVADPortType(1886680169))
    return 1;
  return vaemGetVADPortIDFromVADPortType(1886222185) != 0;
}

uint64_t CMSMUtility_CopyCurrentRouteHasVolumeControl()
{
  NSString *v0;
  id v1;
  _BOOL8 HasVolumeControl;
  id v3;
  uint64_t v4;
  id v5;

  v0 = CMSMUtility_CopyCurrentlyActiveCategory();
  MEMORY[0x1940352BC](gCMSM);
  if (v0 || dword_1EE2B3BEC == 1668505974)
  {
    v3 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v4 = objc_msgSend(v3, "initWithBool:", byte_1EE2B3BE8 != 0);
    MEMORY[0x1940352C8](gCMSM);
    if (v0)
      CFRelease(v0);
  }
  else
  {
    if (dword_1EE2B3C78)
    {
      v1 = objc_alloc(MEMORY[0x1E0CB37E8]);
      HasVolumeControl = 0;
    }
    else
    {
      if (!CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive())
        vaemResetVADCategoryToStandardAVAndDefaultMode();
      v5 = objc_alloc(MEMORY[0x1E0CB37E8]);
      HasVolumeControl = vaemCurrentRouteHasVolumeControl();
      v1 = v5;
    }
    v4 = objc_msgSend(v1, "initWithBool:", HasVolumeControl);
    MEMORY[0x1940352C8](gCMSM);
  }
  return v4;
}

uint64_t vaemSystemHasAudioInputDeviceExcludingBluetooth()
{
  return byte_1EE2B2BFA;
}

uint64_t CMScreenGetScreenType()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __CMScreenGetScreenType_block_invoke;
  v2[3] = &unk_1E3099018;
  v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenGetScreenType", (uint64_t)"CMSessionManager_Screen.m", 634, 0, 0, gCMScreen_1, (uint64_t)v2);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19360F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange()
{
  id PlayingSessionsDescription;
  id v1;

  if (CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_onceToken != -1)
    dispatch_once(&CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_onceToken, &__block_literal_global_11);
  PlayingSessionsDescription = CMSMNotificationUtility_CreatePlayingSessionsDescription();
  v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", PlayingSessionsDescription, CFSTR("Sessions"), 0);

  objc_msgSend((id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayloadLock, "lock");
  if ((objc_msgSend((id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayload, "isEqualToDictionary:", v1) & 1) == 0)
  {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeSessionIsPlayingDidChange"), v1, 0);

    CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayload = (uint64_t)v1;
  }
  objc_msgSend((id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayloadLock, "unlock");

}

id CMSMNotificationUtility_CreatePlayingSessionsDescription()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v15;
  NSPointerArray *v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v24;
    v15 = *(_QWORD *)v24;
    v16 = v0;
    do
    {
      v4 = 0;
      v18 = v2;
      do
      {
        if (*(_QWORD *)v24 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v4);
        if (objc_msgSend(v5, "isPlaying")
          && (objc_msgSend(v5, "hasAudioCategory:", CFSTR("SystemSoundsAndHaptics")) & 1) == 0)
        {
          v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v5, "clientPID"), "unsignedIntValue")), CFSTR("ClientPID"));
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v5, "audioSessionID")), CFSTR("AudioSessionID"));
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v5) != 0), CFSTR("IsNowPlayingEligible"));
          v8 = (void *)objc_msgSend(v5, "copyMXSessionList");
          v19 = 0u;
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v20;
            do
            {
              for (i = 0; i != v10; ++i)
              {
                if (*(_QWORD *)v20 != v11)
                  objc_enumerationMutation(v8);
                v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
                if (objc_msgSend(v13, "getIsPlaying"))
                  objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v13, "getID")));
              }
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
            }
            while (v10);
          }

          if (objc_msgSend(v7, "count"))
            objc_msgSend(v6, "setObject:forKey:", v7, CFSTR("MXSessionIDs"));
          objc_msgSend(v17, "addObject:", v6);

          v3 = v15;
          v0 = v16;
          v2 = v18;
        }
        ++v4;
      }
      while (v4 != v2);
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v2);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v17;
}

void CMSUtility_RouteToPreferredRouteIfRequired(void *a1, unsigned int a2, int a3)
{
  id v5;
  uint64_t LocalSessionPriority;
  int v7;
  _BOOL4 v8;
  MXSessionManager *v9;
  uint64_t v10;
  __CFString *v11;
  id v12;
  BOOL v13;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v16;
  const __CFArray *v17;
  CFIndex Count;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t PortAtIndex;
  AudioObjectID v24;
  int PortTypeFromPortID;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  int IsPortBTManaged;
  int v30;
  BOOL v32;
  int v33;
  int IsAnyRouteBTManagedAndInEar;
  int IsBluetoothSharingSessionEnabledForMediaPlayback;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v38;
  AudioObjectID CurrentOutputPortAtIndex;
  const __CFString *v40;
  NSObject *v41;
  NSObject *v42;
  void *v43;
  int v44;
  CFIndex v45;
  const __CFArray *v46;
  _BOOL4 v47;
  unsigned int v48;

  if (a1)
  {
    v5 = a1;
    LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 1);
    if (a2)
    {
      v7 = objc_msgSend(v5, "isActive");
      if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
      {
        if (!v7)
          return;
      }
      else if (!v7 || !objc_msgSend(v5, "isPlaying"))
      {
        return;
      }
      if (LocalSessionPriority <= a2)
        return;
    }
    if ((!FigPredictedRouting_IsTimerActive() || (_DWORD)LocalSessionPriority != 501)
      && FigPredictedRouting_IsTimerActive())
    {
      if (!dword_1EE2B3F38)
        return;
LABEL_76:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    v8 = LocalSessionPriority != 100;
    if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled() && (_DWORD)LocalSessionPriority != 100)
    {
      v9 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      v10 = objc_msgSend(v5, "audioDestinationPriority");
      if (v10)
        v11 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v10);
      else
        v11 = CFSTR("VirtualAudioDevice_Default");
      v12 = -[MXSessionManager copyHighestPriorityActiveSession:deviceIdentifier:](v9, "copyHighestPriorityActiveSession:deviceIdentifier:", v11, 0);
      v8 = v12 == v5;

    }
    if (FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(v5, "routingContextUUID")))
    {
      v13 = 0;
    }
    else
    {
      objc_msgSend(v5, "audioCategory");
      if ((FigCFEqual()
         || (objc_msgSend(v5, "audioCategory"), FigCFEqual())
         || objc_msgSend(v5, "hasAudioCategory:", CFSTR("FindMyAudioDevice")))
        && !CMSMDeviceState_RingerIsOn(1))
      {
        v13 = CMSMUtility_GetCurrentOutputPortAtIndex(0) == 0;
      }
      else
      {
        v47 = v8;
        VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v5, "audioCategory"));
        VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v5, "audioMode"));
        v16 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)objc_msgSend(v5, "activationContext"), (const void *)objc_msgSend(v5, "allowedPortTypes"));
        v17 = v16;
        if (v16)
          Count = CFArrayGetCount(v16);
        else
          Count = 0;
        v19 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)objc_msgSend(v5, "audioCategory"), objc_msgSend(v5, "audioMode"), (const void *)objc_msgSend(v5, "allowedPortTypes"));
        v20 = v19;
        if (v19)
          v21 = CFArrayGetCount(v19);
        else
          v21 = 0;
        v48 = LocalSessionPriority;
        if (Count < 1)
        {
          v13 = 0;
        }
        else
        {
          v43 = v5;
          v44 = a3;
          v22 = 0;
          v45 = Count;
          v46 = v17;
          while (1)
          {
            PortAtIndex = CMSMVAUtility_GetPortAtIndex(v17, v22);
            v24 = PortAtIndex;
            PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
            v26 = vaeCopyVADEndpointTypeForPort(v24);
            if (PortTypeFromPortID == 1885565807
              || PortTypeFromPortID == 1886613611
              || PortTypeFromPortID == 1886545251)
            {
              break;
            }
            if (FigCFEqual() && v21 >= 1)
            {
              v13 = 0;
              v27 = 1;
              do
              {
                v28 = CMSMVAUtility_GetPortAtIndex(v20, v27 - 1);
                IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(v28, 1);
                v30 = vaeGetPortTypeFromPortID(v28);
                v32 = v24 != (_DWORD)v28 && IsPortBTManaged != 0;
                v33 = v32 && PortTypeFromPortID == v30;
                if (v33)
                  v13 = 1;
                if ((v33 & 1) != 0)
                  break;
              }
              while (v27++ < v21);
              Count = v45;
              v17 = v46;
              if (v13)
                goto LABEL_57;
            }
            if (v26)
              CFRelease(v26);
            if (++v22 == Count)
            {
              v13 = 0;
              a3 = v44;
              v5 = v43;
              goto LABEL_60;
            }
          }
          v13 = 1;
LABEL_57:
          a3 = v44;
          v5 = v43;
          if (v26)
            CFRelease(v26);
        }
LABEL_60:
        if (v17)
          CFRelease(v17);
        LocalSessionPriority = v48;
        if (v20)
          CFRelease(v20);
        v8 = v47;
      }
    }
    IsAnyRouteBTManagedAndInEar = CMSMVAUtility_IsAnyRouteBTManagedAndInEar();
    IsBluetoothSharingSessionEnabledForMediaPlayback = CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback();
    if (!v8
      || !CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(v5, 1)
      || objc_msgSend(v5, "doesntActuallyPlayAudio")
      || !v13
      || !IsAnyRouteBTManagedAndInEar
      || IsBluetoothSharingSessionEnabledForMediaPlayback)
    {
      if (!dword_1EE2B3F38)
        return;
      goto LABEL_76;
    }
    if ((MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
       || objc_msgSend(v5, "shouldAttemptSmartRoutingHijackForMusicApp") && (a3 == 10 || a3 == 7))
      && !CMSUtility_IsSessionPlayStateEligibleForTipi(v5))
    {
      if (!dword_1EE2B3F38)
        return;
      goto LABEL_76;
    }
    v38 = (const __CFString *)MXBluetoothServices_CopyPreferredDeviceAddress(LocalSessionPriority, objc_msgSend(v5, "displayID"), 0, 0);
    CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    v40 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(CurrentOutputPortAtIndex);
    if (MXCFStringHasCaseInsensitivePrefix(v40, v38))
    {
      if (dword_1EE2B3F38)
      {
        v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(v38);
    }
    if (v40)
      CFRelease(v40);
    if (v38)
      CFRelease(v38);
  }
}

uint64_t FigPredictedRouting_IsTimerActive()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v1;

  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  MEMORY[0x1940352BC](gPRS_0);
  if (gPRS_2)
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v1 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v1 = 1;
    }
  }
  else
  {
    v1 = 0;
  }
  MEMORY[0x1940352C8](gPRS_0);
  return v1;
}

uint64_t CMSMUtility_SomePrimaryAudioCategoryClientIsPlaying()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  int IsAudioCategoryPrimary;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        IsAudioCategoryPrimary = CMSUtility_IsAudioCategoryPrimary(v5);
        if (objc_msgSend(v5, "isPlaying")
          && (objc_msgSend(v5, "doesntActuallyPlayAudio") & 1) == 0
          && IsAudioCategoryPrimary)
        {
          v7 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v2)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v7;
}

uint64_t CMSUtility_IsAudioCategoryPrimary(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      return 0;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      return 0;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      return 0;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual()
      || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory")))
    {
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 1;
}

uint64_t cmsUpdateSessionStateForNewCategory(void *a1, const void *a2, void *a3)
{
  void *v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  id CustomizedCategory;
  id v12;
  int IsDoingActivity;
  int v14;
  uint64_t result;
  const char *v16;
  const char *v17;
  double v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "setOverridePortsList:", 0);
  if (CMSMUtility_IsInputAllowedForCategory(a2)
    && !CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(a1, "audioCategory")))
  {
    objc_msgSend(a1, "setSubPortPreferences:", 0);
  }
  objc_msgSend(a1, "setAllowedPortTypes:", 0);
  objc_msgSend(a1, "setAllowedRouteTypes:", 0);
  objc_msgSend(a1, "setStopsWhenDeviceLocks:", 0);
  objc_msgSend(a1, "setMakesMusicResume:", 0);
  objc_msgSend(a1, "setHasInput:", 0);
  objc_msgSend(a1, "setMustUseDefaultClientPriority:", 0);
  objc_msgSend(a1, "setAllowsBluetoothRecordingCustomization:", 0);
  objc_msgSend(a1, "setAllowsDefaultBuiltInRouteCustomization:", 0);
  objc_msgSend(a1, "setAllowSystemSoundsWhileRecording:", 0);
  objc_msgSend(a1, "setPrefersToTakeHWControlFlagsFromAnotherSession:", 1);
  objc_msgSend(a1, "setWantsToBeVolumeButtonClient:", 1);
  if ((objc_msgSend(a1, "isEligibleForBTSmartRoutingConsiderationSetByClient") & 1) == 0)
    objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsideration:", 1);
  if (objc_msgSend(a1, "audioCategory")
    && (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("SystemSoundsAndHaptics"))
     || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory"))))
  {
    objc_msgSend(a1, "setIsEligibleForNowPlayingAppConsideration:", 0);
    objc_msgSend(a1, "setBadgeType:", CFSTR("NotApplicable"));
    objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
  }
  v6 = (void *)objc_msgSend(a3, "objectForKey:", CFSTR("InterruptionStyle"));
  if (objc_msgSend(v6, "unsignedIntValue"))
    objc_msgSend(a1, "updateInterruptionStyle:", objc_msgSend(v6, "unsignedIntValue"));
  else
    objc_msgSend(a1, "setUpDefaultInterruptionStyleForCategoryAndMode");
  if (!objc_msgSend(a1, "audioCategory"))
    goto LABEL_17;
  objc_msgSend(a1, "setHasInput:", -[NSSet containsObject:](-[MXSessionManager audioCategoriesWithInput](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioCategoriesWithInput"), "containsObject:", objc_msgSend(a1, "audioCategory")));
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("UserInterfaceSoundEffects"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("AmbientSound")))
  {
    objc_msgSend(a1, "setStopsWhenDeviceLocks:", 1);
LABEL_17:
    v7 = a1;
    v8 = 1179648;
LABEL_18:
    cmsSetControlFlags(v7, v8);
    goto LABEL_19;
  }
  if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory")))
  {
    objc_msgSend(a1, "setWantsToBeVolumeButtonClient:", 0);
    objc_msgSend(a1, "setPrefersNoDucking:", 1);
    objc_msgSend(a1, "setDoesntActuallyPlayAudio:", 1);
    objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsideration:", 0);
    objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsiderationSetByClient:", 0);
    objc_msgSend(a1, "setIsEligibleForBTTriangleConsideration:", 0);
    objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
    v26[0] = CFSTR("SpeechDetectStyleDidChange");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
    MXCoreSessionSetProperty((int)a1, CFSTR("SubscribeToNotifications"));
LABEL_54:
    v7 = a1;
    v8 = 0;
    goto LABEL_18;
  }
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("MediaPlayback"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("MediaPlaybackNoSpeaker"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("LiveAudio"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("AudioProcessing"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("SoloAmbientSound")))
  {
    cmsSetControlFlags(a1, 0x120000u);
    if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("SoloAmbientSound")))
      objc_msgSend(a1, "setStopsWhenDeviceLocks:", 1);
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      objc_msgSend(a1, "setDoesntActuallyPlayAudio:", 1);
    goto LABEL_19;
  }
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Notice"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoiceOver")))
  {
    goto LABEL_17;
  }
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoiceCommand"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoiceCommand_WithBluetooth")))
  {
    objc_msgSend(a1, "setMakesMusicResume:", 1);
LABEL_69:
    objc_msgSend(a1, "setAllowsBluetoothRecordingCustomization:", 1);
    objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
LABEL_70:
    v7 = a1;
    v8 = 18;
    goto LABEL_18;
  }
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoiceCommandThatMixes"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoiceCommandThatMixes_WithBluetooth")))
  {
    goto LABEL_69;
  }
  if (!CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Record"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Record_WithBluetooth"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker"))
    && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Multi")))
  {
    if (CMSUtility_HasPhoneCallBehaviour(a1))
      goto LABEL_70;
    if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Ringtone")))
    {
      v20 = a1;
      v21 = 1179648;
LABEL_118:
      cmsSetControlFlags(v20, v21);
      objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
      goto LABEL_19;
    }
    if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Alarm")))
    {
      if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioMode"), CFSTR("Sleep")))
        v21 = 0;
      else
        v21 = 1179648;
      v20 = a1;
      goto LABEL_118;
    }
    if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("RingtonePreview")))
    {
      objc_msgSend(a1, "setMakesMusicResume:", 1);
      goto LABEL_121;
    }
    if (!CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("FindMyPhone"))
      && !CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("WaterEjection")))
    {
      if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("EmergencyAlert"))
        || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("EmergencyAlert_Muteable")))
      {
        objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
        objc_msgSend(a1, "setMustUseDefaultClientPriority:", 1);
        objc_msgSend(a1, "setMakesMusicResume:", 1);
        goto LABEL_70;
      }
      if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Voicemail"))
        || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("VoicemailGreeting")))
      {
LABEL_121:
        objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
        goto LABEL_17;
      }
      if (!CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("FindMyAudioDevice")))
      {
        if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("SystemSoundsAndHaptics")))
        {
          objc_msgSend(a1, "setStopsWhenDeviceLocks:", 1);
          objc_msgSend(a1, "setPrefersToTakeHWControlFlagsFromAnotherSession:", 0);
          objc_msgSend(a1, "setWantsToBeVolumeButtonClient:", 0);
          v7 = a1;
          v8 = 0x100000;
          goto LABEL_18;
        }
        if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("eARC")))
        {
          v7 = a1;
          v8 = 2;
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
    objc_msgSend(a1, "setMakesMusicResume:", 1);
    goto LABEL_17;
  }
  objc_msgSend(a1, "setAllowsBluetoothRecordingCustomization:", 1);
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Multi")))
  {
    objc_msgSend(a1, "setAllowsDefaultBuiltInRouteCustomization:", 1);
  }
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
  {
    objc_msgSend(a1, "setPreferredNumberOfInputChannels:", 0);
    objc_msgSend(a1, "setPreferredNumberOfOutputChannels:", 0);
  }
  if ((objc_msgSend(a1, "audioHWControlFlagsSetByClient") & 1) == 0)
    cmsSetControlFlags(a1, 0x12u);
  if (CMSUtility_GetPreferredIOBufferDuration(a1, v16) == 0.0
    && !CMSUtility_GetPreferredIOBufferFrames(a1, v17))
  {
    LODWORD(v18) = 1018980991;
    objc_msgSend(a1, "updatePreferredIOBufferDuration:", v18);
  }
  if (CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
    || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker")))
  {
    objc_msgSend(a1, "audioMode");
    objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", FigCFEqual() != 0);
  }
  if ((CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Record"))
     || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("Record_WithBluetooth"))
     || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord"))
     || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth"))
     || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
     || CFEqual((CFTypeRef)objc_msgSend(a1, "audioCategory"), CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker")))
    && CFEqual((CFTypeRef)objc_msgSend(a1, "audioMode"), CFSTR("SoundRecognition"))
    && CMSMVAUtility_IsAdditiveRoutingEnabled()
    && ((objc_msgSend(a1, "isRoutedToOnDemandVAD") & 1) != 0
     || objc_msgSend(a1, "willRouteToOnDemandVADOnActivation")))
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v26[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_54;
  }
LABEL_19:
  if (objc_msgSend(a1, "preferredPersistentRoute", v22, v24))
  {
    if (dword_1EE2B3F38)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsSetControlFlags(a1, objc_msgSend(a1, "hwControlFlags", v23, v25) & 0xFFFDFFFD | 2);
  }
  cmsUpdateAudioBehavior(a1);
  cmsUpdatePiPIsPossible(a1);
  if (objc_msgSend(a1, "mustUseDefaultClientPriority")
    && !MX_FeatureFlags_CanClientsSetEmergencyAlertPriority())
  {
    objc_msgSend(a1, "setClientPriority:", 0);
  }
  if (!MX_FeatureFlags_CanClientsSetEmergencyAlertPriority())
  {
    if (CMSMUtility_IsEmergencyAlertCategory(objc_msgSend(a1, "audioCategory"))
      && !objc_msgSend(a1, "hasAudioMode:", CFSTR("Beacon")))
    {
      v10 = 20;
      goto LABEL_32;
    }
    if (objc_msgSend(a1, "clientPriority") == 20)
    {
      v10 = 0;
LABEL_32:
      objc_msgSend(a1, "setClientPriority:", v10);
    }
  }
  if (objc_msgSend(a1, "mode"))
  {
    CustomizedCategory = CMSUtility_GetCustomizedCategory(a1);
    if (CustomizedCategory)
    {
      v12 = CustomizedCategory;
      objc_msgSend(a1, "audioCategory");
      if (!FigCFEqual())
        objc_msgSend(a1, "setAudioCategory:", v12);
    }
  }
  objc_msgSend(a1, "setHasPhoneCallBehavior:", 0);
  if (objc_msgSend(a1, "audioCategory"))
  {
    if (CMSUtility_HasPhoneCallBehaviour(a1))
    {
      objc_msgSend(a1, "setHasPhoneCallBehavior:", 1);
      objc_msgSend(a1, "setOptOutOfMutePriority:", 1);
      objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
      objc_msgSend(a1, "setAllowSystemSoundsWhileRecording:", 1);
      if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
      {
        IsDoingActivity = FigEndpointCentralEntityIsDoingActivity(qword_1EE2B3CD8, 0x1E309F4A8, CFSTR("PhoneCall"));
        v14 = FigEndpointCentralEntityIsDoingActivity(qword_1EE2B3CD8, 0x1E309F4A8, CFSTR("Speech"));
        if (objc_msgSend(a1, "hasPhoneCallBehavior"))
        {
          if (IsDoingActivity && !v14)
            FigEndpointCentralUpdateiOSDeviceState(qword_1EE2B3CD8, 0, 10, (uint64_t)CFSTR("Phone activity"), 0);
        }
      }
    }
  }
  if (objc_msgSend(a1, "isTheAssistant"))
    objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
  objc_msgSend(a1, "audioCategory");
  objc_msgSend(a1, "setIsLongFormAudio:", FigCFEqual() != 0);
  if (objc_msgSend(a1, "preferredDecoupledInputOutput")
    && !CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput(objc_msgSend(a1, "audioCategory")))
  {
    objc_msgSend(a1, "setPreferredDecoupledInputOutput:", 0);
  }
  result = objc_msgSend(a1, "isActive");
  if ((_DWORD)result)
  {
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
    return -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA");
  }
  return result;
}

uint64_t CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(void *a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  uint64_t v6;

  if (a1)
  {
    if ((objc_msgSend(a1, "doesntActuallyPlayAudio") & 1) == 0)
    {
      if (objc_msgSend(a1, "preferredPersistentRoute"))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      if (a2)
      {
        if ((objc_msgSend(a1, "isEligibleForBTSmartRoutingConsideration") & 1) == 0)
          return 0;
      }
      else if (!objc_msgSend(a1, "isEligibleForBTTriangleConsideration"))
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  v6 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v6;
}

void cmsUpdatePiPIsPossible(void *a1)
{
  int IsPiPAllowedForCategory;
  NSObject *v3;

  if (CMSMDeviceState_SupportsPiP())
  {
    if (CMSUtility_HasBackgroundEntitlement(a1))
    {
      IsPiPAllowedForCategory = CMSMUtility_IsPiPAllowedForCategory(objc_msgSend(a1, "audioCategory"));
      if (IsPiPAllowedForCategory != objc_msgSend(a1, "isPiPPossible"))
      {
        objc_msgSend(a1, "setIsPiPPossible:", IsPiPAllowedForCategory != 0);
        if (a1)
          CFRetain(a1);
        v3 = MXGetNotificationSenderQueue();
        MXDispatchAsyncFunction((uint64_t)"cmsUpdatePiPIsPossible", (uint64_t)"CMSessionManager.m", 7479, 0, 0, v3, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostPiPIsPossibleDidChange_f);
      }
    }
  }
}

void *CMSUtility_HasBackgroundEntitlement(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    if ((int)objc_msgSend((id)objc_msgSend(result, "clientPID"), "intValue") >= 1
      && (objc_msgSend(v1, "hasFetchedBackgroundPrivileges") & 1) == 0)
    {
      objc_msgSend(v1, "setIsAllowedToPlayInBackground:", CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v1, "clientPID"), "intValue")));
      objc_msgSend(v1, "setHasFetchedBackgroundPrivileges:", 1);
    }
    return (void *)objc_msgSend(v1, "isAllowedToPlayInBackground");
  }
  return result;
}

uint64_t CMSMDeviceState_SupportsPiP()
{
  return byte_1EE2B29CB;
}

BOOL CMSMUtility_IsInputAllowedForCategory(const void *a1)
{
  return a1
      && (CFEqual(a1, CFSTR("Multi"))
       || CFEqual(a1, CFSTR("Record"))
       || CFEqual(a1, CFSTR("Record_WithBluetooth"))
       || CFEqual(a1, CFSTR("PlayAndRecord"))
       || CFEqual(a1, CFSTR("PlayAndRecord_WithBluetooth"))
       || CFEqual(a1, CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
       || CFEqual(a1, CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker"))
       || CFEqual(a1, CFSTR("VoiceCommand"))
       || CFEqual(a1, CFSTR("VoiceCommand_WithBluetooth"))
       || CFEqual(a1, CFSTR("VoiceCommandThatMixes"))
       || CFEqual(a1, CFSTR("VoiceCommandThatMixes_WithBluetooth"))
       || CFEqual(a1, CFSTR("PhoneCall"))
       || CFEqual(a1, CFSTR("TTYCall"))
       || CFEqual(a1, CFSTR("eARC")));
}

id CMSUtility_GetCustomizedCategory(void *a1)
{
  id v2;
  uint64_t v3;
  const void *v4;

  v2 = (id)objc_msgSend(a1, "audioCategory");
  v3 = objc_msgSend(a1, "shouldEnableBluetoothRecording");
  v4 = (const void *)objc_msgSend(a1, "defaultBuiltInRouteToUse");
  if (objc_msgSend(a1, "allowsBluetoothRecordingCustomization"))
    v2 = -[MXSessionManager getBluetoothCustomizedAlternateCategory:enableBluetooth:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getBluetoothCustomizedAlternateCategory:enableBluetooth:", objc_msgSend(a1, "audioCategory"), v3);
  if (objc_msgSend(a1, "allowsDefaultBuiltInRouteCustomization")
    && v4
    && (CFEqual(v4, CFSTR("Speaker")) || CFEqual(v4, CFSTR("Receiver"))))
  {
    return -[MXSessionManager getDefaultBuiltInCustomizedAlternateCategory:defaultBuiltInRoute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getDefaultBuiltInCustomizedAlternateCategory:defaultBuiltInRoute:", v2, v4);
  }
  else
  {
    return v2;
  }
}

const __CFString *CMSMUtility_GetDefaultBuiltInRouteSettingForMode(int a1)
{
  const __CFString *result;
  int v3;

  result = 0;
  if (a1 > 1768781425)
  {
    if (a1 > 1936749156)
    {
      if (a1 == 1936749157 || a1 == 1986884455)
        return CFSTR("Speaker");
      v3 = 1987208039;
    }
    else
    {
      if (a1 == 1768781426 || a1 == 1835229549)
        return CFSTR("Speaker");
      v3 = 1919776355;
    }
LABEL_17:
    if (a1 != v3)
      return result;
    return CFSTR("Receiver");
  }
  if (a1 <= 1768778863)
  {
    if (a1 != 1735222132 && a1 != 1751212899)
    {
      v3 = 1768057203;
      goto LABEL_17;
    }
    return CFSTR("Speaker");
  }
  if (a1 == 1768778864)
    return CFSTR("Speaker");
  if (a1 != 1768779619)
  {
    if (a1 != 1768781411)
      return result;
    return CFSTR("Speaker");
  }
  return CFSTR("Receiver");
}

uint64_t CMSMUtility_GetDefaultEnableBluetoothRecordingSettingForMode(int a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  result = 0;
  if (a1 > 1768781425)
  {
    if (a1 > 1936749156)
    {
      if (a1 != 1936749157)
      {
        if (a1 == 1987208039)
          goto LABEL_17;
        v3 = 1986884455;
        goto LABEL_16;
      }
    }
    else if (a1 != 1768781426 && a1 != 1835229549)
    {
      v3 = 1919776355;
      goto LABEL_16;
    }
LABEL_18:
    v4 = MEMORY[0x1E0C9AE40];
    return *(_QWORD *)v4;
  }
  if (a1 > 1768778863)
  {
    if (a1 != 1768778864)
    {
      if (a1 == 1768779619)
        goto LABEL_17;
      v3 = 1768781411;
LABEL_16:
      if (a1 != v3)
        return result;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (a1 != 1735222132 && a1 != 1751212899)
  {
    v3 = 1768057203;
    goto LABEL_16;
  }
LABEL_17:
  v4 = MEMORY[0x1E0C9AE50];
  return *(_QWORD *)v4;
}

uint64_t MXGetNotificationSenderQueue()
{
  if (MXGetNotificationSenderQueue_onceToken != -1)
    dispatch_once(&MXGetNotificationSenderQueue_onceToken, &__block_literal_global_3_2);
  return MXGetNotificationSenderQueue_notificationSenderQueue;
}

void MXDispatchAsyncFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, uint64_t a8)
{
  void *v16;
  dispatch_block_t v17;
  void *v18;
  _QWORD v19[6];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  _QWORD block[6];
  __int128 v30;
  uint64_t v31;

  v30 = 0uLL;
  v31 = 0;
  v16 = (void *)MEMORY[0x194035B20]();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsyncFunction_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a8;
  block[5] = a7;
  v17 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  v18 = (void *)MEMORY[0x194035B20]();
  v28 = 0;
  v27 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      CreateACQDispatchID();
  }
  objc_autoreleasePoolPop(v18);
  v30 = v27;
  v31 = v28;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      MEMORY[0x1940347A0](&v30, 0, "MXDispatchAsyncFunction", a1, a2, a3, a4, a5);
  }
  objc_autoreleasePoolPop(v16);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MXDispatchAsyncFunction_block_invoke_2;
  v19[3] = &unk_1E309E5C0;
  v20 = v30;
  v21 = v31;
  v22 = a1;
  v26 = a3;
  v23 = a2;
  v24 = a4;
  v25 = a5;
  v19[4] = a6;
  v19[5] = v17;
  dispatch_barrier_async(a6, v19);
}

uint64_t CMSMNP_UpdateNowPlayingAppForNewInterruptionStyle(void *a1)
{
  BOOL v3;

  v3 = 0;
  CMSUtility_InterpretInterruptionStyle(a1, &v3, 0, 0);
  objc_msgSend(a1, "setAllowedToBeNowPlayingApp:", v3);
  if ((objc_msgSend(a1, "allowedToBeNowPlayingApp") & 1) == 0)
  {
    objc_msgSend(a1, "setBadgeType:", CFSTR("NotApplicable"));
    objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
  }
  return -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), a1, 3);
}

uint64_t cmsSetControlFlags(void *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294954316;
  v3 = a2 & 0xFFFFFFF1 | 2;
  if ((a2 & 0xC) == 0)
    v3 = a2;
  if ((v3 & 0xC0000) != 0)
    v4 = v3 & 0xFFF1FFFF | 0x20000;
  else
    v4 = v3;
  if (v3 & 0xC0000 | a2 & 0xC)
    v5 = dword_1EE2B3F38 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v4 & WORD1(v4)) != 0)
    return 4294954315;
  if ((_DWORD)v4 != objc_msgSend(a1, "hwControlFlags"))
  {
    if (dword_1EE2B3F38)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  objc_msgSend(a1, "setHwControlFlags:", v4, v9, v10);
  return 0;
}

const char *CMSMUtility_GetFlagsString(unsigned __int16 a1)
{
  if (a1 > 0x1Fu)
    return "Unknown";
  else
    return off_1E309CAA0[(__int16)a1];
}

uint64_t MX_FeatureFlags_CanClientsSetEmergencyAlertPriority()
{
  return _os_feature_enabled_impl();
}

unint64_t CMSMUtility_IsEmergencyAlertCategory(unint64_t result)
{
  const void *v1;

  if (result)
  {
    v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, CFSTR("EmergencyAlert")) || CFEqual(v1, CFSTR("EmergencyAlert_Muteable")) != 0;
  }
  return result;
}

BOOL CMSMUtility_IsPiPAllowedForCategory(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    return FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || CMSMUtility_IsPlayAndRecordCategory(v1);
  }
  return result;
}

uint64_t CMSMUtility_IsSiriRecording()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isTheAssistant")
          && objc_msgSend(v5, "isRecording")
          && (objc_msgSend(v5, "isActive") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback()
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v2;
  uint64_t IsBluetoothSharingSessionEnabled;

  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)CFSTR("Audio/Video"));
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)CFSTR("Default"));
  v2 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, 0);
  IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(v2);
  if (v2)
    CFRelease(v2);
  return IsBluetoothSharingSessionEnabled;
}

uint64_t MX_FeatureFlags_IsMandrakeEverywhereEnabled()
{
  return 0;
}

uint64_t CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isRecording")
          && !CMSUtility_GetAllowSystemSoundsWhileRecording(v5))
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

void CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const char *CStringPtrAndBufferToFree;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  __CFString *v18;
  id v19;
  void *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  const __CFString *v24;
  __CFDictionary *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  os_log_type_t type[8];
  void *v39;
  float v40;
  uint64_t valuePtr;
  int v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
  if (v8 >= 1)
  {
    v9 = v8;
    for (i = 0; i != v9; ++i)
    {
      valuePtr = 1;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v32, v33), i);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      if (a5)
      {
        if (a1)
        {
          if (objc_msgSend(a1, "reporterStarted"))
          {
            off_1EE2B3D78(valuePtr, a2, a3, a4);
          }
          else
          {
            if (dword_1EE2B3F38)
            {
              LODWORD(v39) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v14 = v39;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
                v15 = v14;
              else
                v15 = v14 & 0xFFFFFFFE;
              if (v15)
              {
                v16 = objc_msgSend(a1, "clientName");
                v42 = 136315650;
                v43 = "CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics";
                v44 = 2114;
                v45 = v16;
                v46 = 2048;
                v47 = valuePtr;
                LODWORD(v33) = 32;
                v32 = &v42;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            off_1EE2B3D50(valuePtr);
            objc_msgSend(a1, "setReporterStarted:", 1);
            off_1EE2B3D78(valuePtr, a2, a3, a4);
            objc_msgSend(a1, "setReporterStarted:", 0);
            off_1EE2B3D58(valuePtr);
            if (dword_1EE2B3F38)
            {
              LODWORD(v39) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v29 = v39;
              if (os_log_type_enabled(v28, type[0]))
                v30 = v29;
              else
                v30 = v29 & 0xFFFFFFFE;
              if (v30)
              {
                v31 = objc_msgSend(a1, "clientName");
                v42 = 136315650;
                v43 = "CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics";
                v44 = 2114;
                v45 = v31;
                v46 = 2048;
                v47 = valuePtr;
                LODWORD(v33) = 32;
                v32 = &v42;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      else
      {
        v40 = 0.0;
        v39 = 0;
        if (objc_msgSend(a1, "displayID"))
        {
          objc_msgSend(a1, "displayID");
          CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
        }
        else
        {
          CStringPtrAndBufferToFree = 0;
        }
        *(_QWORD *)type = 0;
        if (CMSMDeviceState_ItsAHomePod())
          PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory")), 0, type, 0);
        CMSUtility_ComputePlaybackVolume(a1, &v40);
        v17 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v18 = MX_RunningBoardServices_CopyAssertionReasonsStringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
        v19 = objc_alloc(MEMORY[0x1E0CB3940]);
        v20 = (void *)objc_msgSend(v19, "initWithString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(MEMORY[0x1E0C99D68], "now")));
        if (a1)
          v21 = objc_msgSend(a1, "displayID");
        else
          v21 = 0;
        if (objc_msgSend(a1, "isActive"))
          v22 = CFSTR("active");
        else
          v22 = CFSTR("inactive");
        objc_msgSend(v17, "setObject:forKey:", v22, 0x1E30A97E8);
        if (a1)
        {
          objc_msgSend(v17, "setObject:forKey:", objc_msgSend(a1, "audioCategory"), 0x1E30A9788);
          v23 = objc_msgSend(a1, "audioMode");
        }
        else
        {
          objc_msgSend(v17, "setObject:forKey:", 0, 0x1E30A9788);
          v23 = 0;
        }
        objc_msgSend(v17, "setObject:forKey:", v23, 0x1E30A97A8);
        objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "prefersNoInterruptionsByRingtonesAndAlerts")), 0x1E30A97C8);
        objc_msgSend(v17, "setObject:forKey:", v20, 0x1E30A9808);
        if (v21)
          v24 = (const __CFString *)v21;
        else
          v24 = CFSTR("UnknownDisplayID");
        objc_msgSend(v17, "setObject:forKey:", v24, 0x1E30A9828);
        objc_msgSend(v17, "setObject:forKey:", CMSMUtility_GetStringForApplicationState(objc_msgSend(a1, "applicationState")), 0x1E30A9848);
        objc_msgSend(v17, "setObject:forKey:", v18, 0x1E30A9868);
        if (objc_msgSend(a1, "prefersInterruptionOnRouteDisconnectSetByClient"))
          objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect")), 0x1E30A9888);

        v25 = cmsutility_createVolumeChangeMessageForAudioStatistics(CStringPtrAndBufferToFree, *(const void **)type, 0, 0, a6, v40);
        if (objc_msgSend(a1, "isActive"))
        {
          CMSUtility_SetAudioServiceTypeForReporterID(a1, valuePtr);
          if ((objc_msgSend(a1, "reporterStarted") & 1) == 0)
          {
            if (dword_1EE2B3F38)
            {
              v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            off_1EE2B3D50(valuePtr);
            off_1EE2B3D78(valuePtr, v25, 14, 5);
            objc_msgSend(a1, "setReporterStarted:", 1);
          }
          off_1EE2B3D78(valuePtr, v17, 1, 5);
        }
        else if (objc_msgSend(a1, "reporterStarted"))
        {
          off_1EE2B3D78(valuePtr, v17, 1, 5);
          off_1EE2B3D78(valuePtr, v25, 14, 5);
          objc_msgSend(a1, "setReporterStarted:", 0);
          off_1EE2B3D58(valuePtr);
          if (dword_1EE2B3F38)
          {
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }

        if (v25)
          CFRelease(v25);
        if (*(_QWORD *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(_QWORD *)type = 0;
        }
        free(v39);
      }
    }
  }
}

void sub_1936146A8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x3C8]);
  _Unwind_Resume(a1);
}

uint64_t MX_FeatureFlags_IsSpeechDetectEnabled()
{
  if (MX_FeatureFlags_IsSpeechDetectEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSpeechDetectEnabled_onceToken, &__block_literal_global_57_0);
  return MX_FeatureFlags_IsSpeechDetectEnabled_sSpeechDetectEnabled;
}

uint64_t CMSMUtility_GetVADIDForVADName(uint64_t a1)
{
  id v2;

  if (a1
    && ((v2 = -[NSDictionary objectForKey:](-[MXSessionManager audioDeviceInfo](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioDeviceInfo"), "objectForKey:", a1)) != 0|| CMSMVAUtility_IsAdditiveRoutingEnabled()&& (v2 = -[NSDictionary objectForKey:](-[MXAdditiveRoutingManager vadNameToID](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "vadNameToID"), "objectForKey:", a1)) != 0))
  {
    return objc_msgSend(v2, "unsignedIntValue");
  }
  else
  {
    return -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  }
}

uint64_t CMSUtility_GetCurrentOutputVADID(void *a1)
{
  uint64_t v1;
  __CFString *v2;

  if (!a1)
    return -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  v1 = objc_msgSend(a1, "audioDestinationPriority");
  if (v1)
    v2 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v1);
  else
    v2 = CFSTR("VirtualAudioDevice_Default");
  return CMSMUtility_GetVADIDForVADName((uint64_t)v2);
}

uint64_t CMSUtility_GetCurrentInputVADID(void *a1)
{
  __CFString *CurrentInputVADUID;

  if (!a1)
    return -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  CurrentInputVADUID = CMSUtility_GetCurrentInputVADUID(a1);
  return CMSMUtility_GetVADIDForVADName((uint64_t)CurrentInputVADUID);
}

uint64_t CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(void *a1, int a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  const void **v8;
  int v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  CFMutableArrayRef v16;
  __CFArray *Value;
  uint64_t v18;
  __CFArray *v19;
  CFMutableArrayRef v20;
  CFMutableArrayRef v21;
  const void *SInt32;
  const void *v23;
  uint64_t v25;
  int v26;
  CFTypeRef cf;

  if (!a1)
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = v6;
  cf = v6;
  v8 = (const void **)MEMORY[0x1E0C9AE50];
  if (a2)
    CFDictionarySetValue(v6, CFSTR("session going active"), (const void *)*MEMORY[0x1E0C9AE50]);
  v9 = objc_msgSend(a1, "isActive");
  v10 = *v8;
  v11 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v9)
    v12 = v10;
  else
    v12 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v7, CFSTR("session active"), v12);
  if (objc_msgSend(a1, "isPlaying"))
    v13 = v10;
  else
    v13 = v11;
  CFDictionarySetValue(v7, CFSTR("session output running"), v13);
  if (objc_msgSend(a1, "isRecording"))
    v14 = v10;
  else
    v14 = v11;
  CFDictionarySetValue(v7, CFSTR("session input running"), v14);
  v15 = objc_msgSend(a1, "reporterIDs");
  v16 = Mutable;
  if (v15)
    v16 = (CFMutableArrayRef)objc_msgSend(a1, "reporterIDs", Mutable);
  CFDictionarySetValue(v7, CFSTR("session reporter IDs"), v16);
  if (objc_msgSend(a1, "audioBehaviour"))
    Value = (__CFArray *)CFDictionaryGetValue((CFDictionaryRef)objc_msgSend(a1, "audioBehaviour"), CFSTR("AudioBehaviour_Destination"));
  else
    Value = 0;
  if (objc_msgSend(a1, "audioBehaviour"))
    v19 = (__CFArray *)CFDictionaryGetValue((CFDictionaryRef)objc_msgSend(a1, "audioBehaviour"), CFSTR("AudioBehaviour_Source"));
  else
    v19 = 0;
  if (Value)
    v20 = Value;
  else
    v20 = Mutable;
  CFDictionarySetValue(v7, CFSTR("session output VAD UIDs"), v20);
  if (v19)
    v21 = v19;
  else
    v21 = Mutable;
  CFDictionarySetValue(v7, CFSTR("session input VAD UIDs"), v21);
  objc_msgSend(a1, "applicationState");
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (SInt32)
  {
    v23 = SInt32;
    CFDictionarySetValue(v7, CFSTR("session app state"), SInt32);
    CFRelease(v23);
  }
  v26 = 0;
  v25 = *(_QWORD *)"isesbolg";
  if (unk_1EE2B3BB0)
  {
    v18 = unk_1EE2B3BB0(dword_1EE2B3C08, &v25, 0, 0, 8, &cf);
    v7 = (__CFDictionary *)cf;
    if (!cf)
      goto LABEL_33;
    goto LABEL_32;
  }
  v18 = 0;
  if (v7)
LABEL_32:
    CFRelease(v7);
LABEL_33:
  if (Mutable)
    CFRelease(Mutable);
  return v18;
}

__CFString *CMSUtility_GetCurrentInputVADUID(void *a1)
{
  __CFString *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = CFSTR("VirtualAudioDevice_Default");
  if (a1)
  {
    if (objc_msgSend(a1, "audioBehaviour"))
    {
      v3 = (void *)objc_msgSend((id)objc_msgSend(a1, "audioBehaviour"), "objectForKey:", CFSTR("AudioBehaviour_Source"));
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v11;
        while (2)
        {
          for (i = 0; i != v5; ++i)
          {
            if (*(_QWORD *)v11 != v6)
              objc_enumerationMutation(v3);
            v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
            if (vaemIsAudioDestinationAvailable(v8))
              return (__CFString *)v8;
          }
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
          if (v5)
            continue;
          break;
        }
      }
    }
  }
  return v1;
}

__CFString *CMSUtility_GetCurrentAudioDestination(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(a1, "audioDestinationPriority");
  if (a1 && v2)
    return (__CFString *)-[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v2);
  else
    return CFSTR("VirtualAudioDevice_Default");
}

uint64_t vaemIsAudioDestinationAvailable(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  BOOL v4;

  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
LABEL_21:
    v4 = v3 == 0;
    return !v4;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID");
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v3 = -[MXSessionManager lowLatencyVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "lowLatencyVADID");
    goto LABEL_21;
  }
  result = CMSMVAUtility_IsAdditiveRoutingEnabled();
  if (!(_DWORD)result)
    return result;
  v4 = -[NSDictionary objectForKey:](-[MXAdditiveRoutingManager vadNameToID](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "vadNameToID"), "objectForKey:", a1) == 0;
  return !v4;
}

__CFString *CMSMUtility_GetVADNameForVADID(uint64_t a1)
{
  NSDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSDictionary *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = -[MXSessionManager audioDeviceInfo](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "audioDeviceInfo");
  v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v2);
      v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6);
      if (objc_msgSend(-[NSDictionary objectForKey:](-[MXSessionManager audioDeviceInfo](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioDeviceInfo"), "objectForKey:", v7), "unsignedIntValue") == (_DWORD)a1)break;
      if (v4 == ++v6)
      {
        v4 = -[NSDictionary countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (!CMSMVAUtility_IsAdditiveRoutingEnabled())
      return CFSTR("VirtualAudioDevice_Default");
    v8 = -[MXAdditiveRoutingManager vadIDToName](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "vadIDToName");
    v7 = -[NSDictionary objectForKey:](v8, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1));
    if (!v7)
      return CFSTR("VirtualAudioDevice_Default");
  }
  return (__CFString *)v7;
}

uint64_t MX_RunningBoardServices_GetApplicationStateForPID(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v7;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  if (!objc_msgSend(v4, "unsignedIntValue"))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    v7 = (void *)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "currentState");
    return mx_runningBoardServices_getMXApplicationStateForProcessState(v7);
  }
  objc_msgSend((id)gApplicationStateCacheLock, "lock");
  v5 = objc_msgSend((id)objc_msgSend((id)gApplicationStateCache, "objectForKey:", v4), "unsignedIntValue");
  objc_msgSend((id)gApplicationStateCacheLock, "unlock");
  if (a2 || !(_DWORD)v5)
    goto LABEL_6;
  return v5;
}

uint64_t mx_runningBoardServices_getProcessHandleForPID(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[23];

  v6[22] = *MEMORY[0x1E0C80C00];
  if ((int)a1 < 1)
    return 0;
  v1 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", a1);
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  v6[0] = 0;
  v2 = objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v1, v6);
  if (v6[0])
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

uint64_t mx_runningBoardServices_getMXApplicationStateForProcessState(void *a1)
{
  int v2;

  v2 = objc_msgSend(a1, "taskState");
  if (v2 == 4)
  {
    if (objc_msgSend((id)objc_msgSend(a1, "endowmentNamespaces"), "containsObject:", CFSTR("com.apple.frontboard.visibility")))return 8;
    else
      return 4;
  }
  else if (v2 == 3)
  {
    return 2;
  }
  else
  {
    return v2 == 1;
  }
}

void CMSUtility_CreateReporterIDIfNeeded(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  id v7;

  if (!objc_msgSend(a1, "reporterIDs"))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", off_1EE2B3D48());
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "reporterIDs"));
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "originalReporterIDs"));
    objc_msgSend(v3, "addObject:", v2);
    objc_msgSend(a1, "setReporterIDs:", v3);
    CMSMNotificationUtility_PostReporterIDsDidChange(a1);
    objc_msgSend(v4, "addObject:", v2);
    objc_msgSend(a1, "setOriginalReporterIDs:", v4);

    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = objc_msgSend(a1, "displayID");
    v6 = v5 != 0;
    if (v5)
      objc_msgSend(v7, "setObject:forKey:", objc_msgSend(a1, "displayID"), 0x1E30A9648);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v6 = 1;
      objc_msgSend(v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1), 0x1E30A98A8);
      objc_msgSend(v7, "setObject:forKey:", objc_msgSend(a1, "remoteDeviceID"), 0x1E30A98C8);
    }
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      objc_msgSend(v7, "setObject:forKey:", MEMORY[0x1E0C9AAB0], 0x1E30A98E8);
    }
    else if (!v6)
    {
LABEL_10:

      return;
    }
    ((void (*)(uint64_t, id))off_1EE2B3D70)(objc_msgSend(v2, "longLongValue"), v7);
    goto LABEL_10;
  }
}

void CMSMNotificationUtility_PostReporterIDsDidChange(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = a1;
  v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostReporterIDsDidChange_block_invoke;
  v4[3] = &unk_1E3099900;
  v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostReporterIDsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 410, 0, 0, v3, (uint64_t)v4);
}

id CMSMNotificationUtility_CreateRecordingSessionsDescription()
{
  id v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v15 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v6, "isRecording"))
        {
          v12 = 0u;
          v13 = 0u;
          if (v6)
            objc_msgSend(v6, "auditToken");
          v7 = objc_alloc(MEMORY[0x1E0C99D80]);
          v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v6, "audioSessionID"));
          v9 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v12, 32);
          v10 = (void *)objc_msgSend(v7, "initWithObjectsAndKeys:", v8, CFSTR("AudioSessionID"), v9, CFSTR("AuditToken"), 0, v12, v13);
          objc_msgSend(v0, "addObject:", v10);

        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v3);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v0;
}

id CMSMUtility_CopyRecordingClientsInfoForSystemStatus()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  void *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v23;
  unsigned int v24;
  id v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSPointerArray *obj;
  _OWORD v36[2];
  os_log_type_t type;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  _OWORD v47[8];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v40;
    v4 = 0x1E0C99000uLL;
    v33 = v0;
    v34 = *(_QWORD *)v40;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v40 != v3)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v5);
        if (objc_msgSend(v6, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording"))
          v7 = objc_msgSend(v6, "wantsToShowMicrophoneIndicatorWhenNotRecording");
        else
          v7 = 0;
        if ((objc_msgSend(v6, "isRecording") & 1) != 0
          || (objc_msgSend(v6, "isUsingBuiltInMicForRecording") | v7) == 1)
        {
          v8 = objc_alloc_init(*(Class *)(v4 + 3592));
          if (objc_msgSend(v6, "hasEntitlementToSuppressRecordingStateToSystemStatus"))
            v9 = CMSUtility_GetPrefersSuppressingRecordingState(v6) != 0;
          else
            v9 = 0;
          if ((!v9 | v7) == 1 && v0 && v8)
          {
            objc_msgSend(v8, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")), 0x1E30A4E68);
            v10 = (void *)MEMORY[0x1E0CB37E8];
            if ((v7 & 1) != 0)
              v11 = 0;
            else
              v11 = objc_msgSend(v6, "isRecordingMuted");
            objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v10, "numberWithBool:", v11), 0x1E30A5A88);
            if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
            {
              if (objc_msgSend(v6, "displayID"))
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v6, "displayID"), 0x1E30ADCC8);
              if (objc_msgSend(v6, "auditTokenSetByClient"))
              {
                memset(v47, 0, 32);
                if (v6)
                  objc_msgSend(v6, "auditToken");
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v47, 32), 0x1E30ADCE8);
              }
              v12 = (void *)objc_msgSend((id)objc_msgSend(v6, "hostProcessAttribution"), "firstObject");
              if (!v12)
              {
                v20 = (void *)objc_msgSend(-[MXMediaEndowmentManager getRecordingAttributions:](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "getRecordingAttributions:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")), "firstObject");
                if (v20)
                {
                  v21 = v20;
                  v14 = objc_msgSend(v20, "valueForKey:", CFSTR("BundleID"));
                  v15 = objc_msgSend(v21, "valueForKey:", CFSTR("RecordingWebsite"));
                  v16 = objc_msgSend(v21, "valueForKey:", CFSTR("AuditToken"));
                  if (!dword_1EE2B3F38)
                    goto LABEL_43;
                  v38 = 0;
                  type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v23 = v38;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                    v24 = v23;
                  else
                    v24 = v23 & 0xFFFFFFFE;
                  if (v24)
                  {
LABEL_40:
                    v43 = 136315394;
                    v44 = "CMSMUtility_CopyRecordingClientsInfoForSystemStatus";
                    v45 = 2114;
                    v46 = v14;
                    LODWORD(v32) = 22;
                    v31 = &v43;
                    _os_log_send_and_compose_impl();
                  }
LABEL_41:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
                  if (!objc_msgSend(v6, "isCameraRecordingExtension"))
                    goto LABEL_49;
                  if (v6)
                    objc_msgSend(v6, "auditToken");
                  else
                    memset(v36, 0, sizeof(v36));
                  v25 = MX_CoreServices_CopyContainingBundleID(v36);
                  v14 = (uint64_t)v25;
                  if (!dword_1EE2B3F38)
                  {
                    v16 = 0;
                    v15 = 0;
                    if (v25)
                      goto LABEL_44;
                    goto LABEL_45;
                  }
                  v38 = 0;
                  type = OS_LOG_TYPE_DEFAULT;
                  v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v27 = v38;
                  if (os_log_type_enabled(v26, type))
                    v28 = v27;
                  else
                    v28 = v27 & 0xFFFFFFFE;
                  if (v28)
                  {
                    v43 = 136315394;
                    v44 = "CMSMUtility_CopyRecordingClientsInfoForSystemStatus";
                    v45 = 2114;
                    v46 = v14;
                    LODWORD(v32) = 22;
                    v31 = &v43;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v16 = 0;
                  v15 = 0;
                }
                v0 = v33;
                goto LABEL_43;
              }
              v13 = v12;
              v14 = objc_msgSend(v12, "valueForKey:", CFSTR("BundleID"));
              v15 = objc_msgSend(v13, "valueForKey:", CFSTR("RecordingWebsite"));
              v16 = objc_msgSend(v13, "valueForKey:", CFSTR("AuditToken"));
              if (dword_1EE2B3F38)
              {
                v38 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v18 = v38;
                if (os_log_type_enabled(v17, type))
                  v19 = v18;
                else
                  v19 = v18 & 0xFFFFFFFE;
                if (v19)
                  goto LABEL_40;
                goto LABEL_41;
              }
LABEL_43:
              if (v14)
LABEL_44:
                objc_msgSend(v8, "setObject:forKey:", v14, 0x1E30ADCA8, v31, v32);
LABEL_45:
              if (v15)
                objc_msgSend(v8, "setObject:forKey:", v15, 0x1E30ADC88);
              v3 = v34;
              v4 = 0x1E0C99000;
              if (v16)
                objc_msgSend(v8, "setObject:forKey:", v16, 0x1E30ADD08);
LABEL_49:
              if (objc_msgSend(v6, "preferredMinimumMicrophoneIndicatorLightOnTime", v31, v32))
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v6, "preferredMinimumMicrophoneIndicatorLightOnTime"), 0x1E30ADD28);
            }
            objc_msgSend(v0, "addObject:", v8);
          }

        }
        ++v5;
      }
      while (v2 != v5);
      v29 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
      v2 = v29;
    }
    while (v29);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v0;
}

__CFDictionary *cmsutility_createVolumeChangeMessageForAudioStatistics(const char *a1, const void *a2, const void *a3, int a4, int a5, float a6)
{
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  CFNumberRef v13;
  CFNumberRef v14;
  CFStringRef v15;
  CFNumberRef v16;
  const __CFString *StringForVolumeOperationType;
  int v19;
  uint64_t v20;
  float valuePtr;

  valuePtr = a6;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = CFNumberCreate(v11, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, CFSTR("MXSessionVolume"), v13);
  if (v13)
    CFRelease(v13);
  v20 = FigGetUpTimeNanoseconds() / 1000000000;
  v14 = CFNumberCreate(v11, kCFNumberSInt64Type, &v20);
  CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumeOperationTime"), v14);
  if (v14)
    CFRelease(v14);
  if (a1)
  {
    v15 = CFStringCreateWithCString(v11, a1, 0x8000100u);
    CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumeOperationProcess"), v15);
    if (v15)
      CFRelease(v15);
  }
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumeCategory"), a2);
  if (a3)
    CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumeRoute"), a3);
  v19 = a4;
  v16 = CFNumberCreate(v11, kCFNumberSInt32Type, &v19);
  CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumePlayingState"), v16);
  if (v16)
    CFRelease(v16);
  StringForVolumeOperationType = CMSMUtility_GetStringForVolumeOperationType(a5);
  CFDictionarySetValue(Mutable, CFSTR("MXSessionVolumeOperationType"), StringForVolumeOperationType);
  return Mutable;
}

const __CFString *CMSMUtility_GetStringForVolumeOperationType(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 1)
    v1 = CFSTR("Automatic");
  if (a1)
    return v1;
  else
    return CFSTR("UserInitiated");
}

uint64_t CMSUtility_SetAudioServiceTypeForReporterID(void *a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int IsAudioCategoryAlertType;

  if (objc_msgSend(a1, "isTheAssistant"))
  {
    v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
    v5 = a2;
    v6 = 1;
    return v4(v5, v6);
  }
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
  {
    v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
    v5 = a2;
    v6 = 4;
    return v4(v5, v6);
  }
  result = objc_msgSend(a1, "isMemberOfClass:", objc_opt_class());
  if ((result & 1) == 0)
  {
    if (CMSUtility_HasPhoneCallBehaviour(a1))
    {
      v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
      v5 = a2;
      v6 = 2;
    }
    else
    {
      objc_msgSend(a1, "audioCategory");
      if (FigCFEqual())
      {
        v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
        v5 = a2;
        v6 = 3;
      }
      else if (CMSUtility_IsAudioCategoryNonLongFormPlayback((uint64_t)a1))
      {
        v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
        v5 = a2;
        v6 = 8;
      }
      else if (CMSUtility_IsAudioCategoryLongFormPlayback((uint64_t)a1))
      {
        v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
        v5 = a2;
        v6 = 7;
      }
      else
      {
        IsAudioCategoryAlertType = CMSUtility_IsAudioCategoryAlertType((uint64_t)a1);
        v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EE2B3D60;
        if (IsAudioCategoryAlertType)
        {
          v5 = a2;
          v6 = 10;
        }
        else
        {
          v5 = a2;
          v6 = 0;
        }
      }
    }
    return v4(v5, v6);
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryNonLongFormPlayback(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    result = objc_msgSend((id)result, "audioCategory");
    if (result)
    {
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("UserInterfaceSoundEffects")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("AmbientSound")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("LiveAudio")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("SoloAmbientSound")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("Multi")))
        return 1;
      result = -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v1, "audioCategory"));
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryLongFormPlayback(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    result = objc_msgSend((id)result, "audioCategory");
    if (result)
    {
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("MediaPlayback")))
        return 1;
      result = CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("MediaPlaybackNoSpeaker"));
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryAlertType(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    result = objc_msgSend((id)result, "audioCategory");
    if (result)
    {
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("WaterEjection")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("Ringtone")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("RingtonePreview")))
        return 1;
      if (CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("EmergencyAlert")))
        return 1;
      result = CFEqual((CFTypeRef)objc_msgSend(v1, "audioCategory"), CFSTR("EmergencyAlert_Muteable"));
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

void CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_f(void *a1)
{
  CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("AudioBehaviourDidChange"));

}

uint64_t cmsInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void *CMSUtility_GetWantsToBeVolumeButtonClient(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "wantsToBeVolumeButtonClient");
  return result;
}

void FigRouteDiscovererRemoteXPC_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __remoteXPCRouteDiscoverer_DisposeCaches_block_invoke;
    v4[3] = &__block_descriptor_40_e5_v8__0l;
    v4[4] = DerivedStorage;
    MXDispatchSync((uint64_t)"remoteXPCRouteDiscoverer_DisposeCaches", (uint64_t)"FigRouteDiscovererRemoteXPC.m", 79, 0, 0, v2, (uint64_t)v4);
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)v1 && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendSyncMessage();
    FigXPCRelease();
  }
  v3 = *(NSObject **)(v1 + 16);
  if (v3)
    dispatch_release(v3);
}

uint64_t routingContextResilientRemote_CopyPredictedSelectedRouteDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopyPredictedSelectedRouteDescriptor_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t FigRoutingContextResilientRemoteCopySystemMusicContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopyContextForUUID(const __CFAllocator *a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const __CFDictionary *MutableCopy;
  FigRemoteRoutingContextFactory *Current;
  const void *Value;
  const __CFNumber *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, const void **);
  void (*v13[6])(_QWORD);
  _QWORD v14[7];
  int v15;
  int valuePtr;
  const void *v17;
  CFTypeRef v18;

  v18 = 0;
  valuePtr = 0;
  MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
  Current = FigRemoteRoutingContextFactoryGetCurrent();
  Value = CFDictionaryGetValue(MutableCopy, CFSTR("contextType"));
  v17 = Value;
  if (Value)
  {
    v8 = (const __CFNumber *)Value;
    CFRetain(Value);
    goto LABEL_8;
  }
  v9 = -[FigRemoteRoutingContextFactory copyContextForUUIDWithAllocator:options:context:](Current, "copyContextForUUIDWithAllocator:options:context:", a1, MutableCopy, &v18);
  if ((_DWORD)v9)
  {
LABEL_14:
    v10 = v9;
    goto LABEL_15;
  }
  v10 = (uint64_t)v18;
  if (!v18)
    goto LABEL_15;
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v11)
  {
    v9 = v11(v10, CFSTR("contextType"), *MEMORY[0x1E0C9AE00], &v17);
    if (!(_DWORD)v9)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("contextType"), v17);
      v8 = (const __CFNumber *)v17;
LABEL_8:
      if (CFNumberGetValue(v8, kCFNumberIntType, &valuePtr))
      {
        if (a1)
          CFRetain(a1);
        if (MutableCopy)
          CFRetain(MutableCopy);
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 3221225472;
        v14[2] = __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke;
        v14[3] = &unk_1E309D7E0;
        v14[5] = a1;
        v14[6] = MutableCopy;
        v15 = valuePtr;
        v14[4] = Current;
        v13[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
        v13[1] = (void (*)(_QWORD))3221225472;
        v13[2] = __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke_2;
        v13[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
        v13[4] = (void (*)(_QWORD))a1;
        v13[5] = (void (*)(_QWORD))MutableCopy;
        v9 = FigRoutingContextResilientRemoteCreate(v14, v13, a3);
      }
      else
      {
        v9 = FigSignalErrorAt();
      }
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  v10 = 4294954514;
LABEL_15:
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v10;
}

uint64_t routingContextRemoteXPC_CopySelectedRouteDescriptors(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v6);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCMessageCopyCFArray();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingContextResilientRemote_CopySelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopySelectedRouteDescriptors_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextRemoteXPC_CopySelectedBufferedEndpoint(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v4);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      FigXPCMessageSetCFString();
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
        ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
    }
  }
  v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextResilientRemote_withRemoteContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;
  const void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  BOOL v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  v4 = *(CFTypeRef *)(DerivedStorage + 24);
  if (v4)
    v4 = CFRetain(v4);
  cf = v4;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf);
    v8 = v7;
    if ((_DWORD)v7 == -16155 || (_DWORD)v7 == -12026 || (_DWORD)v7 == -16152)
    {
      if (cf)
        CFRetain(cf);
      if (v5)
        CFRelease(v5);
      v5 = cf;
    }
    do
    {
      v11 = v8;
      v13 = (_DWORD)v8 == -16155 || (_DWORD)v8 == -12026 || (_DWORD)v8 == -16152;
      if (!v13 || v6 == 5)
        break;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v8 = routingContextResilientRemote_replaceRemoteContext();
      ++v6;
    }
    while ((_DWORD)v8);
  }
  while (((_DWORD)v11 == -16155 || (_DWORD)v11 == -12026 || (_DWORD)v11 == -16152) && v6 < 5);
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t FigVolumeControllerCopySharedControllerRemote(CFTypeRef *a1)
{
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  if (FigVolumeControllerCopySharedControllerRemote_sInitSingletonOnce != -1)
  {
    dispatch_once(&FigVolumeControllerCopySharedControllerRemote_sInitSingletonOnce, &__block_literal_global_33);
    if (a1)
      goto LABEL_3;
LABEL_12:
    v2 = 4294949706;
    goto LABEL_8;
  }
  if (!a1)
    goto LABEL_12;
LABEL_3:
  if (volumeControllerRemote_ensureClientEstablished_onceToken != -1)
    dispatch_once(&volumeControllerRemote_ensureClientEstablished_onceToken, &__block_literal_global_4_0);
  v2 = volumeControllerRemote_ensureClientEstablished_err;
  if (!volumeControllerRemote_ensureClientEstablished_err)
  {
    v2 = singletonVolumeController_copyRemoteVolumeController(gSingletonVolumeController, &cf);
    if (!(_DWORD)v2)
      *a1 = CFRetain((CFTypeRef)gSingletonVolumeController);
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t routingContextRemoteXPC_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  if (!a4)
    return FigSignalErrorAt();
  result = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (!(_DWORD)result)
    result = FigXPCSendStdCopyPropertyMessage();
  *a4 = 0;
  return result;
}

uint64_t singletonVolumeController_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t volumeControllerRemote_CanUseForRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t value;
  xpc_object_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  value = 0;
  v9 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_CanUseForRoutingContext);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCRoutingContext_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t singletonVolumeController_CanUseForRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_GetVolumeControlTypeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_copyRemoteVolumeController(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t uint64;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v14;
  CFTypeRef v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v5 = singletonVolumeController_copyCachedRemoteVolumeController(a1, &v11);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    if (v11)
    {
LABEL_3:
      v6 = 0;
      *a2 = v11;
      return v6;
    }
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
    v6 = singletonVolumeController_copyCachedRemoteVolumeController(a1, &v11);
    if (!(_DWORD)v6 && !v11)
    {
      xdict = 0;
      v14 = 0;
      cf = 0;
      if (volumeControllerRemote_ensureClientEstablished_onceToken != -1)
        dispatch_once(&volumeControllerRemote_ensureClientEstablished_onceToken, &__block_literal_global_4_0);
      v6 = volumeControllerRemote_ensureClientEstablished_err;
      if (!volumeControllerRemote_ensureClientEstablished_err)
      {
        v8 = FigXPCCreateBasicMessage();
        if ((_DWORD)v8
          || (v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v8)
          || (uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]),
              v8 = FigXPCRemoteClientRetainCopiedObject(),
              (_DWORD)v8))
        {
          v6 = v8;
        }
        else
        {
          v10 = cf;
          if (cf)
          {
LABEL_16:
            v6 = 0;
            cf = 0;
LABEL_17:
            FigXPCRelease();
            FigXPCRelease();
            if (cf)
              CFRelease(cf);
            FigXPCRemoteClientKillServerOnTimeout();
            if (!(_DWORD)v6)
              singletonVolumeController_setCachedRemoteVolumController(a1, v10);
            MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
            goto LABEL_22;
          }
          v15 = 0;
          FigVolumeControllerGetClassID();
          v6 = CMDerivedObjectCreate();
          if (!(_DWORD)v6)
          {
            *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
            FigXPCRemoteClientAssociateObject();
            v10 = v15;
            goto LABEL_16;
          }
          if (v15)
            CFRelease(v15);
        }
      }
      v10 = 0;
      goto LABEL_17;
    }
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
    if (!(_DWORD)v6)
      goto LABEL_3;
  }
LABEL_22:
  if (v11)
    CFRelease(v11);
  return v6;
}

uint64_t singletonVolumeController_copyCachedRemoteVolumeController(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x1940352F8](*DerivedStorage);
  v5 = (CFTypeRef)v4[2];
  if (v5)
  {
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) == 1)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v5 = (CFTypeRef)v4[2];
      if (v5)
      {
        CFRelease(v5);
        v5 = 0;
        v4[2] = 0;
      }
    }
    else
    {
      v5 = (CFTypeRef)v4[2];
      if (v5)
        v5 = CFRetain(v5);
    }
  }
  *a2 = v5;
  MEMORY[0x194035304](*v4);
  return 0;
}

uint64_t volumeControllerRemote_GetVolumeControlTypeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t v7;

  v7 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_uint64(0, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

const void *singletonVolumeController_copyRemoteRoutingContext(const void *a1)
{
  void (*v2)(const void *, __CFString *, _QWORD, CFBooleanRef *);
  CFTypeRef v3;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  v2 = *(void (**)(const void *, __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v2
    && (v2(a1, CFSTR("supportsCopyRemoteContext"), *MEMORY[0x1E0C9AE00], &BOOLean), BOOLean)
    && CFBooleanGetValue(BOOLean))
  {
    v3 = FigRoutingContextResilientRemoteCopyRemoteContext();
  }
  else
  {
    if (!a1)
      goto LABEL_8;
    v3 = CFRetain(a1);
  }
  a1 = v3;
LABEL_8:
  if (BOOLean)
    CFRelease(BOOLean);
  return a1;
}

uint64_t routingContextResilientRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v8;
  uint64_t result;
  _QWORD v10[7];

  if (FigCFEqual())
  {
    if (*MEMORY[0x1E0C9AE50])
      v8 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    else
      v8 = 0;
    result = 0;
    *a4 = v8;
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __routingContextResilientRemote_CopyProperty_block_invoke;
    v10[3] = &__block_descriptor_56_e34_i16__0__OpaqueFigRoutingContext__8l;
    v10[4] = a2;
    v10[5] = a3;
    v10[6] = a4;
    return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v10);
  }
  return result;
}

uint64_t FigRoutingContextXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteXPCRoutingContext_GetObjectID(a1, a2);
  else
    return 4294955276;
}

CFTypeRef FigRoutingContextResilientRemoteCopyRemoteContext()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  return v2;
}

uint64_t volumeControllerRemote_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t v7;

  v7 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigVolumeControllerGetClassID()
{
  if (FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce != -1)
    dispatch_once_f(&FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce, &FigVolumeControllerGetClassID_sFigVolumeControllerClassID, (dispatch_function_t)volumeController_getClassID);
  return FigVolumeControllerGetClassID_sFigVolumeControllerClassID;
}

void singletonVolumeController_setCachedRemoteVolumController(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*DerivedStorage);
  if (DerivedStorage[2])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v4 = (const void *)DerivedStorage[2];
    if (v4)
    {
      CFRelease(v4);
      DerivedStorage[2] = 0;
    }
  }
  if (a2)
  {
    DerivedStorage[2] = CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
  }
  JUMPOUT(0x194035304);
}

uint64_t FigRoutingContextResilientRemoteCreate(void *a1, void (**a2)(_QWORD), _QWORD *a3)
{
  uint64_t started;
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v14;
  NSObject *v15;
  dispatch_queue_t v16;
  NSObject *v17;
  dispatch_queue_t v18;
  CFTypeRef v20;
  CFTypeRef cf;

  v20 = 0;
  FigRoutingContextGetClassID();
  started = CMDerivedObjectCreate();
  if ((_DWORD)started)
    goto LABEL_30;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = objc_msgSend(a1, "copy");
  *DerivedStorage = v8;
  if (!v8)
  {
    FigSignalErrorAt();
    v12 = 0;
    goto LABEL_26;
  }
  v9 = v8;
  v10 = 5;
  cf = 0;
  while (1)
  {
    v11 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 16))(v9, &cf);
    v12 = v11;
    if ((int)v11 > -12027)
      break;
    if ((_DWORD)v11 != -16155 && (_DWORD)v11 != -16152)
      goto LABEL_17;
LABEL_12:
    if (!--v10)
      goto LABEL_17;
  }
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != -12026)
      goto LABEL_17;
    goto LABEL_12;
  }
  v14 = cf;
  if (cf)
    v14 = CFRetain(cf);
  DerivedStorage[3] = v14;
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v12)
  {
    DerivedStorage[2] = FigSimpleMutexCreate();
    if (!DerivedStorage[3])
      goto LABEL_29;
    v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v16 = dispatch_queue_create("com.apple.coremedia.routing-context.resilient-remote.notifications", v15);
    DerivedStorage[4] = v16;
    if (!v16)
      goto LABEL_29;
    v17 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v18 = dispatch_queue_create("com.apple.coremedia.routing-context.remote-replacement", v17);
    DerivedStorage[5] = v18;
    if (!v18)
      goto LABEL_29;
    started = routingContextResilientRemote_startObservingRemoteContext();
    if (!(_DWORD)started)
    {
      if (a3)
      {
        *a3 = 0;
        v12 = 0;
        DerivedStorage[1] = objc_msgSend(a2, "copy", 0);
        goto LABEL_26;
      }
LABEL_29:
      started = FigSignalErrorAt();
    }
LABEL_30:
    v12 = started;
  }
  if (a2 && (_DWORD)v12)
    a2[2](a2);
LABEL_26:
  if (v20)
    CFRelease(v20);
  return v12;
}

uint64_t routingContext_create(uint64_t a1, const __CFDictionary *a2, int a3, CFTypeRef *a4)
{
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t uint64;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  xpc_object_t v16;
  xpc_object_t xdict;

  v16 = 0;
  xdict = 0;
  cf = 0;
  if (!a4)
  {
    v8 = FigSignalErrorAt();
LABEL_18:
    v13 = v8;
    goto LABEL_14;
  }
  v8 = routingContextRemoteXPC_EnsureClientEstablished();
  if ((_DWORD)v8)
    goto LABEL_18;
  if (a2 && CFDictionaryContainsKey(a2, CFSTR("contextUUID")))
  {
    v9 = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    v9 = a3 != 0;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
    goto LABEL_18;
  xpc_dictionary_set_uint64(xdict, (const char *)kFigRoutingContextXPCMsgParam_ContextType, a1);
  FigXPCMessageSetCFDictionary();
  v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v8)
    goto LABEL_18;
  uint64 = xpc_dictionary_get_uint64(v16, (const char *)*MEMORY[0x1E0CA36A0]);
  if (uint64)
  {
    v12 = uint64;
    if ((v10 | v9) != 1 || (v8 = FigXPCRemoteClientRetainCopiedObject(), !(_DWORD)v8))
    {
      v8 = remoteXPCRoutingContext_CreateInternal(v12, &cf);
      if (!(_DWORD)v8)
      {
        v13 = 0;
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) = a1;
        *a4 = cf;
        cf = 0;
        goto LABEL_14;
      }
    }
    goto LABEL_18;
  }
  v13 = 4294955274;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t routingContext_create_0(uint64_t a1, int a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  int CFPreferenceNumberWithDefault;
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (a2 == 5 && !CFPreferenceNumberWithDefault)
  {
    v8 = routingContext_copySystemContext(1u, &cf);
    if (!a4)
      goto LABEL_7;
LABEL_4:
    if (!(_DWORD)v8)
    {
      *a4 = cf;
      return v8;
    }
    goto LABEL_7;
  }
  FigRoutingContextGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    goto LABEL_7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = FigRoutingManagerRegisterAndCopyContext((uint64_t)cf, a3, a2, (CFStringRef *)(DerivedStorage + 8));
  if (!*(_QWORD *)(DerivedStorage + 8))
  {
    v8 = 4294955275;
    goto LABEL_7;
  }
  v8 = v11;
  if (!(_DWORD)v11)
  {
    *(_DWORD *)DerivedStorage = a2;
    if (a4)
      goto LABEL_4;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigRoutingContextRemoteCopyContextForUUID(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const void *Value;
  int v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  _QWORD v12[9];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (a3 && theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("contextUUID"));
    if (Value)
    {
      v7 = routingContextRemoteXPC_EnsureClientEstablished();
      *((_DWORD *)v18 + 6) = v7;
      if (!v7)
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __FigRoutingContextRemoteCopyContextForUUID_block_invoke;
        v12[3] = &unk_1E3099618;
        v12[4] = &v13;
        v12[5] = &v17;
        v12[6] = Value;
        v12[7] = a1;
        v12[8] = theDict;
        MXDispatchSync((uint64_t)"FigRoutingContextRemoteCopyContextForUUID", (uint64_t)"FigRoutingContextRemoteXPC.m", 2003, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v12);
        v8 = v14;
        *a3 = v14[3];
        v8[3] = 0;
      }
    }
    else
    {
      *((_DWORD *)v18 + 6) = -12020;
    }
  }
  else
  {
    v20 = -12020;
  }
  v9 = (const void *)v14[3];
  if (v9)
    CFRelease(v9);
  v10 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_1936189E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t routingContextRemoteXPC_EnsureClientEstablished()
{
  __CFDictionary *Mutable;

  if (routingContextRemoteXPC_EnsureClientEstablished_onceToken != -1)
    dispatch_once(&routingContextRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_43);
  MEMORY[0x1940352F8](routingContextRemoteXPC_EnsureClientEstablished_sFigRoutingContextRemoteClientMutex);
  if (!gFigRoutingContextRemoteClient)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("RoutingContext_ServerConnectionDied"));
    routingContextRemoteXPC_EnsureClientEstablished_err = FigXPCRemoteClientCreate();
    if (Mutable)
      CFRelease(Mutable);
  }
  MEMORY[0x194035304](routingContextRemoteXPC_EnsureClientEstablished_sFigRoutingContextRemoteClientMutex);
  return routingContextRemoteXPC_EnsureClientEstablished_err;
}

uint64_t remoteXPCRoutingContext_CreateInternal(uint64_t a1, CFTypeRef *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef v7;
  NSObject *v8;
  dispatch_queue_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  NSObject *v12;
  dispatch_queue_t v13;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v15;
  uint64_t v16;
  CFDictionaryValueCallBacks v18;
  CFTypeRef cf;

  cf = 0;
  memset(&v18, 0, sizeof(v18));
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigRoutingContextGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v18.version = 0;
    v18.retain = (CFDictionaryRetainCallBack)remoteXPCRoutingContext_cloneCompletionCallback;
    v18.copyDescription = 0;
    v18.equal = 0;
    v18.release = (CFDictionaryReleaseCallBack)remoteXPCRoutingContext_freeCompletionCallback;
    v7 = CFDictionaryCreateMutable(v4, 0, 0, &v18);
    DerivedStorage[3] = v7;
    if (v7)
    {
      v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v9 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.completioncallbacks", v8);
      DerivedStorage[2] = v9;
      if (v9)
      {
        DerivedStorage[4] = 1;
        v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        v11 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.commChannels", v10);
        DerivedStorage[5] = v11;
        if (v11)
        {
          v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
          v13 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.notification", v12);
          DerivedStorage[6] = v13;
          if (v13)
          {
            Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
            DerivedStorage[7] = Mutable;
            if (Mutable)
            {
              v15 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              DerivedStorage[8] = v15;
              if (v15)
              {
                DerivedStorage[1] = a1;
                FigXPCRemoteClientAssociateObject();
                v16 = 0;
                *a2 = cf;
                return v16;
              }
            }
          }
        }
      }
    }
    v5 = FigSignalErrorAt();
  }
  v16 = v5;
  if (cf)
    CFRelease(cf);
  return v16;
}

uint64_t FigRoutingContextGetClassID()
{
  if (FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce != -1)
    dispatch_once(&FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce, &__block_literal_global_10);
  return sFigRoutingContextClassID;
}

uint64_t routingContextResilientRemote_startObservingRemoteContext()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  CMNotificationCenterGetDefaultLocalCenter();
  v0 = 0;
  while (1)
  {
    result = FigNotificationCenterAddWeakListener();
    if ((_DWORD)result)
      break;
    v0 += 8;
    if (v0 == 24)
    {
      v2 = 0;
      while (1)
      {
        result = FigNotificationCenterAddWeakListener();
        if ((_DWORD)result)
          break;
        v2 += 8;
        if (v2 == 48)
          return FigNotificationCenterAddWeakListener();
      }
      return result;
    }
  }
  return result;
}

FigRemoteRoutingContextFactory *FigRemoteRoutingContextFactoryGetCurrent()
{
  FigRemoteRoutingContextFactory *v0;
  FigRemoteRoutingContextFactory *result;

  v0 = objc_alloc_init(FigRemoteRoutingContextFactory);
  result = (FigRemoteRoutingContextFactory *)dispatch_get_specific(CFSTR("kFigRoutingSessionResilientRemoteCurrentRemoteRoutingContextFactoryKey"));
  if (!result)
    return v0;
  return result;
}

uint64_t FigRoutingContextRemoteCopySystemAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(1uLL, a2, 1, a3);
}

uint64_t routingContextRemoteXPC_CopyPredictedSelectedRouteDescriptor(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v6);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCMessageCopyCFDictionary();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t FigRoutingContextRemoteCopySystemMusicContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(3uLL, a2, 1, a3);
}

uint64_t volumeControllerServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  value = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294951138;
  return v6;
}

uint64_t FigVolumeControllerGetTypeID()
{
  if (FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce != -1)
    dispatch_once_f(&FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce, &FigVolumeControllerGetClassID_sFigVolumeControllerClassID, (dispatch_function_t)volumeController_getClassID);
  return CMBaseClassGetCFTypeID();
}

uint64_t volumeControllerServer_handleGetEndpointVolumeControlTypeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t *);
  uint64_t v7;
  uint64_t value;

  value = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &value);
  if (!(_DWORD)v7)
    xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType, value);
  return v7;
}

uint64_t volumeController_GetVolumeControlTypeForEndpointWithID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  CFTypeRef v7;
  BOOL v8;
  CFTypeRef cf;
  CFTypeRef v11;

  if (!a3)
    return 4294949706;
  v11 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v11);
  cf = 0;
  if (!v11)
    return 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, *MEMORY[0x1E0CA44B0], *MEMORY[0x1E0C9AE00], &cf);
    v7 = cf;
    if ((_DWORD)v6)
      v8 = 1;
    else
      v8 = cf == 0;
    if (!v8)
    {
      *a3 = FigCFNumberGetUInt64();
      v7 = cf;
    }
    if (v7)
    {
      CFRelease(v7);
      cf = 0;
    }
  }
  else
  {
    v6 = 4294954514;
  }
  if (v11)
    CFRelease(v11);
  return v6;
}

uint64_t volumeController_copyEndpointWithID(uint64_t result, uint64_t a2, OpaqueFigEndpoint **a3)
{
  void *v5;
  uint64_t DerivedStorage;
  int64_t Count;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  const void *ValueAtIndex;
  CFTypeRef v16;
  const void *v17;
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, uint64_t, uint64_t, CFArrayRef *);
  CFIndex v20;
  CFIndex v21;
  CFIndex v22;
  const void *v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  const void *v27;
  OpaqueFigEndpoint *v28;
  uint64_t v29;
  int64_t v30;
  __CFArray *v31;
  const __CFArray *v32;
  CFIndex v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFIndex v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, CFArrayRef *);
  OpaqueFigEndpoint *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void **v46;
  OpaqueFigEndpoint **v47;
  CFArrayRef theArray;
  CFArrayRef v49;

  if (a3)
  {
    v5 = (void *)result;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(DerivedStorage + 16), v8, 0);
    v45 = v5;
    v47 = a3;
    if (Count >= 1)
    {
      v9 = 0;
      v43 = *MEMORY[0x1E0CA43D0];
      v42 = *MEMORY[0x1E0C9AE00];
      while (1)
      {
        v10 = (uint64_t)v8[v9];
        theArray = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints(v10, (uint64_t)&theArray);
        v11 = theArray;
        if (!theArray)
          goto LABEL_39;
        v12 = CFArrayGetCount(theArray);
        if (v12 < 1)
          goto LABEL_20;
        v13 = v12;
        v14 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
            break;
          if (v13 == ++v14)
            goto LABEL_20;
        }
        if (!ValueAtIndex || (v16 = CFRetain(ValueAtIndex)) == 0)
        {
LABEL_20:
          if (!theArray)
            goto LABEL_39;
          v24 = CFArrayGetCount(theArray);
          if (v24 < 1)
            goto LABEL_28;
          v25 = v24;
          v26 = 0;
          while (1)
          {
            v27 = CFArrayGetValueAtIndex(theArray, v26);
            if (volumeController_doesEndpointHaveSameID((uint64_t)v27, a2))
              break;
            if (v25 == ++v26)
              goto LABEL_28;
          }
          if (v27)
            v28 = (OpaqueFigEndpoint *)CFRetain(v27);
          else
LABEL_28:
            v28 = 0;
          goto LABEL_36;
        }
        v17 = v16;
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v16))
        {
          v49 = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (!v19)
            goto LABEL_32;
          v19(CMBaseObject, v43, v42, &v49);
          if (v49)
            break;
        }
        v28 = 0;
LABEL_35:
        CFRelease(v17);
LABEL_36:
        if (theArray)
          CFRelease(theArray);
        if (v28)
          goto LABEL_41;
LABEL_39:
        if (++v9 == Count)
          goto LABEL_40;
      }
      v20 = CFArrayGetCount(v49);
      if (v20 < 1)
        goto LABEL_32;
      v21 = v20;
      v22 = 0;
      while (1)
      {
        v23 = CFArrayGetValueAtIndex(v49, v22);
        if (volumeController_doesEndpointHaveSameID((uint64_t)v23, a2))
          break;
        if (v21 == ++v22)
          goto LABEL_32;
      }
      if (v23)
        v28 = (OpaqueFigEndpoint *)CFRetain(v23);
      else
LABEL_32:
        v28 = 0;
      if (v49)
        CFRelease(v49);
      goto LABEL_35;
    }
LABEL_40:
    v28 = 0;
LABEL_41:
    free(v8);
    *v47 = v28;
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
    result = (uint64_t)v45;
    if (!*v47)
    {
      v29 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x1940352F8](*(_QWORD *)(v29 + 8));
      v30 = CFDictionaryGetCount(*(CFDictionaryRef *)(v29 + 16));
      v44 = v29;
      v46 = (const void **)malloc_type_calloc(v30, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v29 + 16), v46, 0);
      v31 = FigRoutingManagerCopyRegisteredEndpointManagers();
      v32 = v31;
      if (v31)
        v33 = CFArrayGetCount(v31);
      else
        v33 = 0;
      if (v30 < 1)
      {
LABEL_56:
        v41 = 0;
      }
      else
      {
        v34 = 0;
        v35 = *MEMORY[0x1E0CA3A40];
        v36 = *MEMORY[0x1E0C9AE00];
        while (v33 < 1)
        {
LABEL_55:
          if (++v34 == v30)
            goto LABEL_56;
        }
        v37 = 0;
        v38 = (uint64_t)v46[v34];
        while (1)
        {
          CFArrayGetValueAtIndex(v32, v37);
          v49 = 0;
          v39 = FigEndpointManagerGetCMBaseObject();
          v40 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (v40)
            v40(v39, v35, v36, &v49);
          v41 = FigRoutingManagerCopyEndpointWithDeviceID(a2, 0, (uint64_t)v49, v38);
          if (v49)
            CFRelease(v49);
          if (v41)
            break;
          if (v33 == ++v37)
            goto LABEL_55;
        }
      }
      *v47 = v41;
      if (v32)
        CFRelease(v32);
      free(v46);
      return MEMORY[0x194035304](*(_QWORD *)(v44 + 8));
    }
  }
  return result;
}

__CFArray *FigRoutingManagerCopyRegisteredEndpointManagers()
{
  return -[MXEndpointDescriptorCache copyRegisteredEndpointMangers](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyRegisteredEndpointMangers");
}

uint64_t volumeControllerServer_handleCanUseForRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef, char *);
  uint64_t v7;
  char v9;
  CFTypeRef cf;

  cf = 0;
  v9 = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
  {
    v7 = v5;
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t, CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v6)
    {
      v7 = v6(a1, cf, &v9);
      if (!(_DWORD)v7)
        xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanUseForRoutingContext, v9 != 0);
    }
    else
    {
      v7 = 4294954514;
    }
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t volumeController_AreVolumeOperationsSupportedForRoutingContext(uint64_t a1, uint64_t a2, Boolean *a3)
{
  uint64_t result;
  uint64_t DerivedStorage;
  Boolean v6;
  void *key;

  result = 4294949706;
  if (a2 && a3)
  {
    key = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&key);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
    v6 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), key);
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
    *a3 = v6;
    if (key)
      CFRelease(key);
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextUUID(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[7];

  if (!a2)
    return 4294954296;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  if (!byte_1EE2B2EB0)
    v4 = 0;
  v8[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextUUID_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  v8[4] = v4;
  v8[5] = a1;
  v8[6] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 2575, 0, 0, v6, (uint64_t)v8);
  return 0;
}

void MXDispatchSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  void *v14;
  void *v15;
  _QWORD block[6];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v14 = (void *)MEMORY[0x194035B20]();
  v15 = (void *)MEMORY[0x194035B20]();
  v25 = 0;
  v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      CreateACQDispatchID();
  }
  objc_autoreleasePoolPop(v15);
  v26 = v24;
  v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      MEMORY[0x1940347A0](&v26, 0, "MXDispatchSync", a1, a2, a3, a4, a5);
  }
  objc_autoreleasePoolPop(v14);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXDispatchSync_block_invoke;
  block[3] = &unk_1E309E5C0;
  v17 = v26;
  v18 = v27;
  v19 = a1;
  v23 = a3;
  v20 = a2;
  v21 = a4;
  v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_sync(a6, block);
}

uint64_t FigRoutingContextXPCServerCopyRoutingContextForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t volumeControllerServer_handleGetMuteOfEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

uint64_t volumeController_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  CFTypeRef v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;

  if (!MX_FeatureFlags_IsMuteEnabled())
    return 0;
  v15 = 0;
  cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    v14 = 0;
    if (!cf)
      return 4294949706;
    v6 = CFRetain(cf);
    v7 = *MEMORY[0x1E0C9AE00];
    if (!v6)
      goto LABEL_7;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (!v9)
    {
      v10 = 4294954514;
      goto LABEL_12;
    }
    v10 = v9(CMBaseObject, *MEMORY[0x1E0CA42C0], v7, &v14);
    if (!(_DWORD)v10)
    {
LABEL_7:
      v10 = 0;
      *a3 = FigCFEqual();
    }
LABEL_12:
    v11 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(v11, *MEMORY[0x1E0CA4348], v7, &v15);
    if (v6)
      CFRelease(v6);
    if (v14)
      CFRelease(v14);
    goto LABEL_18;
  }
  v10 = 0;
LABEL_18:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v15)
    CFRelease(v15);
  return v10;
}

uint64_t MX_FeatureFlags_IsMuteEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t FigVolumeControllerCopySharedController(_QWORD *a1)
{
  CFTypeRef v2;

  if (!a1)
    return 4294949706;
  if (FigVolumeControllerCopySharedController_sFigVolumeControllerSetupOnce != -1)
    dispatch_once(&FigVolumeControllerCopySharedController_sFigVolumeControllerSetupOnce, &__block_literal_global_16);
  v2 = (CFTypeRef)FigVolumeControllerCopySharedController_volumeController;
  if (FigVolumeControllerCopySharedController_volumeController)
    v2 = CFRetain((CFTypeRef)FigVolumeControllerCopySharedController_volumeController);
  *a1 = v2;
  return FigVolumeControllerCopySharedController_err;
}

FigResilientRemoteRoutingContextFactory *FigResilientRemoteRoutingContextFactoryGetCurrent()
{
  return objc_alloc_init(FigResilientRemoteRoutingContextFactory);
}

uint64_t systemController_notificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFDictionary *a5)
{
  __CFString **v6;
  __CFString *v7;

  if (FigCFEqual())
  {
    v6 = kMXSystemControllerNotificationKey_SomeClientIsPlayingDidChange_IsPlaying;
  }
  else if (FigCFEqual())
  {
    v6 = kMXSystemControllerNotificationKey_NowPlayingAppIsPlayingDidChange_State;
  }
  else if (FigCFEqual())
  {
    v6 = kMXSystemControllerNotificationKey_SpeechDetectionDevicePresentDidChange_Present;
  }
  else if (FigCFEqual())
  {
    v6 = kMXSystemControllerNotificationKey_CurrentRouteHasVolumeControlDidChange_HasVolumeControl;
  }
  else
  {
    if (!FigCFEqual())
      goto LABEL_13;
    v6 = kMXSystemControllerNotificationKey_CallIsActiveDidChange_CallActive;
  }
  v7 = *v6;
  if (!CFDictionaryGetValue(a5, *v6))
    CFDictionarySetValue(a5, v7, (const void *)*MEMORY[0x1E0C9AE40]);
LABEL_13:
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

const __CFDictionary *cmsmGetPickedRouteApplierFunction(const __CFDictionary *result, const __CFDictionary **a2)
{
  const __CFDictionary *v3;

  if (!*a2)
  {
    v3 = result;
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("RouteCurrentlyPicked"));
    if (result)
    {
      result = (const __CFDictionary *)CFBooleanGetValue(result);
      if ((_DWORD)result)
        *a2 = v3;
    }
  }
  return result;
}

const void *CMSUtility_CopyActivationContextForPickingRoutes(void *a1)
{
  const void *v1;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = (const void *)objc_msgSend(a1, "activationContext");
    if (v1)
LABEL_3:
      CFRetain(v1);
  }
  else
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
          if (objc_msgSend(v8, "isActive") && (objc_msgSend(v8, "currentlyControllingFlags") & 2) != 0)
          {
            v1 = (const void *)objc_msgSend(v8, "activationContext");
            goto LABEL_16;
          }
        }
        v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
          continue;
        break;
      }
    }
    v1 = 0;
LABEL_16:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (v1)
      goto LABEL_3;
  }
  return v1;
}

void cmsUpdateAudioBehavior(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v3;
  const void *Value;
  NSObject *v5;

  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(a1, "isRoutedToOnDemandVAD"))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  v3 = CMSUtility_CopySessionAudioBehaviour(a1);
  objc_msgSend(a1, "audioBehaviour");
  if (FigCFEqual())
  {
    if (!v3)
      return;
LABEL_14:
    CFRelease(v3);
    return;
  }
  if (v3)
    Value = CFDictionaryGetValue((CFDictionaryRef)v3, CFSTR("AudioBehaviour_Destination"));
  else
    Value = 0;
  objc_msgSend(a1, "setAudioBehaviour:", v3);
  objc_msgSend(a1, "setAudioDestinationPriority:", Value);
  if (a1)
    CFRetain(a1);
  v5 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"cmsUpdateAudioBehavior", (uint64_t)"CMSessionManager.m", 7459, 0, 0, v5, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_f);
  CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
  if (v3)
    goto LABEL_14;
}

uint64_t MXSMPerformVolumeOperation(unsigned int a1, const __CFString *a2, const void *a3, const void *a4, const __CFString *a5, int a6, uint64_t pid, float *a8, float VolumeDeltaIfRoutedToThirdPartyTV, float a10, float a11, _BYTE *a12, CFTypeRef *a13, uint64_t *a14, unsigned __int8 a15, char a16)
{
  int v21;
  unsigned int v22;
  BOOL v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t VolumeSequenceNumber;
  NSObject *v26;
  BOOL v28;
  const __CFString *v29;
  id v30;
  NSObject *v31;
  void *VolumeButtonClient;
  _BOOL4 IsAdditiveRoutingEnabled;
  char v34;
  void *v35;
  int v36;
  int v37;
  __CFArray *v38;
  __CFArray *v39;
  void *ValueAtIndex;
  const __CFString *v41;
  char v42;
  double v43;
  double v44;
  char v45;
  char v46;
  NSObject *v47;
  int v48;
  CFTypeRef v49;
  CFTypeRef v50;
  float v51;
  NSObject *v52;
  float v53;
  float v54;
  float v55;
  NSObject *v56;
  float v57;
  float v58;
  uint64_t v59;
  double v60;
  double v61;
  NSObject *v62;
  uint64_t v63;
  double v64;
  double v65;
  void *v66;
  int v67;
  const void *v69;
  __CFDictionary *VolumeNotificationPayload;
  _BOOL4 v71;
  int IsPlaying;
  _BOOL4 v73;
  char v74;
  CFTypeRef v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __CFString *v82;
  __CFString *cf;
  unsigned int v89;
  os_log_type_t v90[8];
  id v91;
  float v92;
  char v93;
  __int16 v94;
  CFTypeRef v95;
  CFTypeRef v96[2];
  CFTypeRef v97[2];
  uint64_t v98;
  os_log_type_t type[16];
  __int128 v100;
  char buffer[32];
  __int128 location;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  memset(buffer, 0, sizeof(buffer));
  v89 = a1;
  if ((int)pid < 1)
  {
    v22 = a1;
    v21 = 0;
    goto LABEL_5;
  }
  v21 = proc_name(pid, buffer, 0x20u);
  v22 = v89;
  if ((v21 & 0x80000000) == 0)
LABEL_5:
    buffer[v21] = 0;
  v23 = a11 != 0.0 && a10 != 0.0;
  if ((a10 != 0.0) != (a11 != 0.0))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  VolumeSequenceNumber = 0;
  if (v22 > 0xE || ((1 << v22) & 0x5836) == 0)
  {
LABEL_18:
    if (dword_1EE2B3C78)
      return 0;
    if (a2)
      v28 = 0;
    else
      v28 = v22 == 13;
    if (v28)
      v29 = CFSTR("SoloAmbientSound");
    else
      v29 = a2;
    cf = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v76, v79), "getUncustomizedCategory:", v29);
    v95 = 0;
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      v30 = -[MXAdditiveRoutingManager copyActiveVoiceOverSessionPlayingToOnDemandVAD](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyActiveVoiceOverSessionPlayingToOnDemandVAD");
      if (v30)
      {
        if (dword_1EE2B3F38)
        {
          LODWORD(v96[0]) = 0;
          v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_initWeak((id *)&location, v30);
        -[MXSessionManager mxCoreSessionListRemoveSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListRemoveSession:", objc_loadWeak((id *)&location));
        -[MXSessionManager mxCoreSessionListAddSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListAddSession:", objc_loadWeak((id *)&location));
        objc_destroyWeak((id *)&location);
      }
    }
    else
    {
      v30 = 0;
    }
    VolumeButtonClient = CMSessionMgrFindVolumeButtonClient(v89);
    v94 = 0;
    v93 = 0;
    v92 = 0.0;
    *(_OWORD *)type = 0u;
    v100 = 0u;
    IsAdditiveRoutingEnabled = CMSMVAUtility_IsAdditiveRoutingEnabled();
    v34 = 1;
    if (v30 && IsAdditiveRoutingEnabled)
    {
      v35 = PVMGetMappedCategory((void *)objc_msgSend(VolumeButtonClient, "audioCategory"));
      if ((objc_msgSend(VolumeButtonClient, "isEqual:", v30) & 1) != 0
        || !objc_msgSend(v35, "isEqualToString:", CFSTR("Audio/Video")))
      {
        v34 = 1;
      }
      else
      {
        if ((int)objc_msgSend((id)objc_msgSend(v30, "clientPID"), "intValue") < 1)
        {
          v36 = 0;
        }
        else
        {
          v36 = proc_name(objc_msgSend((id)objc_msgSend(v30, "clientPID"), "intValue"), type, 0x20u);
          if (v36 < 0)
          {
            v34 = 0;
            goto LABEL_41;
          }
        }
        v34 = 0;
        type[v36] = OS_LOG_TYPE_DEFAULT;
      }
    }
LABEL_41:
    if (v89 == 1)
      VolumeDeltaIfRoutedToThirdPartyTV = CMSUtility_GetVolumeDeltaIfRoutedToThirdPartyTV(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV);
    v37 = a15;
    if (objc_msgSend(VolumeButtonClient, "isActive", v77, v80))
    {
      if (VolumeButtonClient
        && !objc_msgSend(VolumeButtonClient, "currentlyControllingFlags")
        && objc_msgSend(VolumeButtonClient, "hwControlFlags"))
      {
        v38 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_HasSameAudioCategory, (uint64_t)CFSTR("VoiceOver"));
        v39 = v38;
        if (v38)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v38, 0);
          if (ValueAtIndex)
          {
            if ((objc_msgSend(ValueAtIndex, "currentlyControllingFlags") & 2) != 0)
            {
              objc_msgSend(VolumeButtonClient, "audioCategory");
              if (FigCFEqual())
                objc_msgSend(VolumeButtonClient, "isPlaying");
            }
          }
          CFRelease(v39);
        }
        if (v89 <= 0xE && ((1 << v89) & 0x5836) != 0)
          cmsTryToTakeControl(VolumeButtonClient);
      }
      if (CMSMUtility_ShouldChangeMainVolume(VolumeButtonClient, v89, (uint64_t)cf, (uint64_t)a3))
      {
        vaemUnmuteFullMuteIfMuted();
        CMSMUtility_ChangeMainVolumeForSession(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, v89, (uint64_t)&v92);
        v41 = CFSTR("Audio/Video");
        if (CFSTR("Audio/Video"))
          goto LABEL_62;
        goto LABEL_63;
      }
      v96[0] = 0;
      PVMCopyCurrentCategoryAndMode(&v95, v96);
      if (!PVMGetEnabled())
      {
        if (!CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
          && v89 <= 0xE
          && ((1 << v89) & 0x5836) != 0)
        {
          cmsTryToTakeControl(VolumeButtonClient);
        }
        if (v95)
        {
          CFRelease(v95);
          v95 = 0;
        }
        if (v96[0])
        {
          CFRelease(v96[0]);
          v96[0] = 0;
        }
        PVMCopyCurrentCategoryAndMode(&v95, v96);
      }
      if (!v23)
        MXSMCancelAnyInProgressVolumeRampIfNeeded((const __CFString *)v95, v96[0], v89);
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
        v45 = v34;
      else
        v45 = 1;
      if ((v45 & 1) == 0)
      {
        v91 = (id)objc_msgSend(v30, "audioCategory");
        *(_QWORD *)v90 = (id)objc_msgSend(v30, "audioMode");
        if (v89 <= 0xE && ((1 << v89) & 0x5836) != 0)
        {
          -[MXSessionManager setVoiceOverVADVolumeNeedsUpdate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setVoiceOverVADVolumeNeedsUpdate:", 1);
        }
        else
        {
          if (dword_1EE2B3F38)
          {
            v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v37 = a15;
          }
          v63 = objc_msgSend((id)objc_msgSend(v30, "clientPID", v78, v81), "intValue");
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
          cmsmGetAndSetVolumePreferencesForActiveVolumeClient(v30, VolumeSequenceNumber, v89, v64, v65, VolumeDeltaIfRoutedToThirdPartyTV, v63, (uint64_t)type, (const __CFString **)&v91, (const void **)v90, cf, a3, a4, a5, 0, &v94, &v93, &v92, (_BYTE *)&v94 + 1,
            a12,
            v37);
          VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
        }

      }
      *(float *)&v43 = a10;
      *(float *)&v44 = a11;
      cmsmGetAndSetVolumePreferencesForActiveVolumeClient(VolumeButtonClient, VolumeSequenceNumber, v89, v43, v44, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, (const __CFString **)&v95, v96, cf, a3, a4, a5, a6, &v94, &v93, &v92, (_BYTE *)&v94 + 1,
        a12,
        v37);
      v42 = v45 ^ 1;
      goto LABEL_149;
    }
    if (VolumeButtonClient)
    {
      if (CMSMUtility_ShouldChangeMainVolume(VolumeButtonClient, v89, (uint64_t)cf, (uint64_t)a3))
      {
        vaemUnmuteFullMuteIfMuted();
        CMSMUtility_ChangeMainVolumeForSession(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, v89, (uint64_t)&v92);
        v41 = CFSTR("Audio/Video");
        if (CFSTR("Audio/Video"))
LABEL_62:
          v41 = (const __CFString *)CFRetain(CFSTR("Audio/Video"));
LABEL_63:
        v42 = 0;
        v95 = v41;
        v93 = 1;
        goto LABEL_149;
      }
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
        v46 = v34;
      else
        v46 = 1;
      if ((v46 & 1) == 0)
      {
        v96[0] = (id)objc_msgSend(v30, "audioCategory");
        v91 = (id)objc_msgSend(v30, "audioMode");
        if (v89 <= 0xE && ((1 << v89) & 0x5836) != 0)
          -[MXSessionManager setVoiceOverVADVolumeNeedsUpdate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setVoiceOverVADVolumeNeedsUpdate:", 1);
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)v90 = 0;
          v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v37 = a15;
        }
        v59 = objc_msgSend((id)objc_msgSend(v30, "clientPID", v78, v81), "intValue");
        LODWORD(v60) = 0;
        LODWORD(v61) = 0;
        cmsmGetAndSetVolumePreferencesForActiveVolumeClient(v30, VolumeSequenceNumber, v89, v60, v61, VolumeDeltaIfRoutedToThirdPartyTV, v59, (uint64_t)type, (const __CFString **)v96, (const void **)&v91, cf, a3, a4, a5, 0, &v94, &v93, &v92, (_BYTE *)&v94 + 1,
          a12,
          v37);
        VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();

      }
      if (!v23)
        MXSMCancelAnyInProgressVolumeRampIfNeeded((const __CFString *)v95, 0, v89);
      cmsmGetAndSetVolumePreferencesForNonActiveVolumeClient(VolumeButtonClient, VolumeSequenceNumber, v89, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, &v95, cf, &v94, &v93, &v92, (_BYTE *)&v94 + 1, a12, v37, a16, a6);
      v42 = v46 ^ 1;
LABEL_149:
      v66 = (void *)v95;
      if (!v37)
      {
        v67 = FigCFEqual();
        v37 = v89 == 12 && v67 != 0;
        v66 = (void *)v95;
      }
      if (v66)
      {
        v69 = PVMGetMappedCategory(v66);
        if (v69)
          v69 = CFRetain(v69);
        v95 = v69;
        CFRelease(v66);
      }
      if (!v37)
      {
        if (v93)
        {
          VolumeNotificationPayload = CMSMNotificationUtility_CreateVolumeNotificationPayload(v95, CFSTR("ExplicitVolumeChange"), 0, VolumeSequenceNumber, a6, v92);
          CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload(VolumeNotificationPayload);
          CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload((uint64_t)VolumeNotificationPayload);
          if (VolumeNotificationPayload)
            CFRelease(VolumeNotificationPayload);
        }
      }
      if ((_BYTE)v94)
        CMSMNotificationUtility_PostUserMutedDidChange((uint64_t)v95, HIBYTE(v94));
      if (v89 <= 0xE && ((1 << v89) & 0x5836) != 0)
      {
        v71 = a6 != 0;
        if (VolumeButtonClient)
          IsPlaying = CMSUtility_GetIsPlaying(VolumeButtonClient);
        else
          IsPlaying = 0;
        if (cf)
          CMSUtility_SendVolumeChangeEventToAudioStatistics(VolumeButtonClient, buffer, (uint64_t)cf, a3, IsPlaying, v71, v92);
        else
          CMSUtility_SendVolumeChangeEventToAudioStatistics(VolumeButtonClient, buffer, (uint64_t)v95, a3, IsPlaying, v71, v92);
        v73 = CMSMVAUtility_IsAdditiveRoutingEnabled();
        v74 = v42 ^ 1;
        if (!v73)
          v74 = 1;
        if ((v74 & 1) == 0)
        {
          if (cf)
            v75 = cf;
          else
            v75 = v95;
          CMSUtility_SendVolumeChangeEventToAudioStatistics(v30, (const char *)type, (uint64_t)v75, a3, objc_msgSend(v30, "isPlaying", v78, v81), v71, v92);
        }
        if (FigCFEqual())
          vaemSetBootChimeVolume(v92);
      }
      if (a8)
        *a8 = v92;
      if (a13)
      {
        *a13 = v95;
      }
      else
      {
        if (!v95)
        {
LABEL_191:
          if (a14)
            *a14 = VolumeSequenceNumber;

          return 0;
        }
        CFRelease(v95);
      }
      v95 = 0;
      goto LABEL_191;
    }
    if (cf)
    {
      v82 = (__CFString *)CFRetain(cf);
      v95 = v82;
LABEL_104:
      if (!v23)
      {
        MXSMCancelAnyInProgressVolumeRampIfNeeded(v82, 0, v89);
        v82 = (__CFString *)v95;
      }
      v98 = 0;
      *(_OWORD *)v96 = 0u;
      *(_OWORD *)v97 = 0u;
      switch(v89)
      {
        case 1u:
          vaemUnmuteFullMuteIfMuted();
          v104 = 0;
          location = 0u;
          v103 = 0u;
          v51 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          PVMSetVolumePreference(v82, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV + v51, 0.0, 0.0);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          v93 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a6, v51, v92);
          if (dword_1EE2B3F38)
            goto LABEL_117;
          break;
        case 2u:
          vaemUnmuteFullMuteIfMuted();
          v104 = 0;
          location = 0u;
          v103 = 0u;
          v53 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          PVMSetVolumePreference(v82, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV, 0.0, 0.0);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          v93 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a6, v53, v92);
          if (dword_1EE2B3F38)
          {
LABEL_117:
            LODWORD(v91) = 0;
            v90[0] = OS_LOG_TYPE_DEFAULT;
            v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v37 = a15;
          }
          break;
        case 3u:
          v104 = 0;
          location = 0uLL;
          v103 = 0uLL;
          v54 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          goto LABEL_126;
        case 4u:
          v96[1] = a3;
          v97[0] = a5;
          v97[1] = a4;
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v96[0] = PVMGetMappedEndpointType((uint64_t)&location);
          vaemUnmuteFullMuteIfMuted();
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v55 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          PVMSetVolumePreference(v82, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV + v55, 0.0, 0.0);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a6, v55, v92);
          if (dword_1EE2B3F38)
            goto LABEL_122;
          goto LABEL_140;
        case 5u:
          v96[1] = a3;
          v97[0] = a5;
          v97[1] = a4;
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v96[0] = PVMGetMappedEndpointType((uint64_t)&location);
          vaemUnmuteFullMuteIfMuted();
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v57 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          PVMSetVolumePreference(v82, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV, 0.0, 0.0);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a6, v57, v92);
          if (dword_1EE2B3F38)
            goto LABEL_122;
          goto LABEL_140;
        case 6u:
          v96[1] = a3;
          v97[0] = a5;
          v97[1] = a4;
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v96[0] = PVMGetMappedEndpointType((uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v54 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
LABEL_126:
          v92 = v54;
          break;
        case 8u:
        case 0xAu:
          if (a12)
            *a12 = 0;
          break;
        case 0xBu:
        case 0xCu:
        case 0xDu:
          if (cf)
          {
            if (a3)
            {
              v96[1] = CFRetain(a3);
              v49 = a5;
              if (a5)
                v49 = CFRetain(a5);
              v97[0] = v49;
              v50 = a4;
              if (a4)
                v50 = CFRetain(a4);
              v97[1] = v50;
            }
            else
            {
              CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration((NSDictionary *)v82, 0, 0, 0, &v96[1], &v97[1], v97);
            }
            location = *(_OWORD *)v96;
            v103 = *(_OWORD *)v97;
            v104 = v98;
            PVMIsCategoryAndRouteInfoCurrent(v82, 0, (uint64_t)&location);
            location = *(_OWORD *)v96;
            v103 = *(_OWORD *)v97;
            v104 = v98;
            v96[0] = PVMGetMappedEndpointType((uint64_t)&location);
            if (v89 == 12)
              PVMSetEnabled(1);
            if (v89 == 11)
              PVMSetEnabled(1);
            location = *(_OWORD *)v96;
            v103 = *(_OWORD *)v97;
            v104 = v98;
            v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
            if (v97[0])
            {
              CFRelease(v97[0]);
              v97[0] = 0;
            }
            if (v96[1])
            {
              CFRelease(v96[1]);
              v96[1] = 0;
            }
            if (v97[1])
              CFRelease(v97[1]);
          }
          break;
        case 0xEu:
          v96[1] = a3;
          v97[0] = a5;
          v97[1] = a4;
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v96[0] = PVMGetMappedEndpointType((uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v58 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          PVMSetRawVolumePreference(v82, 0, (uint64_t)&location, VolumeSequenceNumber, a15, a6, VolumeDeltaIfRoutedToThirdPartyTV);
          location = *(_OWORD *)v96;
          v103 = *(_OWORD *)v97;
          v104 = v98;
          v92 = PVMGetVolumePreference(v82, 0, (uint64_t)&location);
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a6, v58, v92);
          if (dword_1EE2B3F38)
          {
LABEL_122:
            LODWORD(v91) = 0;
            v90[0] = OS_LOG_TYPE_DEFAULT;
            v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v37 = a15;
          }
LABEL_140:
          v93 = 1;
          break;
        default:
          break;
      }
      v42 = 0;
      goto LABEL_149;
    }
    v82 = (__CFString *)cmsmCopyUpdatedVolumeOperationCategoryForNullDefaultCategory(v89);
    v95 = v82;
    switch(v89)
    {
      case 3u:
        v48 = 13;
        break;
      case 2u:
        v48 = 12;
        break;
      case 1u:
        v48 = 11;
        break;
      default:
LABEL_103:
        cf = v82;
        goto LABEL_104;
    }
    v89 = v48;
    goto LABEL_103;
  }
  if (dword_1EE2B3F38)
  {
    LODWORD(v96[0]) = 0;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!HIBYTE(word_1EE2B3C40))
  {
    VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
    v22 = v89;
    goto LABEL_18;
  }
  cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 1, 0, 0, 0, 0);
  return 0;
}

void sub_19361CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id location;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL CMSMVAUtility_IsAdditiveRoutingEnabled()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3C08)
  {
    if (CMSMVAUtility_IsAdditiveRoutingEnabled_onceToken != -1)
      dispatch_once(&CMSMVAUtility_IsAdditiveRoutingEnabled_onceToken, &__block_literal_global_63);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return CMSMVAUtility_IsAdditiveRoutingEnabled_isAdditiveRoutingSupportedForHardware
      && MX_FeatureFlags_IsAdditiveRoutingEnabled() != 0;
}

uint64_t MX_FeatureFlags_IsAdditiveRoutingEnabled()
{
  if (MX_FeatureFlags_IsAdditiveRoutingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAdditiveRoutingEnabled_onceToken, &__block_literal_global_1_0);
  return MX_FeatureFlags_IsAdditiveRoutingEnabled_additiveRoutingEnabled;
}

const __CFString *PVMGetMappedEndpointType(uint64_t a1)
{
  const __CFString *v1;
  const __CFDictionary *v2;
  const __CFAllocator *v4;
  CFDictionaryRef Copy;
  const __CFDictionary *v6;
  const __CFString *v7;
  const __CFDictionary *v8;
  const __CFString *v9;
  __CFString *v10;
  const __CFString *v11;
  const __CFString *MappedRouteIdentifier;
  const __CFString *v13;
  void *v14;
  __CFString *MutableCopy;
  void *value;

  v1 = CFSTR("Unspecified");
  value = CFSTR("Unspecified");
  if (!*(_QWORD *)(a1 + 8))
    return v1;
  v2 = *(const __CFDictionary **)(sStorage + 112);
  if (!v2)
    return v1;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  if (!Copy)
    return v1;
  v6 = Copy;
  v7 = *(const __CFString **)(a1 + 8);
  if (v7)
  {
    v8 = *(const __CFDictionary **)(sStorage + 176);
    if (v8)
    {
      v9 = (const __CFString *)CFDictionaryGetValue(v8, *(const void **)(a1 + 8));
      v10 = *(__CFString **)(a1 + 8);
    }
    else
    {
      v10 = *(__CFString **)(a1 + 8);
      v9 = v10;
    }
    if (v9)
      v11 = v9;
    else
      v11 = v7;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  MappedRouteIdentifier = (const __CFString *)pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v10);
  v13 = *(const __CFString **)(a1 + 16);
  if (v13)
  {
    v14 = *(void **)(a1 + 8);
    if (v14)
    {
      if ((objc_msgSend(v14, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) == 0
        && !objc_msgSend(v14, "hasPrefix:", CFSTR("HeadsetBT")))
      {
        MutableCopy = CFStringCreateMutableCopy(v4, 16, v11);
        CFStringAppend(MutableCopy, CFSTR("~"));
        CFStringAppend(MutableCopy, v13);
        if (!MappedRouteIdentifier)
          goto LABEL_18;
        goto LABEL_17;
      }
    }
  }
  MutableCopy = CFStringCreateMutableCopy(v4, 16, v11);
  if (MappedRouteIdentifier)
  {
LABEL_17:
    CFStringAppend(MutableCopy, CFSTR("~"));
    CFStringAppend(MutableCopy, MappedRouteIdentifier);
  }
LABEL_18:
  CFDictionaryGetValueIfPresent(v6, MutableCopy, (const void **)&value);
  if (MutableCopy)
    CFRelease(MutableCopy);
  CFRelease(v6);
  return (const __CFString *)value;
}

void *CMSUtility_CopySessionAudioBehaviour(void *a1)
{
  void *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFAllocator *v4;
  __CFDictionary *MutableCopy;
  __CFArray *Mutable;
  const __CFString *VADNameforSiriEndpointID;
  __CFDictionary *v8;
  const __CFAllocator *v9;
  const __CFArray *Value;
  __CFArray *v11;
  __CFArray *v12;
  __CFString *v13;
  const __CFAllocator *v14;
  const __CFArray *v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  const __CFArray *v18;

  v1 = a1;
  if (a1)
  {
    v2 = -[MXSessionManager copyAudioBehaviorForCategory:mode:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyAudioBehaviorForCategory:mode:", objc_msgSend(a1, "audioCategory"), objc_msgSend(a1, "audioMode"));
    if (v2)
    {
      v3 = v2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v1, "siriInputDeviceUUID"))
      {
        v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v3);
        Mutable = CFArrayCreateMutable(v4, 1, MEMORY[0x1E0C9B378]);
        objc_msgSend(v1, "siriInputDeviceUUID");
        VADNameforSiriEndpointID = CMSMUtility_GetVADNameforSiriEndpointID();
        if (VADNameforSiriEndpointID)
          CFArrayInsertValueAtIndex(Mutable, 0, VADNameforSiriEndpointID);
        CFDictionarySetValue(MutableCopy, CFSTR("AudioBehaviour_Destination"), Mutable);
        if (MutableCopy)
        {
          v1 = (void *)CFRetain(MutableCopy);
          if (!Mutable)
            goto LABEL_10;
        }
        else
        {
          v1 = 0;
          if (!Mutable)
          {
LABEL_10:
            if (MutableCopy)
            {
              v8 = MutableCopy;
LABEL_30:
              CFRelease(v8);
              goto LABEL_31;
            }
            goto LABEL_31;
          }
        }
        CFRelease(Mutable);
        goto LABEL_10;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)
        && CMSUtility_PlaysToCarAltAudio(v1))
      {
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("AudioBehaviour_Destination"));
        v11 = CFArrayCreateMutableCopy(v9, 0, Value);
        v12 = v11;
        v13 = CFSTR("VirtualAudioDevice_SystemRemote");
      }
      else
      {
        objc_msgSend(v1, "routingContextUUID");
        if (FigCFEqual())
        {
          v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v15 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("AudioBehaviour_Destination"));
          v12 = CFArrayCreateMutableCopy(v14, 0, v15);
          if (!CMSMDeviceState_ItsAnAppleTV()
            || !FigRoutingContextUtilities_IsFollowingAnotherContext(qword_1EE2B3D08))
          {
            CFArrayInsertValueAtIndex(v12, 0, CFSTR("VirtualAudioDevice_Music"));
          }
          v16 = CFDictionaryCreateMutableCopy(v14, 0, v3);
          v17 = v16;
LABEL_25:
          CFDictionarySetValue(v16, CFSTR("AudioBehaviour_Destination"), v12);
          if (v17)
          {
            v1 = (void *)CFRetain(v17);
            if (!v12)
              goto LABEL_28;
          }
          else
          {
            v1 = 0;
            if (!v12)
            {
LABEL_28:
              if (v17)
              {
                v8 = v17;
                goto LABEL_30;
              }
LABEL_31:
              CFRelease(v3);
              return v1;
            }
          }
          CFRelease(v12);
          goto LABEL_28;
        }
        if (!FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(objc_msgSend(v1, "routingContextUUID")))
        {
          v1 = (void *)CFRetain(v3);
          goto LABEL_31;
        }
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v18 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("AudioBehaviour_Destination"));
        v11 = CFArrayCreateMutableCopy(v9, 0, v18);
        v12 = v11;
        v13 = CFSTR("VirtualAudioDevice_PerAppAirPlay");
      }
      CFArrayInsertValueAtIndex(v11, 0, v13);
      v16 = CFDictionaryCreateMutableCopy(v9, 0, v3);
      v17 = v16;
      goto LABEL_25;
    }
    return 0;
  }
  return v1;
}

uint64_t FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(uint64_t a1, int a2)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  uint64_t v6;
  CFArrayRef theArray;

  theArray = 0;
  if (a1)
  {
    if (FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray))
      goto LABEL_10;
  }
  else if (FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(a2, (uint64_t)&theArray))
  {
    goto LABEL_10;
  }
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v3 = Count;
    v4 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        break;
      if (v3 == ++v4)
        goto LABEL_10;
    }
    v6 = 1;
    goto LABEL_11;
  }
LABEL_10:
  v6 = 0;
LABEL_11:
  if (theArray)
    CFRelease(theArray);
  return v6;
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyActivatedEndpoints_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyActivatedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3568, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19361D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_GetCurrentOutputPortAtIndex(uint64_t a1)
{
  uint64_t v2;
  __n128 CMSRouteInfoAt;
  uint64_t v4;
  _DWORD v6[12];

  v2 = dword_1EE2B3C28;
  MEMORY[0x1940352BC](gCMSM);
  if (v2 <= a1)
  {
    v4 = 0;
  }
  else
  {
    CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, a1, (uint64_t)v6);
    v4 = v6[10];
  }
  MEMORY[0x1940352C8](gCMSM, CMSRouteInfoAt);
  return v4;
}

__CFArray *CMSMUtility_CopyCurrentRouteTypes()
{
  __CFArray *Mutable;
  unint64_t v1;
  const __CFString *v2;
  const __CFString *v4;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28)
  {
    v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v1, (uint64_t)&v4);
      if (v4)
        v2 = v4;
      else
        v2 = &stru_1E30A1A48;
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1EE2B3C28);
  }
  MEMORY[0x1940352C8](gCMSM);
  return Mutable;
}

__n128 MXVW_GetCMSRouteInfoAt@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = *a1 + 48 * a2;
  v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

uint64_t MXSMCancelAnyInProgressVolumeRampIfNeeded(const __CFString *a1, const void *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t LastVolumeSetVADID;

  result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if ((_DWORD)result)
  {
    if (a3 <= 0xE && ((1 << a3) & 0x5836) != 0)
    {
      result = vaemVolumeStateGetLastVolumeRampInProgress();
      if ((_DWORD)result)
      {
        vaemVolumeStateGetLastVolumeRampCategory();
        MXSMGetVolumeRampCategory(a1, a2);
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          LastVolumeSetVADID = vaemVolumeStateGetLastVolumeSetVADID();
          return CMSMVAUtility_CancelAnyInProgressVolumeRamp(LastVolumeSetVADID, 3);
        }
      }
    }
  }
  return result;
}

uint64_t MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
{
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_onceToken, &__block_literal_global_55);
  return MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_sAdaptiveVolumeControlEnabled;
}

void *PVMGetMappedCategory(void *key)
{
  const __CFDictionary *v2;
  const void *Value;

  v2 = *(const __CFDictionary **)(sStorage + 160);
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, key);
    if (Value)
      return (void *)Value;
  }
  return key;
}

uint64_t CMSUtility_HasPhoneCallBehaviour(void *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = objc_msgSend(a1, "audioCategory");
  objc_msgSend(a1, "audioMode");
  if (CMSMUtility_DoCategoryAndModeHavePhoneCallBehaviour(v2))
    return 1;
  result = CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(a1, "audioCategory"));
  if ((_DWORD)result)
    return objc_msgSend(a1, "clientPriority") > 9;
  return result;
}

uint64_t CMSMUtility_DoCategoryAndModeHavePhoneCallBehaviour(uint64_t a1)
{
  uint64_t result;
  _BOOL4 v3;

  if (FigCFEqual() || FigCFEqual())
    return 1;
  if (CMSMUtility_IsPlayAndRecordCategory(a1))
  {
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      return 1;
    }
    v3 = FigCFEqual() != 0;
  }
  else
  {
    v3 = 0;
  }
  result = v3 | ((dword_1EE2B3C7C & 2) >> 1);
  if ((dword_1EE2B3C7C & 2) != 0 && !v3)
    return FigCFEqual() != 0;
  return result;
}

BOOL CMSMUtility_IsPlayAndRecordCategory(uint64_t a1)
{
  return a1
      && (FigCFEqual()
       || FigCFEqual()
       || FigCFEqual()
       || FigCFEqual());
}

uint64_t CMSUtility_InterpretInterruptionStyle(void *a1, BOOL *a2, BOOL *a3, BOOL *a4)
{
  uint64_t result;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  result = objc_msgSend(a1, "interruptionStyle");
  v8 = (_DWORD)result == 32;
  if ((_DWORD)result == 8)
    v8 = 0;
  v9 = (_DWORD)result == 4;
  v10 = (_DWORD)result == 1 || (_DWORD)result == 4;
  if ((_DWORD)result == 1)
    v9 = 0;
  if ((int)result <= 7)
    v8 = 0;
  else
    v10 = (_DWORD)result == 8;
  v11 = (int)result <= 7 && v9;
  if (a2)
    *a2 = v10;
  if (a3)
    *a3 = v8;
  if (a4)
    *a4 = v11;
  return result;
}

uint64_t CMSM_GetLocalSessionPriority(void *a1, int a2)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __CFString *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[2];
  int v13;
  int v14;
  __CFString *v15;
  uint64_t v16;

  if (!a1)
    return 100;
  if (!CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, a2 != 0))
    return 100;
  v6 = objc_msgSend(a1, "displayID");
  v7 = objc_msgSend(a1, "clientName");
  v8 = objc_msgSend(a1, "interruptionStyle");
  v9 = (__CFString *)objc_msgSend(a1, "audioCategory");
  v10 = objc_msgSend(a1, "audioMode");
  v11 = objc_msgSend(a1, "clientPriority");
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
  {
    if (CMSUtility_IsAnyPortOfTypeBT((const __CFArray *)objc_msgSend(a1, "allowedPortTypes")))
      v9 = CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker");
  }
  v12[0] = v7;
  v12[1] = v6;
  v13 = v8;
  v14 = v11;
  v15 = v9;
  v16 = v10;
  return -[MXSessionManager getSessionPriority:forTipi:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getSessionPriority:forTipi:", v12, a2 != 0);
}

uint64_t FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  int v12;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    v12 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_IsContextVideoAndIndependent_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextVideoAndIndependent", (uint64_t)"FigRoutingManagerContextUtilities.m", 4975, 0, 0, v4, (uint64_t)v6);
    v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_19361E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL PVMGetEnabled()
{
  _BOOL8 v0;

  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v0 = *(_BYTE *)(sStorage + 8) == 0;
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return v0;
}

CFTypeRef cmsmCopyUpdatedVolumeOperationCategoryForNullDefaultCategory(int a1)
{
  const __CFString *v2;

  if (!CMSMDeviceState_ButtonsCanChangeRingerVolume() && ((a1 - 1) < 6 || a1 == 14))
  {
    v2 = CFSTR("Audio/Video");
    if (!CFSTR("Audio/Video"))
      return 0;
    return CFRetain(v2);
  }
  v2 = (const __CFString *)gDefaultVolumeCategory;
  if (gDefaultVolumeCategory)
    return CFRetain(v2);
  return 0;
}

uint64_t CMSMDeviceState_ButtonsCanChangeRingerVolume()
{
  return byte_1EE2B2A0E;
}

void cmsmGetAndSetVolumePreferencesForActiveVolumeClient(void *a1, uint64_t a2, int a3, double a4, double a5, float a6, uint64_t a7, uint64_t a8, const __CFString **a9, const void **a10, __CFString *a11, const void *a12, const void *a13, const __CFString *a14, unsigned __int8 a15, _BYTE *a16, _BYTE *a17, float *a18, _BYTE *a19, _BYTE *a20,unsigned __int8 a21)
{
  int v25;
  CFStringRef v26;
  OpaqueFigEndpoint *v27;
  OpaqueFigEndpoint *v28;
  uint64_t CMBaseObject;
  void (*v30)(uint64_t, __CFString *, _QWORD, __int128 *);
  CFTypeRef *v31;
  int v32;
  int v33;
  CFTypeRef v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v46;
  NSDictionary **v47;
  const __CFString *v48;
  const void *v49;
  float v50;
  const __CFString *v51;
  const void *v52;
  const __CFString *v53;
  const void *v54;
  float v55;
  NSObject *v56;
  CFTypeRef v57;
  const __CFString *v58;
  const void *v59;
  CFStringRef v60;
  int v64;
  CFTypeRef v65[2];
  CFTypeRef cf[2];
  uint64_t v67;
  uint64_t valuePtr;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v25 = 0;
  v26 = a14;
  v72 = *MEMORY[0x1E0C80C00];
  if (a13 && !a14)
  {
    v27 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)a13, 1, *MEMORY[0x1E0CA3A80], 0);
    if (v27)
    {
      v28 = v27;
      *(_QWORD *)&v69 = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v30 = *(void (**)(uint64_t, __CFString *, _QWORD, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v30 && (v30(CMBaseObject, CFSTR("VAE_PortID"), *MEMORY[0x1E0C9AE00], &v69), (_QWORD)v69))
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v69, kCFNumberSInt64Type, &valuePtr);
        v26 = vaeCopyRouteSubtypeFromVADPort(valuePtr);
        if ((_QWORD)v69)
          CFRelease((CFTypeRef)v69);
        v25 = 1;
      }
      else
      {
        v26 = 0;
        v25 = 0;
      }
      CFRelease(v28);
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
  }
  v64 = v25;
  v65[0] = 0;
  v65[1] = a12;
  cf[0] = v26;
  cf[1] = a13;
  v67 = 0;
  v69 = *(_OWORD *)v65;
  v70 = *(_OWORD *)cf;
  v71 = 0;
  v65[0] = PVMGetMappedEndpointType((uint64_t)&v69);
  if (a1 && a16 && a17 && a18 && a19)
  {
    v60 = v26;
    switch(a3)
    {
      case 1:
        vaemUnmuteFullMuteIfMuted();
        v35 = PVMGetCurrentPreferredVolume();
        *a18 = v35 + a6;
        PVMSetCurrentPreferredVolume(a2, a21, v35 + a6);
        v36 = PVMGetCurrentPreferredVolume();
        *a18 = v36;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a15, v35, v36);
        if (dword_1EE2B3F38)
          goto LABEL_30;
        break;
      case 2:
        vaemUnmuteFullMuteIfMuted();
        v37 = PVMGetCurrentPreferredVolume();
        PVMSetCurrentPreferredVolume(a2, a21, a6);
        v38 = PVMGetCurrentPreferredVolume();
        *a18 = v38;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a15, v37, v38);
        if (dword_1EE2B3F38)
          goto LABEL_30;
        break;
      case 3:
        v39 = a18;
        v40 = PVMGetCurrentPreferredVolume();
        goto LABEL_32;
      case 4:
        vaemUnmuteFullMuteIfMuted();
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v41 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69);
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        PVMSetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69, 0, a2, a21, v41 + a6);
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v42 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69);
        *a18 = v42;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a15, v41, v42);
        if (dword_1EE2B3F38)
          goto LABEL_30;
        break;
      case 5:
        vaemUnmuteFullMuteIfMuted();
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v43 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69);
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        PVMSetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69, 0, a2, a21, a6);
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v44 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69);
        *a18 = v44;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a15, v43, v44);
        if (dword_1EE2B3F38)
        {
LABEL_30:
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        break;
      case 6:
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v39 = a18;
        v40 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v69);
LABEL_32:
        *v39 = v40;
        break;
      case 7:
        goto LABEL_36;
      case 8:
        if (!a20)
          break;
        goto LABEL_41;
      case 9:
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        if (PVMIsCurrentDeviceRoute((uint64_t)&v69))
        {
LABEL_36:
          v46 = objc_msgSend(a1, "userMuted");
          v47 = (NSDictionary **)MEMORY[0x1E0C9AE40];
          if (!v46)
            v47 = (NSDictionary **)MEMORY[0x1E0C9AE50];
          *a19 = v46 ^ (MXCoreSessionSetProperty(a1, CFSTR("UserMuted"), *v47, 0) == 0);
          *a16 = 1;
        }
        break;
      case 10:
        if (a20)
        {
          v69 = *(_OWORD *)v65;
          v70 = *(_OWORD *)cf;
          v71 = v67;
          if (PVMIsCurrentDeviceRoute((uint64_t)&v69))
LABEL_41:
            *a20 = objc_msgSend(a1, "userMuted");
          else
            *a20 = 0;
        }
        break;
      case 11:
      case 12:
      case 13:
        if (a11)
        {
          v31 = (CFTypeRef *)a9;
          v32 = PVMCategoriesAreEquivalent(*a9, *a10, a11, 0);
          v33 = v32;
          if (a12)
          {
            if (a13)
              v34 = CFRetain(a13);
            else
              v34 = 0;
            cf[1] = v34;
            v65[1] = CFRetain(a12);
            if (v60)
              v57 = CFRetain(v60);
            else
              v57 = 0;
            v31 = (CFTypeRef *)a9;
            cf[0] = v57;
          }
          else if (v32)
          {
            PVMCopyCurrentDeviceRoute(&v65[1], &cf[1], cf);
          }
          else
          {
            CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration((NSDictionary *)a11, 0, 0, 0, &v65[1], &cf[1], cf);
          }
          v69 = *(_OWORD *)v65;
          v70 = *(_OWORD *)cf;
          v71 = v67;
          v65[0] = PVMGetMappedEndpointType((uint64_t)&v69);
          if (!v33)
          {
            if (*v31)
            {
              CFRelease(*v31);
              *v31 = 0;
            }
            if (*a10)
            {
              CFRelease(*a10);
              *a10 = 0;
            }
            *v31 = CFRetain(a11);
          }
          if (a3 == 12)
            PVMSetEnabled(1);
          if (a3 == 11)
            PVMSetEnabled(1);
          v58 = (const __CFString *)*v31;
          v59 = *a10;
          v69 = *(_OWORD *)v65;
          v70 = *(_OWORD *)cf;
          v71 = v67;
          *a18 = PVMGetVolumePreference(v58, v59, (uint64_t)&v69);
          if (cf[1])
          {
            CFRelease(cf[1]);
            cf[1] = 0;
          }
          if (v65[1])
          {
            CFRelease(v65[1]);
            v65[1] = 0;
          }
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
        }
        break;
      case 14:
        v48 = *a9;
        v49 = *a10;
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v50 = PVMGetVolumePreference(v48, v49, (uint64_t)&v69);
        v51 = *a9;
        v52 = *a10;
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        PVMSetRawVolumePreference(v51, v52, (uint64_t)&v69, a2, a21, a15, a6);
        v53 = *a9;
        v54 = *a10;
        v69 = *(_OWORD *)v65;
        v70 = *(_OWORD *)cf;
        v71 = v67;
        v55 = PVMGetVolumePreference(v53, v54, (uint64_t)&v69);
        *a18 = v55;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a15, v50, v55);
        if (dword_1EE2B3F38)
        {
          v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a17 = 1;
        break;
      default:
        break;
    }
    if (v64)
    {
      if (v60)
        CFRelease(v60);
    }
  }
}

float PVMGetCurrentPreferredVolume()
{
  float DefaultVolume;

  DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize())
    return *(float *)(sStorage + 284);
  return DefaultVolume;
}

uint64_t CMSMDeviceState_ItsAnAppleTV()
{
  return byte_1EE2B29C5;
}

uint64_t PVMCopyCurrentDeviceRoute(CFTypeRef *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  const void *v9;

  v6 = PVMInitialize();
  if (!(_DWORD)v6)
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    *a1 = CFRetain(*(CFTypeRef *)(sStorage + 248));
    v7 = (_QWORD *)sStorage;
    if (a2)
    {
      v8 = *(const void **)(sStorage + 264);
      *a2 = v8;
      if (v8)
      {
        CFRetain(v8);
        v7 = (_QWORD *)sStorage;
      }
    }
    if (a3)
    {
      v9 = (const void *)v7[32];
      *a3 = v9;
      if (v9)
      {
        CFRetain(v9);
        v7 = (_QWORD *)sStorage;
      }
    }
    MEMORY[0x1940352C8](*v7);
  }
  return v6;
}

uint64_t CMSUtility_IsAnyPortOfTypeBT(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  unsigned __int8 v4;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  unsigned int ValueUInt32;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v3 = Count;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      ValueUInt32 = MXCFNumberGetValueUInt32(ValueAtIndex);
      if (ValueUInt32 == 1885892674 || ValueUInt32 == 1885892706 || ValueUInt32 == 1886152047)
        v4 = 1;
      if (ValueUInt32 == 1885892674)
        break;
      if (ValueUInt32 == 1885892706)
        break;
      if (ValueUInt32 == 1886152047)
        break;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t figConnection_notificationCallback(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend(a3, "isEqualToString:", AVSystemController_FullMuteDidChangeNotification))
  {
    objc_msgSend(a2, "postFullMuteDidChangeNotification:", a5);
    return objc_msgSend(a2, "postEffectiveVolumeNotification:", a5);
  }
  else
  {
    if (objc_msgSend(a3, "isEqualToString:", AVSystemController_SystemVolumeDidChangeNotification))
      objc_msgSend(a2, "postEffectiveVolumeNotification:", a5);
    return +[AVSystemController postNotificationOnMainQueue:notification:object:](AVSystemController, "postNotificationOnMainQueue:notification:object:", a5, a3, a2);
  }
}

void sub_19361FB40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t HandleNoReplySystemControllerMessage(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t OpCode;
  uint64_t v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x194035B20]();
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v6 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    v5 = LookupSystemControllerByObjectIDForConnection();
    if ((_DWORD)v5)
      v6 = v5;
    else
      v6 = 4294951138;
  }
  objc_autoreleasePoolPop(v3);
  return v6;
}

uint64_t HandleSystemControllerMessage(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t OpCode;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x194035B20]();
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v7 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    v6 = LookupSystemControllerByObjectIDForConnection();
    if ((_DWORD)v6)
      v7 = v6;
    else
      v7 = 4294951138;
  }
  objc_autoreleasePoolPop(v3);
  return v7;
}

uint64_t LookupSystemControllerByObjectIDForConnection()
{
  uint64_t result;

  result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigSystemControllerGetTypeID()
{
  if (FigSystemControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  return CMBaseClassGetCFTypeID();
}

uint64_t systemController_CopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CMSessionMgrCopyPickableRoutesForCategoryAndMode(a2, a3, a4);
}

uint64_t CMSessionMgrCopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD v8[7];

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v6 = MXGetSerialQueue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CMSessionMgrCopyPickableRoutesForCategoryAndMode_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrCopyPickableRoutesForCategoryAndMode", (uint64_t)"CMSessionManager.m", 14968, 0, 0, v6, (uint64_t)v8);
  return 0;
}

uint64_t systemController_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  id *DerivedStorage;
  const void *Value;
  uint64_t v8;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue((CFDictionaryRef)gFigSystemControllerCopyPropertyMapping, a2);
  if (Value)
  {
    v8 = objc_msgSend(*DerivedStorage, "copyAttributeForKey:withValueOut:", Value, a4);
    if ((_DWORD)v8)
      FigCFEqual();
  }
  else if (FigCFEqual())
  {
    v8 = 0;
    *a4 = HDMILatencyMgr_CopyMeasuredHDMILatency();
  }
  else
  {
    return 4294954512;
  }
  return v8;
}

void sub_193620DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXGetSerialQueue()
{
  if (MXGetSerialQueue_onceToken != -1)
    dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
  return gSerialQueue;
}

uint64_t systemController_PerformVolumeOperation(float a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, char a14)
{
  void *v24;
  double v25;
  double v26;
  uint64_t v28;
  uint64_t v29;

  v29 = -1;
  v24 = *(void **)CMBaseObjectGetDerivedStorage();
  LOBYTE(v28) = a14 != 0;
  *(float *)&v25 = a2;
  *(float *)&v26 = a3;
  return objc_msgSend(v24, "performVolumeOperation:volume:category:mode:routeName:routeDeviceIdentifier:routeSubtype:rampUpDuration:rampDownDuration:outVolume:outSequenceNumber:outMuted:outCategoryCopy:outModeCopy:retainFullMute:", a5, a6, a7, a8, a9, a10, COERCE_DOUBLE(__PAIR64__(DWORD1(a12), LODWORD(a1))), v25, v26, a11, &v29, a12, a13, v28);
}

void sub_193621064(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1936211B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t systemController_SetProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  id *DerivedStorage;
  const void *Value;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue((CFDictionaryRef)gFigSystemControllerSetPropertyMapping, a2);
  if (Value)
    return objc_msgSend(*DerivedStorage, "setAttributeForKey:andValue:", Value, a3);
  if (FigCFEqual())
    return HDMILatencyMgr_UpdateMeasuredHDMILatency(a3);
  return 4294954512;
}

uint64_t CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SystemVolumeDidChange"), a1, 0, v4, v5);
}

void CMSMNotificationUtility_PostDisplayLayoutDidChange(int a1, int a2, int a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[5];

  v8 = objc_alloc(MEMORY[0x1E0C99E08]);
  v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0);
  v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2 != 0);
  v11 = (void *)objc_msgSend(v8, "initWithObjectsAndKeys:", v9, CFSTR("DisplayLayoutDidChange_SideOverlayPresent"), v10, CFSTR("DisplayLayoutDidChange_FullScreenModalPresent"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3 != 0), CFSTR("DisplayLayoutDidChange_FullScreenOverlayPresent"), 0);
  v12 = v11;
  if (a4)
    objc_msgSend(v11, "setValue:forKeyPath:", a4, CFSTR("DisplayLayoutDidChange_ApplicationDisplayID"));
  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("DisplayLayoutDidChange"), v12, 0);
  v13 = MXGetNotificationSenderQueue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __CMSMNotificationUtility_PostDisplayLayoutDidChange_block_invoke;
  v14[3] = &unk_1E3099900;
  v14[4] = v12;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostDisplayLayoutDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1188, 0, 0, v13, (uint64_t)v14);
}

uint64_t cmsEnableBluetoothRecording(void *a1, int a2, void *a3)
{
  id CustomizedCategory;
  uint64_t v7;
  uint64_t v9;
  _BOOL8 v10;

  if (!objc_msgSend(a1, "allowsBluetoothRecordingCustomization"))
    return 4294954315;
  objc_msgSend(a1, "setEnableBluetoothRecordingPreference:", a2 != 0);
  objc_msgSend(a1, "setEnableBluetoothRecordingPreferenceSetByClient:", 1);
  CustomizedCategory = CMSUtility_GetCustomizedCategory(a1);
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
    return 0;
  v9 = objc_msgSend(a1, "interruptionStyle");
  if (objc_msgSend(a1, "interruptionStyleSetByClient"))
    v10 = objc_msgSend(a3, "objectForKey:", CFSTR("InterruptionStyle")) == 0;
  else
    v10 = 0;
  -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", v10);
  v7 = cmsSetAudioCategory(a1, CustomizedCategory, 0, a3);
  -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", 0);
  if (v10)
    objc_msgSend(a1, "setInterruptionStyleAtClientRequest:", v9);
  return v7;
}

uint64_t MXSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  OS_dispatch_queue *v8;
  uint64_t UpTimeNanoseconds;
  int v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a1 && a2 && a3)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v8 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __MXSessionCopyProperty_block_invoke;
      v13[3] = &unk_1E3099668;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionCopyProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 220, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = objc_msgSend(a1, "copyPropertyForKey:valueOut:", a2, a3);
      *((_DWORD *)v15 + 6) = v10;
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionCopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
    }
    objc_autoreleasePoolPop(v7);
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_193623808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19362391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  OS_dispatch_queue *v8;
  uint64_t UpTimeNanoseconds;
  int v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a1)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v8 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___MXSessionCopyProperty_block_invoke;
      v13[3] = &unk_1E3099668;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"_MXSessionCopyProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 259, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = objc_msgSend(a1, "_copyPropertyForKey:valueOut:", a2, a3);
      *((_DWORD *)v15 + 6) = v10;
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionCopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
    }
    objc_autoreleasePoolPop(v7);
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_193623AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXCoreSessionCopyProperty(void *a1, CFTypeRef cf1, const __CFAllocator *a3, _QWORD *a4)
{
  NSArray *SInt32;
  uint64_t v9;
  unsigned int IsAirPlayVideoActive;
  __CFString **v11;
  __CFString **v12;
  BOOL v13;
  __CFString *VoicePromptStyle;
  int v16;
  __CFString **v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  NSArray **v23;
  int ClientPID;
  const __CFAllocator *v25;
  CFNumberType v26;
  id v27;
  char v28;
  NSDictionary *v29;
  uint64_t v30;
  NSDictionary *v31;
  NSDictionary *v32;
  void *v33;
  uint64_t CurrentInputVADID;
  NSDictionary *v35;
  uint64_t v36;
  NSDictionary *v37;
  uint64_t v38;
  void *v39;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v41;
  int IsPlaying;
  NSObject *v43;
  int v44;
  NSDictionary *v45;
  const __CFString *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, _QWORD *);
  const void *v50;
  AudioObjectID CurrentOutputVADID;
  CFDataRef v52;
  _BOOL8 IsCategoryInputOnly;
  _BOOL4 v54;
  AudioObjectID v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  int NumberOfChannelsForVADIDAndScope;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  AudioObjectID v65;
  AudioObjectPropertyScope v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, _QWORD *);
  __CFString *v70;
  unsigned int DeviceBufferNumPCMFrames;
  int StereoInputOrientation;
  uint64_t v73;
  id v74;
  double v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t *v79;
  __CFString *v80;
  _BOOL8 IsRecordingCategory;
  NSObject *v82;
  int v83;
  int v84;
  void *VolumeButtonClient;
  unsigned int IsMATAtmosEnabled;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, __CFString *, uint64_t, uint64_t, CFTypeRef *, _QWORD *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v94;
  NSArray **v95;
  uint64_t v96;
  id v97;
  unsigned int VADCategoryFromFigCategoryName;
  int v99;
  const void *v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  id v107;
  _BOOL4 v108;
  NSObject *v109;
  const void **v110;
  const void *v111;
  __CFArray *v112;
  AudioObjectID v113;
  int v114;
  float CurrentSafetyOffsetForScope;
  uint64_t v116;
  void (*v117)(uint64_t, __CFString *, _QWORD, const __CFString *, const __CFString *, _QWORD, CFTypeRef *);
  const void *ValueAtIndex;
  CFTypeRef v119;
  const void *v120;
  const void *v121;
  const void **v122;
  const void *v123;
  const void *v124;
  const __CFString *CurrentDeviceIdentifierAtIndex;
  const void **v126;
  __CFArray *v127;
  _BOOL4 v128;
  const void *v129;
  int ShouldResumeForCarPlay;
  NSObject *v131;
  const void *v132;
  __CFArray *v133;
  const __CFString *v134;
  const void **v135;
  const __CFArray *v136;
  const void **v137;
  const __CFArray *v138;
  CFIndex Count;
  CFIndex v140;
  CFIndex v141;
  BOOL v142;
  const __CFNumber *v143;
  const __CFString *v144;
  int IsDeviceIDIncludedInCarBluetoothIDs;
  const void *v146;
  __CFArray *v147;
  NSObject *v148;
  __CFArray *v149;
  NSObject *v150;
  int v151;
  int v152;
  const void **v153;
  const void *v154;
  int v155;
  int IsInterrupted;
  __CFString **v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __CFArray *cf;
  unsigned int v164;
  CFTypeRef valuePtr[18];

  valuePtr[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!cf1 || !a4)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("ActivationContext")))
  {
    if (a1)
    {
      if (!objc_msgSend(a1, "activationContext"))
      {
        v9 = 0;
        *a4 = 0;
        return v9;
      }
      SInt32 = (NSArray *)objc_msgSend(a1, "activationContext");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("AirPlayVideoIsActive")))
  {
    IsAirPlayVideoActive = CMSMUtility_IsAirPlayVideoActive();
LABEL_11:
    v11 = (__CFString **)MEMORY[0x1E0C9AE50];
    v12 = (__CFString **)MEMORY[0x1E0C9AE40];
    v13 = IsAirPlayVideoActive == 0;
    goto LABEL_12;
  }
  if (CFEqual(cf1, CFSTR("AllowedRouteTypes")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "allowedRouteTypes");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("AllowedToUseHardwareAudioCodec")))
  {
    if (a1)
    {
      v16 = objc_msgSend(a1, "mixesWithEveryone");
      v11 = (__CFString **)MEMORY[0x1E0C9AE40];
      v17 = (__CFString **)MEMORY[0x1E0C9AE50];
      goto LABEL_34;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("AllowMixableAudioWhileRecording")))
  {
    if (!a1 || (objc_msgSend(a1, "isTheAssistant") & 1) == 0)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "allowMixableAudioWhileRecording");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("AllowSystemSoundsWhileRecording")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "allowSystemSoundsWhileRecording");
LABEL_33:
    v11 = (__CFString **)MEMORY[0x1E0C9AE50];
    v17 = (__CFString **)MEMORY[0x1E0C9AE40];
LABEL_34:
    if (!v16)
      v11 = v17;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("AudioBehaviour")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "audioBehaviour");
LABEL_40:
    *a4 = VoicePromptStyle;
    if (!VoicePromptStyle)
      return 0;
    goto LABEL_15;
  }
  if (CFEqual(cf1, CFSTR("AudioCategory")))
  {
    if (!a1)
      return FigSignalErrorAt();
    SInt32 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory"));
LABEL_47:
    SInt32 = SInt32;
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("BadgeType")))
  {
    SInt32 = (NSArray *)objc_msgSend(a1, "badgeType");
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("AudioHardwareControlFlags")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "hwControlFlags");
LABEL_51:
    SInt32 = (NSArray *)FigCFNumberCreateSInt32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("AudioMode")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "audioMode");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("AudioOnlyAirPlayVideoIsActive")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isAudioOnlyAirPlayVideoActive");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("DoesGameAudioNeedToBeSpatialized")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v18 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v19 = objc_msgSend(a1, "doesGameAudioNeedToBeSpatialized");
    goto LABEL_61;
  }
  if (CFEqual(cf1, CFSTR("CanBeginInterruption")))
  {
    if (!a1)
      return FigSignalErrorAt();
    goto LABEL_65;
  }
  if (CFEqual(cf1, CFSTR("DefaultBuiltInRoute")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "defaultBuiltInRoutePreference");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("EnableBluetoothRecording")))
  {
    if (a1)
    {
      v22 = objc_msgSend(a1, "enableBluetoothRecordingPreference");
      v23 = (NSArray **)MEMORY[0x1E0C9AE50];
      if (!v22)
        v23 = (NSArray **)MEMORY[0x1E0C9AE40];
      SInt32 = *v23;
      if (!*v23)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ClientName")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "clientName");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ClientPID")))
  {
    if (a1)
    {
      ClientPID = CMSUtility_GetClientPID(a1);
LABEL_83:
      LODWORD(valuePtr[0]) = ClientPID;
      v25 = a3;
LABEL_84:
      v26 = kCFNumberSInt32Type;
LABEL_85:
      SInt32 = (NSArray *)CFNumberCreate(v25, v26, valuePtr);
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ClientPriority")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "clientPriority");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("ConstantOutputVolumeLeveldB")))
  {
    if (a1)
    {
      v27 = objc_alloc(MEMORY[0x1E0CB37E8]);
      objc_msgSend(a1, "constantOutputVolumeLeveldB");
      SInt32 = (NSArray *)objc_msgSend(v27, "initWithFloat:");
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ControlsRoute")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v28 = objc_msgSend(a1, "currentlyControllingFlags");
    v11 = (__CFString **)MEMORY[0x1E0C9AE50];
    v12 = (__CFString **)MEMORY[0x1E0C9AE40];
    v13 = (v28 & 2) == 0;
LABEL_12:
    if (v13)
      v11 = v12;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("AudioSessionID")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "audioSessionID");
LABEL_98:
    SInt32 = (NSArray *)FigCFNumberCreateUInt32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("CurrentAudioHardwareSampleRate")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v29 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "devicesSampleRates");
    v30 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
    v31 = v29;
    goto LABEL_109;
  }
  if (CFEqual(cf1, CFSTR("CurrentInputSampleRate")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v32 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "devicesSampleRates");
    v33 = (void *)MEMORY[0x1E0CB37E8];
    CurrentInputVADID = CMSUtility_GetCurrentInputVADID(a1);
    goto LABEL_108;
  }
  if (CFEqual(cf1, CFSTR("CurrentOutputSampleRate")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v32 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "devicesSampleRates");
    v33 = (void *)MEMORY[0x1E0CB37E8];
    CurrentInputVADID = CMSUtility_GetCurrentOutputVADID(a1);
LABEL_108:
    v30 = objc_msgSend(v33, "numberWithUnsignedInt:", CurrentInputVADID);
    v31 = v32;
LABEL_109:
    SInt32 = -[NSDictionary objectForKey:](v31, "objectForKey:", v30);
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("CurrentSpeechDetectionDeviceSampleRate")))
  {
    if (a1)
    {
      v35 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "devicesSampleRates");
      v36 = -[NSDictionary objectForKey:](v35, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID")));
      v37 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "devicesSampleRates");
      v38 = -[NSDictionary objectForKey:](v37, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")));
      if (v36)
        v39 = (void *)v36;
      else
        v39 = (void *)v38;
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      SInt32 = v39;
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("DefaultVPChatMode")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "defaultVPChatMode");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("DetailedActiveAudioRoute")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "copyDetailedRouteDescription");
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("DoNotNotifyOtherSessionsOnNextInactive")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "doNotNotifyOtherSessionsOnNextInactive");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("DoNotResetAudioCategoryOnNextInactive")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "doNotResetAudioCategoryOnNextInactive");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("DuckFadeDuration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "duckFadeDuration");
LABEL_139:
    SInt32 = (NSArray *)FigCFNumberCreateFloat32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("DuckToLevelDB")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "duckToLevelDB");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("DuckToLevelScalar")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "duckToLevelScalar");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("ForceSoundCheck")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "forceSoundCheck");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("HandsOverInterruptionsToInterruptor")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v18 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v19 = objc_msgSend(a1, "handsOverInterruptionsToInterruptor");
    goto LABEL_61;
  }
  if (CFEqual(cf1, CFSTR("HapticEngineIsPlaying")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "hapticEngineIsPlaying");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsPlayingOutput")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isPlayingOutput");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("HostProcessAttribution")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "hostProcessAttribution");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("IAmTheAssistant")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isTheAssistant");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("InterruptionFadeDuration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "interruptionFadeDuration");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("InterruptionStyle")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "interruptionStyle");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("IsActive")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isActive");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsAirPlayReceiverSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isAirPlayReceiverSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("BypassSystemSpatialAudioForGame")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v18 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v19 = objc_msgSend(a1, "bypassSystemSpatialAudioForGame");
    goto LABEL_61;
  }
  if (CFEqual(cf1, CFSTR("IsAudioSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isAudioSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsEligibleForBTSmartRoutingConsideration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isEligibleForBTSmartRoutingConsideration");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsEligibleForBTTriangleConsideration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isEligibleForBTTriangleConsideration");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsRemoteDeviceInputControlAllowed")))
  {
    if (MX_FeatureFlags_IsOnenessEnabled() && a1)
    {
      IsAirPlayVideoActive = vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts();
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("IsRecordingMutedForRemoteDevice")))
  {
    if (!a1 || !MX_FeatureFlags_IsOnenessEnabled())
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isRecordingMutedForRemoteDevice");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("SupportedOutputChannelLayouts")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "supportedOutputChannelLayouts");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("ShouldMuteBeAppliedToRemoteDevice")))
  {
    if (!MX_FeatureFlags_IsOnenessEnabled() || !a1)
      return FigSignalErrorAt();
    if (!objc_msgSend(a1, "isTheAssistant"))
    {
      v16 = objc_msgSend(a1, "shouldMuteBeAppliedToRemoteDevice");
      goto LABEL_33;
    }
    goto LABEL_571;
  }
  if (CFEqual(cf1, CFSTR("IsEligibleForNowPlayingAppConsideration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isEligibleForNowPlayingAppConsideration");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsExpanseCallSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isSharePlayCallSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsExpanseMediaSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isSharePlayMediaSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsFigInstantiatedAudioSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isFigInstantiatedAudioSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsInterrupted")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v41 = objc_msgSend(a1, "interruptingSession");
    v11 = (__CFString **)MEMORY[0x1E0C9AE50];
    v12 = (__CFString **)MEMORY[0x1E0C9AE40];
    v13 = v41 == 0;
    goto LABEL_12;
  }
  if (CFEqual(cf1, CFSTR("IsLongFormAudio")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isLongFormAudio");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsPlaying")))
  {
    if (a1)
    {
      ClientPID = objc_msgSend(a1, "isPlaying");
      goto LABEL_83;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("IsRecording")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isRecording");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsRecordingMuted")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isRecordingMuted");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsSharedAVAudioSessionInstance")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isSharedAVAudioSessionInstance");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsSharePlayCapableCallSession")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isSharePlayCapableCallSession");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsUsingBuiltInMicForRecording")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isUsingBuiltInMicForRecording");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsUsingCamera")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "isUsingCamera");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("IsUsingChatMode")))
  {
    if (a1)
    {
      objc_msgSend(a1, "audioMode");
      IsAirPlayVideoActive = CMSMUtility_IsChatMode();
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("MutesAudioBasedOnRingerSwitchState")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "mutesAudioBasedOnRingerSwitchState");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("NeedsAudioBudget")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "needsAudioBudget");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("NowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "nowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("NowPlayingAppWasStoppedOnMostRecentActivation")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "nowPlayingAppWasStoppedOnMostRecentActivation");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PIDToInheritApplicationStateFrom")))
  {
    if (!a1)
      return FigSignalErrorAt();
    if (!objc_msgSend(a1, "pidToInheritAppStateFrom"))
    {
      SInt32 = 0;
      goto LABEL_8;
    }
    objc_msgSend(a1, "pidToInheritAppStateFrom");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("PreferredAudioHardwareFormat")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "preferredHardwareFormat");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("PreferredAudioHardwareIOBufferFrameDuration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredIOBufferDuration");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("PreferredAudioHardwareIOBufferFrames")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredIOBufferFrames");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("PreferredAudioHardwareSampleRate")))
    goto LABEL_292;
  if (CFEqual(cf1, CFSTR("PrefersBeingInterruptedByNextActiveRecordingClient")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersBeingInterruptedByNextActiveRecordingClient");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersConcurrentAirPlayAudio")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersConcurrentAirPlayAudio");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersEchoCancelledInput")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v18 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v19 = objc_msgSend(a1, "prefersEchoCancelledInput");
    goto LABEL_61;
  }
  if (CFEqual(cf1, CFSTR("PreferredDecoupledInputOutput")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "preferredDecoupledInputOutput");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PreferredInputSampleRate")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredInputSampleRate");
LABEL_294:
    SInt32 = (NSArray *)FigCFNumberCreateFloat64();
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("PreferredMinimumMicrophoneIndicatorLightOnTime")))
  {
    if (!a1)
      return FigSignalErrorAt();
    SInt32 = (NSArray *)objc_msgSend(a1, "preferredMinimumMicrophoneIndicatorLightOnTime");
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("PreferredNumberOfInputChannels")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredNumberOfInputChannels");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("PreferredNumberOfOutputChannels")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredNumberOfOutputChannels");
    goto LABEL_51;
  }
  if (CFEqual(cf1, CFSTR("PreferredOutputSampleRate")))
  {
LABEL_292:
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredOutputSampleRate");
    goto LABEL_294;
  }
  if (CFEqual(cf1, CFSTR("PreferredRouteControlFeatures")))
  {
    if (!a1)
      return FigSignalErrorAt();
    SInt32 = (NSArray *)objc_msgSend(a1, "preferredRouteControlFeatures");
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("PreferredPersistentRoute")))
  {
    if (!a1)
      return FigSignalErrorAt();
    SInt32 = (NSArray *)objc_msgSend(a1, "preferredPersistentRoute");
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("PreferredStereoInputOrientation")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "preferredStereoInputOrientation");
    goto LABEL_98;
  }
  if (CFEqual(cf1, CFSTR("PrefersBluetoothAccessoryMuting")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersBluetoothAccessoryMuting");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersInterruptionOnRouteDisconnect")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersNoDucking")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersNoDucking");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersNoInterruptionsByMixableSessions")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersNoInterruptionsByMixableSessions");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersNoInterruptionsByRingtonesAndAlerts")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersNoInterruptionsByRingtonesAndAlerts");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersNoInterruptionsDuringRemoteDeviceControl")))
  {
    if (!a1 || !MX_FeatureFlags_IsOnenessEnabled())
      return FigSignalErrorAt();
    v18 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v19 = objc_msgSend(a1, "prefersNoInterruptionsDuringRemoteDeviceControl");
LABEL_61:
    v20 = v19;
    v21 = v18;
    goto LABEL_62;
  }
  if (CFEqual(cf1, CFSTR("PrefersNoInterruptionWhenSecureMicrophoneIsEngaged"))
    || CFEqual(cf1, CFSTR("PrefersToNotBeInterruptedWhenSecureMicIsEngaged")))
  {
    if (a1)
    {
      IsAirPlayVideoActive = CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1);
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("PrefersSpeechDetectEnabled")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersSpeechDetectEnabled");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersSuppressingRecordingState")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersSuppressingRecordingState");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersToPlayDuringWombat")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersToPlayDuringWombat");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("PrefersToVibeWhenVibrationsAreDisabled")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "prefersToVibeWhenVibrationsAreDisabled");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("ProcessAssertionAuditTokens")))
  {
    if (!a1 || (objc_msgSend(a1, "hasEntitlementToSupportProcessAssertionAuditTokens") & 1) == 0)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "parentProcessAuditTokens");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("RemoteDeviceID")))
    return 0;
  if (CFEqual(cf1, CFSTR("ReporterIDs")))
  {
    if (!a1)
      return FigSignalErrorAt();
    CMSUtility_CreateReporterIDIfNeeded(a1);
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "reporterIDs");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("RouteSharingPolicy")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "routeSharingPolicy");
    goto LABEL_98;
  }
  if (CFEqual(cf1, CFSTR("RoutingContextUUID")))
  {
    if (!a1)
      return FigSignalErrorAt();
    VoicePromptStyle = (__CFString *)objc_msgSend(a1, "routingContextUUID");
    goto LABEL_40;
  }
  if (CFEqual(cf1, CFSTR("SomeMXSessionIsPlaying")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "someMXSessionIsPlaying");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("SomeOtherClientIsPlaying")))
  {
    if (a1)
    {
      IsAirPlayVideoActive = CMSUtility_SomeOtherClientIsPlaying(a1);
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("SomeOtherNonAmbientAudioCategoryClientIsPlaying")))
  {
    if (a1)
    {
      IsPlaying = CMSUtility_SomeOtherPrimaryAudioCategoryClientIsPlaying(a1);
      if (dword_1EE2B3F38)
      {
        v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v11 = (__CFString **)MEMORY[0x1E0C9AE50];
      v12 = (__CFString **)MEMORY[0x1E0C9AE40];
      v13 = IsPlaying == 0;
      goto LABEL_12;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("StopsWhenDeviceLocks")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "stopsWhenDeviceLocks");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("SystemHasAudioInputDevice")))
  {
    IsAirPlayVideoActive = vaemSystemHasAudioInputDevice();
    goto LABEL_11;
  }
  if (CFEqual(cf1, CFSTR("SystemHasAudioInputDeviceExcludingBluetooth")))
  {
    IsAirPlayVideoActive = vaemSystemHasAudioInputDeviceExcludingBluetooth();
    goto LABEL_11;
  }
  if (CFEqual(cf1, CFSTR("UnduckFadeDuration")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "unduckFadeDuration");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("UnduckToLevelScalar")))
  {
    if (!a1)
      return FigSignalErrorAt();
    objc_msgSend(a1, "unduckToLevelScalar");
    goto LABEL_139;
  }
  if (CFEqual(cf1, CFSTR("UserMuted")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "userMuted");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("VibrationData")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "vibrationData");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("VPBlockConfiguration")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)objc_msgSend(a1, "vpBlockConfiguration");
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("WantsToPauseSpokenAudio")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "wantsToPauseSpokenAudio");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("WantsVolumeChangesWhenPaused")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "wantsVolumeChangesWhenPaused");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("WantsVolumeChangesWhenPausedOrInactive")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v16 = objc_msgSend(a1, "wantsVolumeChangesWhenPausedOrInactive");
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("AC3IsSupported")))
  {
    if (!a1)
      return FigSignalErrorAt();
    if (!vaemIsAC3EncodingSupported())
    {
      IsAirPlayVideoActive = vaemGetAC3IsSupported();
      goto LABEL_11;
    }
    goto LABEL_571;
  }
  if (CFEqual(cf1, CFSTR("ActiveAudioRoute")) || CFEqual(cf1, CFSTR("CurrentlyActiveRoute")))
  {
    v44 = CFEqual(cf1, CFSTR("CurrentlyActiveRoute"));
    if (!a1 || v44 || (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
    {
      cmsmUpdateCurrentActiveRoutesInfo();
      SInt32 = (NSArray *)CMSMUtility_GetCurrentRouteTypeAtIndex(0);
      if (!SInt32)
        goto LABEL_8;
      goto LABEL_7;
    }
    SInt32 = (NSArray *)cmsCopyOverrideRoute(a1);
    if (SInt32)
      goto LABEL_8;
    if (objc_msgSend(a1, "audioCategory"))
      v45 = (NSDictionary *)objc_msgSend(a1, "audioCategory");
    else
      v45 = (NSDictionary *)CFSTR("Audio/Video");
    if (objc_msgSend(a1, "audioMode"))
      v46 = (const __CFString *)objc_msgSend(a1, "audioMode");
    else
      v46 = CFSTR("Default");
    if (objc_msgSend(a1, "activationContext"))
      v50 = (const void *)objc_msgSend(a1, "activationContext");
    else
      v50 = 0;
    CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(v45, (uint64_t)v46, v50, 0, a4, 0, 0);
    return 0;
  }
  if (CFEqual(cf1, CFSTR("ApplicationState")))
  {
    if (!a1)
      return FigSignalErrorAt();
    ClientPID = CMSUtility_GetApplicationStateForSession(a1);
    goto LABEL_83;
  }
  if (CFEqual(cf1, CFSTR("AudioClockDevice")))
  {
    if (!a1)
      return FigSignalErrorAt();
    MEMORY[0x1940352BC](gCMSM);
    v47 = qword_1EE2B3BE0;
    v48 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
    v49 = *(void (**)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                          + 40);
    if (v49)
      v49(v47, CFSTR("VAEM_AudioClockDevice"), *MEMORY[0x1E0C9AE00], v48, 0, a4);
    goto LABEL_676;
  }
  if (CFEqual(cf1, CFSTR("AudioQueueOptions")))
  {
    if (a1)
    {
      SInt32 = (NSArray *)CMSMUtility_CreateAudioQueueOptionsDictionary(a1);
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("AvailableOutputStreamFormats")))
  {
    if (a1)
    {
      valuePtr[0] = 0;
      v164 = 0;
      CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
      v9 = vaemVADCopyAvailableStreamFormatsForVADID(CurrentOutputVADID, 1, valuePtr, &v164);
      v52 = 0;
      if (!(_DWORD)v9)
        v52 = MXCFDataCreate((UInt8 *)valuePtr[0], 56 * v164);
      *a4 = v52;
      if (valuePtr[0])
        free((void *)valuePtr[0]);
      return v9;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("AvailableRouteControlFeatures")))
  {
    if (a1)
    {
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
      {
        if (objc_msgSend(a1, "willRouteToOnDemandVADOnActivation"))
        {
          if (objc_msgSend(a1, "prefersEchoCancelledInput"))
            IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
          else
            IsCategoryInputOnly = 0;
          v57 = 1;
        }
        else
        {
          IsCategoryInputOnly = 0;
          v57 = 0;
        }
        if (dword_1EE2B3F38)
        {
          v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        IsCategoryInputOnly = 0;
        v57 = 0;
      }
      v61 = objc_alloc(MEMORY[0x1E0C99E08]);
      v62 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v57);
      SInt32 = (NSArray *)objc_msgSend(v61, "initWithObjectsAndKeys:", v62, CFSTR("RouteControlFeatures"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsCategoryInputOnly), CFSTR("EchoCancelledInput"), 0);
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("CurrentAudioHardwareFormat")))
  {
    if (a1)
    {
      valuePtr[0] = 0;
      v54 = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
      v55 = CMSUtility_GetCurrentOutputVADID(a1);
      vaemCopyDeviceFormat(v55, v54, valuePtr);
      v9 = v56;
      *a4 = valuePtr[0];
      return v9;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("CurrentAudioHardwareInputNumberChannels")))
  {
    if (a1)
    {
      v59 = CMSUtility_GetCurrentInputVADID(a1);
      NumberOfChannelsForVADIDAndScope = vaemGetNumberOfChannelsForVADIDAndScope(v59, 1);
      SInt32 = (NSArray *)MXCFNumberCreateFromSInt32(NumberOfChannelsForVADIDAndScope);
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("CurrentAudioHardwareOutputNumberChannels")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v63 = CMSUtility_GetCurrentOutputVADID(a1);
    v64 = vaemGetNumberOfChannelsForVADIDAndScope(v63, 0);
LABEL_550:
    SInt32 = (NSArray *)MXCFNumberCreateFromSInt64(v64);
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("CurrentInputDeviceBufferSize")))
  {
    if (!a1)
      return FigSignalErrorAt();
    MEMORY[0x1940352BC](gCMSM);
    v65 = CMSUtility_GetCurrentInputVADID(a1);
    v66 = 1768845428;
    goto LABEL_470;
  }
  if (CFEqual(cf1, CFSTR("CurrentInputLatency")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v67 = qword_1EE2B3BE0;
    v68 = CMSUtility_GetCurrentInputVADID(a1);
    v69 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                             + 40);
    if (v69)
    {
      v70 = CFSTR("VAEM_CurrentInputLatency");
      return v69(v67, v70, *MEMORY[0x1E0C9AE00], v68, 0, a4);
    }
    return 4294954514;
  }
  if (CFEqual(cf1, CFSTR("CurrentOutputDeviceBufferSize")))
  {
    if (!a1)
      return FigSignalErrorAt();
    MEMORY[0x1940352BC](gCMSM);
    v65 = CMSUtility_GetCurrentOutputVADID(a1);
    v66 = 1869968496;
LABEL_470:
    DeviceBufferNumPCMFrames = vaemGetDeviceBufferNumPCMFrames(v65, v66);
    *a4 = MXCFNumberCreateFromSInt64(DeviceBufferNumPCMFrames);
LABEL_629:
    v73 = gCMSM;
    goto LABEL_755;
  }
  if (CFEqual(cf1, CFSTR("CurrentOutputLatency")))
  {
    if (!a1)
      return FigSignalErrorAt();
    v67 = qword_1EE2B3BE0;
    v68 = CMSUtility_GetCurrentOutputVADID(a1);
    v69 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                             + 40);
    if (v69)
    {
      v70 = CFSTR("VAEM_CurrentOutputLatency");
      return v69(v67, v70, *MEMORY[0x1E0C9AE00], v68, 0, a4);
    }
    return 4294954514;
  }
  if (CFEqual(cf1, CFSTR("CurrentStereoInputOrientation")))
  {
    if (!a1)
      return FigSignalErrorAt();
    MEMORY[0x1940352BC](gCMSM);
    StereoInputOrientation = vaemGetStereoInputOrientation();
    *a4 = MXCFNumberCreateFromSInt32(StereoInputOrientation);
    v73 = gCMSM;
LABEL_755:
    MEMORY[0x1940352C8](v73);
    return 0;
  }
  if (CFEqual(cf1, CFSTR("DefaultCalibratedOutputVolume")))
  {
    if (a1)
    {
      v74 = objc_alloc(MEMORY[0x1E0CB37E8]);
      LODWORD(v75) = 1118231593;
      v76 = objc_msgSend(v74, "initWithFloat:", v75);
      if (dword_1EE2B3F38)
      {
        v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v9 = 0;
      *a4 = v76;
      return v9;
    }
    return FigSignalErrorAt();
  }
  if (!CFEqual(cf1, CFSTR("DisallowAudioFormatChanges")))
  {
    if (CFEqual(cf1, CFSTR("HasEchoCancelledInput")))
    {
      if (!a1)
        return FigSignalErrorAt();
      if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(a1, "isActive"))
      {
        if (objc_msgSend(a1, "isRoutedToOnDemandVAD"))
          IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)objc_msgSend(a1, "audioCategory"));
        else
          IsRecordingCategory = 0;
        if (dword_1EE2B3F38)
        {
          v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        IsRecordingCategory = 0;
      }
      v21 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v20 = IsRecordingCategory;
LABEL_62:
      SInt32 = (NSArray *)objc_msgSend(v21, "initWithBool:", v20, v159, v160);
      goto LABEL_8;
    }
    if (CFEqual(cf1, CFSTR("HostApplicationDisplayID")))
    {
      if (a1 && objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
      {
        SInt32 = (NSArray *)MX_RunningBoardServices_CopyHostDisplayIDForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
        if (SInt32)
          goto LABEL_8;
        SInt32 = (NSArray *)objc_msgSend(a1, "displayID");
        if (!SInt32)
          goto LABEL_8;
        goto LABEL_7;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(cf1, CFSTR("InputSource")))
    {
      v78 = qword_1EE2B3BE0;
      v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
      v80 = CFSTR("VAEM_CurrentInputDataSource");
      return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
    }
    if (CFEqual(cf1, CFSTR("InputSources")))
    {
      v78 = qword_1EE2B3BE0;
      v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
      v80 = CFSTR("VAEM_InputDataSources");
      return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
    }
    if (CFEqual(cf1, CFSTR("InputGainAvailable")))
    {
      v78 = qword_1EE2B3BE0;
      v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
      v80 = CFSTR("VAEM_CurrentRouteHasInputGainControl");
      return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
    }
    if (CFEqual(cf1, CFSTR("InputGainScalar")))
    {
      v78 = qword_1EE2B3BE0;
      v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
      v80 = CFSTR("VAEM_DeviceInputGainScalar");
      return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
    }
    if (CFEqual(cf1, CFSTR("IsInputOutputDecoupled")))
    {
      if (!a1)
        return FigSignalErrorAt();
      v83 = CMSUtility_GetCurrentOutputVADID(a1);
      v84 = CMSUtility_GetCurrentInputVADID(a1);
      v11 = (__CFString **)MEMORY[0x1E0C9AE50];
      v12 = (__CFString **)MEMORY[0x1E0C9AE40];
      v13 = v83 == v84;
      goto LABEL_12;
    }
    if (CFEqual(cf1, CFSTR("IsLongFormVideo")))
    {
      if (a1)
      {
        IsAirPlayVideoActive = CMSUtility_IsLongFormVideoSession(a1);
        goto LABEL_11;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(cf1, CFSTR("IsNowPlayingEligible")))
    {
      if (a1)
      {
        IsAirPlayVideoActive = CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1);
        goto LABEL_11;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(cf1, CFSTR("IsVolumeButtonClient")))
    {
      if (a1)
      {
        VolumeButtonClient = CMSessionMgrFindVolumeButtonClient(3u);
        v11 = (__CFString **)MEMORY[0x1E0C9AE50];
        if (VolumeButtonClient != a1)
          v11 = (__CFString **)MEMORY[0x1E0C9AE40];
        goto LABEL_14;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(cf1, CFSTR("MATAtmosIsAvailable")))
    {
      FigEndpointManagerCopyProperty(qword_1EE2B3BE0, 0x1E30ABFA8, *MEMORY[0x1E0C9AE00], (uint64_t)a4);
      return 0;
    }
    if (CFEqual(cf1, CFSTR("MATAtmosIsEnabled")))
    {
      if (!a1)
        return FigSignalErrorAt();
      IsMATAtmosEnabled = vaemIsMATAtmosEnabled();
LABEL_585:
      v95 = (NSArray **)MEMORY[0x1E0C9AE40];
      if (IsMATAtmosEnabled)
        v95 = (NSArray **)MEMORY[0x1E0C9AE50];
      SInt32 = *v95;
LABEL_7:
      SInt32 = (NSArray *)CFRetain(SInt32);
LABEL_8:
      v9 = 0;
      *a4 = SInt32;
      return v9;
    }
    if (CFEqual(cf1, CFSTR("MaximumNumberOfInputChannels")))
    {
      if (!a1)
        return FigSignalErrorAt();
      LODWORD(valuePtr[0]) = objc_msgSend(a1, "audioSessionID");
      v87 = qword_1EE2B3BE0;
      v88 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t, CFTypeRef *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 32);
      if (!v88)
        return 4294954514;
      v89 = *MEMORY[0x1E0C9AE00];
      v90 = v87;
      v91 = 1;
      return v88(v90, CFSTR("VAEM_MaximumNumberOfChannels"), v89, v91, valuePtr, a4);
    }
    if (CFEqual(cf1, CFSTR("MaximumNumberOfOutputChannels")))
    {
      if (!a1)
        return FigSignalErrorAt();
      if (FigRoutingManagerIsNonSelfOnlyLocalAirPlayEndpointPicked(objc_msgSend(a1, "routingContextUUID"))
        && CMSMDeviceState_ItsAnAppleTV())
      {
        v64 = 2;
        goto LABEL_550;
      }
      if (vaemIsMATAtmosEnabled())
      {
        v64 = 32;
        goto LABEL_550;
      }
      if (vaemIsAC3EncodingSupported())
      {
        v64 = 6;
        goto LABEL_550;
      }
      LODWORD(valuePtr[0]) = objc_msgSend(a1, "audioSessionID");
      v92 = qword_1EE2B3BE0;
      v88 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t, CFTypeRef *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 32);
      if (!v88)
        return 4294954514;
      v89 = *MEMORY[0x1E0C9AE00];
      v90 = v92;
      v91 = 0;
      return v88(v90, CFSTR("VAEM_MaximumNumberOfChannels"), v89, v91, valuePtr, a4);
    }
    if (!CFEqual(cf1, CFSTR("NeroSuspended")))
    {
      if (CFEqual(cf1, CFSTR("OptOutOfMutePriority")))
      {
        if (a1)
        {
          IsAirPlayVideoActive = CMSUtility_GetOptOutOfMutePriority(a1);
          goto LABEL_11;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("OutputDestination")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_CurrentOutputDataDestination");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (CFEqual(cf1, CFSTR("OutputDestinations")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_OutputDataDestinations");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (CFEqual(cf1, CFSTR("OverrideRoute")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)cmsCopyOverrideRoute(a1);
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PhysicalFormatsSupported")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)vaemCopyVirtualFormatsSupported();
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PickedRouteForSession")))
      {
        if (!a1)
          return FigSignalErrorAt();
        v94 = a1;
LABEL_632:
        SInt32 = (NSArray *)cmsDeepCopyPickedRoute(v94);
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("PiPIsPossible")))
      {
        if (!a1)
          return FigSignalErrorAt();
        if (CMSMDeviceState_SupportsPiP()
          && CMSUtility_HasBackgroundEntitlement(a1)
          && CMSMUtility_IsPiPAllowedForCategory(objc_msgSend(a1, "audioCategory")))
        {
LABEL_65:
          v11 = (__CFString **)MEMORY[0x1E0C9AE50];
LABEL_14:
          VoicePromptStyle = *v11;
          *a4 = *v11;
LABEL_15:
          CFRetain(VoicePromptStyle);
          return 0;
        }
LABEL_571:
        v11 = (__CFString **)MEMORY[0x1E0C9AE40];
        goto LABEL_14;
      }
      if (CFEqual(cf1, CFSTR("PowerBudget")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)CMSUtility_CopyCPMSPowerBudgetForSession();
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PowerProfile")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)objc_msgSend(a1, "powerProfile");
          if (!SInt32)
            goto LABEL_8;
          goto LABEL_7;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PreferredInputs")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)cmsCopySubPortPreferencesAndInputOverride(a1);
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PrefersToTakeHWControlFlagsFromAnotherSession")))
      {
        if (!a1)
          return FigSignalErrorAt();
        IsMATAtmosEnabled = CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(a1);
        goto LABEL_585;
      }
      if (CFEqual(cf1, CFSTR("RouteControlFeatures")))
      {
        if (a1)
        {
          if (CMSMVAUtility_IsAdditiveRoutingEnabled())
            v96 = objc_msgSend(a1, "isRoutedToOnDemandVAD");
          else
            v96 = 0;
          v97 = objc_alloc(MEMORY[0x1E0C99D80]);
          SInt32 = (NSArray *)objc_msgSend(v97, "initWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v96), CFSTR("RouteControlFeatures"), 0, v161, v162);
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("RoutingContext")))
      {
        if (a1)
        {
          FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(objc_msgSend(a1, "routingContextUUID"), (uint64_t)a4);
          return 0;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("SelectableInputs")))
      {
        if (!a1)
          return FigSignalErrorAt();
        VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(a1, "audioCategory"));
        v99 = objc_msgSend(a1, "mode");
        v100 = (const void *)objc_msgSend(a1, "allowedPortTypes");
        v101 = VADCategoryFromFigCategoryName;
        v102 = v99;
        v103 = 1;
LABEL_603:
        SInt32 = (NSArray *)cmsmCopySelectablePortsForRouteConfiguration(v101, v102, v100, v103);
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("SelectableOutputs")))
      {
        if (!a1)
          return FigSignalErrorAt();
        v104 = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(a1, "audioCategory"));
        v105 = objc_msgSend(a1, "mode");
        v100 = (const void *)objc_msgSend(a1, "allowedPortTypes");
        v101 = v104;
        v102 = v105;
        v103 = 0;
        goto LABEL_603;
      }
      if (CFEqual(cf1, CFSTR("ShouldInputBeMuted")))
      {
        if (a1 && !MX_FeatureFlags_IsSessionBasedMutingEnabled())
        {
          if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
          {
            v107 = CMSUtility_CopyBundleID(a1);
            v108 = -[NSSet containsObject:](-[MXSessionManager mutedSessionBundleIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mutedSessionBundleIDs"), "containsObject:", v107);
            if (v108 && dword_1EE2B3F38)
            {
              v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v110 = (const void **)MEMORY[0x1E0C9AE50];
            if (!v108)
              v110 = (const void **)MEMORY[0x1E0C9AE40];
            v111 = *v110;
            *a4 = *v110;
            CFRetain(v111);

          }
          return 0;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("SpeechDetectStyle")))
      {
        if (a1)
        {
          v106 = -[MXSessionManager currentSpeechDetectStyle:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentSpeechDetectStyle:", a1);
          SInt32 = (NSArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", v106);
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("UserVolume")))
      {
        if (!a1)
          return FigSignalErrorAt();
        LODWORD(valuePtr[0]) = CMSUtility_GetUserVolume(a1);
        v25 = a3;
LABEL_796:
        v26 = kCFNumberFloat32Type;
        goto LABEL_85;
      }
      if (CFEqual(cf1, CFSTR("WantsToBeVolumeButtonClient")))
      {
        if (a1)
        {
          IsAirPlayVideoActive = CMSUtility_GetWantsToBeVolumeButtonClient(a1);
          goto LABEL_11;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("PickableRoutes")))
      {
        MEMORY[0x1940352BC](gCMSM);
        v112 = CMSUtility_CopyPickableRoutesForSession(0);
        *a4 = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v112, 0);
        if (v112)
          CFRelease(v112);
        goto LABEL_629;
      }
      if (CFEqual(cf1, CFSTR("PickedRoute")))
      {
        v94 = 0;
        goto LABEL_632;
      }
      if (CFEqual(cf1, CFSTR("CurrentInputSafetyOffset")))
      {
        if (!a1)
          return FigSignalErrorAt();
        v113 = CMSUtility_GetCurrentInputVADID(a1);
        v114 = 1;
LABEL_639:
        CurrentSafetyOffsetForScope = vaemGetCurrentSafetyOffsetForScope(v113, v114);
        SInt32 = (NSArray *)MXCFNumberCreateFromFloat32(CurrentSafetyOffsetForScope);
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("CurrentOutputSafetyOffset")))
      {
        if (!a1)
          return FigSignalErrorAt();
        v113 = CMSUtility_GetCurrentOutputVADID(a1);
        v114 = 0;
        goto LABEL_639;
      }
      if (CFEqual(cf1, CFSTR("DisplayIDsOfActiveSessions")))
      {
        if (a1)
        {
          SInt32 = (NSArray *)CMSMUtility_CopyDisplayIDsOfActiveSessions();
          goto LABEL_8;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(cf1, CFSTR("CurrentlyActiveCategory")))
      {
        SInt32 = (NSArray *)CMSMUtility_CopyCurrentlyActiveCategory();
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("CurrentlyActiveMode")))
      {
        SInt32 = (NSArray *)CMSMUtility_CopyCurrentlyActiveMode();
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("ActiveInputRouteForPlayAndRecordNoBluetooth")))
      {
        valuePtr[0] = 0;
        MEMORY[0x1940352BC](gCMSM);
        v116 = qword_1EE2B3BE0;
        v117 = *(void (**)(uint64_t, __CFString *, _QWORD, const __CFString *, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
        if (v117)
          v117(v116, CFSTR("VAEM_ActiveInputRouteNamesForRouteConfiguration"), *MEMORY[0x1E0C9AE00], CFSTR("PlayAndRecord"), CFSTR("Default"), 0, valuePtr);
        MEMORY[0x1940352C8](gCMSM);
        if (!valuePtr[0])
        {
          *a4 = 0;
          return 0;
        }
        if (CFArrayGetCount((CFArrayRef)valuePtr[0]) < 1)
        {
          ValueAtIndex = 0;
        }
        else
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)valuePtr[0], 0);
          if (ValueAtIndex)
            ValueAtIndex = CFRetain(ValueAtIndex);
        }
        v119 = valuePtr[0];
        *a4 = ValueAtIndex;
        if (!v119)
          return 0;
        v120 = v119;
        goto LABEL_736;
      }
      if (CFEqual(cf1, CFSTR("VoicePromptStyle")))
      {
        VoicePromptStyle = CMSMUtility_GetVoicePromptStyle();
        goto LABEL_40;
      }
      if (CFEqual(cf1, CFSTR("CurrentRouteHasVolumeControl")))
      {
        v9 = (uint64_t)CMSMUtility_CopyCurrentlyActiveCategory();
        MEMORY[0x1940352BC](gCMSM);
        if (!v9 && dword_1EE2B3BEC != 1668505974)
        {
          if (dword_1EE2B3C78)
          {
            v121 = (const void *)*MEMORY[0x1E0C9AE40];
            *a4 = *MEMORY[0x1E0C9AE40];
            CFRetain(v121);
          }
          else
          {
            if (!CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive())
              vaemResetVADCategoryToStandardAVAndDefaultMode();
            FigEndpointManagerCopyProperty(qword_1EE2B3BE0, 0x1E30ABD68, *MEMORY[0x1E0C9AE00], (uint64_t)a4);
          }
LABEL_676:
          v73 = gCMSM;
          goto LABEL_755;
        }
        if (byte_1EE2B3BE8)
          v122 = (const void **)MEMORY[0x1E0C9AE50];
        else
          v122 = (const void **)MEMORY[0x1E0C9AE40];
        v123 = *v122;
        *a4 = *v122;
        CFRetain(v123);
        MEMORY[0x1940352C8](gCMSM);
        if (!v9)
          return v9;
        v120 = (const void *)v9;
LABEL_736:
        CFRelease(v120);
        return 0;
      }
      if (CFEqual(cf1, CFSTR("ShouldIgnorePlayCommandsFromAccessory")))
      {
        IsAirPlayVideoActive = CMSMUtility_ShouldIgnorePlayCommandsFromAccessory();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("PhoneCallExists")))
      {
        IsAirPlayVideoActive = CMSMUtility_IsPhoneCallActive();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("CurrentPhoneCallIsRoutedViaCarBT")))
      {
        v124 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1EE2B3CF0);
        cf = CMSMUtility_CopyCurrentRouteTypes();
        if (CMSMUtility_PhoneCallOrRingtoneExists())
        {
          if (FigCFArrayContainsValue())
          {
            CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
            if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v124))
            {
              v126 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_690:
              v129 = *v126;
LABEL_718:
              *a4 = v129;
              CFRetain(v129);
              v149 = CMSMUtility_CopyCurrentRouteIdentifiers();
              if (dword_1EE2B3F38)
              {
                v150 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (v124)
                CFRelease(v124);
              if (v149)
                CFRelease(v149);
              if (!cf)
                return 0;
              v120 = cf;
              goto LABEL_736;
            }
          }
          if (FigCFArrayContainsValue() || !CMSMUtility_GetNumberOfCurrentOutputPorts())
          {
            v136 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1E30A4C28);
            v137 = (const void **)MEMORY[0x1E0C9AE40];
            if (v136)
            {
              v138 = v136;
              Count = CFArrayGetCount(v136);
              if (Count < 1)
              {
                CFRelease(v138);
              }
              else
              {
                v140 = Count;
                v141 = 0;
                v142 = 1;
                do
                {
                  LODWORD(valuePtr[0]) = 0;
                  v143 = (const __CFNumber *)CFArrayGetValueAtIndex(v138, v141);
                  CFNumberGetValue(v143, kCFNumberSInt32Type, valuePtr);
                  if (vaeGetPortTypeFromPortID(LODWORD(valuePtr[0])) == 1885892706)
                  {
                    v144 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort((AudioObjectID)valuePtr[0]);
                    IsDeviceIDIncludedInCarBluetoothIDs = cmsmIsDeviceIDIncludedInCarBluetoothIDs(v144, (uint64_t)v124);
                    if (v144)
                      CFRelease(v144);
                    if (IsDeviceIDIncludedInCarBluetoothIDs)
                      break;
                  }
                  v142 = ++v141 < v140;
                }
                while (v140 != v141);
                CFRelease(v138);
                if (v142)
                  v137 = (const void **)MEMORY[0x1E0C9AE50];
              }
            }
            v129 = *v137;
            goto LABEL_718;
          }
        }
        v126 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_690;
      }
      if (CFEqual(cf1, CFSTR("CurrentPlayingSessionIsRoutedViaCarBT")))
      {
        v127 = CMSMUtility_CopyCurrentRouteTypes();
        if (FigCFArrayContainsValue())
          v128 = 1;
        else
          v128 = FigCFArrayContainsValue() != 0;
        v132 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1EE2B3CF0);
        v133 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
        if (v133
          && v128
          && (v134 = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0),
              cmsmIsDeviceIDIncludedInCarBluetoothIDs(v134, (uint64_t)v132)))
        {
          v135 = (const void **)MEMORY[0x1E0C9AE50];
        }
        else
        {
          v135 = (const void **)MEMORY[0x1E0C9AE40];
        }
        v146 = *v135;
        *a4 = *v135;
        CFRetain(v146);
        v147 = CMSMUtility_CopyCurrentRouteIdentifiers();
        if (dword_1EE2B3F38)
        {
          v148 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v127)
          CFRelease(v127);
        if (v147)
          CFRelease(v147);
        if (v132)
          CFRelease(v132);
        if (!v133)
          return 0;
        v120 = v133;
        goto LABEL_736;
      }
      if (CFEqual(cf1, CFSTR("NowPlayingAppShouldResumeForCarPlay")))
      {
        ShouldResumeForCarPlay = CMSMNP_GetNowPlayingAppShouldResumeForCarPlay();
        if (dword_1EE2B3F38)
        {
          v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11 = (__CFString **)MEMORY[0x1E0C9AE50];
        v12 = (__CFString **)MEMORY[0x1E0C9AE40];
        v13 = ShouldResumeForCarPlay == 0;
        goto LABEL_12;
      }
      if (CFEqual(cf1, CFSTR("CarPlayIsConnected")))
      {
        v16 = -[MXSessionManager carPlayIsConnected](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "carPlayIsConnected");
        goto LABEL_33;
      }
      if (CFEqual(cf1, CFSTR("CarPlayAuxStreamSupport")))
      {
        IsAirPlayVideoActive = FigRoutingManager_iOSIsCarPlayAuxStreamSupported();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("CarPlaySupportsMixableSiri")))
      {
        IsAirPlayVideoActive = CMSMUtility_DoesCarPlaySupportMixableSiri();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("SomeClientIsPlaying")))
      {
        v151 = byte_1EE2B3C98;
        goto LABEL_823;
      }
      if (CFEqual(cf1, CFSTR("SomeClientIsPlayingLongFormAudio")))
      {
        IsAirPlayVideoActive = CMSMUtility_SomeClientIsPlayingLongFormAudio();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("ActiveClientPIDsThatHideTheSpeechDetectionDevice")))
      {
        SInt32 = (NSArray *)CMSMUtility_CopyActiveClientPIDsThatHideTheSpeechDetectionDevice();
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("SomeLongFormVideoClientIsActiveOverAirPlayVideo")))
      {
        MEMORY[0x1940352BC](gCMSM);
        v152 = byte_1EE2B3C04;
LABEL_751:
        if (v152)
          v153 = (const void **)MEMORY[0x1E0C9AE50];
        else
          v153 = (const void **)MEMORY[0x1E0C9AE40];
        v154 = *v153;
        *a4 = *v153;
        CFRetain(v154);
        v73 = gCMSM;
        goto LABEL_755;
      }
      if (CFEqual(cf1, CFSTR("SomeLongFormVideoClientIsPlayingOverAirPlayVideo")))
      {
        MEMORY[0x1940352BC](gCMSM);
        v152 = byte_1EE2B3C05;
        goto LABEL_751;
      }
      if (CFEqual(cf1, CFSTR("SomeLongFormVideoClientIsPlaying")))
      {
        MEMORY[0x1940352BC](gCMSM);
        v152 = byte_1EE2B3C06;
        goto LABEL_751;
      }
      if (CFEqual(cf1, CFSTR("IsSomeoneRecording")))
      {
        LODWORD(valuePtr[0]) = 0;
        MEMORY[0x1940352BC](gCMSM);
        if (CMSMUtility_IsSomeClientRecording())
          LODWORD(valuePtr[0]) = dword_1EE2B3C00;
        MEMORY[0x1940352C8](gCMSM);
        v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_84;
      }
      if (CFEqual(cf1, CFSTR("RecordingClientPIDs")))
      {
        SInt32 = -[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs");
        if (!SInt32)
          goto LABEL_8;
        goto LABEL_47;
      }
      if (CFEqual(cf1, CFSTR("DeviceSupportsPiP")))
      {
        IsAirPlayVideoActive = CMSMDeviceState_SupportsPiP();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("CurrentPrimaryAppDisplayID")))
      {
        SInt32 = (NSArray *)MX_FrontBoardServcies_CopyPrimaryAppDisplayID();
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("UplinkMute")))
      {
        v16 = -[MXSessionManager uplinkMute](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "uplinkMute");
        goto LABEL_33;
      }
      if (CFEqual(cf1, CFSTR("DownlinkMute")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_DownlinkMute");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (CFEqual(cf1, CFSTR("iOSWillRequestToBorrowStarkMainAudio")))
      {
        v155 = 1;
LABEL_775:
        IsAirPlayVideoActive = CMSMUtility_iOSWillRequestCarMainAudio(v155);
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("iOSWillRequestToTakeStarkMainAudio")))
      {
        v155 = 0;
        goto LABEL_775;
      }
      if (CFEqual(cf1, CFSTR("StarkMainAudioIsOwnedByiOSButBorrowedByCar")))
      {
        v16 = -[MXSessionManager starkMainAudioIsOwnedByiOSButBorrowedByCar](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "starkMainAudioIsOwnedByiOSButBorrowedByCar");
        goto LABEL_33;
      }
      if (CFEqual(cf1, CFSTR("SpeechDetectionDevicePresent")))
      {
        IsAirPlayVideoActive = vaemSpeechDetectionVADExists();
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("NowPlayingAppPID")))
      {
        SInt32 = (NSArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLong:", -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID"));
        goto LABEL_8;
      }
      if (CFEqual(cf1, CFSTR("NowPlayingAppDisplayID")))
      {
        SInt32 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
        goto LABEL_47;
      }
      if (CFEqual(cf1, CFSTR("NowPlayingAppIsPlaying")))
      {
        IsInterrupted = CMSMNP_GetNowPlayingAppIsPlaying();
LABEL_788:
        v157 = (__CFString **)MEMORY[0x1E0C9AE50];
        if (!IsInterrupted)
          v157 = (__CFString **)MEMORY[0x1E0C9AE40];
        VoicePromptStyle = *v157;
        goto LABEL_40;
      }
      if (CFEqual(cf1, CFSTR("NowPlayingAppIsInterrupted")))
      {
        IsInterrupted = CMSMNP_GetNowPlayingAppIsInterrupted();
        goto LABEL_788;
      }
      if (CFEqual(cf1, CFSTR("HeadphoneVolumeLimit")))
      {
        v158 = PVMGetVolumeLimit();
LABEL_795:
        *(float *)valuePtr = v158;
        v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_796;
      }
      if (CFEqual(cf1, CFSTR("VibeIntensity")))
      {
        v158 = PVMGetVibeIntensityPreference();
        goto LABEL_795;
      }
      if (CFEqual(cf1, CFSTR("ThermalGainAdjustment_Speaker")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_ThermalGainAdjustment_Speaker");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (CFEqual(cf1, CFSTR("ThermalGainAdjustment_Haptics")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_ThermalGainAdjustment_Haptics");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (CFEqual(cf1, CFSTR("HeadphoneJackIsConnected")))
      {
        v78 = qword_1EE2B3BE0;
        v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
        v80 = CFSTR("VAEM_HeadphoneJackIsConnected");
        return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
      }
      if (!CFEqual(cf1, CFSTR("AirPlayScreenSuspended")))
      {
        if (CFEqual(cf1, CFSTR("HeadphoneJackHasInput")))
        {
          v78 = qword_1EE2B3BE0;
          v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
          v80 = CFSTR("VAEM_HeadphoneJackHasInput");
          return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
        }
        if (CFEqual(cf1, CFSTR("SystemIsAnAppleTV")))
        {
          IsAirPlayVideoActive = CMSMDeviceState_ItsAnAppleTV();
          goto LABEL_11;
        }
        if (CFEqual(cf1, CFSTR("ActiveNeroVisualStream")))
        {
          SInt32 = (NSArray *)FigRoutingManagerCopyActiveNeroVisualStream((uint64_t)-[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID"));
          goto LABEL_8;
        }
        if (CFEqual(cf1, CFSTR("ActiveNeroVisualStreamInfo")))
        {
          SInt32 = (NSArray *)FigRoutingManagerCopyActiveNeroVisualStreamInfo((uint64_t)-[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID"));
          goto LABEL_8;
        }
        if (CFEqual(cf1, CFSTR("ExternalScreenType")))
        {
          SInt32 = (NSArray *)CMScreenGetScreenType();
          if (!SInt32)
            goto LABEL_8;
          goto LABEL_7;
        }
        if (CFEqual(cf1, CFSTR("ThermalControlInfo")))
        {
          SInt32 = (NSArray *)vaemCopyThermalControlInfo();
          goto LABEL_8;
        }
        if (CFEqual(cf1, CFSTR("LongFormVideoApps")))
        {
          SInt32 = -[MXSessionManager longFormVideoApps](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "longFormVideoApps");
          goto LABEL_47;
        }
        if (!CFEqual(cf1, CFSTR("SomeRecordingSessionPresentThatDisallowsSystemSounds")))
        {
          if (!CFEqual(cf1, CFSTR("SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts")))
            return 4294954312;
          IsAirPlayVideoActive = CMSMUtility_SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts();
          goto LABEL_11;
        }
        v151 = byte_1EE2B3D38;
LABEL_823:
        if (v151)
          v11 = (__CFString **)MEMORY[0x1E0C9AE50];
        else
          v11 = (__CFString **)MEMORY[0x1E0C9AE40];
        goto LABEL_14;
      }
    }
    IsAirPlayVideoActive = CMScreenIsSuspended();
    goto LABEL_11;
  }
  if (!a1)
    return FigSignalErrorAt();
  v78 = qword_1EE2B3BE0;
  v79 = (uint64_t *)MEMORY[0x1E0C9AE00];
  v80 = CFSTR("VAEM_DisallowAudioFormatChanges");
  return FigEndpointManagerCopyProperty(v78, (uint64_t)v80, *v79, (uint64_t)a4);
}

id cmsmCopySelectablePortsForRouteConfiguration(int a1, int a2, const void *a3, int a4)
{
  CFTypeRef v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  int PortTypeFromPortID;
  CFDictionaryRef v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  id obj;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = vaemCopyConnectedPortsListForRouteConfiguration(a1, a2, a3, a4);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  obj = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v32 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v12 = objc_msgSend(v11, "unsignedIntValue");
        v13 = (void *)vaeCopyNameForPort(v12);
        PortTypeFromPortID = vaeGetPortTypeFromPortID(v12);
        if ((objc_msgSend(v13, "isEqualToString:", 0x1E30A89E8) & 1) == 0 && PortTypeFromPortID != 1885433975)
        {
          v15 = cmsmCopyDetailedPortInfoForRouteConfiguration(objc_msgSend(v11, "unsignedIntValue"), a1, a2, a3, a4);
          objc_msgSend(obj, "addObject:", v15);

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v8);
  }

  if (a4 || !MX_FeatureFlags_IsOnenessEnabled())
    return obj;
  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v28;
    do
    {
      for (j = 0; j != v18; ++j)
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation(obj);
        v21 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * j), "mutableCopy");
        if (vaeGetPortTypeFromPortID(objc_msgSend((id)objc_msgSend(v21, "objectForKey:", CFSTR("RouteDetailedDescription_ID")), "unsignedIntValue")) == 1885565807)
        {
          objc_msgSend(v21, "setObject:forKey:", CFSTR("Speaker"), CFSTR("RouteDetailedDescription_Name"));
          objc_msgSend(v21, "setObject:forKey:", CFSTR("Speaker"), CFSTR("RouteDetailedDescription_UID"));
        }
        objc_msgSend(v16, "addObject:", v21);

      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v18);
  }

  return v16;
}

uint64_t FigRoutingManagerIsNonSelfOnlyLocalAirPlayEndpointPicked(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex v4;
  const __CFArray *v5;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v8;
  CFArrayRef theArray;
  CFTypeRef cf;

  if (FigRoutingManagerContextUtilities_GetContextType(a1) != 3)
    return 0;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    theArray = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
    v4 = 0;
    while (1)
    {
      v5 = theArray;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        v5 = theArray;
      }
      else
      {
        Count = 0;
      }
      if (v4 >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v4++);
      if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
      {
        v8 = 1;
        v5 = theArray;
        if (!theArray)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    v8 = 0;
    if (!v5)
      goto LABEL_17;
LABEL_16:
    CFRelease(v5);
  }
  else
  {
    v8 = 0;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t vaemGetDeviceBufferNumPCMFrames(AudioObjectID a1, AudioObjectPropertyScope a2)
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;

  outData = 0;
  inAddress.mSelector = 1718839674;
  inAddress.mScope = a2;
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    return 0;
  else
    return outData;
}

uint64_t CMSUtility_GetApplicationStateForSession(void *a1)
{
  uint64_t v2;

  if (a1)
  {
    if (objc_msgSend(a1, "pidToInheritAppStateFrom"))
    {
      v2 = objc_msgSend(a1, "pidToInheritAppStateFrom");
      return MX_RunningBoardServices_GetApplicationStateForPID(v2, 1);
    }
    objc_msgSend(a1, "audioCategory");
    if (!FigCFEqual())
    {
      v2 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      return MX_RunningBoardServices_GetApplicationStateForPID(v2, 1);
    }
  }
  return 0;
}

uint64_t CMSUtility_SomeOtherPrimaryAudioCategoryClientIsPlaying(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v7, "isPlaying"))
        {
          v8 = objc_msgSend(v7, "doesntActuallyPlayAudio");
          if (v7 != a1 && (v8 & 1) == 0 && CMSUtility_IsAudioCategoryPrimary(v7))
          {
            v9 = 1;
            goto LABEL_14;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_14:

  return v9;
}

uint64_t vaemSystemHasAudioInputDevice()
{
  return byte_1EE2B2BF9;
}

uint64_t vaemGetNumberOfChannelsForVADIDAndScope(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v5;
  id v6;
  __CFString **v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t i;
  void *v15;
  int Stream0;
  uint64_t result;
  void *v18;
  NSObject *v19;
  AudioObjectID v20;
  unsigned int v21;
  void *v22;
  int v23;
  os_log_type_t type[4];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  AudioObjectID inObjectID;
  AudioObjectPropertyAddress inAddress;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  __int128 outData;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3BEC == 1668117868)
  {
    if (dword_1EE2B3F38)
    {
      inObjectID = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return vaemGetMaximumNumberOfChannels(a2);
  }
  else
  {
    if (CMSMDeviceState_ItsAniPad())
    {
      v5 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", a1);
      v6 = objc_alloc(MEMORY[0x1E0CB3940]);
      v7 = kMXSession_RouteDetailedDescriptionKey_Inputs;
      if (a2 != 1)
        v7 = kMXSession_RouteDetailedDescriptionKey_Outputs;
      v8 = (void *)objc_msgSend(v6, "initWithString:", *v7);
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v9 = (void *)objc_msgSend((id)objc_msgSend(v5, "objectForKey:", v8), "allObjects");
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v26;
        v23 = a2;
        v22 = v8;
        while (2)
        {
          v13 = v5;
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v26 != v12)
              objc_enumerationMutation(v9);
            v15 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "objectForKey:", CFSTR("RouteDetailedDescription_PortType"));
            if ((objc_msgSend(v15, "isEqualToString:", CFSTR("USB")) & 1) != 0
              || objc_msgSend(v15, "isEqualToString:", CFSTR("Thunderbolt")))
            {
              v18 = v13;
              a2 = v23;
              if (dword_1EE2B3F38)
              {
                inObjectID = 0;
                v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v20 = inObjectID;
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  v21 = v20;
                else
                  v21 = v20 & 0xFFFFFFFE;
                if (v21)
                {
                  inAddress.mSelector = 136315394;
                  *(_QWORD *)&inAddress.mScope = "vaemGetNumberOfChannelsForVADIDAndScope";
                  v31 = 2114;
                  v32 = v15;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }

              return vaemGetMaximumNumberOfChannels(a2);
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          v5 = v13;
          a2 = v23;
          v8 = v22;
          if (v11)
            continue;
          break;
        }
      }

    }
    inObjectID = 0;
    Stream0 = vaemGetStream0(a1, a2, &inObjectID);
    result = 0;
    if (!Stream0 && inObjectID)
    {
      inAddress.mElement = 0;
      *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"tmfsbolg";
      *(_DWORD *)type = 40;
      v36 = 0;
      outData = 0u;
      v35 = 0u;
      if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, (UInt32 *)type, &outData))
        return 0;
      else
        return HIDWORD(v35);
    }
  }
  return result;
}

uint64_t FigRoutingManagerCopyActiveNeroVisualStreamInfo(uint64_t a1)
{
  uint64_t result;
  const void *v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v5;

  v5 = 0;
  result = FigRoutingManagerCopyActiveNeroVisualStream(a1);
  if (result)
  {
    v2 = (const void *)result;
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA47A0], *MEMORY[0x1E0C9AE00], &v5);
    CFRelease(v2);
    return v5;
  }
  return result;
}

uint64_t FigRoutingManagerCopyActiveNeroVisualStream(uint64_t a1)
{
  CFIndex Count;
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;
  CFArrayRef theArray;
  uint64_t v7;

  theArray = 0;
  v7 = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v2 = Count;
      v3 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
          break;
        if (v2 == ++v3)
          goto LABEL_8;
      }
      FigEndpointCopyFirstStreamOfType();
    }
LABEL_8:
    if (theArray)
      CFRelease(theArray);
  }
  return v7;
}

uint64_t CMSMDeviceState_ItsAniPad()
{
  return byte_1EE2B29C3;
}

CFNumberRef MXCFNumberCreateFromSInt32(int a1)
{
  int valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

uint64_t CMSUtility_SomeOtherClientIsPlaying(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  int v8;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v7, "isPlaying")
          && objc_msgSend(v7, "isPlayingOutput")
          && (objc_msgSend(v7, "hasAudioCategory:", CFSTR("SystemSoundsAndHaptics")) & 1) == 0)
        {
          v8 = objc_msgSend(v7, "doesntActuallyPlayAudio");
          if (v7 != a1 && v8 == 0)
          {
            v10 = 1;
            goto LABEL_17;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v4)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_17:

  return v10;
}

void sub_193628FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void discoverer_logAvailableRouteDetails(int a1, int a2, CFArrayRef theArray)
{
  const __CFAllocator *v3;
  const __CFAllocator *v4;
  const __CFArray *Copy;
  __CFString *Mutable;
  CFIndex Count;
  char v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  unint64_t v11;
  const void *ValueAtIndex;
  CFTypeID v13;
  uint64_t TypeID;
  const __CFDictionary *v15;
  uint64_t CMBaseObject;
  void (*v17)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef Value;
  const __CFDictionary *v19;
  NSObject *v20;
  const __CFDictionary *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  const __CFAllocator *alloc;
  CFIndex v26;
  const void *v27;
  CFIndex v28;
  CFTypeRef cf[29];

  cf[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!theArray)
  {
    Mutable = CFStringCreateMutable(v4, 0);
    Copy = 0;
    goto LABEL_5;
  }
  Copy = CFArrayCreateCopy(v4, theArray);
  Mutable = CFStringCreateMutable(v3, 0);
  if (!Copy)
  {
LABEL_5:
    Count = 0;
    v8 = 1;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(Copy);
  v8 = 0;
LABEL_6:
  if (!Count && dword_1EE2B3DE8)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_38;
  }
  v28 = Count - 1;
  if (Count >= 1)
  {
    alloc = v3;
    v10 = 0;
    v11 = 0;
    v24 = *MEMORY[0x1E0CA4348];
    v27 = (const void *)*MEMORY[0x1E0C9AE50];
    v26 = Count;
    do
    {
      if (CFArrayGetValueAtIndex(Copy, v11))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Copy, v11);
        v13 = CFGetTypeID(ValueAtIndex);
        TypeID = FigEndpointGetTypeID();
        cf[0] = 0;
        v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
        if (v13 == TypeID)
        {
          CFArrayGetValueAtIndex(Copy, v11);
          CMBaseObject = FigEndpointGetCMBaseObject();
          v17 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v17)
            v17(CMBaseObject, v24, alloc, cf);
          Value = cf[0];
          if (!cf[0])
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      else
      {
        cf[0] = 0;
        v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
      }
      v19 = v15;
      if (CFDictionaryGetValue(v15, CFSTR("IsBTRoute")) == v27)
      {
        CFDictionaryGetValue(v19, CFSTR("RouteName"));
        CFDictionaryGetValue(v19, CFSTR("RouteUID"));
        CFDictionaryGetValue(v19, CFSTR("RouteModel"));
        CFDictionaryGetValue(v19, CFSTR("BTDetails_IsA2DPRoute"));
        CFDictionaryGetValue(v19, CFSTR("BTDetails_IsHFPRoute"));
        if (dword_1EE2B3DE8)
        {
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
      Value = CFDictionaryGetValue(v21, CFSTR("RouteName"));
      if (Value)
        Value = CFRetain(Value);
      cf[0] = Value;
      Count = v26;
      if (!Value)
        goto LABEL_25;
LABEL_24:
      CFStringAppendFormat(Mutable, 0, CFSTR("[%d].%@ "), v11, Value);
LABEL_25:
      if (v28 == v11)
      {
        if (dword_1EE2B3DE8)
        {
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else if (v11 && !(v10 + 10 * (v11 / 0xA)))
      {
        if (dword_1EE2B3DE8)
        {
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (Mutable)
          CFRelease(Mutable);
        Mutable = CFStringCreateMutable(alloc, 0);
      }
      if (cf[0])
        CFRelease(cf[0]);
      ++v11;
      --v10;
    }
    while (Count != v11);
  }
LABEL_38:
  if ((v8 & 1) == 0)
    CFRelease(Copy);
  if (Mutable)
    CFRelease(Mutable);
}

BOOL FigRouteDiscovereryManagerIsNewDiscoveryModeHigher()
{
  unsigned int DiscoveryModeAsInt;

  DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
  return DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt();
}

uint64_t FigEndpointDescriptorUtility_IsAudiomxdGuardRailsEnabled()
{
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t FigRouteDiscoveryManagerGetNotificationQueue()
{
  uint64_t v0;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = (uint64_t)&qword_1EE2B3240;
  if (!qword_1EE2B3238)
    v0 = 16;
  return *(_QWORD *)v0;
}

void sub_193629A00(void *a1, int a2)
{
  uint64_t v2;
  id v4;

  v4 = objc_begin_catch(a1);
  if (a2 == 2)
    objc_exception_throw(v4);
  HandleDispatchBlockException(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(unsigned int *)(v2 + 104), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  __break(1u);
}

void sub_193629A2C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

__CFString *CMSMUtility_CopyMappedMXSessionAudioCategory(__CFString *result)
{
  __CFString *v1;
  __CFString *v2;

  if (result)
  {
    v1 = result;
    if (CMSMUtility_CopyMappedMXSessionAudioCategory_onceToken != -1)
      dispatch_once(&CMSMUtility_CopyMappedMXSessionAudioCategory_onceToken, &__block_literal_global_52);
    v2 = (__CFString *)objc_msgSend((id)CMSMUtility_CopyMappedMXSessionAudioCategory_sAudioSessionToMXCategoryMap, "objectForKey:", v1);
    if (!v2)
    {
      if (-[__CFString hasPrefix:](v1, "hasPrefix:", CFSTR("AVAudioSessionCategory")))
        return CFSTR("MediaPlayback");
      v2 = v1;
    }
    return v2;
  }
  return result;
}

uint64_t pvmGetMappedRouteIdentifier(void *a1, void *a2)
{
  if (a1
    && ((objc_msgSend(a2, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) != 0
     || objc_msgSend(a2, "hasPrefix:", CFSTR("HeadsetBT"))))
  {
    return objc_msgSend((id)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("-")), "firstObject");
  }
  else
  {
    return (uint64_t)a1;
  }
}

__CFString *CMSMUtility_CopyMappedMXSessionAudioMode(__CFString *result)
{
  __CFString *v1;
  __CFString *v2;
  __CFString **v3;

  if (result)
  {
    v1 = result;
    if (CMSMUtility_CopyMappedMXSessionAudioMode_onceTokenTwo != -1)
      dispatch_once(&CMSMUtility_CopyMappedMXSessionAudioMode_onceTokenTwo, &__block_literal_global_104);
    v2 = (__CFString *)objc_msgSend((id)CMSMUtility_CopyMappedMXSessionAudioMode_sAudioSessionToMXModeMap, "objectForKey:", v1);
    if (v2)
      return v2;
    if (-[__CFString hasPrefix:](v1, "hasPrefix:", CFSTR("AVAudioSessionMode")))
      v1 = CFSTR("Default");
    if (-[__CFString containsString:](v1, "containsString:", CFSTR("WebCam_MultiMic")))
    {
      v3 = kMXSessionAudioMode_WebCam_MultiMic;
    }
    else
    {
      if (!-[__CFString containsString:](v1, "containsString:", CFSTR("WebCam")))
      {
        if (-[__CFString containsString:](v1, "containsString:", CFSTR("Enrollment")))
          v2 = CFSTR("Enrollment");
        else
          v2 = v1;
        return v2;
      }
      v3 = kMXSessionAudioMode_WebCam;
    }
    v2 = *v3;
    return v2;
  }
  return result;
}

BOOL CMSMUtility_IsCategoryInputOnly(const void *a1)
{
  return a1 && (CFEqual(a1, CFSTR("Record")) || CFEqual(a1, CFSTR("Record_WithBluetooth")));
}

CFPropertyListRef cmsDeepCopyPickedRoute(void *a1)
{
  NSString *v2;
  NSString *v3;
  void *v4;
  void *v5;
  __CFArray *v6;
  CFPropertyListRef v7;

  v2 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(a1);
  v3 = CMSUtility_CopyNonNULLModeForPickingRoutes(a1);
  v4 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(a1);
  v5 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(a1);
  v6 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v2, (uint64_t)v3, v5, v4);
  v7 = cmsmDeepCopyPickedRouteDescription(v6);
  if (v6)
    CFRelease(v6);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  return v7;
}

__CFArray *CMSMUtility_CopyPickableRoutes()
{
  NSString *v0;
  NSString *v1;
  void *v2;
  void *v3;
  __CFArray *v4;

  v0 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(0);
  v1 = CMSUtility_CopyNonNULLModeForPickingRoutes(0);
  v2 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(0);
  v3 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(0);
  v4 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v0, (uint64_t)v1, v3, v2);
  if (v0)
    CFRelease(v0);
  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return v4;
}

NSString *CMSUtility_CopyNonNULLModeForPickingRoutes(void *a1)
{
  NSString *result;

  if (a1)
  {
    result = (NSString *)(id)objc_msgSend(a1, "audioMode");
    if (result)
      return result;
    return (NSString *)CFRetain(CFSTR("Default"));
  }
  result = CMSMUtility_CopyCurrentlyActiveMode();
  if (!result)
    return (NSString *)CFRetain(CFSTR("Default"));
  return result;
}

NSString *CMSUtility_CopyNonNULLCategoryForPickingRoutes(void *a1)
{
  NSString *result;

  if (a1)
  {
    result = (NSString *)(id)objc_msgSend(a1, "audioCategory");
    if (result)
      return result;
    return (NSString *)CFRetain(CFSTR("Audio/Video"));
  }
  result = CMSMUtility_CopyCurrentlyActiveCategory();
  if (!result)
    return (NSString *)CFRetain(CFSTR("Audio/Video"));
  return result;
}

const void *CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(void *a1)
{
  const void *v1;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = (const void *)objc_msgSend(a1, "allowedPortTypes");
    if (v1)
LABEL_3:
      CFRetain(v1);
  }
  else
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7), "isActive"))
          {
            MEMORY[0x1940352BC](gCMSM);
            v1 = (const void *)qword_1EE2B3BF8;
            MEMORY[0x1940352C8](gCMSM);
            goto LABEL_15;
          }
          ++v7;
        }
        while (v5 != v7);
        v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v5)
          continue;
        break;
      }
    }
    v1 = 0;
LABEL_15:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (v1)
      goto LABEL_3;
  }
  return v1;
}

NSString *CMSMUtility_CopyCurrentlyActiveMode()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  NSString *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v5, "audioCategory")))
        {
          v6 = -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode");
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t _VAEndpointManager_CopyPropertyForAudioSessionID(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  id v10;
  void *v11;
  NSString *v12;
  NSString *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  int ShouldIncludePortTypeForRouteConfiguration;
  const void *v22;
  uint64_t AudioSessionIDForActiveCMSession;
  int v24;
  int v25;
  void *v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  CFTypeRef v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (a2 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A28]))
    {
      v10 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a4);
      v11 = v10;
      if (v10)
      {
        v12 = (NSString *)objc_msgSend(v10, "audioCategory");
        v13 = (NSString *)objc_msgSend(v11, "audioMode");
        v14 = (void *)objc_msgSend(v11, "activationContext");
        v15 = (void *)objc_msgSend(v11, "allowedPortTypes");
      }
      else
      {
        v14 = 0;
        v12 = 0;
        v13 = 0;
        v15 = 0;
      }
      *a6 = vaemCopyAvailableEndpointsForRouteConfiguration(v12, v13, v14, v15);
LABEL_12:

      return 0;
    }
    if (!CFEqual(a2, CFSTR("VAEM_AvailableInputEndpoints")))
    {
      result = CFEqual(a2, CFSTR("VAEM_IsAirPlayIncluded"));
      if (!(_DWORD)result)
        return result;
      v18 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a4);
      v11 = v18;
      if (v18)
      {
        VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v18, "audioCategory"));
        VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v11, "audioMode"));
        ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)objc_msgSend(v11, "allowedPortTypes"), 0x70617061u);
        v22 = (const void *)objc_msgSend(v11, "allowedPortTypes");
      }
      else
      {
        VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)CFSTR("Audio/Video"));
        VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)CFSTR("Default"));
        ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, 0x70617061u);
        v22 = 0;
      }
      if (ShouldIncludePortTypeForRouteConfiguration | vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v22, 0x70617073u))v27 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v27 = (const void **)MEMORY[0x1E0C9AE40];
      v28 = *v27;
      *a6 = *v27;
      CFRetain(v28);
      goto LABEL_12;
    }
    if ((_DWORD)a4)
    {
      v16 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a4);
      v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      *a6 = 0;
      if (!v16)
        goto LABEL_25;
LABEL_18:
      v24 = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v16, "audioCategory"));
      v25 = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v16, "audioMode"));
      v26 = (void *)vaemCopyConnectedPortsListForRouteConfiguration(v24, v25, 0, 1);
LABEL_26:
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v29 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v36;
        do
        {
          for (i = 0; i != v30; ++i)
          {
            if (*(_QWORD *)v36 != v31)
              objc_enumerationMutation(v26);
            v33 = vaemCopyEndpointForPort(objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * i), "unsignedIntValue"));
            objc_msgSend(v17, "addObject:", v33);
            if (v33)
              CFRelease(v33);
          }
          v30 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        }
        while (v30);
      }
      *a6 = v17;
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }

      return 0;
    }
    v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    *a6 = 0;
    AudioSessionIDForActiveCMSession = CMSMUtility_GetAudioSessionIDForActiveCMSession();
    if ((_DWORD)AudioSessionIDForActiveCMSession)
    {
      v16 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", AudioSessionIDForActiveCMSession);
      if (v16)
        goto LABEL_18;
    }
    else
    {
      v16 = 0;
    }
LABEL_25:
    v26 = 0;
    goto LABEL_26;
  }
  return result;
}

CFPropertyListRef cmsmDeepCopyPickedRouteDescription(const __CFArray *a1)
{
  const void *v2;
  const void *context;
  CFRange v5;

  context = 0;
  if (a1)
  {
    v5.length = CFArrayGetCount(a1);
    v5.location = 0;
    CFArrayApplyFunction(a1, v5, (CFArrayApplierFunction)cmsmGetPickedRouteApplierFunction, &context);
    v2 = context;
  }
  else
  {
    v2 = 0;
  }
  return CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0);
}

__CFArray *vaemCopyAvailableEndpointsForRouteConfiguration(NSString *a1, NSString *a2, void *a3, void *a4)
{
  NSString *v6;
  NSString *v7;
  __CFArray *v8;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  __CFArray *v15;

  v6 = a2;
  v7 = a1;
  if (!a1)
  {
    v7 = -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory");
    if (v6)
      goto LABEL_3;
LABEL_15:
    v6 = -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_15;
LABEL_3:
  v8 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v7, (uint64_t)v6, a3, a4);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("PortNumber"));
        if (Value)
          CFArrayAppendValue(Mutable, Value);
      }
    }
  }
  v15 = vaemCopyEndpointsForListOfPorts(Mutable, 1);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  return v15;
}

__CFArray *vaemCopyEndpointsForListOfPorts(const __CFArray *a1, int a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  uint64_t PortAtIndex;
  const void *v9;
  int PortTypeFromPortID;
  int v11;
  CFTypeRef v12;
  const void *v13;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v6 = Count;
    for (i = 0; i != v6; ++i)
    {
      PortAtIndex = CMSMVAUtility_GetPortAtIndex(a1, i);
      v9 = (const void *)vaeCopyNameForPort(PortAtIndex);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
      if (!a2 || (v11 = PortTypeFromPortID, !FigCFEqual()) && v11 != 1885433975 && v11 != 1885433964)
      {
        v12 = vaemCopyEndpointForPort(PortAtIndex);
        if (v12)
        {
          v13 = v12;
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v13);
        }
      }
      if (v9)
        CFRelease(v9);
    }
  }
  if (Mutable && !CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t CMSMVAUtility_GetPortAtIndex(const __CFArray *a1, CFIndex a2)
{
  const __CFNumber *ValueAtIndex;
  uint64_t valuePtr;

  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2);
  valuePtr = 0;
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
  return valuePtr;
}

uint64_t __discoveryManager_shouldSkipAvailableEndpointsQuery_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, uint64_t);

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(result + 24)
                                                                                         + 24);
  if (v5)
    return v5(v2, CFSTR("VAEM_IsAirPlayIncluded"), *MEMORY[0x1E0C9AE00], v1, 0, v3 + 24);
  return result;
}

uint64_t __discoveryManager_iOSCopyAvailableEndpoints_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t);

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(result + 24) + 24);
  if (v5)
    return v5(v2, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], v1, 0, v3 + 24);
  return result;
}

uint64_t FigRouteDiscoveryManagerCopyRoutesForTypeAndAudioSessionID(uint64_t a1, int a2, int a3, uint64_t a4, CFMutableArrayRef *a5)
{
  char *v9;
  CFMutableArrayRef Mutable;
  _QWORD v12[7];
  int v13;
  int v14;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v9 = &discoverManager_getSharedManager_discoveryState;
  else
    v9 = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (*v9)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __discoveryManager_appendAvailableEndpoints_block_invoke;
    v12[3] = &__block_descriptor_64_e5_v8__0l;
    v12[4] = v9;
    v12[5] = Mutable;
    v13 = a2;
    v14 = a3;
    v12[6] = a4;
    FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v12);
  }
  if (a5)
  {
    *a5 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
  return 0;
}

void __cmsmApplicationStateChangedNotificationCallback_block_invoke(uint64_t a1)
{
  const void *SInt32;
  const void *v3;
  NSObject *v4;
  const void *v5;
  _QWORD v6[6];

  SInt32 = (const void *)FigCFNumberCreateSInt32();
  v3 = (const void *)FigCFNumberCreateSInt32();
  if (CMSessionMgrHandleApplicationStateChange((const __CFNumber *)v3, (CFNumberRef)SInt32, *(_QWORD *)(a1 + 32)))
  {
    if (SInt32)
      CFRelease(SInt32);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v4 = MXGetSerialQueue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __cmsmApplicationStateChangedNotificationCallback_block_invoke_2;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = SInt32;
    MXDispatchAsync((uint64_t)"cmsmApplicationStateChangedNotificationCallback_block_invoke", (uint64_t)"CMSessionManager.m", 17024, 0, 0, v4, (uint64_t)v6);
    v5 = *(const void **)(a1 + 32);
    if (v5)
      CFRelease(v5);
  }
}

__CFArray *FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(const __CFArray *a1, uint64_t a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  __CFDictionary *v9;
  __CFDictionary *v10;
  id MutableCopy;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  const __CFDictionary *v15;
  const void *Value;
  const __CFString *v17;
  const void *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const void *v22;
  const __CFDictionary *v23;
  const void *v24;
  const __CFString *v25;
  const __CFString *v26;
  char v27;
  CFIndex location;
  CFIndex v29;
  __CFDictionary *v30;
  const __CFString *v31;
  CFIndex v32;
  CFIndex idx;
  CFTypeRef cf;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        v9 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)ValueAtIndex, a2);
        if (v9)
        {
          v10 = v9;
          MutableCopy = MXCFDictionaryCreateMutableCopy((uint64_t)v9);
          CFArrayAppendValue(Mutable, MutableCopy);
          CFRelease(v10);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
      }
    }
  }
  v12 = 0;
  if (Mutable)
    goto LABEL_9;
LABEL_10:
  v13 = 0;
LABEL_11:
  if (v12 < v13 - 1)
  {
    v14 = CFArrayGetValueAtIndex(Mutable, v12);
    if (v14)
      v15 = (const __CFDictionary *)CFRetain(v14);
    else
      v15 = 0;
    Value = CFDictionaryGetValue(v15, CFSTR("RouteUID"));
    if (Value)
      v17 = (const __CFString *)CFRetain(Value);
    else
      v17 = 0;
    v18 = CFDictionaryGetValue(v15, CFSTR("PortNumber"));
    if (v18)
      cf = CFRetain(v18);
    else
      cf = 0;
    idx = v12;
    v19 = v12 + 1;
    while (1)
    {
      v20 = v19;
      if (Mutable)
        v21 = CFArrayGetCount(Mutable);
      else
        v21 = 0;
      if (v20 >= v21)
      {
LABEL_51:
        if (v15)
          CFRelease(v15);
        if (v17)
          CFRelease(v17);
        if (cf)
          CFRelease(cf);
        v12 = idx - (v20 < v21) + 1;
        if (!Mutable)
          goto LABEL_10;
LABEL_9:
        v13 = CFArrayGetCount(Mutable);
        goto LABEL_11;
      }
      v22 = CFArrayGetValueAtIndex(Mutable, v20);
      v23 = v22 ? (const __CFDictionary *)CFRetain(v22) : 0;
      v24 = CFDictionaryGetValue(v23, CFSTR("RouteUID"));
      if (!v24)
        break;
      v25 = (const __CFString *)CFRetain(v24);
      v26 = v25;
      v27 = 1;
      if (v17 && v25)
      {
        location = CFStringFind(v25, v17, 0).location;
        v29 = CFStringFind(v17, v26, 0).location;
        if (FigCFEqual() || location != -1 || v29 != -1)
        {
          if (location == -1)
          {
            v30 = v15;
            v31 = v26;
          }
          else
          {
            v30 = v23;
            v31 = v17;
          }
          CFDictionarySetValue(v30, CFSTR("RouteUID"), v31);
          if (cf)
          {
            CFDictionaryApplyFunction(v23, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v15);
            v32 = v20;
          }
          else
          {
            CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v23);
            v32 = idx;
          }
          CFArrayRemoveValueAtIndex(Mutable, v32);
          v27 = 0;
          if (!v23)
            goto LABEL_41;
LABEL_40:
          CFRelease(v23);
          goto LABEL_41;
        }
        goto LABEL_38;
      }
LABEL_39:
      if (v23)
        goto LABEL_40;
LABEL_41:
      if (v26)
        CFRelease(v26);
      v19 = v20 + 1;
      if ((v27 & 1) == 0)
        goto LABEL_51;
    }
    v26 = 0;
LABEL_38:
    v27 = 1;
    goto LABEL_39;
  }
  return Mutable;
}

const __CFArray *FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID(const __CFArray *a1, uint64_t a2)
{
  __CFArray *v4;
  __CFArray *v5;
  const __CFArray *v6;
  __CFArray *v7;
  NSObject *v8;
  const __CFArray *v9;
  const void *v10;
  CFTypeRef cf;
  _QWORD v13[6];
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = -[MXEndpointDescriptorCache copyRouteDescriptorsForEndpoints:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyRouteDescriptorsForEndpoints:", a1);
  v5 = FigRoutingManagerCopyEndpointsWithType(a1);
  v6 = v5;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
    {
      v7 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v6, a2);
      v16[3] = (uint64_t)v7;
    }
    else
    {
      v8 = MXGetSerialQueue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID_block_invoke;
      v13[3] = &unk_1E3098DB0;
      v13[4] = &v15;
      v13[5] = v6;
      v14 = a2;
      MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID", (uint64_t)"FigRouteDiscoveryManager.m", 1922, 0, 0, v8, (uint64_t)v13);
    }
  }
  cf = 0;
  MXCFArrayCopyAppendedArray((const __CFArray *)v16[3], v4, (__CFArray **)&cf);
  v9 = FigEndpointDescriptorUtility_CopyAndRemoveDuplicateRouteDescriptors((CFArrayRef)cf);
  if (v6)
    CFRelease(v6);
  v10 = (const void *)v16[3];
  if (v10)
  {
    CFRelease(v10);
    v16[3] = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v4)
    CFRelease(v4);
  if (!v9)
    v9 = (const __CFArray *)MEMORY[0x1E0C9AA60];
  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_19362B4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFArray *FigRoutingManagerCopyEndpointsWithType(const __CFArray *a1)
{
  __CFArray *Mutable;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v6;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v3 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
      v6 = CFArrayGetValueAtIndex(a1, v3);
      CFArrayAppendValue(Mutable, v6);
    }
    ++v3;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

__CFArray *MXEndpointDescriptorCopyAvailableRouteDescriptorsFromEndpoints(const __CFArray *a1)
{
  __CFArray *Mutable;
  CFIndex v3;
  CFIndex i;
  uint64_t Value;
  id MutableCopy;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v3 < i; i = 0)
  {
    CFArrayGetValueAtIndex(a1, v3);
    FigCFDictionaryGetValue();
    if (FigCFArrayContainsValue())
    {
      Value = FigCFDictionaryGetValue();
      if (Value)
      {
        MutableCopy = MXCFDictionaryCreateMutableCopy(Value);
        CFArrayAppendValue(Mutable, MutableCopy);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
    }
    ++v3;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

void MXCFArrayCopyAppendedArray(const __CFArray *a1, const __CFArray *a2, __CFArray **a3)
{
  __CFArray *Mutable;
  CFRange v7;
  CFRange v8;

  if (a3)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (a1 && CFArrayGetCount(a1))
    {
      v7.length = CFArrayGetCount(a1);
      v7.location = 0;
      CFArrayAppendArray(Mutable, a1, v7);
    }
    if (a2)
    {
      if (CFArrayGetCount(a2))
      {
        v8.length = CFArrayGetCount(a2);
        v8.location = 0;
        CFArrayAppendArray(Mutable, a2, v8);
      }
    }
    *a3 = Mutable;
  }
}

const __CFArray *FigEndpointDescriptorUtility_CopyAndRemoveDuplicateRouteDescriptors(CFArrayRef theArray)
{
  const __CFArray *MutableCopy;
  CFIndex v2;
  CFIndex Count;
  const void *ValueAtIndex;
  const __CFDictionary *v5;
  const void *Value;
  const __CFString *v7;
  const void *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const void *v12;
  const __CFDictionary *v13;
  const void *v14;
  const __CFString *v15;
  const __CFString *v16;
  char v17;
  CFIndex location;
  CFIndex v19;
  CFMutableDictionaryRef v20;
  CFIndex v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v24;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;

  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  v2 = 0;
  if (!MutableCopy)
    goto LABEL_3;
LABEL_2:
  Count = CFArrayGetCount(MutableCopy);
LABEL_4:
  if (v2 < Count - 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v2);
    if (ValueAtIndex)
      v5 = (const __CFDictionary *)CFRetain(ValueAtIndex);
    else
      v5 = 0;
    Value = CFDictionaryGetValue(v5, CFSTR("RouteUID"));
    if (Value)
      v7 = (const __CFString *)CFRetain(Value);
    else
      v7 = 0;
    v8 = CFDictionaryGetValue(v5, CFSTR("PortNumber"));
    theDict = v5;
    if (v8)
      cf = CFRetain(v8);
    else
      cf = 0;
    v9 = v2 + 1;
    v24 = v2;
    while (1)
    {
      v10 = v9;
      if (MutableCopy)
        v11 = CFArrayGetCount(MutableCopy);
      else
        v11 = 0;
      if (v10 >= v11)
      {
LABEL_45:
        if (theDict)
          CFRelease(theDict);
        if (v7)
          CFRelease(v7);
        if (cf)
          CFRelease(cf);
        v2 = v2 - (v10 < v11) + 1;
        if (MutableCopy)
          goto LABEL_2;
LABEL_3:
        Count = 0;
        goto LABEL_4;
      }
      v12 = CFArrayGetValueAtIndex(MutableCopy, v10);
      if (v12)
        v13 = (const __CFDictionary *)CFRetain(v12);
      else
        v13 = 0;
      v14 = CFDictionaryGetValue(v13, CFSTR("RouteUID"));
      if (v14)
      {
        v15 = (const __CFString *)CFRetain(v14);
        v16 = v15;
        v17 = 1;
        if (!v7 || !v15)
          goto LABEL_32;
        location = CFStringFind(v15, v7, 0).location;
        v19 = CFStringFind(v7, v16, 0).location;
        if (FigCFEqual() || location != -1 || v19 != -1)
        {
          if (location == -1)
          {
            v20 = theDict;
            CFDictionarySetValue(theDict, CFSTR("RouteUID"), v16);
          }
          else
          {
            CFDictionarySetValue(v13, CFSTR("RouteUID"), v7);
            v20 = theDict;
          }
          if (cf)
          {
            CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v20);
            v21 = v10;
          }
          else
          {
            CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v13);
            v21 = v2;
          }
          CFArrayRemoveValueAtIndex(MutableCopy, v21);
          if (dword_1EE2B3DE8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v17 = 0;
            v2 = v24;
          }
          else
          {
            v17 = 0;
          }
          goto LABEL_32;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = 1;
LABEL_32:
      if (v13)
        CFRelease(v13);
      if (v16)
        CFRelease(v16);
      v9 = v10 + 1;
      if ((v17 & 1) == 0)
        goto LABEL_45;
    }
  }
  return MutableCopy;
}

CFTypeRef FigRoutingManagerCopySelectedBufferedEndpoint(const void *a1, const void *a2)
{
  uint64_t ContextString;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  OpaqueFigEndpoint *v19;
  OpaqueFigEndpoint *v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v22;
  unsigned int v23;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  _BYTE valuePtr[12];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const void *v32;
  __int16 v33;
  const void *v34;
  __int16 v35;
  CFTypeRef v36;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = 0;
  ContextString = FigRoutingManagerContextUtilities_GetContextString((uint64_t)a1);
  if (a2 && FigRoutingManagerContextUtilities_IsContextSidePlay((uint64_t)a1))
  {
    v5 = routingMangager_copySelectedBufferedEndpointForSidePlay();
  }
  else
  {
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      cf[0] = 0;
      FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)cf);
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)cf[0], &v26);
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)a1, &v26);
    }
    v5 = 0;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v26)
    || FigRoutingManagerIsEndpointOfType((uint64_t)v26))
  {
    v6 = v26;
    if (v26)
      CFRetain(v26);
    if (v5)
    {
      v7 = v5;
LABEL_15:
      CFRelease(v7);
    }
  }
  else
  {
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)v26))
      goto LABEL_48;
    cf[0] = 0;
    v14 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v16)
      v16(CMBaseObject, CFSTR("VAE_PortType"), v14, cf);
    if (!cf[0])
    {
LABEL_48:
      v6 = v5;
      goto LABEL_16;
    }
    *(_QWORD *)valuePtr = 0;
    CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt64Type, valuePtr);
    if (*(_DWORD *)valuePtr == 1886614639)
    {
      v25 = 0;
      v17 = FigEndpointGetCMBaseObject();
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v18)
        v18(v17, *MEMORY[0x1E0CA4258], v14, &v25);
      v19 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v25, 1, *MEMORY[0x1E0CA3A68], 0);
      v20 = v19;
      if (v19 && (FigRoutingManagerGetFigEndpointFeatures((uint64_t)v19, (uint64_t)a1) & 8) != 0)
      {
        CFRetain(v20);
        v6 = v20;
        if (v5)
        {
          CFRelease(v5);
          v6 = v20;
        }
      }
      else
      {
        v6 = v5;
      }
      if (v25)
      {
        CFRelease(v25);
        v25 = 0;
      }
      if (v20)
        CFRelease(v20);
    }
    else
    {
      v6 = v5;
    }
    v7 = cf[0];
    if (cf[0])
      goto LABEL_15;
  }
LABEL_16:
  if (v6)
  {
    v8 = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(v8, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v27);
  }
  v10 = v27;
  if (FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (FigCFEqual())
        goto LABEL_58;
      if (routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName)
      {
        CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName);
        routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName = 0;
      }
      if (v10)
        v11 = CFRetain(v10);
      else
        v11 = 0;
      routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName = (uint64_t)v11;
    }
    else
    {
      if (routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID)
      {
        CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID);
        routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID = 0;
      }
      if (a2)
        v13 = CFRetain(a2);
      else
        v13 = 0;
      routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID = (uint64_t)v13;
    }
  }
  else
  {
    if (routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID)
    {
      CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID);
      routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID = 0;
    }
    if (a1)
      v12 = CFRetain(a1);
    else
      v12 = 0;
    routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID = (uint64_t)v12;
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(v25) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v22 = v25;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFE;
    if (v23)
    {
      *(_DWORD *)valuePtr = 136316163;
      *(_QWORD *)&valuePtr[4] = "FigRoutingManagerCopySelectedBufferedEndpoint";
      v29 = 2114;
      v30 = ContextString;
      v31 = 2113;
      v32 = a1;
      v33 = 2113;
      v34 = a2;
      v35 = 2114;
      v36 = v27;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_58:
  if (v27)
  {
    CFRelease(v27);
    v27 = 0;
  }
  if (v26)
    CFRelease(v26);
  return v6;
}

uint64_t FigRoutingContextUtilities_IsFollowingAnotherContext(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingContextUtilities_IsFollowingAnotherContext_block_invoke;
    v6[3] = &unk_1E3098D60;
    v6[5] = v2;
    v6[6] = v1;
    v6[4] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_IsFollowingAnotherContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 4733, 0, 0, v4, (uint64_t)v6);
    v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
  }
  return v1;
}

void sub_19362C228(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerCopyPickedEndpointForRoutingContext(uint64_t a1, CFTypeRef *a2)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
    return FigRoutingManagerCopyRemotePickedEndpoint(a1, a2);
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce == -1)
  {
    if (!a1)
      return 4294954516;
  }
  else
  {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
    if (!a1)
      return 4294954516;
  }
  if (a2)
    return FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)a2);
  return 4294954516;
}

uint64_t MX_RunningBoardServices_CopyHostDisplayIDForPID(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "hostProcess"), "bundle"), "identifier"), "copy");
}

void CMSUtility_FetchSessionEntitlements(void *a1, __SecTask *a2)
{
  void *v4;
  const void *v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  objc_msgSend(a1, "setHasEntitlementToRecordAudioInAnExtension:", 0);
  objc_msgSend(a1, "setHasEntitlementToStartRecordingInTheBackground:", 0);
  objc_msgSend(a1, "setHasEntitlementToSuppressRecordingStateToSystemStatus:", 0);
  objc_msgSend(a1, "setHasEntitlementToSupportProcessAssertionAuditTokens:", 0);
  objc_msgSend(a1, "setHasEntitlementToSetEmergencyAlertPriority:", 0);
  objc_msgSend(a1, "setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:", 0);
  if (CMSUtility_IsAnExtension(a1))
  {
    v4 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.coremedia.extensions.audiorecording.allow"), 0);
    if (objc_msgSend(v4, "BOOLValue"))
      objc_msgSend(a1, "setHasEntitlementToRecordAudioInAnExtension:", 1);

    if ((objc_msgSend(a1, "hasEntitlementToRecordAudioInAnExtension") & 1) == 0)
    {
      v5 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
      if (FigCFEqual() || FigCFEqual())
      {
        v6 = 1;
        if (!v5)
        {
LABEL_9:
          objc_msgSend(a1, "setHasEntitlementToRecordAudioInAnExtension:", v6);
          goto LABEL_10;
        }
      }
      else
      {
        v6 = FigCFEqual() != 0;
        if (!v5)
          goto LABEL_9;
      }
      CFRelease(v5);
      goto LABEL_9;
    }
  }
LABEL_10:
  v7 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.startrecordinginthebackground.allow"), 0);
  if (objc_msgSend(v7, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToStartRecordingInTheBackground:", 1);

  v8 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.suppressrecordingstatetosystemstatus"), 0);
  if (objc_msgSend(v8, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToSuppressRecordingStateToSystemStatus:", 1);

  v9 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.processassertionaudittokens.allow"), 0);
  if (objc_msgSend(v9, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToSupportProcessAssertionAuditTokens:", 1);

  v10 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.allowrecordingduringcall"), 0);
  if (objc_msgSend(v10, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToRecordDuringCall:", 1);

  v11 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.allowemergencyalertpriority"), 0);
  if (objc_msgSend(v11, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToSetEmergencyAlertPriority:", 1);

  v12 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.microphoneattribution.allow"), 0);
  if (objc_msgSend(v12, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:", 1);

  v13 = (void *)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.preferredminimummicrophoneindicatorlightontime.allow"), 0);
  if (objc_msgSend(v13, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:", 1);

  v14 = (id)SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.mediaexperience.isusingbuiltinmicforrecording.allow"), 0);
  if (objc_msgSend(v14, "BOOLValue"))
    objc_msgSend(a1, "setHasEntitlementToSetIsUsingBuiltInMicForRecording:", 1);

}

uint64_t MXCoreSessionInitialize(void *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CFTypeRef cf;

  objc_msgSend(a1, "updateClientName:", 0);
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  objc_msgSend(a1, "setRoutingContextUUID:", cf);
  if (cf)
    CFRelease(cf);
  objc_msgSend(a1, "setNeedsAudioBudget:", 0);
  objc_msgSend(a1, "setPowerProfile:", 0);
  objc_msgSend(a1, "setIsLongFormAudio:", 0);
  objc_msgSend(a1, "setOverridePortsList:", 0);
  objc_msgSend(a1, "setMode:", 1768776806);
  cmsSetAudioCategory(a1, CFSTR("SoloAmbientSound"), 1, 0);
  objc_msgSend(a1, "setIsEligibleForNowPlayingAppConsideration:", 1);
  LODWORD(v2) = *(_DWORD *)"333?";
  objc_msgSend(a1, "setInterruptionFadeDuration:", v2);
  objc_msgSend(a1, "setDesiredInputGainScalar:", 0);
  objc_msgSend(a1, "setPidToInheritAppStateFrom:", 0);
  objc_msgSend(a1, "setForceSoundCheck:", 0);
  objc_msgSend(a1, "setPreferredHardwareFormat:", CFSTR("LPCM"));
  objc_msgSend(a1, "setExcludedPortsList:", 0);
  objc_msgSend(a1, "setPreferredInputSampleRate:", 44100.0);
  objc_msgSend(a1, "setPreferredOutputSampleRate:", 44100.0);
  objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", 0);
  objc_msgSend(a1, "setDoNotNotifyOtherSessionsOnNextInactive:", 0);
  objc_msgSend(a1, "setAllowSystemSoundsWhileRecording:", 0);
  objc_msgSend(a1, "setWantsToPauseSpokenAudio:", 0);
  objc_msgSend(a1, "setAllowedRouteTypes:", 0);
  objc_msgSend(a1, "setAllowedPortTypes:", 0);
  objc_msgSend(a1, "setPrefersMultichannelAudio:", 0);
  objc_msgSend(a1, "setOrientationOverride:", 5);
  objc_msgSend(a1, "setPreferredStereoInputOrientation:", 0);
  LODWORD(v3) = -1038090240;
  objc_msgSend(a1, "setDuckToLevelDB:", v3);
  LODWORD(v4) = 1045220557;
  objc_msgSend(a1, "setDuckToLevelScalar:", v4);
  LODWORD(v5) = 1045220557;
  objc_msgSend(a1, "setUnduckToLevelScalar:", v5);
  objc_msgSend(a1, "setWantsAutomaticClusterPairingOnPlaybackStart:", 0);
  objc_msgSend(a1, "setDeactivateTimerDelay:", 480);
  objc_msgSend(a1, "setAssertionAuditTimerDelay:", 480);
  objc_msgSend(a1, "setDisplayID:", 0);
  objc_msgSend(a1, "setPlaybackAssertionRef:", 0);
  objc_msgSend(a1, "setResumeAssertionRef:", 0);
  objc_msgSend(a1, "setResumeBackgroundAppUpdaterTimer:", 0);
  objc_msgSend(a1, "setExtendBackgroundAppAssertionTimer:", 0);
  objc_msgSend(a1, "setAddSharedAudioRouteToRoutablePorts:", 0);
  objc_msgSend(a1, "setIsRecordingMuted:", 0);
  objc_msgSend(a1, "setInterruptionFadeDurationSetByClient:", 0);
  objc_msgSend(a1, "setInterruptionStyleSetByClient:", 0);
  objc_msgSend(a1, "setDuckFadeDurationSetByClient:", 0);
  objc_msgSend(a1, "setUnduckFadeDurationSetByClient:", 0);
  objc_msgSend(a1, "setDuckToLevelScalarSetByClient:", 0);
  objc_msgSend(a1, "setDuckToLevelDBSetByClient:", 0);
  objc_msgSend(a1, "setUnduckToLevelScalarSetByClient:", 0);
  objc_msgSend(a1, "setShadowingAudioSessionID:", 0);
  objc_msgSend(a1, "setTookControlOfStarkMainAudio:", 0);
  objc_msgSend(a1, "setStarkBorrowCount:", 0);
  objc_msgSend(a1, "setDuckCommandSentToCarSession:", 0);
  objc_msgSend(a1, "setPrefersConcurrentAirPlayAudio:", 0);
  objc_msgSend(a1, "setNowPlayingAppWasStoppedOnMostRecentActivation:", 0);
  objc_msgSend(a1, "setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:", 0);
  objc_msgSend(a1, "setWaitingForRemoteInterruptionDoneIdentifier:", 0);
  objc_msgSend(a1, "setNotFullyInactive:", 0);
  objc_msgSend(a1, "setClientIsPlaying:", 0);
  objc_msgSend(a1, "setSomeMXSessionIsPlaying:", 0);
  objc_msgSend(a1, "setHapticEngineIsPlaying:", 0);
  objc_msgSend(a1, "setIsPlayingOutput:", 0);
  objc_msgSend(a1, "setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:", 0);
  objc_msgSend(a1, "setSystemSoundHasModifiedCurrentlyControllingFlags:", 0);
  objc_msgSend(a1, "setReporterStarted:", 0);
  objc_msgSend(a1, "setDuckingSourceList:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"));
  objc_msgSend(a1, "setApplicationState:", 0);
  objc_msgSend(a1, "setIsAllowedToPlayInBackground:", 0);
  objc_msgSend(a1, "setHasFetchedBackgroundPrivileges:", 0);
  objc_msgSend(a1, "setHasGPSPrivileges:", 0);
  objc_msgSend(a1, "setIsAirPlayReceiverSession:", 0);
  objc_msgSend(a1, "setIsPiPPossible:", 0);
  objc_msgSend(a1, "setIsShadowSessionForFigSBAR:", 0);
  objc_msgSend(a1, "setDoesntActuallyPlayAudio:", 0);
  objc_msgSend(a1, "setPrefersBeingInterruptedByNextActiveRecordingClient:", 0);
  objc_msgSend(a1, "setPrefersNoInterruptionsByRingtonesAndAlerts:", 0);
  objc_msgSend(a1, "setPrefersNoInterruptionsByMixableSessions:", 0);
  objc_msgSend(a1, "setPrefersToVibeWhenVibrationsAreDisabled:", 0);
  objc_msgSend(a1, "setPreferredPersistentRoute:", 0);
  objc_msgSend(a1, "setAllowMixableAudioWhileRecording:", 0);
  objc_msgSend(a1, "setPrefersNoInterruptionWhenSecureMicrophoneIsEngaged:", 0);
  objc_msgSend(a1, "setIsSharePlayCallSession:", 0);
  objc_msgSend(a1, "setIsSharePlayMediaSession:", 0);
  objc_msgSend(a1, "setIsSharePlayCapableCallSession:", 0);
  objc_msgSend(a1, "setIsHardwareSafetySession:", 0);
  objc_msgSend(a1, "setAggregateDeviceClockUID:", 0);
  objc_msgSend(a1, "setRecentlyWantedToPauseSpokenAudio:", 0);
  objc_msgSend(a1, "setReporterIDs:", 0);
  objc_msgSend(a1, "setWasInterruptedWhileRecording:", 0);
  objc_msgSend(a1, "setTimestampWhenMostRecentResumableEndInterruptionWasSent:", 0);
  objc_msgSend(a1, "setTimestampWhenMostRecentlyInterrupted:", 0);
  objc_msgSend(a1, "setPrefersToTakeHWControlFlagsFromAnotherSession:", 1);
  objc_msgSend(a1, "setIsEligibleForBTTriangleConsideration:", 1);
  objc_msgSend(a1, "setPrefersNoDucking:", 0);
  objc_msgSend(a1, "setPrefersSuppressingRecordingState:", 0);
  objc_msgSend(a1, "setOptOutOfMutePriority:", 0);
  objc_msgSend(a1, "setPrefersBluetoothAccessoryMuting:", 0);
  objc_msgSend(a1, "setActiveOSTransaction:", 0);
  objc_msgSend(a1, "setVibratingOSTransaction:", 0);
  objc_msgSend(a1, "setBundleIdToPAAccessIntervalMap:", 0);
  objc_msgSend(a1, "setHasEntitlementToRecordAudioInAnExtension:", 0);
  objc_msgSend(a1, "setHasEntitlementToStartRecordingInTheBackground:", 0);
  objc_msgSend(a1, "setHasEntitlementToSuppressRecordingStateToSystemStatus:", 0);
  objc_msgSend(a1, "setHasEntitlementToSupportProcessAssertionAuditTokens:", 0);
  objc_msgSend(a1, "setHasEntitlementToSetEmergencyAlertPriority:", 0);
  objc_msgSend(a1, "setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:", 0);
  objc_msgSend(a1, "setHasEntitlementToSetIsUsingBuiltInMicForRecording:", 0);
  objc_msgSend(a1, "setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:", 0);
  objc_msgSend(a1, "setPreferredMinimumMicrophoneIndicatorLightOnTime:", 0);
  objc_msgSend(a1, "setHostProcessAttribution:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
  objc_msgSend(a1, "setParentProcessAuditTokens:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
  objc_msgSend(a1, "setHostProcessPlaybackAssertions:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionary"));
  objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", 0);
  objc_msgSend(a1, "setPrefersEchoCancelledInput:", 0);
  objc_msgSend(a1, "setHasEntitlementToRecordDuringCall:", 0);
  objc_msgSend(a1, "setPrefersSpeechDetectEnabled:", 1);
  objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnect:", 0);
  objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnectSetByClient:", 0);
  objc_msgSend(a1, "setWasActiveWhenDeviceOwnershipRelinquished:", 0);
  objc_msgSend(a1, "setIsSharedAVAudioSessionInstance:", 0);
  objc_msgSend(a1, "setAreBothBudsInEarForA2DPPortBeforeInterrupting:", 0);
  objc_msgSend(a1, "setBadgeType:", CFSTR("NotApplicable"));
  objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
  objc_msgSend(a1, "setIsUsingBuiltInMicForRecording:", 0);
  objc_msgSend(a1, "setIsUsingExclaveSensor:", 0);
  objc_msgSend(a1, "setIsRecordingMutedForRemoteDevice:", 0);
  objc_msgSend(a1, "setShouldMuteBeAppliedToRemoteDevice:", 1);
  objc_msgSend(a1, "setDoesGameAudioNeedToBeSpatialized:", 0);
  objc_msgSend(a1, "setBypassSystemSpatialAudioForGame:", 0);
  return 0;
}

uint64_t cmsSetAudioCategory(void *a1, const void *a2, int a3, void *a4)
{
  int v8;
  uint64_t v9;
  const void *v11;
  void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int IsAudioCategoryPrimary;
  unsigned int LocalSessionPriority;
  _QWORD v24[5];
  os_log_type_t type;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294954316;
  objc_msgSend(a1, "audioCategory");
  v8 = FigCFEqual();
  if (!a3 && v8)
    return 0;
  if (!a2 || CFEqual(a2, &stru_1E30A1A48))
    return 4294954316;
  if (objc_msgSend(a1, "isSharePlayMediaSession")
    && !-[MXSessionManager isAudioCategoryAllowedForSharePlayMedia:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryAllowedForSharePlayMedia:", a2))
  {
    if (!dword_1EE2B3F38)
      return 4294951615;
LABEL_19:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951615;
  }
  if (objc_msgSend(a1, "isSharePlayCallSession"))
  {
    objc_msgSend(a1, "audioMode");
    if (!CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession((uint64_t)a2))
    {
      if (!dword_1EE2B3F38)
        return 4294951615;
      goto LABEL_19;
    }
  }
  if (objc_msgSend(a1, "isRecording") && !CMSMUtility_IsInputAllowedForCategory(a2))
  {
    if (dword_1EE2B3F38)
    {
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294951611;
  }
  else
  {
    v21 = -[MXSessionManager uplinkMute](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "uplinkMute");
    if (objc_msgSend(a1, "audioCategory"))
    {
      v11 = (const void *)objc_msgSend(a1, "audioCategory");
      if (v11)
        v12 = (void *)CFRetain(v11);
      else
        v12 = 0;
      IsAudioCategoryPrimary = CMSUtility_IsAudioCategoryPrimary(a1);
      LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 1);
    }
    else
    {
      v12 = 0;
      IsAudioCategoryPrimary = 0;
      LocalSessionPriority = 100;
    }
    objc_msgSend(a1, "setAudioCategory:", a2);
    if (dword_1EE2B3F38)
    {
      v26 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsUpdateSessionStateForNewCategory(a1, v12, a4);
    if (objc_msgSend(a1, "isActive"))
    {
      CMSUtility_UpdateRoutingContextForSession(a1);
      v9 = cmsBeginInterruptionGuts(a1, 0, 2);
      if ((_DWORD)v9)
      {
        objc_msgSend(a1, "setAudioCategory:", v12);
        if (dword_1EE2B3F38)
        {
          v26 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsUpdateSessionStateForNewCategory(a1, a2, a4);
        CMSUtility_UpdateRoutingContextForSession(a1);
      }
      if (objc_msgSend(a1, "mutesAudioBasedOnRingerSwitchState", v19, v20))
      {
        objc_msgSend(a1, "setMutesAudioBasedOnRingerSwitchState:", 0);
        cmsUpdateMuteStatus(a1);
      }
      CMSMUtility_UpdatePlayAndRecordAppSpeechState(0);
      CMSMNotificationUtility_PostVoicePromptStyleDidChange();
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, 0, 0xEu, 0, 0, 0);
      cmsUpdateMuteStatus(a1);
      if (CMSUtility_GetIsPlaying(a1))
      {
        if (IsAudioCategoryPrimary != CMSUtility_IsAudioCategoryPrimary(a1))
        {
          CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(a1);
          CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(a1);
        }
        CMSUtility_RouteToPreferredRouteIfRequired(a1, LocalSessionPriority, 6);
      }
      cmsmUpdatePickableRouteDescriptionLists(1);
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
        && CMSMUtility_IsVoiceCallCategory()
        && !MX_FeatureFlags_IsCallManagementMuteControlEnabled())
      {
        vaemSetUplinkMute(v21);
      }
    }
    else
    {
      if ((objc_msgSend(a1, "isActive") & 1) == 0)
      {
        v16 = a1;
        v17 = MXGetSerialQueue();
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __cmsSetAudioCategory_block_invoke;
        v24[3] = &unk_1E3099900;
        v24[4] = a1;
        MXDispatchAsync((uint64_t)"cmsSetAudioCategory", (uint64_t)"CMSessionManager.m", 7855, 0, 0, v17, (uint64_t)v24);
      }
      v9 = 0;
    }
    if ((objc_msgSend(v12, "isEqualToString:", objc_msgSend(a1, "audioCategory", v19, v20)) & 1) == 0)
      CMSMNotificationUtility_PostSessionAudioCategoryDidChange(a1);
    if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
      && objc_msgSend(a1, "isActive")
      && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
    {
      -[MXSessionManager applyUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "applyUplinkMute:", a1);
    }
    if (v12)
      CFRelease(v12);
  }
  return v9;
}

void *CMSUtility_GetAudioCategory(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "audioCategory");
  return a1;
}

void sub_19362D8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopySystemAudioContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemAudioContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemAudioContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4568, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t cmsSetClientPID(void *a1, CFTypeRef cf)
{
  CFTypeID v4;
  int v5;
  __CFDictionary *PowerLogDataForSession;
  int v7;
  uint64_t result;
  int valuePtr;

  valuePtr = 0;
  if (!cf)
    return 4294954316;
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
    return 4294954315;
  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
  v5 = valuePtr;
  if (valuePtr < 1)
    return 4294954315;
  if (v5 == objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
    return 0;
  objc_msgSend(a1, "setClientPID:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", valuePtr));
  objc_msgSend(a1, "updateCameraExtensionFlagsIfNeeded");
  if (objc_msgSend(a1, "idleSleepPreventorAllocated"))
  {
    PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(a1);
    CMSMPowerLogPostPowerLogData(CFSTR("CoreMedia_AudioPlayback"), PowerLogDataForSession);
    if (PowerLogDataForSession)
      CFRelease(PowerLogDataForSession);
  }
  MX_RunningBoardServices_StartMonitoringForPID(valuePtr);
  -[MXMediaEndowmentManager refreshAssertions](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "refreshAssertions");
  objc_msgSend(a1, "setHasFetchedBackgroundPrivileges:", 0);
  objc_msgSend(a1, "updateApplicationStateAndPIDToInheritAppStateFrom");
  cmsUpdatePiPIsPossible(a1);
  v7 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  if (v7 != getpid())
    CMSessionMgrCopyDisplayIdentifierToSession(a1);
  result = objc_msgSend(a1, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a1, "wantsToShowMicrophoneIndicatorWhenNotRecording");
    if ((_DWORD)result)
    {
      MX_SystemStatus_PublishRecordingClientsInfo();
      objc_msgSend(a1, "setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:", 0);
      objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", 0);
      return 0;
    }
  }
  return result;
}

void MX_RunningBoardServices_StartMonitoringForPID(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  os_log_type_t v22;
  os_log_type_t type[4];
  uint64_t v24;
  int v25;
  const char *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((int)a1 >= 1)
  {
    v2 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", a1);
    if (v2 && (v3 = objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingIdentifier:", v2)) != 0)
    {
      v4 = v3;
      if (dword_1EE2B3F60)
      {
        LODWORD(v24) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (mx_runningBoardServices_initializeMonitoring_onceToken != -1)
        dispatch_once(&mx_runningBoardServices_initializeMonitoring_onceToken, &__block_literal_global_53);
      objc_msgSend((id)gProcessPredicatesSetLock, "lock", v17, v19);
      v7 = (void *)objc_msgSend((id)gProcessPredicatesSet, "copy");
      objc_msgSend((id)gProcessPredicatesSet, "addObject:", v4);
      v8 = (void *)objc_msgSend((id)gProcessPredicatesSet, "copy");
      objc_msgSend((id)gProcessPredicatesSetLock, "unlock");
      if ((objc_msgSend(v7, "isEqualToSet:", v8) & 1) != 0)
      {

      }
      else
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __MX_RunningBoardServices_StartMonitoringForPID_block_invoke;
        v21[3] = &unk_1E309E340;
        v21[4] = v8;
        objc_msgSend((id)gProcessMonitor, "updateConfiguration:", v21);
        v9 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
        if (objc_msgSend(v9, "unsignedIntValue"))
        {
          objc_msgSend((id)gApplicationStateCacheLock, "lock");
          if (!objc_msgSend((id)gApplicationStateCache, "objectForKey:", v9))
          {
            v24 = 0;
            v10 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", objc_msgSend(v9, "unsignedIntValue")), &v24);
            if (!v10 || v24)
            {
              *(_DWORD *)type = 0;
              v22 = OS_LOG_TYPE_DEFAULT;
              v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v15 = *(_DWORD *)type;
              if (os_log_type_enabled(v14, v22))
                v16 = v15;
              else
                v16 = v15 & 0xFFFFFFFE;
              if (v16)
              {
                v25 = 136315394;
                v26 = "mx_runningBoardServices_addPIDToApplicationStateCache";
                v27 = 2114;
                v28 = v9;
                LODWORD(v20) = 22;
                v18 = &v25;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              objc_msgSend((id)gApplicationStateCache, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", mx_runningBoardServices_getMXApplicationStateForProcessState((void *)objc_msgSend(v10, "currentState"))), v9);
            }
          }
          objc_msgSend((id)gApplicationStateCacheLock, "unlock", v18, v20);
        }
        else
        {
          LODWORD(v24) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v12 = v24;
          if (os_log_type_enabled(v11, type[0]))
            v13 = v12;
          else
            v13 = v12 & 0xFFFFFFFE;
          if (v13)
          {
            v25 = 136315394;
            v26 = "mx_runningBoardServices_addPIDToApplicationStateCache";
            v27 = 2114;
            v28 = v9;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }

    }
    else
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __mx_runningBoardServices_initializeMonitoring_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t MXApplicationStateForProcessState;
  void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  os_log_type_t type;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(a4, "state");
  v6 = objc_msgSend((id)objc_msgSend(v5, "process"), "pid");
  MXApplicationStateForProcessState = mx_runningBoardServices_getMXApplicationStateForProcessState(v5);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
  if (objc_msgSend(v8, "unsignedIntValue"))
  {
    objc_msgSend((id)gApplicationStateCacheLock, "lock");
    if (dword_1EE2B3F60)
    {
      v26 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend((id)gApplicationStateCache, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", MXApplicationStateForProcessState, v20, v22), v8);
    objc_msgSend((id)gApplicationStateCacheLock, "unlock");
  }
  else
  {
    v26 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "process", v20, v22), "bundle"), "identifier"), "copy");
  cmsmApplicationStateChangedNotificationCallback(MXApplicationStateForProcessState, v6, v11);
  if (v11)
    CFRelease(v11);
  FigRoutingManagerApplicationStateChangedNotificationCallback(MXApplicationStateForProcessState, v6);
  if ((_DWORD)MXApplicationStateForProcessState == 1)
  {
    v12 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", v6);
    if (v12 && (v13 = objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingIdentifier:", v12)) != 0)
    {
      v14 = v13;
      objc_msgSend((id)gProcessPredicatesSetLock, "lock");
      v15 = objc_msgSend((id)gProcessPredicatesSet, "countForObject:", v14);
      if (v15)
      {
        v16 = v15;
        do
        {
          objc_msgSend((id)gProcessPredicatesSet, "removeObject:", v14);
          --v16;
        }
        while (v16);
        v17 = objc_msgSend((id)gProcessPredicatesSet, "copy");
        objc_msgSend((id)gProcessPredicatesSetLock, "unlock");
        v26 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __mx_runningBoardServices_initializeMonitoring_block_invoke_29;
        v24[3] = &unk_1E309E340;
        v24[4] = v17;
        objc_msgSend((id)gProcessMonitor, "updateConfiguration:", v24);
      }
      else
      {
        objc_msgSend((id)gProcessPredicatesSetLock, "unlock");
      }
      mx_runningBoardServices_removePIDFromApplicationStateCache((void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6, v21, v23));
    }
    else
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

CFStringRef MX_RunningBoardServices_CopyDisplayIDForPID(uint64_t a1)
{
  int v1;
  CFStringRef result;
  int v3;
  size_t v4;
  int v5[2];
  int v6;
  int v7;
  _OWORD v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((int)a1 < 1)
    return 0;
  v1 = a1;
  result = (CFStringRef)MX_RunningBoardServices_CopyBundleIdentifierForProcessID(a1);
  if (!result)
  {
    memset(v8, 0, 512);
    v4 = 648;
    *(_QWORD *)v5 = 0xE00000001;
    v6 = 1;
    v7 = v1;
    v3 = sysctl(v5, 4u, v8, &v4, 0, 0);
    result = 0;
    if (v3 != -1)
    {
      if (v4)
        return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&v8[15] + 3, 0x8000100u);
    }
  }
  return result;
}

uint64_t MX_RunningBoardServices_CopyBundleIdentifierForProcessID(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (initializeLogging_onceToken != -1)
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  v2 = (void *)MEMORY[0x194035B20]();
  v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "bundle"), "identifier"), "copy");
  objc_autoreleasePoolPop(v2);
  return v3;
}

BOOL CMSMUtility_FetchBackgroundEntitlement(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFTypeID v3;
  CFIndex Count;
  _BOOL8 v5;
  CFRange v7;
  CFRange v8;

  if ((int)a1 < 1)
    return 0;
  v1 = (const __CFArray *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID((uint64_t)CFSTR("UIBackgroundModes"), a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount(v2);
    v7.location = 0;
    v7.length = Count;
    if (CFArrayContainsValue(v2, v7, CFSTR("voip")))
    {
      v5 = 1;
    }
    else
    {
      v8.location = 0;
      v8.length = Count;
      v5 = CFArrayContainsValue(v2, v8, CFSTR("audio")) != 0;
    }
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

uint64_t MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a2), "bundle"), "bundleInfoValueForKey:", a1), "copy");
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

void FigRoutingManagerApplicationStateChangedNotificationCallback(int a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  int v6;
  int v7;

  v4 = *((_QWORD *)FigRoutingManagerGetSharedManager() + 1);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigRoutingManagerApplicationStateChangedNotificationCallback_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v6 = a2;
  v7 = a1;
  MXDispatchAsync((uint64_t)"FigRoutingManagerApplicationStateChangedNotificationCallback", (uint64_t)"FigRoutingManager_iOS.m", 99, 0, 0, v4, (uint64_t)v5);
}

void *FigRoutingManagerGetSharedManager()
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  if (qword_1EE2B2880)
    return &FigRoutingManagerGetSharedManager_manager;
  else
    return 0;
}

void MX_SystemStatus_PublishRecordingClientsInfo()
{
  id v0;
  __objc2_meth_list **p_inst_meths;
  uint64_t i;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t (*v9)(__int128 *);
  uint64_t v10;
  objc_class *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  void *v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double v27;
  objc_class *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  int v42;
  _QWORD v43[6];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  void *v51;
  _BYTE v52[10];
  __int16 v53;
  unsigned int v54;
  os_log_type_t type[16];
  __int128 v56;
  _BYTE v57[128];
  __int128 v58;
  __int128 v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (mxsystemstatus_initialize_onceToken != -1)
LABEL_64:
    dispatch_once(&mxsystemstatus_initialize_onceToken, &__block_literal_global_23);
  if ((sIsSystemStatusInitialized & 1) == 0)
  {
    LODWORD(v44) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v33 = v44;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
      v34 = v33;
    else
      v34 = v33 & 0xFFFFFFFE;
    if (v34)
    {
      *(_DWORD *)v50 = 136315138;
      *(_QWORD *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  v0 = CMSMUtility_CopyRecordingClientsInfoForSystemStatus();
  MEMORY[0x1940352BC](sSystemStatusMutex);
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v39 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
  p_inst_meths = &OBJC_PROTOCOL___APSubjectMonitor.inst_meths;
  if (!v39)
    goto LABEL_56;
  v38 = *(_QWORD *)v47;
  v37 = v0;
  while (2)
  {
    for (i = 0; i != v39; ++i)
    {
      if (*(_QWORD *)v47 != v38)
        objc_enumerationMutation(v0);
      v3 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
      v41 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", CFSTR("PID"), v35, v36), "unsignedIntValue");
      v42 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", CFSTR("Muted")), "BOOLValue");
      if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
      {
        v17 = (void *)objc_msgSend(objc_alloc((Class)getSTActivityAttributionClass()), "initWithPID:", v41);
        goto LABEL_49;
      }
      v4 = objc_msgSend(v3, "objectForKey:", CFSTR("ActiveEntityBundleID"));
      v5 = objc_msgSend(v3, "objectForKey:", CFSTR("AttributedBundleID"));
      v6 = objc_msgSend(v3, "objectForKey:", CFSTR("AttributedAuditToken"));
      v7 = (void *)objc_msgSend(v3, "objectForKey:", CFSTR("ActiveEntityAuditToken"));
      if (v6)
        v7 = (void *)v6;
      if (v7)
      {
        *(_QWORD *)&v8 = -1;
        *((_QWORD *)&v8 + 1) = -1;
        v44 = v8;
        v45 = v8;
        objc_msgSend(v7, "getBytes:length:", &v44, 32);
        *(_OWORD *)type = v44;
        v56 = v45;
        *(_QWORD *)v50 = 0;
        *(_QWORD *)&v50[8] = v50;
        *(_QWORD *)&v50[16] = 0x2020000000;
        v9 = (uint64_t (*)(__int128 *))getBSExecutablePathForAuditTokenSymbolLoc_ptr;
        v51 = getBSExecutablePathForAuditTokenSymbolLoc_ptr;
        if (!getBSExecutablePathForAuditTokenSymbolLoc_ptr)
        {
          *(_QWORD *)&v58 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v58 + 1) = 3221225472;
          *(_QWORD *)&v59 = __getBSExecutablePathForAuditTokenSymbolLoc_block_invoke;
          *((_QWORD *)&v59 + 1) = &unk_1E3099018;
          v60 = (void (*)(uint64_t))v50;
          __getBSExecutablePathForAuditTokenSymbolLoc_block_invoke((uint64_t)&v58);
          v9 = *(uint64_t (**)(__int128 *))(*(_QWORD *)&v50[8] + 24);
        }
        _Block_object_dispose(v50, 8);
        if (!v9)
        {
          __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
          __break(1u);
          goto LABEL_64;
        }
        v58 = *(_OWORD *)type;
        v59 = v56;
        v10 = v9(&v58);
        v40 = (void *)objc_msgSend(objc_alloc((Class)getSTAttributedEntityClass()), "initWithExecutablePath:", v10);
        if (v5)
        {
LABEL_16:
          *(_QWORD *)&v58 = 0;
          *((_QWORD *)&v58 + 1) = &v58;
          *(_QWORD *)&v59 = 0x3052000000;
          *((_QWORD *)&v59 + 1) = __Block_byref_object_copy__5;
          v60 = __Block_byref_object_dispose__5;
          v11 = (objc_class *)getSTExecutableIdentityClass_softClass;
          v61 = getSTExecutableIdentityClass_softClass;
          if (!getSTExecutableIdentityClass_softClass)
          {
            *(_QWORD *)v50 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v50[8] = 3221225472;
            *(_QWORD *)&v50[16] = __getSTExecutableIdentityClass_block_invoke;
            v51 = &unk_1E3099018;
            *(_QWORD *)v52 = &v58;
            __getSTExecutableIdentityClass_block_invoke((uint64_t)v50);
            v11 = *(objc_class **)(*((_QWORD *)&v58 + 1) + 40);
          }
          _Block_object_dispose(&v58, 8);
          v12 = (void *)objc_msgSend([v11 alloc], "initWithApplicationBundleIdentifier:", v5);
          v13 = objc_msgSend(v3, "objectForKey:", CFSTR("Website"));
          if (dword_1EE2B3F38)
          {
            LODWORD(v44) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v15 = v44;
            if (os_log_type_enabled(v14, type[0]))
              v16 = v15;
            else
              v16 = v15 & 0xFFFFFFFE;
            if (v16)
            {
              *(_DWORD *)v50 = 136316162;
              *(_QWORD *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
              *(_WORD *)&v50[12] = 2114;
              *(_QWORD *)&v50[14] = v4;
              *(_WORD *)&v50[22] = 2114;
              v51 = (void *)v10;
              *(_WORD *)v52 = 2114;
              *(_QWORD *)&v52[2] = v5;
              v53 = 1024;
              v54 = v41;
              LODWORD(v36) = 48;
              v35 = v50;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v0 = v37;
            p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___APSubjectMonitor + 24);
          }
          v21 = objc_alloc((Class)getSTAttributedEntityClass());
          if (v13)
            v22 = (void *)objc_msgSend(v21, "initWithExecutableIdentity:website:", v12, v13);
          else
            v22 = (void *)objc_msgSend(v21, "initWithExecutableIdentity:", v12);
          v17 = (void *)objc_msgSend(objc_alloc((Class)getSTActivityAttributionClass()), "initWithAttributedEntity:activeEntity:", v22, v40);
          if (v17)
            goto LABEL_48;
          goto LABEL_40;
        }
      }
      else
      {
        v40 = 0;
        v10 = 0;
        if (v5)
          goto LABEL_16;
      }
      if (dword_1EE2B3F38)
      {
        LODWORD(v44) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v19 = v44;
        if (os_log_type_enabled(v18, type[0]))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if (v20)
        {
          *(_DWORD *)v50 = 136315650;
          *(_QWORD *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
          *(_WORD *)&v50[12] = 2114;
          *(_QWORD *)&v50[14] = v4;
          *(_WORD *)&v50[22] = 2114;
          v51 = (void *)v10;
          LODWORD(v36) = 32;
          v35 = v50;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v22 = (void *)objc_msgSend(objc_alloc((Class)getSTAttributedEntityClass()), "initWithExecutablePath:", v10);
      v17 = (void *)objc_msgSend(objc_alloc((Class)getSTActivityAttributionClass()), "initWithAttributedEntity:", v22);
      v12 = 0;
      if (v17)
        goto LABEL_48;
LABEL_40:
      if (dword_1EE2B3F38)
      {
        LODWORD(v44) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v24 = v44;
        if (os_log_type_enabled(v23, type[0]))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if (v25)
        {
          *(_DWORD *)v50 = 136315394;
          *(_QWORD *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
          *(_WORD *)&v50[12] = 1024;
          *(_DWORD *)&v50[14] = v41;
          LODWORD(v36) = 18;
          v35 = v50;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = (void *)objc_msgSend(objc_alloc((Class)getSTActivityAttributionClass()), "initWithPID:", v41);
LABEL_48:

LABEL_49:
      if (v42)
      {
        -[__objc2_meth_list addObject:](p_inst_meths[215], "addObject:", v17);
      }
      else
      {
        objc_msgSend((id)objc_msgSend(v3, "objectForKey:", CFSTR("MininumMicrophoneIndicatorLightOnTime")), "doubleValue");
        v27 = v26;
        *(_QWORD *)&v58 = 0;
        *((_QWORD *)&v58 + 1) = &v58;
        *(_QWORD *)&v59 = 0x3052000000;
        *((_QWORD *)&v59 + 1) = __Block_byref_object_copy__5;
        v60 = __Block_byref_object_dispose__5;
        v28 = (objc_class *)getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass;
        v61 = getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass;
        if (!getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass)
        {
          *(_QWORD *)v50 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v50[8] = 3221225472;
          *(_QWORD *)&v50[16] = __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke;
          v51 = &unk_1E3099018;
          *(_QWORD *)v52 = &v58;
          __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke((uint64_t)v50);
          v28 = *(objc_class **)(*((_QWORD *)&v58 + 1) + 40);
        }
        _Block_object_dispose(&v58, 8);
        v29 = (void *)objc_msgSend([v28 alloc], "initWithActivityAttribution:maximumHistoryAccessed:", v17, v27);
        objc_msgSend((id)sRecordingClientsInfo, "addObject:", v29);

      }
    }
    v39 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    if (v39)
      continue;
    break;
  }
LABEL_56:
  v30 = objc_msgSend((id)sRecordingClientsInfo, "copy", v35, v36);
  v31 = -[__objc2_meth_list copy](p_inst_meths[215], "copy");
  objc_msgSend((id)sRecordingClientsInfo, "removeAllObjects");
  -[__objc2_meth_list removeAllObjects](p_inst_meths[215], "removeAllObjects");

  MEMORY[0x1940352C8](sSystemStatusMutex);
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __MX_SystemStatus_PublishRecordingClientsInfo_block_invoke;
  v43[3] = &unk_1E309CCF0;
  v43[4] = v30;
  v43[5] = v31;
  MXDispatchAsync((uint64_t)"MX_SystemStatus_PublishRecordingClientsInfo", (uint64_t)"MX_SystemStatus.m", 279, 0, 0, gSerializationQueue, (uint64_t)v43);
}

void sub_19362FE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void cmsmApplicationStateChangedNotificationCallback(int a1, int a2, CFTypeRef cf)
{
  NSObject *v6;
  _QWORD v7[5];
  int v8;
  int v9;

  if (cf)
    CFRetain(cf);
  v6 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __cmsmApplicationStateChangedNotificationCallback_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v8 = a1;
  v9 = a2;
  v7[4] = cf;
  MXDispatchAsyncAndWait((uint64_t)"cmsmApplicationStateChangedNotificationCallback", (uint64_t)"CMSessionManager.m", 16985, 0, 0, v6, (uint64_t)v7);
}

void CMSMNotificationUtility_PostSessionAudioCategoryDidChange(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = a1;
  v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioCategoryDidChange_block_invoke;
  v4[3] = &unk_1E3099900;
  v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioCategoryDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 76, 0, 0, v3, (uint64_t)v4);
}

void CMSessionMgrCopyDisplayIdentifierToSession(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = a1;
  v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSessionMgrCopyDisplayIdentifierToSession_block_invoke;
  v4[3] = &unk_1E3099900;
  v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSessionMgrCopyDisplayIdentifierToSession", (uint64_t)"CMSessionManager.m", 6638, 0, 0, v3, (uint64_t)v4);
}

BOOL CMSUtility_IsAnExtension(void *a1)
{
  const void *v1;
  int v2;

  v1 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
  v2 = FigCFEqual();
  if (v1)
    CFRelease(v1);
  return v2 == 0;
}

uint64_t getSTAttributedEntityClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__5;
  v7 = __Block_byref_object_dispose__5;
  v0 = getSTAttributedEntityClass_softClass;
  v8 = getSTAttributedEntityClass_softClass;
  if (!getSTAttributedEntityClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTAttributedEntityClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getSTAttributedEntityClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1936300E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscovererRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  result = remoteXPCRouteDiscoverer_GetObjectID(a1, &v2);
  if (!(_DWORD)result)
    return FigXPCSendStdSetPropertyMessage();
  return result;
}

uint64_t FigRouteDiscovererRemoteXPC_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (!a4)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("availableRoutes"), a2))
  {
    result = remoteXPCRouteDiscoverer_CopyAvailableEndpoints(a1, &v7);
  }
  else
  {
    result = remoteXPCRouteDiscoverer_GetObjectID(a1, &v8);
    if (!(_DWORD)result)
      result = FigXPCSendStdCopyPropertyMessage();
  }
  *a4 = v7;
  return result;
}

uint64_t remoteXPCRouteDiscoverer_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t cmsSetDefaultBuiltInRoute(void *a1, const void *a2, void *a3)
{
  id CustomizedCategory;
  uint64_t v7;
  uint64_t v9;
  _BOOL8 v10;

  if (!objc_msgSend(a1, "allowsDefaultBuiltInRouteCustomization"))
    return 4294954315;
  objc_msgSend(a1, "setDefaultBuiltInRoutePreference:", a2);
  objc_msgSend(a1, "setDefaultBuiltInRoutePreferenceSetByClient:", 1);
  if (a2)
  {
    if (!CFEqual(a2, CFSTR("Speaker")) && !CFEqual(a2, CFSTR("Receiver")))
      return 4294954315;
  }
  CustomizedCategory = CMSUtility_GetCustomizedCategory(a1);
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
    return 0;
  v9 = objc_msgSend(a1, "interruptionStyle");
  if (objc_msgSend(a1, "interruptionStyleSetByClient"))
    v10 = objc_msgSend(a3, "objectForKey:", CFSTR("InterruptionStyle")) == 0;
  else
    v10 = 0;
  -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", v10);
  v7 = cmsSetAudioCategory(a1, CustomizedCategory, 0, a3);
  -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", 0);
  if (v10)
    objc_msgSend(a1, "setInterruptionStyleAtClientRequest:", v9);
  return v7;
}

void cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, const void *a4, __CFDictionary **a5)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v11;
  const __CFArray *v12;
  CFTypeID v13;
  CFIndex Count;
  const __CFNumber *ValueAtIndex;
  int ConnectionTypeForPort;
  int v17;
  const __CFNumber *v18;
  int v19;
  int v20;
  int v21;
  const void *v22;
  const void *v23;
  __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  AudioObjectID v29;
  id obj;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  AudioObjectID valuePtr;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a5)
    *a5 = 0;
  if (a1)
  {
    VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
    VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
    v11 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, a4, 0, 0x1E30A4C28);
    v12 = v11;
    if (!v11)
      goto LABEL_13;
    v13 = CFGetTypeID(v11);
    if (v13 != CFArrayGetTypeID())
      goto LABEL_13;
    Count = CFArrayGetCount(v12);
    if (Count != 1 && (Count < 2 || !CMSMVAUtility_IsBluetoothSharingSessionEnabled(v12)))
      goto LABEL_13;
    valuePtr = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    ConnectionTypeForPort = vaeGetConnectionTypeForPort(valuePtr);
    if (ConnectionTypeForPort == 1885544823
      || (v17 = ConnectionTypeForPort, vaeIsQuiesceableWiredPort(valuePtr)))
    {
LABEL_11:
      v31 = 0;
      v18 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v31);
      v19 = v31;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
    }
    else
    {
      if (v17 == 1885561449)
      {
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        obj = cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a4);
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        if (v25)
        {
          v26 = v25;
          v27 = *(_QWORD *)v33;
          while (2)
          {
            v28 = 0;
            do
            {
              if (*(_QWORD *)v33 != v27)
                objc_enumerationMutation(obj);
              v29 = valuePtr;
              if (v29 == objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * v28), "unsignedIntValue"))
              {

                goto LABEL_11;
              }
              ++v28;
            }
            while (v26 != v28);
            v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
            if (v26)
              continue;
            break;
          }
        }

      }
      v19 = 0;
      v20 = VADCategoryFromFigCategoryName;
      v21 = VADModeFromFigModeName;
      v22 = a3;
      v23 = a4;
    }
    v24 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(v19, v20, v21, v22, v23);
    if (!v24)
LABEL_13:
      v24 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(0, VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, a4);
    if (a5)
    {
      *a5 = v24;
      v24 = 0;
    }
    if (v12)
      CFRelease(v12);
    if (v24)
      CFRelease(v24);
  }
}

id cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3)
{
  __CFDictionary *RouteConfigurationDictionary;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  id outData;

  outData = 0;
  inAddress.mElement = 0;
  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"cribptuo";
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  if (!AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData))objc_msgSend(outData, "count");

  return outData;
}

uint64_t vaeIsQuiesceableWiredPort(AudioObjectID a1)
{
  NSObject *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  os_log_type_t v8[4];
  int outData;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled())
    return 0;
  if (!a1)
  {
    inAddress.mSelector = 0;
    v8[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_7;
  }
  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"rwqpbolg";
  ioDataSize = 4;
  *(_DWORD *)v8 = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  if (*(_DWORD *)v8)
  {
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
LABEL_7:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

__CFDictionary *FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, const __CFAllocator *, void **);
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  __CFString **v12;
  CFNumberRef v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  id v16;
  void *v17;
  __CFArray *v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int v29;
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *);
  __CFString **v32;
  const void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *);
  CFNumberRef v36;
  __CFArray *v37;
  id v38;
  uint64_t v39;
  CFNumberRef v40;
  uint64_t v41;
  void (*v42)(uint64_t, __CFString *, const __CFAllocator *, __int128 *);
  CFNumberRef v43;
  const void *v44;
  CFNumberRef v45;
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *);
  CFNumberRef v48;
  const void *v49;
  OpaqueFigEndpoint *v50;
  OpaqueFigEndpoint *v51;
  uint64_t v52;
  void (*v53)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFNumber *v54;
  unsigned int PortFromCFNumber;
  CFTypeRef v56;
  const void *v57;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v59;
  unsigned int v60;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef cf;
  void *value;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  CFTypeRef v69;
  os_log_type_t type[8];
  CFTypeRef v71;
  __int128 valuePtr;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  CFNumberRef number[18];

  number[16] = *(CFNumberRef *)MEMORY[0x1E0C80C00];
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!a1)
      return Mutable;
    value = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA4348], v4, &value);
      if (value)
      {
        CFDictionarySetValue(Mutable, CFSTR("RouteName"), value);
        CFRelease(value);
        value = 0;
      }
    }
    cf = 0;
    v8 = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v9)
      v9(v8, *MEMORY[0x1E0CA4258], v4, &cf);
    if (cf)
    {
      CFDictionarySetValue(Mutable, CFSTR("RouteUID"), cf);
      CFRelease(cf);
      cf = 0;
    }
    v63 = 0;
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v11)
      v11(v10, *MEMORY[0x1E0CA4310], v4, &v63);
    if (v63)
    {
      CFDictionarySetValue(Mutable, CFSTR("MACAddress"), v63);
      CFRelease(v63);
      v63 = 0;
    }
    v12 = kFigRoutingContextCreateOption_ContextType;
    if (!Mutable)
    {
      v21 = CFSTR("VAE_PortType");
LABEL_118:
      v62 = 0;
      v52 = FigEndpointGetCMBaseObject();
      v53 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v53)
      {
        v53(v52, v21, v4, &v62);
        v54 = (const __CFNumber *)v62;
      }
      else
      {
        v54 = 0;
      }
      PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v54);
      if (v62)
      {
        CFRelease(v62);
        v62 = 0;
      }
      if (PortFromCFNumber == 1885433964)
      {
        v56 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (v56)
        {
          v57 = v56;
          figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor((uint64_t)v56, Mutable);
          CFRelease(v57);
        }
        else
        {
          LODWORD(v71) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v59 = v71;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
            v60 = v59;
          else
            v60 = v59 & 0xFFFFFFFE;
          if (v60)
          {
            LODWORD(valuePtr) = 136315138;
            *(_QWORD *)((char *)&valuePtr + 4) = "figEndpointDescriptorUtility_addAirPlayDetailsForLowLatencyRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      return Mutable;
    }
    v13 = (CFNumberRef)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("RouteSupportsAudio"), (const void *)*MEMORY[0x1E0C9AE50]);
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACF88, Mutable, CFSTR("AudioRouteName"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA42E8], Mutable, CFSTR("IsWHAGroupable"));
    v71 = 0;
    v14 = FigEndpointGetCMBaseObject();
    v15 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v15)
    {
      v15(v14, CFSTR("VAE_PortID"), v4, &v71);
      if (v71)
      {
        CFDictionarySetValue(Mutable, CFSTR("PortNumber"), v71);
        CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)v71);
        if (v71)
        {
          CFRelease(v71);
          v71 = 0;
        }
      }
    }
    v69 = 0;
    *(_QWORD *)type = 0;
    v67 = 0;
    v68 = 0;
    if ((_DWORD)a2)
    {
      v16 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a2);
      MXCoreSessionCopyProperty(v16, CFSTR("AudioCategory"), v4, type);
      MXCoreSessionCopyProperty(v16, CFSTR("AudioMode"), v4, &v69);
      MXCoreSessionCopyProperty(v16, CFSTR("AllowedRouteTypes"), v4, &v68);
      MXCoreSessionCopyProperty(v16, CFSTR("ActivationContext"), v4, &v67);

      v17 = (void *)v68;
      if (v68)
        goto LABEL_21;
    }
    else
    {
      *(_QWORD *)type = CMSMUtility_CopyNonNullCurrentlyActiveCategory();
      v69 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
      v17 = (void *)CMSMUtility_CopyCurrentAllowedPortTypes();
      v68 = v17;
      if (v17)
      {
LABEL_21:
        v66 = 0;
        cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(*(NSDictionary **)type, (uint64_t)v69, v67, v17, (__CFDictionary **)&v66);
        v18 = 0;
        v19 = (id)v66;
        if (!v66)
          goto LABEL_40;
        goto LABEL_38;
      }
    }
    v18 = cmsmCopyPickableRoutesForRouteConfiguration(*(uint64_t *)type, (uint64_t)v69, (void *)v67, v17);
    v66 = 0;
    valuePtr = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v22 = -[__CFArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &valuePtr, number, 16);
    if (!v22)
      goto LABEL_40;
    v23 = v22;
    v24 = *(_QWORD *)v73;
LABEL_30:
    v25 = 0;
    while (1)
    {
      if (*(_QWORD *)v73 != v24)
        objc_enumerationMutation(v18);
      v26 = *(void **)(*((_QWORD *)&valuePtr + 1) + 8 * v25);
      if (objc_msgSend((id)objc_msgSend(v26, "objectForKey:", CFSTR("RouteCurrentlyPicked")), "BOOLValue"))break;
      if (v23 == ++v25)
      {
        v23 = -[__CFArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &valuePtr, number, 16);
        if (v23)
          goto LABEL_30;
        v12 = kFigRoutingContextCreateOption_ContextType;
        goto LABEL_40;
      }
    }
    v19 = v26;
    v66 = v19;
    v12 = kFigRoutingContextCreateOption_ContextType;
    if (!v19)
      goto LABEL_40;
LABEL_38:
    if (objc_msgSend((id)objc_msgSend(v19, "objectForKey:", CFSTR("RouteUID")), "isEqualToString:", -[__CFDictionary objectForKey:](Mutable, "objectForKey:", CFSTR("RouteUID"))))CFDictionarySetValue(Mutable, CFSTR("RouteCurrentlyPicked"), v13);
LABEL_40:
    if (v18)
      CFRelease(v18);
    if (v66)
    {
      CFRelease(v66);
      v66 = 0;
    }
    if (*(_QWORD *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(_QWORD *)type = 0;
    }
    if (v69)
    {
      CFRelease(v69);
      v69 = 0;
    }
    if (v68)
    {
      CFRelease(v68);
      v68 = 0;
    }
    if (v67)
      CFRelease(v67);
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACDE8, Mutable, CFSTR("RouteSubtype"));
    v71 = 0;
    v21 = v12[281];
    v27 = FigEndpointGetCMBaseObject();
    v28 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v28)
      v28(v27, v21, v4, &v71);
    v29 = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)v71);
    if (v71)
    {
      CFRelease(v71);
      v71 = 0;
    }
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30AD0A8, Mutable, CFSTR("SupportsSharePlay"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACD48, Mutable, CFSTR("SoftwareVolumeEnabled"));
    if (v29 != 1885892674 && v29 != 1886152047 && v29 != 1885892706)
    {
      v33 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("IsBTRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
      CFDictionarySetValue(Mutable, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"), v33);
      if (v29 == 1885565807)
      {
        CFDictionarySetValue(Mutable, CFSTR("IsContinuityScreenOutput"), v13);
        figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30AD0C8, Mutable, CFSTR("RouteModel"));
      }
      else if (v29 == 1886614639)
      {
        CFDictionarySetValue(Mutable, CFSTR("PreferredExternalRouteDetails_IsActive"), v13);
        CFDictionarySetValue(Mutable, CFSTR("IsPreferredExternalRoute"), v13);
      }
      goto LABEL_118;
    }
    CFDictionarySetValue(Mutable, CFSTR("IsBTRoute"), v13);
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACD68, Mutable, CFSTR("BTDetails_PartnerRoutePresent"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACD88, Mutable, CFSTR("BTDetails_PartnerRouteRoutable"));
    if (v29 == 1886152047)
      figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACDA8, Mutable, CFSTR("BTDetails_SiblingRoutePresent"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4270], Mutable, CFSTR("IsBluetoothShareable"));
    number[0] = 0;
    v30 = FigEndpointGetCMBaseObject();
    v31 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v31)
    {
      v31(v30, CFSTR("VAE_VAEndpointType"), v4, number);
      if (number[0])
      {
        *(_QWORD *)&valuePtr = 0;
        CFNumberGetValue(number[0], kCFNumberSInt64Type, &valuePtr);
        if ((int)valuePtr > 1701868399)
        {
          switch((_DWORD)valuePtr)
          {
            case 0x65707370:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_Speakers;
              goto LABEL_76;
            case 0x65707474:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_TTY;
              goto LABEL_76;
            case 0x65707668:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_Vehicle;
              goto LABEL_76;
          }
        }
        else
        {
          switch((_DWORD)valuePtr)
          {
            case 0x65706861:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_HearingAid;
              goto LABEL_76;
            case 0x65706870:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_Headphones;
              goto LABEL_76;
            case 0x65706F74:
              v32 = kFigEndpointDescriptor_BTDetails_EndpointType_Other;
LABEL_76:
              CFDictionarySetValue(Mutable, CFSTR("BTDetails_EndpointType"), *v32);
              if (number[0])
                CFRelease(number[0]);
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43E8], Mutable, CFSTR("BTDetails_SupportedListeningModes"));
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4308], Mutable, CFSTR("BTDetails_ListeningMode"));
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4418], Mutable, CFSTR("SupportsHeadTrackedSpatialAudio"));
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4240], Mutable, CFSTR("HeadTrackedSpatialAudioIsActive"));
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4100], Mutable, CFSTR("AllowsHeadTrackedSpatialAudio"));
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4248], Mutable, CFSTR("HeadTrackedSpatialAudioMode"));
              number[0] = 0;
              v34 = FigEndpointGetCMBaseObject();
              v35 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v35)
              {
                v35(v34, CFSTR("VAE_SupportsMultipleConnections"), v4, number);
                v36 = number[0];
              }
              else
              {
                v36 = 0;
              }
              if (v36 == v13)
              {
                CFDictionarySetValue(Mutable, CFSTR("IsPreferredExternalRoute"), v13);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACDC8, Mutable, CFSTR("BTDetails_IsBTManaged"));
                if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
                {
                  v37 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
                  v38 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
                  if (v38)
                  {
                    CFArrayAppendValue(v37, v38);
                    CFDictionarySetValue(Mutable, CFSTR("OtherDevicesConnected"), v37);
                  }
                  if (CMSM_GetFakeSharedAudioRouteAsPicked())
                    CFDictionarySetValue(Mutable, CFSTR("IsCurrentlyPickedOnPairedDevice"), v13);
                  if (v38)
                    CFRelease(v38);
                  if (v37)
                    CFRelease(v37);
                }
                v36 = number[0];
              }
              if (v36)
                CFRelease(v36);
              number[0] = 0;
              v39 = FigEndpointGetCMBaseObject();
              v40 = *(CFNumberRef *)(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v40)
              {
                ((void (*)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))v40)(v39, CFSTR("VAE_SupportsInEarDetection"), v4, number);
                v40 = number[0];
              }
              if (v40 == v13)
              {
                CFDictionarySetValue(Mutable, CFSTR("IsPreferredExternalRoute"), v13);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACFE8, Mutable, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"));
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30AD028, Mutable, CFSTR("PreferredExternalRouteDetails_InEarDetectEnabled"));
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30AD008, Mutable, CFSTR("PreferredExternalRouteDetails_IsActive"));
              }
              else
              {
                *(_QWORD *)&valuePtr = 0;
                v41 = FigEndpointGetCMBaseObject();
                v42 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v42)
                {
                  v42(v41, CFSTR("VAE_SupportsMultipleConnections"), v4, &valuePtr);
                  v43 = (CFNumberRef)valuePtr;
                }
                else
                {
                  v43 = 0;
                }
                if (v43 == v13)
                {
                  v44 = (const void *)*MEMORY[0x1E0C9AE40];
                  CFDictionarySetValue(Mutable, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"), (const void *)*MEMORY[0x1E0C9AE40]);
                  CFDictionarySetValue(Mutable, CFSTR("PreferredExternalRouteDetails_IsActive"), v44);
                  v43 = (CFNumberRef)valuePtr;
                }
                if (v43)
                  CFRelease(v43);
              }
              if (number[0])
                CFRelease(number[0]);
              if (v29 == 1885892706)
              {
                CFDictionarySetValue(Mutable, CFSTR("BTDetails_IsHFPRoute"), v13);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACFA8, Mutable, CFSTR("BTDetails_SupportsLiveListen"));
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACEA8, Mutable, CFSTR("BTDetails_IsAvailableForVoicePrompts"));
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30AD048, Mutable, CFSTR("BTDetails_SupportsStereoHFP"));
              }
              else if (v29 == 1885892674)
              {
                CFDictionarySetValue(Mutable, CFSTR("BTDetails_IsA2DPRoute"), v13);
                v45 = (CFNumberRef)*MEMORY[0x1E0C9AE40];
                number[0] = *(CFNumberRef *)MEMORY[0x1E0C9AE40];
                v46 = FigEndpointGetCMBaseObject();
                v47 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v47)
                {
                  v47(v46, CFSTR("VAE_SupportsDoAP"), v4, number);
                  v45 = number[0];
                }
                CFDictionarySetValue(Mutable, CFSTR("BTDetails_SupportsDoAP"), v45);
                v48 = number[0];
                if (number[0] == v13)
                {
                  figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1E30ACD28, Mutable, CFSTR("BTDetails_SupportsSoftwareVolume"));
                  v48 = number[0];
                }
                if (v48)
                  CFRelease(v48);
              }
              v49 = CFDictionaryGetValue(Mutable, CFSTR("RouteUID"));
              v50 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v49, 1, *MEMORY[0x1E0CA3A60], 0);
              if (v50)
              {
                v51 = v50;
                figEndpointDescriptorUtility_addBTDetailsToDescriptor((uint64_t)v50, Mutable);
                CFRelease(v51);
              }
              goto LABEL_118;
          }
        }
      }
    }
    v32 = kFigEndpointDescriptor_BTDetails_EndpointType_Unspecified;
    goto LABEL_76;
  }
  Mutable = -[MXEndpointDescriptorCache copyRouteDescriptorForEndpoint:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyRouteDescriptorForEndpoint:", a1);
  if (!Mutable)
  {
    if (dword_1EE2B3DE8)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return FigEndpointDescriptorUtility_CopyDescriptorForNonVirtualAudioEndpoint(a1);
  }
  return Mutable;
}

uint64_t FigRoutingManagerIsEndpointOfType(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
    v2(CMBaseObject, *MEMORY[0x1E0CA4468], *MEMORY[0x1E0C9AE00], &cf);
  v3 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t _VAEndpoint_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, const void **a4)
{
  unsigned int *DerivedStorage;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  const void *Float32;
  const void **v12;
  int IsPortWHAGroupable;
  int IsPortBluetoothShareable;
  unsigned int PortTypeFromPortID;
  id v17;
  const __CFString *v18;
  CFTypeRef v19;
  uint64_t v20;
  int HasVolumeControl;
  const void **v22;
  const void *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 valuePtr;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v8 = 4294950586;
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    v10 = *DerivedStorage;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
    {
LABEL_4:
      Float32 = vaeCopyDeviceIdentifierFromVADPort(v10);
LABEL_9:
      v8 = 0;
LABEL_10:
      *a4 = Float32;
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
    {
      v12 = (const void **)MEMORY[0x1E0CA4990];
LABEL_7:
      Float32 = *v12;
LABEL_8:
      Float32 = CFRetain(Float32);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    {
LABEL_13:
      v8 = 0;
      *a4 = 0;
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
    {
LABEL_15:
      Float32 = (const void *)vaeCopyNameForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
    {
      *(_QWORD *)&valuePtr = 2;
      Float32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E8]))
    {
      IsPortWHAGroupable = vaeIsPortWHAGroupable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4270]))
      goto LABEL_21;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4320]))
    {
      vaemGetDeviceVolume(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
      Float32 = (const void *)FigCFNumberCreateFloat32();
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4328]))
    {
LABEL_21:
      IsPortWHAGroupable = vaeIsPortBluetoothShareable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
    {
      IsPortBluetoothShareable = vaeIsPortBluetoothShareable(v10);
      LODWORD(valuePtr) = 0;
      if (vaeIsPortActiveForCurrentRouteConfiguration(v10))
      {
        if (vaeIsPortWHAGroupable(v10)
          || IsPortBluetoothShareable && CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
        {
          PortTypeFromPortID = vaeGetPortTypeFromPortID(v10);
          v17 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
          v18 = vaeCopyRouteSubtypeFromVADPort(v10);
          v19 = vaeCopyDeviceIdentifierFromVADPort(v10);
          v20 = getpid();
          v8 = MXSMPerformVolumeOperation(0xDu, CFSTR("Audio/Video"), v17, v19, v18, 0, v20, (float *)&valuePtr, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0);
          if (v19)
            CFRelease(v19);
          if (v18)
            CFRelease(v18);
          if (v17)
            CFRelease(v17);
        }
        else
        {
          v8 = 0;
          LODWORD(valuePtr) = vaemGetDeviceVolume(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
        }
      }
      else
      {
        v8 = 0;
      }
      Float32 = (const void *)FigCFNumberCreateFloat32();
      goto LABEL_10;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
    {
      Float32 = (const void *)FigCFNumberCreateUInt64();
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
    {
      HasVolumeControl = vaemCurrentRouteHasVolumeControl();
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]))
    {
      HasVolumeControl = vaemGetFullMute();
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4340]))
    {
      HasVolumeControl = vaemCurrentRouteHasMuteControl();
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("VAE_ActivateOptions")))
    {
      Float32 = (const void *)*((_QWORD *)v9 + 1);
      if (!Float32)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("VAE_PortID")))
    {
      v24 = v10;
LABEL_58:
      Float32 = MXCFNumberCreateFromSInt64(v24);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_RouteSubtype")))
    {
      Float32 = vaeCopyRouteSubtypeFromVADPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_DeviceIdentifier")))
      goto LABEL_4;
    if (CFEqual(a2, CFSTR("VAE_PortType")))
    {
      LODWORD(v24) = vaeGetPortTypeFromPortID(v10);
LABEL_64:
      v24 = v24;
      goto LABEL_58;
    }
    if (CFEqual(a2, CFSTR("VAE_SpecificPortName")))
    {
      Float32 = (const void *)vaeCopySpecificNameForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_HiddenSubPortDescriptions")))
    {
      Float32 = vaeCopyHiddenSubPortDescriptionsForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_PortName")))
      goto LABEL_15;
    if (CFEqual(a2, CFSTR("VAE_IsAvailableForVoicePrompts")))
    {
      IsPortWHAGroupable = vaeIsAvailableForVoicePrompts(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("VAE_IsHeadphones")))
    {
      IsPortWHAGroupable = vaeIsHeadphonesPort(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("VAE_IsRoutable")))
    {
      IsPortWHAGroupable = vaeIsPortRoutable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("VAE_VAEndpointType")))
    {
      LODWORD(v24) = vaeGetVADEndpointTypeForPort(v10);
      goto LABEL_64;
    }
    if (CFEqual(a2, CFSTR("VAE_VAConnectionType")))
    {
      LODWORD(v24) = vaeGetConnectionTypeForPort(v10);
      goto LABEL_64;
    }
    if (CFEqual(a2, CFSTR("VAE_IsInputEndpoint")))
    {
      IsPortWHAGroupable = vaeIsPortAnInputPort(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("VAE_FigInputDeviceName")))
    {
      v25 = vaeGetPortTypeFromPortID(v10);
      Float32 = CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(v25);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_FigOutputDeviceName")))
    {
      v26 = vaeGetPortTypeFromPortID(v10);
      Float32 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v26);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_SupportsLiveListen")))
    {
      IsPortWHAGroupable = vaeIsLiveListenSupportedOnVADPort(v10);
LABEL_22:
      v12 = (const void **)MEMORY[0x1E0C9AE40];
      if (IsPortWHAGroupable)
        v12 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_7;
    }
    if (CFEqual(a2, CFSTR("VAE_SupportsMultipleConnections")))
    {
      if ((_DWORD)v10
        && (*(_QWORD *)&valuePtr = 0x676C6F626F736163,
            DWORD2(valuePtr) = 0,
            AudioObjectHasProperty(v10, (const AudioObjectPropertyAddress *)&valuePtr)))
      {
        v22 = (const void **)MEMORY[0x1E0C9AE50];
      }
      else
      {
        v22 = (const void **)MEMORY[0x1E0C9AE40];
      }
LABEL_52:
      v23 = *v22;
      *a4 = *v22;
      CFRetain(v23);
      return 0;
    }
    if (CFEqual(a2, CFSTR("VAE_SupportsInEarDetection")))
    {
      HasVolumeControl = vaeDoesBTPortSupportInEarDetection(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("VAE_IsBTManaged")))
    {
      HasVolumeControl = MXBluetoothServices_IsPortBTManaged(v10, 1);
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("VAE_IsInEar")))
    {
      HasVolumeControl = vaeIsInEarStatusTrueForBTPort(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("VAE_InEarDetectEnabled")))
    {
      HasVolumeControl = vaeHasUserEnabledInEarDetectionForBTPort(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("VAE_RouteDescription")))
    {
      v27 = a1;
      v28 = 0;
LABEL_105:
      Float32 = vaeCreateRouteDescription(v27, v28);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAE_DefaultRouteDescription")))
    {
      v27 = a1;
      v28 = 1;
      goto LABEL_105;
    }
    if (CFEqual(a2, CFSTR("VAE_SupportsDoAP")))
    {
      HasVolumeControl = vaeDoesPortSupportDoAP(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E8]))
    {
      vaeGetSupportedBluetoothListeningModes(v10);
      goto LABEL_112;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4308]))
    {
      vaeGetBluetoothListeningMode(v10);
      goto LABEL_112;
    }
    if (CFEqual(a2, CFSTR("VAE_SupportsSoftwareVolume")) || CFEqual(a2, CFSTR("VAE_SoftwareVolumeEnabled")))
    {
      HasVolumeControl = vaeDoesPortSupportSoftwareVolume(v10);
    }
    else if (CFEqual(a2, CFSTR("VAE_PartnerRoutePresent")))
    {
      valuePtr = 0u;
      v30 = 0u;
      HasVolumeControl = vaeGetPartnersForPort(v10, &valuePtr);
    }
    else if (CFEqual(a2, CFSTR("VAE_PartnerRouteRoutable")))
    {
      HasVolumeControl = vaePartnerRouteRoutable(v10);
    }
    else if (CFEqual(a2, CFSTR("VAE_SiblingRoutePresent")))
    {
      valuePtr = 0u;
      v30 = 0u;
      HasVolumeControl = vaeGetSiblingsForPort(v10, &valuePtr);
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4418]))
    {
      DWORD2(valuePtr) = 0;
      *(_QWORD *)&valuePtr = *(_QWORD *)"nepsbolg";
      HasVolumeControl = AudioObjectHasProperty(v10, (const AudioObjectPropertyAddress *)&valuePtr);
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4240]))
    {
      HasVolumeControl = vaeIsHeadTrackedSpatialAudioActive(v10);
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4100]))
    {
      HasVolumeControl = vaeDoesPortAllowHeadTrackedSpatialAudio(v10);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("VAE_SupportsStereoHFP")))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4248]))
        {
          if (CFEqual(a2, CFSTR("VAE_SupportsSharePlay")))
          {
            HasVolumeControl = vaeDoesPortSupportSharePlay(v10);
          }
          else
          {
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4398]))
            {
              *(_QWORD *)&valuePtr = 0;
              FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&valuePtr);
              v8 = 0;
              *a4 = (const void *)valuePtr;
              return v8;
            }
            if (CFEqual(a2, CFSTR("SupportsConversationDetect")))
            {
              HasVolumeControl = vaeCopyIfBluetoothEndpointSupportsConversationDetect(v10);
            }
            else
            {
              if (!CFEqual(a2, CFSTR("ConversationDetectEnable")))
              {
                if (CFEqual(a2, CFSTR("VAE_ModelUID")))
                {
                  Float32 = vaeCopyModelUIDForPort(v10);
                  goto LABEL_9;
                }
                goto LABEL_13;
              }
              HasVolumeControl = vaeCopyIfBluetoothEndpointHasConversationDetectEnabled(v10);
            }
          }
          goto LABEL_50;
        }
        vaeGetBluetoothSpatialAudioMode(v10);
LABEL_112:
        Float32 = (const void *)FigCFNumberCreateSInt64();
        goto LABEL_9;
      }
      HasVolumeControl = vaeDoesPortSupportStereoHFP(v10);
    }
LABEL_50:
    v22 = (const void **)MEMORY[0x1E0C9AE50];
    if (!HasVolumeControl)
      v22 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_52;
  }
  return v8;
}

__CFDictionary *vaeCreateRouteDescription(uint64_t a1, int a2)
{
  int PortTypeFromPortID;
  CFTypeRef v4;
  OpaqueFigEndpoint *v5;
  OpaqueFigEndpoint *v6;
  const void **v7;
  const void **v8;
  __CFString *v9;
  const __CFAllocator *v10;
  __CFDictionary *MutableCopy;
  const void *v12;
  __CFDictionary *Mutable;
  const void *v14;
  const void *v15;
  CFStringRef v16;
  CFStringRef v17;
  unsigned int v18;
  id v19;
  __CFString **v20;
  _BOOL4 DoesPortSupportSoftwareVolume;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  __CFString *v26;
  __CFString *v27;
  const void *v28;
  const void *v29;
  __CFArray *v30;
  id v31;
  __CFDictionary *v32;
  const void *v33;
  int ConnectionTypeForPort;
  const void *v35;
  const void *v36;
  const void *v37;
  _BOOL4 DoesPortSupportStereoHFP;
  __CFString **v39;
  int DoesPortSupportDoAP;
  const void *v41;
  const void *v42;
  const void **v43;
  CFNumberRef v44;
  CFNumberRef v45;
  id v47;
  CFTypeRef cf;
  AudioObjectID valuePtr;
  __int128 inAddress;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  valuePtr = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
  v4 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
  v5 = cmsmCopyEndpointWithUID((uint64_t)v4, PortTypeFromPortID);
  v6 = v5;
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  v8 = (const void **)MEMORY[0x1E0C9AE40];
  if (PortTypeFromPortID == 1885433971)
  {
    *(_QWORD *)&inAddress = 0;
    FigRoutingManagerGetMirroringModeFromEndpoint((uint64_t)v5);
    if (FigCFEqual())
      v9 = CFSTR("MirroringMode_SecondScreen");
    else
      v9 = CFSTR("AirPlayAudioType_AirPlayScreen");
LABEL_7:
    cmsmCreateRouteDescriptionForFigAirPlayEndpoints((uint64_t)v6, (uint64_t)v9, (__CFDictionary **)&inAddress);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v12 = (const void *)inAddress;
    if (!(_QWORD)inAddress)
      goto LABEL_97;
LABEL_96:
    CFRelease(v12);
    goto LABEL_97;
  }
  if (PortTypeFromPortID == 1885433953)
  {
    *(_QWORD *)&inAddress = 0;
    v9 = CFSTR("AirPlayAudioType_AirPlay");
    goto LABEL_7;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MutableCopy = Mutable;
  if (!Mutable)
    goto LABEL_97;
  v14 = *v7;
  CFDictionarySetValue(Mutable, CFSTR("RouteSupportsAudio"), *v7);
  v15 = (const void *)vaeCopyNameForPort(valuePtr);
  if (v15)
    CFDictionarySetValue(MutableCopy, CFSTR("RouteName"), v15);
  cf = v15;
  if (v4)
    CFDictionarySetValue(MutableCopy, CFSTR("RouteUID"), v4);
  v16 = vaeCopyRouteSubtypeFromVADPort(valuePtr);
  if (v16)
  {
    v17 = v16;
    CFDictionarySetValue(MutableCopy, CFSTR("RouteSubtype"), v16);
    CFRelease(v17);
  }
  v18 = vaeGetPortTypeFromPortID(valuePtr);
  v19 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v18);
  if (v19)
    CFDictionarySetValue(MutableCopy, CFSTR("AVAudioRouteName"), v19);
  v47 = v19;
  if (a2)
  {
    v20 = kMXSessionPickableRouteType_Default;
  }
  else
  {
    ConnectionTypeForPort = vaeGetConnectionTypeForPort(valuePtr);
    switch(ConnectionTypeForPort)
    {
      case 1885566825:
        if (CMSMDeviceState_ItsAnAppleTV() || !vaeIsQuiesceableWiredPort(valuePtr))
          goto LABEL_22;
        v20 = kMXSessionPickableRouteType_Wired;
        break;
      case 1885561449:
        v20 = kMXSessionPickableRouteType_Override;
        break;
      case 1885544823:
        v20 = kMXSessionPickableRouteType_Wireless;
        break;
      default:
        goto LABEL_22;
    }
  }
  if (*v20)
    CFDictionarySetValue(MutableCopy, CFSTR("RouteType"), *v20);
LABEL_22:
  DoesPortSupportSoftwareVolume = vaeDoesPortSupportSoftwareVolume(valuePtr);
  v22 = (const void *)*MEMORY[0x1E0C9AE40];
  if (DoesPortSupportSoftwareVolume)
    v23 = v14;
  else
    v23 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(MutableCopy, CFSTR("SoftwareVolumeEnabled"), v23);
  if (PortTypeFromPortID == 1885892674 || PortTypeFromPortID == 1886152047 || PortTypeFromPortID == 1885892706)
  {
    CFDictionarySetValue(MutableCopy, CFSTR("IsBTRoute"), v14);
    inAddress = 0u;
    v51 = 0u;
    if (vaeGetPartnersForPort(valuePtr, &inAddress))
      v24 = v14;
    else
      v24 = v22;
    CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_PartnerRoutePresent"), v24);
    if (vaePartnerRouteRoutable(valuePtr))
      v25 = v14;
    else
      v25 = v22;
    CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_PartnerRouteRoutable"), v25);
    v26 = vaeCopyVADEndpointTypeForPort(valuePtr);
    if (v26)
    {
      v27 = v26;
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_EndpointType"), v26);
      CFRelease(v27);
    }
    if (PortTypeFromPortID == 1886152047)
    {
      inAddress = 0u;
      v51 = 0u;
      if (vaeGetSiblingsForPort(valuePtr, &inAddress))
        v28 = v14;
      else
        v28 = v22;
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_SiblingRoutePresent"), v28);
    }
    if (valuePtr)
    {
      *(_QWORD *)&inAddress = 0x676C6F626F736163;
      DWORD2(inAddress) = 0;
      if (AudioObjectHasProperty(valuePtr, (const AudioObjectPropertyAddress *)&inAddress))
      {
        CFDictionarySetValue(MutableCopy, CFSTR("IsPreferredExternalRoute"), v14);
        v29 = MXBluetoothServices_IsPortBTManaged(valuePtr, 1) ? v14 : v22;
        CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_IsBTManaged"), v29);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
        {
          v30 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
          v31 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
          if (v31)
          {
            CFArrayAppendValue(v30, v31);
            CFDictionarySetValue(MutableCopy, CFSTR("OtherDevicesConnected"), v30);
          }
          if (CMSM_GetFakeSharedAudioRouteAsPicked())
            CFDictionarySetValue(MutableCopy, CFSTR("IsCurrentlyPickedOnPairedDevice"), v14);
          if (v31)
            CFRelease(v31);
          v7 = (const void **)MEMORY[0x1E0C9AE50];
          if (v30)
            CFRelease(v30);
        }
      }
      if (!vaeDoesBTPortSupportInEarDetection(valuePtr))
      {
        *(_QWORD *)&inAddress = 0x676C6F626F736163;
        DWORD2(inAddress) = 0;
        if (!AudioObjectHasProperty(valuePtr, (const AudioObjectPropertyAddress *)&inAddress))
          goto LABEL_71;
        CFDictionarySetValue(MutableCopy, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"), v22);
        v32 = MutableCopy;
        v33 = v22;
        goto LABEL_70;
      }
    }
    else if (!vaeDoesBTPortSupportInEarDetection(0))
    {
      goto LABEL_71;
    }
    CFDictionarySetValue(MutableCopy, CFSTR("IsPreferredExternalRoute"), v14);
    CFDictionarySetValue(MutableCopy, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"), v14);
    if (vaeHasUserEnabledInEarDetectionForBTPort(valuePtr))
      v35 = v14;
    else
      v35 = v22;
    CFDictionarySetValue(MutableCopy, CFSTR("PreferredExternalRouteDetails_InEarDetectEnabled"), v35);
    if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr))
      v33 = v14;
    else
      v33 = v22;
    v32 = MutableCopy;
LABEL_70:
    CFDictionarySetValue(v32, CFSTR("PreferredExternalRouteDetails_IsActive"), v33);
LABEL_71:
    if (PortTypeFromPortID == 1885892674)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_IsA2DPRoute"), v14);
      DoesPortSupportDoAP = vaeDoesPortSupportDoAP(valuePtr);
      if (DoesPortSupportDoAP)
        v41 = v14;
      else
        v41 = v22;
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_SupportsDoAP"), v41);
      if (!DoesPortSupportDoAP)
        goto LABEL_89;
      DoesPortSupportStereoHFP = vaeDoesPortSupportSoftwareVolume(valuePtr);
      v39 = kMXSession_RouteDescriptionKey_BTDetails_SupportsSoftwareVolume;
    }
    else
    {
      if (PortTypeFromPortID != 1885892706)
      {
LABEL_89:
        cmsmAddBTDetailsFromBTEndpointToRouteDescription((uint64_t)v6, MutableCopy);
        goto LABEL_90;
      }
      if (vaeIsLiveListenSupportedOnVADPort(valuePtr))
        v36 = v14;
      else
        v36 = v22;
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_SupportsLiveListen"), v36);
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_IsHFPRoute"), v14);
      if (vaeIsAvailableForVoicePrompts(valuePtr))
        v37 = v14;
      else
        v37 = v22;
      CFDictionarySetValue(MutableCopy, CFSTR("BTDetails_IsAvailableForVoicePrompts"), v37);
      DoesPortSupportStereoHFP = vaeDoesPortSupportStereoHFP(valuePtr);
      v39 = kMXSession_RouteDescriptionKey_BTDetails_SupportsStereoHFP;
    }
    if (DoesPortSupportStereoHFP)
      v42 = v14;
    else
      v42 = v22;
    CFDictionarySetValue(MutableCopy, *v39, v42);
    goto LABEL_89;
  }
LABEL_90:
  if (FigCFEqual())
  {
    CFDictionarySetValue(MutableCopy, CFSTR("IsPreferredExternalRoute"), v14);
    CFDictionarySetValue(MutableCopy, CFSTR("PreferredExternalRouteDetails_IsActive"), v14);
  }
  if (cf)
    CFRelease(cf);
  v8 = (const void **)MEMORY[0x1E0C9AE40];
  if (v47)
  {
    v12 = v47;
    goto LABEL_96;
  }
LABEL_97:
  if (vaeDoesPortSupportSharePlay(valuePtr))
    v43 = v7;
  else
    v43 = v8;
  CFDictionarySetValue(MutableCopy, CFSTR("SupportsSharePlay"), *v43);
  v44 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  if (v44)
  {
    v45 = v44;
    CFDictionarySetValue(MutableCopy, CFSTR("PortNumber"), v44);
    CFRelease(v45);
  }
  if (v4)
    CFRelease(v4);
  if (v6)
    CFRelease(v6);
  return MutableCopy;
}

uint64_t vaeGetPortTypeFromPortID(uint64_t result)
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;

  outData = 0;
  if ((_DWORD)result)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6270747970;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
      return 0;
    else
      return outData;
  }
  return result;
}

uint64_t vaeCopyNameForPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  _QWORD outData[23];

  outData[22] = *MEMORY[0x1E0C80C00];
  outData[0] = 0;
  if (a1)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F62706E616DLL;
    inAddress.mElement = 0;
    ioDataSize = 8;
    if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
      return outData[0];
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

CFTypeRef vaeCopyDeviceIdentifierFromVADPort(AudioObjectID a1)
{
  OSStatus PropertyData;
  CFTypeRef result;
  int v3;
  UInt32 ioDataSize;
  CFTypeRef outData;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"diupbolg";
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  result = 0;
  if (!PropertyData)
  {
    result = outData;
    if (outData)
    {
      v3 = CFEqual(outData, &stru_1E30A1A48);
      result = outData;
      if (v3)
      {
        CFRelease(outData);
        return 0;
      }
    }
  }
  return result;
}

id CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(unsigned int a1)
{
  id v1;
  id v2;

  v1 = -[NSDictionary objectForKey:](-[MXSessionManager vadOutputPortTypeToFigOutputDeviceNameDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "vadOutputPortTypeToFigOutputDeviceNameDict"), "objectForKey:", a1);
  v2 = v1;
  if (v1)
    CFRetain(v1);
  return v2;
}

CFStringRef vaeCopyRouteSubtypeFromVADPort(AudioObjectID a1)
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;

  outData = 0;
  if (!a1)
    return 0;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270737562;
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData) || !outData)
    return 0;
  LOBYTE(inAddress.mSelector) = HIBYTE(outData);
  BYTE1(inAddress.mSelector) = BYTE2(outData);
  BYTE2(inAddress.mSelector) = BYTE1(outData);
  HIBYTE(inAddress.mSelector) = outData;
  LOBYTE(inAddress.mScope) = 0;
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&inAddress, 0);
}

BOOL vaeDoesPortSupportSoftwareVolume(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  int outData;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  ioDataSize = 4;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"newsbolg";
  inAddress.mElement = 0;
  if (!AudioObjectHasProperty(a1, &inAddress))
    goto LABEL_5;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_5:
    v3 = 0;
    return v3 != 0;
  }
  v3 = outData;
  return v3 != 0;
}

BOOL vaeDoesPortSupportSharePlay(AudioObjectID a1)
{
  uint64_t v2;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;

  v2 = 1;
  ioDataSize = 4;
  outData = 1;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270737073;
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(a1, &inAddress)
    && !AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    return outData != 0;
  }
  return v2;
}

OpaqueFigEndpoint *cmsmCopyEndpointWithUID(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;

  v2 = a1;
  if (a2 <= 1885892673)
  {
    if (a2 == 1885433953)
    {
      v3 = (uint64_t *)MEMORY[0x1E0CA3A58];
      goto LABEL_10;
    }
    if (a2 == 1885433971)
    {
      v4 = *MEMORY[0x1E0CA3A58];
      v5 = -[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID");
      a1 = v2;
      v6 = v4;
      return FigRoutingManagerCopyEndpointWithDeviceID(a1, 1, v6, (uint64_t)v5);
    }
  }
  else if (a2 == 1885892674 || a2 == 1885892706 || a2 == 1886152047)
  {
    v3 = (uint64_t *)MEMORY[0x1E0CA3A60];
LABEL_10:
    v6 = *v3;
    v5 = (NSString *)qword_1EE2B3CF0;
    return FigRoutingManagerCopyEndpointWithDeviceID(a1, 1, v6, (uint64_t)v5);
  }
  return 0;
}

void figEndpointDescriptorUtility_setDescriptorKey(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4)
{
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, uint64_t, _QWORD, void **);
  void *v9;
  void *value;

  if (a3)
  {
    value = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
    {
      v8(CMBaseObject, a2, *MEMORY[0x1E0C9AE00], &value);
      v9 = value;
      if (value && value != (void *)*MEMORY[0x1E0C9B0D0])
      {
        CFDictionarySetValue(a3, a4, value);
        v9 = value;
      }
      if (v9)
        CFRelease(v9);
    }
  }
}

CFNumberRef MXCFNumberCreateFromSInt64(uint64_t a1)
{
  uint64_t valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
}

CFMutableArrayRef cmsmCopyWirelessPortsArrayForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const void *v13;
  int PortTypeFromPortID;
  BOOL v15;
  const void *v16;
  AudioObjectID valuePtr;

  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  v7 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  if (!v7)
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = v7;
  Count = CFArrayGetCount(v7);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, i);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (vaeGetConnectionTypeForPort(valuePtr) == 1885544823)
      {
        v13 = (const void *)vaeCopyNameForPort(valuePtr);
        PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
        if (FigCFEqual())
          v15 = 1;
        else
          v15 = PortTypeFromPortID == 1885433975;
        if (!v15)
        {
          v16 = CFArrayGetValueAtIndex(v8, i);
          CFArrayAppendValue(Mutable, v16);
        }
        if (v13)
          CFRelease(v13);
      }
    }
  }
  CFRelease(v8);
  if (Mutable)
    CFArrayGetCount(Mutable);
  return Mutable;
}

uint64_t vaeGetConnectionTypeForPort(uint64_t result)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if ((_DWORD)result)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6270637470;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData;
    }
  }
  return result;
}

CFTypeRef vaemCopyConnectedPortsListForRouteConfiguration(int a1, int a2, const void *a3, int a4)
{
  AudioObjectPropertyScope v7;
  __CFDictionary *RouteConfigurationDictionary;
  OSStatus PropertyData;
  CFTypeRef result;
  CFTypeID v11;
  CFTypeID TypeID;
  CFTypeRef outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  if (a4 == 1)
    v7 = 1768845428;
  else
    v7 = 1869968496;
  inAddress.mSelector = 1668313699;
  inAddress.mScope = v7;
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (CMSMUtility_IsSharePlayCallSessionActive()
    || CMSMUtility_IsSharePlayMediaSessionActive())
  {
    RouteConfigurationDictionary = 0;
  }
  else
  {
    RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  }
  outData = 0;
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  if (PropertyData)
    return 0;
  result = outData;
  if (outData)
  {
    v11 = CFGetTypeID(outData);
    TypeID = CFArrayGetTypeID();
    result = outData;
    if (v11 != TypeID)
    {
      if (outData)
      {
        CFRelease(outData);
        return 0;
      }
    }
  }
  return result;
}

const __CFNumber *CMSMVAUtility_GetPortFromCFNumber(const __CFNumber *result)
{
  uint64_t valuePtr;

  if (result)
  {
    valuePtr = 0;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t MX_FeatureFlags_IsBulkCopyOfRouteDescriptorEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t vaeIsPortWHAGroupable(uint64_t a1)
{
  int PortTypeFromPortID;
  char CFPreferenceNumberWithDefault;
  uint64_t result;

  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (CMSMDeviceState_ItsAHomePod() && PortTypeFromPortID == 1886613611)
    return 1;
  result = 0;
  if (CFPreferenceNumberWithDefault && PortTypeFromPortID == 1886613611)
  {
    result = 1;
    if ((vaeIsPortWHAGroupable_didLog & 1) == 0)
      vaeIsPortWHAGroupable_didLog = 1;
  }
  return result;
}

NSString *CMSMUtility_CopyNonNullCurrentlyActiveMode()
{
  NSString *result;

  result = CMSMUtility_CopyCurrentlyActiveMode();
  if (!result)
    return (NSString *)CFRetain(CFSTR("Default"));
  return result;
}

NSString *CMSMUtility_CopyNonNullCurrentlyActiveCategory()
{
  NSString *result;

  result = CMSMUtility_CopyCurrentlyActiveCategory();
  if (!result)
    return (NSString *)CFRetain(CFSTR("Audio/Video"));
  return result;
}

CFTypeRef CMSMUtility_CopyCurrentAllowedPortTypes()
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EE2B3BF8;
  if (qword_1EE2B3BF8)
    return CFRetain((CFTypeRef)qword_1EE2B3BF8);
  return result;
}

uint64_t _MXSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  OS_dispatch_queue *v8;
  uint64_t UpTimeNanoseconds;
  int v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a1)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v8 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___MXSessionSetProperty_block_invoke;
      v13[3] = &unk_1E3099668;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"_MXSessionSetProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 381, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = objc_msgSend(a1, "_setPropertyForKey:value:", a2, a3);
      *((_DWORD *)v15 + 6) = v10;
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionSetProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
    }
    objc_autoreleasePoolPop(v7);
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_193633A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t vaemIsAC3EncodingSupported()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  vaemGetAC3IsSupported();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void cmsSetDeviceSampleRateAndBufferSize(void *a1, unsigned int a2, uint64_t a3, double a4, float a5)
{
  uint64_t CurrentVADIDForInput;
  uint64_t v11;
  int v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  const char *v17;
  __CFString *VADNameForVADID;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  void **v26;
  void *v27;
  double v28;
  char *v29;
  NSObject *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  _BOOL4 v38;
  __int16 v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  void *v43[4];
  void *v44[2];
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int *v50;
  __int16 v51;
  __CFString *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
    CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  else
    CurrentVADIDForInput = CMSUtility_GetCurrentOutputVADID(a1);
  v11 = CurrentVADIDForInput;
  v40 = -1;
  v41 = 0;
  vaemGetDeviceFormatID(CurrentVADIDForInput, a3, &v41);
  if (v12)
    v41 = 1819304813;
  if (dword_1EE2B3F38)
  {
    v42 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v14 = v42;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if (v15)
    {
      v16 = (void *)objc_msgSend(a1, "clientName");
      if ((_DWORD)a3 == 1)
        v17 = "input";
      else
        v17 = "output";
      VADNameForVADID = CMSMUtility_GetVADNameForVADID(v11);
      LODWORD(v43[0]) = 136317186;
      *(void **)((char *)v43 + 4) = "cmsSetDeviceSampleRateAndBufferSize";
      WORD2(v43[1]) = 2114;
      *(void **)((char *)&v43[1] + 6) = v16;
      HIWORD(v43[2]) = 2048;
      v43[3] = *(void **)&a4;
      LOWORD(v44[0]) = 1024;
      *(_DWORD *)((char *)v44 + 2) = a2;
      HIWORD(v44[0]) = 2048;
      *(double *)&v44[1] = a5;
      v45 = 2082;
      v46 = v17;
      v47 = 1042;
      v48 = 4;
      v49 = 2082;
      v50 = &v41;
      v51 = 2114;
      v52 = VADNameForVADID;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 == 0.0)
    a4 = 44100.0;
  if (a1)
  {
    v19 = objc_msgSend(a1, "hasInput");
    if (a4 >= 22050.0)
      v20 = 1;
    else
      v20 = v19;
    if (!v20)
      a4 = 22050.0;
    if ((_DWORD)a3 == 1)
      v21 = objc_msgSend(a1, "preferredNumberOfInputChannels");
    else
      v21 = objc_msgSend(a1, "preferredNumberOfOutputChannels");
    v22 = v21;
  }
  else
  {
    v22 = 0;
  }
  MEMORY[0x1940352BC](gCMSM);
  *(_OWORD *)v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v39 = 0;
  if (vaemVADGetAvailableStreamFormats((_BYTE *)&v39 + 1, &v39, (uint64_t)v43))
    a4 = 0.0;
  v23 = HIBYTE(v39) | v39;
  v24 = v23 != 0;
  if (v23)
  {
    if ((_DWORD)a3 == 1)
    {
      v25 = (int)v44[0];
      v26 = &v44[1];
      v27 = v44[1];
    }
    else if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)
           && CMSUtility_IsPlayingToSystemSoundRemoteVAD(a1))
    {
      v25 = (int)v43[2];
      v26 = &v43[3];
      v27 = v43[3];
    }
    else
    {
      v25 = (int)v43[0];
      v26 = &v43[1];
      v27 = v43[1];
    }
    v28 = vaemChooseBestSampleRateForFormat(v25, (uint64_t)v27, v41, v22, &v40, a4);
    if (v40 == -1)
      v29 = 0;
    else
      v29 = (char *)*v26;
    if (v28 == 0.0)
      a4 = 44100.0;
    else
      a4 = v28;
    MEMORY[0x1940352C8](gCMSM);
    if (v40 == -1 || vaemGetNumberOfStreams(a3) >= 2)
    {
      if (vaemSetSampleRateForDevice(v11))
      {
        v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v31 = &v29[56 * v40];
      *(double *)v31 = a4;
      v32 = *(_OWORD *)v31;
      v33 = *((_OWORD *)v31 + 1);
      v55 = *((_QWORD *)v31 + 4);
      v53 = v32;
      v54 = v33;
      if (!CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(v11, (uint64_t)&v53, a3)
        && vaemSetVirtualFormatForScope(v11, (uint64_t)&v29[56 * v40], a3))
      {
        goto LABEL_64;
      }
    }
    if (a1)
    {
      if (!(_DWORD)a3)
      {
        if (objc_msgSend(a1, "preferredNumberOfInputChannels"))
        {
          if (objc_msgSend(a1, "hasInput"))
          {
            MEMORY[0x1940352BC](gCMSM);
            v40 = -1;
            vaemGetDeviceFormatID(v11, 1, &v41);
            a4 = vaemChooseBestSampleRateForFormat((int)v44[0], (uint64_t)v44[1], v41, objc_msgSend(a1, "preferredNumberOfInputChannels"), &v40, a4);
            MEMORY[0x1940352C8](gCMSM);
            if (v40 != -1)
            {
              v34 = v44[1];
              if (v44[1])
              {
                v35 = (char *)v44[1] + 56 * v40;
                *(double *)v35 = a4;
                v36 = *(_OWORD *)v35;
                v37 = *((_OWORD *)v35 + 1);
                v55 = *((_QWORD *)v35 + 4);
                v53 = v36;
                v54 = v37;
                if (!CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(v11, (uint64_t)&v53, 1))
                {
                  if (vaemSetVirtualFormatForScope(v11, (uint64_t)v34 + 56 * v40, 1))
                    goto LABEL_64;
                }
              }
            }
          }
        }
      }
    }
  }
  if (a2)
  {
    if (!vaemSetDeviceBufferNumPCMFrames(a2))
      goto LABEL_62;
    v38 = 1;
  }
  else
  {
    v38 = a5 != 0.0;
  }
  vaemCalculateAndSetDeviceBufferDuration(0, v38, a5, a4);
LABEL_62:
  if (!v24)
    MEMORY[0x1940352C8](gCMSM);
LABEL_64:
  if (v43[1])
    free(v43[1]);
  if (v43[3])
    free(v43[3]);
  if (v44[1])
    free(v44[1]);
}

void vaemGetDeviceFormatID(AudioObjectID a1, int a2, _DWORD *a3)
{
  int v4;
  _OWORD v5[2];
  uint64_t v6;
  AudioObjectID outData;

  outData = 0;
  if (a3 && !vaemGetStream0(a1, a2, &outData) && outData)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    vaemGetStreamASBD(outData, (uint64_t)v5);
    if (!v4)
      *a3 = DWORD2(v5[0]);
  }
}

double vaemGetStreamASBD(AudioObjectID a1, uint64_t a2)
{
  double result;
  __int128 v4;
  UInt32 ioDataSize;
  __int128 outData;
  __int128 v7;
  uint64_t v8;
  AudioObjectPropertyAddress inAddress;

  v8 = 0;
  outData = 0u;
  v7 = 0u;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747073666D74;
  inAddress.mElement = 0;
  ioDataSize = 40;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    result = *(double *)&outData;
    v4 = v7;
    *(_OWORD *)a2 = outData;
    *(_OWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 32) = v8;
  }
  return result;
}

uint64_t vaemVADGetAvailableStreamFormats(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  BOOL v6;
  int v7;
  int v9;
  AudioObjectID CurrentVADIDForInput;
  uint64_t Stream0;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  AudioObjectID outData;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  outData = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if (vaemGetStream0(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0, &outData))v6 = 1;
  else
    v6 = outData == 0;
  if (!v6)
  {
    v7 = vaemCopySupportedStreamFormats(outData, 0, &v19, (unsigned int *)&v17 + 1);
    if (a2)
    {
      if (!v7)
        *a2 = 1;
    }
  }
  if (-[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID"))
  {
    if (!vaemGetStream0(-[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID"), 0, &outData)&& outData != 0)
    {
      v9 = vaemCopySupportedStreamFormats(outData, 0, &v18, (unsigned int *)&v17);
      if (a2)
      {
        if (!v9)
          *a2 = 1;
      }
    }
  }
  CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  Stream0 = vaemGetStream0(CurrentVADIDForInput, 1, &outData);
  if (!(_DWORD)Stream0)
  {
    if (outData)
    {
      v12 = vaemCopySupportedStreamFormats(outData, 1, &v16, &v15);
      Stream0 = v12;
      if (a1)
      {
        if (!(_DWORD)v12)
          *a1 = 1;
      }
    }
  }
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 40) = v16;
  *(_DWORD *)a3 = HIDWORD(v17);
  *(_DWORD *)(a3 + 16) = v17;
  *(_DWORD *)(a3 + 32) = v15;
  return Stream0;
}

uint64_t vaemGetAC3IsSupported()
{
  uint64_t result;
  AudioObjectID outData;

  outData = 0;
  if (vaemGetStream0(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0, &outData))return 0;
  result = outData;
  if (outData)
    return vaemStreamSupportsFormat(outData, 1667326771);
  return result;
}

uint64_t vaemGetStream0(AudioObjectID a1, int a2, _DWORD *outData)
{
  AudioObjectPropertyScope v4;
  uint64_t result;
  UInt32 v6;
  AudioObjectPropertyAddress inAddress;

  if (a2 == 1)
    v4 = 1768845428;
  else
    v4 = 1869968496;
  inAddress.mSelector = 1937009955;
  inAddress.mScope = v4;
  inAddress.mElement = 0;
  v6 = 4;
  *outData = 0;
  result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &v6, outData);
  if ((_DWORD)result)
    *outData = 0;
  return result;
}

uint64_t vaemGetCurrentVADIDForInput()
{
  unsigned int v0;
  MXSessionManager *v1;
  unsigned int v3;
  MXSessionManager *v4;

  v0 = -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID");
  v1 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  if (v0)
    return -[MXSessionManager decoupledInputVADID](v1, "decoupledInputVADID");
  v3 = -[MXSessionManager speechDetectionVADID](v1, "speechDetectionVADID");
  v4 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  if (v3)
    return -[MXSessionManager speechDetectionVADID](v4, "speechDetectionVADID");
  else
    return -[MXSessionManager defaultVADID](v4, "defaultVADID");
}

BOOL vaemIsMATAtmosEnabled()
{
  BOOL v0;
  _BOOL8 result;
  int v2;
  AudioObjectID outData;

  outData = 0;
  if (vaemGetStream0(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0, &outData))v0 = 1;
  else
    v0 = outData == 0;
  result = 0;
  if (!v0)
  {
    v2 = vaemStreamSupportsFormat(outData, 1836344107);
    if (v2 || vaemStreamSupportsFormat(outData, 1836343851))
      return 1;
  }
  return result;
}

uint64_t vaemStreamSupportsFormat(AudioObjectID a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  void *v8;

  v8 = 0;
  v7 = 0;
  if (vaemCopySupportedStreamFormats(a1, 0, &v8, &v7))
  {
    v5 = 0;
    v3 = v8;
  }
  else
  {
    v3 = v8;
    if (v7)
    {
      v4 = 0;
      while (*(_DWORD *)((char *)v8 + v4 + 8) != a2)
      {
        v4 += 56;
        if (56 * v7 == v4)
          goto LABEL_6;
      }
      v5 = 1;
    }
    else
    {
LABEL_6:
      v5 = 0;
    }
  }
  free(v3);
  return v5;
}

uint64_t vaemCopySupportedStreamFormats(AudioObjectID a1, int a2, _QWORD *a3, unsigned int *a4)
{
  int v7;
  uint64_t PropertyDataSize;
  void *v9;
  uint64_t PropertyData;
  size_t size;
  int v13;
  int v14;

  if (a2 == 1)
    v7 = 1768845428;
  else
    v7 = 1869968496;
  size = 0x73666D6100000000;
  v13 = v7;
  v14 = 0;
  PropertyDataSize = AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size);
  if ((_DWORD)PropertyDataSize)
  {
    PropertyData = PropertyDataSize;
    goto LABEL_8;
  }
  if (!(_DWORD)size)
  {
    PropertyData = 0;
    goto LABEL_8;
  }
  v9 = malloc_type_calloc(1uLL, size, 0xD1044792uLL);
  PropertyData = AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size, v9);
  if (!(_DWORD)PropertyData)
  {
    *a4 = size / 0x38;
    *a3 = v9;
LABEL_8:
    v9 = 0;
  }
  free(v9);
  return PropertyData;
}

double vaemChooseBestSampleRateForFormat(int a1, uint64_t a2, int a3, int a4, _DWORD *a5, double a6)
{
  double v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  double v20;
  int v22;
  int v23;
  int v25;
  int v26;
  int v28;
  int v29;
  int v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v7 = 0.0;
  if (!a2 || !a1)
    goto LABEL_71;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (int *)(a2 + 28);
  v13 = 0.0;
  v7 = 1.0e12;
  v14 = 0.0;
  v15 = 0xFFFFFFFFLL;
  v16 = 0xFFFFFFFFLL;
  v17 = 0xFFFFFFFFLL;
  do
  {
    if (*(v12 - 5) != a3)
      goto LABEL_55;
    v18 = *(double *)(v12 + 3);
    v19 = v18 > a6;
    if (v18 <= a6)
    {
      v20 = *(double *)(v12 + 5);
      if (v19 || v20 < a6)
      {
        if (v14 > v20)
          goto LABEL_55;
        if (v15 == 0xFFFFFFFFLL)
        {
          v9 = 1;
          if (a4)
            v15 = v8;
          goto LABEL_47;
        }
        if (a4)
        {
          v28 = *(_DWORD *)(a2 + 56 * v15 + 28);
          v29 = *v12;
          if (v28 < a4 || v29 < a4)
          {
            if (v29 >= v28)
              goto LABEL_45;
          }
          else
          {
            if (v29 > v28)
              goto LABEL_46;
LABEL_45:
            v15 = v8;
          }
        }
LABEL_46:
        v9 = 1;
LABEL_47:
        v14 = *(double *)(v12 + 5);
        goto LABEL_55;
      }
      if (!a4)
        goto LABEL_62;
      if (v17 != 0xFFFFFFFFLL)
      {
        v22 = *(_DWORD *)(a2 + 56 * v17 + 28);
        v23 = *v12;
        if (v22 < a4 || v23 < a4)
        {
          if (v23 < v22)
            goto LABEL_50;
        }
        else if (v23 > v22)
        {
LABEL_50:
          v11 = 1;
          v13 = a6;
          goto LABEL_55;
        }
      }
      v17 = v8;
      goto LABEL_50;
    }
    if (v7 < v18)
      goto LABEL_55;
    if (v16 == 0xFFFFFFFFLL)
    {
      v10 = 1;
      if (a4)
        v16 = v8;
      goto LABEL_54;
    }
    if (a4)
    {
      v25 = *(_DWORD *)(a2 + 56 * v16 + 28);
      v26 = *v12;
      if (v25 < a4 || v26 < a4)
      {
        if (v26 < v25)
          goto LABEL_53;
LABEL_52:
        v16 = v8;
        goto LABEL_53;
      }
      if (v26 <= v25)
        goto LABEL_52;
    }
LABEL_53:
    v10 = 1;
LABEL_54:
    v7 = *(double *)(v12 + 3);
LABEL_55:
    ++v8;
    v12 += 14;
  }
  while (a1 != v8);
  if (v11)
  {
    if (!a5 || (v31 = v17, v7 = a6, v17 == 0xFFFFFFFFLL))
    {
LABEL_62:
      v7 = a6;
      goto LABEL_71;
    }
LABEL_70:
    *a5 = v31;
  }
  else if (v10)
  {
    if (a5)
    {
      v31 = v16;
      if (v16 != 0xFFFFFFFFLL)
        goto LABEL_70;
    }
  }
  else if (v9)
  {
    if (a5)
    {
      v31 = v15;
      v7 = v14;
      if (v15 != 0xFFFFFFFFLL)
        goto LABEL_70;
    }
    v7 = v14;
  }
  else
  {
    v7 = v13;
  }
LABEL_71:
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7;
}

uint64_t vaemSetSampleRateForDevice(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CMSMVAUtility_AudioObjectSetPropertyData())
  {
    if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID") == (_DWORD)a1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = CMSMVAUtility_AudioObjectSetPropertyData();
    if ((_DWORD)v3
      && -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID") == (_DWORD)a1)
    {
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v3 = 0;
  }
  -[MXSessionManager updateDeviceSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v6, v7), "updateDeviceSampleRate:", a1);
  return v3;
}

uint64_t vaemSetDeviceBufferNumPCMFrames(unsigned int a1)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = a1;
  v6 = 0;
  vaemGetDeviceBufferNumPCMFramesRange(&v7, &v6);
  if (!v2)
  {
    if (v7 > v1)
    {
      v8 = v7;
      v1 = v7;
    }
    if (v1 > v6)
    {
      v8 = v6;
      v1 = v6;
    }
  }
  if (vaemBufferFrameSizeShouldBeRestricted()
    && (v1 & 0x1F) != 0
    && (v1 % 0x18 ? (v3 = v1 % 0x1E == 0) : (v3 = 1), !v3))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954315;
  }
  else
  {
    v9 = 0x6F7574706673697ALL;
    v10 = 0;
    -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
    CMSMVAUtility_AudioObjectSetPropertyData();
    result = 0;
    byte_1EE2B2C25 = 0;
  }
  return result;
}

uint64_t vaemBufferFrameSizeShouldBeRestricted()
{
  OSStatus PropertyData;
  unsigned __int8 v1;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;

  outData = 1;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747062667372;
  inAddress.mElement = 0;
  ioDataSize = 4;
  PropertyData = AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
  v1 = outData;
  if (PropertyData)
    return 1;
  return v1;
}

double vaemGetDeviceBufferNumPCMFramesRange(_DWORD *a1, _DWORD *a2)
{
  double result;
  double v5;
  double outData;
  double v7;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  outData = 0.0;
  v7 = 0.0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747066737A23;
  inAddress.mElement = 0;
  ioDataSize = 16;
  if (!AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData))
  {
    result = outData;
    v5 = v7;
    *a1 = (int)outData;
    *a2 = (int)v5;
  }
  return result;
}

uint64_t CMSMDeviceState_ScreenIsBlanked()
{
  BOOL v1;
  uint64_t state64;

  if (byte_1EE2B29E8)
    return byte_1EE2B29E0;
  state64 = 0;
  if (notify_get_state(dword_1EE2B29E4, &state64))
    v1 = 1;
  else
    v1 = state64 == 0;
  return !v1;
}

float cmsmGetDefaultBufferDuration()
{
  return 0.023;
}

float CMSMUtility_GetLongBufferDuration()
{
  CFIndex AppIntegerValue;
  Boolean keyExistsAndHasValidFormat;

  if ((CMSMUtility_GetLongBufferDuration_gCheckedLongBufferDuration & 1) == 0)
  {
    keyExistsAndHasValidFormat = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("longbuffermillis"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      *(float *)&CMSMUtility_GetLongBufferDuration_gLongBufferDuration = (float)AppIntegerValue / 1000.0;
    CMSMUtility_GetLongBufferDuration_gCheckedLongBufferDuration = 1;
  }
  return *(float *)&CMSMUtility_GetLongBufferDuration_gLongBufferDuration;
}

uint64_t _VAEndpointManager_CopyPropertyForScope(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, CFNumberRef *a6)
{
  uint64_t result;
  unsigned int NumberOfStreams;
  CFNumberRef v11;

  CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (a2 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, CFSTR("VAEM_NumberOfStreams")))
    {
      NumberOfStreams = vaemGetNumberOfStreams(a4);
    }
    else
    {
      result = CFEqual(a2, CFSTR("VAEM_MaximumNumberOfChannels"));
      if (!(_DWORD)result)
        return result;
      NumberOfStreams = vaemGetMaximumNumberOfChannels(a4);
    }
    v11 = MXCFNumberCreateFromSInt64(NumberOfStreams);
    result = 0;
    *a6 = v11;
  }
  return result;
}

uint64_t vaemGetMaximumNumberOfChannels(int a1)
{
  AudioObjectPropertyScope v2;
  int NumberOfStreams;
  void *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  AudioObjectID v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v14;
  void *v15;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;

  if (a1 == 1)
    v2 = 1768845428;
  else
    v2 = 1869968496;
  inAddress.mSelector = 1937009955;
  inAddress.mScope = v2;
  inAddress.mElement = 0;
  NumberOfStreams = vaemGetNumberOfStreams(a1);
  ioDataSize = 4 * NumberOfStreams;
  v4 = malloc_type_malloc((4 * NumberOfStreams), 0xB3E94A4uLL);
  v5 = 0;
  if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, v4))
  {
    v6 = 1;
  }
  else
  {
    v6 = v4 == 0;
  }
  if (!v6 && NumberOfStreams != 0)
  {
    v8 = 0;
    v5 = 0;
    while (1)
    {
      v9 = *((_DWORD *)v4 + v8);
      v15 = 0;
      v14 = 0;
      if (vaemCopySupportedStreamFormats(v9, a1, &v15, &v14))
        goto LABEL_23;
      v10 = v14;
      v11 = 0;
      if (v14)
        break;
      if (v15)
        goto LABEL_21;
LABEL_22:
      v5 = (v10 + v5);
      if (++v8 == NumberOfStreams)
        goto LABEL_23;
    }
    v12 = (unsigned int *)((char *)v15 + 28);
    do
    {
      if (*(v12 - 5) == 1819304813 && v11 <= *v12)
        v11 = *v12;
      v12 += 14;
      --v10;
    }
    while (v10);
LABEL_21:
    free(v15);
    LODWORD(v10) = v11;
    goto LABEL_22;
  }
LABEL_23:
  free(v4);
  return v5;
}

uint64_t vaemGetNumberOfStreams(int a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;

  HIDWORD(v4) = 4;
  if (a1 == 1)
    v1 = 1768845428;
  else
    v1 = 1869968496;
  LODWORD(v3) = 1937009955;
  HIDWORD(v3) = v1;
  LODWORD(v4) = 0;
  if (AudioObjectGetPropertyDataSize(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v3, v4), "defaultVADID"), (const AudioObjectPropertyAddress *)&v3, 0, 0, (UInt32 *)&v4 + 1))
  {
    return 0;
  }
  else
  {
    return HIDWORD(v4) >> 2;
  }
}

uint64_t vaemSetRouteConfigurationDictionaryOnVAD(const __CFDictionary *a1, int a2, const void *a3, _DWORD *a4)
{
  int v7;
  CFDictionaryRef v8;
  BOOL v9;
  uint64_t v10;
  const __CFNumber *Value;
  id v12;
  uint64_t v13;
  CFDictionaryRef theDict[5];

  theDict[0] = 0;
  theDict[1] = a1;
  theDict[2] = (CFDictionaryRef)8;
  theDict[3] = (CFDictionaryRef)theDict;
  theDict[4] = (CFDictionaryRef)8;
  v7 = CMSMVAUtility_AudioObjectSetPropertyData();
  v8 = theDict[0];
  if (v7)
    v9 = 1;
  else
    v9 = theDict[0] == 0;
  if (v9)
  {
    v10 = 4294954310;
    if (!theDict[0])
      return v10;
    goto LABEL_15;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict[0], CFSTR("route change reason"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, a4);
    if (CMSMVAUtility_MapVADReasonToCMSReason(*a4) != 9)
    {
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
        v12 = -[MXAdditiveRoutingManager copyAndUpdateSessionInformation:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyAndUpdateSessionInformation:", -[__CFDictionary objectForKey:](theDict[0], "objectForKey:", 0x1E30A8408));
      else
        v12 = 0;
      vaemAQMERouteChanged(theDict[0], (uint64_t)a3, v12);
      vaemVADRouteChangeListener(0, theDict[0], v13, a2, a3, 1);

    }
  }
  v10 = 0;
  v8 = theDict[0];
  if (theDict[0])
LABEL_15:
    CFRelease(v8);
  return v10;
}

uint64_t vaemSetDeviceVolume(uint64_t a1, AudioObjectPropertyElement a2, float a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  AudioObjectPropertySelector mSelector;
  unsigned int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  AudioObjectPropertySelector v13;
  unsigned int v14;
  __CFString *VADNameForVADID;
  const __CFString *v16;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  int v22;
  const char *v23;
  __int16 v24;
  double v25;
  __int16 v26;
  __CFString *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  AudioObjectPropertyElement v31;
  __int16 v32;
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  inAddress.mElement = a2;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F7574707663656ELL;
  if (!AudioObjectHasProperty(a1, &inAddress))
    goto LABEL_5;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v10 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_15;
  }
  if (outData != 1)
  {
    v10 = 1;
  }
  else
  {
LABEL_5:
    if (dword_1EE2B3F38)
    {
      inAddress.mSelector = 0;
      LOBYTE(outData) = 0;
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      mSelector = inAddress.mSelector;
      if (os_log_type_enabled(v7, (os_log_type_t)outData))
        v9 = mSelector;
      else
        v9 = mSelector & 0xFFFFFFFE;
      if (v9)
      {
        v22 = 136315138;
        v23 = "vaemStartIgnoreOutputVolumeScalarChangesTimer";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCancelOutputVolumeChangeTimer();
    word_1EE2B2B70 = 1;
    gVAEM = a1;
    dword_1EE2B2B60 = a2;
    dword_1EE2B2B5C = LODWORD(a3);
    qword_1EE2B2B78 = 0;
    v11 = MXGetSerialQueue();
    qword_1EE2B2B68 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v11, 1.0, (uint64_t)&__block_literal_global_50, 0, 0);
    v10 = 0;
    if (!qword_1EE2B2B68)
      LOBYTE(word_1EE2B2B70) = 0;
  }
LABEL_15:
  if (dword_1EE2B3F38)
  {
    inAddress.mSelector = 0;
    LOBYTE(outData) = 0;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v13 = inAddress.mSelector;
    if (os_log_type_enabled(v12, (os_log_type_t)outData))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if (v14)
    {
      VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
      v22 = 136316418;
      v16 = CFSTR("YES");
      v23 = "vaemSetDeviceVolume";
      v24 = 2048;
      v25 = a3;
      v26 = 2114;
      if (v10)
        v16 = CFSTR("NO");
      v27 = VADNameForVADID;
      v28 = 1024;
      v29 = a1;
      v30 = 1024;
      v31 = a2;
      v32 = 2114;
      v33 = v16;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t CMSMVAUtility_AudioObjectSetPropertyData()
{
  if (unk_1EE2B3BB0)
    return unk_1EE2B3BB0();
  else
    return 0;
}

void vaemAQMERouteChanged(const __CFDictionary *a1, uint64_t a2, void *a3)
{
  const __CFAllocator *v5;
  CFArrayRef v6;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  void *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *values;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (unk_1EE2B3B90)
  {
    if (FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(a2))
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v6 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, a1);
      v8 = MutableCopy;
      if (v6)
        v9 = MutableCopy == 0;
      else
        v9 = 1;
      if (v9)
      {
        if (!v6)
        {
LABEL_24:
          unk_1EE2B3B90(v8);
          if (v8)
            CFRelease(v8);
          return;
        }
      }
      else
      {
        CFDictionarySetValue(MutableCopy, CFSTR("SessionAudioBehaviors"), v6);
      }
      CFRelease(v6);
      goto LABEL_24;
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(a3, "count"))
    {
      v21 = a1;
      v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v24;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v24 != v12)
              objc_enumerationMutation(a3);
            v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
            v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v14, "audioSessionID")), CFSTR("AudioSessionID"));
            objc_msgSend(v15, "setObject:forKey:", objc_msgSend(v14, "audioBehaviour"), CFSTR("AudioBehavior"));
            objc_msgSend(v22, "addObject:", v15);

          }
          v11 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        }
        while (v11);
      }
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v21);
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(v16, "setObject:forKey:", v22, CFSTR("SessionAudioBehaviors"), v19, v20);
      if (dword_1EE2B3F38)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      unk_1EE2B3B90(v16);

    }
    else
    {
      unk_1EE2B3B90(a1);
    }
  }
}

BOOL CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(AudioObjectID a1, uint64_t a2, int a3)
{
  int Stream0;
  double v5;
  _BYTE v7[40];
  AudioObjectID outData;

  outData = 0;
  memset(v7, 0, sizeof(v7));
  Stream0 = vaemGetStream0(a1, a3, &outData);
  v5 = 0.0;
  if (!Stream0 && outData)
  {
    vaemGetStreamASBD(outData, (uint64_t)v7);
    v5 = *(double *)v7;
  }
  return v5 == *(double *)a2
      && *(_QWORD *)&v7[8] == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)&v7[16] == *(_DWORD *)(a2 + 16)
      && *(_QWORD *)&v7[20] == *(_QWORD *)(a2 + 20)
      && *(_QWORD *)&v7[28] == *(_QWORD *)(a2 + 28)
      && *(_DWORD *)&v7[36] == *(_DWORD *)(a2 + 36);
}

uint64_t remoteSystemController_CopyVolumeCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  memset(v11, 0, sizeof(v11));
  ObjectID = remoteSystemController_getObjectID(a1, v11);
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  if (!a4)
  {
    if (!a5)
    {
      v9 = 0;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v8 = FigXPCMessageCopyCFString();
  v9 = v8;
  if (a5 && !(_DWORD)v8)
  {
LABEL_11:
    ObjectID = FigXPCMessageCopyCFString();
LABEL_12:
    v9 = ObjectID;
  }
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSystemController_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectID = remoteSystemController_getObjectID(a1, v6);
  if ((_DWORD)ObjectID)
  {
LABEL_10:
    v4 = ObjectID;
    goto LABEL_7;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3 || (v3 = FigXPCMessageSetCFString(), (_DWORD)v3) || (v3 = FigXPCMessageSetCFObject(), (_DWORD)v3))
    v4 = v3;
  else
    v4 = FigXPCRemoteClientSendAsyncMessage();
LABEL_7:
  FigXPCRelease();
  return v4;
}

uint64_t remoteSystemController_PerformVolumeOperation(uint64_t a1, uint64_t a2, float a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, BOOL *a12, uint64_t a13, uint64_t a14)
{
  uint64_t ObjectID;
  uint64_t v20;
  double v21;
  double v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  xpc_object_t xdict;
  uint64_t v29;

  xdict = 0;
  v29 = 0;
  v27 = 0;
  ObjectID = remoteSystemController_getObjectID(a1, &v27);
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v20 = FigXPCMessageSetCFNumber();
  if ((_DWORD)v20)
  {
    v25 = v20;
    goto LABEL_26;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  ObjectID = FigXPCMessageSetCFNumber();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  *(float *)&v21 = a4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v21);
  ObjectID = FigXPCMessageSetCFNumber();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  *(float *)&v22 = a5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v22);
  ObjectID = FigXPCMessageSetCFNumber();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCMessageSetCFBoolean();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_24;
  if (a11)
  {
    v23 = xpc_dictionary_get_double(xdict, (const char *)kFigSystemControllerXPCMsgParam_Volume);
    *a11 = v23;
  }
  if (a12)
    *a12 = xpc_dictionary_get_BOOL(xdict, (const char *)kFigSystemControllerXPCMsgParam_Muted);
  if (!a13)
  {
    if (!a14)
    {
      v25 = 0;
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  v24 = FigXPCMessageCopyCFString();
  v25 = v24;
  if (a14 && !(_DWORD)v24)
  {
LABEL_23:
    ObjectID = FigXPCMessageCopyCFString();
LABEL_24:
    v25 = ObjectID;
  }
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v25;
}

uint64_t remoteSystemController_CopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  ObjectID = remoteSystemController_getObjectID(a1, v9);
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  v7 = v6;
  if (a4 && !(_DWORD)v6)
  {
    ObjectID = FigXPCMessageCopyCFArray();
LABEL_8:
    v7 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteSystemController_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a2 && a4)
  {
    ObjectID = remoteSystemController_getObjectID(a1, &v7);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v5 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSystemController_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

double vaemGetSampleRateForDevice(AudioObjectID a1)
{
  OSStatus PropertyData;
  double result;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  double outData;

  outData = 0.0;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F626E737274;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  result = outData;
  if (PropertyData)
    return 0.0;
  return result;
}

void sub_19363755C(void *a1, int a2)
{
  uint64_t v2;
  id v4;

  v4 = objc_begin_catch(a1);
  if (a2 == 2)
    objc_exception_throw(v4);
  HandleDispatchBlockException(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(unsigned int *)(v2 + 104), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  __break(1u);
}

void sub_193637588(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscoveryManagerUpdateDiscoveryMode()
{
  unint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const __CFArray *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  unsigned int DiscoveryModeAsInt;
  CFTypeRef v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void *v16;
  dispatch_time_t v17;
  dispatch_queue_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[10];
  int v23;
  CFTypeRef cf;
  CFTypeRef v25;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = 0;
  if (qword_1EE2B3238)
    v1 = &discoverManager_getSharedManager_discoveryState;
  else
    v1 = 0;
  v20 = *MEMORY[0x1E0C9AE40];
  v2 = *MEMORY[0x1E0C9AE50];
  v3 = 8;
  if (qword_1EE2B3238)
    v3 = (uint64_t)&qword_1EE2B3238;
  v19 = (dispatch_queue_t *)v3;
  v4 = (uint64_t *)(v1 + 40);
  do
  {
    if (v0 > 8 || ((1 << v0) & 0x148) == 0)
    {
      v5 = (const __CFArray *)*(v4 - 2);
      discoveryManager_logDiscoverers((uint64_t)v1, 0);
      if (v0 > 8)
        v21 = 0;
      else
        v21 = qword_1937A3290[v0];
      v25 = 0;
      v6 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, &v25, v20);
      cf = 0;
      v7 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, &cf, v2);
      v8 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, 0, v20);
      v9 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, 0, v2);
      DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
      if (DiscoveryModeAsInt >= discovererManager_getDiscoveryModeAsInt())
      {
        if (v9)
        {
          v11 = CFRetain(v9);
          if (!v8)
          {
LABEL_23:
            if (v9)
              CFRelease(v9);
            if (discoveryManager_doesSwitchRequireDelay((const void *)*(v4 - 1)))
            {
              if (!discoveryManager_doesSwitchRequireDelay(v11))
              {
                v15 = MEMORY[0x194035214]();
                if (!*v4)
                {
                  *v4 = FigNanosecondsToHostTime() + v15;
                  v17 = dispatch_time(0, 5000000000);
                  dispatch_after(v17, *v19, &__block_literal_global_29);
                  goto LABEL_56;
                }
                if (v15 <= *v4)
                {
LABEL_56:
                  v14 = 0;
                  if (!v11)
                  {
LABEL_38:
                    if (v14)
                    {
                      v16 = (const void *)*(v4 - 1);
                      *(v4 - 1) = (uint64_t)v6;
                      if (v6)
                        CFRetain(v6);
                      if (v16)
                        CFRelease(v16);
                      v22[0] = MEMORY[0x1E0C809B0];
                      v22[1] = 3221225472;
                      v22[2] = __discoveryManager_updateDiscoveryModeForType_block_invoke;
                      v22[3] = &__block_descriptor_84_e5_v8__0l;
                      v22[4] = v1;
                      v22[5] = v21;
                      v22[6] = v6;
                      v22[7] = v25;
                      v23 = v0;
                      v22[8] = v7;
                      v22[9] = cf;
                      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v22);
                    }
                    if (v25)
                    {
                      CFRelease(v25);
                      v25 = 0;
                    }
                    if (v6)
                      CFRelease(v6);
                    if (cf)
                    {
                      CFRelease(cf);
                      cf = 0;
                    }
                    if (v7)
                      CFRelease(v7);
                    discoveryManager_removeFreedWeakRefs(v5);
                  }
LABEL_37:
                  CFRelease(v11);
                  goto LABEL_38;
                }
                goto LABEL_35;
              }
              v12 = FigCFEqual();
              v13 = *v4;
              if (v12)
              {
                if (v13)
                {
                  v14 = 0;
                  *v4 = 0;
                  if (!v11)
                    goto LABEL_38;
                  goto LABEL_37;
                }
                goto LABEL_56;
              }
              if (v13)
LABEL_35:
                *v4 = 0;
            }
            v14 = 1;
            if (!v11)
              goto LABEL_38;
            goto LABEL_37;
          }
        }
        else
        {
          v11 = 0;
          if (!v8)
            goto LABEL_23;
        }
      }
      else
      {
        if (!v8)
        {
          v11 = 0;
          goto LABEL_23;
        }
        v11 = CFRetain(v8);
      }
      CFRelease(v8);
      goto LABEL_23;
    }
    ++v0;
    v4 += 3;
  }
  while (v0 != 9);
  return 0;
}

void FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked(uint64_t a1)
{
  uint64_t v2;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v2 = (uint64_t)&qword_1EE2B3328;
  else
    v2 = 248;
  MEMORY[0x1940352BC](*(_QWORD *)v2);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  JUMPOUT(0x1940352C8);
}

CFTypeRef discoveryManager_copyHighestRequestedDiscoveryModeForEndpointManager(const __CFDictionary *a1, _QWORD *a2)
{
  CFTypeRef v3;
  unint64_t UInt64;
  const __CFArray *Value;
  CFIndex v6;
  const __CFDictionary *ValueAtIndex;
  const void *v8;
  unsigned int DiscoveryModeAsInt;
  int v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef cf;

  v3 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA39F0]);
  CFDictionaryGetValue(a1, CFSTR("EndpointManager_SupportedEndpointFeaturesKey"));
  UInt64 = FigCFNumberGetUInt64();
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("EndpointManager_RequestedDiscoveryModesKey"));
  v6 = 0;
  cf = 0;
  do
  {
    if (((UInt64 >> v6) & 1) != 0)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v6);
      v8 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Requestor_DiscoveryMode"));
      DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
      if (DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt())
      {
        CFDictionaryGetValue(a1, CFSTR("EndpointManager_SupportedDiscoveryModesKey"));
        v10 = FigCFNumberGetUInt64();
        if (FigCFEqual())
        {
          v11 = 4;
        }
        else if (FigCFEqual())
        {
          v11 = 2;
        }
        else
        {
          if (!FigCFEqual())
            goto LABEL_16;
          v11 = 1;
        }
        if ((v10 & v11) != 0)
        {
          if (v8)
            CFRetain(v8);
          if (v3)
            CFRelease(v3);
          cf = CFDictionaryGetValue(ValueAtIndex, CFSTR("Requestor_DiscovererWeakRef"));
          v3 = v8;
        }
      }
    }
LABEL_16:
    ++v6;
  }
  while (v6 != 7);
  if (a2)
  {
    v12 = cf;
    if (cf)
      v12 = CFRetain(cf);
    *a2 = v12;
  }
  return v3;
}

CFTypeRef discoveryManager_copyHighestDiscoveryModeForDiscovererType(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4)
{
  const __CFArray *v6;
  CFTypeRef v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const __CFString *v11;
  uint64_t v12;
  const void *ValueAtIndex;
  uint64_t v14;
  const void *v15;
  uint64_t (*v16)(const void *, const __CFString *, uint64_t, CFTypeRef *);
  int v17;
  CFTypeRef v18;
  void (*v19)(const void *, const __CFString *, uint64_t, CFTypeRef *);
  const __CFString *v20;
  uint64_t v21;
  unsigned int DiscoveryModeAsInt;
  CFTypeRef v23;
  CFTypeRef v25;
  _QWORD *v26;
  CFTypeRef v27;
  uint64_t v28;
  CFTypeRef v29;
  const void *v30;
  CFTypeRef cf;
  CFTypeRef v32;

  v6 = *(const __CFArray **)(a1 + 24 * a2 + 24);
  if (*MEMORY[0x1E0CA39F0])
    v7 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA39F0]);
  else
    v7 = 0;
  Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    v9 = Count;
    v26 = a3;
    v10 = 0;
    v29 = 0;
    v11 = CFSTR("DiscoveryMode");
    v12 = *MEMORY[0x1E0C9AE00];
    v30 = (const void *)*MEMORY[0x1E0C9AE40];
    v27 = (CFTypeRef)*MEMORY[0x1E0CA39E0];
    v25 = (CFTypeRef)*MEMORY[0x1E0CA39F8];
    v28 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
      v14 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v14)
        break;
      v18 = v7;
LABEL_20:
      if (v9 == ++v10)
        goto LABEL_56;
    }
    v15 = (const void *)v14;
    v32 = 0;
    v16 = *(uint64_t (**)(const void *, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v16)
      v17 = v16(v15, v11, v12, &v32);
    else
      v17 = -12782;
    cf = v30;
    v19 = *(void (**)(const void *, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v19)
      v19(v15, CFSTR("BluetoothRoutesOnly"), v12, &cf);
    if (v17 || !FigCFEqual())
    {
      v18 = v7;
    }
    else
    {
      if (FigCFEqual())
      {
        v18 = (CFTypeRef)*MEMORY[0x1E0CA39E8];
        if (*MEMORY[0x1E0CA39E8])
          CFRetain((CFTypeRef)*MEMORY[0x1E0CA39E8]);
        if (v7)
          CFRelease(v7);
        if (v29)
          CFRelease(v29);
        if (ValueAtIndex)
          v29 = CFRetain(ValueAtIndex);
        else
          v29 = 0;
        if (v32)
        {
          CFRelease(v32);
          v32 = 0;
        }
        CFRelease(v15);
LABEL_56:
        a3 = v26;
        if (v26)
        {
          v23 = v29;
LABEL_58:
          *a3 = v23;
        }
        else if (v29)
        {
          CFRelease(v29);
        }
        return v18;
      }
      v20 = v11;
      v21 = a4;
      DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
      if (DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt())
      {
        if (FigCFEqual())
        {
          v18 = v27;
          if (v27)
            CFRetain(v27);
          a4 = v21;
        }
        else
        {
          if (!FigCFEqual())
          {
            v18 = v7;
            a4 = v21;
            v11 = v20;
            v12 = v28;
LABEL_36:
            if (v29)
              CFRelease(v29);
            if (ValueAtIndex)
              v29 = CFRetain(ValueAtIndex);
            else
              v29 = 0;
            goto LABEL_15;
          }
          a4 = v21;
          v18 = v25;
          if (v25)
            CFRetain(v25);
        }
        v11 = v20;
        v12 = v28;
        if (v7)
          CFRelease(v7);
        goto LABEL_36;
      }
      v18 = v7;
      a4 = v21;
      v11 = v20;
      v12 = v28;
    }
LABEL_15:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v32)
      CFRelease(v32);
    CFRelease(v15);
    v7 = v18;
    goto LABEL_20;
  }
  if (a3)
  {
    v23 = 0;
    v18 = v7;
    goto LABEL_58;
  }
  return v7;
}

uint64_t discovererManager_getDiscoveryModeAsInt()
{
  uint64_t result;

  if (FigCFEqual() || FigCFEqual())
    return 0;
  if (FigCFEqual() || FigCFEqual())
    return 10;
  if (FigCFEqual() || FigCFEqual())
    return 20;
  if (FigCFEqual())
    return 30;
  result = FigCFEqual();
  if ((_DWORD)result)
    return 30;
  return result;
}

uint64_t discoveryManager_doesSwitchRequireDelay(const void *a1)
{
  uint64_t result;

  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39E8]))
    return 1;
  result = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39E0]);
  if ((_DWORD)result)
    return 1;
  return result;
}

const __CFArray *__discoveryManager_updateDiscoveryModeForType_block_invoke(uint64_t a1)
{
  CFIndex v2;
  const void **v3;
  const void **v4;
  const __CFArray *result;
  const __CFDictionary *ValueAtIndex;
  const void *v7;
  const void *v8;
  int v9;
  const void **v10;
  const void **v11;
  unsigned int DiscoveryModeAsInt;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  CFTypeRef v17;
  const void *v18;
  void (*v19)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *);
  void (*v20)(const void *, const __CFString *, const __CFAllocator *, void **);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v22;
  unsigned int v23;
  uint64_t CMBaseObject;
  void (*v25)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  NSObject *v26;
  void (*v27)(const void *, CFTypeRef, _QWORD);
  CFMutableDictionaryRef Mutable;
  void (*v29)(const void *, const __CFString *, const __CFAllocator *, _BYTE *);
  uint64_t v30;
  const void **v31;
  const void **v32;
  const void **v33;
  const __CFAllocator *allocator;
  const void **v35;
  _QWORD v36[6];
  os_log_type_t type;
  unsigned int v38;
  void *value;
  CFTypeRef v40;
  CFTypeRef v41;
  _BYTE cf[12];
  __int16 v43;
  const void *v44;
  __int16 v45;
  CFTypeRef v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  CFTypeRef v50;
  CFTypeRef v51[18];

  v2 = 0;
  v51[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v3 = (const void **)(a1 + 48);
  v4 = (const void **)(a1 + 64);
  v35 = (const void **)(a1 + 56);
  v33 = (const void **)(a1 + 72);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v30 = *MEMORY[0x1E0CA3A40];
  v31 = (const void **)(a1 + 48);
  v32 = (const void **)(a1 + 64);
  while (1)
  {
    result = *(const __CFArray **)(*(_QWORD *)(a1 + 32) + 240);
    if (result)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v2 >= (uint64_t)result)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 32) + 240), v2);
    v7 = CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_RefKey"));
    v8 = CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_TypeKey"));
    CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_SupportedEndpointFeaturesKey"));
    if ((*(_QWORD *)(a1 + 40) & FigCFNumberGetUInt64()) != 0)
    {
      v9 = FigCFEqual();
      v10 = v3;
      v11 = v35;
      if (v9)
      {
        DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
        v13 = discovererManager_getDiscoveryModeAsInt();
        v10 = v3;
        v11 = v35;
        if (DiscoveryModeAsInt < v13)
        {
          v14 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 80);
          v15 = *(const void **)(v14 + 32);
          v16 = *(const void **)(a1 + 64);
          *(_QWORD *)(v14 + 32) = v16;
          if (v16)
            CFRetain(v16);
          v10 = v4;
          v11 = v33;
          if (v15)
          {
            CFRelease(v15);
            v10 = v4;
            v11 = v33;
          }
        }
      }
      discoveryManager_saveRequestedDiscoveryModeForEndpointManager(ValueAtIndex, *(_QWORD *)(a1 + 40), *v10, *v11);
      v41 = 0;
      v17 = discoveryManager_copyHighestRequestedDiscoveryModeForEndpointManager(ValueAtIndex, &v41);
      CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointFeature_CurrentDiscoveryModeKey"));
      if (!FigCFEqual())
      {
        value = 0;
        v40 = 0;
        v18 = (const void *)discoveryManager_copyDiscovererFromWeakRef(v41);
        if (v18)
        {
          v19 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v19)
            v19(v18, CFSTR("clientName"), allocator, &v40);
          v20 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v20)
            v20(v18, CFSTR("discovererUUID"), allocator, &value);
        }
        CFDictionarySetValue(ValueAtIndex, CFSTR("EndpointFeature_CurrentDiscoveryModeKey"), v17);
        if (dword_1EE2B3DE8)
        {
          v38 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v22 = v38;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v23 = v22;
          else
            v23 = v22 & 0xFFFFFFFE;
          if (v23)
          {
            *(_DWORD *)cf = 136316162;
            *(_QWORD *)&cf[4] = "discoveryManager_updateDiscoveryModeForType_block_invoke";
            v43 = 2114;
            v44 = v8;
            v45 = 2114;
            v46 = v17;
            v47 = 2114;
            v48 = value;
            v49 = 2114;
            v50 = v40;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v3 = v31;
        }
        v51[0] = 0;
        CMBaseObject = FigEndpointManagerGetCMBaseObject();
        v25 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v25)
          v25(CMBaseObject, v30, allocator, v51);
        if (FigCFEqual())
        {
          v26 = MXGetSerialQueue();
          v36[0] = MEMORY[0x1E0C809B0];
          v36[1] = 3221225472;
          v36[2] = __discoveryManager_updateDiscoveryModeForType_block_invoke_2;
          v36[3] = &__block_descriptor_48_e5_v8__0l;
          v36[4] = v7;
          v36[5] = v17;
          MXDispatchAsyncAndWait((uint64_t)"discoveryManager_updateDiscoveryModeForType_block_invoke", (uint64_t)"FigRouteDiscoveryManager.m", 1612, 0, 0, v26, (uint64_t)v36);
        }
        else
        {
          v27 = *(void (**)(const void *, CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v27)
            v27(v7, v17, 0);
        }
        if (v51[0])
        {
          CFRelease(v51[0]);
          v51[0] = 0;
        }
        if (v17 && FigCFEqual())
        {
          Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (FigCFEqual())
          {
            FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(v17, Mutable);
          }
          else
          {
            *(_QWORD *)cf = 0;
            if (v18)
            {
              v29 = *(void (**)(const void *, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v29)
                v29(v18, CFSTR("OnBehalfOf"), allocator, cf);
            }
            if (value)
              CFDictionarySetValue(Mutable, CFSTR("ObjectHash"), value);
            if (v40)
              CFDictionarySetValue(Mutable, CFSTR("Client"), v40);
            if (*(_QWORD *)cf)
              CFDictionarySetValue(Mutable, CFSTR("OnBehalfOf"), *(const void **)cf);
            FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(v17, Mutable);
            if (*(_QWORD *)cf)
              CFRelease(*(CFTypeRef *)cf);
          }
          if (Mutable)
            CFRelease(Mutable);
        }
        if (v18)
          CFRelease(v18);
        if (v40)
        {
          CFRelease(v40);
          v40 = 0;
        }
        v4 = v32;
        if (value)
          CFRelease(value);
      }
      if (v17)
        CFRelease(v17);
      if (v41)
        CFRelease(v41);
    }
    ++v2;
  }
  return result;
}

void discoveryManager_saveRequestedDiscoveryModeForEndpointManager(const __CFDictionary *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t UInt64;
  __CFArray *Value;
  CFIndex v10;
  const __CFAllocator *v11;
  __CFDictionary *Mutable;

  CFDictionaryGetValue(a1, CFSTR("EndpointManager_SupportedEndpointFeaturesKey"));
  UInt64 = FigCFNumberGetUInt64();
  Value = (__CFArray *)CFDictionaryGetValue(a1, CFSTR("EndpointManager_RequestedDiscoveryModesKey"));
  v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    if (((1 << v10) & a2) != 0 && ((1 << v10) & UInt64) != 0)
    {
      Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("Requestor_DiscoveryMode"), a3);
      if (a4)
        CFDictionarySetValue(Mutable, CFSTR("Requestor_DiscovererWeakRef"), a4);
      CFArraySetValueAtIndex(Value, v10, Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
    ++v10;
  }
  while (v10 != 7);
}

const __CFArray *__discoveryManager_iOSAppendAvailableEndpoints_block_invoke(uint64_t a1)
{
  CFIndex v2;
  const __CFArray *result;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  BOOL v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v21;
  void (*v22)(const void *, __CFString *, const __CFAllocator *, uint64_t, _QWORD, uint64_t);
  CFTypeRef *v23;
  void (*v24)(const void *, uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFTypeRef *);
  __CFArray *v25;
  NSObject *v26;
  __CFArray *Mutable;
  const __CFArray *v28;
  CFIndex Count;
  CFIndex v30;
  const void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  OpaqueFigEndpoint *v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v43;
  NSObject *v44;
  CFTypeRef v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  CFTypeRef v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  CFTypeRef v57;
  const __CFAllocator *allocator;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  CFTypeRef *v63;
  CFTypeRef v64;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v67;
  uint64_t v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  CFTypeRef *v75;
  const void *v76;
  int v77;
  CFTypeRef v78;
  CFTypeRef *v79;
  uint64_t v80;
  uint64_t v81;
  CFTypeRef v82[2];

  v2 = 0;
  v57 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v53 = *MEMORY[0x1E0C9AE50] != 0;
  v55 = *MEMORY[0x1E0CA3A40];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v54 = *MEMORY[0x1E0CA3A80];
  v48 = *MEMORY[0x1E0CA3A28];
  v51 = *MEMORY[0x1E0CA4258];
  v50 = *MEMORY[0x1E0CA4280];
  v52 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v49 = 1;
  while (1)
  {
    result = *(const __CFArray **)(*(_QWORD *)(a1 + 32) + 240);
    if (result)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v2 >= (uint64_t)result)
      return result;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 32) + 240), v2);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_RefKey"));
    if (*(CFTypeRef *)(a1 + 40) == v57)
    {
      v71 = 0;
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v7 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v7)
        v7(CMBaseObject, v55, allocator, &v71);
      v8 = !FigCFEqual() && !FigCFEqual();
      if (v71)
        CFRelease(v71);
      if (v8)
        goto LABEL_95;
    }
    v10 = *(unsigned int *)(a1 + 56);
    v9 = *(_DWORD *)(a1 + 60);
    v78 = 0;
    v11 = FigEndpointManagerGetCMBaseObject();
    v12 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v12)
      v12(v11, v55, allocator, &v78);
    if (FigCFEqual() || FigCFEqual())
    {
      v13 = v9 == 6;
LABEL_19:
      v14 = !v13;
      goto LABEL_22;
    }
    if (!FigCFEqual() || (v14 = 1, v49) && v9 != 8)
    {
      if (!FigCFEqual())
      {
        v46 = FigCFEqual();
        v13 = v9 != 8 || v46 == 0;
        goto LABEL_19;
      }
      if (v9 > 8 || ((1 << v9) & 0x121) == 0)
      {
        v59 = 0;
        v60 = (uint64_t)&v59;
        v61 = 0x2020000000;
        v62 = (void *)v57;
        if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
        {
          v21 = v60;
          v22 = *(void (**)(const void *, __CFString *, const __CFAllocator *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
          if (v22)
            v22(Value, CFSTR("VAEM_IsAirPlayIncluded"), allocator, v10, 0, v21 + 24);
        }
        else
        {
          v47 = MXGetSerialQueue();
          v71 = (CFTypeRef)MEMORY[0x1E0C809B0];
          v72 = 3221225472;
          v73 = __discoveryManager_shouldSkipAvailableEndpointsQuery_block_invoke;
          v74 = &unk_1E3098DB0;
          v77 = v10;
          v75 = (CFTypeRef *)&v59;
          v76 = Value;
          MXDispatchAsyncAndWait((uint64_t)"discoveryManager_shouldSkipAvailableEndpointsQuery", (uint64_t)"FigRouteDiscoveryManager.m", 976, 0, 0, v47, (uint64_t)&v71);
        }
        v49 = *(_QWORD *)(v60 + 24) == (_QWORD)v57;
        _Block_object_dispose(&v59, 8);
      }
      v14 = 0;
    }
LABEL_22:
    if (v78)
      CFRelease(v78);
    if ((v14 & 1) == 0)
    {
      if (ValueAtIndex
        && (v15 = *(_DWORD *)(a1 + 60), v15 <= 8)
        && (v16 = *(unsigned int *)(a1 + 56),
            v56 = *(_DWORD *)(a1 + 60),
            v17 = qword_1937A3290[v15],
            CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_SupportedEndpointFeaturesKey")),
            (FigCFNumberGetUInt64() & v17) != 0))
      {
        v18 = CFDictionaryGetValue(ValueAtIndex, CFSTR("EndpointManager_RefKey"));
        v82[0] = 0;
        if (v18)
        {
          v19 = FigEndpointManagerGetCMBaseObject();
          v20 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v20)
            v20(v19, v55, allocator, v82);
        }
        v78 = 0;
        v79 = &v78;
        v80 = 0x2020000000;
        v81 = 0;
        if (FigCFEqual())
        {
          if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
          {
            v23 = v79;
            v24 = *(void (**)(const void *, uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
            if (v24)
              v24(v18, v48, allocator, v16, 0, v23 + 3);
          }
          else
          {
            v26 = MXGetSerialQueue();
            v71 = (CFTypeRef)MEMORY[0x1E0C809B0];
            v72 = 3221225472;
            v73 = __discoveryManager_iOSCopyAvailableEndpoints_block_invoke;
            v74 = &unk_1E3098DB0;
            v77 = v16;
            v75 = &v78;
            v76 = v18;
            MXDispatchAsyncAndWait((uint64_t)"discoveryManager_iOSCopyAvailableEndpoints", (uint64_t)"FigRouteDiscoveryManager.m", 851, 0, 0, v26, (uint64_t)&v71);
          }
        }
        else
        {
          v25 = -[MXEndpointDescriptorCache copyAvailableEndpointsForManager:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyAvailableEndpointsForManager:", v18);
          v79[3] = v25;
        }
        Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v28 = (const __CFArray *)v79[3];
        if (v28)
        {
          Count = CFArrayGetCount(v28);
          if (Count >= 1)
          {
            v30 = 0;
            while (1)
            {
              v31 = CFArrayGetValueAtIndex((CFArrayRef)v79[3], v30);
              if (!v31 || (FigEndpointGetSupportedFeatures() & v17) == 0)
                goto LABEL_88;
              if (((0xB3uLL >> v56) & 1) == 0)
              {
                cf = 0;
                v32 = FigEndpointGetCMBaseObject();
                v33 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                v34 = v53;
                if (v33)
                {
                  v33(v32, CFSTR("AudioWithScreenMirroringOnly"), allocator, &cf);
                  v34 = cf != v57;
                  if (cf)
                    CFRelease(cf);
                }
                if (!v34)
                  goto LABEL_88;
              }
              v35 = FigCFEqual();
              if (v56 == 6 || !v35)
              {
                if (FigCFEqual() && FigCFEqual())
                {
                  cf = 0;
                  v41 = FigEndpointGetCMBaseObject();
                  v42 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v42)
                    v42(v41, v51, allocator, &cf);
                  v43 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
                  if (v43)
                    CFArrayAppendValue(Mutable, v31);
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  if (v43)
                    CFRelease(v43);
                }
                else
                {
                  CFArrayAppendValue(Mutable, v31);
                }
                goto LABEL_88;
              }
              v70 = 0;
              v36 = FigEndpointGetCMBaseObject();
              v37 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
              if (v37)
                v37(v36, v50, allocator, &v70);
              if (v70 != v52)
                break;
              CFArrayAppendValue(Mutable, v31);
LABEL_86:
              if (v70)
                CFRelease(v70);
LABEL_88:
              if (Count == ++v30)
                goto LABEL_89;
            }
            v69 = 0;
            v38 = FigEndpointGetCMBaseObject();
            v39 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v39)
              v39(v38, v51, allocator, &v69);
            cf = 0;
            p_cf = &cf;
            v67 = 0x2020000000;
            v68 = 0;
            if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
            {
              v40 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v69, 0, v54, 0);
              p_cf[3] = v40;
              if (v40)
                goto LABEL_82;
LABEL_81:
              CFArrayAppendValue(Mutable, v31);
              v40 = (OpaqueFigEndpoint *)p_cf[3];
              if (v40)
              {
LABEL_82:
                CFRelease(v40);
                p_cf[3] = 0;
              }
              if (v69)
              {
                CFRelease(v69);
                v69 = 0;
              }
              _Block_object_dispose(&cf, 8);
              goto LABEL_86;
            }
            v44 = MXGetSerialQueue();
            v59 = MEMORY[0x1E0C809B0];
            v60 = 3221225472;
            v61 = (uint64_t)__discoveryManager_iOSCopyAvailableEndpoints_block_invoke_2;
            v62 = &unk_1E3098D88;
            v63 = &cf;
            v64 = v69;
            MXDispatchAsyncAndWait((uint64_t)"discoveryManager_iOSCopyAvailableEndpoints", (uint64_t)"FigRouteDiscoveryManager.m", 897, 0, 0, v44, (uint64_t)&v59);
            v40 = (OpaqueFigEndpoint *)p_cf[3];
            if (!v40)
              goto LABEL_81;
            goto LABEL_82;
          }
        }
LABEL_89:
        v45 = v79[3];
        if (v45)
        {
          CFRelease(v45);
          v79[3] = 0;
        }
        if (v82[0])
        {
          CFRelease(v82[0]);
          v82[0] = 0;
        }
        _Block_object_dispose(&v78, 8);
        FigCFArrayAppendArray();
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        FigCFArrayAppendArray();
      }
    }
LABEL_95:
    ++v2;
  }
}

void sub_193638FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t _VAEndpointManager_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeRef *v9;
  __CFArray *v10;
  __CFArray *v11;
  void *v12;
  unsigned int PortOfTypeInConnectedPortsList;
  CFTypeRef *v14;
  int v15;
  int v16;
  id v17;
  int v18;
  unsigned int VirtualAudioPlugInCategory;
  uint64_t DeviceInputGainScalar;
  float v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (!a2 || !a4)
    return result;
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294950584;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A40]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0CA3A80];
LABEL_6:
    v10 = (__CFArray *)CFRetain(*v9);
LABEL_7:
    v11 = v10;
    result = 0;
    *a4 = v11;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A28]))
  {
    v12 = (void *)CMSMUtility_CopyCurrentAllowedPortTypes();
    *a4 = vaemCopyAvailableEndpointsForRouteConfiguration(0, 0, 0, v12);
    if (v12)
      CFRelease(v12);
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A30]))
  {
LABEL_14:
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A50]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A48]))
  {
    v22[0] = 2;
    v10 = CFNumberCreate(a3, kCFNumberSInt64Type, v22);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_StarkIsAvailableForCurrentCategoryAndMode")))
  {
    PortOfTypeInConnectedPortsList = CMSMVAUtility_GetPortOfTypeInConnectedPortsList(1886614639);
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_StarkAudioPortIsCurrentlyActive")))
  {
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v15 = dword_1EE2B3CC8;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("VAEM_DeviceBufferSizeRange")))
  {
    vaemGetDeviceBufferNumPCMFramesRange(v22, (_DWORD *)v22 + 1);
    v10 = MXCFArrayCreateFromCArrayOfSInt32((int *)v22, 2u);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_AllEndpoints")))
  {
    v10 = vaemCopyAllEndpoints();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_BufferFrameSizeShouldBeRestricted")))
  {
    PortOfTypeInConnectedPortsList = vaemBufferFrameSizeShouldBeRestricted();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_SystemLocalVADExists")))
  {
    PortOfTypeInConnectedPortsList = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_SystemRemoteVADExists")))
  {
    PortOfTypeInConnectedPortsList = -[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID");
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_AC3IsSupported")))
  {
    PortOfTypeInConnectedPortsList = vaemGetAC3IsSupported();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_AC3EncodeIsSupported")))
  {
LABEL_42:
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("VAEM_VirtualFormatsSupported")))
  {
    v10 = vaemCopyVirtualFormatsSupported();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_UplinkMute")))
  {
    PortOfTypeInConnectedPortsList = vaemGetUplinkMute();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_DownlinkMute")))
  {
    LODWORD(v22[0]) = 0;
    if (unk_1EE2B3BC0)
    {
      unk_1EE2B3BC0(0, v22);
      if ((v22[0] & 2) != 0)
        goto LABEL_14;
    }
    goto LABEL_42;
  }
  if (CFEqual(a2, CFSTR("VAEM_DeviceSupportsMute")))
  {
    PortOfTypeInConnectedPortsList = vaemDeviceSupportsMute();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_LineOutIsConnected")))
  {
    v16 = 1886154613;
LABEL_63:
    PortOfTypeInConnectedPortsList = vaemGetVADPortIDFromVADPortType(v16);
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_USBAudioOutputIsConnected")))
  {
    v16 = 1886745455;
    goto LABEL_63;
  }
  if (CFEqual(a2, CFSTR("VAEM_HDMIAudioOutputIsConnected")))
  {
    v16 = 1885889645;
    goto LABEL_63;
  }
  if (CFEqual(a2, CFSTR("VAEM_DisplayPortAudioOutputIsConnected")))
  {
    v16 = 1885631344;
    goto LABEL_63;
  }
  if (CFEqual(a2, CFSTR("VAEM_ThunderboltOutputIsConnected")))
  {
    v16 = 1886675567;
    goto LABEL_63;
  }
  if (CFEqual(a2, CFSTR("VAEM_HeadphoneJackIsConnected")))
  {
    v17 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v18 = byte_1EE2B2C18;
LABEL_68:
    v10 = (__CFArray *)objc_msgSend(v17, "initWithBool:", v18 != 0);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_HeadphoneJackHasInput")))
  {
    v17 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v18 = byte_1EE2B2C19;
    goto LABEL_68;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentRouteHasVolumeControl")))
  {
    PortOfTypeInConnectedPortsList = vaemCurrentRouteHasVolumeControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentRouteHasMuteControl")))
  {
    PortOfTypeInConnectedPortsList = vaemCurrentRouteHasMuteControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentRouteHasInputGainControl")))
  {
    PortOfTypeInConnectedPortsList = vaemCurrentRouteHasInputGainControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentInputDataSource")))
  {
    v10 = vaemCopyCurrentInputDataSource();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentOutputDataDestination")))
  {
    v10 = vaemCopyCurrentOutputDataDestination();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_InputDataSources")))
  {
    v10 = vaemCopyInputDataSources();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_OutputDataDestinations")))
  {
    v10 = vaemCopyOutputDataDestinations();
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_VirtualAudioCategory")))
  {
    VirtualAudioPlugInCategory = vaemGetVirtualAudioPlugInCategory();
LABEL_85:
    v10 = MXCFNumberCreateFromSInt64(VirtualAudioPlugInCategory);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("VAEM_VADInRecordingCategory")))
  {
    PortOfTypeInConnectedPortsList = vaemIsVADInRecordingCategory();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("VAEM_VirtualAudioMode")))
  {
    VirtualAudioPlugInCategory = vaemGetVirtualAudioPlugInMode();
    goto LABEL_85;
  }
  if (!CFEqual(a2, CFSTR("VAEM_DeviceInputGainScalar")))
  {
    if (CFEqual(a2, CFSTR("VAEM_ThermalGainAdjustment_Speaker")))
    {
      v21 = *(float *)&qword_1EE2B2C28;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("VAEM_ThermalGainAdjustment_Haptics")))
      {
        if (CFEqual(a2, CFSTR("VAEM_AudioInputDeviceIsAvailable")))
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v15 = byte_1EE2B2BF9;
        }
        else if (CFEqual(a2, CFSTR("VAEM_AudioInputDeviceExcludingBluetoothIsAvailable")))
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v15 = byte_1EE2B2BFA;
        }
        else if (CFEqual(a2, CFSTR("VAEM_DisallowAudioFormatChanges")))
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v15 = byte_1EE2B2C24;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("VAEM_InLongPullMode")))
          {
            if (CFEqual(a2, CFSTR("VAEM_MATAtmosIsEnabled")))
            {
              PortOfTypeInConnectedPortsList = vaemIsMATAtmosEnabled();
            }
            else
            {
              result = CFEqual(a2, CFSTR("VAEM_MATAtmosIsAvailable"));
              if (!(_DWORD)result)
                return result;
              PortOfTypeInConnectedPortsList = vaemIsMATAtmosAvailable();
            }
LABEL_20:
            v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
            if (PortOfTypeInConnectedPortsList)
              v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
            goto LABEL_6;
          }
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v15 = byte_1EE2B2C25;
        }
LABEL_25:
        if (v15)
          v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        else
          v9 = v14;
        goto LABEL_6;
      }
      v21 = *((float *)&qword_1EE2B2C28 + 1);
    }
    v10 = MXCFNumberCreateFromFloat32(v21);
    goto LABEL_7;
  }
  LODWORD(v22[0]) = 0;
  DeviceInputGainScalar = vaemGetDeviceInputGainScalar(v22);
  if (!(_DWORD)DeviceInputGainScalar)
    *a4 = MXCFNumberCreateFromFloat32(*(float *)v22);
  return DeviceInputGainScalar;
}

void __discoveryManager_appendAvailableEndpoints_block_invoke(uint64_t a1)
{
  const __CFArray *v2;
  int v3;
  __CFArray *v4;
  __CFArray *v5;
  const __CFArray *v6;
  uint64_t v7;
  int AudioSessionIDForActiveCMSession;
  int8x16_t v9;
  int8x16_t v10;
  _QWORD v11[5];
  int8x16_t v12;
  int v13;
  int v14;
  CFRange v15;

  v2 = *(const __CFArray **)(*(_QWORD *)(a1 + 32) + 240);
  if (v2 && CFArrayGetCount(v2) >= 1)
  {
    v3 = *(_DWORD *)(a1 + 56);
    if (v3 != 7)
    {
      v7 = *(_QWORD *)(a1 + 32);
      AudioSessionIDForActiveCMSession = *(_DWORD *)(a1 + 60);
      v9 = *(int8x16_t *)(a1 + 40);
      if (!AudioSessionIDForActiveCMSession)
      {
        v10 = *(int8x16_t *)(a1 + 40);
        AudioSessionIDForActiveCMSession = CMSMUtility_GetAudioSessionIDForActiveCMSession();
        v9 = v10;
      }
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __discoveryManager_iOSAppendAvailableEndpoints_block_invoke;
      v11[3] = &__block_descriptor_64_e5_v8__0l;
      v11[4] = v7;
      v13 = AudioSessionIDForActiveCMSession;
      v14 = v3;
      v12 = vextq_s8(v9, v9, 8uLL);
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v11);
    }
    v4 = *(__CFArray **)(a1 + 40);
    v5 = -[MXEndpointDescriptorCache copyAvailableEndpointsForManager:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyAvailableEndpointsForManager:", FigRoutingManagerGetEndpointManager(*MEMORY[0x1E0CA3A78]));
    if (v5)
    {
      v6 = v5;
      if (CFArrayGetCount(v5) >= 1)
      {
        v15.length = CFArrayGetCount(v6);
        v15.location = 0;
        CFArrayAppendArray(v4, v6, v15);
      }
      CFRelease(v6);
    }
  }
}

uint64_t CMSMUtility_GetAudioSessionIDForActiveCMSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v8 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v4);
      if (objc_msgSend(v5, "isActive"))
      {
        if ((objc_msgSend(v5, "currentlyControllingFlags") & 2) != 0)
          break;
      }
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (v5)
    return objc_msgSend(v5, "audioSessionID");
  else
    return 0;
}

uint64_t __discoveryManager_postNotificationToAllDiscoverers_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  int v3;
  uint64_t v4;
  const __CFArray *Copy;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  double v19;
  uint64_t result;
  double v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v23;
  const __CFAllocator *allocator;
  __CFDictionary *v25;
  uint64_t v26;
  id v27;
  _QWORD v28[18];

  v28[16] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  v23 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "now");
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = 0;
  v4 = 0;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 40) + 296);
  v25 = Mutable;
  do
  {
    MEMORY[0x1940352F8](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 256));
    v26 = v4;
    Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(*(_QWORD *)(a1 + 40) + 24 * v4 + 24));
    MEMORY[0x194035304](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 256));
    Count = CFArrayGetCount(Copy);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Copy, i);
        v10 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
        if (v10)
        {
          v11 = (const void *)v10;
          if (FigCFEqual())
          {
            v3 += FigRouteDiscovererUpdateCachedUserSelectionAvailable(v11);
          }
          else
          {
            if (FigCFEqual())
              v3 += FigRouteDiscovererUpdateCachedRouteInformation((uint64_t)v11, v27);
            if (!FigRouteDiscoveryManagerIsClientSuspendedOrTerminated((uint64_t)v11))
            {
              v12 = *(_QWORD *)(a1 + 40);
              v13 = *(const void **)(a1 + 48);
              v14 = *(const void **)(a1 + 56);
              CFRetain(v11);
              if (v13)
                CFRetain(v13);
              if (v14)
                CFRetain(v14);
              v15 = *(NSObject **)(v12 + 16);
              v28[0] = MEMORY[0x1E0C809B0];
              v28[1] = 3221225472;
              v28[2] = __discoveryManager_postNotificationForDiscoverer_block_invoke;
              v28[3] = &__block_descriptor_56_e5_v8__0l;
              v28[4] = v13;
              v28[5] = v11;
              v28[6] = v14;
              MXDispatchAsync((uint64_t)"discoveryManager_postNotificationForDiscoverer", (uint64_t)"FigRouteDiscoveryManager.m", 320, 0, 0, v15, (uint64_t)v28);
              Mutable = v25;
            }
          }
          CFRelease(v11);
        }
      }
    }
    if (Copy)
      CFRelease(Copy);
    v4 = v26 + 1;
  }
  while (v26 != 8);
  v16 = *(_QWORD *)(a1 + 40);
  MEMORY[0x1940352F8](*(_QWORD *)(v16 + 256));

  *(_QWORD *)(v16 + 272) = v27;
  MEMORY[0x194035304](*(_QWORD *)(v16 + 256));
  v17 = *(const void **)(a1 + 48);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 56);
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);

  v19 = (double)*(uint64_t *)(*(_QWORD *)(a1 + 40) + 296);
  result = objc_msgSend(v23, "timeIntervalSinceNow");
  *(double *)(*(_QWORD *)(a1 + 40) + 304) = *(double *)(*(_QWORD *)(a1 + 40) + 304)
                                            - *(double *)(*(_QWORD *)(a1 + 40) + 304) / v19
                                            - v21 / v19;
  if (dword_1EE2B3DE8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigRouteDiscovererUpdateCachedUserSelectionAvailable(const void *a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  const void *UInt32;
  const void *Value;
  CFTypeRef v11;
  const void *v12;
  uint64_t v13;
  void *v14;
  const __CFArray *v15;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(DerivedStorage + 40);
  v4 = v3 > 8;
  v5 = (1 << v3) & 0x10C;
  if (v4 || v5 == 0)
  {
    v15 = 0;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = DerivedStorage;
  v8 = *MEMORY[0x1E0C9AE00];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    v11 = CFRetain(Value);
    if (v11)
    {
      v12 = v11;
      v13 = 0;
      if (!UInt32)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  FigRouteDiscoveryManagerCopyRoutesForTypeAndAudioSessionID(v8, *(_DWORD *)(v7 + 40), *(_DWORD *)(v7 + 8), *(_QWORD *)(v7 + 24), (CFMutableArrayRef *)&cf);
  v12 = (const void *)FigRouteDiscovererCopyUserSelectionAvailable(*(_DWORD *)(v7 + 40), (CFArrayRef)cf);
  FigCFDictionarySetValue();
  v13 = 1;
  if (UInt32)
LABEL_10:
    CFRelease(UInt32);
LABEL_11:
  if (v12)
  {
    v14 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v12 == (const void *)*MEMORY[0x1E0C9AE50]);
    discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(a1, (const __CFArray *)cf, v14);
    CFRelease(v12);
    goto LABEL_16;
  }
  v15 = (const __CFArray *)cf;
LABEL_15:
  discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(a1, v15, 0);
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v13;
}

BOOL FigRouteDiscoveryManagerIsClientSuspendedOrTerminated(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t SInt32;
  CFTypeRef cf;

  cf = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(a1, CFSTR("clientPID"), *MEMORY[0x1E0C9AE00], &cf);
  SInt32 = FigCFNumberGetSInt32();
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  return MX_RunningBoardServices_GetApplicationStateForPID(SInt32, 0) - 1 < 2;
}

BOOL FigRouteDiscovererUpdateCachedRouteInformation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  int v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  int v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  NSObject *SharedQueue;
  void *v18;
  const void *v19;
  const void *v20;
  _QWORD v22[8];
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  int v33;

  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  v33 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(DerivedStorage + 8);
  v5 = (id)FigCFNumberCreateUInt32();
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = objc_msgSend(v5, "stringValue");
  v8 = *(int *)(DerivedStorage + 40);
  if (v8 > 8)
    v9 = 0;
  else
    v9 = off_1E309C828[v8];
  v10 = FigCFEqual();
  v11 = CFSTR("YES");
  if (!v10)
    v11 = CFSTR("NO");
  v12 = objc_msgSend(v6, "stringWithFormat:", CFSTR("%@+%@+%@"), v7, v9, v11);
  v13 = (void *)objc_msgSend(a2, "objectForKey:", v12);
  v14 = (id)objc_msgSend(v13, "objectForKey:", CFSTR("FigRouteDiscoverer_Endpoints_Key"));
  v15 = (id)objc_msgSend(v13, "objectForKey:", CFSTR("FigRouteDiscoverer_RouteDescriptors_Key"));
  if (v13)
  {
    v16 = v15;
  }
  else
  {
    v28 = 0;
    v29 = &v28;
    v30 = 0x2020000000;
    v31 = 0;
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __FigRouteDiscovererUpdateCachedRouteInformation_block_invoke;
    v22[3] = &unk_1E309C808;
    v23 = v4;
    v22[4] = v32;
    v22[5] = &v24;
    v22[6] = &v28;
    v22[7] = DerivedStorage;
    if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
    {
      __FigRouteDiscovererUpdateCachedRouteInformation_block_invoke((uint64_t)v22);
    }
    else
    {
      SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
      MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscovererUpdateCachedRouteInformation", (uint64_t)"FigRouteDiscoverer.m", 940, 0, 0, SharedQueue, (uint64_t)v22);
    }
    v18 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v18, "setValue:forKey:", v25[3], CFSTR("FigRouteDiscoverer_Endpoints_Key"));
    objc_msgSend(v18, "setValue:forKey:", v29[3], CFSTR("FigRouteDiscoverer_RouteDescriptors_Key"));
    objc_msgSend(a2, "setObject:forKey:", v18, v12);
    v14 = (id)objc_msgSend(v18, "objectForKey:", CFSTR("FigRouteDiscoverer_Endpoints_Key"));
    v16 = (id)objc_msgSend(v18, "objectForKey:", CFSTR("FigRouteDiscoverer_RouteDescriptors_Key"));
    v19 = (const void *)v25[3];
    if (v19)
    {
      CFRelease(v19);
      v25[3] = 0;
    }
    v20 = (const void *)v29[3];
    if (v20)
    {
      CFRelease(v20);
      v29[3] = 0;
    }
    _Block_object_dispose(&v24, 8);
    _Block_object_dispose(&v28, 8);
  }
  MEMORY[0x1940352BC](*(_QWORD *)(DerivedStorage + 64));

  *(_QWORD *)(DerivedStorage + 80) = v16;
  *(_QWORD *)(DerivedStorage + 88) = v14;
  MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 64));
  _Block_object_dispose(v32, 8);
  return v13 == 0;
}

void sub_19363A390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscovererCopyUserSelectionAvailable(int a1, CFArrayRef theArray)
{
  uint64_t v3;
  uint64_t *v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex i;
  const void *ValueAtIndex;
  OpaqueFigEndpointManager *AirPlayEndpointManager;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, uint64_t *);
  const void *v12;
  uint64_t v13;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v3 = *MEMORY[0x1E0C9AE40];
  v19 = *MEMORY[0x1E0C9AE40];
  if ((a1 & 0xFFFFFFFE) == 2)
  {
    if (!theArray || CFArrayGetCount(theArray) < 2)
    {
      v5 = 0;
      v6 = 0;
      if (!theArray)
        goto LABEL_12;
      while (1)
      {
        for (i = CFArrayGetCount(theArray); ; i = 0)
        {
          if (v5 >= i)
          {
            v15[0] = MEMORY[0x1E0C809B0];
            v15[1] = 3221225472;
            v15[2] = __FigRouteDiscovererCopyUserSelectionAvailable_block_invoke;
            v15[3] = &unk_1E3098D88;
            v15[4] = &v16;
            v15[5] = v6;
            FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v15);
          }
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
            ++v6;
          ++v5;
          if (theArray)
            break;
LABEL_12:
          ;
        }
      }
    }
    v4 = v17;
    v17[3] = *MEMORY[0x1E0C9AE50];
    goto LABEL_24;
  }
  if (a1 == 8)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) > 1)
        v3 = *MEMORY[0x1E0C9AE50];
      v4 = v17;
    }
    else
    {
      v4 = &v16;
    }
    v4[3] = v3;
    goto LABEL_24;
  }
  AirPlayEndpointManager = FigRoutingManagerInternalGetAirPlayEndpointManager();
  v4 = v17;
  if (!AirPlayEndpointManager)
  {
LABEL_24:
    v12 = (const void *)v4[3];
    if (v12)
      CFRetain(v12);
    goto LABEL_26;
  }
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(CMBaseObject, *MEMORY[0x1E0CA3A30], *MEMORY[0x1E0C9AE00], v4 + 3);
LABEL_26:
  v13 = v17[3];
  _Block_object_dispose(&v16, 8);
  return v13;
}

void sub_19363A5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscoveryManagerGetSharedQueue()
{
  uint64_t v0;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = (uint64_t)&qword_1EE2B3238;
  if (!qword_1EE2B3238)
    v0 = 8;
  return *(_QWORD *)v0;
}

OpaqueFigEndpointManager *FigRoutingManagerInternalGetAirPlayEndpointManager()
{
  return -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]);
}

OpaqueFigEndpointManager *FigRoutingManagerGetEndpointManager(uint64_t a1)
{
  return -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", a1);
}

void FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(CFTypeRef cf, CFTypeRef a2)
{
  NSObject *global_queue;
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  v5[5] = a2;
  MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange", (uint64_t)"FigRouteDiscoveryManager.m", 2591, 0, 0, global_queue, (uint64_t)v5);
}

uint64_t cmsSetIsPlaying(void *a1, int a2)
{
  char v4;
  int v5;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t ContextString;
  const char *v11;
  __CFString *CurrentAudioDestination;
  const char *v13;
  __CFString *CurrentInputVADUID;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  CFTypeRef v40;
  uint64_t v41;
  uint64_t CMBaseObject;
  void (*v43)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  CFTypeRef v46;
  const void *v47;
  _BOOL8 v48;
  uint64_t v49;
  int v50;
  MXNowPlayingAppManager *v51;
  id v52;
  __CFArray *v53;
  uint64_t v54;
  dispatch_time_t v55;
  NSObject *v56;
  int v57;
  int v58;
  int v59;
  BOOL IsSessionOnlyPlayingLocally;
  int v61;
  id v62;
  NSObject *v63;
  id v65;
  int IsContextSystemMusicAndIndependent;
  NSObject *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  NSObject *v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  id v77;
  uint64_t v78;
  int v79;
  NSObject *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  id v98;
  int updated;
  int v100;
  int v101;
  _QWORD v102[5];
  _QWORD v103[6];
  os_log_type_t type[8];
  os_log_type_t v105[8];
  CFTypeRef cf;
  _BYTE v107[12];
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  int v111;
  __int16 v112;
  uint64_t v113;
  _BYTE buf[24];
  __int128 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  const char *v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  const char *v124;
  __int16 v125;
  __CFString *v126;
  __int16 v127;
  const char *v128;
  __int16 v129;
  __CFString *v130;
  __int16 v131;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  const char *v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "currentlyControllingFlags");
  v5 = objc_msgSend(a1, "isPlaying");
  v6 = cmsCopyOverrideRoute(a1);
  if (objc_msgSend(a1, "isPlaying") == a2)
  {
LABEL_160:
    v20 = 0;
    goto LABEL_161;
  }
  if (a2)
    updated = CMSUtility_UpdateRoutingContextForSession(a1);
  else
    updated = 0;
  v101 = v5;
  v7 = MXGetSessionLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v97 = v6;
    v95 = objc_msgSend(a1, "clientName");
    v94 = objc_msgSend(a1, "audioCategory");
    v93 = objc_msgSend(a1, "audioMode");
    v8 = CMSUtility_SessionMixesWithOthers(a1);
    v9 = "Mixable";
    if (!v8)
      v9 = "NonMixable";
    v92 = v9;
    ContextString = FigRoutingManagerContextUtilities_GetContextString(objc_msgSend(a1, "routingContextUUID"));
    v11 = "starting";
    if (!a2)
      v11 = "stopping";
    v90 = v11;
    v91 = ContextString;
    CurrentAudioDestination = CMSUtility_GetCurrentAudioDestination(a1);
    if (CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(a1, "audioCategory")))
      v13 = " and input VAD: ";
    else
      v13 = "";
    v100 = a2;
    v96 = v4;
    if (CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(a1, "audioCategory")))
      CurrentInputVADUID = CMSUtility_GetCurrentInputVADUID(a1);
    else
      CurrentInputVADUID = &stru_1E30A1A48;
    if (CMSMDeviceState_RingerIsOn(1))
      v15 = "not silenced";
    else
      v15 = "silenced";
    if (objc_msgSend(a1, "silentMuted"))
      v16 = "muted";
    else
      v16 = "unmuted";
    v17 = objc_msgSend(a1, "routingContextUUID");
    if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
      v18 = "YES";
    else
      v18 = "NO";
    *(_DWORD *)buf = 136450563;
    *(_QWORD *)&buf[4] = "-CMSessionMgr-";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "cmsSetIsPlaying";
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v115) = 6057;
    WORD2(v115) = 2114;
    *(_QWORD *)((char *)&v115 + 6) = v95;
    HIWORD(v115) = 2114;
    v116 = v94;
    v117 = 2114;
    v118 = v93;
    v119 = 2082;
    v120 = v92;
    v121 = 2114;
    v122 = v91;
    v123 = 2082;
    v124 = v90;
    v125 = 2114;
    v126 = CurrentAudioDestination;
    v127 = 2082;
    v128 = v13;
    v129 = 2114;
    v130 = CurrentInputVADUID;
    v131 = 2082;
    v132 = v15;
    v133 = 2082;
    v134 = v16;
    v135 = 2113;
    v136 = v17;
    v137 = 2082;
    v138 = v18;
    v139 = 1024;
    v140 = objc_msgSend(a1, "isPlayingOutput");
    v141 = 1024;
    v142 = objc_msgSend(a1, "isSharedAVAudioSessionInstance");
    _os_log_impl(&dword_1935FC000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@' with [%{public}@/%{public}@] [%{public}s] [%{public}@] %{public}s playing to output VAD: %{public}@%{public}s%{public}@. Ringer switch state: Device is %{public}s, Session is %{public}s. RoutingContextUUID=%{private}@ NowPlayingApp:%{public}s IsPlayingOutput:%{BOOL}u IsSharedAVAudioSessionInstance:%{BOOL}u", buf, 0xAAu);
    v6 = v97;
    a2 = v100;
    v4 = v96;
  }
  if (objc_msgSend(a1, "routeSharingPolicy") == 1
    || objc_msgSend(a1, "routeSharingPolicy") == 3
    || FigRoutingManagerContextUtilities_GetContextType(objc_msgSend(a1, "routingContextUUID")) == 4)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointNames(objc_msgSend(a1, "routingContextUUID"), (CFMutableArrayRef *)&cf);
    if (dword_1EE2B3F38)
    {
      *(_DWORD *)v105 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
      CFRelease(cf);
  }
  if (!a2)
  {
    v26 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
    objc_msgSend(a1, "setWasInterruptedByNowPlayingApp:", 0);
    objc_msgSend(a1, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0);
    if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
       || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
      && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
    {
      CMSM_IDSClient_NotifyRemote_LocalIsPlayingDone(a1);
    }
    CMSUtility_SendSessionVolumeToAudioStatistics(a1, 0, v6);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "timeIntervalSince1970");
    v28 = v27;
    v29 = (double)(int)objc_msgSend(a1, "deactivateTimerDelay");
    v30 = MXGetSerialQueue();
    v31 = MEMORY[0x1E0C809B0];
    v103[0] = MEMORY[0x1E0C809B0];
    v103[1] = 3221225472;
    v103[2] = __cmsSetIsPlaying_block_invoke;
    v103[3] = &__block_descriptor_48_e5_v8__0l;
    v103[4] = v26;
    v103[5] = v28;
    objc_msgSend(a1, "setSessionDeactivateTimer:", FigRoutingManagerCreateOneShotTimer(v30, v29, (uint64_t)v103, 0, 0));
    objc_msgSend(a1, "setIsPlayingStopTime:", objc_msgSend(MEMORY[0x1E0C99D68], "date"));
    objc_msgSend(a1, "setIsPlaying:", 0);
    v32 = (double)objc_msgSend(a1, "assertionAuditTimerDelay");
    v33 = MXGetSerialQueue();
    v102[0] = v31;
    v102[1] = 3221225472;
    v102[2] = __cmsSetIsPlaying_block_invoke_2;
    v102[3] = &__block_descriptor_40_e5_v8__0l;
    v102[4] = v26;
    objc_msgSend(a1, "setSessionAssertionAuditTimer:", FigRoutingManagerCreateOneShotTimer(v33, v32, (uint64_t)v102, 0, 0));
LABEL_101:
    CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    v50 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    if (v50 == -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID")&& CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
    {
      if ((objc_msgSend(a1, "isPlaying") & 1) == 0)
      {
        v51 = +[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance");
        -[MXNowPlayingAppManager setNowPlayingAppStopTime:](v51, "setNowPlayingAppStopTime:", objc_msgSend(MEMORY[0x1E0C99D68], "date"));
      }
      v52 = CMSUtility_CopyBundleID(a1);
      -[MXAppProtectionManager handlePlayingStateChangedForNowPlayingApp:isCurrentlyPlaying:](+[MXAppProtectionManager sharedInstance](MXAppProtectionManager, "sharedInstance"), "handlePlayingStateChangedForNowPlayingApp:isCurrentlyPlaying:", v52, objc_msgSend(a1, "isPlaying"));

    }
    byte_1EE2B3C98 = CMSMUtility_SomeClientIsPlaying();
    if (sFigClusterSynchronizationManager_ClientIsPlaying)
      sFigClusterSynchronizationManager_ClientIsPlaying();
    v53 = CMSMUtility_CopyCurrentRouteTypes();
    v54 = byte_1EE2B3C98;
    if (!byte_1EE2B3C98)
    {
      if (FigCFArrayContainsValue())
      {
        v55 = dispatch_time(0, 2000000000);
        v56 = MXGetSerialQueue();
        dispatch_after(v55, v56, &__block_literal_global_217);
LABEL_112:
        if (v53)
          CFRelease(v53);
        CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange();
        objc_msgSend(a1, "audioMode");
        if (FigCFEqual())
          CMSMNotificationUtility_PostVoicePromptStyleDidChange();
        if (!CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(a1))
          goto LABEL_144;
        FigPredictedRouting_UpdatePredictedRoute(7);
        if (!objc_msgSend(a1, "isPlaying"))
        {
          FigPredictedRouting_UnmuteSessionIfMutedByPreemptivePortChange();
LABEL_144:
          if (CMSUtility_IsAudioCategoryPrimary(a1))
          {
            CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(a1);
            CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(a1);
          }
          if (CMSUtility_IsLongFormVideoSession(a1))
          {
            CMSMUtility_UpdateSomeLongFormVideoClientIsPlayingOverAirPlayVideo();
            CMSMUtility_UpdateSomeLongFormVideoClientIsPlaying();
            CMSMNotificationUtility_PostVideoStreamsDidChange();
          }
          CMScreenHandleIdleEvent(101, v101, objc_msgSend(a1, "isPlaying", v84, v87));
          if (a1)
          {
            v62 = a1;
            v63 = MXGetSerialQueue();
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = __cmsHandleIdleSleep_block_invoke;
            *(_QWORD *)&v115 = &unk_1E309F228;
            *((_QWORD *)&v115 + 1) = a1;
            LOBYTE(v116) = a2;
            MXDispatchAsync((uint64_t)"cmsHandleIdleSleep", (uint64_t)"CMSessionManager.m", 6473, 0, 0, v63, (uint64_t)buf);
          }
          if ((v4 & 2) == 0 && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
            cmsmUpdatePickableRouteDescriptionLists(1);
          CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
          if (a2)
          {
            CMSMSleep_FetchPlaybackProcessAssertion(a1);
          }
          else if (CMSUtility_HasBackgroundEntitlement(a1)
                 && objc_msgSend(a1, "applicationState") == 4)
          {
            CMSMSleep_ExtendPlaybackProcessAssertion(a1);
          }
          else
          {
            CMSMSleep_ReleasePlaybackProcessAssertion(a1);
          }
          -[MXMediaEndowmentManager refreshAssertions](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "refreshAssertions");
          goto LABEL_160;
        }
        if (!MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled())
          goto LABEL_139;
        if ((objc_msgSend(a1, "hasAudioCategory:", CFSTR("MediaPlayback")) & 1) != 0
          || (objc_msgSend(a1, "hasAudioCategory:", CFSTR("MediaPlaybackNoSpeaker")) & 1) != 0
          || (objc_msgSend(a1, "hasAudioCategory:", CFSTR("Audio/Video")) & 1) != 0
          || (objc_msgSend(a1, "hasAudioCategory:", CFSTR("SoloAmbientSound")) & 1) != 0)
        {
          v57 = 1;
        }
        else
        {
          v57 = objc_msgSend(a1, "hasAudioCategory:", CFSTR("AmbientSound"));
        }
        if ((objc_msgSend(a1, "hasAudioMode:", CFSTR("VoicePrompt"), v84, v87) & 1) != 0
          || (objc_msgSend(a1, "hasAudioMode:", CFSTR("Measurement")) & 1) != 0
          || (objc_msgSend(a1, "hasAudioMode:", CFSTR("Raw")) & 1) != 0
          || (objc_msgSend(a1, "hasAudioMode:", CFSTR("Enrollment")) & 1) != 0
          || (v58 = objc_msgSend(a1, "hasAudioMode:", CFSTR("LowLatency")), !v57)
          || v58)
        {
          if (!objc_msgSend(a1, "hasAudioCategory:", CFSTR("PlayAndRecord"))
            || !objc_msgSend(a1, "hasAudioMode:", CFSTR("Default")))
          {
            CMSUtility_IsSessionOnlyPlayingLocally(a1);
            goto LABEL_139;
          }
          v59 = objc_msgSend(a1, "isPlayingOutput");
        }
        else
        {
          v59 = 1;
        }
        IsSessionOnlyPlayingLocally = CMSUtility_IsSessionOnlyPlayingLocally(a1);
        if (v59 && IsSessionOnlyPlayingLocally)
        {
LABEL_143:
          FigPredictedRouting_MuteSessionIfPreemptivePortChanged((uint64_t)a1);
          goto LABEL_144;
        }
LABEL_139:
        if (!MX_FeatureFlags_IsCorianderEnabled())
          goto LABEL_144;
        if (CMSMDeviceState_IsHomePodHub())
          goto LABEL_144;
        if (!CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
          goto LABEL_144;
        v61 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
        if (v61 != -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID"))goto LABEL_144;
        goto LABEL_143;
      }
      v54 = byte_1EE2B3C98;
    }
    CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(v54);
    goto LABEL_112;
  }
  if (CMSUtility_IsAllowedToStartPlaying(a1))
  {
    if (objc_msgSend(a1, "isActive") && !updated
      || (v20 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, 2, 0), !(_DWORD)v20))
    {
      if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)
        || !CMSUtility_PlaysToCarMainAudio(a1)
        || (!objc_msgSend(a1, "dontTakeOverHardware") ? (v21 = 2) : (v21 = 8),
            v20 = cmsBeginInterruptionGuts(a1, 0, v21),
            !(_DWORD)v20))
      {
        if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v84, v87), "isAirPlaySession:", a1)&& (objc_msgSend(a1, "reporterStarted") & 1) == 0&& !objc_msgSend(a1, "sessionDeactivateTimer"))
        {
          CMSUtility_StartReporterWithAudioStatistics(a1);
        }
        CMSUtility_SendSessionVolumeToAudioStatistics(a1, 1, v6);
        if (objc_msgSend(a1, "sessionDeactivateTimer"))
        {
          dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "sessionDeactivateTimer"));
          objc_msgSend(a1, "setSessionDeactivateTimer:", 0);
          if (dword_1EE2B3F38)
          {
            LODWORD(cf) = 0;
            v105[0] = OS_LOG_TYPE_DEFAULT;
            v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v23 = cf;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              v24 = v23;
            else
              v24 = v23 & 0xFFFFFFFE;
            if (v24)
            {
              v25 = objc_msgSend(a1, "clientName");
              *(_DWORD *)v107 = 136315394;
              *(_QWORD *)&v107[4] = "cmsSetIsPlaying";
              v108 = 2114;
              v109 = v25;
              LODWORD(v88) = 22;
              v85 = v107;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        if (objc_msgSend(a1, "sessionAssertionAuditTimer", v85, v88))
        {
          dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "sessionAssertionAuditTimer"));
          objc_msgSend(a1, "setSessionAssertionAuditTimer:", 0);
        }
        objc_msgSend(a1, "setIsPlayingStartTime:", objc_msgSend(MEMORY[0x1E0C99D68], "date"));
        objc_msgSend(a1, "setIsPlaying:", 1);
        if (CMSUtility_IsAllowedToFadeInTemporarily(a1))
          CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff();
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 3);
        if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
           || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(a1);
        }
        cmsmUpdateFakeSharedAudioRouteAsPicked(0, 0, 0, 1);
        if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
          cmsmUpdateInEarBasedPlaybackState(0, 0, 1);
        cmsTryToTakeControl(a1);
        -[MXSessionManager duckSessionIfDuckerIsActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "duckSessionIfDuckerIsActive:", a1);
        v38 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
        if (!CMSMDeviceState_IsHomePodHub()
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)
          && objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue") != v38)
        {
          v65 = CMSMNP_CopyNowPlayingAppSession();
          if (v65
            && (IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(a1, "routingContextUUID")),
                IsContextSystemMusicAndIndependent != FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(v65, "routingContextUUID")))
            && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(v65, "routingContextUUID")) == 1)
          {
            if (dword_1EE2B3F38)
            {
              v98 = v6;
              LODWORD(cf) = 0;
              v105[0] = OS_LOG_TYPE_DEFAULT;
              v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v68 = cf;
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                v69 = v68;
              else
                v69 = v68 & 0xFFFFFFFE;
              if (v69)
              {
                v70 = objc_msgSend(a1, "clientName");
                v71 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                v72 = objc_msgSend(v65, "clientName");
                *(_DWORD *)v107 = 136315906;
                *(_QWORD *)&v107[4] = "cmsSetIsPlaying";
                v108 = 2114;
                v109 = v70;
                v110 = 1024;
                v111 = v71;
                v112 = 2114;
                v113 = v72;
                LODWORD(v89) = 38;
                v86 = v107;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v6 = v98;
            }
          }
          else if (CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
                 && !CMSUtility_IsSessionWithPIDAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")))
          {
            if (dword_1EE2B3F38)
            {
              LODWORD(cf) = 0;
              v105[0] = OS_LOG_TYPE_DEFAULT;
              v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v81 = cf;
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                v82 = v81;
              else
                v82 = v81 & 0xFFFFFFFE;
              if (v82)
              {
                v83 = objc_msgSend(a1, "clientName");
                *(_DWORD *)v107 = 136315394;
                *(_QWORD *)&v107[4] = "cmsSetIsPlaying";
                v108 = 2114;
                v109 = v83;
                LODWORD(v89) = 22;
                v86 = v107;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else
          {
            if (dword_1EE2B3F38)
            {
              LODWORD(cf) = 0;
              v105[0] = OS_LOG_TYPE_DEFAULT;
              v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v75 = cf;
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                v76 = v75;
              else
                v76 = v75 & 0xFFFFFFFE;
              if (v76)
              {
                v77 = v65;
                v78 = objc_msgSend(a1, "clientName");
                v79 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                *(_DWORD *)v107 = 136315650;
                *(_QWORD *)&v107[4] = "cmsSetIsPlaying";
                v108 = 2114;
                v109 = v78;
                v65 = v77;
                v110 = 1024;
                v111 = v79;
                LODWORD(v89) = 28;
                v86 = v107;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v86, v89), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), 0, 6);
          }

        }
        v39 = objc_msgSend((id)objc_msgSend(a1, "clientPID", v86, v89), "intValue");
        if (v39 == -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID")&& (CMSUtility_IsLongFormVideoSession(a1)|| CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1)))
        {
          v40 = CMSMUtility_CopySystemAudioRoutingContextUUID();
          *(_QWORD *)v107 = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v40, 0, (uint64_t)v107);
          if (FigRoutingManagerIsEndpointOfType(*(uint64_t *)v107))
          {
            cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
            v41 = *MEMORY[0x1E0C9AE00];
            CMBaseObject = FigEndpointGetCMBaseObject();
            v43 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v43)
              v43(CMBaseObject, *MEMORY[0x1E0CA42E8], v41, &cf);
            *(_QWORD *)type = 0;
            *(_QWORD *)v105 = 0;
            v44 = FigEndpointGetCMBaseObject();
            v45 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
            if (v45)
            {
              v45(v44, *MEMORY[0x1E0CA40A8], v41, v105);
              if (*(_QWORD *)v105)
                CFNumberGetValue(*(CFNumberRef *)v105, kCFNumberSInt64Type, type);
            }
            v46 = CMSMUtility_CopySystemMusicRoutingContextUUID();
            v47 = v46;
            if (cf == (CFTypeRef)*MEMORY[0x1E0C9AE50]
              && FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v46)
              && (type[0] & 1) == 0)
            {
              if (v47)
                CFRetain(v47);
              if (*(_QWORD *)v107)
                CFRetain(*(CFTypeRef *)v107);
              v73 = MXGetSerialQueue();
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = __cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic_block_invoke;
              *(_QWORD *)&v115 = &__block_descriptor_48_e5_v8__0l;
              *((_QWORD *)&v115 + 1) = *(_QWORD *)v107;
              v116 = (uint64_t)v47;
              MXDispatchAsync((uint64_t)"cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic", (uint64_t)"CMSessionManager.m", 5930, 0, 0, v73, (uint64_t)buf);
            }
            if (*(_QWORD *)v105)
            {
              CFRelease(*(CFTypeRef *)v105);
              *(_QWORD *)v105 = 0;
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (v47)
              CFRelease(v47);
          }
          if (*(_QWORD *)v107)
          {
            CFRelease(*(CFTypeRef *)v107);
            *(_QWORD *)v107 = 0;
          }
          if (v40)
            CFRelease(v40);
        }
        v48 = -[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAirPlaySession:", a1);
        if (!v48)
          FigRoutingContextUtilities_LogCurrentState(v48, v49);
        CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(a1, "routingContextUUID"));
        goto LABEL_101;
      }
    }
  }
  else
  {
    LODWORD(cf) = 0;
    v105[0] = OS_LOG_TYPE_DEFAULT;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v35 = cf;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      v36 = v35;
    else
      v36 = v35 & 0xFFFFFFFE;
    if (v36)
    {
      v37 = objc_msgSend(a1, "clientName");
      *(_DWORD *)v107 = 136315394;
      *(_QWORD *)&v107[4] = "cmsSetIsPlaying";
      v108 = 2114;
      v109 = v37;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v20 = 4294950316;
  }
LABEL_161:
  if (v6)
    CFRelease(v6);
  CMSUtility_UpdateBTLowLatencyMode();
  cmsUpdateMuteStatus(a1);
  CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
  return v20;
}

BOOL CMSUtility_IsSessionOnlyPlayingLocally(void *a1)
{
  int IsOnlyRoutedToLocalAirPlayEndpoint;

  if (CMSMDeviceState_IsHomePodHub())
  {
    if (objc_msgSend(a1, "shadowingAudioSessionID"))
      return 0;
    if (FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(objc_msgSend(a1, "routingContextUUID")))
      return 1;
    IsOnlyRoutedToLocalAirPlayEndpoint = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalAirPlayEndpoint(objc_msgSend(a1, "routingContextUUID"));
  }
  else
  {
    IsOnlyRoutedToLocalAirPlayEndpoint = CMSUtility_IsPlayingToDefaultVAD(a1);
  }
  return IsOnlyRoutedToLocalAirPlayEndpoint != 0;
}

id CMSMUtility_CreateAudioQueueOptionsDictionary(void *a1)
{
  id v2;
  float FadeInDurationForPlaybackHandoff;
  float v4;
  float v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  void *v13;
  float v14;
  float v15;
  id v16;
  double v17;
  void *v18;
  id v19;
  double v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  FadeInDurationForPlaybackHandoff = 0.0;
  if (MX_FeatureFlags_IsHandoffEnabled() && CMSUtility_IsAllowedToFadeInTemporarily(a1))
    FadeInDurationForPlaybackHandoff = CMSMUtility_GetFadeInDurationForPlaybackHandoff();
  if (objc_msgSend(a1, "isDucked") && (objc_msgSend(a1, "duckedOnVAD") & 1) == 0)
  {
    objc_msgSend(a1, "audioQueueDuckVolume");
    v4 = v14;
    objc_msgSend(a1, "audioQueueFadeDuration");
    FadeInDurationForPlaybackHandoff = v15;
    v5 = 0.0;
  }
  else
  {
    v4 = 1.0;
    v5 = 0.0;
    if (CMSUtility_IsAudioCategoryRingtone(a1))
    {
      if (vaemStarkAudioPortIsCurrentlyActive())
      {
        v6 = CMSMUtility_CopyCarPlaySession();
        if (v6)
        {

          if (MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled())
          {
            FigGetCFPreferenceDoubleWithDefault();
            *(float *)&v7 = v7;
            FadeInDurationForPlaybackHandoff = 10.0;
            if (*(float *)&v7 < 10.0)
            {
              FigGetCFPreferenceDoubleWithDefault();
              FadeInDurationForPlaybackHandoff = v8;
            }
            FigGetCFPreferenceDoubleWithDefault();
            *(float *)&v9 = v9;
            v5 = 1.0;
            if (*(float *)&v9 < 1.0)
            {
              FigGetCFPreferenceDoubleWithDefault();
              v5 = v10;
            }
            v11 = objc_alloc(MEMORY[0x1E0CB37E8]);
            *(float *)&v12 = v5;
            v13 = (void *)objc_msgSend(v11, "initWithFloat:", v12);
            objc_msgSend(v2, "setObject:forKey:", v13, CFSTR("AsyncFadeInitialVolume"));

          }
        }
      }
    }
  }
  v16 = objc_alloc(MEMORY[0x1E0CB37E8]);
  *(float *)&v17 = FadeInDurationForPlaybackHandoff;
  v18 = (void *)objc_msgSend(v16, "initWithFloat:", v17);
  v19 = objc_alloc(MEMORY[0x1E0CB37E8]);
  *(float *)&v20 = v4;
  v21 = (void *)objc_msgSend(v19, "initWithFloat:", v20);
  objc_msgSend(v2, "setObject:forKey:", v18, CFSTR("FadeDuration"));
  objc_msgSend(v2, "setObject:forKey:", v21, CFSTR("DuckVolume"));
  v22 = objc_msgSend(a1, "silentMuted");
  v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", objc_msgSend(a1, "silentMuted"));
  objc_msgSend(v2, "setObject:forKey:", v23, CFSTR("IsSilentMuted"));

  if (v4 != 1.0 || FadeInDurationForPlaybackHandoff != 0.0 || (v5 != 0.0 ? (v24 = 1) : (v24 = v22), v24 == 1))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v2;
}

NSString *CMSUtility_IsAllowedToFadeInTemporarily(void *a1)
{
  int IsHandoffEnabled;
  NSString *result;

  IsHandoffEnabled = MX_FeatureFlags_IsHandoffEnabled();
  result = 0;
  if (a1)
  {
    if (IsHandoffEnabled)
    {
      result = (NSString *)objc_msgSend(a1, "displayID");
      if (result)
      {
        result = -[MXSessionManager appAllowedToFadeInTemporarily](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "appAllowedToFadeInTemporarily");
        if (result)
        {
          objc_msgSend(a1, "displayID");
          -[MXSessionManager appAllowedToFadeInTemporarily](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "appAllowedToFadeInTemporarily");
          result = (NSString *)FigCFEqual();
          if ((_DWORD)result)
          {
            objc_msgSend(a1, "audioCategory");
            return (NSString *)(FigCFEqual() != 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t MX_FeatureFlags_IsHandoffEnabled()
{
  return _os_feature_enabled_impl();
}

id CMSMUtility_CreateCurrentlyAirPlayingVideoStreamsDictionary(uint64_t a1, uint64_t a2)
{
  id v4;
  NSPointerArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CFTypeRef cf;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  cf = 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v6 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (CMSUtility_IsLongFormVideoSession(v10)
          && objc_msgSend(v10, "isPlaying")
          && objc_msgSend(v10, "isActiveOverAirPlayVideo")
          && (objc_msgSend(v10, "isAudioOnlyAirPlayVideoActive") & 1) == 0)
        {
          if (objc_msgSend(v10, "displayID"))
            objc_msgSend(v4, "setObject:forKey:", objc_msgSend(v10, "displayID"), a1);
          FigRoutingManagerContextUtilities_CopyPickedEndpointNames(objc_msgSend(v10, "routingContextUUID"), (CFMutableArrayRef *)&cf);
          if (cf)
          {
            if ((unint64_t)objc_msgSend((id)cf, "count") >= 2)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(v4, "setObject:forKey:", cf, a2, v13, v14);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
          goto LABEL_20;
        }
      }
      v7 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_20:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v4;
}

uint64_t CMSMUtility_ShouldChangeMainVolume(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int ContextType;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex v14;
  const void *v15;
  _BOOL4 IsEndpointSelfOnlyLocalAirPlay;
  uint64_t v17;
  NSObject *v18;
  BOOL v19;
  int v20;
  _BOOL4 IsClusterLocalEndpoint;
  NSObject *v22;
  NSObject *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v26;
  uint64_t v27;
  CFArrayRef v28;
  CFArrayRef theArray[21];

  theArray[20] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  ContextType = FigRoutingManagerContextUtilities_GetContextType(objc_msgSend(a1, "routingContextUUID"));
  if (ContextType > 4 || ((1 << ContextType) & 0x1A) == 0)
    return 0;
  theArray[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints(objc_msgSend(a1, "routingContextUUID"), (uint64_t)theArray);
  if (!theArray[0])
    return 0;
  Count = CFArrayGetCount(theArray[0]);
  if (Count == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 0);
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
LABEL_49:
      v17 = 0;
      goto LABEL_55;
    }
    v28 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v28);
    v14 = (CFIndex)v28;
    if (!v28 || (v14 = CFArrayGetCount(v28), v14 != 1))
    {
      if (a4)
        v19 = 1;
      else
        v19 = v14 <= 1;
      v20 = !v19;
LABEL_43:
      if (v28)
        CFRelease(v28);
      if (v20)
      {
LABEL_46:
        v28 = 0;
        PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v26, v27), "getUncustomizedCategory:", a3), 0, &v28, 0);
        if (CMSessionMgrIsVolumeChangeTriggered(a2) && dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if ((a2 - 11) < 2)
          v17 = FigCFEqual();
        else
          v17 = (a2 - 1) <= 1;
        if (v28)
          CFRelease(v28);
        goto LABEL_55;
      }
      goto LABEL_49;
    }
    v15 = CFArrayGetValueAtIndex(v28, 0);
    IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)v15);
    if (!a4 && IsEndpointSelfOnlyLocalAirPlay)
    {
      if (dword_1EE2B3F38)
        goto LABEL_41;
      goto LABEL_42;
    }
    IsClusterLocalEndpoint = FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v15);
    if (a4 || !IsClusterLocalEndpoint)
    {
      if (a4)
        goto LABEL_42;
      if (!dword_1EE2B3F38)
        goto LABEL_39;
    }
    else
    {
      if (FigRoutingManagerIsEndpointOfSubtype((uint64_t)v15))
      {
        if (dword_1EE2B3F38)
          goto LABEL_41;
        goto LABEL_42;
      }
      if (!FigRoutingManagerIsEndpointOfSubtype((uint64_t)v15))
        goto LABEL_42;
      if (!CMSMDeviceState_ItsAnAppleTV())
      {
        if (dword_1EE2B3F38)
        {
LABEL_41:
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_42:
        v20 = 0;
        goto LABEL_43;
      }
      if (!dword_1EE2B3F38)
      {
LABEL_39:
        v20 = 1;
        goto LABEL_43;
      }
    }
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    v20 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_43;
  }
  v17 = 0;
  if (!a4 && Count >= 2)
  {
    if (FigRoutingManagerAreAllEndpointsBluetoothShareable(theArray[0]))
    {
      if (dword_1EE2B3F38)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_46;
    }
    goto LABEL_49;
  }
LABEL_55:
  if (theArray[0])
    CFRelease(theArray[0]);
  return v17;
}

uint64_t CMSUtility_UpdateRoutingContextForSession(void *a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CMSMDeviceState_IsHomePodHub())
    return 0;
  if (objc_msgSend(a1, "routeSharingPolicy"))
    return 0;
  if (objc_msgSend(a1, "routingContextSetByClient"))
  {
    objc_msgSend(a1, "routingContextUUID");
    if (FigCFEqual())
      return 0;
  }
  objc_msgSend(a1, "routingContextUUID");
  if (FigCFEqual())
  {
    if (CMSUtility_IsLongFormVideoSession(a1))
      return 0;
  }
  if (!CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
    || CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
  {
    if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
    {
      if (FigGetCFPreferenceNumberWithDefault())
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      objc_msgSend(a1, "routingContextUUID");
      if (!FigCFEqual())
      {
        objc_msgSend(a1, "setRoutingContextUUID:", qword_1EE2B3D08);
        objc_msgSend(a1, "updateRouteSharingPolicy:setByClient:", 1, 0);
        if (dword_1EE2B3F38)
        {
          v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_25;
      }
      return 0;
    }
    objc_msgSend(a1, "routingContextUUID");
    if (FigCFEqual())
      return 0;
LABEL_24:
    objc_msgSend(a1, "setRoutingContextUUID:", qword_1EE2B3CF0, v6, v7);
    objc_msgSend(a1, "updateRouteSharingPolicy:setByClient:", 0, 0);
LABEL_25:
    cmsutility_handleRoutingContextChanged(a1);
    return 1;
  }
  objc_msgSend(a1, "routingContextUUID");
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    if (CMSMDeviceState_ItsAHomePod())
      return 0;
    if (dword_1EE2B3F38)
    {
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t CMSMDeviceState_IsHomePodHub()
{
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __CMSMDeviceState_IsHomePodHub_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (CMSMDeviceState_IsHomePodHub_sOnce != -1)
    dispatch_once(&CMSMDeviceState_IsHomePodHub_sOnce, block);
  return 0;
}

void *CMSUtility_IsLongFormVideoSession(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    return (void *)(objc_msgSend(result, "routeSharingPolicy") == 3
                 || -[MXSessionManager isLongFormVideoApp:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isLongFormVideoApp:", objc_msgSend(v1, "displayID")));
  }
  return result;
}

uint64_t FigRoutingManagerContextUtilities_GetContextType(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[3];
  int v13;

  if (!a1)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v2 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v13 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v3 = 504;
  v4 = *(NSObject **)v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __FigRoutingManagerContextUtilities_GetContextType_block_invoke;
  v7[3] = &unk_1E3099640;
  v7[6] = v2;
  v7[7] = a1;
  v7[4] = v12;
  v7[5] = &v8;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetContextType", (uint64_t)"FigRoutingManagerContextUtilities.m", 3988, 0, 0, v4, (uint64_t)v7);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v12, 8);
  return v5;
}

void sub_19363D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpoints_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2810, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19363D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CMSMUtility_GetCMSessionWithDisplayID(uint64_t a1)
{
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
LABEL_4:
    v5 = 0;
    while (1)
    {
      if (*(_QWORD *)v9 != v4)
        objc_enumerationMutation(v1);
      v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v5);
      objc_msgSend(v6, "displayID");
      if (FigCFEqual())
        break;
      if (v3 == ++v5)
      {
        v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v3)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v6 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(void *a1)
{
  return CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 1);
}

void cmsutility_handleRoutingContextChanged(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a1, "isActive", v5, v6))
    cmsBeginInterruptionGuts(a1, 0, 2);
  cmsUpdateAudioBehavior(a1);
  CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(a1, "routingContextUUID"));
  v3 = a1;
  v4 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"cmsutility_handleRoutingContextChanged", (uint64_t)"CMSessionManager_SessionUtilities.m", 5177, 0, 0, v4, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
  CMSMNotificationUtility_PostActiveAudioRouteDidChange(a1, (const void *)qword_1EE2B3D20, 0);
}

uint64_t cmsSetAudioMode(void *a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t VADModeFromFigModeName;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  id CustomizedCategory;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (id)objc_msgSend(a1, "audioMode");
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  if (CMSMUtility_IsModeValidForCategory((const void *)objc_msgSend(a1, "audioCategory")))
  {
    if (objc_msgSend(a1, "mode") == (_DWORD)VADModeFromFigModeName)
    {
      objc_msgSend(a1, "audioMode");
      if (FigCFEqual())
        goto LABEL_20;
    }
    if (!objc_msgSend(a1, "isSharePlayCallSession")
      || CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(objc_msgSend(a1, "audioCategory")))
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setAudioMode:", a2, v16, v17);
      objc_msgSend(a1, "setDefaultVPChatMode:", 0);
      objc_msgSend(a1, "setMode:", VADModeFromFigModeName);
      CustomizedCategory = CMSUtility_GetCustomizedCategory(a1);
      v11 = objc_msgSend(a1, "interruptionStyle");
      if (objc_msgSend(a1, "interruptionStyleSetByClient"))
        v12 = objc_msgSend(a3, "objectForKey:", CFSTR("InterruptionStyle")) == 0;
      else
        v12 = 0;
      -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", v12);
      v13 = cmsSetAudioCategory(a1, CustomizedCategory, 1, a3);
      if ((_DWORD)v13)
      {
        v9 = v13;
        objc_msgSend(a1, "setAudioMode:", v6);
        objc_msgSend(a1, "setMode:", CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v6));
        goto LABEL_24;
      }
      objc_msgSend(a1, "updateDefaultInterruptionFadeDuration:", v6);
      -[MXNowPlayingAppManager setIgnoreNowPlayingAppUpdates:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setIgnoreNowPlayingAppUpdates:", 0);
      if (v12)
        objc_msgSend(a1, "setInterruptionStyleAtClientRequest:", v11);
      CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(a1, "routingContextUUID"));
      CMSMNotificationUtility_PostSessionAudioModeDidChange(a1);
      if (objc_msgSend(a1, "hasAudioMode:", CFSTR("Beacon")))
      {
        objc_msgSend(a1, "setMakesMusicResume:", 0);
        v9 = 0;
        if (MX_FeatureFlags_CanClientsSetEmergencyAlertPriority())
          goto LABEL_24;
        if (objc_msgSend(a1, "clientPriority"))
          objc_msgSend(a1, "setClientPriority:", 0);
      }
LABEL_20:
      v9 = 0;
      goto LABEL_24;
    }
    if (dword_1EE2B3F38)
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v9 = 4294951615;
  }
  else
  {
    v9 = 4294954315;
  }
LABEL_24:
  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
    && objc_msgSend(a1, "isActive")
    && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
  {
    -[MXSessionManager applyUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "applyUplinkMute:", a1);
  }

  return v9;
}

uint64_t CMSMUtility_IsModeValidForCategory(const void *a1)
{
  uint64_t result;
  int IsPlayAndRecordCategory;

  if (FigCFEqual())
    return 1;
  if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", a1))
  {
    result = 0;
    goto LABEL_16;
  }
  if (FigCFEqual())
  {
    result = !CMSMUtility_IsCategoryInputOnly(a1);
    goto LABEL_16;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_15;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (FigCFEqual() || FigCFEqual())
      goto LABEL_25;
    goto LABEL_32;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
LABEL_31:
    result = CMSMUtility_IsRecordingCategory(a1);
    goto LABEL_16;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (CMSMUtility_IsRecordingCategory(a1)
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      goto LABEL_25;
    }
LABEL_32:
    IsPlayAndRecordCategory = FigCFEqual();
LABEL_33:
    result = IsPlayAndRecordCategory != 0;
    goto LABEL_16;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_43;
  }
  if (FigCFEqual())
    goto LABEL_15;
  if (FigCFEqual())
  {
    if (CMSMUtility_IsCategoryInputOnly(a1))
    {
LABEL_25:
      result = 1;
      goto LABEL_16;
    }
    IsPlayAndRecordCategory = CMSMUtility_IsPlayAndRecordCategory((uint64_t)a1);
    goto LABEL_33;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_43:
    result = FigCFEqual();
    goto LABEL_16;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_15:
    result = CMSMUtility_IsPlayAndRecordCategory((uint64_t)a1);
    goto LABEL_16;
  }
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_31;
LABEL_16:
  if ((dword_1EE2B3C7C & 2) != 0)
    return (_DWORD)result || FigCFEqual() != 0;
  return result;
}

void CMSMUtility_InformAirPlayOfAudioModeIfNecessary(uint64_t a1)
{
  CFTypeRef v1;
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)
    || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    v1 = CMSMUtility_CopyMostRelevantAirPlayAudioModeForRoutingContext();
    FigEndpointUtility_SetPropertyOnEndpointStreams();
    if (v1)
      CFRelease(v1);
  }
  if (cf)
    CFRelease(cf);
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  if (!a3)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v6 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v7 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v7 = 504;
  v8 = *(NSObject **)v7;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex_block_invoke;
  v11[3] = &unk_1E30995C8;
  v11[4] = &v12;
  v11[5] = v6;
  v11[6] = a1;
  v11[7] = a2;
  v11[8] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 2732, 0, 0, v8, (uint64_t)v11);
  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_19363E55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostSessionAudioModeDidChange(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = a1;
  v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioModeDidChange_block_invoke;
  v4[3] = &unk_1E3099900;
  v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioModeDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 61, 0, 0, v3, (uint64_t)v4);
}

uint64_t cmsmUpdateFakeSharedAudioRouteAsPicked(int a1, int a2, int a3, int a4)
{
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  MEMORY[0x1940352BC](gCMSM);
  v8 = word_1EE2B3C40;
  if (a2 == 1919184754)
  {
    LOBYTE(word_1EE2B3C40) = 1;
    MEMORY[0x1940352C8](gCMSM);
    if (v8 == 1)
      return 0;
    cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 0, 0, 0, 1);
  }
  else
  {
    if (!(_BYTE)word_1EE2B3C40 || !(a3 | a1 | a4))
    {
      MEMORY[0x1940352C8](gCMSM);
      return 0;
    }
    LOBYTE(word_1EE2B3C40) = 0;
    MEMORY[0x1940352C8](gCMSM);
  }
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void cmsUpdateMuteStatus(void *a1)
{
  __CFArray *Mutable;
  int ShouldSilentMute;
  __CFDictionary *DictionaryForMuteStatusUpdate;
  __CFDictionary *v5;
  NSPointerArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  int v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  void *Value;
  CFNumberRef v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    ShouldSilentMute = CMSUtility_ShouldSilentMute(a1);
    DictionaryForMuteStatusUpdate = CMSMUtility_CreateDictionaryForMuteStatusUpdate(a1, ShouldSilentMute);
    if (DictionaryForMuteStatusUpdate)
    {
      v5 = DictionaryForMuteStatusUpdate;
      CFArrayAppendValue(Mutable, DictionaryForMuteStatusUpdate);
      CFRelease(v5);
    }
    if (!Mutable)
      return;
LABEL_16:
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, i);
        Value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("session"));
        FigCFDictionaryGetInt32IfPresent();
        v18 = CMSUtility_CopyFadeDuration(a1, 0, 0);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(Value, 0, 0, 0, 0, v18, 0, 0);
        if (v18)
          CFRelease(v18);
      }
    }
    CFRelease(Mutable);
    return;
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v7 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v22;
    do
    {
      for (j = 0; j != v8; ++j)
      {
        if (*(_QWORD *)v22 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
        v12 = CMSUtility_ShouldSilentMute(v11);
        v13 = CMSMUtility_CreateDictionaryForMuteStatusUpdate(v11, v12);
        if (v13)
        {
          v14 = v13;
          CFArrayAppendValue(Mutable, v13);
          CFRelease(v14);
        }
      }
      v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v8);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (Mutable)
    goto LABEL_16;
}

void CMSUtility_UpdateBTLowLatencyMode()
{
  __CFArray *v0;
  int v1;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  CFNumberRef v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, __CFString *, CFNumberRef);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int valuePtr;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v0 = CMSMUtility_CopyCurrentRouteTypes();
  v1 = FigCFArrayContainsValue();
  if (!v1)
    CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode = 0;
  if (v0)
    CFRelease(v0);
  if (v1)
  {
    valuePtr = 0;
    MEMORY[0x1940352BC](gCMSM);
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v15;
      while (1)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v15 != v6)
            objc_enumerationMutation(v2);
          v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
          if (objc_msgSend(v8, "isPlaying") && (objc_msgSend(v8, "doesntActuallyPlayAudio") & 1) == 0)
          {
            objc_msgSend(v8, "audioCategory");
            if (FigCFEqual())
            {
              v5 = 2;
LABEL_17:
              valuePtr = v5;
              goto LABEL_18;
            }
            if (byte_1EE2B3D18)
            {
              v5 = 3;
              goto LABEL_17;
            }
            if ((objc_msgSend(v8, "isSharePlayCallSession") & 1) != 0
              || objc_msgSend(v8, "isSharePlayMediaSession"))
            {
              v5 = 8;
              valuePtr = 8;
              goto LABEL_27;
            }
          }
LABEL_18:
          ++v7;
        }
        while (v4 != v7);
        v9 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
        v4 = v9;
        if (!v9)
          goto LABEL_27;
      }
    }
    v5 = 0;
LABEL_27:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    MEMORY[0x1940352C8](gCMSM);
    if (v5 != CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode)
    {
      v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode = valuePtr;
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v13 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v13)
        v13(CMBaseObject, CFSTR("VAEM_BTLowLatencyMode"), v10);
      if (v10)
        CFRelease(v10);
    }
  }
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote()
{
  return byte_1EE2B3049;
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
{
  return byte_1EE2B3048;
}

__CFDictionary *CMSMUtility_CreateDictionaryForMuteStatusUpdate(void *a1, int a2)
{
  __CFDictionary *Mutable;
  int v5;

  if (objc_msgSend(a1, "silentMuted") == a2)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = objc_msgSend(a1, "silentMuted");
    if (a2)
    {
      if ((v5 & 1) != 0)
        return Mutable;
    }
    else if (!v5)
    {
      return Mutable;
    }
    objc_msgSend(a1, "setSilentMuted:", a2 != 0);
    CFDictionarySetValue(Mutable, CFSTR("session"), a1);
    FigCFDictionarySetInt32();
  }
  return Mutable;
}

uint64_t CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(uint64_t result)
{
  int v1;

  v1 = result;
  if (!(_DWORD)result)
  {
    result = CMSMUtility_SomeNonMixableClientIsPlaying();
    v1 = result;
  }
  if (CMSMNotificationUtility_PostSomeClientIsPlayingDidChange_cachedSomeClientIsPlaying != v1)
  {
    result = +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeClientIsPlayingDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1 != 0), CFSTR("IsPlaying"), 0), 0);
    CMSMNotificationUtility_PostSomeClientIsPlayingDidChange_cachedSomeClientIsPlaying = v1;
  }
  return result;
}

void CMSMNotificationUtility_PostActiveAudioRouteDidChange(void *a1, const void *a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];
  os_log_type_t type;
  int v13;
  char v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v15 = 0;
  FigCFDictionaryGetIntIfPresent();
  CMSMUtility_MapCMSRouteChangeReasonToString(0);
  v14 = 0;
  FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(qword_1EE2B3D08);
  FigRoutingManagerContextUtilities_GetContextString((uint64_t)a3);
  if (FigCFDictionaryGetBooleanIfPresent())
  {
    if (dword_1EE2B3F38)
      goto LABEL_6;
  }
  else if (dword_1EE2B3F38)
  {
LABEL_6:
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSUtility_AreRoutingContextsEquivalent(qword_1EE2B3CF0, (uint64_t)a3))
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("ActiveAudioRouteDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v14 != 0, v9, v10), CFSTR("ShouldPause"), 0), 0);
  v7 = a1;
  CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v8 = MXGetNotificationSenderQueue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CMSMNotificationUtility_PostActiveAudioRouteDidChange_block_invoke;
  v11[3] = &unk_1E30995F0;
  v11[4] = a1;
  v11[5] = a2;
  v11[6] = a3;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveAudioRouteDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1125, 0, 0, v8, (uint64_t)v11);
}

void FigPredictedRouting_UpdatePredictedRoute(int a1)
{
  predictedRouting_UpdatePredictedRoute(a1, 0);
}

uint64_t CMSMUtility_SomeNonMixableClientIsPlaying()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isPlaying")
          && (objc_msgSend(v5, "doesntActuallyPlayAudio") & 1) == 0
          && !objc_msgSend(v5, "mixesWithEveryone"))
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

float CMSUtility_GetUserVolume(void *a1)
{
  float v1;
  MXSessionManager *v2;
  const __CFString *v3;
  _OWORD v5[2];
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;
  CFTypeRef v9[2];
  CFTypeRef v10[2];
  uint64_t v11;

  v11 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v7 = 0;
  cf = 0;
  v1 = 0.5;
  if (!CMSUtility_CopyCurrentCategoryAndDeviceRoute(a1, (NSDictionary **)&cf, &v7, &v9[1], &v10[1], v10))
  {
    v2 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    v3 = -[MXSessionManager getUncustomizedCategory:](v2, "getUncustomizedCategory:", cf);
    v5[0] = *(_OWORD *)v9;
    v5[1] = *(_OWORD *)v10;
    v6 = v11;
    v1 = PVMGetVolumePreference(v3, v7, (uint64_t)v5);
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v7)
  {
    CFRelease(v7);
    v7 = 0;
  }
  if (v9[1])
  {
    CFRelease(v9[1]);
    v9[1] = 0;
  }
  if (v10[1])
  {
    CFRelease(v10[1]);
    v10[1] = 0;
  }
  if (v10[0])
    CFRelease(v10[0]);
  return v1;
}

uint64_t systemController_CopyVolumeCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "volumeCategoryAndMode:mode:outCategoryCopy:outModeCopy:", a2, a3, a4, a5);
  return 0;
}

void CMSUtility_SendSessionVolumeToAudioStatistics(void *a1, int a2, const void *a3)
{
  const char *CStringPtrAndBufferToFree;
  float v7;

  v7 = 0.0;
  if (objc_msgSend(a1, "displayID"))
  {
    objc_msgSend(a1, "displayID");
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  }
  else
  {
    CStringPtrAndBufferToFree = 0;
  }
  CMSUtility_ComputePlaybackVolume(a1, &v7);
  CMSUtility_SendVolumeChangeEventToAudioStatistics(a1, CStringPtrAndBufferToFree, objc_msgSend(a1, "audioCategory"), a3, a2, 0, v7);
  free(0);
}

void CMSUtility_SendVolumeChangeEventToAudioStatistics(void *a1, const char *a2, uint64_t a3, const void *a4, int a5, int a6, float a7)
{
  __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  __CFDictionary *v17;
  CFIndex i;
  void *ValueAtIndex;
  CFTypeRef cf;
  void *value;
  CFTypeRef v22;

  v14 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsActive, 0);
  v15 = v14;
  if (v14)
    Count = CFArrayGetCount(v14);
  else
    Count = 0;
  value = 0;
  v22 = 0;
  if (a1)
    PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory")), 0, &v22, 0);
  PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", a3), 0, &value, 0);
  v17 = cmsutility_createVolumeChangeMessageForAudioStatistics(a2, value, a4, a5, a6, a7);
  if (a1 && objc_msgSend(a1, "isActive") && FigCFEqual())
  {
    CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, (uint64_t)v17, 0xEu, 5u, 1, a6);
  }
  else if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v15, i);
      cf = 0;
      PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(ValueAtIndex, "audioCategory")), 0, &cf, 0);
      objc_msgSend(ValueAtIndex, "displayID");
      FigCFDictionarySetValue();
      if (objc_msgSend(ValueAtIndex, "audioCategory"))
      {
        PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(ValueAtIndex, "audioCategory")), 0, &value, 0);
        CFDictionarySetValue(v17, CFSTR("MXSessionVolumeActiveSessionCategory"), value);
      }
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(ValueAtIndex, (uint64_t)v17, 0xEu, 5u, 1, a6);
      if (cf)
        CFRelease(cf);
    }
  }
  if (v22)
  {
    CFRelease(v22);
    v22 = 0;
  }
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
}

id PVMCopyVolumeCategoryAndMode(const __CFString *a1, const void *a2, _QWORD *a3, _QWORD *a4)
{
  __CFString *MappedCategoryWithModeAppended;

  MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(a1, a2);
  return pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, a3, a4);
}

uint64_t PVMCategoriesAreEquivalent(const __CFString *a1, const void *a2, const __CFString *a3, const void *a4)
{
  if (!a1)
  {
    if (!a3)
      return FigCFEqual();
    goto LABEL_3;
  }
  pvmGetMappedCategoryWithModeAppended(a1, a2);
  if (a3)
LABEL_3:
    pvmGetMappedCategoryWithModeAppended(a3, a4);
  return FigCFEqual();
}

uint64_t CMSUtility_UpdatePlaybackVolume(void *a1, float a2, float a3)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int IsAdaptiveVolumeControlEnabled;
  const __CFString *v9;
  uint64_t CurrentOutputVADID;
  float v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    result = PVMCategoriesAreEquivalent((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory")), (const void *)objc_msgSend(a1, "audioMode"), CFSTR("Audio/Video"), 0);
    if ((_DWORD)result)
      CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes((const __CFString *)objc_msgSend(a1, "audioCategory"), (const void *)objc_msgSend(a1, "audioMode"));
  }
  else
  {
    v11 = 0.0;
    CMSUtility_ComputePlaybackVolume(a1, &v11);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    IsAdaptiveVolumeControlEnabled = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
    v9 = 0;
    if (a3 != 0.0 && a2 != 0.0 && IsAdaptiveVolumeControlEnabled)
      v9 = MXSMGetVolumeRampCategory((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory")), (const void *)objc_msgSend(a1, "audioMode"));
    CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
    return vaemSetDeviceVolumeIfNotSet(CurrentOutputVADID, 0, 0, (uint64_t)v9, v11, a2, a3);
  }
  return result;
}

uint64_t CMSMVAUtility_IsBluetoothSharingSessionEnabled(CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t CurrentOutputPortAtIndex;
  int v8;
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  os_log_type_t type;
  unsigned int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!theArray)
  {
    LODWORD(v14) = 0;
    v5 = (uint64_t *)CMSMUtility_CopyCurrentRoutesInfo((int *)&v14);
    if (v14 >= 2)
    {
      v6 = 0;
      while (1)
      {
        CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(v6);
        v8 = CurrentOutputPortAtIndex;
        if (!vaeIsPortBluetoothShareable(CurrentOutputPortAtIndex))
          break;
        if (++v6 >= (unint64_t)v14)
          goto LABEL_22;
      }
      if (dword_1EE2B3F38)
      {
        v16 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v11 = v16;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if (v12)
        {
          v17 = 136315394;
          v18 = "CMSMVAUtility_IsBluetoothSharingSessionEnabled";
          v19 = 1024;
          v20 = v8;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
LABEL_22:
    MXVW_ReleaseVectorCMSRouteInfo(v5);
  }
  Count = CFArrayGetCount(theArray);
  if (Count >= 2)
  {
    v2 = Count;
    v3 = 0;
    while (1)
    {
      FigCFArrayGetInt64AtIndex();
      if (!vaeIsPortBluetoothShareable(0))
        break;
      if (v2 == ++v3)
        return 1;
    }
    if (dword_1EE2B3F38)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return 0;
}

void MXVW_ReleaseVectorCMSRouteInfo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*(_QWORD *)v2)
        CFRelease(*(CFTypeRef *)v2);
      v4 = *(const void **)(v2 + 8);
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)(v2 + 16);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(v2 + 24);
      if (v6)
        CFRelease(v6);
      v7 = *(const void **)(v2 + 32);
      if (v7)
        CFRelease(v7);
      v2 += 48;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  if (v2)
  {
    a1[1] = v2;
    operator delete((void *)v2);
  }
  JUMPOUT(0x194035724);
}

void **CMSMUtility_CopyCurrentRoutesInfo(int *a1)
{
  void **VectorCMSRouteInfo;
  int v3;
  unint64_t v4;
  __int128 v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  VectorCMSRouteInfo = (void **)MXVW_CreateVectorCMSRouteInfo();
  if (a1)
  {
    MEMORY[0x1940352BC](gCMSM);
    v3 = dword_1EE2B3C28;
    if (dword_1EE2B3C28)
    {
      v4 = 0;
      do
      {
        v8 = 0u;
        v9 = 0u;
        v7 = 0u;
        MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v4, (uint64_t)&v7);
        v6[0] = v7;
        v6[1] = v8;
        v6[2] = v9;
        MXVW_VectorCMSRouteInfoPushBack(VectorCMSRouteInfo, v6);
        ++v4;
        v3 = dword_1EE2B3C28;
      }
      while (v4 < dword_1EE2B3C28);
    }
    *a1 = v3;
    MEMORY[0x1940352C8](gCMSM);
  }
  return VectorCMSRouteInfo;
}

void MXVW_VectorCMSRouteInfoPushBack(void **a1, __int128 *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v4 = (const void *)*((_QWORD *)a2 + 1);
  if (v4)
    CFRetain(v4);
  v5 = (const void *)*((_QWORD *)a2 + 2);
  if (v5)
    CFRetain(v5);
  v6 = (const void *)*((_QWORD *)a2 + 3);
  if (v6)
    CFRetain(v6);
  v7 = (const void *)*((_QWORD *)a2 + 4);
  if (v7)
    CFRetain(v7);
  v8 = (unint64_t)a1[2];
  v9 = a1[1];
  if ((unint64_t)v9 >= v8)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 4);
    v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555)
      std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)*a1) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>((uint64_t)(a1 + 2), v16);
    else
      v17 = 0;
    v18 = &v17[48 * v13];
    v19 = &v17[48 * v16];
    v20 = *a2;
    v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)v18 = v20;
    v12 = v18 + 48;
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 3);
        v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      v22 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[2];
    v9[1] = a2[1];
    v9[2] = v11;
    *v9 = v10;
    v12 = v9 + 3;
  }
  a1[1] = v12;
}

_QWORD *MXVW_CreateVectorCMSRouteInfo()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

void CMSUtility_ComputePlaybackVolume(void *a1, float *a2)
{
  float v4;
  float v5;
  uint64_t v6;
  __CFString *v7;
  const __CFString *v8;
  const void *v9;
  float v10;
  OpaqueFigEndpoint *v11;
  OpaqueFigEndpoint *v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  AudioObjectID valuePtr;
  CFNumberRef number[2];
  __int128 v17;
  uint64_t v18;
  CFTypeRef cf[2];
  CFTypeRef v20[2];
  uint64_t v21;

  if (objc_msgSend(a1, "userMuted") && !PVMIsOKToMuteCurrentCategory())
    objc_msgSend(a1, "setUserMuted:", 0);
  v4 = 0.0;
  if ((objc_msgSend(a1, "userMuted") & 1) == 0)
  {
    v5 = PVMGetCurrentPreferredRawVolume();
    v6 = objc_msgSend(a1, "audioDestinationPriority");
    v7 = CFSTR("VirtualAudioDevice_Default");
    if (a1)
    {
      v7 = CFSTR("VirtualAudioDevice_Default");
      if (v6)
        v7 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v6);
    }
    if (!FigCFEqual()
      || (objc_msgSend(a1, "isTheAssistant") & 1) != 0
      || (objc_msgSend(a1, "audioCategory"), FigCFEqual()))
    {
      v21 = 0;
      *(_OWORD *)cf = 0u;
      *(_OWORD *)v20 = 0u;
      cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID((uint64_t)v7, 0, &cf[1], &v20[1], v20);
      v8 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a1, "audioCategory"));
      v9 = (const void *)objc_msgSend(a1, "audioMode");
      *(_OWORD *)number = *(_OWORD *)cf;
      v17 = *(_OWORD *)v20;
      v18 = v21;
      v10 = PVMGetVolumePreference(v8, v9, (uint64_t)number);
      v5 = PVMGetRawVolumeForCurrentRouteFromVolume(v10);
      if (objc_msgSend(a1, "isTheAssistant"))
      {
        if (!PVMVolumePrefExistsForRouteAndCategory(cf[1], (unint64_t)v20[1], (uint64_t)v20[0], 0, 0))
        {
          v11 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v20[1], 1, *MEMORY[0x1E0CA3A80], 0);
          if (v11)
          {
            v12 = v11;
            number[0] = 0;
            valuePtr = 0;
            CMBaseObject = FigEndpointGetCMBaseObject();
            v14 = *(void (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
            if (v14)
            {
              v14(CMBaseObject, CFSTR("VAE_PortID"), *MEMORY[0x1E0C9AE00], number);
              if (number[0])
              {
                CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
                if (number[0])
                {
                  CFRelease(number[0]);
                  number[0] = 0;
                }
                if (vaeDoesPortSupportDoAP(valuePtr))
                  v5 = 0.5;
              }
            }
            CFRelease(v12);
          }
        }
      }
      if (cf[1])
        CFRelease(cf[1]);
      if (v20[1])
        CFRelease(v20[1]);
      if (v20[0])
        CFRelease(v20[0]);
    }
    if (v5 >= 0.0)
    {
      v4 = v5;
      if (v5 > 1.0)
        v4 = 1.0;
    }
  }
  if (a2)
    *a2 = v4;
}

uint64_t PVMSetCurrentState(const __CFString *a1, const void *a2, void *a3, void *a4, const void *a5, const __CFString *a6, const void *a7, int a8, char a9, char a10, uint64_t a11)
{
  uint64_t v19;
  int v20;
  const __CFString *v21;
  uint64_t v22;
  __CFString *MappedCategoryWithModeAppended;
  const void *v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  const void *v29;
  const __CFDictionary *v30;
  void *Value;
  const void *v32;
  const void *MappedRouteIdentifier;
  uint64_t v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  const __CFAllocator *v43;
  __CFString *MutableCopy;
  uint64_t v45;
  CFMutableDictionaryRef Mutable;
  int v47;
  int v48;
  const __CFString *v49;
  int v50;
  CFTypeRef v51;
  CFTypeRef cf;

  v19 = PVMInitialize();
  v20 = v19;
  v51 = 0;
  cf = 0;
  if (a6)
    v21 = a6;
  else
    v21 = CFSTR("Unspecified");
  v22 = v19;
  if (!(_DWORD)v19)
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    if (a1)
    {
      MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(a1, a2);
      pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v51);
    }
    if (FigCFEqual() && FigCFEqual())
    {
      v50 = 0;
      v49 = CFSTR("RouteChange");
    }
    else
    {
      v24 = *(const void **)(sStorage + 208);
      v25 = cf;
      *(_QWORD *)(sStorage + 208) = cf;
      if (v25)
        CFRetain(v25);
      if (v24)
        CFRelease(v24);
      v26 = *(const void **)(sStorage + 216);
      v27 = v51;
      *(_QWORD *)(sStorage + 216) = v51;
      if (v27)
        CFRetain(v27);
      if (v26)
        CFRelease(v26);
      v49 = CFSTR("CategoryChange");
      v50 = 1;
    }
    v28 = *(const void **)(sStorage + 224);
    *(_QWORD *)(sStorage + 224) = a1;
    if (a1)
      CFRetain(a1);
    if (v28)
      CFRelease(v28);
    v29 = *(const void **)(sStorage + 232);
    *(_QWORD *)(sStorage + 232) = a2;
    if (a2)
      CFRetain(a2);
    if (v29)
      CFRelease(v29);
    if (a3)
    {
      v30 = *(const __CFDictionary **)(sStorage + 176);
      if (v30)
      {
        Value = (void *)CFDictionaryGetValue(v30, a3);
        if (Value)
          a3 = Value;
      }
    }
    FigCFEqual();
    v32 = *(const void **)(sStorage + 248);
    *(_QWORD *)(sStorage + 248) = a3;
    if (a3)
      CFRetain(a3);
    if (v32)
      CFRelease(v32);
    MappedRouteIdentifier = (const void *)pvmGetMappedRouteIdentifier(a4, a3);
    v34 = (uint64_t)MappedRouteIdentifier;
    v35 = *(const void **)(sStorage + 264);
    *(_QWORD *)(sStorage + 264) = MappedRouteIdentifier;
    if (MappedRouteIdentifier)
      CFRetain(MappedRouteIdentifier);
    if (v35)
      CFRelease(v35);
    if (a5
      && a3
      && (objc_msgSend(a3, "hasPrefix:", CFSTR("HeadphonesBT"), v49) & 1) == 0
      && !objc_msgSend(a3, "hasPrefix:", CFSTR("HeadsetBT")))
    {
      v36 = *(const void **)(sStorage + 256);
      *(_QWORD *)(sStorage + 256) = a5;
      CFRetain(a5);
    }
    else
    {
      a5 = 0;
      v36 = *(const void **)(sStorage + 256);
      *(_QWORD *)(sStorage + 256) = 0;
    }
    if (v36)
      CFRelease(v36);
    v37 = sStorage;
    *(_BYTE *)(sStorage + 292) = a9;
    *(_BYTE *)(v37 + 293) = a10;
    if (pvmSetCurrentRouteInfo((uint64_t)v21, (uint64_t)a3, (uint64_t)a5, v34, a7))
    {
      v22 = 0xFFFFFFFFLL;
    }
    else
    {
      if (*(_QWORD *)(sStorage + 248) && !FigCFEqual())
      {
        v38 = v50;
        if (!FigCFEqual() && !FigCFEqual())
        {
          v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 16, *(CFStringRef *)(sStorage + 248));
          v45 = sStorage;
          if (*(_QWORD *)(sStorage + 112)
            || (Mutable = CFDictionaryCreateMutable(v43, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
                v45 = sStorage,
                (*(_QWORD *)(sStorage + 112) = Mutable) != 0))
          {
            if (*(_QWORD *)(v45 + 256))
            {
              CFStringAppend(MutableCopy, CFSTR("~"));
              CFStringAppend(MutableCopy, *(CFStringRef *)(sStorage + 256));
              v45 = sStorage;
            }
            if (*(_QWORD *)(v45 + 264))
            {
              CFStringAppend(MutableCopy, CFSTR("~"));
              CFStringAppend(MutableCopy, *(CFStringRef *)(sStorage + 264));
              v45 = sStorage;
            }
            v47 = CFDictionaryContainsKey(*(CFDictionaryRef *)(v45 + 112), MutableCopy);
            v48 = FigCFEqual();
            if (!v47 || !v48)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 112), MutableCopy, *(const void **)(sStorage + 240));
              *(_BYTE *)(sStorage + 120) = 1;
              pvmWritePrefs();
            }
          }
          else
          {
            FigSignalErrorAt();
          }
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
      }
      else
      {
        v38 = v50;
      }
      if (CFSTR("Unspecified"))
        CFRelease(CFSTR("Unspecified"));
      *(_BYTE *)(sStorage + 280) = FigCFEqual();
      v39 = FigCFEqual();
      v40 = sStorage;
      *(_BYTE *)(sStorage + 281) = v39;
      if (*(_BYTE *)(v40 + 280))
        v41 = v38;
      else
        v41 = 1;
      if (a8 || v41)
        pvmUpdatePreferredVolumeAndLimit((uint64_t)v49, 0, *(const __CFString **)(v40 + 208), *(const void **)(v40 + 216), 0, 1, a11, 0.0, 0.0);
      v22 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v51)
    CFRelease(v51);
  if (!v20)
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return v22;
}

float PVMGetCurrentPreferredRawVolume()
{
  float DefaultVolume;
  float v1;
  float VolumeLimitPref;

  DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize())
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    if (*(float *)(sStorage + 284) <= 1.0)
      v1 = *(float *)(sStorage + 284);
    else
      v1 = 1.0;
    VolumeLimitPref = pvmGetVolumeLimitPref();
    DefaultVolume = v1 * (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute());
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return DefaultVolume;
}

BOOL PVMIsCategoryAndRouteInfoCurrent(const __CFString *a1, const void *a2, uint64_t a3)
{
  __int128 v5;
  _BOOL4 v6;
  __CFString *MappedCategoryWithModeAppended;
  _BOOL4 v8;
  CFTypeRef v10;
  CFTypeRef cf[2];
  __int128 v12;
  uint64_t v13;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)cf = *(_OWORD *)a3;
  v12 = v5;
  v13 = *(_QWORD *)(a3 + 32);
  v6 = PVMIsCurrentDeviceRoute((uint64_t)cf);
  v10 = 0;
  cf[0] = 0;
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(a1, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, cf, &v10);
  if (FigCFEqual())
    v8 = FigCFEqual() != 0;
  else
    v8 = 0;
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  if (cf[0])
    CFRelease(cf[0]);
  if (v10)
    CFRelease(v10);
  return v6 && v8;
}

float PVMGetVolumePreference(const __CFString *a1, const void *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *MappedCategoryWithModeAppended;
  void *v8;
  const __CFDictionary *v9;
  void *Value;
  void *v11;
  uint64_t MappedRouteIdentifier;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  __int128 v17;
  float v18;
  float v19;
  __int128 v21[2];
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef cf;

  pvmGetDefaultVolume();
  v23 = 0;
  cf = 0;
  if (!*(_QWORD *)(a3 + 8))
    *(_QWORD *)(a3 + 8) = CFSTR("Speaker");
  if (a1)
    v6 = a1;
  else
    v6 = CFSTR("Audio/Video");
  MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(v6, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v23);
  v8 = *(void **)(a3 + 8);
  if (v8)
  {
    v9 = *(const __CFDictionary **)(sStorage + 176);
    if (v9)
      Value = (void *)CFDictionaryGetValue(v9, *(const void **)(a3 + 8));
    else
      Value = *(void **)(a3 + 8);
    if (Value)
      v11 = Value;
    else
      v11 = v8;
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a3 + 8) = v11;
  MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a3 + 24), v11);
  v13 = 0;
  *(_QWORD *)(a3 + 24) = MappedRouteIdentifier;
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    v15 = *(void **)(a3 + 8);
    if (v15)
    {
      if ((objc_msgSend(*(id *)(a3 + 8), "hasPrefix:", CFSTR("HeadphonesBT")) & 1) != 0
        || (v16 = objc_msgSend(v15, "hasPrefix:", CFSTR("HeadsetBT")), v13 = v14, v16))
      {
        v13 = 0;
      }
    }
  }
  *(_QWORD *)(a3 + 16) = v13;
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v17 = *(_OWORD *)(a3 + 16);
  v21[0] = *(_OWORD *)a3;
  v21[1] = v17;
  v22 = *(_QWORD *)(a3 + 32);
  pvmGetVolumePref((const __CFString *)cf, v23, v21);
  v19 = v18;
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  return v19;
}

id pvmCreateSeparateCategoryAndModeStrings(id result, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;

  if (!result)
  {
    v6 = 0;
LABEL_6:
    v7 = 0;
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = (void *)objc_msgSend(result, "componentsSeparatedByString:", CFSTR("~"));
  v6 = (void *)objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  result = (id)objc_msgSend(v5, "count");
  if ((unint64_t)result < 2)
    goto LABEL_6;
  result = (id)objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
  v7 = result;
  if (a2)
  {
LABEL_7:
    result = v6;
    *a2 = result;
  }
LABEL_8:
  if (a3)
  {
    result = v7;
    *a3 = result;
  }
  return result;
}

void pvmGetVolumePref(const __CFString *a1, const void *a2, __int128 *a3)
{
  const __CFDictionary *v6;
  const __CFString *Value;
  unint64_t v8;
  uint64_t v9;
  CFStringRef DeviceRouteString;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFStringRef CategoryStringWithModeAppended;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  __int128 v18;
  __int128 v19;
  float valuePtr;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  valuePtr = pvmGetDefaultVolume();
  if (FigCFEqual())
  {
    v6 = *(const __CFDictionary **)(sStorage + 176);
    if (v6)
      Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("broadcast"));
    else
      Value = CFSTR("broadcast");
    v9 = 0;
    v8 = 0;
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    if (!Value)
      Value = CFSTR("broadcast");
    *((_QWORD *)a3 + 1) = Value;
  }
  else
  {
    v9 = *((_QWORD *)a3 + 2);
    v8 = *((_QWORD *)a3 + 3);
    Value = (const __CFString *)*((_QWORD *)a3 + 1);
  }
  DeviceRouteString = pvmCreateDeviceRouteString(Value, v8, v9);
  if (DeviceRouteString
    && (v11 = *(const __CFDictionary **)(sStorage + 16)) != 0
    && (v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, DeviceRouteString)) != 0)
  {
    v13 = v12;
    CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
    v15 = (const __CFNumber *)CFDictionaryGetValue(v13, CategoryStringWithModeAppended);
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        v18 = a3[1];
        v21 = *a3;
        v22 = v18;
        v23 = *((_QWORD *)a3 + 4);
        v19 = a3[1];
        v24 = *a3;
        v25 = v19;
        v26 = *((_QWORD *)a3 + 4);
        pvmGetVolumeLimitPref();
        pvmGetCurrentVolumeLimitForRoute();
      }
    }
  }
  else
  {
    CategoryStringWithModeAppended = 0;
  }
  pvmGetMinimumCategoryVolume(a1, a2);
  pvmGetMaximumCategoryVolume(a1, a2);
  if (CategoryStringWithModeAppended)
    CFRelease(CategoryStringWithModeAppended);
  if (DeviceRouteString)
    CFRelease(DeviceRouteString);
}

float pvmGetDefaultVolume()
{
  const __CFDictionary *v0;
  const void *v1;
  const __CFNumber *Value;
  int v3;
  const __CFString *v4;
  const __CFNumber *v5;
  float valuePtr;

  valuePtr = 0.0;
  v0 = *(const __CFDictionary **)(sStorage + 200);
  if (!v0)
    goto LABEL_8;
  v1 = *(const void **)(sStorage + 248);
  if (v1)
    Value = (const __CFNumber *)CFDictionaryGetValue(v0, v1);
  else
    Value = 0;
  if (!FigCFEqual() || !*(_BYTE *)(sStorage + 292))
  {
    v4 = *(const __CFString **)(sStorage + 272);
    if (!v4 || !CFStringHasPrefix(v4, CFSTR("AudioAccessory")))
    {
      if (Value)
      {
        v5 = Value;
      }
      else
      {
        v5 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 200), CFSTR("Default"));
        if (!v5)
          goto LABEL_8;
      }
      CFNumberGetValue(v5, kCFNumberFloat32Type, &valuePtr);
      return valuePtr;
    }
LABEL_11:
    v3 = 1050253722;
    return *(float *)&v3;
  }
  if (!*(_BYTE *)(sStorage + 293))
    goto LABEL_11;
LABEL_8:
  v3 = 1056964608;
  return *(float *)&v3;
}

float pvmGetVolumeLimitPref()
{
  float v0;
  const __CFDictionary *v1;
  const __CFNumber *Value;
  float valuePtr;

  valuePtr = 1.0;
  v0 = 1.0;
  if (FigCFEqual())
  {
    v1 = *(const __CFDictionary **)(sStorage + 32);
    if (v1)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v1, CFSTR("Headphone"));
      if (Value)
      {
        if (CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr))
          return valuePtr;
        else
          return 1.0;
      }
    }
  }
  return v0;
}

float pvmGetCurrentVolumeLimitForRoute()
{
  float v0;
  const __CFNumber *Value;
  const __CFNumber *v3;
  CFTypeID TypeID;
  int valuePtr;

  if (!FigCFEqual() || FigCFEqual())
    return 1.0;
  if (!(CelesteIsRegionSpecificVolumeLimitEnabled() | g100dBVolumeLimitEnabled))
    return *(float *)(sStorage + 88);
  v0 = 0.9425;
  if (!FigCFEqual() && !FigCFEqual())
  {
    if (FigCFEqual())
      return 1.0;
    v0 = 1.0;
    if (!FigCFEqual())
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 80), CFSTR("HighVolumeLimit"));
      valuePtr = 1062668861;
      v0 = *(float *)"=\nW?pvovbolgisesbolg";
      if (Value)
      {
        v3 = Value;
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v3))
        {
          CFNumberGetValue(v3, kCFNumberFloatType, &valuePtr);
          return *(float *)&valuePtr;
        }
      }
    }
  }
  return v0;
}

CFStringRef pvmCreateCategoryStringWithModeAppended(CFTypeRef cf, const void *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFStringRef v6;

  if (!cf)
    return 0;
  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(Mutable, cf);
    CFArrayAppendValue(Mutable, a2);
    v6 = CFStringCreateByCombiningStrings(v4, Mutable, CFSTR("~"));
    if (Mutable)
      CFRelease(Mutable);
    return v6;
  }
  return (CFStringRef)CFRetain(cf);
}

float pvmGetMinimumCategoryVolume(const __CFString *a1, const void *a2)
{
  const __CFString *MappedCategoryWithModeAppended;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  float result;
  int v6;
  float valuePtr;

  valuePtr = 0.0;
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  v3 = *(const __CFDictionary **)(sStorage + 184);
  if (!v3
    || (Value = (const __CFNumber *)CFDictionaryGetValue(v3, MappedCategoryWithModeAppended)) == 0
    || (CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr), result = valuePtr, valuePtr <= 0.0))
  {
    v6 = FigCFEqual();
    result = valuePtr;
    if (v6)
      return 0.0625;
  }
  return result;
}

const __CFString *pvmGetMappedCategoryWithModeAppended(const __CFString *a1, const void *a2)
{
  CFStringRef CategoryStringWithModeAppended;
  const void *Value;
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  CFStringRef v13;
  CFStringRef v14;
  const __CFString *v15;
  __CFDictionary *v16;

  if (!a1)
    return CFSTR("Audio/Video");
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  if (a2)
  {
    CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
  }
  else
  {
    CFRetain(a1);
    CategoryStringWithModeAppended = a1;
  }
  v6 = sStorage;
  v7 = *(const __CFDictionary **)(sStorage + 168);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, CategoryStringWithModeAppended);
    if (Value)
      goto LABEL_28;
    v6 = sStorage;
  }
  v8 = *(const __CFDictionary **)(v6 + 160);
  if (v8)
  {
    v9 = (const __CFString *)CFDictionaryGetValue(v8, CategoryStringWithModeAppended);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      goto LABEL_20;
    }
    v12 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 160), a1);
    v11 = v12;
    if (v12)
    {
      if ((unint64_t)CFStringFind(v12, CFSTR("~"), 0).length)
      {
        if (!a2)
        {
          v10 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 160), v11);
          goto LABEL_20;
        }
      }
      else
      {
        v13 = pvmCreateCategoryStringWithModeAppended(v11, a2);
        if (v13)
        {
          v14 = v13;
          v10 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 160), v13);
          CFRelease(v14);
          goto LABEL_20;
        }
      }
    }
    v10 = 0;
LABEL_20:
    if (v10)
      v15 = v10;
    else
      v15 = v11;
    if (v15)
      Value = v15;
    else
      Value = a1;
    v16 = *(__CFDictionary **)(sStorage + 168);
    if (v16)
      CFDictionarySetValue(v16, CategoryStringWithModeAppended, Value);
    goto LABEL_28;
  }
  Value = 0;
LABEL_28:
  if (CategoryStringWithModeAppended)
    CFRelease(CategoryStringWithModeAppended);
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return (const __CFString *)Value;
}

float pvmGetMaximumCategoryVolume(const __CFString *a1, const void *a2)
{
  const __CFString *MappedCategoryWithModeAppended;
  const __CFDictionary *v3;
  float v4;
  const __CFNumber *Value;
  float valuePtr;

  valuePtr = 1.0;
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  v3 = *(const __CFDictionary **)(sStorage + 192);
  v4 = 1.0;
  if (v3)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v3, MappedCategoryWithModeAppended);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
      v4 = valuePtr;
      if (valuePtr > 1.0)
        return 1.0;
    }
  }
  return v4;
}

CFStringRef pvmCreateDeviceRouteString(CFTypeRef cf, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  CFTypeRef v6;
  void *MappedRouteIdentifier;
  __CFString *v8;
  uint64_t v9;
  unsigned int v10;
  const __CFAllocator *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFStringRef v14;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 0;
  v3 = a3;
  v5 = (void *)cf;
  if (a2 | a3)
  {
    if (*(_QWORD *)(sStorage + 176))
      cf = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 176), cf);
    if (cf)
      v6 = cf;
    else
      v6 = v5;
    MappedRouteIdentifier = (void *)pvmGetMappedRouteIdentifier((void *)a2, v5);
    if (v3
      && ((objc_msgSend(v5, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) != 0
       || objc_msgSend(v5, "hasPrefix:", CFSTR("HeadsetBT"))))
    {
      v3 = 0;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      v8 = CFSTR("-Audio");
      if ((objc_msgSend(MappedRouteIdentifier, "hasSuffix:", CFSTR("-Audio")) & 1) != 0
        || (v8 = CFSTR("-screen"), (objc_msgSend(MappedRouteIdentifier, "hasSuffix:", CFSTR("-screen")) & 1) != 0)
        || (v8 = CFSTR("-airplay"), (objc_msgSend(MappedRouteIdentifier, "hasSuffix:", CFSTR("-airplay")) & 1) != 0)
        || (v8 = CFSTR("-LowLatencyAudio"),
            objc_msgSend(MappedRouteIdentifier, "hasSuffix:", CFSTR("-LowLatencyAudio"))))
      {
        MappedRouteIdentifier = (void *)objc_msgSend(MappedRouteIdentifier, "substringToIndex:", objc_msgSend(MappedRouteIdentifier, "length")- -[__CFString length](v8, "length"));
        v9 = objc_msgSend(MappedRouteIdentifier, "rangeOfString:options:", CFSTR("-"), 4);
        if (v9 != 0x7FFFFFFFFFFFFFFFLL)
          MappedRouteIdentifier = (void *)objc_msgSend(MappedRouteIdentifier, "substringToIndex:", v9);
      }
    }
    v17 = 0;
    v18 = 0;
    v16 = v6;
    if (v3)
    {
      v17 = v3;
      v10 = 2;
      if (!MappedRouteIdentifier)
        goto LABEL_23;
    }
    else
    {
      v10 = 1;
      if (!MappedRouteIdentifier)
      {
LABEL_23:
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v12 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v16, v10, MEMORY[0x1E0C9B378]);
        if (v12)
        {
          v13 = v12;
          v14 = CFStringCreateByCombiningStrings(v11, v12, CFSTR("~"));
          CFRelease(v13);
          return v14;
        }
        return 0;
      }
    }
    *(&v16 + v10++) = MappedRouteIdentifier;
    goto LABEL_23;
  }
  return (CFStringRef)CFRetain(cf);
}

uint64_t PVMCopyCurrentCategoryAndMode(CFTypeRef *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  CFTypeRef v6;

  v4 = PVMInitialize();
  if (!(_DWORD)v4)
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    if (a1)
      *a1 = CFRetain(*(CFTypeRef *)(sStorage + 208));
    v5 = (_QWORD *)sStorage;
    if (a2)
    {
      v6 = *(CFTypeRef *)(sStorage + 216);
      if (v6)
      {
        v6 = CFRetain(v6);
        v5 = (_QWORD *)sStorage;
      }
      *a2 = v6;
    }
    MEMORY[0x1940352C8](*v5);
  }
  return v4;
}

BOOL PVMIsCurrentDeviceRoute(uint64_t a1)
{
  _BOOL8 v2;
  const __CFString *v3;
  __CFString *Value;
  __CFString *v5;
  uint64_t v6;
  BOOL v7;

  if (PVMInitialize())
    return 0;
  v3 = *(const __CFString **)(a1 + 8);
  if (!v3)
  {
    v3 = CFSTR("Speaker");
    *(_QWORD *)(a1 + 8) = CFSTR("Speaker");
  }
  Value = (__CFString *)v3;
  if (*(_QWORD *)(sStorage + 176))
    Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 176), v3);
  if (Value)
    v5 = Value;
  else
    v5 = (__CFString *)v3;
  pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v5);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7 && (-[__CFString hasPrefix:](v5, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) == 0)
    -[__CFString hasPrefix:](v5, "hasPrefix:", CFSTR("HeadsetBT"));
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  pvmAssureCurrentCategoryAndDeviceRoute();
  v2 = FigCFEqual() && FigCFEqual() && FigCFEqual() != 0;
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return v2;
}

uint64_t PVMInitialize()
{
  if (PVMInitialize_sInitializeVolumeManagerOnce != -1)
    dispatch_once(&PVMInitialize_sInitializeVolumeManagerOnce, &__block_literal_global_31);
  if (sStorage)
    return 0;
  else
    return FigSignalErrorAt();
}

void pvmAssureCurrentCategoryAndDeviceRoute()
{
  uint64_t v0;
  const void *v1;
  _QWORD *v2;
  _QWORD *v3;
  __CFString *MappedCategoryWithModeAppended;
  const __CFDictionary *v5;
  const __CFString *Value;
  CFTypeRef v7;
  uint64_t v8;
  const void *v9;
  const void *v10;

  v0 = sStorage;
  if (!*(_QWORD *)(sStorage + 208))
  {
    v1 = *(const void **)(sStorage + 216);
    if (v1)
    {
      CFRelease(v1);
      v0 = sStorage;
      *(_QWORD *)(sStorage + 216) = 0;
    }
    v2 = (_QWORD *)(v0 + 208);
    v3 = (_QWORD *)(v0 + 216);
    MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(CFSTR("Audio/Video"), 0);
    pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, v2, v3);
    v0 = sStorage;
  }
  if (!*(_QWORD *)(v0 + 248))
  {
    v5 = *(const __CFDictionary **)(v0 + 176);
    if (v5)
      Value = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("Speaker"));
    else
      Value = CFSTR("Speaker");
    if (!Value)
      Value = CFSTR("Speaker");
    v7 = CFRetain(Value);
    v8 = sStorage;
    *(_QWORD *)(sStorage + 248) = v7;
    v9 = *(const void **)(v8 + 256);
    if (v9)
    {
      CFRelease(v9);
      v8 = sStorage;
      *(_QWORD *)(sStorage + 256) = 0;
    }
    v10 = *(const void **)(v8 + 272);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(sStorage + 272) = 0;
    }
    *(_BYTE *)(sStorage + 280) = FigCFEqual();
    *(_BYTE *)(sStorage + 281) = FigCFEqual();
  }
}

uint64_t pvmUpdatePreferredVolumeAndLimit(uint64_t result, uint64_t a2, const __CFString *a3, const void *a4, int a5, int a6, uint64_t a7, float a8, float a9)
{
  uint64_t v16;
  const __CFString *v17;
  const void *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  float v23;
  MXPreferredVolumeManager *v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if (!*(_BYTE *)(sStorage + 8))
  {
    v16 = result;
    if (a6)
    {
      pvmAssureCurrentCategoryAndDeviceRoute();
      v17 = *(const __CFString **)(sStorage + 208);
      v18 = *(const void **)(sStorage + 216);
      v19 = *(_OWORD *)(sStorage + 256);
      v28 = *(_OWORD *)(sStorage + 240);
      v29 = v19;
      v30 = *(_QWORD *)(sStorage + 272);
      pvmGetVolumePref(v17, v18, &v28);
      v20 = sStorage;
      *(_DWORD *)(sStorage + 284) = v21;
      if (!*(_BYTE *)(v20 + 8) && (FigCFEqual() || FigCFEqual()))
      {
        if (FigCFEqual())
          pvmSetSystemSoundVolumeMultiplierForVolumeGuts(*(float *)(sStorage + 284));
      }
    }
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
    v22 = *(_OWORD *)(sStorage + 256);
    v28 = *(_OWORD *)(sStorage + 240);
    v29 = v22;
    v30 = *(_QWORD *)(sStorage + 272);
    v23 = PVMGetVolumePreference(a3, a4, (uint64_t)&v28);
    v24 = +[MXPreferredVolumeManager sharedInstance](MXPreferredVolumeManager, "sharedInstance");
    *(float *)&v25 = v23;
    *(float *)&v26 = a8;
    *(float *)&v27 = a9;
    -[MXPreferredVolumeManager postNotification:category:mode:volume:rampUpwardDuration:rampDownwardDuration:silenceVolumeHUD:reason:refCon:sequenceNumber:](v24, "postNotification:category:mode:volume:rampUpwardDuration:rampDownwardDuration:silenceVolumeHUD:reason:refCon:sequenceNumber:", CFSTR("VolumePreferenceDidChange"), a3, a4, a5 != 0, v16, a2, v25, v26, v27, a7);
    JUMPOUT(0x1940352BCLL);
  }
  return result;
}

uint64_t pvmSetCurrentRouteInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  _QWORD *v5;
  const void *v6;

  if (!a1)
    return 0xFFFFFFFFLL;
  v5 = (_QWORD *)sStorage;
  *(_QWORD *)(sStorage + 240) = a1;
  v5[31] = a2;
  v5[32] = a3;
  v5[33] = a4;
  v6 = (const void *)v5[34];
  v5[34] = cf;
  if (cf)
    CFRetain(cf);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t CMSUtility_CopyCurrentCategoryAndDeviceRoute(void *a1, NSDictionary **a2, _QWORD *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  NSDictionary *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;

  v18 = 0;
  cf = 0;
  v17 = 0;
  if (objc_msgSend(a1, "audioCategory"))
  {
    v12 = (NSDictionary *)CFRetain((CFTypeRef)objc_msgSend(a1, "audioCategory"));
    v13 = (const void *)objc_msgSend(a1, "audioMode");
    v14 = (const void *)objc_msgSend(a1, "activationContext");
    if (v13)
      CFRetain(v13);
  }
  else
  {
    v12 = (NSDictionary *)CFRetain(CFSTR("Audio/Video"));
    v13 = 0;
    v14 = 0;
  }
  if (!objc_msgSend(a1, "isActive"))
  {
    v15 = CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(v12, (uint64_t)v13, v14, 0, &cf, &v18, &v17);
    if (!a2)
      goto LABEL_10;
    goto LABEL_9;
  }
  PVMCopyCurrentDeviceRoute(&cf, &v18, &v17);
  v15 = 0;
  if (a2)
  {
LABEL_9:
    *a2 = v12;
    v12 = 0;
  }
LABEL_10:
  if (a3)
  {
    *a3 = v13;
    v13 = 0;
  }
  if (a4)
  {
    *a4 = cf;
    cf = 0;
  }
  if (a5)
  {
    *a5 = v18;
    v18 = 0;
  }
  if (a6)
  {
    *a6 = v17;
    v17 = 0;
  }
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  return v15;
}

const void *MX_FrontBoardServcies_CopyPrimaryAppDisplayID()
{
  void *v0;
  void *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  void *ValueAtIndex;
  void *v6;
  const void *v7;
  const void *v8;

  v0 = (void *)MEMORY[0x194035B20]();
  v1 = (void *)objc_msgSend((id)gFrontBoardServicesMonitor, "currentLayout");
  if (v1 && (v2 = (const __CFArray *)objc_msgSend(v1, "elements")) != 0 && (v3 = v2, CFArrayGetCount(v2) >= 1))
  {
    v4 = 0;
    while (1)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
      if (ValueAtIndex)
      {
        v6 = ValueAtIndex;
        if (objc_msgSend(ValueAtIndex, "layoutRole") == 1)
        {
          v7 = (const void *)objc_msgSend(v6, "bundleIdentifier");
          if (v7)
            break;
        }
      }
      if (++v4 >= CFArrayGetCount(v3))
        goto LABEL_9;
    }
    v8 = v7;
    CFRetain(v7);
  }
  else
  {
LABEL_9:
    v8 = 0;
  }
  objc_autoreleasePoolPop(v0);
  return v8;
}

void cmsmDisplayLayoutChanged(int a1, int a2, int a3, const void *a4)
{
  BOOL v9;
  const void *v10;

  v9 = cmsmDisplayLayoutChanged_sideOverlayPresent == a1
    && cmsmDisplayLayoutChanged_fullScreenModalPresent == a2
    && cmsmDisplayLayoutChanged_fullScreenOverlayPresent == a3;
  if (!v9 || !FigCFEqual())
  {
    CMSMNotificationUtility_PostDisplayLayoutDidChange(a1, a2, a3, (uint64_t)a4);
    cmsmDisplayLayoutChanged_sideOverlayPresent = a1;
    cmsmDisplayLayoutChanged_fullScreenModalPresent = a2;
    cmsmDisplayLayoutChanged_fullScreenOverlayPresent = a3;
    v10 = (const void *)cmsmDisplayLayoutChanged_displayID;
    cmsmDisplayLayoutChanged_displayID = (uint64_t)a4;
    if (a4)
      CFRetain(a4);
    if (v10)
      CFRelease(v10);
  }
}

void predictedRouting_UpdatePredictedRoute(int a1, int IsSystemAudioRouteBuiltIn)
{
  __CFArray *v4;
  __CFArray *v5;
  CFIndex Count;
  int v7;
  int v8;
  int IsContextSystemMusicAndIndependent;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  __CFDictionary *v14;
  const void *v15;
  OpaqueFigEndpoint *v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v20;
  const __CFString *v21;
  OpaqueFigEndpoint *v22;
  OpaqueFigEndpoint *v23;
  uint64_t CMBaseObject;
  void (*v25)(uint64_t, __CFString *, _QWORD, const __CFNumber **);
  AudioObjectID PortFromCFNumber;
  _BOOL4 ShouldBTPortBeTreatedAsInEar;
  __CFDictionary *v28;
  NSObject *v29;
  __CFDictionary *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  const void *v44;
  const void *v45;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  const void *Value;
  const void *v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  NSObject *v54;
  uint64_t *p_cf;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  int v61;
  id v62;
  CFTypeRef cf;
  os_log_type_t type;
  int v65;
  const char *v66;
  __int16 v67;
  const void *v68;
  __int16 v69;
  const void *v70;
  const __CFNumber *v71[19];

  v71[16] = *(const __CFNumber **)MEMORY[0x1E0C80C00];
  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  v4 = CMSMVAUtility_CopyBTManagedPorts();
  v5 = v4;
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  v7 = Count > 0;
  if (a1 != 6)
    IsSystemAudioRouteBuiltIn = FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn();
  v8 = -[MXSessionManager isSmartRoutingEligibleSessionAvailable](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSmartRoutingEligibleSessionAvailable");
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)cf);
  v61 = a1;
  v10 = 0;
  v11 = 0;
  switch(a1)
  {
    case 1:
      if (predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent != v7)
        goto LABEL_14;
      goto LABEL_18;
    case 2:
      if (predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent != v7)
LABEL_14:
        predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent = Count > 0;
      goto LABEL_9;
    case 3:
    case 4:
      goto LABEL_26;
    case 5:
    case 8:
    case 9:
    case 10:
      goto LABEL_9;
    case 6:
      v12 = IsContextSystemMusicAndIndependent;
      if (predictedRouting_UpdatePredictedRoute_sCachedRouteIsBuiltIn == IsSystemAudioRouteBuiltIn)
      {
        v13 = 0;
      }
      else
      {
        predictedRouting_UpdatePredictedRoute_sCachedRouteIsBuiltIn = IsSystemAudioRouteBuiltIn;
        v13 = FigPredictedRouting_IsPreemptivePortChanged() ^ 1;
      }
      v60 = predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent != v12;
      if (predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent != v12)
        predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent = v12;
      if (v13)
        goto LABEL_25;
      v11 = 0;
      goto LABEL_38;
    case 7:
      if (predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying == v8)
      {
LABEL_18:
        v11 = 0;
        v60 = 0;
      }
      else
      {
        predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying = v8;
LABEL_9:
        v60 = 0;
        v11 = 0;
        if (!FigPredictedRouting_IsPreemptivePortChanged())
        {
LABEL_25:
          v11 = FigPredictedRouting_IsTimerActive() ^ 1;
          v10 = v60;
LABEL_26:
          v60 = v10;
          if (a1 == 3)
          {
            v62 = 0;
            v14 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
            v15 = (const void *)MXBluetoothServices_CopyPreemptivePortInfo(301, 0, 0, (uint64_t)&v62);
            v16 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v15, 0, *MEMORY[0x1E0CA3A60], 0);
            if (v15)
              CFRelease(v15);
            if (v16)
            {
              v17 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v16, 0);
              v18 = v17;
              if (v17)
              {
                CFRetain(v17);
                if (v14)
                  CFRelease(v14);
                if (dword_1EE2B3E28)
                {
                  type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
                  v32 = 1;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
                  v32 = 1;
                }
                v14 = v18;
              }
              else
              {
                v32 = 0;
              }

              CFRelease(v16);
              a1 = v61;
            }
            else
            {
              v32 = 0;
            }
            if (v62)
            {
              FigPredictedRouting_SetPreemptivePortChanged(1);
              if (!v32)
              {
                v33 = objc_msgSend(v62, "objectForKey:", CFSTR("RouteUID"));
                if (v33)
                  -[__CFDictionary setObject:forKey:](v14, "setObject:forKey:", v33, CFSTR("RouteUID"));
                v34 = objc_msgSend(v62, "objectForKey:", CFSTR("RouteName"), v57, v58);
                if (v34)
                  -[__CFDictionary setObject:forKey:](v14, "setObject:forKey:", v34, CFSTR("RouteName"));
                v35 = objc_msgSend(v62, "objectForKey:", CFSTR("RouteModel"));
                if (v35)
                  -[__CFDictionary setObject:forKey:](v14, "setObject:forKey:", v35, CFSTR("RouteModel"));
                v36 = objc_msgSend(v62, "objectForKey:", CFSTR("BatteryLeft"));
                if (v36)
                  -[__CFDictionary setObject:forKey:](v14, "setObject:forKey:", v36, CFSTR("BTDetails_BatteryLevelLeft"));
                v37 = objc_msgSend(v62, "objectForKey:", CFSTR("BatteryRight"));
                if (v37)
                  -[__CFDictionary setObject:forKey:](v14, "setObject:forKey:", v37, CFSTR("BTDetails_BatteryLevelRight"));
              }
            }
            v30 = v14;

            goto LABEL_80;
          }
        }
      }
LABEL_38:
      if ((a1 - 11) <= 0xFFFFFFFD && Count >= 1 && IsSystemAudioRouteBuiltIn && v11)
      {
        v20 = (const __CFString *)MXBluetoothServices_CopyPreferredDeviceAddress(301, 0, 1, 0);
        v21 = CMSMVAUtility_CopyDeviceIDFromBTAddress(v20);
        v22 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v21, 0, *MEMORY[0x1E0CA3A80], 0);
        if (v22)
        {
          v23 = v22;
          v71[0] = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v25 = *(void (**)(uint64_t, __CFString *, _QWORD, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
          if (v25)
            v25(CMBaseObject, CFSTR("VAE_PortID"), *MEMORY[0x1E0C9AE00], v71);
          PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v71[0]);
          ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(PortFromCFNumber);
          if (ShouldBTPortBeTreatedAsInEar)
            v28 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v23, 0);
          else
            v28 = 0;
          predictedRouting_UpdatePredictedRoute_sCachedPreferredBTDeviceIsInEar = ShouldBTPortBeTreatedAsInEar;
          if (v71[0])
            CFRelease(v71[0]);
          CFRelease(v23);
        }
        else
        {
          v28 = 0;
        }
        if (v21)
          CFRelease(v21);
        v30 = v28;
        if (v20)
          CFRelease(v20);
        a1 = v61;
LABEL_80:
        MEMORY[0x1940352BC](gPRS_0);
        v11 = 1;
        goto LABEL_81;
      }
      MEMORY[0x1940352BC](gPRS_0);
      if (a1 == 9)
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v62) = 0;
          v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (gPRS_1)
        {
          CFRelease((CFTypeRef)gPRS_1);
          gPRS_1 = 0;
        }
        FigPredictedRouting_StartTimer(480.0);
        v30 = 0;
        v31 = 1;
        goto LABEL_96;
      }
      v30 = 0;
LABEL_81:
      if (a1 == 10)
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v62) = 0;
          v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v42 = v62;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            v43 = v42;
          else
            v43 = v42 & 0xFFFFFFFE;
          if (v43)
          {
            v65 = 136315138;
            v66 = "predictedRouting_UpdatePredictedRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (gPRS_1)
        {
          CFRelease((CFTypeRef)gPRS_1);
          gPRS_1 = 0;
        }
        v31 = 1;
        predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying = 1;
        goto LABEL_119;
      }
      if (a1 == 4)
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v62) = 0;
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v39 = v62;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if (v40)
          {
            v65 = 136315138;
            v66 = "predictedRouting_UpdatePredictedRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigPredictedRouting_StopPreemptivePortChangedTimer(1);
        v45 = (const void *)gPRS_1;
        if (!gPRS_1)
        {
          v31 = 0;
          goto LABEL_119;
        }
        if (!dword_1EE2B3E28)
          goto LABEL_117;
        LODWORD(v62) = 0;
        v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v47 = v62;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          v48 = v47;
        else
          v48 = v47 & 0xFFFFFFFE;
        if (v48)
        {
          v65 = 136315138;
          v66 = "predictedRouting_UpdatePredictedRoute";
          _os_log_send_and_compose_impl();
        }
        v31 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v45 = (const void *)gPRS_1;
        if (gPRS_1)
        {
LABEL_117:
          CFRelease(v45);
          gPRS_1 = 0;
LABEL_118:
          v31 = 1;
          goto LABEL_119;
        }
        goto LABEL_119;
      }
      v31 = 0;
LABEL_96:
      if (!FigCFEqual() && v11)
      {
        v44 = (const void *)gPRS_1;
        gPRS_1 = (uint64_t)v30;
        if (v30)
          CFRetain(v30);
        if (v44)
          CFRelease(v44);
        v11 = 1;
        goto LABEL_118;
      }
LABEL_119:
      v59 = v11;
      if (FigCFDictionaryGetCount())
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)gPRS_1, CFSTR("RouteName"));
        v50 = CFDictionaryGetValue((CFDictionaryRef)gPRS_1, CFSTR("RouteUID"));
        if (v61 == 7
          && predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying
          && v59
          && !predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent)
        {
          if (dword_1EE2B3E28)
          {
            LODWORD(v62) = 0;
            v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v52 = v62;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              v53 = v52;
            else
              v53 = v52 & 0xFFFFFFFE;
            if (v53)
            {
              v65 = 136315651;
              v66 = "predictedRouting_UpdatePredictedRoute";
              v67 = 2114;
              v68 = Value;
              v69 = 2113;
              v70 = v50;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (gPRS_1)
          {
            CFRelease((CFTypeRef)gPRS_1);
            gPRS_1 = 0;
          }
          v31 = 1;
        }
      }
      MEMORY[0x1940352C8](gPRS_0);
      if (dword_1EE2B3E28)
      {
        v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v71[0] = 0;
      p_cf = (uint64_t *)v71;
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v71);
      if (v31)
        goto LABEL_142;
      v56 = !v60;
      if (!predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent)
        v56 = 1;
      if ((v56 & 1) == 0)
      {
        p_cf = (uint64_t *)&cf;
LABEL_142:
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(*p_cf, (uint64_t)CFSTR("predictedSelectedRouteDescriptorChanged"), 0);
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v71[0])
      {
        CFRelease(v71[0]);
        v71[0] = 0;
      }
      if (v30)
        CFRelease(v30);
      if (v5)
        CFRelease(v5);
      return;
    default:
      v10 = 0;
      v11 = 0;
      goto LABEL_26;
  }
}

uint64_t cmsTryToTakeControl(void *a1)
{
  unsigned __int16 v2;
  BOOL v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  NSPointerArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSPointerArray *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t i;
  void *v38;
  int v39;
  int v40;
  int v42;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  const char *FlagsString;
  const char *v49;
  NSPointerArray *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  void *v55;
  _BOOL4 v56;
  int VADModeFromFigModeName;
  int *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  NSPointerArray *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  os_log_type_t type;
  unsigned int v79;
  _BYTE v80[128];
  int v81;
  const char *v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  _BYTE v86[14];
  __int16 v87;
  const char *v88;
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "hwControlFlags");
  v65 = objc_msgSend(a1, "hwControlFlags");
  v3 = -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory"));
  v4 = objc_msgSend(a1, "dontTakeOverHardware");
  if (v3 || v4)
  {
    if (dword_1EE2B3F38)
    {
LABEL_8:
      v79 = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(a1, "isRoutedToOnDemandVAD"))
  {
    if (dword_1EE2B3F38)
      goto LABEL_8;
    return 0;
  }
  v6 = v2 | HIWORD(v65);
  HIDWORD(v61) = v2;
  if ((objc_msgSend(a1, "prefersToTakeHWControlFlagsFromAnotherSession") & 1) != 0)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v7 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v70, v89, 16);
    if (!v8)
      goto LABEL_96;
    v9 = v8;
    v10 = *(_QWORD *)v71;
    v63 = ~v2;
    v64 = v7;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v71 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v11);
        objc_msgSend(v12, "setSavedCurrentlyControllingFlags:", objc_msgSend(v12, "currentlyControllingFlags", v59, v61));
        if (v12 != a1)
        {
          if (objc_msgSend(v12, "isActive"))
          {
            if (!CMSMDeviceState_ItsAHomePod()
              || (CMSUtility_GetCurrentAudioDestination(a1),
                  CMSUtility_GetCurrentAudioDestination(v12),
                  FigCFEqual()))
            {
              if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(v12, "isRoutedToOnDemandVAD"))
              {
                if (dword_1EE2B3F38)
                {
                  v79 = 0;
                  type = OS_LOG_TYPE_DEFAULT;
                  v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v14 = v79;
                  if (os_log_type_enabled(v13, type))
                    v15 = v14;
                  else
                    v15 = v14 & 0xFFFFFFFE;
                  if (v15)
                  {
                    v16 = objc_msgSend(v12, "clientName");
                    v17 = objc_msgSend(a1, "clientName");
                    v81 = 136315650;
                    v82 = "cmsTryToTakeControl";
                    v83 = 2114;
                    v84 = v16;
                    v85 = 2114;
                    *(_QWORD *)v86 = v17;
                    LODWORD(v61) = 32;
                    v59 = &v81;
                    _os_log_send_and_compose_impl();
                  }
                  v7 = v64;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              else
              {
                v18 = objc_msgSend(v12, "clientPriority");
                if (v18 > objc_msgSend(a1, "clientPriority"))
                {
                  v6 = v6 & ~objc_msgSend(v12, "currentlyControllingFlags");
                  goto LABEL_53;
                }
                v19 = objc_msgSend(v12, "hwControlFlags");
                if (objc_msgSend(v12, "isPlaying") && (objc_msgSend(v12, "mixesWithEveryone") & 1) == 0)
                {
                  if (CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(a1, v12)
                    || (CMSUtility_GetCurrentAudioDestination(v12), FigCFEqual()))
                  {
                    v23 = objc_msgSend(v12, "currentlyControllingFlags");
                    v24 = v23 & (v19 | v63);
                    if (objc_msgSend(a1, "hasAudioMode:", CFSTR("EchoCancellationInput"))
                      && !objc_msgSend(a1, "willRouteToOnDemandVADOnActivation"))
                    {
                      v24 = v23 & v63;
                    }
                    v6 = v6 & ~v24;
                    goto LABEL_51;
                  }
                }
                else
                {
                  v20 = CMSMUtility_GetSharePlayCapableActiveCallSession();
                  if (!v20
                    || v20 == a1
                    || CMSUtility_IsSharePlayCapableMediaSession(a1)
                    || !CMSUtility_IsSharePlayCapableMediaSession(v12))
                  {
                    v21 = (unsigned __int16)v19;
                    if ((objc_msgSend(v12, "prefersToTakeHWControlFlagsFromAnotherSession") & 1) != 0)
                    {
                      v22 = objc_msgSend(a1, "clientPriority");
                      if (v22 <= objc_msgSend(v12, "clientPriority"))
                        v6 = v6 & ~v21;
                      else
                        v6 = v6;
                    }
                    else
                    {
                      v6 = (unsigned __int16)v19 | v6;
                    }
                    if ((objc_msgSend(v12, "isPlaying") & 1) == 0)
                    {
                      if (objc_msgSend((id)objc_msgSend(v12, "audioCategory"), "isEqualToString:", CFSTR("RingtonePreview")))v6 = 0;
                      else
                        v6 = v6;
                    }
LABEL_51:
                    objc_msgSend(v12, "setCurrentlyControllingFlags:", objc_msgSend(v12, "currentlyControllingFlags") & ~(_DWORD)v6);
                    objc_msgSend(v12, "setMustRestoreCurrentlyControllingFlags:", 1);
                    goto LABEL_53;
                  }
                  if (dword_1EE2B3F38)
                  {
                    v79 = 0;
                    type = OS_LOG_TYPE_DEFAULT;
                    v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v26 = v79;
                    if (os_log_type_enabled(v25, type))
                      v27 = v26;
                    else
                      v27 = v26 & 0xFFFFFFFE;
                    if (v27)
                    {
                      v28 = objc_msgSend(v12, "clientName");
                      v29 = objc_msgSend(a1, "clientName");
                      v81 = 136315650;
                      v82 = "cmsTryToTakeControl";
                      v83 = 2114;
                      v84 = v28;
                      v85 = 2114;
                      *(_QWORD *)v86 = v29;
                      LODWORD(v61) = 32;
                      v59 = &v81;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v7 = v64;
                  }
                  v6 = v6 & 0xFFFFFFEF;
                }
              }
            }
          }
          else if (objc_msgSend(v12, "currentlyControllingFlags"))
          {
            objc_msgSend(v12, "setCurrentlyControllingFlags:", 0);
          }
        }
LABEL_53:
        ++v11;
      }
      while (v9 != v11);
      v30 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v70, v89, 16);
      v9 = v30;
      if (!v30)
        goto LABEL_96;
    }
  }
  if (CMSMDeviceState_IsVoiceOverOn()
    || CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio())
  {
    v6 = v2 & 0xFFEF | HIWORD(v65) & 0xFFFFFFEF;
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v31 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v32 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v74, v90, 16);
  if (v32)
  {
    v33 = v32;
    v34 = *(_QWORD *)v75;
    v35 = (v65 & 0x100000 | v2 & 0x10) == 0;
    v36 = (v65 & 0x20000 | v2 & 2) == 0;
    do
    {
      for (i = 0; i != v33; ++i)
      {
        if (*(_QWORD *)v75 != v34)
          objc_enumerationMutation(v31);
        v38 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
        CMSUtility_GetCurrentAudioDestination(a1);
        CMSUtility_GetCurrentAudioDestination(v38);
        v39 = FigCFEqual();
        if (v38 != a1)
        {
          v40 = v39;
          if (objc_msgSend(v38, "isActive"))
          {
            if (v40)
            {
              if ((objc_msgSend(v38, "currentlyControllingFlags") & 0x10) == 0 || v35)
                v6 = v6;
              else
                v6 = v6 & 0xFFFFFFEF;
              if ((objc_msgSend(v38, "currentlyControllingFlags") & 2) != 0)
              {
                if (v36)
                  v6 = v6;
                else
                  v6 = v6 & 0xFFFFFFFD;
              }
            }
            else if (CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume())
            {
              v42 = objc_msgSend(v38, "currentlyControllingFlags") & 0x10;
              if ((v65 & 0x100000) == 0 || v42 == 0)
                v6 = v6;
              else
                v6 = v6 & 0xFFFFFFEF;
            }
          }
        }
      }
      v33 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v74, v90, 16);
    }
    while (v33);
  }
LABEL_96:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v59, v61), "mxCoreSessionListEndIteration");
  if ((HIDWORD(v62) & ~(_DWORD)v6) != 0)
  {
    if (dword_1EE2B3F38)
    {
      v79 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v45 = v79;
      if (os_log_type_enabled(v44, type))
        v46 = v45;
      else
        v46 = v45 & 0xFFFFFFFE;
      if (v46)
      {
        v47 = objc_msgSend(a1, "clientName");
        FlagsString = CMSMUtility_GetFlagsString(WORD2(v62));
        v49 = CMSMUtility_GetFlagsString(HIWORD(v65));
        v81 = 136316162;
        v82 = "cmsTryToTakeControl";
        v83 = 2114;
        v84 = v47;
        v85 = 1024;
        *(_DWORD *)v86 = v6;
        *(_WORD *)&v86[4] = 2082;
        *(_QWORD *)&v86[6] = FlagsString;
        v87 = 2082;
        v88 = v49;
        LODWORD(v62) = 48;
        v60 = &v81;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v60, v62), "mxCoreSessionListBeginIteration");
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v50 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v51 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v50, "countByEnumeratingWithState:objects:count:", &v66, v80, 16);
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)v67;
      do
      {
        for (j = 0; j != v52; ++j)
        {
          if (*(_QWORD *)v67 != v53)
            objc_enumerationMutation(v50);
          v55 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * j);
          if (objc_msgSend(v55, "mustRestoreCurrentlyControllingFlags"))
            objc_msgSend(v55, "setCurrentlyControllingFlags:", objc_msgSend(v55, "savedCurrentlyControllingFlags"));
          objc_msgSend(v55, "setSavedCurrentlyControllingFlags:", 0);
        }
        v52 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v50, "countByEnumeratingWithState:objects:count:", &v66, v80, 16);
      }
      while (v52);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    v6 = 0;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "audioCategory"), "isEqualToString:", CFSTR("VoiceOver")))
  {
    v56 = CMSUtility_IsPlayingToSystemSoundLocalVAD(a1) != 0;
    if ((_DWORD)v6)
      goto LABEL_121;
  }
  else
  {
    v56 = 0;
    if ((_DWORD)v6)
      goto LABEL_121;
  }
  if (!v56)
  {
    if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
      cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
    goto LABEL_122;
  }
LABEL_121:
  cmsTakeControl(a1, v6);
LABEL_122:
  if (objc_msgSend(a1, "isSharePlayMediaSession")
    && CMSMUtility_IsSharePlayCallSessionActive())
  {
    VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(a1, "audioMode"));
    CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(VADModeFromFigModeName, objc_msgSend(a1, "aggregateDeviceClockUID"));
  }
  return v6;
}

void *CMSMUtility_GetControllingRoutingSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSPointerArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v20;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v4);
      if ((objc_msgSend(v5, "currentlyControllingFlags") & 2) != 0)
        break;
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (v5
    && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(v5, "routingContextUUID")))
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v6 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v7 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          v12 = objc_msgSend(v11, "currentlyControllingFlags") & 2;
          if (v11 != v5 && (_DWORD)v12 != 0)
          {
            v5 = v11;
            goto LABEL_24;
          }
        }
        v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      }
      while (v8);
    }
LABEL_24:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  }
  return v5;
}

uint64_t CMSMUtility_IsSiriControllingRoutingAndNotVolume()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if ((objc_msgSend(v5, "currentlyControllingFlags") & 2) != 0
          && (objc_msgSend(v5, "currentlyControllingFlags") & 0x10) == 0
          && (objc_msgSend(v5, "isTheAssistant") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  int v12;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    v12 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent", (uint64_t)"FigRoutingManagerContextUtilities.m", 4913, 0, 0, v4, (uint64_t)v6);
    v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_1936442A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v2;
  _BOOL8 v3;
  unsigned int PortFromCFNumber;
  CFTypeRef cf;
  CFTypeRef v8;
  CFArrayRef theArray;

  v8 = 0;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v8);
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v8, (uint64_t)&theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) == 1 && (cf = 0, CFArrayGetValueAtIndex(theArray, 0)))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v1 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v1)
      {
        v1(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], &cf);
        v2 = (const __CFNumber *)cf;
      }
      else
      {
        v2 = 0;
      }
      PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v2);
      v3 = PortFromCFNumber == 1886613611 || PortFromCFNumber == 1886545251;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v3 = 0;
    }
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  if (v8)
    CFRelease(v8);
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemMusicContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemMusicContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemMusicContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4581, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

__CFArray *CMSMVAUtility_CopyBTManagedPorts()
{
  __CFArray *Mutable;
  __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  uint64_t ValueAtIndex;
  const void *v7;
  uint64_t valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v1 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (v1)
  {
    v2 = v1;
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v2, i);
        v7 = (const void *)ValueAtIndex;
        if (ValueAtIndex)
        {
          valuePtr = 0;
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
          ValueAtIndex = valuePtr;
        }
        if (MXBluetoothServices_IsPortBTManaged(ValueAtIndex, 1))
          CFArrayAppendValue(Mutable, v7);
      }
    }
    CFRelease(v2);
  }
  return Mutable;
}

uint64_t MXBluetoothServices_IsPortBTManaged(uint64_t a1, int a2)
{
  const __CFString *v4;
  const void *Value;
  uint64_t v6;
  const void *v7;
  _QWORD v9[8];
  __CFString *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  if (!mxBluetoothServices_isBluetoothServicesLoaded()
    || !vaeDoesPortSupportMultipleConnections(a1))
  {
    return 0;
  }
  v4 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
  if (a2)
  {
    objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "lock");
    if (v4)
    {
      if (FigCFDictionaryGetCount() <= 0)
      {
        objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock");
      }
      else
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, v4);
        objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock");
        if (Value)
        {
          v6 = Value == (const void *)*MEMORY[0x1E0C9AE50];
          CFRelease(v4);
          return v6;
        }
      }
    }
  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 1;
  v7 = (const void *)vaeCopyNameForPort(a1);
  v10 = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v4, (CFStringRef *)&v10, 0);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MXBluetoothServices_IsPortBTManaged_block_invoke;
  v9[3] = &unk_1E309E9A8;
  v9[4] = &v15;
  v9[5] = &v11;
  v9[6] = v7;
  v9[7] = v4;
  mxBluetoothServices_SendAudioRoutingRequest((uint64_t)v10, 0, 0, 0, (uint64_t)v9);
  if (*((_BYTE *)v12 + 24))
    mxBluetoothServices_addCachedPort((uint64_t)v7, v4, *((unsigned __int8 *)v16 + 24));

  if (v4)
    CFRelease(v4);
  if (v7)
    CFRelease(v7);
  v6 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v6;
}

void sub_193644728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

CFMutableArrayRef CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const void *v6;
  uint64_t valuePtr;

  v0 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (!v0)
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v1 = v0;
  Count = CFArrayGetCount(v0);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, i);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      if (vaeDoesPortSupportMultipleConnections(valuePtr))
      {
        v6 = CFArrayGetValueAtIndex(v1, i);
        CFArrayAppendValue(Mutable, v6);
      }
    }
  }
  CFRelease(v1);
  return Mutable;
}

uint64_t vaeDoesPortSupportMultipleConnections(uint64_t result)
{
  AudioObjectPropertyAddress v1;

  if ((_DWORD)result)
  {
    *(_QWORD *)&v1.mSelector = 0x676C6F626F736163;
    v1.mElement = 0;
    return AudioObjectHasProperty(result, &v1);
  }
  return result;
}

__CFArray *CMSMVAUtility_CopyConnectedWirelessPorts()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  uint64_t ValueAtIndex;
  const void *v6;
  uint64_t valuePtr;

  v0 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  v1 = v0;
  if (v0)
  {
    Count = CFArrayGetCount(v0);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v1, i);
        v6 = (const void *)ValueAtIndex;
        if (ValueAtIndex)
        {
          valuePtr = 0;
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
          ValueAtIndex = valuePtr;
        }
        if (vaeGetConnectionTypeForPort(ValueAtIndex) == 1885544823)
          CFArrayAppendValue(Mutable, v6);
      }
    }
    if (!Mutable)
      goto LABEL_13;
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      goto LABEL_13;
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    Mutable = 0;
    if (!v1)
      return Mutable;
    goto LABEL_14;
  }
LABEL_13:
  if (v1)
LABEL_14:
    CFRelease(v1);
  return Mutable;
}

CFTypeRef vaemCopyConnectedPortsForPortTypeAndScope(void *inQualifierData, AudioObjectPropertyScope a2)
{
  OSStatus PropertyData;
  CFTypeRef v3;
  BOOL v4;
  CFTypeID v5;
  CFTypeID TypeID;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  inAddress.mSelector = 1886549107;
  inAddress.mScope = a2;
  inAddress.mElement = 0;
  ioDataSize = 8;
  outData = 0;
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 4 * (inQualifierData != 0), inQualifierData, &ioDataSize, &outData);
  v3 = 0;
  if (PropertyData)
    v4 = 1;
  else
    v4 = outData == 0;
  if (!v4)
  {
    v5 = CFGetTypeID(outData);
    TypeID = CFArrayGetTypeID();
    v7 = outData;
    if (v5 == TypeID)
    {
      v8 = CFRetain(outData);
      v7 = outData;
      v3 = v8;
      if (!outData)
        return v3;
      goto LABEL_9;
    }
    v8 = 0;
    v3 = 0;
    if (outData)
    {
LABEL_9:
      CFRelease(v7);
      return v8;
    }
  }
  return v3;
}

void *CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "prefersNoInterruptionWhenSecureMicrophoneIsEngaged");
  return result;
}

uint64_t FigSystemControllerRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int program_sdk_version;
  uint64_t uint64;
  NSObject *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  xpc_object_t v18;
  xpc_object_t xdict;

  v18 = 0;
  xdict = 0;
  if (remoteSystemController_EnsureClientEstablished_err)
    v4 = 1;
  else
    v4 = gFigSystemControllerRemoteClient == 0;
  if (!v4)
    goto LABEL_13;
  v5 = objc_alloc(MEMORY[0x1E0C99D80]);
  v6 = (void *)objc_msgSend(v5, "initWithObjectsAndKeys:", CFSTR("ServerConnectionDied"), *MEMORY[0x1E0CA54A0], 0, 0, 0);
  v7 = FigXPCRemoteClientCreate();
  remoteSystemController_EnsureClientEstablished_err = v7;
  if ((_DWORD)v7 || gFigSystemControllerRemoteClient == 0)
    MXSimulateCrash(objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("FigXPCRemoteClientCreate failed with error=%d, gFigSystemControllerRemoteClient=%p"), v7, gFigSystemControllerRemoteClient), "UTF8String"));

  v9 = remoteSystemController_EnsureClientEstablished_err;
  if (!remoteSystemController_EnsureClientEstablished_err)
  {
LABEL_13:
    FigSystemControllerGetClassID();
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
    {
      v9 = v10;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v12 = FigXPCCreateBasicMessage();
      if ((_DWORD)v12
        || (program_sdk_version = dyld_get_program_sdk_version(),
            xpc_dictionary_set_uint64(xdict, (const char *)kFigSystemControllerXPCMsgParam_ClientLinkedSDK, program_sdk_version), v12 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v12))
      {
        v9 = v12;
        goto LABEL_21;
      }
      uint64 = xpc_dictionary_get_uint64(v18, (const char *)*MEMORY[0x1E0CA36A0]);
      *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
      v9 = FigXPCRemoteClientAssociateObject();
      if (!(_DWORD)v9)
      {
        *a3 = 0;
        goto LABEL_21;
      }
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t FigSystemControllerGetClassID()
{
  if (FigSystemControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  return FigSystemControllerGetClassID_sClassID;
}

void CMSMNotificationUtility_PostAvailableSampleRatesDidChange_f()
{
  CMSMUtility_NotifyEachMatchingSession(0, 0, 0, (uint64_t)CFSTR("AvailableSampleRatesDidChange"), 0, 0);
}

void cmsSetIsActive(void *a1, int a2, void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  uint64_t ContextString;
  uint64_t v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t CMBaseObject;
  void (*v27)(uint64_t, __CFString *, _QWORD);
  int NumberOfChannelsForVADIDAndScope;
  AudioObjectID CurrentOutputVADID;
  _BOOL4 IsCategoryInputOnly;
  uint64_t v31;
  NSObject *v32;
  MXDuckingSource *v33;
  uint64_t v34;
  double v35;
  double v36;
  MXDuckingSource *v37;
  int v38;
  int v39;
  void *v40;
  const __CFString *v41;
  const __CFString *v42;
  void *v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  _QWORD v54[6];
  os_log_type_t type;
  int v56;
  _BYTE buf[22];
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "isPlaying") & 1) == 0
    && (objc_msgSend(a1, "wasActiveWhenDeviceOwnershipRelinquished") & 1) == 0)
  {
    if (dword_1EE2B3F38)
    {
      v56 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(a1, "setIsPlayingStartTime:", 0, v46, v48);
    objc_msgSend(a1, "setIsPlayingStopTime:", 0);
  }
  if (objc_msgSend(a1, "isActive") != a2)
  {
    v7 = objc_msgSend(a1, "isActive");
    v8 = MXGetSessionLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v52 = objc_msgSend(a1, "clientName");
      v51 = objc_msgSend(a1, "audioCategory");
      v50 = objc_msgSend(a1, "audioMode");
      v9 = a3;
      if (CMSUtility_SessionMixesWithOthers(a1))
        v10 = "Mixable";
      else
        v10 = "NonMixable";
      ContextString = FigRoutingManagerContextUtilities_GetContextString(objc_msgSend(a1, "routingContextUUID"));
      v12 = objc_msgSend(a1, "siriInputDeviceUUID");
      v13 = v7;
      if (a2)
        v14 = "";
      else
        v14 = "in";
      v15 = a2;
      if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
        v16 = "YES";
      else
        v16 = "NO";
      v17 = objc_msgSend(a1, "isSharedAVAudioSessionInstance");
      *(_DWORD *)buf = 136449026;
      *(_QWORD *)&buf[4] = "-CMSessionMgr-";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "cmsSetIsActive";
      v58 = 1024;
      v59 = 5178;
      v60 = 2114;
      v61 = v52;
      v62 = 2114;
      v63 = v51;
      v64 = 2114;
      v65 = v50;
      v66 = 2082;
      v67 = v10;
      a3 = v9;
      v68 = 2114;
      v69 = ContextString;
      v70 = 2114;
      v71 = v12;
      v72 = 2082;
      v73 = v14;
      v7 = v13;
      v74 = 2082;
      v75 = v16;
      a2 = v15;
      v76 = 1024;
      v77 = v17;
      _os_log_impl(&dword_1935FC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@' with [%{public}@/%{public}@] [%{public}s] [%{public}@] siriEndpointID: %{public}@ going %{public}sactive NowPlayingApp:%{public}s IsSharedAVAudioSessionInstance:%{BOOL}u", buf, 0x72u);
    }
    if (objc_msgSend(a1, "sessionAssertionAuditTimer"))
    {
      dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "sessionAssertionAuditTimer"));
      objc_msgSend(a1, "setSessionAssertionAuditTimer:", 0);
    }
    v18 = MEMORY[0x1E0C809B0];
    if (a2)
    {
      objc_msgSend(a1, "setIsActive:", 1);
      objc_msgSend(a1, "setDoNotResetAudioCategoryOnNextInactive:", 0);
      objc_msgSend(a1, "setDoNotNotifyOtherSessionsOnNextInactive:", 0);
      if ((v7 & 1) == 0)
        cmsVibrateForSession(a1, 1);
      objc_msgSend(a1, "setInterruptingSession:", 0);
      objc_msgSend(a1, "setWaitingToResume:", 0);
      objc_msgSend(a1, "setWasInterruptedWhileSuspended:", 0);
      CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
      if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 2);
      if (CMSMUtility_IsCarPlaySessionPresent())
      {
        if (objc_msgSend(a1, "hasPhoneCallBehavior"))
        {
          byte_1EE2B3CA0 = 0;
          if (dword_1EE2B3F38)
          {
            v56 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
        && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
      {
        -[MXSessionManager replaceMutedBundleIDwithHostID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "replaceMutedBundleIDwithHostID");
        -[MXSessionManager applyUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "applyUplinkMute:", a1);
        -[MXSessionManager setUplinkMutedBundleID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setUplinkMutedBundleID:", 0);
      }
      -[MXSessionManager updateSupportedOutputChannelLayouts](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v46, v48), "updateSupportedOutputChannelLayouts");
      CMSUtility_CreateReporterIDIfNeeded(a1);
      if (objc_msgSend(a1, "hasAudioMode:", CFSTR("VoicePrompt")))
      {
        if (objc_msgSend(a1, "sessionDeactivateTimer"))
          dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "sessionDeactivateTimer"));
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "timeIntervalSince1970");
        v22 = v21;
        v23 = (double)(int)objc_msgSend(a1, "deactivateTimerDelay");
        v24 = MXGetSerialQueue();
        v54[0] = v18;
        v54[1] = 3221225472;
        v54[2] = __cmsSetIsActive_block_invoke;
        v54[3] = &unk_1E309DAB0;
        v54[4] = a1;
        v54[5] = v22;
        objc_msgSend(a1, "setSessionDeactivateTimer:", FigRoutingManagerCreateOneShotTimer(v24, v23, (uint64_t)v54, 0, 0));
      }
LABEL_75:
      v39 = objc_msgSend(a1, "isActive");
      v40 = (void *)objc_msgSend(a1, "activeOSTransaction");
      if (v39)
      {
        if (!v40)
        {
          if (objc_msgSend(a1, "clientName"))
            v41 = (const __CFString *)objc_msgSend(a1, "clientName");
          else
            v41 = CFSTR("MXSessionManager");
          if (objc_msgSend(a1, "displayID"))
            v42 = (const __CFString *)objc_msgSend(a1, "displayID");
          else
            v42 = CFSTR("MXSessionDefaultID");
          v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-%@"), v41, v42);
          objc_msgSend(v43, "UTF8String");
          objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
          objc_msgSend(a1, "setActiveOSTransaction:", FigOSTransactionCreate());

        }
        if (MX_FeatureFlags_IsSessionBasedMutingEnabled())
          CMSMNotificationUtility_PostIsRecordingMutedDidChange(a1);
      }
      else
      {
        if (v40)

        objc_msgSend(a1, "setActiveOSTransaction:", 0);
      }
      CMSMUtility_UpdateVoiceAssistantActiveStateForCarPlay(a1);
      CMSMUtility_UpdatePlayAndRecordAppSpeechState(a3);
      CMSMNotificationUtility_PostVoicePromptStyleDidChange();
      if (a1)
        CFRetain(a1);
      v44 = MXGetNotificationSenderQueue();
      v53[0] = v18;
      v53[1] = 3221225472;
      v53[2] = __cmsSetIsActive_block_invoke_93;
      v53[3] = &unk_1E3099900;
      v53[4] = a1;
      MXDispatchAsync((uint64_t)"cmsSetIsActive", (uint64_t)"CMSessionManager.m", 5500, 0, 0, v44, (uint64_t)v53);
      CMSMNotificationUtility_PostSomeClientIsActiveDidChange(objc_msgSend(a1, "audioSessionID"), objc_msgSend(a1, "isActive"), objc_msgSend(a1, "audioCategory"), objc_msgSend(a1, "audioMode"));
      if (MX_FeatureFlags_IsSharePlayEnabled()
        && ((objc_msgSend(a1, "isSharePlayMediaSession") & 1) != 0
         || objc_msgSend(a1, "isSharePlayCapableCallSession")))
      {
        CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange(objc_msgSend(a1, "isActive"));
      }
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, 0, 0xEu, 0, 0, 0);
      CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
      -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA");
      CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
      if (!a2
        && (objc_msgSend(a1, "doNotResetAudioCategoryOnNextInactive") & 1) == 0
        && !vaemIsDefaultVADInItsDefaultConfiguration()
        && !-[MXSessionManager isSiriSessionActiveAndRoutedToSiriOutputVAD](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSiriSessionActiveAndRoutedToSiriOutputVAD")&& !CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(0))
      {
        v45 = MXGetSessionLog();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "-CMSessionMgr-";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "cmsSetIsActive";
          v58 = 1024;
          v59 = 5538;
          _os_log_impl(&dword_1935FC000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Resetting Default VAD to Audio/Video as no other non IDS client is active on VAD", buf, 0x1Cu);
        }
        vaemResetVADCategoryToStandardAVAndDefaultMode();
      }
      return;
    }
    cmsVibrateForSession(a1, 0);
    if (CMSMUtility_IsCarPlaySessionPresent()
      && ((objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0 || CMSMUtility_PhoneCallOrRingtoneExists()))
    {
      byte_1EE2B3CA0 = 0;
      if (dword_1EE2B3F38)
      {
        v56 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v18 = MEMORY[0x1E0C809B0];
      }
    }
    -[MXSessionManager cancelAnyInProgressRampIfNeeded:reason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v46, v48), "cancelAnyInProgressRampIfNeeded:reason:", a1, 1);
    if ((objc_msgSend(a1, "doNotResetAudioCategoryOnNextInactive") & 1) != 0
      || (objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0
      && (objc_msgSend((id)objc_msgSend(a1, "interruptingSession"), "isHardwareSafetySession") & 1) == 0
      && !objc_msgSend((id)objc_msgSend(a1, "interruptingSession"), "isIDSMXCoreSession"))
    {
LABEL_59:
      if (objc_msgSend(a1, "sessionDeactivateTimer"))
      {
        dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "sessionDeactivateTimer"));
        objc_msgSend(a1, "setSessionDeactivateTimer:", 0);
        if (dword_1EE2B3F38)
        {
          v56 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAirPlaySession:", a1)&& (objc_msgSend(a1, "reporterStarted") & 1) == 0&& !objc_msgSend(a1, "sessionDeactivateTimer"))
      {
        CMSUtility_StartReporterWithAudioStatistics(a1);
      }
      if (objc_msgSend(a1, "isDucked", v47, v49))
      {
        -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "startAsyncDuckingOperation");
        v33 = [MXDuckingSource alloc];
        v34 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
        LODWORD(v35) = 0;
        LODWORD(v36) = 0;
        v37 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v33, "initWithType:ID:duckVolume:duckFadeDuration:", 3, v34, v35, v36);
        -[MXSessionManager unduckVolume:sessionCausingUnduck:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckVolume:sessionCausingUnduck:duckingSource:", a1, a1, v37);
        -[MXSessionManager endAsyncDuckingOperationForSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperationForSession:", a1);

      }
      CMSUtility_ResetIsPlayingStates(a1);
      objc_msgSend(a1, "setIsActive:", 0);
      objc_msgSend(a1, "setTookControlOfStarkMainAudio:", 0);
      objc_msgSend(a1, "setCurrentlyControllingFlags:", 0);
      objc_msgSend(a1, "setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:", 0);
      objc_msgSend(a1, "setNowPlayingAppWasStoppedOnMostRecentActivation:", 0);
      objc_msgSend(a1, "setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:", 0);
      objc_msgSend(a1, "setSystemSoundHasModifiedCurrentlyControllingFlags:", 0);
      CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
      if (objc_msgSend(a1, "orientationOverride") != 5)
      {
        objc_msgSend(a1, "setOrientationOverride:", 5);
        vaemSetOrientationOverride(objc_msgSend(a1, "orientationOverride"));
        *(_QWORD *)buf = 0;
        *(_DWORD *)buf = objc_msgSend(a1, "orientationOverride");
        *(_QWORD *)&buf[8] = 0;
        vaemSetCaptureOrientationOverride();
      }
      objc_msgSend(a1, "setWasActiveWhenDeviceOwnershipRelinquished:", 0);
      -[MXSessionManager cleanupSessionAssertionsIfNeeded:cleanupReason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "cleanupSessionAssertionsIfNeeded:cleanupReason:", a1, 0);
      if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        v38 = v7;
      else
        v38 = 0;
      if (v38 == 1)
        cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
      goto LABEL_75;
    }
    if (!vaemIsDefaultVADInItsDefaultConfiguration())
    {
      objc_msgSend(a1, "setIsActive:", 0);
      objc_msgSend(a1, "setCurrentlyControllingFlags:", 0);
      if (CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(a1))
      {
        if (CMSUtility_IsSomeOtherNonIDSClientActiveWithNonDefaultVADConfiguration(a1))
          goto LABEL_51;
        v25 = MXGetSessionLog();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "-CMSessionMgr-";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "cmsSetIsActive";
          v58 = 1024;
          v59 = 5326;
          _os_log_impl(&dword_1935FC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Resetting Default VAD to Audio/Video as there are no ther non IDS clients active on VAD with non Default VAD configuration", buf, 0x1Cu);
        }
      }
      vaemResetVADCategoryToStandardAVAndDefaultMode();
    }
LABEL_51:
    if (objc_msgSend(a1, "disallowAudioFormatChanges"))
    {
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v27 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v27)
        v27(CMBaseObject, CFSTR("VAEM_DisallowAudioFormatChanges"), *MEMORY[0x1E0C9AE40]);
    }
    NumberOfChannelsForVADIDAndScope = vaemGetNumberOfChannelsForVADIDAndScope(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
    if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
    {
      CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
      IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
      if (vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly)
        || NumberOfChannelsForVADIDAndScope != 2)
      {
        if (-[MXSessionManager shouldSetDeviceFormatAndSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "shouldSetDeviceFormatAndSampleRate:", a1))
        {
          v31 = CMSUtility_GetCurrentOutputVADID(a1);
          vaemSetDeviceFormat(v31, CFSTR("LPCM"), 1);
        }
      }
    }
    goto LABEL_59;
  }
}

uint64_t FigRoutingManagerContextUtilities_GetContextString(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[7];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  if (a1)
  {
    v4 = 0;
    v5 = &v4;
    v6 = 0x2020000000;
    v7 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
    {
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = __FigRoutingManagerContextUtilities_GetContextString_block_invoke;
      v3[3] = &unk_1E3098D60;
      v3[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v3[6] = v1;
      v3[4] = &v4;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetContextString", (uint64_t)"FigRoutingManagerContextUtilities.m", 577, 0, 0, qword_1EE2B2EA0, (uint64_t)v3);
    }
    v1 = v5[3];
    _Block_object_dispose(&v4, 8);
  }
  return v1;
}

void sub_19364639C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t MX_FeatureFlags_IsCallManagementMuteControlEnabled()
{
  if (MX_FeatureFlags_IsCallManagementMuteControlEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsCallManagementMuteControlEnabled_onceToken, &__block_literal_global_22);
  return MX_FeatureFlags_IsCallManagementMuteControlEnabled_sCallManagementMuteControlEnabled;
}

uint64_t cmsVibrateForSession(void *a1, int a2)
{
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CStringPtrAndBufferToFree;
  uint64_t v10;
  const char *v11;
  const char *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char __str[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "isActive");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a1, "isVibrating");
    if (a2)
    {
      if ((result & 1) == 0)
      {
        result = objc_msgSend(a1, "vibrationData");
        if (result)
        {
          result = CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark();
          if ((_DWORD)result)
          {
            if (CMSMDeviceState_IsVibrationDisabled()
              && (result = objc_msgSend(a1, "prefersToVibeWhenVibrationsAreDisabled"), (result & 1) == 0))
            {
              if (dword_1EE2B3F38)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                return fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1EE2B3F38)
              {
                v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!objc_msgSend(a1, "vibratingOSTransaction", v14, v15))
              {
                v16 = 0;
                objc_msgSend(a1, "clientName");
                CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
                objc_msgSend(a1, "displayID");
                v10 = FigCFStringGetCStringPtrAndBufferToFree();
                v11 = "CMSessionManager";
                if (CStringPtrAndBufferToFree)
                  v11 = (const char *)CStringPtrAndBufferToFree;
                v12 = "CMSessionDefaultID";
                if (v10)
                  v12 = (const char *)v10;
                snprintf(__str, 0x80uLL, "%s-%s", v11, v12);
                free(v16);
                free(0);
                objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                objc_msgSend(a1, "setVibratingOSTransaction:", FigOSTransactionCreate());
              }
              objc_msgSend(a1, "setIsVibrating:", 1);
              v13 = MX_FeatureFlags_IsHapticEngineCPMSEnabled() != 0;
              return FigVibratorPlayVibrationWithDictionary((CFDictionaryRef)objc_msgSend(a1, "vibrationData"), 0, 0, 0, 0, 1, v13, 1.0);
            }
          }
        }
      }
    }
    else if ((_DWORD)result)
    {
      if (dword_1EE2B3F38)
      {
        v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigVibratorStopWithOptions(0);
      objc_msgSend(a1, "setIsVibrating:", 0);
      v7 = (void *)objc_msgSend(a1, "vibratingOSTransaction");
      if (v7)

      return objc_msgSend(a1, "setVibratingOSTransaction:", 0, v14, v15);
    }
  }
  return result;
}

uint64_t CMSUtility_SessionMixesWithOthers(void *a1)
{
  unsigned int v1;

  v1 = objc_msgSend(a1, "interruptionStyle");
  return (v1 > 8) | (0xEDu >> v1) & 1;
}

void cmsTakeControl(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, __CFString *, _QWORD, uint64_t, uint64_t, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const __CFArray *v12;
  const __CFArray *A2DPPort;
  NSObject *v14;
  const __CFString *v15;
  _BOOL4 IsSystemAudioRoutingToDeviceID;
  int ShouldSessionSetInputSampleRate;
  const char *v18;
  double v19;
  double v20;
  unsigned int PreferredIOBufferFrames;
  const char *v22;
  float PreferredIOBufferDuration;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if ((objc_msgSend(a1, "dontTakeOverHardware") & 1) == 0)
  {
    v4 = qword_1EE2B3BE0;
    v5 = objc_msgSend(a1, "audioCategory");
    v6 = objc_msgSend(a1, "audioMode");
    v7 = *(void (**)(uint64_t, __CFString *, _QWORD, uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
    if (v7)
      v7(v4, CFSTR("VAEM_InputDeviceIsAvailableForRouteConfiguration"), *MEMORY[0x1E0C9AE00], v5, v6, 0, cf);
    if (objc_msgSend(a1, "hasInput") && (CFTypeRef)*MEMORY[0x1E0C9AE40] == cf[0])
      a2 &= ~2u;
    if (!CMSUtility_IsPlayingToDefaultVAD(a1) && !objc_msgSend(a1, "clientPriority"))
      a2 &= ~2u;
    if (CMSMVAUtility_IsAdditiveRoutingEnabled()
      && objc_msgSend(a1, "willRouteToOnDemandVADOnActivation"))
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setCurrentlyControllingFlags:", 0, v24, v27);
      a2 = 0;
    }
    if ((objc_msgSend(a1, "prefersToTakeHWControlFlagsFromAnotherSession") & 1) == 0
      && CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio())
    {
      a2 &= ~0x10u;
    }
    if (objc_msgSend(a1, "isIDSMXCoreSession") && a2)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = 0;
    }
    objc_msgSend(a1, "setCurrentlyControllingFlags:", objc_msgSend(a1, "currentlyControllingFlags", v24, v27) | a2);
    if (dword_1EE2B3F38)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
      CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 11);
    if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
      cmsmUpdateDeviceAudioFormatConfigIfNeeded(0);
    if ((objc_msgSend(a1, "currentlyControllingFlags", v25, v28) & 2) != 0)
    {
      if (objc_msgSend(a1, "waitingForRemoteInterruptionDoneIdentifier"))
      {
        CMSM_IDSConnection_WaitForReply((const void *)objc_msgSend(a1, "waitingForRemoteInterruptionDoneIdentifier"));
        objc_msgSend(a1, "setWaitingForRemoteInterruptionDoneIdentifier:", 0);
      }
      if (-[MXSessionManager carPlayIsConnected](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "carPlayIsConnected"))
      {
        if (dword_1EE2B3F38)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 0))
        {
          v12 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
          A2DPPort = cmsmGetA2DPPort(v12);
          if (v12)
            CFRelease(v12);
          if (cmsmShouldRequestOwnershipOnSharedAudioRoute(a1, (uint64_t)A2DPPort))
          {
            if (!vaeRequestOwnershipOnBTPort((uint64_t)A2DPPort))
              objc_msgSend(a1, "setAddSharedAudioRouteToRoutablePorts:", 1);
          }
          else if (vaeGetBTPortOwnsSharedAudioConnection((uint64_t)A2DPPort))
          {
            v15 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort((AudioObjectID)A2DPPort);
            IsSystemAudioRoutingToDeviceID = FigRoutingManagerUtilities_IsSystemAudioRoutingToDeviceID(v15);
            if (!IsSystemAudioRoutingToDeviceID
              || !vaeDoesBTPortSupportInEarDetection((AudioObjectID)A2DPPort)
              || CMSMVAUtility_ShouldBTPortBeTreatedAsInEar((AudioObjectID)A2DPPort))
            {
              objc_msgSend(a1, "setAddSharedAudioRouteToRoutablePorts:", IsSystemAudioRoutingToDeviceID);
            }
            if (v15)
              CFRelease(v15);
          }
        }
        else if (dword_1EE2B3F38)
        {
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
          && objc_msgSend(a1, "shouldAttemptSmartRoutingHijackForMusicApp"))
        {
          CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 10);
        }
      }
      objc_msgSend(a1, "currentlyControllingFlags", v26, v29);
      cmsSetCategoryOnPVMAndAudioDevice(a1);
    }
    -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA");
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    if ((objc_msgSend(a1, "currentlyControllingFlags") & 0x10) != 0
      || !CMSUtility_IsPlayingToDefaultVAD(a1))
    {
      if (objc_msgSend(a1, "wasMutedBeforeInterruption"))
        MXCoreSessionSetProperty(a1, CFSTR("UserMuted"), (NSDictionary *)*MEMORY[0x1E0C9AE50], 0);
      objc_msgSend(a1, "setWasMutedBeforeInterruption:", 0);
      if ((objc_msgSend(a1, "doesntActuallyPlayAudio") & 1) == 0)
        CMSUtility_UpdatePlaybackVolume(a1, 0.0, 0.0);
    }
    if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled()
      && ((objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0
       || -[MXSessionManager shouldSetDeviceFormatAndSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "shouldSetDeviceFormatAndSampleRate:", a1)|| FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)&& CMSUtility_IsPlayingToSystemSoundRemoteVAD(a1)))
    {
      ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(a1);
      if (ShouldSessionSetInputSampleRate)
        objc_msgSend(a1, "preferredInputSampleRate");
      else
        objc_msgSend(a1, "preferredOutputSampleRate");
      v20 = v19;
      PreferredIOBufferFrames = CMSUtility_GetPreferredIOBufferFrames(a1, v18);
      PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(a1, v22);
      cmsSetDeviceSampleRateAndBufferSize(a1, PreferredIOBufferFrames, ShouldSessionSetInputSampleRate != 0, v20, PreferredIOBufferDuration);
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
}

void CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded()
{
  id v0;
  void *v1;
  uint64_t LocalSessionPriority;
  id v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_onceToken != -1)
    dispatch_once(&CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_onceToken, &__block_literal_global_35_0);
  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
    v0 = -[MXSessionManager copyHighestPriorityActiveSession:deviceIdentifier:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyHighestPriorityActiveSession:deviceIdentifier:", 0x1E30A4C28, 0);
  else
    v0 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
  v1 = v0;
  LocalSessionPriority = CMSM_GetLocalSessionPriority(v0, 1);
  v3 = objc_alloc(MEMORY[0x1E0C99D80]);
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", LocalSessionPriority);
  if (objc_msgSend(v1, "displayID"))
    v5 = (const __CFString *)objc_msgSend(v1, "displayID");
  else
    v5 = CFSTR("Unknown");
  v6 = (void *)objc_msgSend(v3, "initWithObjectsAndKeys:", v4, CFSTR("HighestArbitrationPriorityForTipi_AudioScore"), v5, CFSTR("HighestArbitrationPriorityForTipi_BundleID"), 0);
  objc_msgSend((id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfoLock, "lock");
  if ((objc_msgSend((id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfo, "isEqualToDictionary:", v6) & 1) == 0)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("HighestArbitrationPriorityForTipiDidChange"), v6, 0, v8, v9);

    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfo = v6;
  }
  objc_msgSend((id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfoLock, "unlock");

}

uint64_t MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
{
  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_onceToken, &__block_literal_global_38);
  return MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_sSmartRoutingOnActivationEnabled;
}

id CMSM_CopyHighestPriorityLocalPlayingSession(int a1)
{
  __CFArray *v2;
  const __CFArray *v3;
  id v4;
  CFIndex v5;
  unsigned int v6;
  void *ValueAtIndex;
  unsigned int LocalSessionPriority;
  unsigned int v10;

  v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 100;
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v5);
      LocalSessionPriority = CMSM_GetLocalSessionPriority(ValueAtIndex, a1);
      if (LocalSessionPriority != 100 && LocalSessionPriority > v6)
      {
        v10 = LocalSessionPriority;
        if ((objc_msgSend(ValueAtIndex, "currentlyControllingFlags") & 2) != 0)
        {
          if (CMSUtility_IsPlayingToDefaultVAD(ValueAtIndex))
          {

            v4 = ValueAtIndex;
            v6 = v10;
          }
        }
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(v3));
  }
  CFRelease(v3);
  return v4;
}

__CFArray *CMSMUtility_CopyMatchingSessions(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  __CFArray *Mutable;
  NSPointerArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          v12 = *(const void **)(*((_QWORD *)&v14 + 1) + 8 * v11);
          if (!a2 || a2(a1, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11), a3))
            CFArrayAppendValue(Mutable, v12);
          ++v11;
        }
        while (v9 != v11);
        v9 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t CMSUtilityPredicate_IsPlaying(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isPlaying");
}

uint64_t CMSUtilityPredicate_IsActive(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isActive");
}

void *CMSUtility_GetPreferredIOBufferFrames(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "preferredIOBufferFrames");
  return a1;
}

uint64_t CMSUtility_IsPlayingToDefaultVAD(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(a1, "audioDestinationPriority");
  if (a1 && v2)
    -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v2);
  return FigCFEqual();
}

float CMSUtility_GetPreferredIOBufferDuration(void *a1, const char *a2)
{
  float result;

  if (!a1)
    return 0.0;
  objc_msgSend(a1, "preferredIOBufferDuration");
  return result;
}

uint64_t _VAEndpointManager_CopyPropertyForRouteConfiguration(uint64_t a1, const void *a2, uint64_t a3, NSDictionary *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  void *v12;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  unsigned int v15;
  CFTypeRef *v16;
  void *v17;

  CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (a2 && a7)
  {
    *a7 = 0;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A28]))
    {
      v12 = vaemCopyAvailableEndpointsForRouteConfiguration(CFSTR("Audio/Video"), CFSTR("Default"), 0, 0);
    }
    else if (CFEqual(a2, CFSTR("VAEM_InputDeviceIsAvailableForRouteConfiguration")))
    {
      VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a4);
      VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a5);
      v15 = vaemSystemHasAudioInputDeviceForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName);
      v16 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      if (v15)
        v16 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v12 = (void *)CFRetain(*v16);
    }
    else
    {
      result = CFEqual(a2, CFSTR("VAEM_ActiveInputRouteNamesForRouteConfiguration"));
      if (!(_DWORD)result)
        return result;
      v12 = vaemCopyActiveInputRouteNamesForRouteConfiguration(a4, a5, 0);
    }
    v17 = v12;
    result = 0;
    *a7 = v17;
  }
  return result;
}

const __CFArray *vaemSystemHasAudioInputDeviceForRouteConfiguration(int a1, int a2)
{
  const __CFArray *result;
  const __CFArray *v3;
  CFIndex Count;

  result = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(a1, a2, 0, 1);
  if (result)
  {
    v3 = result;
    Count = CFArrayGetCount(result);
    CFRelease(v3);
    return (const __CFArray *)(Count > 0);
  }
  return result;
}

uint64_t CMSMVAUtility_WillSessionWithDescriptionRouteToOnDemandVADOnActivation(uint64_t a1, _BYTE *a2)
{
  id v4;
  void *v5;
  uint64_t PropertyData;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", a1, 0);
    objc_msgSend(v4, "setObject:forKey:", v5, 0x1E30A8268);
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"srdobolg";
    inAddress.mElement = 0;
    ioDataSize = 4;
    outData = 0;
    PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8u, v4, &ioDataSize, &outData);
    if (!(_DWORD)PropertyData)
      *a2 = outData;

  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954316;
  }
  return PropertyData;
}

BOOL vaemIsNotCurrentDeviceFormat(AudioObjectID a1, int a2)
{
  int v2;
  CFTypeRef cf;

  cf = 0;
  vaemCopyDeviceFormat(a1, a2, &cf);
  v2 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v2 == 0;
}

void vaemCopyDeviceFormat(AudioObjectID a1, int a2, CFTypeRef *a3)
{
  int v4;
  __CFString **v5;
  int v6;

  if (a3)
  {
    v6 = 0;
    vaemGetDeviceFormatID(a1, a2, &v6);
    if (!v4)
    {
      if (v6 > 1836343850)
      {
        if (v6 == 1836343851 || v6 == 1836344107)
        {
          v5 = kMXSessionAudioHardwareFormat_MATAtmos;
          goto LABEL_12;
        }
      }
      else
      {
        if (v6 == 1667326771)
        {
          v5 = kMXSessionAudioHardwareFormat_AC3;
          goto LABEL_12;
        }
        if (v6 == 1819304813)
        {
          v5 = kMXSessionAudioHardwareFormat_LPCM;
LABEL_12:
          *a3 = CFRetain(*v5);
          return;
        }
      }
      FigSignalErrorAt();
    }
  }
}

uint64_t CMSUtility_ShouldSessionSetInputSampleRate(void *a1)
{
  uint64_t result;

  if (CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory")))
    return 1;
  result = objc_msgSend(a1, "preferredDecoupledInputOutput");
  if ((_DWORD)result)
    return vaemDecoupledInputVADExists();
  return result;
}

uint64_t vaeGetBTPortOwnsSharedAudioConnection(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)result)
  {
    v1 = result;
    *(_QWORD *)&inAddress.mSelector = 0x676C6F626F736163;
    inAddress.mElement = 0;
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      outData = 0;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData != 0;
      }
    }
  }
  return result;
}

uint64_t cmsmShouldRequestOwnershipOnSharedAudioRoute(void *a1, uint64_t a2)
{
  unsigned int PartnersForPort;
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t Count;
  const void *UInt32;
  unsigned int LocalSessionPriority;
  unsigned int HighestRemotePlayingSessionPriority;
  uint64_t ShouldSetupForCoordinatedInterruptions;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  const void *v16;
  int v17;
  const void *v18;
  _OWORD outData[2];
  uint64_t v20;
  CFRange v21;
  CFRange v22;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2 || !vaeDoesPortSupportMultipleConnections(a2))
    return 0;
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
  {
    if (a1)
    {
      memset(outData, 0, sizeof(outData));
      PartnersForPort = vaeGetPartnersForPort(a2, outData);
      v5 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)objc_msgSend(a1, "audioCategory"), objc_msgSend(a1, "audioMode"), (const void *)objc_msgSend(a1, "allowedPortTypes"));
      v6 = v5;
      if (v5)
      {
        Count = CFArrayGetCount(v5);
        UInt32 = (const void *)FigCFNumberCreateUInt32();
        if (Count >= 1)
        {
          v21.location = 0;
          v21.length = Count;
          if (CFArrayContainsValue(v6, v21, UInt32))
          {
LABEL_8:
            LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 0);
            HighestRemotePlayingSessionPriority = CMSM_GetHighestRemotePlayingSessionPriority();
            ShouldSetupForCoordinatedInterruptions = 0;
            if (LocalSessionPriority < 0x65 || LocalSessionPriority < HighestRemotePlayingSessionPriority)
            {
LABEL_23:
              if (!UInt32)
                goto LABEL_25;
              goto LABEL_24;
            }
            if ((objc_msgSend(a1, "isIDSMXCoreSession") & 1) == 0)
            {
              ShouldSetupForCoordinatedInterruptions = cmsmShouldSetupForCoordinatedInterruptions(a2, 1);
              if (!UInt32)
              {
LABEL_25:
                if (v6)
                  CFRelease(v6);
                return ShouldSetupForCoordinatedInterruptions;
              }
LABEL_24:
              CFRelease(UInt32);
              goto LABEL_25;
            }
          }
          else if (PartnersForPort)
          {
            v18 = UInt32;
            v13 = 0;
            v14 = 1;
            v15 = PartnersForPort;
            while (1)
            {
              v16 = (const void *)FigCFNumberCreateUInt32();
              v22.location = 0;
              v22.length = Count;
              v17 = CFArrayContainsValue(v6, v22, v16);
              if (v16)
                CFRelease(v16);
              if (v17)
                break;
              v14 = ++v13 < v15;
              if (v15 == v13)
              {
                ShouldSetupForCoordinatedInterruptions = 0;
                UInt32 = v18;
                if (v18)
                  goto LABEL_24;
                goto LABEL_25;
              }
            }
            UInt32 = v18;
            if (v14)
              goto LABEL_8;
          }
        }
      }
      else
      {
        UInt32 = (const void *)FigCFNumberCreateUInt32();
      }
      ShouldSetupForCoordinatedInterruptions = 0;
      goto LABEL_23;
    }
    if (cmsmShouldSetupForCoordinatedInterruptions(a2, 0)
      && !CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
      && !CMSM_IDSServer_IsAutomaticOwnershipTransferToPhoneTimerCreated())
    {
      return CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo() == 0;
    }
    return 0;
  }
  if (vaeGetBTPortOwnsSharedAudioConnection(a2))
    return 0;
  if (vaeDoesBTPortSupportInEarDetection(a2))
    return CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a2);
  return 1;
}

const __CFArray *cmsmGetA2DPPort(const __CFArray *result)
{
  const __CFArray *v1;
  uint64_t Count;
  CFIndex v3;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    if (Count)
    {
      v3 = 0;
      while (1)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, v3);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeGetPortTypeFromPortID(valuePtr) == 1885892674)
          break;
        if (Count == ++v3)
          return 0;
      }
      return (const __CFArray *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *CMSUtility_CopyDeviceHintsForSession(void *a1)
{
  int IsHangsBufferedSizeHintEnabled;
  _BOOL4 v3;
  float v4;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v8;
  CFDataRef v9;
  float v10;
  float v11;
  UInt8 *v12;
  double v13;
  float v14;
  double v15;
  unsigned int v16;
  CFDataRef v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  UInt8 v23[32];
  __int128 v24;
  UInt8 bytes[32];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v26 = 0u;
  memset(bytes, 0, sizeof(bytes));
  v24 = 0u;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v21, 0, sizeof(v21));
  preferredBufferDuration = 0;
  IsHangsBufferedSizeHintEnabled = MX_FeatureFlags_IsHangsBufferedSizeHintEnabled();
  v3 = 0;
  if (a1 && IsHangsBufferedSizeHintEnabled)
  {
    objc_msgSend(a1, "preferredIOBufferDuration");
    v3 = v4 != 0.0;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((objc_msgSend(a1, "currentlyControllingFlags", v19, v20) & 2) != 0)
  {
    objc_msgSend(a1, "preferredOutputSampleRate");
    if (v8 != 0.0)
    {
      *(_DWORD *)bytes = CMSUtility_GetVADType(a1);
      *(_OWORD *)&bytes[4] = xmmword_1937A3F50;
      *(_QWORD *)&bytes[24] = 0;
      LODWORD(v26) = 8;
      *((_QWORD *)&v26 + 1) = objc_msgSend(a1, "getPreferredOutputSampleRatePointer");
      v9 = CFDataCreate(v5, bytes, 48);
      CFArrayAppendValue(Mutable, v9);
      if (v9)
        CFRelease(v9);
    }
    if (v3)
    {
      objc_msgSend(a1, "preferredIOBufferDuration");
      if (v10 != 0.0)
      {
        objc_msgSend(a1, "preferredIOBufferDuration");
        *(double *)&preferredBufferDuration = v11;
        v21[0] = xmmword_1937A3F70;
        LODWORD(v22) = 8;
        *((_QWORD *)&v22 + 1) = &preferredBufferDuration;
        v12 = (UInt8 *)v21;
        goto LABEL_23;
      }
    }
    objc_msgSend(a1, "preferredOutputSampleRate");
    if (v13 != 0.0)
    {
      objc_msgSend(a1, "preferredIOBufferDuration");
      if (v14 != 0.0 && !objc_msgSend(a1, "preferredIOBufferFrames"))
      {
        objc_msgSend(a1, "preferredIOBufferDuration");
        objc_msgSend(a1, "preferredOutputSampleRate");
        objc_msgSend(a1, "setPreferredIOBufferFrames:", FigUInt32NearestPowerOfTwo());
        LODWORD(v15) = 0;
        objc_msgSend(a1, "setPreferredIOBufferDuration:", v15);
      }
    }
    if (objc_msgSend(a1, "preferredIOBufferFrames"))
    {
      v16 = objc_msgSend(a1, "preferredIOBufferFrames");
      if (!FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB48)
        || !(v16 % 0x18)
        || !(v16 % 0x1E)
        || (v16 & 0x1F) == 0)
      {
        *(_DWORD *)v23 = CMSUtility_GetVADType(a1);
        *(_OWORD *)&v23[4] = xmmword_1937A3F60;
        *(_QWORD *)&v23[24] = 0;
        LODWORD(v24) = 4;
        *((_QWORD *)&v24 + 1) = objc_msgSend(a1, "getPreferredIOBufferFramesPointer");
        v12 = v23;
LABEL_23:
        v17 = CFDataCreate(v5, v12, 48);
        CFArrayAppendValue(Mutable, v17);
        if (v17)
          CFRelease(v17);
      }
    }
  }
  return Mutable;
}

uint64_t vaemGetVirtualAudioDeviceType(AudioObjectID a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  unsigned int outData;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = 1986291046;
  ioDataSize = 4;
  outData = 1986291046;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"ptdvbolg";
  inAddress.mElement = 0;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    return outData;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

uint64_t CMSUtility_GetVADType(void *a1)
{
  uint64_t v1;
  __CFString *v2;
  AudioObjectID VADIDForVADName;

  if (!a1)
    return 1986291046;
  v1 = objc_msgSend(a1, "audioDestinationPriority");
  if (v1)
    v2 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v1);
  else
    v2 = CFSTR("VirtualAudioDevice_Default");
  VADIDForVADName = CMSMUtility_GetVADIDForVADName((uint64_t)v2);
  return vaemGetVirtualAudioDeviceType(VADIDForVADName);
}

CFArrayRef CMSM_IDSConnection_CopySharedAudioRoutePortIDs()
{
  if (qword_1EE2B3040)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)qword_1EE2B3040);
  else
    return 0;
}

BOOL FigVAEndpointManagerGetPropertyBoolean(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  _BOOL8 v5;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v4 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    return 0;
  v4(CMBaseObject, a2, *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  v5 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CFRelease(cf);
  return v5;
}

BOOL vaemDecoupledInputVADExists()
{
  return -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID") != 0;
}

uint64_t CMSMUtility_IsCarPlaySessionPresent()
{
  uint64_t result;

  result = (uint64_t)CMSMUtility_CopyCarPlaySession();
  if (result)
  {

    return 1;
  }
  return result;
}

id CMSMUtility_CopyCarPlaySession()
{
  id v0;

  MEMORY[0x1940352BC](gCMSM);
  v0 = (id)qword_1EE2B3CD0;
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

void CMSMNotificationUtility_PostSomeClientIsActiveDidChange(unsigned int a1, int a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  id v10;

  if (!-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", a3))
  {
    v8 = objc_alloc(MEMORY[0x1E0C99D80]);
    v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1);
    v10 = (id)objc_msgSend(v8, "initWithObjectsAndKeys:", v9, CFSTR("AudioSessionID"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2 != 0), CFSTR("IsActive"), a3, CFSTR("AudioCategory"), a4, CFSTR("AudioMode"), 0);
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:remoteDeviceID:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:remoteDeviceID:", CFSTR("SomeClientIsActiveDidChange"), v10, 0, 0);

  }
}

uint64_t vaemResetVADCategoryToStandardAVAndDefaultMode()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _BYTE v14[23];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager setCurrentAudioCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCurrentAudioCategory:", CFSTR("Audio/Video"));
  -[MXSessionManager setCurrentAudioMode:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCurrentAudioMode:", CFSTR("Default"));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = 0x696D646663736176;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v12 = 1;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  return cmsmSetVADRouteConfiguration(&v2, 0, qword_1EE2B3CF0);
}

uint64_t vaemVADRouteChangeListener(int a1, void *a2, uint64_t a3, int a4, const void *a5, int a6)
{
  unsigned int v8;
  void **v9;
  unsigned int NumberOfCurrentOutputPorts;
  _BOOL4 IsAdditiveRoutingEnabled;
  const void *v12;
  const __CFArray *Value;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v19;
  CFTypeID v20;
  const void *v21;
  MXSessionManager *v22;
  MXSessionManager *v23;
  MXSessionManager *v24;
  MXSessionManager *v25;
  MXSessionManager *v26;
  MXSessionManager *v27;
  MXSessionManager *v28;
  MXSessionManager *v29;
  MXSessionManager *v30;
  MXSessionManager *v31;
  MXAdditiveRoutingManager *v32;
  __objc2_class **p_superclass;
  NSDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  CFIndex k;
  CFIndex v40;
  const void *v41;
  int VADIDForVADName;
  AudioObjectID v43;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v45;
  unsigned int v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  unsigned int v55;
  const char *v56;
  __CFArray *v57;
  CFRange v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int DoesBluetoothSupportFeature;
  int IsInterruptingPlayingSessionsInOnenessEnabled;
  CFTypeRef v69;
  uint64_t *v70;
  CFIndex v71;
  CFIndex v72;
  CFIndex v73;
  int v74;
  const __CFNumber *v75;
  NSPointerArray *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t m;
  NSPointerArray *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t n;
  int CurrentInputPortAtIndex;
  int CurrentOutputPortAtIndex;
  NSPointerArray *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  int ContextType;
  __CFArray *v95;
  uint64_t v96;
  const void *v97;
  _BOOL4 v98;
  CFStringRef v99;
  CFStringRef v100;
  int v101;
  int v102;
  int v103;
  char v104;
  NSObject *v105;
  unsigned int v106;
  unsigned int v107;
  CFStringRef DeviceRoutesString;
  NSObject *v109;
  unsigned int v110;
  unsigned int v111;
  NSObject *v112;
  unsigned int v113;
  unsigned int v114;
  NSObject *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  CFTypeRef v120;
  int v121;
  int v122;
  const __CFString *v123;
  NSObject *v124;
  unsigned int v125;
  unsigned int v126;
  const __CFString *v127;
  unint64_t VectorCMSRouteInfoSize;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  const __CFAllocator *v133;
  uint64_t CMSRouteInfoPtrAt;
  const void *v135;
  int v136;
  BOOL v137;
  const void *v138;
  uint64_t *v139;
  __CFArray *Mutable;
  unint64_t v141;
  const void *SInt64;
  const void *v143;
  char v144;
  int v145;
  __CFArray *v146;
  uint64_t v147;
  _BOOL4 v149;
  float v150;
  const __CFString *v151;
  NSString *v152;
  uint64_t VolumeSequenceNumber;
  const __CFString *v154;
  uint64_t v155;
  unsigned int v156;
  _QWORD *v157;
  const void *v158;
  const void *v159;
  const void *v160;
  uint64_t v161;
  int v162;
  __CFArray *v163;
  int v164;
  id v165;
  unsigned int v166;
  int v167;
  int CurrentOutputVADID;
  dispatch_time_t v169;
  NSObject *v170;
  __CFArray *v171;
  MXSessionManager *v172;
  NSObject *v173;
  unsigned int v174;
  unsigned int v175;
  id v176;
  NSObject *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  NSObject *v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  __CFArray *v187;
  __CFDictionary *v188;
  const void *v189;
  unsigned __int8 v190;
  char IsAnySessionPlayingToIndependentSystemMusicContext;
  uint64_t v192;
  const __CFArray *v193;
  CFTypeRef v194;
  int v195;
  char v196;
  int v197;
  uint64_t v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  NSObject *v201;
  unsigned int v202;
  unsigned int v203;
  const __CFString *v204;
  const __CFString *v205;
  uint64_t v206;
  int v207;
  int v208;
  NSObject *v209;
  unsigned int v210;
  unsigned int v211;
  NSObject *v212;
  CFTypeRef v213;
  unsigned int v215;
  __CFDictionary *v216;
  _OWORD *v217;
  _OWORD *v218;
  _OWORD *v219;
  uint64_t v220;
  BOOL v221;
  unsigned int v222;
  int v224;
  const __CFAllocator *v225;
  int8x16_t v226;
  unsigned int v227;
  __CFArray *v228;
  CFTypeRef v229;
  const void *v230;
  const char *v231;
  int v232;
  CFStringRef v233;
  __CFArray *OverridePortsList;
  CFStringRef v235;
  uint64_t *v236;
  unsigned int v238;
  const char *v239;
  CFTypeRef v240;
  _BOOL4 v241;
  const __CFArray *theDicta;
  const char *v244;
  unsigned int PortTypeFromPortID;
  void **VectorCMSRouteInfo;
  const __CFArray *v247;
  const char *v248;
  int v249;
  char v250[40];
  unsigned int v251;
  CFTypeRef v252;
  CFTypeRef v253;
  CFTypeRef v254;
  CFTypeRef v255;
  CFTypeRef v256;
  CFTypeRef v257;
  char v258[40];
  unsigned int v259;
  char v260[8];
  uint64_t v261;
  char v262[24];
  uint64_t v263;
  char v264[16];
  uint64_t v265;
  uint64_t v266[6];
  CFTypeRef cf;
  char v268[9];
  char v269;
  __int16 v270;
  uint64_t v271;
  os_log_type_t v272;
  unsigned int v273;
  CFTypeRef v274;
  os_log_type_t type[8];
  CFTypeRef v276;
  _OWORD valuePtr[2];
  _BYTE v278[40];
  __int16 v279;
  const char *v280;
  __int16 v281;
  const char *v282;
  __int16 v283;
  const char *v284;
  __int128 outData;
  __int128 v286;
  __int128 v287;
  uint64_t v288;

  v288 = *MEMORY[0x1E0C80C00];
  v227 = -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID");
  v8 = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
  VectorCMSRouteInfo = (void **)MXVW_CreateVectorCMSRouteInfo();
  v9 = (void **)MXVW_CreateVectorCMSRouteInfo();
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  v271 = 0;
  v269 = 0;
  v270 = 0;
  strcpy(v268, "onisfdmi");
  cf = 0;
  IsAdditiveRoutingEnabled = CMSMVAUtility_IsAdditiveRoutingEnabled();
  if (!a6 && IsAdditiveRoutingEnabled)

  vaemCopyNewRoutesInfoFromRouteChangeDescription((const __CFDictionary *)a2, v9, (_DWORD *)&v271 + 1, &v268[8], &v268[4], &v271, v268, (const __CFDictionary **)&cf, 0x1E30A4C28);
  dword_1EE2B3C30 = *(_DWORD *)v268;
  v12 = (const void *)qword_1EE2B3C38;
  qword_1EE2B3C38 = (uint64_t)cf;
  if (cf)
    CFRetain(cf);
  if (v12)
    CFRelease(v12);
  -[MXSessionManager setSystemSoundLocalVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSystemSoundLocalVADID:", 0);
  -[MXSessionManager setSystemSoundRemoteVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSystemSoundRemoteVADID:", 0);
  -[MXSessionManager setSpeechDetectionVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSpeechDetectionVADID:", 0);
  -[MXSessionManager setSpeakerAlertVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSpeakerAlertVADID:", 0);
  -[MXSessionManager setDecoupledInputVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setDecoupledInputVADID:", 0);
  -[MXSessionManager setSiriOutputVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSiriOutputVADID:", 0);
  -[MXSessionManager setMusicVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setMusicVADID:", 0);
  -[MXSessionManager setActuatorVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setActuatorVADID:", 0);
  -[MXSessionManager setPerAppAirPlayVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setPerAppAirPlayVADID:", 0);
  -[MXSessionManager setLowLatencyVADID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setLowLatencyVADID:", 0);
  v236 = (uint64_t *)v9;
  v238 = NumberOfCurrentOutputPorts;
  v224 = a4;
  v222 = v8;
  if (qword_1EE2B2C38)
  {
    v247 = (const __CFArray *)CFRetain((CFTypeRef)qword_1EE2B2C38);
    if (qword_1EE2B2C38)
    {
      CFRelease((CFTypeRef)qword_1EE2B2C38);
      qword_1EE2B2C38 = 0;
    }
  }
  else
  {
    v247 = 0;
  }
  v225 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  qword_1EE2B2C38 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("active devices"));
  if (Value)
  {
    v14 = Value;
    Count = CFArrayGetCount(Value);
    if (Count >= 1)
    {
      v16 = Count;
      for (i = 0; i != v16; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, i);
        if (ValueAtIndex)
        {
          v19 = ValueAtIndex;
          v20 = CFGetTypeID(ValueAtIndex);
          if (v20 == CFDictionaryGetTypeID())
          {
            v21 = CFDictionaryGetValue(v19, CFSTR("device UID"));
            CFArrayAppendValue((CFMutableArrayRef)qword_1EE2B2C38, v21);
            if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v22 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setSystemSoundLocalVADID:](v22, "setSystemSoundLocalVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v23 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setSystemSoundRemoteVADID:](v23, "setSystemSoundRemoteVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v24 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setSpeechDetectionVADID:](v24, "setSpeechDetectionVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v25 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setSpeakerAlertVADID:](v25, "setSpeakerAlertVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v26 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setDecoupledInputVADID:](v26, "setDecoupledInputVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v27 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setSiriOutputVADID:](v27, "setSiriOutputVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v28 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setMusicVADID:](v28, "setMusicVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v29 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setActuatorVADID:](v29, "setActuatorVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v30 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setPerAppAirPlayVADID:](v30, "setPerAppAirPlayVADID:", outData);
            }
            else if (FigCFEqual())
            {
              *(_QWORD *)&outData = 0;
              FigCFDictionaryGetInt64IfPresent();
              v31 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager setLowLatencyVADID:](v31, "setLowLatencyVADID:", outData);
            }
          }
        }
      }
    }
  }
  v32 = +[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance");
  -[MXAdditiveRoutingManager setDetailedRoutesDescription:](v32, "setDetailedRoutesDescription:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionary"));
  p_superclass = MXSession.superclass;
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "actuatorVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
  -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", -[MXSessionManager lowLatencyVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "lowLatencyVADID"));
  if (CMSMVAUtility_IsAdditiveRoutingEnabled())
  {
    memset(v278, 0, 32);
    memset(valuePtr, 0, sizeof(valuePtr));
    v34 = -[MXAdditiveRoutingManager vadNameToID](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "vadNameToID");
    v35 = -[NSDictionary countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
    if (v35)
    {
      v36 = v35;
      v37 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (j = 0; j != v36; ++j)
        {
          if (**(_QWORD **)&valuePtr[1] != v37)
            objc_enumerationMutation(v34);
          -[MXAdditiveRoutingManager updateDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "updateDetailedRouteDescription:", objc_msgSend(-[NSDictionary objectForKey:](-[MXAdditiveRoutingManager vadNameToID](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "vadNameToID"), "objectForKey:", *(_QWORD *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * j)), "unsignedIntValue"));
        }
        v36 = -[NSDictionary countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
      }
      while (v36);
    }
  }
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled())
  {
    for (k = 0; ; ++k)
    {
      v40 = qword_1EE2B2C38;
      if (qword_1EE2B2C38)
        v40 = CFArrayGetCount((CFArrayRef)qword_1EE2B2C38);
      if (k >= v40)
        break;
      v41 = CFArrayGetValueAtIndex((CFArrayRef)qword_1EE2B2C38, k);
      if (!FigCFEqual())
      {
        VADIDForVADName = CMSMUtility_GetVADIDForVADName((uint64_t)v41);
        if (VADIDForVADName != -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")&& (!v247 || !CFArrayGetCount(v247) || !FigCFArrayContainsValue()))
        {
          v43 = CMSMUtility_GetVADIDForVADName((uint64_t)v41);
          vaemAddVADVolumeRampStatusChangeListener(v43);
        }
      }
    }
  }
  if (v247)
    CFRelease(v247);
  if (dword_1EE2B3F38)
  {
    LODWORD(v276) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v45 = v276;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
      v46 = v45;
    else
      v46 = v45 & 0xFFFFFFFE;
    if (v46)
    {
      if (-[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"))
      {
        v47 = "YES";
      }
      else
      {
        v47 = "NO";
      }
      v248 = v47;
      if (-[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID"))
      {
        v48 = "YES";
      }
      else
      {
        v48 = "NO";
      }
      v244 = v48;
      if (-[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID"))
      {
        v49 = "YES";
      }
      else
      {
        v49 = "NO";
      }
      v239 = v49;
      if (-[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID"))
      {
        v50 = "YES";
      }
      else
      {
        v50 = "NO";
      }
      v231 = v50;
      if (-[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID"))
      {
        v51 = "YES";
      }
      else
      {
        v51 = "NO";
      }
      if (-[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID"))
      {
        v52 = "YES";
      }
      else
      {
        v52 = "NO";
      }
      if (-[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"))
      {
        v53 = "YES";
      }
      else
      {
        v53 = "NO";
      }
      if (-[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"))
      {
        v54 = "YES";
      }
      else
      {
        v54 = "NO";
      }
      v55 = -[MXSessionManager lowLatencyVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "lowLatencyVADID");
      LODWORD(valuePtr[0]) = 136317442;
      *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
      if (v55)
        v56 = "YES";
      else
        v56 = "NO";
      p_superclass = (__objc2_class **)(MXSession + 8);
      WORD6(valuePtr[0]) = 2082;
      *(_QWORD *)((char *)valuePtr + 14) = v248;
      WORD3(valuePtr[1]) = 2082;
      *((_QWORD *)&valuePtr[1] + 1) = v244;
      *(_WORD *)v278 = 2082;
      *(_QWORD *)&v278[2] = v239;
      *(_WORD *)&v278[10] = 2082;
      *(_QWORD *)&v278[12] = v231;
      *(_WORD *)&v278[20] = 2082;
      *(_QWORD *)&v278[22] = v51;
      *(_WORD *)&v278[30] = 2082;
      *(_QWORD *)&v278[32] = v52;
      v279 = 2082;
      v280 = v53;
      v281 = 2082;
      v282 = v54;
      v283 = 2082;
      v284 = v56;
      LODWORD(v220) = 102;
      v217 = valuePtr;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v57 = (__CFArray *)qword_1EE2B2C38;
  if (qword_1EE2B2C38)
    v58.length = CFArrayGetCount((CFArrayRef)qword_1EE2B2C38);
  else
    v58.length = 0;
  v58.location = 0;
  CFArraySortValues(v57, v58, (CFComparatorFunction)MEMORY[0x1E0C98F10], 0);
  CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange(objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "speechDetectionVADID") != 0);
  CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange((void *)qword_1EE2B2C38);
  v240 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "defaultVADID"));
  vaemVADAvailableSampleRatesListenerGuts_f();
  LODWORD(outData) = 0;
  if (objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "defaultVADID"))
  {
    if (vaemGetStream0(objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance"), "defaultVADID"), 0, &outData))goto LABEL_104;
    v59 = outData;
    if (!(_DWORD)outData)
      goto LABEL_104;
  }
  else
  {
    v59 = 0;
  }
  if (v59 != objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance", v217, v220), "currentStream0"))vaemAddAvailableVirtualFormatsListener();
LABEL_104:
  MEMORY[0x1940352BC](gCMSM);
  if (v238)
  {
    v60 = 0;
    v249 = 0;
    PortTypeFromPortID = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v60, (uint64_t)v266);
      v61 = v266[0];
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v60, (uint64_t)v264);
      v62 = v265;
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v60, (uint64_t)v262);
      v63 = v263;
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v60, (uint64_t)v260);
      v64 = v261;
      *(_QWORD *)&valuePtr[0] = 0;
      FigCFArrayGetInt64AtIndex();
      v65 = valuePtr[0];
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v60, (uint64_t)v258);
      v66 = v259;
      if ((FigCFEqual() || FigCFEqual())
        && vaeDoesPortSupportMultipleConnections(v66))
      {
        CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer();
      }
      DoesBluetoothSupportFeature = vaeDoesBluetoothSupportFeature(v66);
      IsInterruptingPlayingSessionsInOnenessEnabled = MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled();
      if (!v60)
      {
        if (IsInterruptingPlayingSessionsInOnenessEnabled)
        {
          if (!dword_1EE2B2C58 || !(_DWORD)v66 || (PortTypeFromPortID = 1885565807, dword_1EE2B2C58 != (_DWORD)v66))
            PortTypeFromPortID = vaeGetPortTypeFromPortID(v66);
        }
      }
      v249 |= DoesBluetoothSupportFeature;
      *(_QWORD *)&outData = v61;
      *((_QWORD *)&outData + 1) = v63;
      *(_QWORD *)&v286 = v62;
      *((_QWORD *)&v286 + 1) = v64;
      *(_QWORD *)&v287 = 0;
      *((_QWORD *)&v287 + 1) = v65;
      MXVW_VectorVARouteInfoPushBack(VectorCMSRouteInfo, &outData);
      ++v60;
    }
    while (v238 != v60);
  }
  else
  {
    PortTypeFromPortID = 0;
    v249 = 0;
  }
  if (qword_1EE2B2C00)
    v69 = CFRetain((CFTypeRef)qword_1EE2B2C00);
  else
    v69 = 0;
  v70 = v236;
  v256 = 0;
  v257 = 0;
  v254 = 0;
  v255 = 0;
  v252 = 0;
  v253 = 0;
  vaemCopyVARoutesInfoAsCFArrays(VectorCMSRouteInfo, v238, (__CFArray **)&v257, (__CFArray **)&v256, (__CFArray **)&v255);
  vaemCopyVARoutesInfoAsCFArrays(v236, SHIDWORD(v271), (__CFArray **)&v254, (__CFArray **)&v253, (__CFArray **)&v252);
  *(_QWORD *)&outData = 0;
  vaemGetPortsInfoFromRouteChangeDescription((const __CFDictionary *)a2, 0, (const void **)&outData, 0, 0, 0, 0, 0, 0x1E30A4C28);
  if ((_QWORD)outData && (v71 = CFArrayGetCount((CFArrayRef)outData), v71 >= 1))
  {
    v72 = v71;
    v73 = 0;
    v74 = 0;
    do
    {
      LODWORD(valuePtr[0]) = 0;
      v75 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)outData, v73);
      if (v75)
        CFNumberGetValue(v75, kCFNumberSInt32Type, valuePtr);
      if (vaeGetPortTypeFromPortID(LODWORD(valuePtr[0])) == 1886614639)
        v74 = valuePtr[0];
      ++v73;
    }
    while (v72 != v73);
  }
  else
  {
    v74 = 0;
  }
  dword_1EE2B3CC8 = v74;
  if (qword_1EE2B2C08)
  {
    CFRelease((CFTypeRef)qword_1EE2B2C08);
    qword_1EE2B2C08 = 0;
  }
  if (qword_1EE2B2C10)
  {
    CFRelease((CFTypeRef)qword_1EE2B2C10);
    qword_1EE2B2C10 = 0;
  }
  if ((int)v271 <= 1919904884)
  {
    if ((_DWORD)v271 != 1919118966)
    {
      if ((_DWORD)v271 != 1919842148)
        goto LABEL_186;
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
      memset(v278, 0, 32);
      memset(valuePtr, 0, sizeof(valuePtr));
      v76 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v77 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v76, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
      if (v77)
      {
        v78 = v77;
        v79 = **(_QWORD **)&valuePtr[1];
        do
        {
          for (m = 0; m != v78; ++m)
          {
            if (**(_QWORD **)&valuePtr[1] != v79)
              objc_enumerationMutation(v76);
            objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * m), "setOverridePortsList:", 0);
          }
          v78 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v76, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
        }
        while (v78);
      }
      goto LABEL_156;
    }
LABEL_149:
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    memset(v278, 0, 32);
    memset(valuePtr, 0, sizeof(valuePtr));
    v81 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v82 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v81, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
    if (v82)
    {
      v83 = v82;
      v84 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (n = 0; n != v83; ++n)
        {
          if (**(_QWORD **)&valuePtr[1] != v84)
            objc_enumerationMutation(v81);
          objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * n), "setOverridePortsList:", 0);
        }
        v83 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v81, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
      }
      while (v83);
    }
LABEL_156:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (qword_1EE2B2BA0)
    {
      CFRelease((CFTypeRef)qword_1EE2B2BA0);
      qword_1EE2B2BA0 = 0;
    }
    goto LABEL_186;
  }
  if ((_DWORD)v271 != 1919907442)
  {
    if ((_DWORD)v271 != 1919904885)
      goto LABEL_186;
    goto LABEL_149;
  }
  v229 = v69;
  CurrentInputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  OverridePortsList = CMSMUtility_CreateOverridePortsList(CurrentInputPortAtIndex, CurrentOutputPortAtIndex);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  memset(v278, 0, 32);
  memset(valuePtr, 0, sizeof(valuePtr));
  v88 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v89 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
  if (v89)
  {
    v90 = v89;
    v232 = 0;
    v91 = **(_QWORD **)&valuePtr[1];
    do
    {
      v92 = 0;
      do
      {
        if (**(_QWORD **)&valuePtr[1] != v91)
          objc_enumerationMutation(v88);
        v93 = *(void **)(*((_QWORD *)&valuePtr[0] + 1) + 8 * v92);
        ContextType = FigRoutingManagerContextUtilities_GetContextType(objc_msgSend(v93, "routingContextUUID"));
        v95 = CMSMUtility_CopyCurrentRouteTypes();
        if (objc_msgSend(v93, "isActive")
          && (objc_msgSend(v93, "currentlyControllingFlags") & 2) != 0
          && (ContextType == 1
           || ContextType == 3
           && FigRoutingContextUtilities_IsFollowingAnotherContext(objc_msgSend(v93, "routingContextUUID")))
          && !objc_msgSend(v93, "overridePortsList"))
        {
          if (FigCFArrayContainsValue())
          {
            -[NSDictionary objectForKey:](-[MXSessionManager figCategoryToOutputOverridabilityDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figCategoryToOutputOverridabilityDict"), "objectForKey:", objc_msgSend(v93, "audioCategory"));
            if (!FigCFEqual())
            {
              objc_msgSend(v93, "setOverridePortsList:", OverridePortsList);
              v232 = 1;
            }
          }
        }
        if (v95)
          CFRelease(v95);
        ++v92;
      }
      while (v90 != v92);
      v96 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", valuePtr, &outData, 16);
      v90 = v96;
    }
    while (v96);
  }
  else
  {
    v232 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  v70 = v236;
  v69 = v229;
  if (v232)
  {
    v97 = (const void *)qword_1EE2B2BA0;
    qword_1EE2B2BA0 = (uint64_t)OverridePortsList;
    if (OverridePortsList)
      CFRetain(OverridePortsList);
    if (v97)
      CFRelease(v97);
  }
  if (OverridePortsList)
    CFRelease(OverridePortsList);
LABEL_186:
  *(_QWORD *)&outData = 0;
  *(_QWORD *)&valuePtr[0] = 0;
  vaemGetPortsInfoFromRouteChangeDescription((const __CFDictionary *)a2, (const void **)&outData, (const void **)valuePtr, 0, 0, 0, 0, 0, 0x1E30A4C28);
  CMSMUtility_UpdateCurrentRoutesInfo((const __CFArray *)outData, *(const __CFArray **)&valuePtr[0], 0, 0);
  v98 = *(_QWORD *)&valuePtr[0]
     && CFArrayGetCount(*(CFArrayRef *)&valuePtr[0]) >= 2
     && FigCFArrayContainsValue()
     && FigCFArrayContainsValue() != 0;
  if ((dword_1EE2B3F38 & 0x20) != 0)
    CMSMUtility_GetNumberOfCurrentOutputPorts();
  vaemUpdateThermalGainAdjustment();
  if (v98)
  {
    MEMORY[0x1940352C8](gCMSM);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    goto LABEL_456;
  }
  if (FigCFEqual() && FigCFEqual() && FigCFEqual())
  {
    v102 = 0;
    v221 = FigCFEqual() == 0;
  }
  else
  {
    v221 = 0;
    v102 = 1;
  }
  if (FigCFEqual() && FigCFEqual() && FigCFEqual())
  {
    v103 = FigCFEqual();
    v241 = v103 == 0;
    if (v103)
      v104 = 0;
    else
      v104 = v102;
    if ((v104 & 1) == 0)
      goto LABEL_220;
  }
  else if (!v102)
  {
LABEL_219:
    v241 = 1;
    goto LABEL_220;
  }
  if (dword_1EE2B3F38)
  {
    LODWORD(v276) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v106 = v276;
    if (os_log_type_enabled(v105, type[0]))
      v107 = v106;
    else
      v107 = v106 & 0xFFFFFFFE;
    if (v107)
    {
      LODWORD(valuePtr[0]) = 136315138;
      *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
      LODWORD(v220) = 12;
      v218 = valuePtr;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemCancelOutputVolumeChangeTimer();
  v241 = 1;
  if (HIBYTE(word_1EE2B2B70) && gVAEM == a1)
  {
    HIBYTE(word_1EE2B2B70) = 0;
    qword_1EE2B2B78 = 0;
    goto LABEL_219;
  }
LABEL_220:
  DeviceRoutesString = CMSMUtility_CreateDeviceRoutesString((CFArrayRef)v257, (const __CFArray *)v256, (const __CFArray *)v255);
  v233 = DeviceRoutesString;
  v235 = CMSMUtility_CreateDeviceRoutesString((CFArrayRef)v254, (const __CFArray *)v253, (const __CFArray *)v252);
  if (dword_1EE2B3F38)
  {
    LODWORD(v276) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v110 = v276;
    if (os_log_type_enabled(v109, type[0]))
      v111 = v110;
    else
      v111 = v110 & 0xFFFFFFFE;
    if (v111)
    {
      LODWORD(valuePtr[0]) = 136315394;
      *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
      WORD6(valuePtr[0]) = 2114;
      *(_QWORD *)((char *)valuePtr + 14) = DeviceRoutesString;
      LODWORD(v220) = 22;
      v218 = valuePtr;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3F38)
    {
      LODWORD(v276) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v112 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v113 = v276;
      if (os_log_type_enabled(v112, type[0]))
        v114 = v113;
      else
        v114 = v113 & 0xFFFFFFFE;
      if (v114)
      {
        LODWORD(valuePtr[0]) = 136315394;
        *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
        WORD6(valuePtr[0]) = 2114;
        *(_QWORD *)((char *)valuePtr + 14) = v235;
        LODWORD(v220) = 22;
        v218 = valuePtr;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1EE2B3F38)
      {
        LODWORD(v276) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v116 = v276;
        if (os_log_type_enabled(v115, type[0]))
          v117 = v116;
        else
          v117 = v116 & 0xFFFFFFFE;
        if (v117)
        {
          v118 = BYTE3(v271);
          v119 = BYTE2(v271);
          v120 = v69;
          v121 = BYTE1(v271);
          v122 = v271;
          v123 = CMSMVAUtility_MapVADRouteChangeReasonToString(v271);
          LODWORD(valuePtr[0]) = 136316418;
          *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = v118;
          WORD1(valuePtr[1]) = 1024;
          DWORD1(valuePtr[1]) = v119;
          WORD4(valuePtr[1]) = 1024;
          *(_DWORD *)((char *)&valuePtr[1] + 10) = v121;
          v69 = v120;
          HIWORD(valuePtr[1]) = 1024;
          *(_DWORD *)v278 = v122;
          *(_WORD *)&v278[4] = 2114;
          *(_QWORD *)&v278[6] = v123;
          LODWORD(v220) = 46;
          v218 = valuePtr;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (cf && dword_1EE2B3F38)
        {
          LODWORD(v276) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v125 = v276;
          if (os_log_type_enabled(v124, type[0]))
            v126 = v125;
          else
            v126 = v125 & 0xFFFFFFFE;
          if (v126)
          {
            v127 = CMSMVAUtility_MapVASiriInputSourceToString(*(int *)v268);
            LODWORD(valuePtr[0]) = 136315650;
            *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
            WORD6(valuePtr[0]) = 2114;
            *(_QWORD *)((char *)valuePtr + 14) = v127;
            WORD3(valuePtr[1]) = 2114;
            *((_QWORD *)&valuePtr[1] + 1) = cf;
            LODWORD(v220) = 32;
            v218 = valuePtr;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  v230 = v69;
  VectorCMSRouteInfoSize = MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20);
  if (VectorCMSRouteInfoSize)
  {
    v129 = VectorCMSRouteInfoSize;
    v130 = 0;
    v131 = 0;
    v132 = 1;
    v133 = v225;
    do
    {
      CMSRouteInfoPtrAt = MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, v130);
      v135 = *(const void **)(CMSRouteInfoPtrAt + 32);
      if (v135)
      {
        CFRelease(v135);
        *(_QWORD *)(CMSRouteInfoPtrAt + 32) = 0;
      }
      v136 = MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled();
      if (v132 == 1)
      {
        if (v136)
        {
          MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v130, (uint64_t)v250);
          if (!dword_1EE2B2C58 || !v251 || (v131 = 1885565807, dword_1EE2B2C58 != v251))
            v131 = vaeGetPortTypeFromPortID(v251);
        }
      }
      v130 = v132;
      v137 = v129 > v132++;
    }
    while (v137);
  }
  else
  {
    v131 = 0;
    v133 = v225;
  }
  if (qword_1EE2B3C10)
  {
    CFRelease((CFTypeRef)qword_1EE2B3C10);
    qword_1EE2B3C10 = 0;
  }
  v138 = (const void *)qword_1EE2B2C00;
  qword_1EE2B2C00 = (uint64_t)v240;
  v139 = v236;
  if (v240)
    CFRetain(v240);
  if (v138)
    CFRelease(v138);
  if (HIDWORD(v271))
  {
    Mutable = CFArrayCreateMutable(v133, 0, MEMORY[0x1E0C9B378]);
    if (HIDWORD(v271))
    {
      v141 = 0;
      do
      {
        MXVW_GetCMSRouteInfoPtrAt(v236, v141);
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        CFArrayAppendValue(Mutable, SInt64);
        if (SInt64)
          CFRelease(SInt64);
        ++v141;
      }
      while (v141 < HIDWORD(v271));
    }
    v143 = (const void *)qword_1EE2B2BB8;
    qword_1EE2B2BB8 = (uint64_t)Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      v144 = 0;
      if (!v143)
        goto LABEL_277;
      goto LABEL_276;
    }
  }
  else
  {
    Mutable = 0;
    v143 = (const void *)qword_1EE2B2BB8;
    qword_1EE2B2BB8 = 0;
  }
  v144 = 1;
  if (v143)
LABEL_276:
    CFRelease(v143);
LABEL_277:
  if ((v144 & 1) == 0)
    CFRelease(Mutable);
  if (HIDWORD(v271))
  {
    CMSMUtility_UpdateCurrentRoutesInfo(0, 0, v236, SHIDWORD(v271));
    v145 = v271;
    v146 = CMSMUtility_CopyCurrentRouteTypes();
    if (FigCFArrayContainsValue())
    {
      v286 = 0u;
      v287 = 0u;
      outData = 0u;
      CMSMUtility_GetCurrentRouteInfoAtIndex(0, &outData);
      LODWORD(v276) = 1065353216;
      if (CMSMAP_GetAirPlayDeviceVolume(v286, (uint64_t)a5, (float *)&v276))
      {
        v147 = outData;
        v149 = v145 == 1918989155 || v145 == 1919181936;
        v150 = *(float *)&v276;
        v226 = (int8x16_t)v286;
        v151 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v218, v220), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"));
        v152 = -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode");
        VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
        *(_QWORD *)&valuePtr[0] = 0;
        *((_QWORD *)&valuePtr[0] + 1) = v147;
        v139 = v236;
        valuePtr[1] = vextq_s8(v226, v226, 8uLL);
        *(_QWORD *)v278 = 0;
        PVMSetVolumePreference(v151, v152, 0, (uint64_t)valuePtr, VolumeSequenceNumber, v149, v150, 0.0, 0.0);
      }
    }
    if (v146)
      CFRelease(v146);
    v154 = -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v218), "currentAudioMode");
    vaemConfigurePVMSettings(v154, v271);
  }
  else
  {
    if (MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20))
    {
      v155 = 0;
      v156 = 1;
      do
      {
        v157 = (_QWORD *)MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, v155);
        v158 = (const void *)v157[2];
        if (v158)
        {
          CFRelease(v158);
          v157[2] = 0;
        }
        v159 = (const void *)v157[3];
        if (v159)
        {
          CFRelease(v159);
          v157[3] = 0;
        }
        v160 = (const void *)v157[4];
        if (v160)
        {
          CFRelease(v160);
          v157[4] = 0;
        }
        v155 = v156;
        v137 = MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20) > v156++;
      }
      while (v137);
    }
    if (qword_1EE2B3C38)
    {
      CFRelease((CFTypeRef)qword_1EE2B3C38);
      qword_1EE2B3C38 = 0;
    }
  }
  if (FigCFEqual())
  {
    MXVW_ClearVectorVARouteInfo(v139);
    if (v240)
      CFRelease(v240);
    vaemCopyNewRoutesInfoFromRouteChangeDescription((const __CFDictionary *)a2, (void **)v139, (_DWORD *)&v271 + 1, 0, 0, 0, 0, 0, 0x1E30A8748);
    v240 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"));
  }
  v161 = HIDWORD(v271);
  v162 = v271;
  v276 = 0;
  *(_QWORD *)type = 0;
  v274 = 0;
  v163 = CMSMUtility_CopyCurrentRouteTypes();
  v164 = CMSMVAUtility_MapVADReasonToCMSReason(v162);
  vaemCopyVARoutesInfoAsCFArrays(VectorCMSRouteInfo, v238, (__CFArray **)&v276, (__CFArray **)type, (__CFArray **)&v274);
  if (v162 != 1918989155)
    CMSMUtility_UpdateSharePlayVolumeBehaviours();
  if (v227
    && !-[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"))
  {
    CMSMUtility_ReassignHWControlFlagsAfterMusicVADDestruction();
  }
  v165 = -[MXSessionManager copyVoiceOverSession](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v218), "copyVoiceOverSession");
  if (v165)
  {
    v166 = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
    if ((_DWORD)v161 || !v166)
    {
      if (v222)
      {
        if (!-[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"))
        {
          if (objc_msgSend(v165, "isActive"))
          {
            CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(v165);
            if (CurrentOutputVADID == -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
            {
              CMSUtility_GetCurrentAudioDestination(v165);
              if (!CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(v165))
                cmsTryToTakeControl(v165);
            }
          }
        }
      }
    }
    else if (objc_msgSend(v165, "isActive"))
    {
      v167 = CMSUtility_GetCurrentOutputVADID(v165);
      if (v167 == -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"))
      {
        CMSUtility_GetCurrentAudioDestination(v165);
        if (!CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(v165))
          CMSUtility_UpdatePlaybackVolume(v165, 0.0, 0.0);
      }
    }
  }

  if (v241
    || FigRoutingManagerContextUtilities_IsContextVideoAndIndependent((uint64_t)a5)
    || FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)a5))
  {
    if ((_DWORD)v161)
    {
      v169 = dispatch_time(0, 1000000000);
      v170 = MXGetSerialQueue();
      dispatch_after(v169, v170, &__block_literal_global_72);
    }
    cmsmUpdateFakeSharedAudioRouteAsPicked(0, v162, 1, 0);
    cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 0, v162, 1, 0);
    if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)a5)
      || !v227
      && -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID")&& FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)a5))
    {
      FigPredictedRouting_StopPreemptivePortChangedTimer(1);
    }
    -[MXSessionManager updateExclaveSensorStatusIfNeeded](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateExclaveSensorStatusIfNeeded");
    v171 = CMSMUtility_CopyCurrentRouteIdentifiers();
    v228 = CMSMUtility_CopyCurrentRouteSubtypes();
    theDicta = v171;
    if (v162 != 1919184754)
    {
      v172 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      if (-[MXSessionManager isBTRouteSameDeviceWithDifferentProfile:newNumRoutes:oldRouteTypes:newRouteTypes:oldRouteIdentifiers:newRouteIdentifiers:](v172, "isBTRouteSameDeviceWithDifferentProfile:newNumRoutes:oldRouteTypes:newRouteTypes:oldRouteIdentifiers:newRouteIdentifiers:", v238, v161, v276, v163, *(_QWORD *)type, v171))
      {
        if (dword_1EE2B3F38)
        {
          v273 = 0;
          v272 = OS_LOG_TYPE_DEFAULT;
          v173 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v174 = v273;
          if (os_log_type_enabled(v173, v272))
            v175 = v174;
          else
            v175 = v174 & 0xFFFFFFFE;
          if (v175)
          {
            LODWORD(valuePtr[0]) = 136316162;
            *(_QWORD *)((char *)valuePtr + 4) = "vaemHandleNewDeviceConfiguration";
            WORD6(valuePtr[0]) = 2114;
            *(_QWORD *)((char *)valuePtr + 14) = v276;
            WORD3(valuePtr[1]) = 2114;
            *((_QWORD *)&valuePtr[1] + 1) = *(_QWORD *)type;
            *(_WORD *)v278 = 2114;
            *(_QWORD *)&v278[2] = v163;
            *(_WORD *)&v278[10] = 2114;
            *(_QWORD *)&v278[12] = v171;
            LODWORD(v220) = 52;
            v219 = valuePtr;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        cmsmUpdateInEarBasedPlaybackState(0, 1, 0);
      }
    }
    CMSUtility_UpdateBTLowLatencyMode();
    if (v249)
    {
      v176 = -[MXSessionManager copySpeechDetectSession](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySpeechDetectSession");
      if (v176)
      {
        -[MXSessionManager unduckSessionsForDucker:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckSessionsForDucker:", v176);
        if (dword_1EE2B3F38)
        {
          v273 = 0;
          v272 = OS_LOG_TYPE_DEFAULT;
          v177 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v178 = v273;
          if (os_log_type_enabled(v177, v272))
            v179 = v178;
          else
            v179 = v178 & 0xFFFFFFFE;
          if (v179)
          {
            v180 = objc_msgSend(v176, "clientName");
            LODWORD(valuePtr[0]) = 136315394;
            *(_QWORD *)((char *)valuePtr + 4) = "vaemHandleNewDeviceConfiguration";
            WORD6(valuePtr[0]) = 2114;
            *(_QWORD *)((char *)valuePtr + 14) = v180;
            LODWORD(v220) = 22;
            v219 = valuePtr;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtilityApplier_PostNotification_StopCommand(v176, 0);
      }

    }
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
    -[MXSessionManager updateCachedContinuityScreenOutputPortID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateCachedContinuityScreenOutputPortID");
    v181 = MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled();
    if (v162 == 1919904885
      && v241
      && v181
      && (PortTypeFromPortID == 1886613611 && v131 == 1885565807
       || PortTypeFromPortID == 1885565807 && v131 == 1886613611))
    {
      if (dword_1EE2B3F38)
      {
        v273 = 0;
        v272 = OS_LOG_TYPE_DEFAULT;
        v182 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v183 = v273;
        if (os_log_type_enabled(v182, v272))
          v184 = v183;
        else
          v184 = v183 & 0xFFFFFFFE;
        if (v184)
        {
          LODWORD(valuePtr[0]) = 136317442;
          *(_QWORD *)((char *)valuePtr + 4) = "vaemHandleNewDeviceConfiguration";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = v241;
          WORD1(valuePtr[1]) = 1024;
          DWORD1(valuePtr[1]) = HIBYTE(PortTypeFromPortID);
          WORD4(valuePtr[1]) = 1024;
          *(_DWORD *)((char *)&valuePtr[1] + 10) = BYTE2(PortTypeFromPortID);
          HIWORD(valuePtr[1]) = 1024;
          *(_DWORD *)v278 = BYTE1(PortTypeFromPortID);
          *(_WORD *)&v278[4] = 1024;
          *(_DWORD *)&v278[6] = PortTypeFromPortID;
          *(_WORD *)&v278[10] = 1024;
          *(_DWORD *)&v278[12] = HIBYTE(v131);
          *(_WORD *)&v278[16] = 1024;
          *(_DWORD *)&v278[18] = BYTE2(v131);
          *(_WORD *)&v278[22] = 1024;
          *(_DWORD *)&v278[24] = BYTE1(v131);
          *(_WORD *)&v278[28] = 1024;
          *(_DWORD *)&v278[30] = v131;
          LODWORD(v220) = 66;
          v219 = valuePtr;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[MXSessionManager interruptEligibleSessionsOnContinuityScreenOutputPortAvailableDidChange](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v219, v220), "interruptEligibleSessionsOnContinuityScreenOutputPortAvailableDidChange");
    }
    v185 = -[MXSessionManager updateDuckedSessionsForVoiceOverIfNeededOnRouteChange](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v219), "updateDuckedSessionsForVoiceOverIfNeededOnRouteChange");
    if (off_1EE2B3B98)
      ((void (*)(uint64_t))off_1EE2B3B98)(v185);
    if (v221 && v164 == 3)
      v186 = 10;
    else
      v186 = v164;
    v187 = CMSMUtility_CopyCurrentInputRouteIdentifiers();
    v188 = vaemCreateDictionaryForActiveAudioRouteDidChange(v186, (const __CFArray *)v276, v163, v230, v240);
    if (FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)a5))
    {
      v189 = (const void *)qword_1EE2B3D20;
      qword_1EE2B3D20 = (uint64_t)v188;
      if (v188)
        CFRetain(v188);
      if (v189)
        CFRelease(v189);
    }
    if (!MX_FeatureFlags_IsOnenessEnabled()
      || (PortTypeFromPortID != 1886613611 || v131 != 1885565807)
      && (PortTypeFromPortID != 1885565807 || v131 != 1886613611))
    {
      CMSMNotificationUtility_PostActiveAudioRouteDidChange(0, v188, a5);
    }
    if (v188)
      CFRelease(v188);
    CMSMUtility_UpdateAudioBehaviourForVoiceOverSessions();
    if (FigCFArrayContainsValue())
    {
      -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"));
      -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode");
      v190 = FigCFArrayContainsValue()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual()
          || FigCFEqual() != 0;
    }
    else
    {
      v190 = 0;
    }
    IsAnySessionPlayingToIndependentSystemMusicContext = CMSMUtility_IsAnySessionPlayingToIndependentSystemMusicContext();
    v192 = *(_QWORD *)type;
    v193 = (const __CFArray *)v276;
    v194 = v274;
    -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID");
    FigRoutingManagerProcessVADRouteChange(v162, v192, theDicta, v187, v193, (uint64_t)v194, (uint64_t)v228, v224, v190, IsAnySessionPlayingToIndependentSystemMusicContext, (uint64_t)a5);
    CMSMUtility_ClearOverridesForPhoneCallSessions(v186);
    if (v162 == 1919184754)
      -[MXSessionManager updateActiveSessionsOnDeviceRelinquished](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateActiveSessionsOnDeviceRelinquished");
    CMSMPowerLogPostPowerLogDataForRouteChange();
    CMSMUtility_UpdateSecureMicrophonePolicy(0);
    v99 = v233;
    if (theDicta)
      CFRelease(theDicta);
    if (v228)
      CFRelease(v228);
    if (v187)
      CFRelease(v187);
    v101 = 1;
  }
  else
  {
    v215 = -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID");
    v101 = 0;
    if (v227)
    {
      v99 = v233;
      if (!v215)
      {
        -[MXSessionManager updateDuckedSessionsForVoiceOverIfNeededOnRouteChange](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDuckedSessionsForVoiceOverIfNeededOnRouteChange");
        v216 = vaemCreateDictionaryForActiveAudioRouteDidChange(v164, (const __CFArray *)v276, v163, v230, v240);
        *(_QWORD *)&outData = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&outData);
        CMSMNotificationUtility_PostActiveAudioRouteDidChange(0, v216, (const void *)outData);
        if (v216)
          CFRelease(v216);
        if ((_QWORD)outData)
          CFRelease((CFTypeRef)outData);
        v101 = 0;
      }
    }
    else
    {
      v99 = v233;
    }
  }
  if (v276)
  {
    CFRelease(v276);
    v276 = 0;
  }
  v70 = v236;
  if (*(_QWORD *)type)
  {
    CFRelease(*(CFTypeRef *)type);
    *(_QWORD *)type = 0;
  }
  if (v274)
    CFRelease(v274);
  if (v163)
    CFRelease(v163);
  if (CMSMVAUtility_MapVADReasonToCMSReason(v271) == 2)
    -[MXSessionManager interruptSessionsOnRouteDisconnect:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "interruptSessionsOnRouteDisconnect:", a5);
  MEMORY[0x1940352C8](gCMSM);
  v195 = CMSMUtility_GetNumberOfCurrentOutputPorts();
  v196 = !v241;
  if (!v195)
    v196 = 1;
  v69 = v230;
  if ((v196 & 1) == 0)
  {
    v197 = byte_1EE2B2C5C;
    v198 = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    v199 = vaeGetBluetoothCallScreeningStatus(v198);
    if (v197 != v199)
    {
      if (dword_1EE2B3F38)
      {
        v200 = v199;
        LODWORD(v276) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v201 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v202 = v276;
        if (os_log_type_enabled(v201, type[0]))
          v203 = v202;
        else
          v203 = v202 & 0xFFFFFFFE;
        if (v203)
        {
          v204 = CFSTR("active");
          *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
          if (v197)
            v205 = CFSTR("active");
          else
            v205 = CFSTR("inactive");
          LODWORD(valuePtr[0]) = 136315650;
          WORD6(valuePtr[0]) = 2114;
          *(_QWORD *)((char *)valuePtr + 14) = v205;
          if (!v200)
            v204 = CFSTR("inactive");
          WORD3(valuePtr[1]) = 2114;
          *((_QWORD *)&valuePtr[1] + 1) = v204;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v70 = v236;
      }
      byte_1EE2B2C5C = v197;
      v206 = CMSMUtility_GetCurrentOutputPortAtIndex(0);
      v207 = vaeUpdateBluetoothCallScreeningStatus(v206, v197);
      if (v207)
      {
        v208 = v207;
        LODWORD(v276) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v209 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v210 = v276;
        if (os_log_type_enabled(v209, type[0]))
          v211 = v210;
        else
          v211 = v210 & 0xFFFFFFFE;
        if (v211)
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "vaemVADRouteChangeListener";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = v208;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v70 = v236;
      }
    }
    cmsUpdateMuteStatus(0);
  }
  v212 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"vaemVADRouteChangeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 8137, 0, 0, v212, (uint64_t)&__block_literal_global_45_0);
  v100 = v235;
LABEL_456:
  MXVW_ReleaseVectorVARouteInfo((uint64_t *)VectorCMSRouteInfo);
  if (v69)
    CFRelease(v69);
  MXVW_ReleaseVectorVARouteInfo(v70);
  if (v240)
    CFRelease(v240);
  if (v257)
  {
    CFRelease(v257);
    v257 = 0;
  }
  if (v256)
  {
    CFRelease(v256);
    v256 = 0;
  }
  if (v255)
    CFRelease(v255);
  if (v254)
  {
    CFRelease(v254);
    v254 = 0;
  }
  if (v253)
  {
    CFRelease(v253);
    v253 = 0;
  }
  v213 = v252;
  if (v252)
    CFRelease(v252);
  if (v99)
    CFRelease(v99);
  if (v100)
    CFRelease(v100);
  if (!v101 && off_1EE2B3B98)
    ((void (*)(CFTypeRef))off_1EE2B3B98)(v213);
  return 0;
}

uint64_t CMSMVAUtility_MapVADReasonToCMSReason(int a1)
{
  uint64_t result;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;

  result = 0;
  if (a1 <= 1919842147)
  {
    if (a1 > 1919181935)
    {
      if (a1 > 1919185775)
      {
        if (a1 == 1919185776)
          return 11;
        if (a1 != 1919186544)
          return result;
      }
      else if (a1 != 1919181936)
      {
        if (a1 != 1919184754)
          return result;
        return 2;
      }
      return 3;
    }
    if (a1 == 1919050611)
      return 5;
    if (a1 != 1919050851)
    {
      v3 = a1 == 1919118966;
      v4 = 7;
LABEL_18:
      if (v3)
        return v4;
      else
        return 0;
    }
    return 10;
  }
  if (a1 <= 1919970402)
  {
    if (a1 == 1919842148)
      return 1;
    if (a1 == 1919904885)
      return 2;
    v3 = a1 == 1919907442;
    v4 = 4;
    goto LABEL_18;
  }
  if (a1 > 1919971700)
  {
    if (a1 == 1920099684)
      v5 = 9;
    else
      v5 = 0;
    if (a1 == 1919971701)
      return 8;
    else
      return v5;
  }
  else
  {
    if (a1 == 1919970403)
      return 3;
    if (a1 == 1919971427)
      return 10;
  }
  return result;
}

uint64_t cmsmUpdateCurrentActiveRoutesInfo()
{
  unint64_t v0;
  const void *ValueAtIndex;
  unint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  __int128 v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFArrayRef v13;
  CFArrayRef v14;
  CFArrayRef theArray;

  MEMORY[0x1940352BC](gCMSM);
  if (!CMSMUtility_GetNumberOfCurrentOutputPorts())
  {
    v14 = 0;
    theArray = 0;
    v13 = 0;
    cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1E30A4C28, &theArray, &v14, &v13);
    if (theArray)
    {
      dword_1EE2B3C28 = CFArrayGetCount(theArray);
      if (dword_1EE2B3C28)
      {
        v0 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v0);
          if (FigCFEqual())
            v2 = 0;
          else
            v2 = (unint64_t)ValueAtIndex;
          v3 = CFArrayGetValueAtIndex(v14, v0);
          if (FigCFEqual())
            v4 = 0;
          else
            v4 = v3;
          v5 = CFArrayGetValueAtIndex(v13, v0);
          if (FigCFEqual())
            v6 = 0;
          else
            v6 = v5;
          v8 = v2;
          v9 = v4;
          v10 = v6;
          v11 = 0;
          v12 = 0;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1EE2B3C20, &v8);
          ++v0;
        }
        while (v0 < dword_1EE2B3C28);
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      dword_1EE2B3C28 = 0;
    }
    if (v14)
    {
      CFRelease(v14);
      v14 = 0;
    }
    if (v13)
      CFRelease(v13);
  }
  return MEMORY[0x1940352C8](gCMSM);
}

uint64_t CMSUtility_ShouldSilentMute(void *a1)
{
  uint64_t CurrentOutputPortAtIndex;
  uint64_t result;

  if (CMSMUtility_GetNumberOfCurrentOutputPorts() != 1)
    return 0;
  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  result = -[MXSessionManager isCurrentPortTypeMuteable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isCurrentPortTypeMuteable:", vaeGetPortTypeFromPortID(CurrentOutputPortAtIndex));
  if ((_DWORD)result)
  {
    result = CMSUtility_IsMuteable((uint64_t)a1);
    if ((_DWORD)result)
    {
      result = objc_msgSend(a1, "isActive");
      if ((_DWORD)result)
        return HIBYTE(word_1EE2B3C40) || CMSMDeviceState_RingerIsOn(1) == 0;
    }
  }
  return result;
}

uint64_t CMSMUtility_GetNumberOfCurrentOutputPorts()
{
  return dword_1EE2B3C28;
}

uint64_t CMSUtility_IsMuteable(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    if (-[MXSessionManager isAudioCategoryMuteable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryMuteable:", objc_msgSend((id)result, "audioCategory")))
    {
      return 1;
    }
    else
    {
      return objc_msgSend(v1, "mutesAudioBasedOnRingerSwitchState");
    }
  }
  return result;
}

CFMutableDictionaryRef vaemCopyDetailedRouteDescription(AudioObjectID a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v4;
  CFTypeRef v5;
  _DWORD *v6;
  __CFArray *v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  CFTypeID TypeID;
  _DWORD *v13;
  __CFArray *v14;
  unint64_t j;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  CFTypeID v19;
  CFMutableArrayRef v21;
  unsigned int v22;
  CFMutableArrayRef v23;
  unsigned int v24;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &dword_1EE2B3C30);
  FigCFDictionarySetValue();
  if (v4)
    CFRelease(v4);
  v5 = vaemCopyCurrentSiriInputDeviceUUID();
  FigCFDictionarySetValue();
  if (v5)
    CFRelease(v5);
  v24 = 0;
  v6 = vaemCopyAudioStreamIDsForScope(a1, 0, &v24);
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v23 = v7;
  if (v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v9 = v6[i];
      v10 = vaemCopyAssociatedPortsForStreamID(v6[i]);
      if (v10)
      {
        v11 = (const __CFArray *)v10;
        TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v11))
        {
          vaemCopyPortDescriptions(a1, v9, v11, 0, &v23);
          CFRelease(v11);
        }
      }
    }
  }
  FigCFDictionarySetValue();
  free(v6);
  if (v7)
    CFRelease(v7);
  v22 = 0;
  v13 = vaemCopyAudioStreamIDsForScope(a1, 1, &v22);
  v14 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v21 = v14;
  if (v22)
  {
    for (j = 0; j < v22; ++j)
    {
      v16 = v13[j];
      v17 = vaemCopyAssociatedPortsForStreamID(v13[j]);
      if (v17)
      {
        v18 = (const __CFArray *)v17;
        v19 = CFArrayGetTypeID();
        if (v19 == CFGetTypeID(v18))
        {
          vaemCopyPortDescriptions(a1, v16, v18, 1, &v21);
          CFRelease(v18);
        }
      }
    }
  }
  FigCFDictionarySetValue();
  free(v13);
  if (v14)
    CFRelease(v14);
  return Mutable;
}

void *vaemCopyAudioStreamIDsForScope(AudioObjectID a1, int a2, unsigned int *a3)
{
  int v5;
  void *v6;
  size_t size;
  int v9;
  int v10;

  if (a2 == 1)
    v5 = 1768845428;
  else
    v5 = 1869968496;
  v9 = v5;
  v10 = 0;
  size = 0x73746D2300000004;
  v6 = 0;
  if (!AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size))
  {
    v6 = malloc_type_malloc(size, 0x6656B7BBuLL);
    if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size, v6)&& v6&& (_DWORD)size)
    {
      if (a3)
        *a3 = size >> 2;
    }
    else
    {
      free(v6);
      return 0;
    }
  }
  return v6;
}

CFTypeRef vaemCopyCurrentSiriInputDeviceUUID()
{
  if ((dword_1EE2B3C30 == 1936024681 || dword_1EE2B3C30 == 1936679529) && qword_1EE2B3C38)
    return CFRetain((CFTypeRef)qword_1EE2B3C38);
  else
    return 0;
}

void vaemCopyVARoutesInfoAsCFArrays(_QWORD *a1, int a2, __CFArray **a3, __CFArray **a4, __CFArray **a5)
{
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  __CFArray *Mutable;
  __CFArray *v13;
  __CFArray *v14;
  uint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a1 && a2)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v13 = CFArrayCreateMutable(v10, 0, v11);
    v14 = CFArrayCreateMutable(v10, 0, v11);
    v15 = 0;
    do
    {
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      MXVW_GetCMSRouteInfoAt(a1, v15, (uint64_t)&v19);
      if ((_QWORD)v19)
        v16 = (const __CFString *)v19;
      else
        v16 = &stru_1E30A1A48;
      CFArrayAppendValue(Mutable, v16);
      if ((_QWORD)v20)
        v17 = (const __CFString *)v20;
      else
        v17 = &stru_1E30A1A48;
      CFArrayAppendValue(v13, v17);
      if (*((_QWORD *)&v19 + 1))
        v18 = (const __CFString *)*((_QWORD *)&v19 + 1);
      else
        v18 = &stru_1E30A1A48;
      CFArrayAppendValue(v14, v18);
      ++v15;
    }
    while (a2 != v15);
    if (a3)
      *a3 = Mutable;
    if (a4)
      *a4 = v13;
    if (v14)
      *a5 = v14;
  }
}

const __CFDictionary *vaemGetPortsInfoFromRouteChangeDescription(const __CFDictionary *result, const void **a2, const void **a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, const __CFDictionary **a8, uint64_t a9)
{
  const __CFDictionary *v16;
  const __CFArray *Value;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  NSObject *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (result)
  {
    v16 = result;
    Value = (const __CFArray *)CFDictionaryGetValue(result, CFSTR("active devices"));
    if (Value)
    {
      vaemGetPortListForDevice(Value, a9, a2, a3);
      if (a3)
      {
        if (*a3)
        {
          Count = CFArrayGetCount((CFArrayRef)*a3);
          if (Count >= 1)
          {
            v19 = Count;
            v20 = 0;
            while ((objc_msgSend((id)qword_1EE2B2B90, "containsObject:", CFArrayGetValueAtIndex((CFArrayRef)*a3, v20)) & 1) != 0)
            {
              if (v19 == ++v20)
                goto LABEL_14;
            }
            if (dword_1EE2B3F38)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            vaemConnectedPortsPropertyListenerGuts();
          }
        }
      }
LABEL_14:
      FigCFDictionaryGetInt64IfPresent();
      if (a6)
        *a6 = 0;
      FigCFDictionaryGetInt64IfPresent();
      if (a4)
        *a4 = 0;
      FigCFDictionaryGetInt64IfPresent();
      if (a5)
        *a5 = 0;
      FigCFDictionaryGetInt64IfPresent();
      if (a7)
        *a7 = 0;
      result = (const __CFDictionary *)CFDictionaryGetValue(v16, CFSTR("siri input source UUID"));
      if (a8)
      {
        if (result)
          *a8 = result;
      }
    }
    else
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      return (const __CFDictionary *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t vaemCopyAssociatedPortsForStreamID(AudioObjectID a1)
{
  UInt32 v2;
  int inQualifierData;
  uint64_t outData;
  AudioObjectPropertyAddress inAddress;

  outData = 0;
  inQualifierData = 1935895670;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6273617073;
  inAddress.mElement = 0;
  v2 = 8;
  if (AudioObjectGetPropertyData(a1, &inAddress, 4u, &inQualifierData, &v2, &outData))
    return 0;
  else
    return outData;
}

uint64_t CMSMDeviceState_RingerIsOn(int a1)
{
  if (!a1)
    cmsmdevicestate_UpdateRingerIsOn();
  return byte_1EE2B2A01;
}

uint64_t vaemSetDeviceVolumeIfNotSet(uint64_t a1, AudioObjectPropertyElement a2, const void *a3, uint64_t a4, float a5, float a6, float a7)
{
  int v14;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  NSObject *v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24[8];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
    && (v14 = vaemDeviceSupportsVolumeRamp(a1), a7 != 0.0)
    && a6 != 0.0
    && a4
    && v14)
  {
    result = vaemDeviceSupportsVolumeRamp(a1);
    if ((_DWORD)result)
    {
      v25 = 0;
      v23 = a4;
      *(_QWORD *)v24 = *(_QWORD *)"pmarptuo";
      v20 = a5;
      v21 = a6;
      v22 = LODWORD(a7);
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      gVAEM = a1;
      dword_1EE2B2B5C = LODWORD(a5);
      HIBYTE(word_1EE2B2B70) = 1;
      qword_1EE2B2B78 = a4;
      result = CMSMVAUtility_AudioObjectSetPropertyData();
      v19 = result;
      if ((_DWORD)result)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        HIBYTE(word_1EE2B2B70) = 0;
        qword_1EE2B2B78 = 0;
      }
    }
    else if (dword_1EE2B3F38)
    {
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    result = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
    if (a3 || !(_DWORD)result)
    {
      MEMORY[0x1940352BC](gCMSM);
      if (-[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID") == (_DWORD)a1)
      {
        if (!a3 || !qword_1EE2B2C10 || !CFEqual(a3, (CFTypeRef)qword_1EE2B2C10) || *(float *)&dword_1EE2B2C20 != a5)
        {
          vaemSetDeviceVolume(a1, 0, a5);
          dword_1EE2B2C20 = LODWORD(a5);
          if (qword_1EE2B2C10)
          {
            CFRelease((CFTypeRef)qword_1EE2B2C10);
            qword_1EE2B2C10 = 0;
          }
          if (a3)
            qword_1EE2B2C10 = (uint64_t)CFRetain(a3);
        }
      }
      else if (-[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID") == (_DWORD)a1)
      {
        vaemSetDeviceVolume(a1, 0, a5);
      }
      else if (-[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID") != (_DWORD)a1&& (!a3|| !qword_1EE2B2C08|| !CFEqual(a3, (CFTypeRef)qword_1EE2B2C08)|| *(float *)&dword_1EE2B2C1C != a5|| CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)))
      {
        vaemSetDeviceVolume(a1, a2, a5);
        dword_1EE2B2C1C = LODWORD(a5);
        if (qword_1EE2B2C08)
        {
          CFRelease((CFTypeRef)qword_1EE2B2C08);
          qword_1EE2B2C08 = 0;
        }
        if (a3)
          qword_1EE2B2C08 = (uint64_t)CFRetain(a3);
      }
      JUMPOUT(0x1940352C8);
    }
  }
  return result;
}

uint64_t vaemDeviceSupportsVolumeRamp(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;
  UInt32 ioDataSize;
  uint64_t inAddress;
  _QWORD inAddress_8[23];

  inAddress_8[22] = *MEMORY[0x1E0C80C00];
  result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if ((_DWORD)result)
  {
    inAddress = *(_QWORD *)"pmrsptuo";
    inAddress_8[0] = 0;
    if (AudioObjectHasProperty(a1, (const AudioObjectPropertyAddress *)&inAddress))
    {
      ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, (char *)inAddress_8 + 4))
      {
        v4 = HIDWORD(inAddress_8[0]);
        return v4 == 1;
      }
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = 0;
    return v4 == 1;
  }
  return result;
}

void MXVW_ReleaseVectorVARouteInfo(uint64_t *a1)
{
  void *v2;

  MXVW_ClearVectorVARouteInfo(a1);
  if (a1)
  {
    v2 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v2;
      operator delete(v2);
    }
    JUMPOUT(0x194035724);
  }
}

void MXVW_ClearVectorVARouteInfo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*(_QWORD *)v2)
        CFRelease(*(CFTypeRef *)v2);
      v4 = *(const void **)(v2 + 8);
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)(v2 + 16);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(v2 + 24);
      if (v6)
        CFRelease(v6);
      v2 += 48;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  a1[1] = v2;
}

CFStringRef CMSMUtility_CreateDeviceRoutesString(CFArrayRef theArray, const __CFArray *a2, const __CFArray *a3)
{
  CFIndex Count;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  __CFArray *Mutable;
  __CFArray *v10;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v13;
  const void *v14;
  CFStringRef v15;
  CFStringRef v16;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v10 = CFArrayCreateMutable(v7, 0, v8);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFArrayAppendValue(v10, ValueAtIndex);
      if (a2 && i < CFArrayGetCount(a2))
      {
        v13 = CFArrayGetValueAtIndex(a2, i);
        CFArrayAppendValue(v10, v13);
      }
      if (a3 && i < CFArrayGetCount(a3))
      {
        v14 = CFArrayGetValueAtIndex(a3, i);
        CFArrayAppendValue(v10, v14);
      }
      v15 = CFStringCreateByCombiningStrings(v7, v10, CFSTR("~"));
      CFArrayAppendValue(Mutable, v15);
      if (v15)
        CFRelease(v15);
      CFArrayRemoveAllValues(v10);
    }
  }
  if (!Mutable || CFArrayGetCount(Mutable) <= 0)
  {
    v16 = 0;
    if (!v10)
      goto LABEL_21;
    goto LABEL_20;
  }
  v16 = CFStringCreateByCombiningStrings(v7, Mutable, CFSTR(", "));
  if (v10)
LABEL_20:
    CFRelease(v10);
LABEL_21:
  if (Mutable)
    CFRelease(Mutable);
  return v16;
}

uint64_t vaemUpdateThermalGainAdjustment()
{
  uint64_t PropertyDataSize;
  size_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  AudioObjectID v5;
  int v6;
  float *v7;
  CFTypeRef outData;
  UInt32 ioDataSize;
  UInt32 outDataSize;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"#vedbolg";
  outDataSize = 0;
  PropertyDataSize = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, &outDataSize);
  if (!(_DWORD)PropertyDataSize)
  {
    if (outDataSize >= 4)
    {
      v1 = (unint64_t)outDataSize >> 2;
      v2 = (char *)malloc_type_calloc(v1, 4uLL, 0x100004052888210uLL);
      PropertyDataSize = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &outDataSize, v2);
      v3 = 0;
      v4 = 4 * v1;
      do
      {
        v5 = *(_DWORD *)&v2[v3];
        *(_QWORD *)&inAddress.mSelector = 0x6F7574707473636CLL;
        inAddress.mElement = 0;
        if (AudioObjectHasProperty(v5, &inAddress))
        {
          *(_QWORD *)&inAddress.mSelector = 0x676C6F6275696420;
          inAddress.mElement = 0;
          ioDataSize = 8;
          outData = 0;
          PropertyDataSize = AudioObjectGetPropertyData(v5, &inAddress, 0, 0, &ioDataSize, &outData);
          if (!(_DWORD)PropertyDataSize)
          {
            v6 = FigCFEqual();
            v7 = (float *)&qword_1EE2B2C28 + 1;
            if (!v6)
              v7 = (float *)&qword_1EE2B2C28;
            if (*v7 <= 1.0)
            {
              *(_QWORD *)&inAddress.mSelector = 0x6F7574707473636CLL;
              inAddress.mElement = 0;
              PropertyDataSize = CMSMVAUtility_AudioObjectSetPropertyData();
            }
            else
            {
              PropertyDataSize = 0;
            }
          }
          if (outData)
            CFRelease(outData);
        }
        v3 += 4;
      }
      while (v4 != v3);
      free(v2);
    }
    else
    {
      return 0;
    }
  }
  return PropertyDataSize;
}

uint64_t MXVW_GetCMSRouteInfoPtrAt(_QWORD *a1, uint64_t a2)
{
  return *a1 + 48 * a2;
}

const __CFString *CMSMVAUtility_MapVADRouteChangeReasonToString(int a1)
{
  if (a1 > 1919842147)
  {
    if (a1 <= 1919971426)
    {
      if (a1 > 1919907441)
      {
        if (a1 == 1919907442)
          return CFSTR("Override");
        if (a1 == 1919970403)
          return CFSTR("CategoryChange");
      }
      else
      {
        if (a1 == 1919842148)
          return CFSTR("NewPortConnected");
        if (a1 == 1919904885)
          return CFSTR("OldPortDisconnected");
      }
    }
    else if (a1 <= 1920099683)
    {
      if (a1 == 1919971427)
        return CFSTR("PortPropertiesChanged");
      if (a1 == 1919971701)
        return CFSTR("OldPortQuiesced");
    }
    else
    {
      switch(a1)
      {
        case 1920099684:
          return CFSTR("RedundantRouteChange");
        case 1920168053:
          return CFSTR("SharedPortDisconnected");
        case 1920429155:
          return CFSTR("WirelessLatencyChanged");
      }
    }
  }
  else if (a1 <= 1919118965)
  {
    if (a1 > 1919050610)
    {
      if (a1 == 1919050611)
        return CFSTR("BroadcastUpdate");
      if (a1 == 1919050851)
        return CFSTR("BeamDirectionChanged");
    }
    else
    {
      if (!a1)
        return CFSTR("Unknown");
      if (a1 == 1918989155)
        return CFSTR("AudioSessionInfoChanged");
    }
  }
  else if (a1 <= 1919184753)
  {
    if (a1 == 1919118966)
      return CFSTR("CategoryNoLongerRoutable");
    if (a1 == 1919181936)
      return CFSTR("DefaultDevicesPersisted");
  }
  else
  {
    switch(a1)
    {
      case 1919184754:
        return CFSTR("DeviceOwnershipRelinquished");
      case 1919185776:
        return CFSTR("AudioProcessingSettingsChange");
      case 1919186544:
        return CFSTR("DevicesPersisted");
    }
  }
  return 0;
}

void vaemVADAvailableSampleRatesListenerGuts_f()
{
  NSObject *v0;

  cmsmReassertPreferredSampleRate();
  -[MXSessionManager refreshDeviceSampleRateCache](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "refreshDeviceSampleRateCache");
  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADAvailableSampleRatesListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5356, 0, 0, v0, 0, (uint64_t)CMSMNotificationUtility_PostAvailableSampleRatesDidChange_f);
}

void cmsmReassertPreferredSampleRate()
{
  NSPointerArray *v0;
  uint64_t v1;
  id v2;
  int ShouldSessionSetInputSampleRate;
  int v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  AudioObjectID CurrentOutputVADID;
  _BOOL4 IsCategoryInputOnly;
  CFTypeRef v10;
  char v11;
  const void *v12;
  double v13;
  double v14;
  uint64_t v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
  {
    cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
  }
  else
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    v2 = 0;
    ShouldSessionSetInputSampleRate = 0;
    v4 = 0;
    if (v1)
    {
      v5 = *(_QWORD *)v18;
      while (2)
      {
        for (i = 0; i != v1; ++i)
        {
          if (*(_QWORD *)v18 != v5)
            objc_enumerationMutation(v0);
          v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if ((objc_msgSend(v7, "currentlyControllingFlags") & 2) != 0)
          {

            v2 = v7;
            ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(v7);
            CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(v7);
            IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(v7, "audioCategory"));
            objc_msgSend(v7, "preferredHardwareFormat");
            if (vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly))
            {
              v1 = CMSUtility_GetCurrentOutputVADID(v7);
              v12 = (const void *)objc_msgSend(v7, "preferredHardwareFormat");
              if (v12)
              {
                v10 = CFRetain(v12);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                v10 = 0;
              }
              v4 = 1;
              goto LABEL_18;
            }
            v4 = 1;
          }
        }
        v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v1)
          continue;
        break;
      }
    }
    v10 = 0;
    v11 = 1;
LABEL_18:
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if ((v11 & 1) == 0)
      vaemSetDeviceFormat(v1, v10, 0);
    if (v4)
    {
      if (ShouldSessionSetInputSampleRate)
        objc_msgSend(v2, "preferredInputSampleRate");
      else
        objc_msgSend(v2, "preferredOutputSampleRate");
      v14 = v13;
      v15 = objc_msgSend(v2, "preferredIOBufferFrames");
      objc_msgSend(v2, "preferredIOBufferDuration");
      cmsSetDeviceSampleRateAndBufferSize(v2, v15, ShouldSessionSetInputSampleRate != 0, v14, v16);
    }

    if (v10)
      CFRelease(v10);
  }
}

uint64_t CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange(uint64_t result)
{
  char v1;

  if (CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange_cachedSpeechDetectionDevicePresent != (_DWORD)result)
  {
    v1 = result;
    result = +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SpeechDetectionDevicePresentDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (_DWORD)result != 0), CFSTR("Present"), 0), 0);
    CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange_cachedSpeechDetectionDevicePresent = v1;
  }
  return result;
}

uint64_t vaemAddVADVolumeRampStatusChangeListener(AudioObjectID a1)
{
  uint64_t result;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  AudioObjectPropertyAddress inAddress;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if ((_DWORD)result)
  {
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"spmrptuo";
    inAddress.mElement = 0;
    result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)vaemVADVolumeRampStatusChangeListener, 0);
    v3 = result;
    v7 = result;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v3)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void CMSMUtility_UpdateSharePlayVolumeBehaviours()
{
  NSObject *v0;

  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    v0 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMUtility_UpdateSharePlayVolumeBehaviours", (uint64_t)"CMSessionManager_Utilities.m", 6348, 0, 0, v0, (uint64_t)&__block_literal_global_301);
  }
}

void *CMSMUtility_GetSharePlayCapableActiveCallSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
LABEL_4:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v8 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v4);
      if (CMSUtility_GetIsActive(v5))
      {
        if ((objc_msgSend(v5, "isSharePlayCapableCallSession") & 1) != 0)
          break;
      }
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          goto LABEL_4;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsPlayingOverAirPlayVideo()
{
  int v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  int v7;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C05;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActiveOverAirPlayVideo")
          && (objc_msgSend(v6, "isAudioOnlyAirPlayVideoActive") & 1) == 0
          && objc_msgSend(v6, "isPlaying")
          && CMSUtility_IsLongFormVideoSession(v6))
        {
          v7 = 1;
          goto LABEL_15;
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v3)
        continue;
      break;
    }
    v7 = 0;
  }
  else
  {
    v7 = 0;
  }
LABEL_15:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  byte_1EE2B3C05 = v7;
  result = MEMORY[0x1940352C8](gCMSM);
  if (v7 != v0)
  {
    result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingOverAirPlayVideoDidChange(v7);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsActiveOverAirPlayVideo()
{
  int v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  int v7;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C04;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActiveOverAirPlayVideo")
          && (objc_msgSend(v6, "isAudioOnlyAirPlayVideoActive") & 1) == 0
          && CMSUtility_IsLongFormVideoSession(v6))
        {
          v7 = 1;
          goto LABEL_14;
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v3)
        continue;
      break;
    }
    v7 = 0;
  }
  else
  {
    v7 = 0;
  }
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  byte_1EE2B3C04 = v7;
  result = MEMORY[0x1940352C8](gCMSM);
  if (v7 != v0)
  {
    result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange(v7);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void CMSMNotificationUtility_PostSessionRoutingContextDidChange_f(void *a1)
{
  CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("RoutingContextDidChange"));

}

uint64_t CMSUtility_GetCurrentConsolidatedPlayingState(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;

  if ((objc_msgSend(a1, "someMXSessionIsPlaying") & 1) == 0
    && (objc_msgSend(a1, "clientIsPlaying") & 1) == 0
    && !objc_msgSend(a1, "hapticEngineIsPlaying"))
  {
    return 0;
  }
  if (!dword_1EE2B3F38)
    return 1;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  v3 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v3;
}

uint64_t FigSystemControllerCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  MXSystemController *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  if (FigSystemControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 12) = a2;
  v9 = -[MXSystemController initWithPID:]([MXSystemController alloc], "initWithPID:", a2);
  *(_QWORD *)DerivedStorage = v9;
  if (v9)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    v17 = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fsc_createPropertyMappingDicts_block_invoke;
    block[3] = &unk_1E3099018;
    block[4] = &v14;
    if (fsc_createPropertyMappingDicts_onceToken != -1)
      dispatch_once(&fsc_createPropertyMappingDicts_onceToken, block);
    v10 = *((unsigned int *)v15 + 6);
    _Block_object_dispose(&v14, 8);
    if (!(_DWORD)v10)
    {
      CMSessionGetNotificationCenter(v11);
      v10 = FigNotificationCenterAddWeakListeners();
      if (!(_DWORD)v10)
      {
        objc_msgSend(*(id *)DerivedStorage, "setAttributeForKey:andValue:", CFSTR("ClientAuditToken"), objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a3, 32));
        *a4 = 0;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v10;
}

void sub_19364F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19364F4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19364F5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MXSessionCreate(void *a1, MXSession **a2)
{
  void *v4;
  OS_dispatch_queue *v5;
  MXSession *v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = (void *)MEMORY[0x194035B20]();
  if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3052000000;
    v13 = __Block_byref_object_copy__6;
    v14 = __Block_byref_object_dispose__6;
    v15 = 0;
    v5 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __MXSessionCreate_block_invoke;
    v9[3] = &unk_1E3098D88;
    v9[4] = &v10;
    v9[5] = a1;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionCreate", (uint64_t)"MXSession_CInterfaceCommon.m", 64, 0, 0, v5, (uint64_t)v9);
    *a2 = (MXSession *)v11[5];
    _Block_object_dispose(&v10, 8);
    v6 = *a2;
  }
  else
  {
    v6 = -[MXSession initWithSession:]([MXSession alloc], "initWithSession:", a1);
    *a2 = v6;
  }
  if (v6)
    v7 = 0;
  else
    v7 = 4294951616;
  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_19364F72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionCreate(void *a1, MXSession **a2)
{
  void *v4;
  OS_dispatch_queue *v5;
  MXSession *v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = (void *)MEMORY[0x194035B20]();
  if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3052000000;
    v13 = __Block_byref_object_copy__6;
    v14 = __Block_byref_object_dispose__6;
    v15 = 0;
    v5 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___MXSessionCreate_block_invoke;
    v9[3] = &unk_1E3098D88;
    v9[4] = &v10;
    v9[5] = a1;
    MXDispatchAsyncAndWait((uint64_t)"_MXSessionCreate", (uint64_t)"MXSession_CInterfaceCommon.m", 101, 0, 0, v5, (uint64_t)v9);
    *a2 = (MXSession *)v11[5];
    _Block_object_dispose(&v10, 8);
    v6 = *a2;
  }
  else
  {
    v6 = -[MXSession initWithSession:]([MXSession alloc], "initWithSession:", a1);
    *a2 = v6;
  }
  if (v6)
    v7 = 0;
  else
    v7 = 4294951616;
  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_19364F8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSessionCreateForRemoteDeviceID(uint64_t a1, uint64_t *a2)
{
  void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  MXCoreSessionSidekick *v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x194035B20]();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    v6 = -[MXCoreSessionSidekick initWithRemoteDeviceID:]([MXCoreSessionSidekick alloc], "initWithRemoteDeviceID:", a1);
    v7 = 0;
    *a2 = (uint64_t)v6;
  }
  else
  {
    v7 = CMSessionCreate(a2);
  }
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t MX_FeatureFlags_IsOffloadACQEnabled()
{
  if (MX_FeatureFlags_IsOffloadACQEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsOffloadACQEnabled_onceToken, &__block_literal_global_51);
  return MX_FeatureFlags_IsOffloadACQEnabled_sIsOffloadACQEnabled;
}

uint64_t _CMSessionCreateForRemoteDeviceID(uint64_t a1, uint64_t *a2)
{
  void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  MXCoreSessionSidekick *v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x194035B20]();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    v6 = -[MXCoreSessionSidekick initWithRemoteDeviceID:]([MXCoreSessionSidekick alloc], "initWithRemoteDeviceID:", a1);
    v7 = 0;
    *a2 = (uint64_t)v6;
  }
  else
  {
    v7 = _CMSessionCreate(a2);
  }
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t _CMSessionCreate(uint64_t *a1)
{
  void *v2;
  uint64_t CFObject;

  v2 = (void *)MEMORY[0x194035B20]();
  CFObject = cmsession_createCFObject(a1);
  if (!(_DWORD)CFObject)
    CFObject = MXCoreSessionInitialize(*(void **)(*a1 + 16));
  objc_autoreleasePoolPop(v2);
  return CFObject;
}

uint64_t CMSessionGetTypeID()
{
  return sCMSessionID;
}

void sub_19364FDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19364FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19364FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CMSMUtility_UpdateCurrentRoutesInfo(const __CFArray *a1, const __CFArray *a2, _QWORD *a3, int a4)
{
  unint64_t VectorCMSRouteInfoSize;
  CFIndex Count;
  unint64_t i;
  unint64_t v11;
  CFIndex v12;
  unint64_t j;
  __CFString *v14;
  uint64_t CMSRouteInfoPtrAt;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  const void *v23;
  const void *v24;
  const void *v25;
  CFTypeRef v26;
  const void *v27;
  const void *v28;
  const void *v29;
  __CFArray *v30;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  OpaqueFigEndpoint *v35;
  OpaqueFigEndpoint *v36;
  uint64_t CMBaseObject;
  void (*v38)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v39;
  const void *v40;
  CFTypeRef v41;
  uint64_t v42[6];
  CFTypeRef v43;
  int8x16_t v44;
  CFTypeRef v45;
  uint64_t v46;
  uint64_t v47;
  CFTypeRef cf[2];
  int8x16_t v49[2];

  if (a1)
  {
    VectorCMSRouteInfoSize = MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20);
    Count = CFArrayGetCount(a1);
    dword_1EE2B3C2C = Count;
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        v43 = 0;
        FigCFArrayGetInt64AtIndex();
        if (i >= VectorCMSRouteInfoSize)
        {
          *(_OWORD *)cf = 0u;
          memset(v49, 0, 28);
          v49[1].i32[3] = (int)v43;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1EE2B3C20, (__int128 *)cf);
        }
        else
        {
          *(_DWORD *)(MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, i) + 44) = (_DWORD)v43;
        }
      }
    }
  }
  if (a2)
  {
    v11 = MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20);
    v12 = CFArrayGetCount(a2);
    dword_1EE2B3C28 = v12;
    if (v12 >= 1)
    {
      for (j = 0; j != v12; ++j)
      {
        v43 = 0;
        FigCFArrayGetInt64AtIndex();
        v14 = vaeCopyVADEndpointTypeForPort(0);
        if (j >= v11)
        {
          memset(v49, 0, sizeof(v49));
          cf[0] = 0;
          cf[1] = v14;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1EE2B3C20, (__int128 *)cf);
        }
        else
        {
          CMSRouteInfoPtrAt = MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, j);
          *(_DWORD *)(CMSRouteInfoPtrAt + 40) = 0;
          v16 = *(const void **)(CMSRouteInfoPtrAt + 8);
          *(_QWORD *)(CMSRouteInfoPtrAt + 8) = v14;
          if (v14)
            CFRetain(v14);
          if (v16)
            CFRelease(v16);
        }
        if (v14)
          CFRelease(v14);
      }
    }
  }
  v17 = MXVW_GetVectorCMSRouteInfoSize((_QWORD *)qword_1EE2B3C20);
  if (a3 && a4)
  {
    v18 = v17;
    v19 = 0;
    do
    {
      memset(v49, 0, sizeof(v49));
      *(_OWORD *)cf = 0u;
      MXVW_GetCMSRouteInfoAt(a3, v19, (uint64_t)cf);
      if (v18 <= v19)
      {
        v46 = 0;
        v47 = 0;
        v43 = cf[0];
        v44 = vextq_s8(v49[0], v49[0], 8uLL);
        v45 = cf[1];
        MXVW_VectorCMSRouteInfoPushBack((void **)qword_1EE2B3C20, (__int128 *)&v43);
      }
      else
      {
        v20 = MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, v19);
        v21 = *(CFTypeRef *)v20;
        v22 = cf[0];
        *(CFTypeRef *)v20 = cf[0];
        if (v22)
          CFRetain(v22);
        if (v21)
          CFRelease(v21);
        v23 = *(const void **)(v20 + 16);
        v24 = (const void *)v49[0].i64[0];
        *(_QWORD *)(v20 + 16) = v49[0].i64[0];
        if (v24)
          CFRetain(v24);
        if (v23)
          CFRelease(v23);
        v25 = *(const void **)(v20 + 24);
        v26 = cf[1];
        *(CFTypeRef *)(v20 + 24) = cf[1];
        if (v26)
          CFRetain(v26);
        if (v25)
          CFRelease(v25);
        v27 = *(const void **)(v20 + 8);
        v28 = (const void *)v49[0].i64[1];
        *(_QWORD *)(v20 + 8) = v49[0].i64[1];
        if (v28)
          CFRetain(v28);
        if (v27)
          CFRelease(v27);
        v29 = *(const void **)(v20 + 32);
        if (v29)
        {
          CFRelease(v29);
          *(_QWORD *)(v20 + 32) = 0;
        }
      }
      ++v19;
    }
    while (a4 != v19);
  }
  v30 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue() && a4)
  {
    v31 = 0;
    v32 = *MEMORY[0x1E0CA3A58];
    v33 = *MEMORY[0x1E0CA4338];
    v34 = *MEMORY[0x1E0C9AE00];
    do
    {
      CFArrayGetValueAtIndex(v30, v31);
      if (FigCFEqual() || FigCFEqual())
      {
        MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v31, (uint64_t)v42);
        v35 = FigRoutingManagerCopyEndpointWithDeviceID(v42[2], 1, v32, qword_1EE2B3CF0);
        if (v35)
        {
          v36 = v35;
          cf[0] = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v38 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v38)
            v38(CMBaseObject, v33, v34, cf);
          v39 = MXVW_GetCMSRouteInfoPtrAt((_QWORD *)qword_1EE2B3C20, v31);
          v40 = *(const void **)(v39 + 32);
          v41 = cf[0];
          *(CFTypeRef *)(v39 + 32) = cf[0];
          if (v41)
            CFRetain(v41);
          if (v40)
            CFRelease(v40);
          if (cf[0])
            CFRelease(cf[0]);
          CFRelease(v36);
        }
      }
      ++v31;
    }
    while (a4 != v31);
  }
  if (v30)
    CFRelease(v30);
}

unint64_t MXVW_GetVectorCMSRouteInfoSize(_QWORD *a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
}

void vaemCopyNewRoutesInfoFromRouteChangeDescription(const __CFDictionary *a1, void **a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, const __CFDictionary **a8, uint64_t a9)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int Count;
  unint64_t v13;
  const void *ValueAtIndex;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  int ConnectionTypeForPort;
  __CFString *v23;
  CFArrayRef v24;
  os_log_type_t type[8];
  CFArrayRef v26;
  CFArrayRef v27;
  CFArrayRef theArray;
  CFArrayRef v29;
  __int128 v30;
  const void *v31;
  __CFString *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v27 = 0;
    theArray = 0;
    vaemGetPortsInfoFromRouteChangeDescription(a1, (const void **)&theArray, (const void **)&v27, a4, a5, a6, a7, a8, a9);
    if (theArray)
      CFArrayGetCount(theArray);
    if (v27)
      CFArrayGetCount(v27);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v29 = 0;
    *(_QWORD *)type = 0;
    v26 = 0;
    v24 = 0;
    CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v27, theArray, &v29, &v26, &v24, (__CFArray **)type);
    if (v29)
    {
      Count = CFArrayGetCount(v29);
      *a3 = Count;
      if (Count)
      {
        v13 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v29, v13);
          if (FigCFEqual())
            v15 = 0;
          else
            v15 = ValueAtIndex;
          v16 = CFArrayGetValueAtIndex(v26, v13);
          if (FigCFEqual())
            v17 = 0;
          else
            v17 = v16;
          if (v24)
          {
            v18 = CFArrayGetValueAtIndex(v24, v13);
            if (FigCFEqual())
              v19 = 0;
            else
              v19 = v18;
          }
          else
          {
            v19 = 0;
          }
          v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)type, v13);
          if (FigCFEqual())
            v21 = 0;
          else
            v21 = v20;
          FigCFArrayGetInt64AtIndex();
          ConnectionTypeForPort = vaeGetConnectionTypeForPort(0);
          v23 = vaeCopyVADEndpointTypeForPort(0);
          *(_QWORD *)&v30 = v15;
          *((_QWORD *)&v30 + 1) = v21;
          v31 = v17;
          v32 = v23;
          v33 = v19;
          v34 = ConnectionTypeForPort;
          v35 = 0;
          MXVW_VectorVARouteInfoPushBack(a2, &v30);
          if (v23)
            CFRelease(v23);
          ++v13;
        }
        while (v13 < *a3);
      }
      if (v29)
      {
        CFRelease(v29);
        v29 = 0;
      }
    }
    else
    {
      *a3 = 0;
    }
    if (v26)
    {
      CFRelease(v26);
      v26 = 0;
    }
    if (*(_QWORD *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(_QWORD *)type = 0;
    }
    if (v24)
      CFRelease(v24);
  }
}

void MXVW_VectorVARouteInfoPushBack(void **a1, __int128 *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;

  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v4 = (const void *)*((_QWORD *)a2 + 1);
  if (v4)
    CFRetain(v4);
  v5 = (const void *)*((_QWORD *)a2 + 2);
  if (v5)
    CFRetain(v5);
  v6 = (const void *)*((_QWORD *)a2 + 3);
  if (v6)
    CFRetain(v6);
  v7 = (unint64_t)a1[2];
  v8 = a1[1];
  if ((unint64_t)v8 >= v7)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555)
      std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>((uint64_t)(a1 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[48 * v12];
    v18 = &v16[48 * v15];
    v19 = *a2;
    v20 = a2[2];
    *((_OWORD *)v17 + 1) = a2[1];
    *((_OWORD *)v17 + 2) = v20;
    *(_OWORD *)v17 = v19;
    v11 = v17 + 48;
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 3);
        v24 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v17 - 1) = v24;
        *((_OWORD *)v17 - 3) = v23;
        v17 -= 48;
        v21 -= 48;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v11;
    a1[2] = v18;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v9 = *a2;
    v10 = a2[2];
    v8[1] = a2[1];
    v8[2] = v10;
    *v8 = v9;
    v11 = v8 + 3;
  }
  a1[1] = v11;
}

CFDictionaryRef cmsmCopyDetailedPortInfoForRouteConfiguration(AudioObjectID a1, int a2, int a3, const void *a4, int a5)
{
  CFTypeRef v9;
  const void *v10;
  unsigned int v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  _BOOL4 IsHeadphonesPort;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  const void *v23;
  CFArrayRef v24;
  CFArrayRef v25;
  CFArrayRef v26;
  CFArrayRef v27;
  _BOOL4 IsLiveListenSupportedOnVADPort;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  __CFString *v33;
  CFDictionaryRef v34;
  CFTypeRef cf;
  void *v37;
  void *v38;
  const __CFAllocator *allocator;
  CFNumberRef v40;
  AudioObjectPropertyElement valuePtr;
  void *values[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *keys[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  *(_OWORD *)keys = 0u;
  v49 = 0u;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  *(_OWORD *)values = 0u;
  v9 = vaeCopyDeviceIdentifierFromVADPort(a1);
  v10 = v9;
  if (v9)
  {
    keys[0] = CFSTR("RouteDetailedDescription_UID");
    values[0] = (void *)v9;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v14 = v13;
  if (v13)
  {
    *(_QWORD *)((unint64_t)keys | (8 * v11)) = CFSTR("RouteDetailedDescription_ID");
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v11++ & 1))) = v13;
  }
  IsHeadphonesPort = vaeIsHeadphonesPort(valuePtr);
  v16 = (void *)*MEMORY[0x1E0C9AE50];
  v17 = (void *)*MEMORY[0x1E0C9AE40];
  if (IsHeadphonesPort)
    v18 = (void *)*MEMORY[0x1E0C9AE50];
  else
    v18 = (void *)*MEMORY[0x1E0C9AE40];
  if (v18)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_IsHeadphones");
    values[v11++] = v18;
  }
  v40 = v14;
  v38 = v16;
  allocator = v12;
  v37 = v17;
  if (a5 == 1)
  {
    v20 = vaeCopyFigInputDeviceNameFromVADPort(valuePtr);
    goto LABEL_16;
  }
  if (a5 != 2 || (v19 = vaeCopyFigInputDeviceNameFromVADPort(valuePtr)) == 0)
  {
    v20 = vaeCopyFigOutputDeviceNameFromVADPort(valuePtr);
LABEL_16:
    v19 = v20;
  }
  v21 = (void *)vaeCopySelectedDataSourceForPortAndRouteConfiguration(valuePtr, a2, a3, a4);
  if (v21)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_SelectedDataSource");
    values[v11++] = v21;
  }
  cf = v21;
  if (v19)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_PortType");
    values[v11++] = v19;
  }
  v22 = (void *)vaeCopySpecificNameForPort(valuePtr);
  v23 = v22;
  if (v22)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_Name");
    values[v11++] = v22;
  }
  v24 = vaeCopySubPortDescriptionsForPortAndRouteConfiguration(valuePtr, a2, a3, a4);
  v25 = v24;
  if (v24)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_DataSources");
    values[v11++] = v24;
  }
  v26 = vaeCopyHiddenSubPortDescriptionsForPort(valuePtr);
  v27 = v26;
  if (v26)
  {
    keys[v11] = CFSTR("RouteDetailedDescription_HiddenDataSources");
    values[v11++] = v26;
  }
  IsLiveListenSupportedOnVADPort = vaeIsLiveListenSupportedOnVADPort(valuePtr);
  keys[v11] = CFSTR("RouteDetailedDescription_LiveListenIsSupported");
  if (IsLiveListenSupportedOnVADPort)
    v29 = v38;
  else
    v29 = v37;
  values[v11] = v29;
  v30 = v11 + 1;
  if (vaeIsLiveListenSupportedOnVADPort(valuePtr))
    v31 = v38;
  else
    v31 = v37;
  keys[v30] = CFSTR("RouteDetailedDescription_VoiceProcessingIsSupported");
  values[v30] = v31;
  v32 = v11 + 2;
  v33 = vaeCopyVADEndpointTypeForPort(valuePtr);
  if (v33)
  {
    keys[v32] = CFSTR("RouteDetailedDescriptionKey_EndpointType");
    values[v32] = v33;
    v32 = v11 + 3;
    CFRelease(v33);
  }
  v34 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v32, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v19)
    CFRelease(v19);
  if (v23)
    CFRelease(v23);
  if (v10)
    CFRelease(v10);
  if (v40)
    CFRelease(v40);
  if (v25)
    CFRelease(v25);
  if (cf)
    CFRelease(cf);
  if (v27)
    CFRelease(v27);
  return v34;
}

void vaemCopyPortDescriptions(AudioObjectID a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, CFMutableArrayRef *a5)
{
  BOOL v5;
  CFArrayRef v7;
  uint64_t v9;
  const __CFAllocator *v10;
  int v11;
  CFMutableDictionaryRef Mutable;
  id v13;
  const void *v14;
  const __CFString *v15;
  const __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  CFTypeRef v20;
  __CFString *v21;
  const void *SInt64;
  CFArrayRef v23;
  CFArrayRef v24;
  const void *v25;
  CFIndex v26;
  const void *v27;
  const __CFString *v28;
  __CFArray *v29;
  unsigned int *v30;
  __CFArray *v31;
  const __CFArray *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  uint64_t v36;
  CFMutableDictionaryRef v37;
  const void *v38;
  unsigned int v39;
  const __CFArray *v40;
  unsigned int v41;
  const __CFAllocator *v42;
  unsigned int v43;
  CFIndex Count;
  uint64_t v47;
  const __CFString *v48;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int128 outData;
  __int128 v52;
  uint64_t v53;

  if (*a5)
    v5 = theArray == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = theArray;
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v9 = 0;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if ((_DWORD)a4 == 1)
        v11 = 1768845428;
      else
        v11 = 1869968496;
      v43 = v11;
      v41 = a4;
      v40 = v7;
      v39 = a2;
      v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        FigCFArrayGetInt64AtIndex();
        Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if ((_DWORD)a4 == 1)
          v13 = vaeCopyFigInputDeviceNameFromVADPort(0);
        else
          v13 = vaeCopyFigOutputDeviceNameFromVADPort(0);
        v14 = v13;
        FigCFDictionarySetValue();
        if (v14)
          CFRelease(v14);
        v15 = (const __CFString *)vaeCopySpecificNameForPort(0);
        if (FigCFEqual())
        {
          v16 = v7;
          v17 = a4;
          v18 = a2;
          v19 = v15;
          v15 = CFSTR("AirPlay");
          CFRetain(CFSTR("AirPlay"));
          if (v19)
            CFRelease(v19);
          a2 = v18;
          a4 = v17;
          v7 = v16;
          v10 = v42;
        }
        v48 = v15;
        FigCFDictionarySetValue();
        v20 = vaeCopyDeviceIdentifierFromVADPort(0);
        FigCFDictionarySetValue();
        if (v20)
          CFRelease(v20);
        vaeIsHeadphonesPort(0);
        FigCFDictionarySetValue();
        vaeIsVoiceProcessingSupportedOnVADPort(0);
        FigCFDictionarySetValue();
        vaeIsLiveListenSupportedOnVADPort(0);
        FigCFDictionarySetValue();
        if (vaeGetPortTypeFromPortID(0) == 1885892674)
        {
          vaeDoesPortSupportDoAP(0);
          FigCFDictionarySetValue();
        }
        vaeDoesPortSupportSoftwareVolume(0);
        FigCFDictionarySetValue();
        vaeDoesPortSupportSoftwareVolume(0);
        FigCFDictionarySetValue();
        v21 = vaeCopyVADEndpointTypeForPort(0);
        FigCFDictionarySetValue();
        if (v21)
          CFRelease(v21);
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        FigCFDictionarySetValue();
        if (SInt64)
          CFRelease(SInt64);
        v23 = vaeCopySubPortDescriptionsForPortAndRouteConfiguration(0, 0, 0, 0);
        FigCFDictionarySetValue();
        if (v23)
          CFRelease(v23);
        v24 = vaeCopyHiddenSubPortDescriptionsForPort(0);
        FigCFDictionarySetValue();
        if (v24)
          CFRelease(v24);
        v25 = vaeCopySelectedDataSourceForPortAndRouteConfiguration(0, 0, 0, 0);
        FigCFDictionarySetValue();
        if (v25)
          CFRelease(v25);
        v53 = 0;
        outData = 0u;
        v52 = 0u;
        *(_QWORD *)&inAddress.mSelector = 0x676C6F6273666D74;
        inAddress.mElement = 0;
        ioDataSize = 40;
        if (AudioObjectGetPropertyData(a2, &inAddress, 0, 0, &ioDataSize, &outData))
          v26 = 0;
        else
          v26 = HIDWORD(v52);
        v27 = (const void *)FigCFNumberCreateSInt64();
        FigCFDictionarySetValue();
        if (v27)
          CFRelease(v27);
        v28 = v48;
        if ((_DWORD)v26)
        {
          v47 = v9;
          v29 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
          inAddress.mSelector = 0;
          LODWORD(outData) = 1936876644;
          *(_QWORD *)((char *)&outData + 4) = v43;
          v30 = 0;
          if (!AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)&outData, 0, 0, &inAddress.mSelector))
          {
            v30 = (unsigned int *)malloc_type_malloc(inAddress.mSelector, 0x704FAC99uLL);
            if (AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&outData, 0, 0, &inAddress.mSelector, v30))
            {
              if (v30)
              {
                free(v30);
                v30 = 0;
              }
            }
          }
          v31 = vaeCopyChannelNamesForPortAndNumberOfChannels(0, v48, v26);
          if (v31)
          {
            v32 = v31;
            v33 = CFArrayGetCount(v31);
            if (v33 >= 1)
            {
              v34 = v33;
              v35 = 0;
              v36 = 0;
              do
              {
                v37 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFArrayGetValueAtIndex(v32, v35);
                FigCFDictionarySetValue();
                if (v30 && v36 < v30[2])
                {
                  v38 = (const void *)FigCFNumberCreateSInt64();
                  FigCFDictionarySetValue();
                  if (v38)
                    CFRelease(v38);
                  ++v36;
                }
                if (v37)
                {
                  CFArrayAppendValue(v29, v37);
                  CFRelease(v37);
                }
                ++v35;
              }
              while (v34 != v35);
            }
            CFRelease(v32);
            a4 = v41;
            v7 = v40;
            a2 = v39;
            v28 = v48;
          }
          free(v30);
          FigCFDictionarySetValue();
          v9 = v47;
          if (v29)
            CFRelease(v29);
        }
        if (v28)
          CFRelease(v28);
        if (Mutable)
        {
          CFArrayAppendValue(*a5, Mutable);
          CFRelease(Mutable);
        }
        ++v9;
      }
      while (v9 != Count);
    }
  }
}

uint64_t CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, CFIndex a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  CFArrayRef v19;
  CFArrayRef v20;
  CFArrayRef theArray;

  if (!a5 && !a6 && !a7)
    return 4294954315;
  v20 = 0;
  theArray = 0;
  v19 = 0;
  CMSMUtility_CopyDeviceRoutesForInactiveRouteConfiguration(a1, a2, a3, &theArray, &v20, &v19);
  Count = (CFIndex)theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  if (Count > a4)
  {
    if (a5)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      v14 = CFRetain(ValueAtIndex);
      *a5 = v14;
      if (CFEqual(v14, &stru_1E30A1A48))
        *a5 = 0;
    }
    if (a6)
    {
      v15 = CFArrayGetValueAtIndex(v20, 0);
      v16 = CFRetain(v15);
      *a6 = v16;
      if (CFEqual(v16, &stru_1E30A1A48))
        *a6 = 0;
    }
    if (a7)
    {
      v17 = CFArrayGetValueAtIndex(v19, 0);
      v18 = CFRetain(v17);
      *a7 = v18;
      if (CFEqual(v18, &stru_1E30A1A48))
        *a7 = 0;
    }
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    v20 = 0;
  }
  if (v19)
    CFRelease(v19);
  return 0;
}

uint64_t CMSMUtility_CopyDeviceRoutesForInactiveRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, __CFArray **a4, __CFArray **a5, __CFArray **a6)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v13;
  const __CFArray *v14;

  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  v13 = (const __CFArray *)vaemCopyVADInputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  v14 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v14, v13, a4, a5, 0, a6);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  return 0;
}

void vautility_copyRoutesInfoFromPorts(const __CFArray *a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  CFIndex Count;
  uint64_t v9;
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  __CFArray *Mutable;
  __CFArray *v13;
  __CFArray *v14;
  uint64_t i;
  const __CFString *v16;
  const __CFString *v17;
  CFStringRef v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  __CFArray **v22;
  __CFArray **v23;
  __CFArray **v24;
  __CFArray **v25;

  if (!a1)
    return;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return;
  v9 = Count;
  v25 = a4;
  v24 = a3;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v13 = CFArrayCreateMutable(v10, 0, v11);
  v14 = CFArrayCreateMutable(v10, 0, v11);
  if (v9 < 2)
  {
    if (v9 != 1)
      goto LABEL_24;
LABEL_7:
    for (i = 0; i != v9; ++i)
    {
      FigCFArrayGetInt64AtIndex();
      v16 = (const __CFString *)vaeCopyFigOutputDeviceNameFromVADPort(0);
      v17 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(0);
      v18 = vaeCopyRouteSubtypeFromVADPort(0);
      if (v16)
        v19 = v16;
      else
        v19 = &stru_1E30A1A48;
      CFArrayAppendValue(Mutable, v19);
      if (v17)
        v20 = v17;
      else
        v20 = &stru_1E30A1A48;
      CFArrayAppendValue(v13, v20);
      if (v18)
        v21 = v18;
      else
        v21 = &stru_1E30A1A48;
      CFArrayAppendValue(v14, v21);
      if (v16)
        CFRelease(v16);
      if (v17)
        CFRelease(v17);
      if (v18)
        CFRelease(v18);
    }
    goto LABEL_24;
  }
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(a1))
    goto LABEL_7;
  CFArrayAppendValue(Mutable, CFSTR("broadcast"));
  CFArrayAppendValue(v13, &stru_1E30A1A48);
  CFArrayAppendValue(v14, &stru_1E30A1A48);
LABEL_24:
  if (a2)
  {
    *a2 = Mutable;
    v23 = v24;
    v22 = v25;
  }
  else
  {
    v23 = v24;
    v22 = v25;
    if (Mutable)
      CFRelease(Mutable);
  }
  if (v23)
  {
    *v23 = v13;
  }
  else if (v13)
  {
    CFRelease(v13);
  }
  if (v22)
  {
    *v22 = v14;
  }
  else if (v14)
  {
    CFRelease(v14);
  }
}

id vaeCopyFigOutputDeviceNameFromVADPort(uint64_t a1)
{
  unsigned int PortTypeFromPortID;

  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
}

void CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(const __CFArray *a1, CFArrayRef theArray, __CFArray **a3, __CFArray **a4, _QWORD *a5, __CFArray **a6)
{
  CFIndex Count;
  CFIndex v13;
  const __CFArray *v14;
  CFTypeRef v15;
  int PortTypeFromPortID;
  unsigned int v17;
  id v18;
  const void *v19;
  __CFArray *MutableCopy;

  if (!theArray)
  {
    Count = 0;
    if (a1)
      goto LABEL_3;
LABEL_5:
    v13 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a1)
    goto LABEL_5;
LABEL_3:
  v13 = CFArrayGetCount(a1);
LABEL_6:
  if (v13 <= 0 && Count < 1)
    return;
  if (v13 && !Count)
  {
    v14 = a1;
LABEL_15:
    vautility_copyRoutesInfoFromPorts(v14, a3, a4, a6);
    return;
  }
  if (!v13 && Count)
  {
    v14 = theArray;
    goto LABEL_15;
  }
  if (v13 && Count)
  {
    vautility_copyRoutesInfoFromPorts(a1, a3, a4, a6);
    FigCFArrayGetInt64AtIndex();
    v15 = vaeCopyDeviceIdentifierFromVADPort(0);
    if (a5)
      *a5 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v15);
    if (v15)
      CFRelease(v15);
    FigCFArrayGetInt64AtIndex();
    PortTypeFromPortID = vaeGetPortTypeFromPortID(0);
    v17 = vaeGetPortTypeFromPortID(0);
    v18 = CMSMVAUtility_CopyFigIODeviceNameFromVADPortTypes(PortTypeFromPortID, v17);
    v19 = v18;
    if (a3 && v18)
    {
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a3);
      CFArraySetValueAtIndex(MutableCopy, 0, v19);
      if (*a3)
        CFRelease(*a3);
      *a3 = MutableCopy;
    }
    else if (!v18)
    {
      return;
    }
    CFRelease(v19);
  }
}

const void *vaemCopyVADOutputPortsForRouteConfiguration(int a1, int a2, const void *a3, const void *a4)
{
  CFTypeRef v4;
  const void *v5;
  CFTypeID v6;

  v4 = vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(a1, a2, a3, a4, 0, 0x1E30A4C28);
  v5 = v4;
  if (v4)
  {
    v6 = CFGetTypeID(v4);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *vaemCopyVADInputPortsForRouteConfiguration(int a1, int a2, const void *a3, const void *a4)
{
  CFTypeRef v4;
  const void *v5;
  CFTypeID v6;

  v4 = vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(a1, a2, a3, a4, 1, 0x1E30A4C28);
  v5 = v4;
  if (v4)
  {
    v6 = CFGetTypeID(v4);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

__CFString *vaeCopyVADEndpointTypeForPort(AudioObjectID a1)
{
  int VADEndpointTypeForPort;
  __CFString **v2;

  VADEndpointTypeForPort = vaeGetVADEndpointTypeForPort(a1);
  if (VADEndpointTypeForPort > 1701868659)
  {
    switch(VADEndpointTypeForPort)
    {
      case 1701868660:
        v2 = kMXSession_EndpointType_TTY;
        return *v2;
      case 1701868910:
        v2 = kMXSession_EndpointType_Unspecified;
        return *v2;
      case 1701869160:
        v2 = kMXSession_EndpointType_Vehicle;
        return *v2;
    }
LABEL_14:
    v2 = kMXSession_EndpointType_Other;
    return *v2;
  }
  if (VADEndpointTypeForPort == 1701865569)
  {
    v2 = kMXSession_EndpointType_HearingAid;
    return *v2;
  }
  if (VADEndpointTypeForPort == 1701865584)
  {
    v2 = kMXSession_EndpointType_Headphones;
    return *v2;
  }
  if (VADEndpointTypeForPort != 1701868400)
    goto LABEL_14;
  v2 = kMXSession_EndpointType_Speakers;
  return *v2;
}

uint64_t vaeGetVADEndpointTypeForPort(AudioObjectID a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = 1701868910;
  outData = 1701868910;
  if (a1)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6270657074;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectHasProperty(a1, &inAddress))
    {
      if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        return outData;
      }
    }
  }
  return v1;
}

BOOL vaeIsLiveListenSupportedOnVADPort(AudioObjectID a1)
{
  BOOL v1;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"psllbolg";
  ioDataSize = 4;
  outData = 0;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    v1 = 1;
  else
    v1 = outData == 0;
  return !v1;
}

BOOL vaeIsHeadphonesPort(_BOOL8 result)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (result)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6270696870;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

CFArrayRef vaeCopySubPortDescriptionsForPortAndRouteConfiguration(AudioObjectPropertyElement a1, int a2, int a3, const void *a4)
{
  __CFArray *Mutable;
  __CFDictionary *RouteConfigurationDictionary;
  const __CFArray *v10;
  CFIndex v11;
  const __CFNumber *ValueAtIndex;
  CFIndex v13;
  uint64_t v14;
  const void *v15;
  OSStatus PropertyData;
  OSStatus v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  CFDictionaryRef v21;
  AudioObjectPropertyElement v22;
  __CFDictionary *v23;
  OSStatus v24;
  OSStatus v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  const __CFDictionary *v29;
  const void *Value;
  const void *v31;
  const void *v32;
  CFDictionaryRef v33;
  char v34;
  CFArrayRef Copy;
  CFTypeID v36;
  int v38;
  const void *v39;
  const __CFAllocator *allocator;
  const __CFArray *v41;
  CFIndex Count;
  int v43;
  char v44;
  AudioObjectID inObjectID;
  AudioObjectPropertyElement valuePtr;
  os_log_type_t type;
  unsigned int v48;
  OSStatus v49;
  UInt32 v50;
  AudioObjectPropertyAddress v51;
  CFDictionaryRef theDict;
  UInt32 ioDataSize[4];
  __int128 v54;
  __int128 v55;
  _OWORD outData[3];
  int v57;
  const char *v58;
  __int16 v59;
  OSStatus v60;
  __int16 v61;
  int v62;
  __int16 v63;
  OSStatus *v64;
  AudioObjectPropertyAddress inAddress;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)&outData[0] = 0;
  v43 = a2;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a2, a3, 0, a4);
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6261767263;
  inObjectID = a1;
  inAddress.mElement = a1;
  ioDataSize[0] = 8;
  if (AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, ioDataSize, outData)|| !*(_QWORD *)&outData[0]|| (v36 = CFGetTypeID(*(CFTypeRef *)&outData[0]), v36 != CFArrayGetTypeID()))
  {
    *(_QWORD *)&outData[0] = 0;
  }
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  v10 = *(const __CFArray **)&outData[0];
  if (!*(_QWORD *)&outData[0])
  {
    Copy = 0;
    if (!Mutable)
      return Copy;
    goto LABEL_60;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)&outData[0]);
  if (Count >= 1)
  {
    v11 = 0;
    v41 = v10;
    v39 = a4;
    v38 = a3;
    while (1)
    {
      valuePtr = 0;
      v55 = 0u;
      memset(outData, 0, sizeof(outData));
      *(_OWORD *)ioDataSize = 0u;
      v54 = 0u;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, v11);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (ValueAtIndex)
      {
        *(_QWORD *)&outData[0] = CFSTR("DataSourceID");
        *(_QWORD *)ioDataSize = ValueAtIndex;
        v13 = 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = vaeCopyNameForSubPort(inObjectID, valuePtr);
      v15 = (const void *)v14;
      if (v14)
      {
        *(_QWORD *)((unint64_t)outData | (8 * v13)) = CFSTR("DataSourceName");
        *(_QWORD *)((unint64_t)ioDataSize & 0xFFFFFFFFFFFFFFF7 | (8 * (v13++ & 1))) = v14;
      }
      theDict = 0;
      v50 = 8;
      *(_QWORD *)&v51.mSelector = 0x676C6F6273707070;
      v51.mElement = valuePtr;
      PropertyData = AudioObjectGetPropertyData(inObjectID, &v51, 0, 0, &v50, &theDict);
      v49 = PropertyData;
      if (PropertyData)
      {
        v17 = PropertyData;
        v48 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v19 = v48;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if (v20)
        {
          v57 = 136315906;
          v58 = "vaeCopySelectedPolarPatternForSubPort";
          v59 = 1024;
          v60 = v17;
          v61 = 1042;
          v62 = 4;
          v63 = 2082;
          v64 = &v49;
          _os_log_send_and_compose_impl();
        }
        v44 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v21 = 0;
      }
      else
      {
        v21 = theDict;
        if (theDict)
        {
          v44 = 0;
          *((_QWORD *)outData + v13) = CFSTR("MicrophonePolarPattern");
          *(_QWORD *)&ioDataSize[2 * v13++] = v21;
        }
        else
        {
          v44 = 1;
        }
      }
      v22 = valuePtr;
      theDict = 0;
      v49 = 0;
      v23 = CMSMVAUtility_CreateRouteConfigurationDictionary(v43, a3, 0, a4);
      *(_QWORD *)&v51.mSelector = 0x676C6F6273706472;
      v51.mElement = v22;
      v50 = 8;
      if (AudioObjectHasProperty(inObjectID, &v51))
      {
        v24 = AudioObjectGetPropertyData(inObjectID, &v51, 8 * (v23 != 0), v23, &v50, &theDict);
        v49 = v24;
        if (v24)
        {
          v25 = v24;
          v48 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v27 = v48;
          if (os_log_type_enabled(v26, type))
            v28 = v27;
          else
            v28 = v27 & 0xFFFFFFFE;
          if (v28)
          {
            v57 = 136315906;
            v58 = "vaeCopyPhysicalDescriptionForSubPort";
            v59 = 1024;
            v60 = v25;
            v61 = 1042;
            v62 = 4;
            v63 = 2082;
            v64 = &v49;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          theDict = 0;
          a4 = v39;
          a3 = v38;
        }
      }
      if (v23)
        CFRelease(v23);
      v29 = theDict;
      if (!theDict)
        goto LABEL_39;
      Value = CFDictionaryGetValue(theDict, CFSTR("region"));
      if (Value)
      {
        *((_QWORD *)outData + v13) = CFSTR("MicrophoneRegion");
        *(_QWORD *)&ioDataSize[2 * v13++] = Value;
      }
      v31 = CFDictionaryGetValue(v29, CFSTR("orientation"));
      if (v31)
      {
        *((_QWORD *)outData + v13) = CFSTR("MicrophoneOrientation");
        *(_QWORD *)&ioDataSize[2 * v13++] = v31;
      }
      v32 = CFDictionaryGetValue(v29, CFSTR("polar pattern"));
      if (v32)
      {
        *((_QWORD *)outData + v13) = CFSTR("MicrophonePolarPatterns");
        *(_QWORD *)&ioDataSize[2 * v13++] = v32;
      }
      else
      {
LABEL_39:
        if (!v13)
        {
          CFArrayAppendValue(Mutable, 0);
          v34 = v44;
          if (!v29)
            goto LABEL_44;
          goto LABEL_43;
        }
      }
      v33 = CFDictionaryCreate(allocator, (const void **)outData, (const void **)ioDataSize, v13, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFArrayAppendValue(Mutable, v33);
      v34 = v44;
      if (v33)
        CFRelease(v33);
      if (!v29)
        goto LABEL_44;
LABEL_43:
      CFRelease(v29);
LABEL_44:
      if (v15)
        CFRelease(v15);
      if ((v34 & 1) == 0)
        CFRelease(v21);
      ++v11;
      v10 = v41;
      if (Count == v11)
      {
        Copy = CFArrayCreateCopy(allocator, Mutable);
        goto LABEL_59;
      }
    }
  }
  Copy = 0;
LABEL_59:
  CFRelease(v10);
  if (Mutable)
LABEL_60:
    CFRelease(Mutable);
  return Copy;
}

uint64_t vaeCopySpecificNameForPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  _QWORD outData[23];

  outData[22] = *MEMORY[0x1E0C80C00];
  outData[0] = 0;
  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270736E6DLL;
  inAddress.mElement = 0;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
    return outData[0];
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

const void *vaeCopySelectedDataSourceForPortAndRouteConfiguration(AudioObjectPropertyElement a1, int a2, int a3, const void *a4)
{
  __CFDictionary *RouteConfigurationDictionary;
  const void *v6;
  CFTypeID v8;
  const void *ValueAtIndex;
  CFTypeRef cf;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  cf = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a2, a3, 0, a4);
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6261637263;
  inAddress.mElement = a1;
  ioDataSize = 8;
  if (!AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &cf)&& cf&& (v8 = CFGetTypeID(cf), v8 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount((CFArrayRef)cf) < 1)
    {
      v6 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
      v6 = ValueAtIndex;
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
    }
  }
  else
  {
    v6 = 0;
    cf = 0;
  }
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  if (cf)
    CFRelease(cf);
  return v6;
}

CFArrayRef vaeCopyHiddenSubPortDescriptionsForPort(AudioObjectID a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  OSStatus PropertyData;
  CFArrayRef Copy;
  CFTypeRef v6;
  CFTypeID v7;
  CFTypeID TypeID;
  CFIndex v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const __CFNumber *ValueAtIndex;
  void *v14;
  CFIndex v15;
  char v16;
  uint64_t v17;
  CFDictionaryRef v18;
  AudioObjectPropertyElement valuePtr;
  CFTypeRef outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  outData = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)&inAddress.mSelector = 0x676C6F62706E6173;
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (AudioObjectHasProperty(a1, &inAddress))
  {
    PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
    Copy = 0;
    v6 = outData;
    if (!PropertyData && outData)
    {
      v7 = CFGetTypeID(outData);
      TypeID = CFArrayGetTypeID();
      v6 = outData;
      if (v7 == TypeID && (v9 = CFArrayGetCount((CFArrayRef)outData), v6 = outData, v9))
      {
        Count = CFArrayGetCount((CFArrayRef)outData);
        if (Count >= 1)
        {
          v11 = Count;
          v12 = 0;
          while (1)
          {
            valuePtr = 0;
            keys[0] = 0;
            keys[1] = 0;
            values[0] = 0;
            values[1] = 0;
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)outData, v12);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            if (ValueAtIndex)
              break;
            v17 = vaeCopyNameForSubPort(a1, valuePtr);
            if (v17)
            {
              v14 = (void *)v17;
              v15 = 0;
LABEL_13:
              v16 = 0;
              keys[v15] = CFSTR("DataSourceName");
              values[v15++] = v14;
LABEL_14:
              v18 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, v15, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFArrayAppendValue(Mutable, v18);
              if (v18)
                CFRelease(v18);
              if ((v16 & 1) == 0)
                CFRelease(v14);
              goto LABEL_19;
            }
            CFArrayAppendValue(Mutable, 0);
LABEL_19:
            if (v11 == ++v12)
              goto LABEL_20;
          }
          keys[0] = CFSTR("DataSourceID");
          values[0] = ValueAtIndex;
          v14 = (void *)vaeCopyNameForSubPort(a1, valuePtr);
          v15 = 1;
          if (v14)
            goto LABEL_13;
          v16 = 1;
          goto LABEL_14;
        }
LABEL_20:
        Copy = CFArrayCreateCopy(v2, Mutable);
        v6 = outData;
      }
      else
      {
        Copy = 0;
      }
    }
    if (v6)
    {
      CFRelease(v6);
      outData = 0;
    }
  }
  else
  {
    Copy = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  return Copy;
}

uint64_t vaeCopyNameForSubPort(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  _QWORD outData[23];

  outData[22] = *MEMORY[0x1E0C80C00];
  outData[0] = 0;
  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6273706E6DLL;
  inAddress.mElement = a2;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
    return outData[0];
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

BOOL vaeIsVoiceProcessingSupportedOnVADPort(AudioObjectID a1)
{
  BOOL v1;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"rpvpbolg";
  ioDataSize = 4;
  outData = 0;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    v1 = 1;
  else
    v1 = outData == 0;
  return !v1;
}

__CFArray *vaeCopyChannelNamesForPortAndNumberOfChannels(uint64_t a1, const void *a2, CFIndex capacity)
{
  int v3;
  const __CFAllocator *v6;
  __CFArray *Mutable;
  __CFArray *v8;
  CFStringRef v9;
  CFStringRef v10;
  const __CFString *v11;
  CFStringRef v12;
  const __CFString *v13;
  CFStringRef v14;
  const void *v15;
  const __CFLocale *v16;
  __CFNumberFormatter *v17;
  int v18;
  CFStringRef v19;
  CFStringRef v20;
  CFStringRef v21;
  int valuePtr;

  v3 = capacity;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378]);
  v8 = Mutable;
  if (!v3)
    return v8;
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      if (a2)
        CFArrayAppendValue(Mutable, a2);
      return v8;
    }
LABEL_20:
    v16 = CFLocaleCopyCurrent();
    v17 = CFNumberFormatterCreate(0, v16, kCFNumberFormatterDecimalStyle);
    if (v17)
    {
      v18 = 0;
      do
      {
        valuePtr = ++v18;
        v19 = CFNumberFormatterCreateStringWithValue(0, v17, kCFNumberSInt32Type, &valuePtr);
        v20 = CFStringCreateWithFormat(v6, 0, CFSTR("%@ %@"), a2, v19);
        if (v20)
        {
          v21 = v20;
          CFArrayAppendValue(v8, v20);
          CFRelease(v21);
        }
        if (v19)
          CFRelease(v19);
      }
      while (v3 != v18);
      if (!v16)
        goto LABEL_29;
    }
    else
    {
      FigSignalErrorAt();
      if (!v16)
        goto LABEL_29;
    }
    CFRelease(v16);
LABEL_29:
    if (!v17)
      return v8;
    v15 = v17;
LABEL_31:
    CFRelease(v15);
    return v8;
  }
  if (vaeGetPortTypeFromPortID(a1) != 1885892727
    && vaeGetPortTypeFromPortID(a1) != 1885892674)
  {
    goto LABEL_20;
  }
  v9 = vaeCopyLocalizedString(CFSTR("mclf"));
  v10 = vaeCopyLocalizedString(CFSTR("mcrt"));
  v11 = CFSTR("Left");
  if (v9)
    v11 = v9;
  v12 = CFStringCreateWithFormat(v6, 0, CFSTR("%@ %@"), a2, v11);
  CFArrayAppendValue(v8, v12);
  v13 = CFSTR("Right");
  if (v10)
    v13 = v10;
  v14 = CFStringCreateWithFormat(v6, 0, CFSTR("%@ %@"), a2, v13);
  CFArrayAppendValue(v8, v14);
  if (v12)
    CFRelease(v12);
  if (v14)
    CFRelease(v14);
  if (v9)
    CFRelease(v9);
  if (v10)
  {
    v15 = v10;
    goto LABEL_31;
  }
  return v8;
}

id vaeCopyFigInputDeviceNameFromVADPort(uint64_t a1)
{
  unsigned int PortTypeFromPortID;

  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  return CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(PortTypeFromPortID);
}

id CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(unsigned int a1)
{
  id v1;
  id v2;

  v1 = -[NSDictionary objectForKey:](-[MXSessionManager vadInputPortTypeToFigInputDeviceNameDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "vadInputPortTypeToFigInputDeviceNameDict"), "objectForKey:", a1);
  v2 = v1;
  if (v1)
    CFRetain(v1);
  return v2;
}

uint64_t systemController_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "isEqualToArray:", CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange_mostRecentAvailableVADUIDs);
  if ((result & 1) == 0)
  {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("AvailableVirtualAudioDevicesDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a1, CFSTR("AvailableVADUIDs"), 0), 0);

    result = a1;
    CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange_mostRecentAvailableVADUIDs = result;
  }
  return result;
}

__CFString *MX_RunningBoardServices_CopyAssertionReasonsStringForPID(uint64_t a1)
{
  void *v1;
  __CFString *v2;

  v1 = MX_RunningBoardServices_CopyAssertionReasonsForPID(a1);
  if ((unint64_t)objc_msgSend(v1, "count") >= 2)
    v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v1), "allObjects");
  if (objc_msgSend(v1, "count"))
    v2 = (__CFString *)objc_msgSend(v1, "componentsJoinedByString:", CFSTR(","));
  else
    v2 = &stru_1E30A1A48;
  return v2;
}

void *MX_RunningBoardServices_CopyAssertionReasonsForPID(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "currentState"), "assertions");
  v2 = (void *)objc_msgSend(v1, "count");
  if (v2)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v2);
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v9;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v1);
          objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "reason")));
        }
        while (v4 != v6);
        v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v4);
    }
  }
  return v2;
}

void routingSessionManager_availableAudioRoutesChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef v4;
  void *v5;
  const void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = routingSessionManager_copyEligibleInEarHeadphones(*(_QWORD *)(DerivedStorage + 8));
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v4);
  if ((objc_msgSend(v5, "isEqualToSet:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", *(_QWORD *)(DerivedStorage + 112))) & 1) == 0)
  {
    v6 = *(const void **)(DerivedStorage + 112);
    *(_QWORD *)(DerivedStorage + 112) = v4;
    if (v4)
      CFRetain(v4);
    if (v6)
      CFRelease(v6);
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    routingSessionManager_updateSessionFromLatestInEarHeadphones(a2);
  }
  if (v4)
    CFRelease(v4);
}

CFMutableArrayRef routingSessionManager_copyEligibleInEarHeadphones(uint64_t a1)
{
  uint64_t v2;
  CFMutableArrayRef Mutable;
  unsigned int (*v4)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex i;
  CFIndex Count;
  CFArrayRef theArray;
  Boolean keyExistsAndHasValidFormat;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  keyExistsAndHasValidFormat = 0;
  CFPreferencesGetAppBooleanValue(CFSTR("RequireSmartRoutingToSuppressRoutePredictionsWithInEarHeadphones"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  theArray = 0;
  v4 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (v4 && !v4(a1, CFSTR("availableRouteDescriptors"), v2, &theArray))
  {
    for (i = 0; ; ++i)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
        break;
      CFArrayGetValueAtIndex(theArray, i);
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  if (theArray)
    CFRelease(theArray);
  return Mutable;
}

void sub_193653588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void discoverer_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *SharedQueue;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3DE8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();

  SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
  MXDispatchAsync((uint64_t)"discoverer_Finalize", (uint64_t)"FigRouteDiscoverer.m", 131, 0, 0, SharedQueue, (uint64_t)&__block_literal_global_19);
}

uint64_t HandleRouteDiscovererRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  value = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294949956;
  return v6;
}

uint64_t FigRouteDiscovererGetTypeID()
{
  if (FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce != -1)
    dispatch_once(&FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce, &__block_literal_global_6);
  return CMBaseClassGetCFTypeID();
}

uint64_t discoverer_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  CFTypeID v8;
  int v9;
  unsigned int v10;
  CFTypeID v11;
  const void *v12;
  void *v13;
  CFTypeID v14;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  const void *v18;
  NSObject *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  NSObject *SharedQueue;
  _QWORD v25[9];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _OWORD buffer[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_36;
  v7 = (_QWORD *)DerivedStorage;
  if (!DerivedStorage)
  {
    v20 = v27;
    v21 = -17346;
    goto LABEL_37;
  }
  if (!CFEqual(a2, CFSTR("clientPID")))
  {
    if (CFEqual(a2, CFSTR("clientName")))
    {
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 == CFStringGetTypeID())
        {
          v12 = (const void *)v7[2];
          if (v12)
          {
            CFRelease(v12);
            v7[2] = 0;
          }
          v13 = (void *)CFRetain(a3);
          goto LABEL_23;
        }
      }
    }
    else if (CFEqual(a2, CFSTR("audioSessionID")))
    {
      if (!a3)
      {
        *((_DWORD *)v7 + 2) = 0;
        goto LABEL_38;
      }
      v14 = CFGetTypeID(a3);
      if (v14 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 1);
        goto LABEL_38;
      }
    }
    else if (CFEqual(a2, CFSTR("OnBehalfOf")))
    {
      if (a3)
      {
        v15 = CFGetTypeID(a3);
        if (v15 == CFDictionaryGetTypeID())
        {
          v16 = (const void *)v7[4];
          v7[4] = a3;
          CFRetain(a3);
          if (v16)
            CFRelease(v16);
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("BluetoothRoutesOnly")))
      {
        SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __discoverer_SetProperty_block_invoke_2;
        v25[3] = &unk_1E30995C8;
        v25[6] = a2;
        v25[7] = a1;
        v25[8] = a3;
        v25[4] = &v26;
        v25[5] = v7;
        MXDispatchSync((uint64_t)"discoverer_SetProperty", (uint64_t)"FigRouteDiscoverer.m", 485, 0, 0, SharedQueue, (uint64_t)v25);
        goto LABEL_38;
      }
      if (a3)
      {
        v17 = CFGetTypeID(a3);
        if (v17 == CFBooleanGetTypeID())
        {
          v18 = (const void *)v7[3];
          if (v18)
          {
            CFRelease(v18);
            v7[3] = 0;
          }
          v7[3] = CFRetain(a3);
          v19 = FigRouteDiscoveryManagerGetSharedQueue();
          MXDispatchAsync((uint64_t)"discoverer_SetProperty", (uint64_t)"FigRouteDiscoverer.m", 460, 0, 0, v19, (uint64_t)&__block_literal_global_33_0);
          goto LABEL_38;
        }
      }
    }
    goto LABEL_36;
  }
  if (!a3)
    goto LABEL_38;
  v8 = CFGetTypeID(a3);
  if (v8 != CFNumberGetTypeID())
  {
LABEL_36:
    v20 = v27;
    v21 = -17340;
LABEL_37:
    *((_DWORD *)v20 + 6) = v21;
    goto LABEL_38;
  }
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)v7 + 12);
  memset(buffer, 0, sizeof(buffer));
  v9 = *((_DWORD *)v7 + 3);
  if (v9 < 1)
  {
    v10 = 0;
    goto LABEL_20;
  }
  v10 = proc_name(v9, buffer, 0x20u);
  if ((v10 & 0x80000000) == 0)
LABEL_20:
    *((_BYTE *)buffer + v10) = 0;
  if (!v7[2])
  {
    v13 = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)buffer, 0x8000100u);
LABEL_23:
    v7[2] = v13;
  }
LABEL_38:
  v22 = *((unsigned int *)v27 + 6);
  _Block_object_dispose(&v26, 8);
  return v22;
}

void sub_193654030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscovererCreate(int a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  const __CFAllocator *v3;
  void *Value;
  void *v7;
  CFTypeID v8;
  uint64_t v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  const __CFUUID *v13;
  CFStringRef v14;
  uint64_t DerivedStorage;
  CFTypeRef v16;
  NSObject *SharedQueue;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __CFString *v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v25;
  _QWORD v26[7];
  os_log_type_t type;
  unsigned int v28;
  unsigned int valuePtr;
  CFTypeRef cf;
  int v31;
  const char *v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  CFStringRef v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = 0;
  if (!theDict)
    goto LABEL_33;
  Value = (void *)CFDictionaryGetValue(theDict, CFSTR("discovererType"));
  if (!Value)
    goto LABEL_33;
  v7 = Value;
  v8 = CFGetTypeID(Value);
  if (v8 != CFNumberGetTypeID())
    goto LABEL_33;
  if (objc_msgSend(v7, "intValue") == 8 && !MX_FeatureFlags_IsSystemInputPickerEnabled())
  {
    v28 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v25 = 4294949955;
    goto LABEL_30;
  }
  CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 8)
    goto LABEL_33;
  FigRouteDiscovererGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v25 = v9;
    goto LABEL_30;
  }
  v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("audioSessionID"));
  v11 = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)8);
      goto LABEL_11;
    }
LABEL_33:
    v25 = 4294949956;
    goto LABEL_30;
  }
LABEL_11:
  v13 = CFUUIDCreate(v3);
  v14 = CFUUIDCreateString(v3, v13);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = CFRetain(CFSTR("DiscoveryMode_None"));
  v16 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  if (*MEMORY[0x1E0C9AE40])
    v16 = CFRetain(v16);
  *(_QWORD *)(DerivedStorage + 24) = v16;
  *(_DWORD *)(DerivedStorage + 40) = valuePtr;
  *(_QWORD *)(DerivedStorage + 48) = 0;
  *(_QWORD *)(DerivedStorage + 56) = CFRetain(v14);
  *(_QWORD *)(DerivedStorage + 64) = FigReentrantMutexCreate();
  *(_BYTE *)(DerivedStorage + 72) = 0;
  *(_QWORD *)(DerivedStorage + 32) = 0;
  *(_QWORD *)(DerivedStorage + 88) = objc_alloc_init(MEMORY[0x1E0C99D20]);
  *(_QWORD *)(DerivedStorage + 80) = objc_alloc_init(MEMORY[0x1E0C99D20]);
  SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __FigRouteDiscovererCreate_block_invoke;
  v26[3] = &__block_descriptor_56_e5_v8__0l;
  v26[4] = cf;
  v26[5] = DerivedStorage;
  v26[6] = v11;
  MXDispatchSync((uint64_t)"FigRouteDiscovererCreate", (uint64_t)"FigRouteDiscoverer.m", 718, 0, 0, SharedQueue, (uint64_t)v26);
  if (dword_1EE2B3DE8)
  {
    v28 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v19 = v28;
    if (os_log_type_enabled(v18, type))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if (v20)
    {
      v21 = *(int *)(DerivedStorage + 40);
      if (v21 > 8)
        v22 = 0;
      else
        v22 = off_1E309C828[v21];
      v31 = 136315651;
      v32 = "FigRouteDiscovererCreate";
      v33 = 2114;
      v34 = v22;
      v35 = 2113;
      v36 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *a3 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  v25 = 0;
LABEL_30:
  if (cf)
    CFRelease(cf);
  return v25;
}

uint64_t FigRouteDiscovererXPCRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  uint64_t Internal;
  uint64_t v7;
  NSObject *v8;
  uint64_t uint64;
  NSObject *v11;
  NSObject *v12;

  if (a2 && a3)
  {
    if (dword_1ECEDA800)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (figRouteDiscovererRemoteXPC_EnsureClientEstablished_onceToken != -1)
      dispatch_once(&figRouteDiscovererRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_31);
    Internal = figRouteDiscovererRemoteXPC_EnsureClientEstablished_err;
    if (!figRouteDiscovererRemoteXPC_EnsureClientEstablished_err)
    {
      v7 = FigXPCCreateBasicMessage();
      if ((_DWORD)v7
        || (v7 = FigXPCMessageSetCFDictionary(), (_DWORD)v7)
        || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
      {
        Internal = v7;
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
LABEL_14:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_15;
      }
      uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
      if (!uint64)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        Internal = 0xFFFFFFFFLL;
        goto LABEL_15;
      }
      Internal = remoteXPCRouteDiscoverer_CreateInternal(uint64, a3);
      if (!(_DWORD)Internal)
      {
LABEL_15:
        FigXPCRelease();
        FigXPCRelease();
        return Internal;
      }
    }
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_14;
  }
  v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954516;
}

uint64_t remoteXPCRouteDiscoverer_CreateInternal(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  NSObject *v6;
  dispatch_queue_t v7;

  FigRouteDiscovererGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v7 = dispatch_queue_create("com.apple.coremedia.remoteroutediscoverer.cache", v6);
    *(_QWORD *)(DerivedStorage + 16) = v7;
    if (v7)
    {
      result = FigEndpointRPCCacheCreate();
      if (!(_DWORD)result)
      {
        *(_QWORD *)(DerivedStorage + 8) = a1;
        FigXPCRemoteClientAssociateObject();
        result = 0;
      }
    }
    else
    {
      result = FigSignalErrorAt();
    }
  }
  *a2 = 0;
  return result;
}

uint64_t FigRouteDiscovererGetClassID()
{
  if (FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce != -1)
    dispatch_once(&FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce, &__block_literal_global_6);
  return sFigRouteDiscovererClassID;
}

void CMSMNotificationUtility_PostPiPIsPossibleDidChange_f(void *a1)
{
  CFDictionaryRef BooleanPayload;

  BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(CFSTR("PiPIsPossibleDidChange_PiPPossible"), objc_msgSend(a1, "isPiPPossible"));
  CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("PiPIsPossibleDidChange"));
  if (BooleanPayload)
    CFRelease(BooleanPayload);

}

void CMSMNotificationUtility_PostSessionIsActiveDidChange(void *a1)
{
  CFDictionaryRef BooleanPayload;
  CFDictionaryRef v2;

  BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(CFSTR("CMSessionIsActive"), objc_msgSend(a1, "isActive"));
  if (BooleanPayload)
  {
    v2 = BooleanPayload;
    CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("CMSessionIsActiveDidChange"));
    CFRelease(v2);
  }

}

CFDictionaryRef CMSMNotificationUtility_CreateBooleanPayload(void *a1, int a2)
{
  void **v2;
  void *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  BOOL v6;
  CFIndex v7;
  void *v8;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (void **)MEMORY[0x1E0C9AE40];
  if (a2)
    v2 = (void **)MEMORY[0x1E0C9AE50];
  v3 = *v2;
  v4 = v3 != 0;
  v5 = a1 != 0;
  v7 = v5 & v4;
  v6 = !v5 || !v4;
  if (v5 && v4)
    v8 = a1;
  else
    v8 = 0;
  if (v6)
    v3 = 0;
  values = v3;
  keys[0] = v8;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, v7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

void CMSMNotificationUtility_PostVoicePromptStyleDidChange()
{
  __CFString *VoicePromptStyle;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v2;
  id v3;
  NSObject *v4;
  _QWORD v5[5];
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  VoicePromptStyle = CMSMUtility_GetVoicePromptStyle();
  if (VoicePromptStyle != (__CFString *)qword_1EE2B3CA8)
  {
    if (dword_1EE2B3F38)
    {
      v7 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", VoicePromptStyle, CFSTR("VoicePromptStyle"), 0);
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("VoicePromptStyleDidChange"), v2, 0);
    v3 = v2;
    v4 = MXGetNotificationSenderQueue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __CMSMNotificationUtility_PostVoicePromptStyleDidChange_block_invoke;
    v5[3] = &unk_1E3099900;
    v5[4] = v2;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVoicePromptStyleDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1045, 0, 0, v4, (uint64_t)v5);
  }
  qword_1EE2B3CA8 = (uint64_t)VoicePromptStyle;
}

uint64_t cmsBeginInterruptionGuts(void *a1, void *a2, char a3)
{
  __objc2_class **p_superclass;
  unsigned __int16 v7;
  _BOOL8 v8;
  int v9;
  uint64_t UpTimeNanoseconds;
  uint64_t v11;
  int IsSiriRecording;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  NSPointerArray *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BOOL8 IsRecordingCategory;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  const __CFAllocator *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, __CFString *, const __CFAllocator *, uint64_t, uint64_t, _QWORD, os_log_type_t *);
  id v60;
  int v61;
  MXSessionManager *v62;
  MXSessionManager *v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  NSObject *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  int v74;
  __CFArray *v75;
  NSPointerArray *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t j;
  void *v87;
  int v88;
  _BYTE *v89;
  int v90;
  NSPointerArray *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t k;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  void *v99;
  int v100;
  NSString *v101;
  _BOOL4 v102;
  const __CFAllocator *v103;
  CFNumberRef v104;
  NSObject *v105;
  _BYTE *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  const char *v114;
  int v115;
  const __CFArray *v116;
  _BOOL4 v117;
  const __CFString *v118;
  const void *v119;
  const void *v120;
  _BOOL8 v121;
  const char *v122;
  __CFArray *v123;
  int v124;
  NSObject *v125;
  unsigned int v126;
  unsigned int v127;
  NSObject *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  MXDuckingSource *v134;
  uint64_t v135;
  double v136;
  double v137;
  MXDuckingSource *v138;
  MXSessionManager *v139;
  id *v140;
  id v141;
  const __CFArray *v142;
  const __CFArray *v143;
  int v144;
  NSObject *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  char v149;
  os_log_type_t *p_valuePtr;
  uint64_t v152;
  const __CFAllocator *allocator;
  int v154;
  _BOOL4 v155;
  __CFArray *v156;
  char v157;
  void *v158;
  uint64_t v159;
  NSDictionary *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  _BOOL4 v164;
  uint64_t v165;
  unsigned int v166;
  __CFArray *v167;
  CFNumberRef cf;
  void *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  int v182;
  int v183;
  BOOL v184;
  __int16 v185;
  os_log_type_t v186[11];
  os_log_type_t type;
  unsigned int v188;
  _BYTE v189[128];
  _BYTE v190[512];
  _BYTE v191[128];
  os_log_type_t v192[128];
  os_log_type_t v193[4];
  const char *v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  const char *v198;
  __int16 v199;
  const char *v200;
  __int16 v201;
  int v202;
  _OWORD v203[4];
  int valuePtr;
  const char *v205;
  __int16 v206;
  const char *v207;
  __int16 v208;
  _BYTE v209[14];
  __int16 v210;
  void *v211;
  __int16 v212;
  int v213;
  __int16 v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  void *v219;
  __int16 v220;
  int v221;
  __int16 v222;
  uint64_t v223;
  __int16 v224;
  const char *v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  p_superclass = MXSession.superclass;
  v155 = -[MXSessionManager areBothBudsInEarForA2DPPort](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "areBothBudsInEarForA2DPPort");
  v185 = 0;
  v184 = 0;
  v157 = objc_msgSend(a1, "currentlyControllingFlags");
  v154 = objc_msgSend(a1, "currentlyControllingFlags");
  v7 = objc_msgSend(a1, "hwControlFlags");
  v166 = objc_msgSend(a1, "hwControlFlags");
  v183 = 0;
  v182 = 0;
  v156 = CMSMUtility_CopyCurrentRouteTypes();
  MEMORY[0x1940352BC](gCMSM);
  v8 = (a3 & 8) != 0 || objc_msgSend(a1, "siriInputDeviceUUID") != 0;
  v158 = a2;
  objc_msgSend(a1, "setDontTakeOverHardware:", v8);
  if (objc_msgSend(a1, "hasAudioCategory:", CFSTR("Alarm"))
    && CMSMDeviceState_ItsAHomePod())
  {
    CMSUtility_UpdateAlarmBehaviorOnAccessory(a1);
  }
  CMSUtility_InterpretInterruptionStyle(a1, (BOOL *)&v185 + 1, (BOOL *)&v185, &v184);
  v9 = HIBYTE(v185);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v11 = objc_msgSend(a1, "timestampWhenMostRecentlyInterrupted");
  IsSiriRecording = CMSMUtility_IsSiriRecording();
  v13 = -[MXSessionManager isSessionWithAudioCategoryActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioCategoryActive:", CFSTR("Alarm"));
  if (-[MXSessionManager wombatEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "wombatEnabled")&& (objc_msgSend(a1, "prefersToPlayDuringWombat") & 1) == 0)
  {
    if (dword_1EE2B3F38)
    {
      v188 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v26 = v188;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if (v27)
      {
        v28 = objc_msgSend(a1, "clientName");
        *(_DWORD *)v193 = 136315394;
        v194 = "cmsShouldSkipBeginInterruption";
        v195 = 2114;
        v196 = v28;
        LODWORD(v152) = 22;
        p_valuePtr = v193;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (CMSMDeviceState_ItsAniPad())
    {
      if (CMSUtility_HasPhoneCallBehaviour(a1))
        IsRecordingCategory = 1;
      else
        IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)objc_msgSend(a1, "audioCategory"));
      -[MXSessionManager postDisallowedActivationDueToContinuityCaptureNotification:videoPlaybackWasIntended:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "postDisallowedActivationDueToContinuityCaptureNotification:videoPlaybackWasIntended:", IsRecordingCategory, objc_msgSend((id)objc_msgSend(a1, "audioMode", p_valuePtr, v152), "isEqualToString:", CFSTR("MoviePlayback")));
    }
LABEL_92:
    v39 = 4294951610;
LABEL_335:
    v143 = 0;
    v149 = 0;
    goto LABEL_339;
  }
  if (-[MXSessionManager isSessionWithAudioModeActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioModeActive:", CFSTR("Enrollment"))&& !objc_msgSend(a1, "clientPriority")&& (objc_msgSend(a1, "hasAudioMode:", CFSTR("Enrollment")) & 1) == 0)
  {
    if (!dword_1EE2B3F38)
    {
      v39 = 4294951610;
      p_superclass = (__objc2_class **)(MXSession + 8);
      goto LABEL_335;
    }
    v188 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v47 = v188;
    if (os_log_type_enabled(v46, type))
      v48 = v47;
    else
      v48 = v47 & 0xFFFFFFFE;
    if (v48)
    {
      v49 = objc_msgSend(a1, "clientName");
      *(_DWORD *)v193 = 136315394;
      v194 = "cmsShouldSkipBeginInterruption";
      v195 = 2114;
      v196 = v49;
      LODWORD(v152) = 22;
      p_valuePtr = v193;
      _os_log_send_and_compose_impl();
    }
    p_superclass = (__objc2_class **)(MXSession + 8);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_92;
  }
  if ((float)((float)(UpTimeNanoseconds - v11) / 1000000000.0) <= 1.5)
  {
    v14 = objc_msgSend(a1, "timestampWhenMostRecentResumableEndInterruptionWasSent");
    if (v14 < objc_msgSend(a1, "timestampWhenMostRecentlyInterrupted"))
    {
      v15 = objc_msgSend(a1, "clientPriority");
      v16 = IsSiriRecording || v13;
      if (!v15 && v16)
      {
        p_superclass = (__objc2_class **)(MXSession + 8);
        if (dword_1EE2B3F38)
        {
          v188 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v18 = v188;
          if (os_log_type_enabled(v17, type))
            v19 = v18;
          else
            v19 = v18 & 0xFFFFFFFE;
          if (v19)
          {
            v20 = objc_msgSend(a1, "clientName");
            *(_DWORD *)v193 = 136315394;
            v194 = "cmsShouldSkipBeginInterruption";
            v195 = 2114;
            v196 = v20;
            LODWORD(v152) = 22;
            p_valuePtr = v193;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          p_superclass = (__objc2_class **)(MXSession + 8);
        }
        CMSUtility_SendSessionReinterruptionDisallowedEventToAudioStatistics(a1);
LABEL_162:
        v39 = 4294954311;
        goto LABEL_335;
      }
    }
  }
  p_superclass = MXSession.superclass;
  if (v9)
  {
    v21 = v158;
    if (v158)
    {
      if (!CMSUtility_IsAllowedToStopThisSession(a1, v158))
      {
        if (dword_1EE2B3F38)
        {
          v188 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v23 = v188;
          if (os_log_type_enabled(v22, type))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if (!v24)
            goto LABEL_143;
          goto LABEL_142;
        }
LABEL_144:
        v39 = 4294954313;
        goto LABEL_335;
      }
    }
    else if (!CMSUtility_IsAllowedToStopOthers(a1))
    {
      if (dword_1EE2B3F38)
      {
        v188 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v52 = v188;
        if (os_log_type_enabled(v51, type))
          v53 = v52;
        else
          v53 = v52 & 0xFFFFFFFE;
        if (v53)
        {
          v54 = objc_msgSend(a1, "clientName");
          *(_DWORD *)v193 = 136315394;
          v194 = "cmsShouldSkipBeginInterruption";
          v195 = 2114;
          v196 = v54;
          LODWORD(v152) = 22;
          p_valuePtr = v193;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_162;
    }
  }
  else
  {
    v21 = v158;
    if ((objc_msgSend(a1, "isTheAssistant") & 1) == 0)
    {
      if (CMSMUtility_IsSiriRecording())
      {
        if (!CMSMUtility_DoesSiriAllowMixableAudioWhileRecording()
          && (objc_msgSend(a1, "doesntActuallyPlayAudio") & 1) == 0)
        {
          objc_msgSend(a1, "audioCategory");
          if (!FigCFEqual() && !CMSMDeviceState_ItsAHomePod())
          {
            if (dword_1EE2B3F38)
            {
              v188 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v30 = v188;
              if (os_log_type_enabled(v29, type))
                v31 = v30;
              else
                v31 = v30 & 0xFFFFFFFE;
              if (v31)
              {
                v32 = objc_msgSend(a1, "clientName");
                *(_DWORD *)v193 = 136315394;
                v194 = "cmsShouldSkipBeginInterruption";
                v195 = 2114;
                v196 = v32;
                LODWORD(v152) = 22;
                p_valuePtr = v193;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v39 = 4294954307;
            goto LABEL_335;
          }
        }
      }
    }
  }
  v169 = a1;
  if (!CMSMVAUtility_IsAdditiveRoutingEnabled()
    || !-[MXSessionManager sessionUtilizesIndependentRecordingOnly:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "sessionUtilizesIndependentRecordingOnly:", a1))
  {
    if (v21)
    {
      if (!CMSUtility_HasHigherPriorityToInterrupt(a1, v21, v7))
      {
        if (!dword_1EE2B3F38)
          goto LABEL_144;
        v188 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v34 = v188;
        if (os_log_type_enabled(v33, type))
          v35 = v34;
        else
          v35 = v34 & 0xFFFFFFFE;
        if (!v35)
          goto LABEL_143;
LABEL_142:
        v67 = objc_msgSend(a1, "clientName");
        *(_DWORD *)v193 = 136315394;
        v194 = "cmsShouldSkipBeginInterruption";
        v195 = 2114;
        v196 = v67;
        LODWORD(v152) = 22;
        p_valuePtr = v193;
        _os_log_send_and_compose_impl();
LABEL_143:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_144;
      }
    }
    else
    {
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
      memset(v203, 0, sizeof(v203));
      v36 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v37 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", v203, &valuePtr, 16);
      if (v37)
      {
        v38 = v37;
        v39 = 0;
        v40 = **(_QWORD **)&v203[1];
        do
        {
          for (i = 0; i != v38; ++i)
          {
            if (**(_QWORD **)&v203[1] != v40)
              objc_enumerationMutation(v36);
            if (!CMSUtility_HasHigherPriorityToInterrupt(a1, *(void **)(*((_QWORD *)&v203[0] + 1) + 8 * i), v7))
            {
              if (dword_1EE2B3F38)
              {
                v188 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v43 = v188;
                if (os_log_type_enabled(v42, type))
                  v44 = v43;
                else
                  v44 = v43 & 0xFFFFFFFE;
                if (v44)
                {
                  v45 = objc_msgSend(v169, "clientName");
                  *(_DWORD *)v193 = 136315394;
                  v194 = "cmsShouldSkipBeginInterruption";
                  v195 = 2114;
                  v196 = v45;
                  LODWORD(v152) = 22;
                  p_valuePtr = v193;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v39 = 4294954313;
                a1 = v169;
              }
              else
              {
                v39 = 4294954313;
              }
            }
          }
          v38 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", v203, &valuePtr, 16);
        }
        while (v38);
      }
      else
      {
        v39 = 0;
      }
      p_superclass = MXSession.superclass;
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", p_valuePtr, v152), "mxCoreSessionListEndIteration");
      v21 = v158;
      if ((_DWORD)v39)
        goto LABEL_335;
    }
  }
  *(_QWORD *)v186 = 0;
  v55 = qword_1EE2B3BE0;
  v56 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v57 = objc_msgSend(a1, "audioCategory");
  v58 = objc_msgSend(a1, "audioMode");
  v59 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t, uint64_t, _QWORD, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
  if (v59)
    v59(v55, CFSTR("VAEM_InputDeviceIsAvailableForRouteConfiguration"), v56, v57, v58, 0, v186);
  if (objc_msgSend(a1, "hasInput")
    && *(_QWORD *)v186 == *MEMORY[0x1E0C9AE40]
    && (objc_msgSend(a1, "hwControlFlags") & 2) != 0)
  {
    if (dword_1EE2B3F38)
    {
      v188 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v69 = v188;
      if (os_log_type_enabled(v68, type))
        v70 = v69;
      else
        v70 = v69 & 0xFFFFFFFE;
      if (v70)
      {
        v71 = objc_msgSend(a1, "clientName");
        if (objc_msgSend(a1, "hasInput"))
          v72 = "YES";
        else
          v72 = "NO";
        if (*(_QWORD *)v186 == *MEMORY[0x1E0C9AE50])
          v73 = "YES";
        else
          v73 = "NO";
        v74 = objc_msgSend(a1, "hwControlFlags");
        *(_DWORD *)v193 = 136316162;
        v194 = "cmsShouldSkipBeginInterruption";
        v195 = 2114;
        v196 = v71;
        v197 = 2082;
        v198 = v72;
        v199 = 2082;
        v200 = v73;
        p_superclass = (__objc2_class **)(MXSession + 8);
        v201 = 1024;
        v202 = v74;
        LODWORD(v152) = 48;
        p_valuePtr = v193;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v39 = 4294954310;
    goto LABEL_335;
  }
  if (CMSMDeviceState_ItsAHomePod())
  {
    if (CMSMUtility_IsPhoneCallActive() && (objc_msgSend(a1, "hasPhoneCallBehavior") & 1) == 0)
    {
      objc_msgSend(a1, "audioCategory");
      if (FigCFEqual()
        || (objc_msgSend(a1, "audioCategory"), FigCFEqual())
        || (objc_msgSend(a1, "audioCategory"), FigCFEqual())
        || (objc_msgSend(a1, "audioCategory"), FigCFEqual())
        || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory")))
      {
        if (!dword_1EE2B3F38)
          goto LABEL_144;
        v188 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v65 = v188;
        if (os_log_type_enabled(v64, type))
          v66 = v65;
        else
          v66 = v65 & 0xFFFFFFFE;
        if (!v66)
          goto LABEL_143;
        goto LABEL_142;
      }
    }
  }
  if (CMSUtility_IsRemoteInterruptionRequired(a1))
  {
    v60 = CMSM_IDSClient_NotifyRemote_InterruptionStartAndCopyIdentifier(a1);
    objc_msgSend(a1, "setWaitingForRemoteInterruptionDoneIdentifier:", v60);
    objc_msgSend(a1, "setTriggeredRemoteInterruption:", 1);
    objc_msgSend(a1, "setNeedToEndInterruption:", 1);

  }
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
  {
    if (qword_1EE2B3CD8)
    {
      if (!byte_1EE2B3CE0 && CMSUtility_PlaysToCarMainAudio(a1) && (objc_msgSend(a1, "isCarSession") & 1) == 0)
      {
        v61 = cmsmRequestCarMainAudioForSession(a1);
        if (a1)
        {
          if (v61)
          {
            if (CMSMDeviceState_ScreenIsBlanked())
            {
              if (!CMSMDeviceState_ScreenIsBlankedByProximitySensor())
              {
                objc_msgSend(a1, "audioCategory");
                if (FigCFEqual() || (objc_msgSend(a1, "audioCategory"), FigCFEqual()))
                {
                  if (!byte_1EE2B3CE0)
                    objc_msgSend(a1, "setWillSetScreenDarkModeOnVAD:", 1);
                }
              }
            }
            if (-[MXSessionManager starkMainAudioIsOwnedByiOSButBorrowedByCar](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "starkMainAudioIsOwnedByiOSButBorrowedByCar"))
            {
              objc_msgSend((id)qword_1EE2B3CD0, "setHandsOverInterruptionsToInterruptor:", 1);
            }
            if (CMSUtility_GetIsActive((void *)qword_1EE2B3CD0))
              cmsSetIsActive((void *)qword_1EE2B3CD0, 0, 0);
            if (CMSUtility_ShouldSessionToInterruptHandOverInterruptions((void *)qword_1EE2B3CD0, a1))
              CMSMUtility_HandOverInterruptionsToSession((void *)qword_1EE2B3CD0, a1);
            v62 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
            if (-[MXSessionManager shouldResetWaitingToResume:currentSession:](v62, "shouldResetWaitingToResume:currentSession:", qword_1EE2B3CD0, a1))
            {
              v63 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
              -[MXSessionManager resetWaitingToResume:](v63, "resetWaitingToResume:", qword_1EE2B3CD0);
            }
          }
          else if ((dword_1EE2B3F38 & 1) != 0)
          {
            v75 = CMSMUtility_CopyCurrentRouteTypes();
            if (v75)
              CFRelease(v75);
          }
        }
      }
    }
  }
  if (!v21 || v21 == a1 || (objc_msgSend(v21, "isActive") & 1) == 0)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v180 = 0u;
    v181 = 0u;
    v178 = 0u;
    v179 = 0u;
    v76 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v77 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v76, "countByEnumeratingWithState:objects:count:", &v178, v192, 16);
    if (v77)
    {
      v78 = v77;
      v79 = *(_QWORD *)v179;
LABEL_171:
      v80 = 0;
      while (1)
      {
        if (*(_QWORD *)v179 != v79)
          objc_enumerationMutation(v76);
        v81 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * v80);
        if (v81 != a1 && (objc_msgSend(v81, "isActive") & 1) != 0)
          break;
        if (v78 == ++v80)
        {
          v78 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v76, "countByEnumeratingWithState:objects:count:", &v178, v192, 16);
          if (!v78)
            goto LABEL_178;
          goto LABEL_171;
        }
      }
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
      v21 = v158;
    }
    else
    {
LABEL_178:
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
      if ((objc_msgSend(a1, "dontTakeOverHardware") & 1) == 0
        && CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
        && objc_msgSend(a1, "waitingToSendEndInterruptionToSpokenAudioApp"))
      {
        objc_msgSend(a1, "setDontTakeOverHardware:", 1);
        v82 = -[MXSessionManager copyInterruptedSessions:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyInterruptedSessions:", a1);
        v174 = 0u;
        v175 = 0u;
        v176 = 0u;
        v177 = 0u;
        v83 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v174, v191, 16);
        if (v83)
        {
          v84 = v83;
          v85 = *(_QWORD *)v175;
          while (2)
          {
            for (j = 0; j != v84; ++j)
            {
              if (*(_QWORD *)v175 != v85)
                objc_enumerationMutation(v82);
              v87 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * j);
              if (CMSUtility_IsDoingSpokenAudio(v87))
              {
                CMSUtility_GetCurrentAudioDestination(v87);
                CMSUtility_GetCurrentAudioDestination(a1);
                if (!FigCFEqual())
                {
                  objc_msgSend(a1, "setDontTakeOverHardware:", 0);
                  goto LABEL_195;
                }
              }
            }
            v84 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v174, v191, 16);
            if (v84)
              continue;
            break;
          }
        }
LABEL_195:

        p_superclass = MXSession.superclass;
      }
      cmsSetIsActive(a1, 1, 0);
      v21 = v158;
      if ((objc_msgSend(a1, "dontTakeOverHardware") & 1) == 0)
        cmsTakeControl(a1, HIWORD(v166) | v7);
      if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
      {
        v39 = 0;
        goto LABEL_335;
      }
    }
  }
  objc_msgSend(a1, "audioCategory");
  allocator = v56;
  v88 = FigCFEqual()
     && !CMSMDeviceState_RingerIsOn(1)
     && CMSMUtility_GetNumberOfCurrentOutputPorts() == 0;
  if (!HIBYTE(v185)
    && (v88 & 1) == 0
    && !CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
    && !objc_msgSend(a1, "isTheAssistant"))
  {
LABEL_209:
    v90 = 1;
    goto LABEL_306;
  }
  if (-[NSPointerArray count](-[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList"), "count") < 0x21)
  {
    v89 = v190;
  }
  else
  {
    v89 = CFAllocatorAllocate(allocator, 16* -[NSPointerArray count](-[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList"), "count"), 0);
    if (!v89)
      goto LABEL_209;
  }
  if (v21)
  {
    cmsAddToListOfSessionsToInterruptIfNecessary(a1, v21, v88, 1, (uint64_t)v89, &v183, &v182);
  }
  else
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v91 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v92 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v91, "countByEnumeratingWithState:objects:count:", &v170, v189, 16);
    if (v92)
    {
      v93 = v92;
      v94 = *(_QWORD *)v171;
      do
      {
        for (k = 0; k != v93; ++k)
        {
          if (*(_QWORD *)v171 != v94)
            objc_enumerationMutation(v91);
          cmsAddToListOfSessionsToInterruptIfNecessary(a1, *(void **)(*((_QWORD *)&v170 + 1) + 8 * k), v88, 2, (uint64_t)v89, &v183, &v182);
        }
        v93 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v91, "countByEnumeratingWithState:objects:count:", &v170, v189, 16);
      }
      while (v93);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  }
  MEMORY[0x1940352C8](gCMSM);
  v96 = v183;
  if (v183 <= 0)
  {
    CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
    goto LABEL_303;
  }
  v97 = 0;
  v98 = v89 + 9;
  v160 = (NSDictionary *)*MEMORY[0x1E0C9AE40];
  v159 = v183;
  do
  {
    v99 = *(void **)(v98 - 9);
    LODWORD(v165) = *v98;
    HIDWORD(v165) = *(v98 - 1);
    v100 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
    v101 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
    if (objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue") == v100
      || (objc_msgSend((id)objc_msgSend(a1, "displayID"), "isEqualToString:", v101) & 1) != 0
      || CMSUtility_IsSessionTheDefaultMusicApp(a1))
    {
      v102 = 1;
LABEL_227:
      v164 = v102;
      goto LABEL_228;
    }
    if (CMSMUtility_IAPAppProcessIDIsUsingAccessory(objc_msgSend(a1, "displayID")))
    {
      v102 = CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1) != 0;
      goto LABEL_227;
    }
    v164 = 0;
LABEL_228:
    v167 = cmsmCopyCurrentActiveRouteTypes();
    if (objc_msgSend((id)objc_msgSend(v99, "clientPID"), "intValue") == v100
      || objc_msgSend((id)objc_msgSend(v99, "displayID"), "isEqualToString:", v101))
    {
      if (objc_msgSend(v99, "isPlaying"))
      {
        objc_msgSend(a1, "setNowPlayingAppWasStoppedOnMostRecentActivation:", 1);
        objc_msgSend(v99, "audioMode");
        if (FigCFEqual())
          objc_msgSend(a1, "setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:", 1);
      }
    }
    if (v88)
    {
      valuePtr = 0;
      v103 = CFGetAllocator(a1);
      v104 = CFNumberCreate(v103, kCFNumberFloat32Type, &valuePtr);
    }
    else
    {
      v104 = CMSUtility_CopyFadeDuration(a1, 0, 0);
    }
    cf = v104;
    v105 = MXGetSessionLog();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      v161 = v97;
      v162 = v98;
      v106 = v89;
      v107 = objc_msgSend(a1, "clientName");
      v108 = objc_msgSend(a1, "clientPriority");
      v109 = objc_msgSend(a1, "audioCategory");
      v110 = objc_msgSend(v99, "clientName");
      v111 = objc_msgSend(v99, "clientPriority");
      v112 = objc_msgSend(v99, "audioCategory");
      v113 = objc_msgSend(v99, "hasPhoneCallBehavior");
      v114 = "";
      if (v113)
      {
        v115 = objc_msgSend(v99, "isActive");
        v114 = "";
        if (v115)
          v114 = " (PHONE CALL)";
      }
      valuePtr = 136449026;
      v205 = "-CMSessionMgr-";
      v206 = 2082;
      v207 = "cmsInterruptSession";
      v208 = 1024;
      *(_DWORD *)v209 = 2921;
      *(_WORD *)&v209[4] = 2114;
      *(_QWORD *)&v209[6] = v107;
      v210 = 2048;
      v211 = v169;
      v212 = 1024;
      v213 = v108;
      v214 = 2114;
      v215 = v109;
      v216 = 2114;
      v217 = v110;
      v218 = 2048;
      v219 = v99;
      v220 = 1024;
      v221 = v111;
      v222 = 2114;
      v223 = v112;
      a1 = v169;
      v224 = 2082;
      v225 = v114;
      _os_log_impl(&dword_1935FC000, v105, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@'[%p] with priority [%d] and category '%{public}@' INTERRUPTING '%{public}@'[%p] with priority [%d] and category '%{public}@'%{public}s.", (uint8_t *)&valuePtr, 0x6Eu);
      v89 = v106;
      v96 = v159;
      v97 = v161;
      v98 = v162;
    }
    objc_msgSend(a1, "audioCategory");
    if (CMSMUtility_IsVoiceCallCategory()
      && CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(v99, "audioCategory"))
      && (objc_msgSend(v99, "audioMode"), FigCFEqual())
      || (objc_msgSend(v99, "audioCategory"), CMSMUtility_IsVoiceCallCategory())
      && CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(a1, "audioCategory"))
      && (objc_msgSend(a1, "audioMode"), FigCFEqual()))
    {
      objc_msgSend(a1, "setOverridePortsList:", 0);
      if (objc_msgSend(v99, "overridePortsList"))
        objc_msgSend(a1, "setOverridePortsList:", objc_msgSend(v99, "overridePortsList"));
    }
    objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(v99, "starkBorrowCount") + objc_msgSend(a1, "starkBorrowCount"));
    objc_msgSend(v99, "setStarkBorrowCount:", 0);
    p_superclass = MXSession.superclass;
    if (CMSUtility_ShouldSessionToInterruptHandOverInterruptions(v99, a1))
      CMSMUtility_HandOverInterruptionsToSession(v99, a1);
    if (CMSUtility_ShouldSessionToInterruptHandOverDucking(v99, a1))
    {
      v116 = CMSUtility_CopySessionsToDuck(1, 0, (const __CFArray *)a1);
      -[MXSessionManager duckSessionsForDucker:sessionsToDuck:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "duckSessionsForDucker:sessionsToDuck:", a1, v116);

    }
    objc_msgSend(v99, "setWasInterruptedWhileSuspended:", objc_msgSend(v99, "applicationState") == 2);
    objc_msgSend(v99, "setWasInterruptedWhileRecording:", objc_msgSend(v99, "isRecording"));
    objc_msgSend(v99, "setTimestampWhenMostRecentResumableEndInterruptionWasSent:", 0);
    -[MXSessionManager cancelAnyInProgressRampIfNeeded:reason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "cancelAnyInProgressRampIfNeeded:reason:", v99, 1);
    CMSUtility_ResetIsPlayingStates(v99);
    v117 = -[MXSessionManager isMixableSessionBeingInterruptedByNextRecordingClient:victim:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isMixableSessionBeingInterruptedByNextRecordingClient:victim:", a1, v99);
    v118 = (const __CFString *)objc_msgSend(a1, "clientName");
    v119 = (const void *)objc_msgSend(a1, "displayID");
    if (v117)
      v120 = &unk_1E30C1458;
    else
      v120 = 0;
    CMSUtility_PostInterruptionCommandNotification(v99, 0, v118, 0, 0, cf, v120, v119);
    objc_msgSend(v99, "setInterruptingSession:", a1);
    v121 = objc_msgSend(v99, "applicationState") == 8 && v164;
    objc_msgSend(v99, "setWasInterruptedByNowPlayingApp:", v121);
    objc_msgSend(v99, "setTimestampWhenMostRecentlyInterrupted:", FigGetUpTimeNanoseconds());
    v123 = v167;
    if (!objc_msgSend(v99, "extendBackgroundAppAssertionTimer") && objc_msgSend(v99, "playbackAssertionRef"))
      CMSMSleep_ReleasePlaybackProcessAssertion(v99);
    if (v165 || CMSUtility_IsSessionAlwaysExpectingEndInterruption(v99, v122))
    {
      objc_msgSend(v99, "setWasMutedBeforeInterruption:", objc_msgSend(v99, "userMuted"));
      MXCoreSessionSetProperty(v99, CFSTR("UserMuted"), v160, 0);
      v124 = FigEndpointCentralEntityOwnsResource(qword_1EE2B3CD8, 0x1E309F488, CFSTR("MainAudio"));
      if (CMSMUtility_IsCarPlaySessionPresent() && v124 && objc_msgSend(a1, "isCarSession"))
      {
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)v193 = 0;
          v186[0] = OS_LOG_TYPE_DEFAULT;
          v125 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v126 = *(_DWORD *)v193;
          if (os_log_type_enabled(v125, v186[0]))
            v127 = v126;
          else
            v127 = v126 & 0xFFFFFFFE;
          if (v127)
          {
            LODWORD(v203[0]) = 136315138;
            *(_QWORD *)((char *)v203 + 4) = "cmsInterruptSession";
            LODWORD(v152) = 12;
            p_valuePtr = (os_log_type_t *)v203;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v123 = v167;
        }
        objc_msgSend(v99, "setWaitingToResume:", 0, p_valuePtr, v152);
      }
      else
      {
        objc_msgSend(v99, "setWaitingToResume:", 1);
        if (CMSMUtility_IsCarPlaySessionPresent())
        {
          if (objc_msgSend(v99, "hasPhoneCallBehavior"))
          {
            -[MXSessionManager setPhoneCallBehaviorSessionShouldResumeForCarPlay:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setPhoneCallBehaviorSessionShouldResumeForCarPlay:", 1);
            if (dword_1EE2B3F38)
            {
              v163 = v98;
              *(_DWORD *)v193 = 0;
              v186[0] = OS_LOG_TYPE_DEFAULT;
              v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v129 = *(_DWORD *)v193;
              if (os_log_type_enabled(v128, v186[0]))
                v130 = v129;
              else
                v130 = v129 & 0xFFFFFFFE;
              if (v130)
              {
                v131 = objc_msgSend(v99, "clientName");
                v132 = objc_msgSend(a1, "clientName");
                LODWORD(v203[0]) = 136315650;
                *(_QWORD *)((char *)v203 + 4) = "cmsInterruptSession";
                WORD6(v203[0]) = 2114;
                *(_QWORD *)((char *)v203 + 14) = v131;
                WORD3(v203[1]) = 2114;
                *((_QWORD *)&v203[1] + 1) = v132;
                LODWORD(v152) = 32;
                p_valuePtr = (os_log_type_t *)v203;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v96 = v159;
              v98 = v163;
              v123 = v167;
            }
          }
        }
      }
      objc_msgSend(v99, "setActiveRoutesWhenInterrupted:", 0, p_valuePtr, v152);
      objc_msgSend(v99, "setActiveRoutesWhenInterrupted:", v123);
      objc_msgSend(a1, "setNeedToEndInterruption:", 1);
    }
    if ((objc_msgSend(a1, "isIDSMXCoreSession") & 1) != 0)
      v133 = 0;
    else
      v133 = objc_msgSend(a1, "isHardwareSafetySession") ^ 1;
    objc_msgSend(v99, "setDoNotResetAudioCategoryOnNextInactive:", v133);
    cmsSetIsActive(v99, 0, a1);
    if (qword_1EE2B3CD0 && objc_msgSend(v99, "duckCommandSentToCarSession"))
    {
      v134 = [MXDuckingSource alloc];
      v135 = objc_msgSend((id)objc_msgSend(v99, "ID"), "longLongValue");
      LODWORD(v136) = 0;
      LODWORD(v137) = 0;
      v138 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v134, "initWithType:ID:duckVolume:duckFadeDuration:", 2, v135, v136, v137);
      v139 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      -[MXSessionManager unduckVolume:sessionCausingUnduck:duckingSource:](v139, "unduckVolume:sessionCausingUnduck:duckingSource:", qword_1EE2B3CD0, v99, v138);

      objc_msgSend(v99, "setDuckCommandSentToCarSession:", 0);
    }
    -[MXSessionManager unduckSessionsForDucker:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckSessionsForDucker:", v99);
    CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
    if (cf)
      CFRelease(cf);
    if (v123)
      CFRelease(v123);
    ++v97;
    v98 += 16;
  }
  while (v97 < v96);
  CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
  v140 = (id *)v89;
  v21 = v158;
  do
  {

    *v140 = 0;
    v140 += 2;
    --v96;
  }
  while (v96);
LABEL_303:
  if (v89 != v190)
    CFAllocatorDeallocate(allocator, v89);
  v90 = 0;
LABEL_306:
  v141 = -[MXSessionManager copySpeechDetectSession](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySpeechDetectSession");
  if (objc_msgSend(a1, "isTheAssistant") && objc_msgSend(v141, "isActive"))
    CMSMUtility_HandOverInterruptionsToSession(v141, a1);

  if (objc_msgSend(a1, "isCarSession") && dword_1EE2B3CC8)
    vaeMakePortRoutable(dword_1EE2B3CC8, 0, 0, qword_1EE2B3CF0);
  v142 = CMSUtility_CopySessionsToDuck(v185, v21, (const __CFArray *)a1);
  v143 = v142;
  if (v142)
  {
    CFArrayGetCount(v142);
    objc_msgSend(a1, "setNeedToEndInterruption:", 1);
  }
  cmsSetIsActive(a1, 1, 0);
  if ((objc_msgSend(a1, "dontTakeOverHardware") & 1) != 0)
    v144 = 0;
  else
    v144 = cmsTryToTakeControl(a1);
  if (CMSUtility_IsSharePlayCapableMediaSession(a1)
    && CMSMUtility_IsSharePlayCapableCallSessionActive()
    && (objc_msgSend(a1, "currentlyControllingFlags") & 0x10) == 0)
  {
    CMSMUtility_SetMediaPlaybackVolumeToCurrentPhoneCallVolume();
    CMSMUtility_TransferVolumeControlFlagToSharePlayCapableMediaSession();
  }
  if ((v144 & ~v154) != 0)
    objc_msgSend(a1, "setNeedToEndInterruption:", 1);
  if (v90)
    MEMORY[0x1940352C8](gCMSM);
  if (-[MXSessionManager voiceOverSessionWantsRelativeDucking:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "voiceOverSessionWantsRelativeDucking:", a1))
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v203[0]) = 0;
      v193[0] = OS_LOG_TYPE_DEFAULT;
      v145 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v146 = v203[0];
      if (os_log_type_enabled(v145, v193[0]))
        v147 = v146;
      else
        v147 = v146 & 0xFFFFFFFE;
      if (v147)
      {
        v148 = objc_msgSend(a1, "clientName");
        valuePtr = 136315650;
        v205 = "cmsBeginInterruptionGuts";
        v206 = 2114;
        v207 = (const char *)v148;
        v208 = 2048;
        *(_QWORD *)v209 = a1;
        LODWORD(v152) = 32;
        p_valuePtr = (os_log_type_t *)&valuePtr;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", p_valuePtr, v152), "startAsyncDuckingOperation");
    -[MXSessionManager updateDuckedSessionsForVoiceOver:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDuckedSessionsForVoiceOver:", a1);
    -[MXSessionManager endAsyncDuckingOperationForSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperationForSession:", a1);
  }
  else if (v143)
  {
    -[MXSessionManager duckSessionsForDucker:sessionsToDuck:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "duckSessionsForDucker:sessionsToDuck:", a1, v143);
  }
  v39 = 0;
  v149 = 1;
LABEL_339:
  if (objc_msgSend((id)objc_msgSend(p_superclass + 104, "sharedInstance", p_valuePtr, v152), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory"))&& objc_msgSend(a1, "needToEndInterruption"))
  {
    objc_msgSend(a1, "setAreBothBudsInEarForA2DPPortBeforeInterrupting:", v155);
  }
  if (v156)
    CFRelease(v156);
  if (v143)
    CFRelease(v143);
  if ((v157 & 2) == 0 && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
  {
    if ((v149 & 1) == 0)
      MEMORY[0x1940352C8](gCMSM);
    cmsmUpdatePickableRouteDescriptionLists(1);
  }
  else if ((v149 & 1) == 0)
  {
    MEMORY[0x1940352C8](gCMSM);
  }
  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
  return v39;
}

uint64_t CMSUtility_HasHigherPriorityToInterrupt(void *a1, void *a2, int a3)
{
  unsigned int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  const __CFNumber *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD valuePtr[38];

  valuePtr[35] = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a2, "isActive"))
    return 1;
  v6 = objc_msgSend(a2, "clientPriority");
  if (v6 <= objc_msgSend(a1, "clientPriority")
    || (objc_msgSend(a2, "currentlyControllingFlags") & a3) == 0)
  {
    return 1;
  }
  if (objc_msgSend(a2, "clientPriority") == 10
    && objc_msgSend(a1, "hasAudioMode:", CFSTR("EchoCancellationInput")))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v12 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v12;
    }
    return 1;
  }
  if (dword_1EE2B3F38)
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend((id)objc_msgSend(a2, "reporterIDs", v13, v14), "count"))
  {
    valuePtr[0] = 1;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a2, "reporterIDs"), 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(a1, "displayID");
    FigCFDictionarySetValue();
    objc_msgSend(a2, "displayID");
    FigCFDictionarySetValue();
    off_1EE2B3D78(valuePtr[0], Mutable, 11, 6);
    if (Mutable)
      CFRelease(Mutable);
  }
  return 0;
}

void __cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const void *v4;
  const void *v5;

  if (FigCFEqual())
    objc_msgSend(*(id *)(a1 + 32), "updateRouteSharingPolicy:setByClient:", 3, 1);
  if (CMSUtility_IsLongFormVideoSession(*(void **)(a1 + 32)))
  {
    objc_msgSend(*(id *)(a1 + 32), "routingContextUUID");
    if (!FigCFEqual())
    {
      objc_msgSend(*(id *)(a1 + 32), "setRoutingContextUUID:", qword_1EE2B3D08);
      objc_msgSend(*(id *)(a1 + 32), "updateRouteSharingPolicy:setByClient:", 3, 1);
      cmsUpdateAudioBehavior(*(void **)(a1 + 32));
      CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(*(id *)(a1 + 32), "routingContextUUID"));
      v2 = *(id *)(a1 + 32);
      v3 = MXGetNotificationSenderQueue();
      MXDispatchAsyncFunction((uint64_t)"cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2", (uint64_t)"CMSessionManager.m", 6584, 0, 0, v3, *(_QWORD *)(a1 + 32), (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
    }
  }
  CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);

}

void CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(int a1, int a2)
{
  id v4;
  unsigned int v5;
  NSObject *v6;
  _QWORD v7[4];
  unsigned int v8;
  char v9;
  char v10;

  if (CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_onceToken != -1)
    dispatch_once(&CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_onceToken, &__block_literal_global_79);
  v4 = -[MXSessionManager copySpeechDetectSession](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySpeechDetectSession");
  if (a1)
  {
    if (a2)
      v5 = 5;
    else
      v5 = 6;
  }
  else
  {
    v5 = -[MXSessionManager currentSpeechDetectStyle:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentSpeechDetectStyle:", v4);
  }
  objc_msgSend((id)CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyleLock, "lock");
  if (CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyle != v5)
  {
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyle = v5;
    v6 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_block_invoke_2;
    v7[3] = &__block_descriptor_38_e5_v8__0l;
    v8 = v5;
    v9 = a1;
    v10 = a2;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded", (uint64_t)"CMSessionManager_NotificationUtilities.m", 333, 0, 0, v6, (uint64_t)v7);
  }
  objc_msgSend((id)CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyleLock, "unlock");

}

uint64_t vaeDoesBluetoothSupportFeature(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OSStatus PropertyData;
  UInt32 ioDataSize;
  CFTypeRef outData;
  AudioObjectPropertyAddress inAddress;
  unsigned __int8 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"fstbbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      outData = 0;
      ioDataSize = 8;
      PropertyData = AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData || !outData)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        FigCFDictionaryGetBooleanIfPresent();
      }
      if (outData)
        CFRelease(outData);
      return v7;
    }
  }
  return result;
}

uint64_t cmsmUpdatePickableRouteDescriptionLists(char a1)
{
  void *v1;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __CFArray *v8;
  NSObject *v9;
  _QWORD v12[4];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[NSRecursiveLock lock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "lock");
  if (-[NSMutableDictionary count](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "count"))
  {
    v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:copyItems:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), 1);
  }
  else
  {
    v1 = 0;
  }
  -[NSMutableDictionary removeAllObjects](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "removeAllObjects");
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v7, "isActive"))
        {
          if (!-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v7, "audioCategory")))
          {
            v8 = cmsmCopyPickableRoutesForRouteConfiguration(objc_msgSend(v7, "audioCategory"), objc_msgSend(v7, "audioMode"), (void *)objc_msgSend(v7, "activationContext"), (void *)objc_msgSend(v7, "allowedPortTypes"));
            if (v8)
              CFRelease(v8);
          }
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (!-[NSMutableDictionary count](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "count")|| (-[NSMutableDictionary isEqualToDictionary:](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "isEqualToDictionary:", v1) & 1) == 0)
  {
    v9 = MXGetNotificationSenderQueue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __cmsmUpdatePickableRouteDescriptionLists_block_invoke;
    v12[3] = &__block_descriptor_33_e5_v8__0l;
    v13 = a1;
    MXDispatchAsync((uint64_t)"cmsmUpdatePickableRouteDescriptionLists", (uint64_t)"CMSessionManager_VARouting.m", 209, 0, 0, v9, (uint64_t)v12);
  }

  return -[NSRecursiveLock unlock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "unlock");
}

__CFString *CMSMUtility_GetVoicePromptStyle()
{
  int IsDoingActivity;
  int v1;
  __CFString **v2;

  MEMORY[0x1940352BC](gCMSM);
  IsDoingActivity = FigEndpointCentralEntityIsDoingActivity(qword_1EE2B3CD8, 0x1E309F488, CFSTR("PhoneCall"));
  v1 = FigEndpointCentralEntityIsDoingActivity(qword_1EE2B3CD8, 0x1E309F488, CFSTR("Speech"));
  MEMORY[0x1940352C8](gCMSM);
  if (-[MXSessionManager isSessionWithAudioModeRecording:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioModeRecording:", CFSTR("SpeechRecognition")))
  {
    v2 = kCMSessionVoicePromptStyle_None;
  }
  else if (-[MXSessionManager areSessionsWithAudioModesActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "areSessionsWithAudioModesActive:", -[MXSessionManager audioModesWithShortVoicePromptStyle](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioModesWithShortVoicePromptStyle")))
  {
    v2 = kCMSessionVoicePromptStyle_Short;
  }
  else
  {
    v2 = kCMSessionVoicePromptStyle_Short;
    if (!CMSMUtility_PhoneCallOrRingtoneExists()
      && !IsDoingActivity
      && !v1
      && !-[MXSessionManager isSessionWithAudioCategoryActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioCategoryActive:", CFSTR("Voicemail"))&& !-[MXSessionManager isSessionWithAudioModePlaying:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioModePlaying:", CFSTR("VoicePrompt")))
    {
      v2 = kCMSessionVoicePromptStyle_Normal;
    }
  }
  return *v2;
}

uint64_t FigEndpointCentralEntityIsDoingActivity(uint64_t result, uint64_t a2, const void *a3)
{
  uint64_t v5;
  _OWORD v6[2];

  memset(v6, 0, sizeof(v6));
  if (result)
  {
    result = CMBaseObjectGetDerivedStorage();
    if (result)
    {
      v5 = result;
      result = 0;
      if (a2)
      {
        if (a3)
        {
          fsmcontroller_GetCurrentMode(*(_QWORD *)(v5 + 24), (uint64_t)v6);
          if (CFEqual(a3, CFSTR("PhoneCall")))
            return FigCFEqual();
          if (CFEqual(a3, CFSTR("Speech")))
            return FigCFEqual();
          result = CFEqual(a3, CFSTR("TurnByTurnNavigation"));
          if ((_DWORD)result)
            return FigCFEqual();
        }
      }
    }
  }
  return result;
}

uint64_t CMSUtility_IsRemoteInterruptionRequired(void *a1)
{
  uint64_t result;
  unsigned int LocalSessionPriority;
  unsigned int HighestRemotePlayingSessionPriority;
  char v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote();
  if ((_DWORD)result)
  {
    result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
    if ((_DWORD)result)
    {
      if (CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 0))
      {
        LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 0);
        HighestRemotePlayingSessionPriority = CMSM_GetHighestRemotePlayingSessionPriority();
        v5 = objc_msgSend(a1, "isIDSMXCoreSession");
        result = 0;
        if ((v5 & 1) == 0)
          return CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
              && LocalSessionPriority > 0x64
              && LocalSessionPriority >= HighestRemotePlayingSessionPriority;
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  v1 = objc_msgSend(v0, "isNearby");

  if (byte_1EE2B3048)
    v2 = v1;
  else
    v2 = 0;
  if (byte_1EE2B3049)
    v3 = v2;
  else
    v3 = 0;
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalAndRemoteOldValue != (_DWORD)v3
    || CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalOldValue != byte_1EE2B3048
    || CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToRemoteOldValue != byte_1EE2B3049)
  {
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalOldValue = byte_1EE2B3048 != 0;
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToRemoteOldValue = byte_1EE2B3049 != 0;
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalAndRemoteOldValue = v3;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v3;
}

uint64_t CMSUtility_DoesSessionWantToPauseSpokenAudio(void *a1)
{
  return objc_msgSend(a1, "wantsToPauseSpokenAudio");
}

uint64_t CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded()
{
  void *v0;
  int v1;
  char v2;
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_onceToken != -1)
    dispatch_once(&CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_onceToken, &__block_literal_global_20_0);
  v0 = (void *)CMSMUtility_CopyActivePhoneCallInfo();
  v1 = CMSMUtility_PhoneCallOrRingtoneExists();
  objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "lock");
  if (v0
    && !objc_msgSend(v0, "isEqualToDictionary:", CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo))
  {
    objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "unlock");
    goto LABEL_9;
  }
  if (!CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo)
  {
    objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "unlock");
    goto LABEL_11;
  }
  v2 = objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo, "isEqualToDictionary:", v0);
  objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "unlock");
  if ((v2 & 1) == 0)
  {
LABEL_9:
    v3 = objc_msgSend((id)objc_msgSend(v0, "objectForKey:", CFSTR("ClientPriority")), "intValue") == 10;
    v4 = (void *)MEMORY[0x1E0C99D80];
    v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v0 != 0);
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("CallIsActiveDidChange"), objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v5, CFSTR("CallActive"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3), CFSTR("CallIsHighPriority"), 0), 0);
  }
LABEL_11:
  v6 = v1 != 0;
  if (CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sPhoneCallOrRingtoneExists != v6)
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
  objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "lock");

  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo = (uint64_t)v0;
  result = objc_msgSend((id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock, "unlock");
  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sPhoneCallOrRingtoneExists = v6;
  return result;
}

BOOL CMSMUtility_IsPhoneCallActive()
{
  void *v0;
  _BOOL8 v1;

  v0 = (void *)CMSMUtility_CopyActivePhoneCallInfo();
  v1 = v0 != 0;

  return v1;
}

uint64_t CMSMUtility_CopyActivePhoneCallInfo()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  id v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && objc_msgSend(v5, "hasPhoneCallBehavior")
          && (objc_msgSend(v5, "isIDSMXCoreSession") & 1) == 0)
        {
          v7 = objc_alloc(MEMORY[0x1E0C99D80]);
          v6 = objc_msgSend(v7, "initWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v5, "clientPriority")), CFSTR("ClientPriority"), 0);
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

const UInt8 *_routingContextUtilities_getContextFromWeakRef(uint64_t a1)
{
  const __CFData *v1;
  const __CFData *v2;
  const UInt8 *BytePtr;

  if (!a1)
    return 0;
  v1 = (const __CFData *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v1)
    return 0;
  v2 = v1;
  BytePtr = CFDataGetBytePtr(v1);
  CFRelease(v2);
  return BytePtr;
}

void __volumeControllerRemote_ensureClientEstablished_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  v1 = (void *)objc_msgSend(v0, "initWithObjectsAndKeys:", CFSTR("VolumeController_ServerConnectionDied"), *MEMORY[0x1E0CA54A0], 0);
  volumeControllerRemote_ensureClientEstablished_err = FigXPCRemoteClientCreate();

}

uint64_t volumeController_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

id cmsCopyOverrideRoute(id result)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  CFIndex v4;
  const __CFNumber *ValueAtIndex;
  unsigned int PortTypeFromPortID;
  unsigned int valuePtr;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend((id)objc_msgSend(result, "overridePortsList"), "count");
    if (v2 < 1)
    {
      return 0;
    }
    else
    {
      v3 = v2;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(v1, "overridePortsList"), v4);
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (!vaeIsPortAnInputPort(valuePtr))
          break;
        if (v3 == ++v4)
          return 0;
      }
      PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
    }
  }
  return result;
}

void cmsSetCategoryOnPVMAndAudioDevice(void *a1)
{
  MEMORY[0x1940352BC](gCMSM);
  objc_msgSend(a1, "audioCategory");
  objc_msgSend(a1, "audioMode");
  CMSUtility_CopyDeviceHintsForSession(a1);
  PVMSetEnabled(1);
}

uint64_t cmsmSetVADRouteConfiguration(uint64_t a1, int a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  _DWORD *v13;
  int v14;
  NSObject *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void **v30;
  const void *v31;
  const void **v32;
  const void **v33;
  const void **v34;
  const void **v35;
  const void *v36;
  const void *v37;
  const void *v38;
  CFDictionaryRef v39;
  CFArrayRef v40;
  const void *UInt32;
  CFNumberRef v42;
  const void *v43;
  const void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  NSObject *v50;
  uint64_t v51;
  const void *v52;
  const void *v53;
  const __CFArray *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  int v69;
  const void *v70;
  const void *v71;
  char v72;
  char v73;
  int v74;
  char v75;
  int v76;
  NSObject *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  const __CFAllocator *allocator;
  CFMutableDictionaryRef Mutable;
  int *v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3F38)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && dword_1EE2B3F38)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352BC](gCMSM);
  v7 = *(_DWORD *)a1;
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v91 = (int *)(a1 + 148);
  if (*(_DWORD *)a1 && v7 != dword_1EE2B3BEC)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  v14 = *(_DWORD *)(a1 + 4);
  if (v14 && v14 != dword_1EE2B3BF0)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  v86 = *(_QWORD *)(a1 + 72);
  v84 = *(unsigned __int8 *)(a1 + 104);
  v85 = *(unsigned __int8 *)(a1 + 88);
  v83 = *(unsigned __int8 *)(a1 + 120);
  v81 = *(unsigned __int8 *)(a1 + 145);
  v82 = *(unsigned __int8 *)(a1 + 121);
  v79 = *(unsigned __int8 *)(a1 + 160);
  v80 = *(_DWORD *)(a1 + 148);
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v9)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v8)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v10)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v86)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (dword_1EE2B3F38)
    {
LABEL_44:
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_45:
    if (*(_DWORD *)a1)
    {
      v16 = CFNumberCreate(v11, kCFNumberSInt32Type, (const void *)a1);
      if (v16)
      {
        v17 = v16;
        CFDictionarySetValue(v12, CFSTR("category"), v16);
        CFRelease(v17);
      }
    }
    v18 = (int *)(a1 + 4);
    if (!*(_DWORD *)(a1 + 4))
    {
      if (!*(_DWORD *)a1)
        goto LABEL_53;
      *v18 = 1768776806;
    }
    v19 = CFNumberCreate(v11, kCFNumberSInt32Type, (const void *)(a1 + 4));
    if (v19)
    {
      v20 = v19;
      CFDictionarySetValue(v12, CFSTR("mode"), v19);
      CFRelease(v20);
    }
LABEL_53:
    v21 = *(const void **)(a1 + 16);
    if (v21)
      CFDictionarySetValue(v12, CFSTR("initiation context"), v21);
    v22 = *(const void **)(a1 + 32);
    if (v22)
    {
      CFDictionarySetValue(v12, CFSTR("voice processing configuration"), v22);
    }
    else if (*(_DWORD *)a1)
    {
      v39 = CFDictionaryCreate(v11, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v12, CFSTR("voice processing configuration"), v39);
      if (v39)
        CFRelease(v39);
    }
    v23 = *(const void **)(a1 + 40);
    if (v23)
      CFDictionarySetValue(v12, CFSTR("overridden ports"), v23);
    v24 = *(const void **)(a1 + 80);
    if (v24)
    {
      CFDictionarySetValue(v12, CFSTR("sub-port preferences"), v24);
    }
    else if (*(_DWORD *)a1)
    {
      v40 = CFArrayCreate(0, 0, 0, 0);
      CFDictionarySetValue(v12, CFSTR("sub-port preferences"), v40);
      if (v40)
        CFRelease(v40);
    }
    v25 = *(const void **)(a1 + 64);
    if (v25)
      CFDictionarySetValue(v12, CFSTR("aggregated ports"), v25);
    v26 = *(const void **)(a1 + 72);
    if (v26)
      CFDictionarySetValue(v12, CFSTR("deaggregated ports"), v26);
    v27 = *(const void **)(a1 + 48);
    if (v27)
      CFDictionarySetValue(v12, CFSTR("routable ports"), v27);
    v28 = *(const void **)(a1 + 136);
    if (v28)
      CFDictionarySetValue(v12, CFSTR("reporter IDs"), v28);
    v29 = *(const void **)(a1 + 56);
    if (v29)
      CFDictionarySetValue(v12, CFSTR("unroutable ports"), v29);
    v30 = (const void **)MEMORY[0x1E0C9AE50];
    if (*(_BYTE *)(a1 + 88))
      CFDictionarySetValue(v12, CFSTR("screen dark policy enabled"), (const void *)*MEMORY[0x1E0C9AE50]);
    v31 = *(const void **)(a1 + 96);
    if (v31)
      CFDictionarySetValue(v12, CFSTR("device hints"), v31);
    v32 = (const void **)MEMORY[0x1E0C9AE40];
    if (byte_1EE2B2BD0 | *(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 104))
        v33 = v30;
      else
        v33 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v12, CFSTR("create speaker vad"), *v33);
    }
    if (*(_DWORD *)a1 && byte_1EE2B2BD2 | *(_BYTE *)(a1 + 121))
    {
      if (*(_BYTE *)(a1 + 121))
        v34 = v30;
      else
        v34 = v32;
      CFDictionarySetValue(v12, CFSTR("decoupled input/output"), *v34);
    }
    if (byte_1EE2B2BD1 | *(_BYTE *)(a1 + 120))
    {
      if (*(_BYTE *)(a1 + 120))
        v35 = v30;
      else
        v35 = v32;
      CFDictionarySetValue(v12, CFSTR("ignore ringer switch"), *v35);
    }
    v36 = *(const void **)(a1 + 112);
    if (v36)
      CFDictionarySetValue(v12, CFSTR("disallowed ports"), v36);
    v37 = *(const void **)(a1 + 128);
    if (v37)
      CFDictionarySetValue(v12, CFSTR("allowed port types"), v37);
    v38 = *(const void **)(a1 + 24);
    if (v38)
      CFDictionarySetValue(v12, CFSTR("camera parameters"), v38);
    if (*(_BYTE *)(a1 + 145) || *(_DWORD *)a1)
    {
      UInt32 = (const void *)FigCFNumberCreateUInt32();
      CFDictionarySetValue(v12, CFSTR("expanse session"), UInt32);
      if (UInt32)
        CFRelease(UInt32);
    }
    if (*v13)
    {
      v42 = CFNumberCreate(v11, kCFNumberSInt32Type, v13);
      CFDictionarySetValue(v12, CFSTR("optional output mode"), v42);
      if (v42)
        CFRelease(v42);
    }
    v43 = *(const void **)(a1 + 152);
    if (v43)
      CFDictionarySetValue(v12, CFSTR("aggregate device clock device"), v43);
    if (*(_BYTE *)(a1 + 160))
    {
      v44 = (const void *)FigCFNumberCreateUInt32();
      CFDictionarySetValue(v12, CFSTR("route to builtinspeaker"), v44);
      if (v44)
        CFRelease(v44);
    }
    if (*(_DWORD *)a1)
      dword_1EE2B3BEC = *(_DWORD *)a1;
    v45 = *(void **)(a1 + 176);
    if (v45)
    {
      v46 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v47 = objc_msgSend(v45, "objectForKey:", CFSTR("InputPortUIDs"));
      v48 = objc_msgSend(v45, "objectForKey:", CFSTR("OutputPortUIDs"));
      if (v47)
        objc_msgSend(v46, "setObject:forKey:", v47, 0x1E30A8208);
      if (v48)
        objc_msgSend(v46, "setObject:forKey:", v48, 0x1E30A8228);
      CFDictionarySetValue(v12, CFSTR("persistent route"), v46);

    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      v49 = *(const void **)(a1 + 168);
      if (v49)
      {
        CFDictionarySetValue(v12, CFSTR("session routing information"), v49);
        if (dword_1EE2B3F38)
        {
          v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    v92 = 0;
    v51 = vaemSetRouteConfigurationDictionaryOnVAD(v12, a2, a3, &v92);
    if ((_DWORD)v51)
      goto LABEL_197;
    if (*(_DWORD *)a1)
    {
      dword_1EE2B3BEC = *(_DWORD *)a1;
      if ((_QWORD)xmmword_1EE2B2BA8)
      {
        CFRelease((CFTypeRef)xmmword_1EE2B2BA8);
        *(_QWORD *)&xmmword_1EE2B2BA8 = 0;
      }
      if (qword_1EE2B2BA0)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BA0);
        qword_1EE2B2BA0 = 0;
      }
      if (qword_1EE2B2B98)
      {
        CFRelease((CFTypeRef)qword_1EE2B2B98);
        qword_1EE2B2B98 = 0;
      }
      if (qword_1EE2B2BC0)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BC0);
        qword_1EE2B2BC0 = 0;
      }
      if (qword_1EE2B2BC8)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BC8);
        qword_1EE2B2BC8 = 0;
      }
      if (qword_1EE2B2BD8)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BD8);
        qword_1EE2B2BD8 = 0;
      }
      if (qword_1EE2B2BE0)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BE0);
        qword_1EE2B2BE0 = 0;
      }
      if (qword_1EE2B3BF8)
      {
        CFRelease((CFTypeRef)qword_1EE2B3BF8);
        qword_1EE2B3BF8 = 0;
      }
      if (*((_QWORD *)&xmmword_1EE2B2BA8 + 1))
      {
        CFRelease(*((CFTypeRef *)&xmmword_1EE2B2BA8 + 1));
        *((_QWORD *)&xmmword_1EE2B2BA8 + 1) = 0;
      }
      byte_1EE2B2BD0 = *(_BYTE *)(a1 + 104);
      *(_WORD *)&byte_1EE2B2BD1 = *(_WORD *)(a1 + 120);
      byte_1EE2B2C40 = *(_BYTE *)(a1 + 145);
      dword_1EE2B2C50 = *(_DWORD *)(a1 + 148);
      if (qword_1EE2B2C48)
      {
        CFRelease((CFTypeRef)qword_1EE2B2C48);
        qword_1EE2B2C48 = 0;
      }
    }
    v52 = *(const void **)(a1 + 40);
    if (v52)
    {
      v53 = (const void *)qword_1EE2B2BA0;
      qword_1EE2B2BA0 = *(_QWORD *)(a1 + 40);
      CFRetain(v52);
      if (v53)
        CFRelease(v53);
    }
    v12 = Mutable;
    if (*v18)
    {
      dword_1EE2B3BF0 = *v18;
      if (qword_1EE2B2B98)
      {
        CFRelease((CFTypeRef)qword_1EE2B2B98);
        qword_1EE2B2B98 = 0;
      }
      if (qword_1EE2B2BE0)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BE0);
        qword_1EE2B2BE0 = 0;
      }
    }
    v54 = *(const __CFArray **)(a1 + 80);
    if (v54)
    {
      if ((_QWORD)xmmword_1EE2B2BA8)
      {
        CFRelease((CFTypeRef)xmmword_1EE2B2BA8);
        *(_QWORD *)&xmmword_1EE2B2BA8 = 0;
        v54 = *(const __CFArray **)(a1 + 80);
      }
      *(_QWORD *)&xmmword_1EE2B2BA8 = CFArrayCreateCopy(allocator, v54);
    }
    v55 = *(const void **)(a1 + 16);
    if (v55)
    {
      v56 = (const void *)qword_1EE2B2B98;
      qword_1EE2B2B98 = *(_QWORD *)(a1 + 16);
      CFRetain(v55);
      if (v56)
        CFRelease(v56);
    }
    v57 = *(const void **)(a1 + 96);
    if (v57)
    {
      v58 = (const void *)qword_1EE2B2BC0;
      qword_1EE2B2BC0 = *(_QWORD *)(a1 + 96);
      CFRetain(v57);
      if (v58)
        CFRelease(v58);
    }
    v59 = *(const void **)(a1 + 32);
    if (v59)
    {
      v60 = (const void *)qword_1EE2B2BC8;
      qword_1EE2B2BC8 = *(_QWORD *)(a1 + 32);
      CFRetain(v59);
      if (v60)
        CFRelease(v60);
    }
    v61 = *(const void **)(a1 + 112);
    if (v61)
    {
      v62 = (const void *)qword_1EE2B2BD8;
      qword_1EE2B2BD8 = *(_QWORD *)(a1 + 112);
      CFRetain(v61);
      if (v62)
        CFRelease(v62);
    }
    v63 = *(const void **)(a1 + 24);
    if (v63)
    {
      v64 = (const void *)qword_1EE2B2BE0;
      qword_1EE2B2BE0 = *(_QWORD *)(a1 + 24);
      CFRetain(v63);
      if (v64)
        CFRelease(v64);
    }
    v65 = *(const void **)(a1 + 128);
    if (v65)
    {
      v66 = (const void *)qword_1EE2B3BF8;
      qword_1EE2B3BF8 = *(_QWORD *)(a1 + 128);
      CFRetain(v65);
      if (v66)
        CFRelease(v66);
    }
    v67 = *(const void **)(a1 + 176);
    if (v67)
    {
      v68 = (const void *)*((_QWORD *)&xmmword_1EE2B2BA8 + 1);
      *((_QWORD *)&xmmword_1EE2B2BA8 + 1) = *(_QWORD *)(a1 + 176);
      CFRetain(v67);
      if (v68)
        CFRelease(v68);
    }
    if (*(_BYTE *)(a1 + 145))
    {
      byte_1EE2B2C40 = *(_BYTE *)(a1 + 145);
      v51 = 0;
    }
    else
    {
      v51 = 0;
      if (*(_DWORD *)a1)
      {
        byte_1EE2B2C40 = 0;
        v69 = *v91;
        dword_1EE2B2C50 = *v91;
        if (!qword_1EE2B2C48)
          goto LABEL_186;
        CFRelease((CFTypeRef)qword_1EE2B2C48);
        qword_1EE2B2C48 = 0;
      }
    }
    v69 = *v91;
LABEL_186:
    if (v69)
      dword_1EE2B2C50 = v69;
    v70 = *(const void **)(a1 + 152);
    if (v70)
    {
      v71 = (const void *)qword_1EE2B2C48;
      qword_1EE2B2C48 = *(_QWORD *)(a1 + 152);
      CFRetain(v70);
      if (v71)
        CFRelease(v71);
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled() && *(_QWORD *)(a1 + 168))
      -[MXAdditiveRoutingManager setMostRecentActiveSessions:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "setMostRecentActiveSessions:", *(_QWORD *)(a1 + 168));
    if (*(_BYTE *)(a1 + 144) && v92 == 1920099684)
      vaemConfigurePVMSettings((const __CFString *)-[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode"), 1920099684);
LABEL_197:
    v72 = 0;
    goto LABEL_198;
  }
  v11 = allocator;
  v13 = (_DWORD *)(a1 + 148);
  if (v85)
  {
    v12 = Mutable;
    if (!dword_1EE2B3F38)
      goto LABEL_45;
LABEL_269:
    v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    goto LABEL_45;
  }
  if (v84 != byte_1EE2B2BD0)
  {
    v12 = Mutable;
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (v83 != byte_1EE2B2BD1)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (v82 != byte_1EE2B2BD2)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (v81)
  {
    if (v81 != byte_1EE2B2C40)
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
    if (v80 && v80 != dword_1EE2B2C50)
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
    if (!FigCFEqual())
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
  }
  else if (v7)
  {
    if (byte_1EE2B2C40)
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
    if (dword_1EE2B2C50)
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
    if (qword_1EE2B2C48)
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
  }
  if (v79)
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (!FigCFEqual())
  {
    v11 = allocator;
    v12 = Mutable;
    v13 = (_DWORD *)(a1 + 148);
    if (!dword_1EE2B3F38)
      goto LABEL_45;
    goto LABEL_269;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled())
  {
    -[MXAdditiveRoutingManager mostRecentActiveSessions](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "mostRecentActiveSessions");
    if (!FigCFEqual())
    {
      v11 = allocator;
      v12 = Mutable;
      v13 = (_DWORD *)(a1 + 148);
      if (!dword_1EE2B3F38)
        goto LABEL_45;
      goto LABEL_269;
    }
  }
  if (*(_BYTE *)(a1 + 144))
    vaemConfigurePVMSettings((const __CFString *)-[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode"), 1920099684);
  v51 = 0;
  v72 = 1;
  v12 = Mutable;
LABEL_198:
  MEMORY[0x1940352C8](gCMSM);
  if (v12)
    CFRelease(v12);
  if ((_DWORD)v51)
    v73 = 1;
  else
    v73 = v72;
  if ((v73 & 1) == 0)
  {
    v74 = *(_DWORD *)a1;
    v75 = 1;
    if (*(int *)a1 > 1668313714)
    {
      if (v74 != 1668313715 && v74 != 1668440898)
      {
        v76 = 1668441443;
LABEL_211:
        if (v74 != v76)
          v75 = 0;
      }
    }
    else if (v74 != 1668301427 && v74 != 1668309362)
    {
      v76 = 1668313666;
      goto LABEL_211;
    }
    byte_1EE2B2BE8 = v75;
  }
  return v51;
}

BOOL vaemSystemSoundLocalVADExists()
{
  return -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID") != 0;
}

uint64_t cmsmGetCurrentConnectedPortToRoute(const void *a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  const __CFNumber *ValueAtIndex;
  int PortTypeFromPortID;
  CFTypeRef v8;
  OpaqueFigEndpoint *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  const void *v13;
  _BOOL4 ShouldAutoRouteOnConnect;
  _BOOL4 v15;
  int CurrentOutputPortAtIndex;
  uint64_t v17;
  CFArrayRef theArray;
  AudioObjectID valuePtr;

  if (a1)
    v1 = (const __CFArray *)CFRetain(a1);
  else
    v1 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  v2 = v1;
  if (!v1)
    return 0;
  Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_29:
    v17 = 0;
    goto LABEL_33;
  }
  v4 = Count;
  v5 = *MEMORY[0x1E0CA3A68];
  while (1)
  {
    valuePtr = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, v4 - 1);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
    v8 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
    v9 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v8, 1, v5, qword_1EE2B3CF0);
    if (v8)
      CFRelease(v8);
    if (!v9)
      break;
    if (PortTypeFromPortID == 1886614639)
    {
      v17 = valuePtr;
      CFRelease(v9);
      goto LABEL_33;
    }
    CFRelease(v9);
LABEL_27:
    if (v4-- <= 1)
      goto LABEL_29;
  }
  if (vaeGetConnectionTypeForPort(valuePtr) == 1885544823)
  {
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(qword_1EE2B3CF0, (uint64_t)&theArray);
    if (theArray)
    {
      v10 = CFArrayGetCount(theArray);
      if (v10 < 1)
      {
LABEL_18:
        v15 = 0;
      }
      else
      {
        v11 = v10;
        v12 = 0;
        while (1)
        {
          v13 = CFArrayGetValueAtIndex(theArray, v12);
          ShouldAutoRouteOnConnect = CMSMVAUtility_ShouldAutoRouteOnConnect(valuePtr, (uint64_t)v13);
          if (ShouldAutoRouteOnConnect)
            break;
          if (v11 == ++v12)
            goto LABEL_18;
        }
        v15 = ShouldAutoRouteOnConnect;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    v17 = valuePtr;
    if (v15 || valuePtr == CurrentOutputPortAtIndex)
      goto LABEL_33;
    goto LABEL_27;
  }
  v17 = valuePtr;
LABEL_33:
  CFRelease(v2);
  return v17;
}

OpaqueFigEndpoint *FigRoutingManagerCopyEndpointWithDeviceID(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return -[MXEndpointDescriptorCache copyEndpointWithDeviceID:isStreamID:managerType:routingContextUUID:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyEndpointWithDeviceID:isStreamID:managerType:routingContextUUID:", a1, a2 != 0, a3, a4);
}

uint64_t FigRoutingManagerShouldSkipEndpointManager()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v1)
  {
    v1(CMBaseObject, *MEMORY[0x1E0CA3A40], *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
      CFRelease(cf);
  }
  return 0;
}

void PVMSetEnabled(int a1)
{
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  *(_BYTE *)(sStorage + 8) = a1 == 0;
  JUMPOUT(0x1940352C8);
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3477, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19365D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSMSleep_FetchPlaybackProcessAssertion(void *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *ClientName;
  const __CFString *v7;
  const void *PlaybackProcessAssertionForPID;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  v4 = objc_msgSend(a1, "displayID");
  ClientName = CMSUtility_GetClientName(a1, v5);
  v7 = CFStringCreateWithFormat(v2, 0, CFSTR("MediaExperience.%d.\"%@\".\"%@\".\"%@\".isPlayingProcessAssertion"), v3, v4, ClientName, objc_msgSend(a1, "audioCategory"));
  if (!objc_msgSend(a1, "playbackAssertionRef")
    || (MX_RunningBoardServices_IsAssertionValid((const void *)objc_msgSend(a1, "playbackAssertionRef")) & 1) == 0)
  {
    PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), v7);
    objc_msgSend(a1, "setPlaybackAssertionRef:", PlaybackProcessAssertionForPID);
    if (PlaybackProcessAssertionForPID)
      CFRelease(PlaybackProcessAssertionForPID);
  }
  if (v7)
    CFRelease(v7);
  CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(a1);
}

const void *MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(uint64_t a1, const __CFString *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v5;
  void *MXAssertionForPID;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;

  if ((int)a1 < 1)
    return 0;
  if (dword_1EE2B3F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1)
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_39);
  MXAssertionForPID = mx_runningBoardServices_createMXAssertionForPID(a1, a2, (uint64_t)&__block_literal_global_32);
  v5 = MXAssertionForPID;
  if (MXAssertionForPID)
  {
    if (objc_msgSend(MXAssertionForPID, "isValid"))
    {
      MEMORY[0x1940352BC](gProcessAssertionMutex);
      CFArrayAppendValue((CFMutableArrayRef)gProcessAssertionArray, v5);
      MEMORY[0x1940352C8](gProcessAssertionMutex);
      if (FigCFEqual())
      {
        v7 = objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "hostProcess"), "pid");
        if ((_DWORD)v7)
        {
          v8 = v7;
          v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", a2);
          v10 = v9;
          if (v9)
          {
            -[__CFString appendString:](v9, "appendString:", CFSTR("MediaPlayback"));
            -[__CFString appendString:](v10, "appendString:", CFSTR("ForHostProcess"));
            -[__CFString appendString:](v10, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".(%d)"), v8));
            v11 = mx_runningBoardServices_createMXAssertionForPID(v8, v10, 0);
            v12 = v11;
            if (v11 && objc_msgSend(v11, "isValid"))
            {
              MEMORY[0x1940352BC](gProcessAssertionMutex);
              CFDictionarySetValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, v5, v12);
              MEMORY[0x1940352C8](gProcessAssertionMutex);
            }

          }
        }
      }
    }
  }
  return v5;
}

void *mx_runningBoardServices_createMXAssertionForPID(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v5 = objc_msgSend(MEMORY[0x1E0D87DF8], "targetWithPid:", a1);
  if (v5)
    return mx_runningBoardServices_createAssertionForTarget(v5, a2, (uint64_t)CFSTR("com.apple.mediaexperience"), (uint64_t)CFSTR("MediaPlayback"), a3);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

void *mx_runningBoardServices_createAssertionForTarget(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v21;
  NSObject *v22;
  MXAudioStatistics *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x194035B20]();
  if (mx_runningBoardServices_createAssertionForTarget_onceToken != -1)
    dispatch_once(&mx_runningBoardServices_createAssertionForTarget_onceToken, &__block_literal_global_46_0);
  v11 = objc_msgSend(MEMORY[0x1E0D87CD0], "attributeWithDomain:name:", a3, a4);
  if (v11)
  {
    v12 = v11;
    v13 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v13, "setDateFormat:", CFSTR("YYYY.MM.dd_HH:mm:ss:ms"));
    v14 = (void *)MEMORY[0x1E0CB3940];
    if (CMSMDeviceState_IsAudiomxd())
      v15 = CFSTR("audiomxd");
    else
      v15 = a2;
    v16 = objc_msgSend(v14, "stringWithFormat:", CFSTR("%@(%d).%@.%@"), v15, mx_runningBoardServices_createAssertionForTarget_pid, objc_msgSend(v13, "stringFromDate:", objc_msgSend(MEMORY[0x1E0C99D68], "date")), a2);
    v17 = objc_alloc(MEMORY[0x1E0D87C98]);
    v31 = v12;
    v18 = (void *)objc_msgSend(v17, "initWithExplanation:target:attributes:", v16, a1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1));
    v19 = v18;
    if (v18)
    {
      objc_msgSend(v18, "setInvalidationHandler:", a5);
      v30 = 0;
      if ((objc_msgSend(v19, "acquireWithError:", &v30) & 1) == 0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v23 = +[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance", v28, v29);
      v24 = objc_msgSend(v19, "explanation");
      -[MXAudioStatistics sendSinglePerformanceMessageForAssertion:explanation:activity:](v23, "sendSinglePerformanceMessageForAssertion:explanation:activity:", "mx_runningBoardServices_createAssertionForTarget", v24, kMXAudioStatistics_AssertionActivity_AssertionCreated);
      v25 = MXGetAssertionLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = objc_msgSend(v19, "explanation");
        *(_DWORD *)buf = 136447490;
        v33 = "-MX_RunningBoardServices-";
        v34 = 2082;
        v35 = "mx_runningBoardServices_createAssertionForTarget";
        v36 = 1024;
        v37 = 697;
        v38 = 2048;
        v39 = v19;
        v40 = 2114;
        v41 = v26;
        v42 = 2114;
        v43 = a1;
        _os_log_impl(&dword_1935FC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Created assertion %p %{public}@ for target %{public}@", buf, 0x3Au);
      }
    }
    else
    {
      LODWORD(v30) = 0;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }

  }
  else
  {
    LODWORD(v30) = 0;
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = 0;
  }
  objc_autoreleasePoolPop(v10);
  return v19;
}

uint64_t MXGetAssertionLog()
{
  if (MXGetAssertionLog_onceToken != -1)
    dispatch_once(&MXGetAssertionLog_onceToken, &__block_literal_global_56);
  return MXGetAssertionLog__log;
}

uint64_t MX_FeatureFlags_IsAssertionActivityReportingEnabled()
{
  if (MX_FeatureFlags_IsAssertionActivityReportingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAssertionActivityReportingEnabled_onceToken, &__block_literal_global_47_1);
  return MX_FeatureFlags_IsAssertionActivityReportingEnabled_sAssertionActivityReportingEnabled;
}

uint64_t MXCoreSessionTeardown(void *a1)
{
  const __CFString *v2;
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "playbackAssertionRef"))
    CMSMSleep_ReleasePlaybackProcessAssertion(a1);
  if (objc_msgSend(a1, "needToEndInterruption"))
  {
    if (objc_msgSend(a1, "isTheAssistant"))
      v2 = CFSTR("resumable.deallocated");
    else
      v2 = CFSTR("non-resumable.deallocated");
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v2, 1);
  }
  else
  {
    if (objc_msgSend(a1, "isPlaying"))
      cmsSetIsPlaying(a1, 0);
    if (objc_msgSend(a1, "isActive"))
    {
      cmsSetIsActive(a1, 0, 0);
      CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
    }
  }
  v3 = objc_msgSend(a1, "wantsToShowMicrophoneIndicatorWhenNotRecording");
  objc_msgSend(a1, "setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:", 0);
  objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", 0);
  v4 = objc_msgSend(a1, "isUsingBuiltInMicForRecording");
  objc_msgSend(a1, "setHasEntitlementToSetIsUsingBuiltInMicForRecording:", 0);
  objc_msgSend(a1, "setIsUsingBuiltInMicForRecording:", 0);
  if (objc_msgSend(a1, "isRecording"))
  {
    objc_msgSend(a1, "setIsRecording:", 0);
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
    MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)objc_msgSend(a1, "bundleIdToPAAccessIntervalMap"));
    objc_msgSend(a1, "setBundleIdToPAAccessIntervalMap:", 0);
  }
  else if ((v3 | v4) == 1)
  {
    MX_SystemStatus_PublishRecordingClientsInfo();
  }
  if (-[MXExclaves updateSensorStatus:reason:](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "updateSensorStatus:reason:", a1, CFSTR("session is being released")))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cmsVibrateForSession(a1, 0);
  CMSMSleep_UpdateIdleSleepPreventor(a1, 0);
  if (!MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
  {
    MEMORY[0x1940352BC](gCMSM);
    if (dword_1EE2B3C60 >= 1)
    {
      v6 = 0;
      do
      {
        v14 = 0;
        v7 = *(_QWORD *)(qword_1EE2B3C68 + 24 * v6);
        v15[0] = 0;
        cmsmGetCountAndResourceEntriesOfType(v7, &v14, v15);
        v8 = (_QWORD *)v15[0];
        if (!v15[0])
          break;
        v9 = v14;
        if (v14 >= 1)
        {
          v10 = (void **)(v15[0] + 16 * v6);
          do
          {
            if (*v10 == a1)
            {
              *v8 = 0;
              v8[1] = 0;
            }
            v8 += 2;
            --v9;
          }
          while (v9);
        }
        ++v6;
      }
      while (v6 < dword_1EE2B3C60);
    }
    MEMORY[0x1940352C8](gCMSM);
  }
  cmsReleaseBorrowedStarkMainAudio(a1, 0);
  -[MXSessionManager unduckSessionsForDucker:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckSessionsForDucker:", a1);
  CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
    && MX_FeatureFlags_IsCallManagementMuteControlEnabled()
    && objc_msgSend(a1, "hasPhoneCallBehavior"))
  {
    -[MXSessionManager removeEntryFromMutedBundleIDCache:bundleID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "removeEntryFromMutedBundleIDCache:bundleID:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), 0);
  }
  MX_RunningBoardServices_StopMonitoringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID", v12, v13), "intValue"));
  objc_msgSend(a1, "setClientPID:", 0);
  MX_RunningBoardServices_StopMonitoringForPID(objc_msgSend(a1, "pidToInheritAppStateFrom"));
  objc_msgSend(a1, "setPidToInheritAppStateFrom:", 0);
  return -[MXSessionManager cleanupSessionAssertionsIfNeeded:cleanupReason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "cleanupSessionAssertionsIfNeeded:cleanupReason:", a1, 1);
}

void MX_RunningBoardServices_StopMonitoringForPID(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((int)a1 >= 1)
  {
    v2 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", a1);
    if (v2 && (v3 = objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingIdentifier:", v2)) != 0)
    {
      v4 = v3;
      if (dword_1EE2B3F60)
      {
        v13 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend((id)gProcessPredicatesSetLock, "lock", v9, v10);
      v7 = (void *)objc_msgSend((id)gProcessPredicatesSet, "copy");
      objc_msgSend((id)gProcessPredicatesSet, "removeObject:", v4);
      v8 = (void *)objc_msgSend((id)gProcessPredicatesSet, "copy");
      objc_msgSend((id)gProcessPredicatesSetLock, "unlock");
      if ((objc_msgSend(v7, "isEqualToSet:", v8) & 1) != 0)
      {

      }
      else
      {
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __MX_RunningBoardServices_StopMonitoringForPID_block_invoke;
        v11[3] = &unk_1E309E340;
        v11[4] = v8;
        objc_msgSend((id)gProcessMonitor, "updateConfiguration:", v11);
        mx_runningBoardServices_removePIDFromApplicationStateCache((void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1));
      }

    }
    else
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void sub_19365E874(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void cmsReleaseBorrowedStarkMainAudio(void *a1, char a2)
{
  CFStringRef v4;
  __int128 v5[2];
  uint64_t v6;
  __CFString *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (qword_1EE2B3CD8 && objc_msgSend(a1, "starkBorrowCount"))
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ '%@' stopped using main audio"), objc_msgSend(a1, "clientName"), objc_msgSend(a1, "displayID"));
    CMSUtility_GetStarkInterruptionContext(1, a1, (uint64_t)&v8);
    while (objc_msgSend(a1, "starkBorrowCount"))
    {
      v5[0] = v8;
      v5[1] = v9;
      v6 = v10;
      v7 = CFSTR("Unborrow");
      FigEndpointSessionHandleInterruption((_QWORD *)qword_1EE2B3CD8, v5, (uint64_t)v4, &v7, a2);
      objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(a1, "starkBorrowCount") - 1);
    }
    if (v4)
      CFRelease(v4);
  }
}

uint64_t MX_FeatureFlags_IsBypassCodecArbitrationEnabled()
{
  return _os_feature_enabled_impl();
}

void CMSMSleep_ReleaseIdleSleepPreventorForSession(void *a1)
{
  __CFDictionary *PowerLogDataForSession;

  if (a1 && objc_msgSend(a1, "idleSleepPreventorAllocated"))
  {
    PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(a1);
    if (CMSMSleep_ReleaseIdleSleepPreventor(objc_msgSend(a1, "idleSleepPreventor"), CFSTR("CoreMedia_AudioPlayback"), PowerLogDataForSession))
    {
      objc_msgSend(a1, "setIdleSleepPreventor:", 0);
      objc_msgSend(a1, "setIdleSleepPreventorAllocated:", 0);
      objc_msgSend(a1, "setIdleSleepPreventorName:", 0);
      objc_msgSend(a1, "setIdleSleepPreventorCreationTime:", 0);
    }
    if (PowerLogDataForSession)
      CFRelease(PowerLogDataForSession);
  }
}

void CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFData *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *ClientName;
  const __CFString *v11;
  const void *v12;
  NSObject *v13;
  const void *PlaybackProcessAssertionForPID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id obj;
  const __CFAllocator *alloc;
  uint64_t v23;
  audit_token_t buffer;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  audit_token_t atoken;
  uint64_t v31;
  CFRange v32;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1 && objc_msgSend(a1, "playbackAssertionRef"))
  {
    v2 = (void *)objc_msgSend((id)objc_msgSend(a1, "hostProcessPlaybackAssertions"), "mutableCopy");
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    obj = (id)objc_msgSend(a1, "parentProcessAuditTokens");
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (!v3)
      goto LABEL_23;
    v4 = v3;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v23 = *(_QWORD *)v26;
    while (1)
    {
      v5 = 0;
      v20 = v4;
      do
      {
        if (*(_QWORD *)v26 != v23)
          objc_enumerationMutation(obj);
        v6 = *(const __CFData **)(*((_QWORD *)&v25 + 1) + 8 * v5);
        memset(&buffer, 0, sizeof(buffer));
        v32.location = 0;
        v32.length = 32;
        CFDataGetBytes(v6, v32, (UInt8 *)&buffer);
        atoken = buffer;
        v7 = audit_token_to_pid(&atoken);
        v8 = objc_msgSend(a1, "displayID");
        ClientName = CMSUtility_GetClientName(a1, v9);
        v11 = CFStringCreateWithFormat(alloc, 0, CFSTR("MediaExperience.%d.\"%@\".\"%@\".\"%@\".isPlayingProcessAssertionForHost"), v7, v8, ClientName, objc_msgSend(a1, "audioCategory"));
        v12 = (const void *)objc_msgSend(v2, "objectForKey:", v6);
        if (!v12 || (MX_RunningBoardServices_IsAssertionValid(v12) & 1) == 0)
        {
          PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(v7, v11);
          objc_msgSend(v2, "setObject:forKey:", PlaybackProcessAssertionForPID, v6);
          if (PlaybackProcessAssertionForPID)
            CFRelease(PlaybackProcessAssertionForPID);
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v4 = v20;
          }
LABEL_16:
          if (!v11)
            goto LABEL_18;
LABEL_17:
          CFRelease(v11);
          goto LABEL_18;
        }
        if (!dword_1EE2B3F38)
          goto LABEL_16;
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v11)
          goto LABEL_17;
LABEL_18:
        ++v5;
      }
      while (v4 != v5);
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      v4 = v16;
      if (!v16)
      {
LABEL_23:
        objc_msgSend(a1, "setHostProcessPlaybackAssertions:", v2, v18, v19);

        return;
      }
    }
  }
  v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID(uint64_t a1, void *a2, int a3)
{
  const __CFArray *MutableCopy;
  CFIndex v6;
  void *ValueAtIndex;
  int v8;
  char v9;
  NSObject *v10;
  MXAudioStatistics *v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  int v22;
  char v23;
  NSObject *v24;
  MXAudioStatistics *v25;
  uint64_t v26;
  const void *v27;
  void *context;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1)
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_39);
  context = (void *)MEMORY[0x194035B20]();
  MEMORY[0x1940352BC](gProcessAssertionMutex);
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFArrayRef)gProcessAssertionArray);
  v6 = 0;
  if (!MutableCopy)
    goto LABEL_6;
  while (v6 < CFArrayGetCount(MutableCopy))
  {
    while (1)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, v6);
      v8 = objc_msgSend((id)objc_msgSend(ValueAtIndex, "explanation"), "containsString:", a1);
      v9 = objc_msgSend(a2, "containsObject:", ValueAtIndex);
      if (v8 && (v9 & 1) == 0)
      {
        if (gHostProcessAssertionDictionary
          && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex))
        {
          objc_msgSend((id)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex), "invalidate");
          CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex);
        }
        v10 = MXGetAssertionLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447490;
          v36 = "-MX_RunningBoardServices-";
          v37 = 2082;
          v38 = "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID";
          v39 = 1024;
          v40 = 1095;
          v41 = 2048;
          v42 = ValueAtIndex;
          v43 = 1024;
          v44 = a3;
          v45 = 2114;
          v46 = a1;
          _os_log_impl(&dword_1935FC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidating unaccounted assertion %p for reason %u as its explanation contains matching session id %{public}@", buf, 0x36u);
        }
        v11 = +[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance");
        v12 = objc_msgSend(ValueAtIndex, "explanation");
        -[MXAudioStatistics sendSinglePerformanceMessageForAssertion:explanation:activity:](v11, "sendSinglePerformanceMessageForAssertion:explanation:activity:", "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID", v12, kMXAudioStatistics_AssertionActivity_AssertionInvalidated);
        objc_msgSend(ValueAtIndex, "invalidate");
        CFArrayRemoveValueAtIndex(MutableCopy, v6--);
      }
      ++v6;
      if (MutableCopy)
        break;
LABEL_6:
      if ((v6 & 0x8000000000000000) == 0)
      {
        v13 = (const void *)gProcessAssertionArray;
        gProcessAssertionArray = 0;
        if (v13)
          goto LABEL_18;
        goto LABEL_19;
      }
    }
  }
  v13 = (const void *)gProcessAssertionArray;
  gProcessAssertionArray = (uint64_t)MutableCopy;
  CFRetain(MutableCopy);
  if (v13)
LABEL_18:
    CFRelease(v13);
LABEL_19:
  if (MutableCopy)
    CFRelease(MutableCopy);
  v14 = (void *)objc_msgSend((id)gHostProcessAssertionDictionary, "mutableCopy");
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v15 = (void *)objc_msgSend(v14, "allKeys");
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v31 != v18)
          objc_enumerationMutation(v15);
        v20 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
        v21 = (void *)objc_msgSend(v14, "objectForKey:", v20);
        v22 = objc_msgSend((id)objc_msgSend(v21, "explanation"), "containsString:", a1);
        v23 = objc_msgSend(a2, "containsObject:", v20);
        if (v22 && (v23 & 1) == 0)
        {
          v24 = MXGetAssertionLog();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136447490;
            v36 = "-MX_RunningBoardServices-";
            v37 = 2082;
            v38 = "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID";
            v39 = 1024;
            v40 = 1124;
            v41 = 2048;
            v42 = v21;
            v43 = 1024;
            v44 = a3;
            v45 = 2114;
            v46 = a1;
            _os_log_impl(&dword_1935FC000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidating unaccounted assertion %p for reason %u as its explanation contains matching session id %{public}@", buf, 0x36u);
          }
          v25 = +[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance");
          v26 = objc_msgSend(v21, "explanation");
          -[MXAudioStatistics sendSinglePerformanceMessageForAssertion:explanation:activity:](v25, "sendSinglePerformanceMessageForAssertion:explanation:activity:", "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID", v26, kMXAudioStatistics_AssertionActivity_AssertionInvalidated);
          objc_msgSend(v21, "invalidate");
          objc_msgSend(v14, "removeObjectForKey:", v20);
        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v17);
  }
  v27 = (const void *)gHostProcessAssertionDictionary;
  gHostProcessAssertionDictionary = (uint64_t)v14;
  if (v14)
    CFRetain(v14);
  if (v27)
    CFRelease(v27);

  MEMORY[0x1940352C8](gProcessAssertionMutex);
  objc_autoreleasePoolPop(context);
}

void __cmsHandleIdleSleep_block_invoke(uint64_t a1)
{
  int v2;
  int v3;
  char v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[5];
  char v8;

  if (objc_msgSend(*(id *)(a1 + 32), "idleSleepPreventorUpdaterTimer"))
  {
    dispatch_source_cancel((dispatch_source_t)objc_msgSend(*(id *)(a1 + 32), "idleSleepPreventorUpdaterTimer"));
    objc_msgSend(*(id *)(a1 + 32), "setIdleSleepPreventorUpdaterTimer:", 0);
  }
  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "idleSleepPreventorAllocated");
  if (v2)
  {
    if ((v3 & 1) == 0)
    {
      v4 = 1;
LABEL_8:
      v5 = *(void **)(a1 + 32);
      v6 = MXGetSerialQueue();
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __cmsHandleIdleSleep_block_invoke_2;
      v7[3] = &unk_1E309F228;
      v7[4] = *(_QWORD *)(a1 + 32);
      v8 = v4;
      objc_msgSend(v5, "setIdleSleepPreventorUpdaterTimer:", FigRoutingManagerCreateOneShotTimer(v6, 10.0, (uint64_t)v7, 0, 0));
    }
  }
  else if (v3)
  {
    v4 = 0;
    goto LABEL_8;
  }

}

void CMSMSleep_UpdateIdleSleepPreventor(void *a1, int a2)
{
  if (objc_msgSend(a1, "idleSleepPreventorUpdaterTimer"))
  {
    dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "idleSleepPreventorUpdaterTimer"));
    objc_msgSend(a1, "setIdleSleepPreventorUpdaterTimer:", 0);
  }
  if (a2)
    CMSMSleep_CreateIdleSleepPreventorForSession(a1, 0);
  else
    CMSMSleep_ReleaseIdleSleepPreventorForSession(a1);
}

BOOL vaemCurrentRouteHasInputGainControl()
{
  OSStatus PropertyData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;

  outData = 1;
  *(_QWORD *)&inAddress.mSelector = 0x696E707476637370;
  inAddress.mElement = 0;
  ioDataSize = 4;
  PropertyData = AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
  return (PropertyData | outData) != 0;
}

uint64_t HandleRoutingContextRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  value = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294951138;
  return v6;
}

uint64_t FigRoutingContextGetTypeID()
{
  if (FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce != -1)
    dispatch_once(&FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce, &__block_literal_global_10);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigRoutingContextXPCHandleCopyPropertyMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, CFTypeRef, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;
  CFTypeRef v9;

  cf = 0;
  v9 = 0;
  v2 = FigXPCMessageCopyCFString();
  if ((_DWORD)v2)
  {
    v6 = v2;
  }
  else
  {
    v3 = *(uint64_t (**)(uint64_t, CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v3)
    {
      v4 = v3(a1, v9, *MEMORY[0x1E0C9AE00], &cf);
      v5 = cf;
      if (!(_DWORD)v4)
      {
        v6 = FigXPCMessageSetCFObject();
        v5 = cf;
        if (!cf)
          goto LABEL_7;
        goto LABEL_5;
      }
      v6 = v4;
      if (cf)
LABEL_5:
        CFRelease(v5);
    }
    else
    {
      v6 = 4294954514;
    }
  }
LABEL_7:
  if (v9)
    CFRelease(v9);
  return v6;
}

uint64_t routingContext_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t UpTimeNanoseconds;
  uint64_t *DerivedStorage;
  const void *StateInfoStringForContext;
  void *v11;
  uint64_t v12;
  int DoesContextSupportWHAMultiDeviceRouting;
  const void **v15;
  CFTypeRef *v16;
  unsigned int v17;
  _QWORD *v18;
  NSObject *SharedQueue;
  _QWORD v20[9];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("contextUUID")))
  {
    if (CFEqual(a2, CFSTR("stateInfo")))
    {
      StateInfoStringForContext = FigRoutingContextUtilities_CreateStateInfoStringForContext(DerivedStorage[1]);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("contextType")))
    {
      StateInfoStringForContext = CFNumberCreate(a3, kCFNumberSInt32Type, DerivedStorage);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("supportsWHAMultiDeviceRouting")))
    {
      DoesContextSupportWHAMultiDeviceRouting = FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting(DerivedStorage[1]);
      v15 = (const void **)MEMORY[0x1E0C9AE50];
      if (!DoesContextSupportWHAMultiDeviceRouting)
        v15 = (const void **)MEMORY[0x1E0C9AE40];
      StateInfoStringForContext = *v15;
      if (!*v15)
        goto LABEL_8;
      goto LABEL_3;
    }
    if (CFEqual(a2, CFSTR("supportsBluetoothMultiDeviceRouting")))
    {
      if (((*(_DWORD *)DerivedStorage - 1) & 0xFFFFFFFD) != 0)
        v16 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      else
        v16 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("allowsRealTimeAudioPlaybackForNullPickedEndpoint")))
    {
      v17 = *(_DWORD *)DerivedStorage - 1;
      if (v17 < 0xD)
      {
        v18 = &unk_1E309D9B8;
LABEL_25:
        v16 = (CFTypeRef *)v18[v17];
LABEL_29:
        StateInfoStringForContext = CFRetain(*v16);
        goto LABEL_8;
      }
    }
    else if (CFEqual(a2, CFSTR("allowsRealTimeAudioPlaybackForNonNullPickedEndpoint")))
    {
      v17 = *(_DWORD *)DerivedStorage - 1;
      if (v17 < 0xD)
      {
        v18 = &unk_1E309DA20;
        goto LABEL_25;
      }
    }
    else if (!CFEqual(a2, CFSTR("remoteControlChannelAvailable")) && !CFEqual(a2, CFSTR("supportsCopyRemoteContext")))
    {
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __routingContext_CopyProperty_block_invoke;
      v20[3] = &unk_1E30995C8;
      v20[6] = DerivedStorage;
      v20[7] = a4;
      v20[8] = a1;
      v20[4] = &v21;
      v20[5] = a2;
      MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyProperty", (uint64_t)"FigRoutingContext.m", 472, 0, 0, SharedQueue, (uint64_t)v20);
      goto LABEL_9;
    }
    v16 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_29;
  }
  StateInfoStringForContext = (const void *)DerivedStorage[1];
  if (StateInfoStringForContext)
LABEL_3:
    StateInfoStringForContext = CFRetain(StateInfoStringForContext);
LABEL_8:
  *a4 = StateInfoStringForContext;
LABEL_9:
  v11 = (void *)MEMORY[0x194035B20]();
  -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_CopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  objc_autoreleasePoolPop(v11);
  v12 = *((unsigned int *)v22 + 6);
  _Block_object_dispose(&v21, 8);
  return v12;
}

void sub_193661DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFDictionary *routingContextServerXPC_CopyOptionsWithClientPIDAndName(_xpc_connection_s *a1, const __CFDictionary *a2, const void *a3, const void *a4)
{
  pid_t pid;
  const __CFAllocator **v8;
  int v9;
  const __CFAllocator *v10;
  const void *SInt32;
  unsigned int v12;
  CFStringRef v13;
  const __CFAllocator *v14;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v16;
  _OWORD v20[8];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  pid = xpc_connection_get_pid(a1);
  memset(v20, 0, sizeof(v20));
  v8 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (pid < 1)
  {
    SInt32 = 0;
    v13 = 0;
  }
  else
  {
    v9 = pid;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    v12 = proc_name(v9, v20, 0x80u);
    if ((v12 & 0x80000000) == 0)
      *((_BYTE *)v20 + v12) = 0;
    v13 = CFStringCreateWithCString(v10, (const char *)v20, 0x8000100u);
  }
  v14 = *v8;
  if (a2)
    MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, a2);
  else
    MutableCopy = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = MutableCopy;
  if (a3)
  {
    if (!CFDictionaryContainsKey(MutableCopy, a3) && SInt32 != 0)
      CFDictionarySetValue(v16, a3, SInt32);
  }
  if (a4)
  {
    if (!CFDictionaryContainsKey(v16, a4) && v13 != 0)
      FigCFDictionarySetValue();
  }
  if (SInt32)
    CFRelease(SInt32);
  if (v13)
    CFRelease(v13);
  return v16;
}

uint64_t FigRoutingContextServerCheckEntitlements(uint64_t a1, int a2, _BYTE *a3)
{
  char HasEntitlement;
  int v6;
  BOOL v7;
  uint64_t result;
  Boolean v9;
  Boolean keyExistsAndHasValidFormat;

  a3[1] = FigXPCConnectionHasEntitlement();
  HasEntitlement = FigXPCConnectionHasEntitlement();
  keyExistsAndHasValidFormat = 0;
  CFPreferencesGetAppBooleanValue(CFSTR("ForceEnforcementOfSetOutputDeviceEntitlement"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  a3[2] = HasEntitlement;
  v6 = FigXPCConnectionHasEntitlement();
  v7 = (v6 | FigXPCConnectionHasEntitlement()) != 0;
  v9 = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("ForceEnforcementOfDeviceDetailsEntitlement"), CFSTR("com.apple.coremedia"), &v9);
  a3[3] = (!v9 || !(_DWORD)result) && a2 == 6 || v7;
  return result;
}

uint64_t CreateRoutingContextServerState(_QWORD *a1)
{
  void *v2;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D36CB8EBuLL);
  if (v2)
    result = 0;
  else
    result = FigSignalErrorAt();
  *a1 = v2;
  return result;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteDescriptorsMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  const __CFArray *v6;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v4)
  {
    v5 = v4(a1, &cf);
    if ((_DWORD)v5)
    {
      v14 = v5;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 3))
      {
        v6 = (const __CFArray *)cf;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (v6)
        {
          Count = CFArrayGetCount(v6);
          if (Count >= 1)
          {
            v9 = Count;
            for (i = 0; i != v9; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, i);
              v12 = frcXPCServer_copySanitizedRouteDescriptor(ValueAtIndex);
              CFArrayAppendValue(Mutable, v12);
              if (v12)
                CFRelease(v12);
            }
          }
        }
        v13 = cf;
        cf = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        if (v13)
          CFRelease(v13);
        if (Mutable)
          CFRelease(Mutable);
      }
      FigXPCMessageSetCFArray();
      v14 = 0;
    }
  }
  else
  {
    v14 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t routingContext_CopySelectedRouteDescriptors(uint64_t a1, CFTypeRef *a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;
  CFTypeRef v6;
  void *v7;
  CFTypeRef cf;

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    cf = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    IsOperationOnSystemInputContextAllowedInternal = FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors(*(_QWORD *)(DerivedStorage + 8), (uint64_t)&cf);
    v6 = cf;
    if ((_DWORD)IsOperationOnSystemInputContextAllowedInternal)
    {
      if (!cf)
      {
LABEL_7:
        v7 = (void *)MEMORY[0x194035B20](v6);
        -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_CopySelectedRouteDescriptors", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
        objc_autoreleasePoolPop(v7);
        return IsOperationOnSystemInputContextAllowedInternal;
      }
      CFRelease(cf);
    }
    else
    {
      *a2 = cf;
    }
    cf = 0;
    goto LABEL_7;
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 4294949876;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = v4;
  v9[6] = a1;
  v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors", (uint64_t)"FigRoutingManagerContextUtilities.m", 5236, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1936623E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CFDictionary *frcXPCServer_copySanitizedRouteDescriptor(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  CFIndex Count;
  __CFArray *v5;
  __CFDictionary *v6;
  CFIndex v7;
  const void *ValueAtIndex;
  const __CFString *Value;
  const __CFString *v10;
  __CFDictionary *v11;
  const void *v12;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, CFSTR("RouteSupportsAudio"));
  CFArrayAppendValue(Mutable, CFSTR("RouteSupportsAirPlayVideo"));
  CFArrayAppendValue(Mutable, CFSTR("RouteSupportsAirPlayScreen"));
  CFArrayAppendValue(Mutable, CFSTR("AudioRouteName"));
  CFArrayAppendValue(Mutable, CFSTR("AudioRouteSubType"));
  CFArrayAppendValue(Mutable, CFSTR("RouteSupportsAirPlayMusic"));
  CFArrayAppendValue(Mutable, CFSTR("RouteHasAirPlayCloudConnectivity"));
  CFArrayAppendValue(Mutable, CFSTR("ExternalPlaybackCannotFetchMediaFromSender"));
  CFArrayAppendValue(Mutable, CFSTR("ExternalPlaybackDoesNotSupportEncryptedCRABS"));
  CFArrayAppendValue(Mutable, CFSTR("ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets"));
  CFArrayAppendValue(Mutable, CFSTR("RouteName"));
  if (Mutable)
    Count = CFArrayGetCount(Mutable);
  else
    Count = 0;
  v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v5, CFSTR("RouteUID"));
  CFArrayAppendValue(v5, CFSTR("RouteName"));
  CFArrayAppendValue(v5, CFSTR("GroupUUID"));
  CFArrayAppendValue(v5, CFSTR("TightSyncUUID"));
  if (a1)
  {
    v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    if (Count >= 1)
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v7);
        Value = (const __CFString *)CFDictionaryGetValue(a1, ValueAtIndex);
        if (Value)
          break;
        if (FigCFArrayContainsValue())
        {
          v11 = v6;
          v12 = ValueAtIndex;
          v10 = CFSTR("*** Missing entitlement ***");
          goto LABEL_11;
        }
LABEL_12:
        if (Count == ++v7)
          goto LABEL_13;
      }
      v10 = Value;
      v11 = v6;
      v12 = ValueAtIndex;
LABEL_11:
      CFDictionarySetValue(v11, v12, v10);
      goto LABEL_12;
    }
LABEL_13:
    if (!CFDictionaryContainsKey(v6, CFSTR("RouteName")))
      CFDictionarySetValue(v6, CFSTR("RouteName"), CFSTR("*** Missing entitlement ***"));
  }
  else
  {
    v6 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t FigRoutingContextXPCHandleCopySelectedBufferedEndpointMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  FigXPCMessageCopyCFString();
  v3 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (!v3)
    return 4294954514;
  v4 = v3(a2, 0, &cf);
  v5 = cf;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!cf)
      return v6;
LABEL_5:
    CFRelease(v5);
    return v6;
  }
  if (!cf)
    return 0;
  v6 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  v5 = cf;
  if (cf)
    goto LABEL_5;
  return v6;
}

uint64_t routingContext_CopySelectedBufferedEndpoint(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  const void *v8;
  _QWORD *v9;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __routingContext_CopySelectedBufferedEndpoint_block_invoke;
    v11[3] = &unk_1E3098D60;
    v11[4] = &v12;
    v11[5] = DerivedStorage;
    v11[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedBufferedEndpoint", (uint64_t)"FigRoutingContext.m", 1456, 0, 0, SharedQueue, (uint64_t)v11);
    v9 = v13 + 3;
    v8 = (const void *)v13[3];
    if (a3)
    {
      *a3 = v8;
    }
    else
    {
      if (!v8)
      {
LABEL_7:
        _Block_object_dispose(&v12, 8);
        return IsOperationOnSystemInputContextAllowedInternal;
      }
      CFRelease(v8);
      v9 = v13 + 3;
    }
    *v9 = 0;
    goto LABEL_7;
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193662860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerGetSharedQueue()
{
  uint64_t v0;

  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  v0 = (uint64_t)&qword_1EE2B2880;
  if (!qword_1EE2B2880)
    v0 = 8;
  return *(_QWORD *)v0;
}

uint64_t FigRoutingContextCopyContextForUUID(int a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  const void *Value;
  const void *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v13;

  Value = CFDictionaryGetValue(theDict, CFSTR("contextUUID"));
  if (!Value)
    return 4294955276;
  v6 = Value;
  cf = 0;
  v7 = FigRoutingManagerCopyContextWithUUID((uint64_t)Value, (uint64_t)&cf);
  if ((_DWORD)v7)
    v8 = 0;
  else
    v8 = cf == 0;
  if (v8)
  {
    FigCFDictionaryGetInt64IfPresent();
    v13 = 0;
    FigRoutingContextGetClassID();
    v7 = CMDerivedObjectCreate();
    if ((_DWORD)v7
      || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
          v11 = CFRetain(v6),
          *(_QWORD *)(DerivedStorage + 8) = v11,
          *(_DWORD *)DerivedStorage = 0,
          v7 = FigRoutingManagerRegisterContextWithUUID((uint64_t)v13, theDict, 0, v11),
          (_DWORD)v7))
    {
      if (v13)
        CFRelease(v13);
    }
    else
    {
      cf = v13;
    }
  }
  if (!a3 || (_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v7;
}

uint64_t FigRoutingManagerCopyContextWithUUID(uint64_t a1, uint64_t a2)
{
  if (a2)
    return FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(a1, a2);
  else
    return 4294955276;
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[7];

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  result = 4294949876;
  if (a2 && a1)
  {
    if (byte_1EE2B2EB0)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID_block_invoke;
      v5[3] = &__block_descriptor_56_e5_v8__0l;
      v5[4] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v5[5] = a1;
      v5[6] = a2;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 2551, 0, 0, qword_1EE2B2EA0, (uint64_t)v5);
      return 0;
    }
  }
  return result;
}

uint64_t routingContext_copySystemContext(unsigned int a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigRoutingManagerCopySystemContext((uint64_t)&cf, a1);
  if (!a2 || (_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigRoutingManagerCopySystemContext(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0xE && ((1 << a2) & 0x7E0E) != 0)
    return FigRoutingManagerContextUtilities_CopySystemRoutingContext(a2, a1);
  else
    return 4294955276;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRoutingContext(unsigned int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[6];
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a2)
    return 4294949876;
  v3 = 4294949876;
  if (a1 <= 0xE && ((1 << a1) & 0x7E0E) != 0)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v5 = (uint64_t)&qword_1EE2B2EA0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    if (!byte_1EE2B2EB0)
      v5 = 504;
    v6 = *(NSObject **)v5;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingManagerContextUtilities_CopySystemRoutingContext_block_invoke;
    v8[3] = &unk_1E3098DB0;
    v9 = a1;
    v8[4] = &v10;
    v8[5] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRoutingContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 2652, 0, 0, v6, (uint64_t)v8);
    v3 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v3;
}

void sub_193662D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextXPCHandleCopyPredictedSelectedRouteDescriptorMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  __CFDictionary *v6;
  __CFDictionary *v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (v4)
  {
    v5 = v4(a1, &cf);
    if ((_DWORD)v5)
    {
      v9 = v5;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 3))
      {
        v6 = frcXPCServer_copySanitizedRouteDescriptor((const __CFDictionary *)cf);
        v7 = v6;
        v8 = cf;
        cf = v6;
        if (v6)
          CFRetain(v6);
        if (v8)
          CFRelease(v8);
        if (v7)
          CFRelease(v7);
      }
      FigXPCMessageSetCFDictionary();
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t routingContext_CopyPredictedSelectedRouteDescriptor(uint64_t a1, _QWORD *a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  const void *v7;
  _QWORD *v8;
  _QWORD v10[6];
  CFTypeRef cf;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if ((_DWORD)IsOperationOnSystemInputContextAllowedInternal)
    return IsOperationOnSystemInputContextAllowedInternal;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a1, (uint64_t)&cf);
  if (!FigPredictedRouting_IsSupported((uint64_t)cf, 0)
    || !MXBluetoothServices_AreManagedPortsAvailable()
    && !FigPredictedRouting_IsPreemptivePortChanged())
  {
    if (a2)
      *a2 = 0;
    goto LABEL_12;
  }
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __routingContext_CopyPredictedSelectedRouteDescriptor_block_invoke;
  v10[3] = &unk_1E3098D88;
  v10[4] = &v12;
  v10[5] = DerivedStorage;
  MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyPredictedSelectedRouteDescriptor", (uint64_t)"FigRoutingContext.m", 1500, 0, 0, SharedQueue, (uint64_t)v10);
  v8 = v13 + 3;
  v7 = (const void *)v13[3];
  if (a2)
  {
    *a2 = v7;
LABEL_11:
    *v8 = 0;
    goto LABEL_12;
  }
  if (v7)
  {
    CFRelease(v7);
    v8 = v13 + 3;
    goto LABEL_11;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v12, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193662F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXBluetoothServices_AreManagedPortsAvailable()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!mxBluetoothServices_isBluetoothServicesLoaded())
    return 0;
  objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "lock");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = (void *)gBluetoothPortsToBTManagedMapping;
  v1 = objc_msgSend((id)gBluetoothPortsToBTManagedMapping, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        if ((objc_msgSend((id)objc_msgSend((id)gBluetoothPortsToBTManagedMapping, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v4)), "BOOLValue") & 1) != 0)
        {
          v5 = 1;
          goto LABEL_12;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_12:
  objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock");
  return v5;
}

uint64_t FigPredictedRouting_IsSupported(uint64_t a1, int a2)
{
  uint64_t result;
  int ContextType;

  if (!a2 || (result = MX_FeatureFlags_IsMandrakeEverywhereEnabled(), (_DWORD)result))
  {
    if (predictedRouting_initialize_onceToken == -1)
    {
      if (a1)
        goto LABEL_5;
    }
    else
    {
      dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
      if (a1)
      {
LABEL_5:
        ContextType = FigRoutingManagerContextUtilities_GetContextType(a1);
        if (a2)
          return ContextType == 3;
        else
          return (ContextType & 0xFFFFFFFD) == 1;
      }
    }
    return 1;
  }
  return result;
}

uint64_t FigRoutingContextCopySystemMusicContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(3u, a3);
}

uint64_t FigRoutingContextCopySystemAudioContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(1u, a3);
}

uint64_t FigPredictedRouting_MuteSessionIfPreemptivePortChanged(uint64_t a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  MXSessionManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if ((_DWORD)result)
  {
    result = FigPredictedRouting_IsPreemptivePortChanged();
    if ((_DWORD)result)
    {
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v5, v6), "startAsyncDuckingOperation");
      v4 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      -[MXSessionManager duckVolume:duckerSession:duckingSource:](v4, "duckVolume:duckerSession:duckingSource:", a1, 0, gPRS_3);
      -[MXSessionManager endAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperation");
      result = FigPredictedRouting_IsPreemptivePortChangedTimerActive();
      if (!(_DWORD)result)
        return FigPredictedRouting_StartPreemptivePortChangedTimer();
    }
  }
  return result;
}

uint64_t FigPredictedRouting_IsPreemptivePortChanged()
{
  uint64_t v0;

  if (!FigPredictedRouting_IsPreemptivePortLogicEnabled())
    return 0;
  MEMORY[0x1940352BC](gPRS_0);
  v0 = gPRS_5;
  MEMORY[0x1940352C8](gPRS_0);
  return v0;
}

BOOL FigPredictedRouting_IsPreemptivePortLogicEnabled()
{
  int IsPreemptiveConnectedBannerEnabled;

  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  IsPreemptiveConnectedBannerEnabled = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  return (MX_FeatureFlags_IsCorianderEnabled() | IsPreemptiveConnectedBannerEnabled) != 0;
}

uint64_t MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsCorianderEnabled()
{
  if (MX_FeatureFlags_IsCorianderEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsCorianderEnabled_onceToken, &__block_literal_global_6);
  return MX_FeatureFlags_IsCorianderEnabled_corianderEnabled;
}

id CMSUtility_CopyBundleID(void *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution"), "firstObject"), "valueForKey:", CFSTR("BundleID"));
  if (!v2)
  {
    v2 = (void *)objc_msgSend((id)objc_msgSend(-[MXMediaEndowmentManager getRecordingAttributions:](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "getRecordingAttributions:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue")), "firstObject"), "valueForKey:", CFSTR("BundleID"));
    if (!v2)
      v2 = (void *)objc_msgSend(a1, "displayID");
  }
  return v2;
}

uint64_t CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded()
{
  void *v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  NSArray *v7;
  uint64_t result;
  uint64_t v9;
  NSArray *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = -[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs");
  MEMORY[0x1940352BC](gCMSM);
  v11 = byte_1EE2B3C99;
  MEMORY[0x1940352C8](gCMSM);
  MEMORY[0x1940352BC](gCMSM);
  byte_1EE2B3C99 = 0;
  dword_1EE2B3C00 = 0;
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v6, "isRecording"))
        {
          byte_1EE2B3C99 = 1;
          dword_1EE2B3C00 = objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
          objc_msgSend(v0, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")));
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v3);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  MEMORY[0x1940352C8](gCMSM);
  -[MXSessionManager setRecordingClientPIDs:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setRecordingClientPIDs:", v0);
  CMSMUtility_UpdateSomeRecordingSessionPresentThatDisallowsSystemSounds();
  v7 = -[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs");
  if (v11 != byte_1EE2B3C99
    || (result = -[NSArray isEqualToArray:](v10, "isEqualToArray:", v7), (result & 1) == 0))
  {
    MX_SystemStatus_PublishRecordingClientsInfo();
    if (byte_1EE2B3C99)
      v9 = dword_1EE2B3C00;
    else
      v9 = 0;
    return CMSMNotificationUtility_PostRecordingStateDidChange(byte_1EE2B3C99, v9, (uint64_t)v7);
  }
  return result;
}

void vaemVADSerializationListener(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[5];

  v2 = MXGetSerialQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __vaemVADSerializationListener_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = a1;
  MXDispatchAsync((uint64_t)"vaemVADSerializationListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 8185, 0, 0, v2, (uint64_t)v3);
}

void MXEndpointDescriptorAvailableEndpointsDidChangeHandler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  if (a4)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0C99D68]);
    MEMORY[0x1940352BC](objc_msgSend(a2, "_getCacheMutex"));
    cf = 0;
    CMBaseObject = FigEndpointManagerGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(CMBaseObject, *MEMORY[0x1E0CA3A40], *MEMORY[0x1E0C9AE00], &cf);
    if (!FigCFEqual())
      objc_msgSend(a2, "_availableEndpointsDidChangeForEndpointManager:atDate:", a4, v10);
    MEMORY[0x1940352C8](objc_msgSend(a2, "_getCacheMutex"));
    FigRouteDiscoveryManagerNotificationHandler(a1, a2, a3, a4, a5);

    if (cf)
      CFRelease(cf);
  }
}

void discoveryManager_notificationHandler()
{
  char *v0;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v3;
  CFTypeRef cf;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v0 = discoverManager_getSharedManager_discoveryState;
  else
    v0 = 0;
  if (FigCFEqual())
  {
    cf = 0;
    CMBaseObject = FigEndpointManagerGetCMBaseObject();
    v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v2)
      v2(CMBaseObject, *MEMORY[0x1E0CA3A40], *MEMORY[0x1E0C9AE00], &cf);
    if (FigCFEqual())
    {
      v3 = MXGetSerialQueue();
      MXDispatchAsync((uint64_t)"discoveryManager_notificationHandler", (uint64_t)"FigRouteDiscoveryManager.m", 2242, 0, 0, v3, (uint64_t)&__block_literal_global_36);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    discoveryManager_postNotificationToAllDiscoverers((uint64_t)v0, CFSTR("Discoverer_AvailableRoutesChanged"), 0);
  }
  else if (FigCFEqual())
  {
    discoveryManager_postNotificationToAllDiscoverers((uint64_t)v0, CFSTR("Discoverer_RoutePresentChanged"), 0);
  }
}

void discoveryManager_postNotificationToAllDiscoverers(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  id v6;
  NSObject *v7;
  _QWORD v8[6];
  _QWORD v9[8];

  if (cf)
    CFRetain(cf);
  if (a3)
    CFRetain(a3);
  v6 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke;
  v9[3] = &unk_1E3098E80;
  v9[4] = v6;
  v9[5] = a1;
  v9[6] = cf;
  v9[7] = a3;
  v7 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke_39;
  v8[3] = &unk_1E3098EA8;
  v8[4] = v9;
  v8[5] = a1;
  MXDispatchAsync((uint64_t)"discoveryManager_postNotificationToAllDiscoverers", (uint64_t)"FigRouteDiscoveryManager.m", 457, 0, 0, v7, (uint64_t)v8);
}

uint64_t CMSMUtility_UpdatePlayAndRecordAppSpeechState(void *a1)
{
  int v1;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = dword_1EE2B3C9C;
  MEMORY[0x1940352BC](gCMSM);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v8, "isActive")
          && CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)v8))
        {
          if (objc_msgSend(v8, "isRecording")
            && ((objc_msgSend(v8, "isTheAssistant") & 1) != 0 || (objc_msgSend(v8, "hasPhoneCallBehavior") & 1) == 0))
          {
            dword_1EE2B3C9C = 11;
            v5 = 1;
            goto LABEL_17;
          }
          dword_1EE2B3C9C = 10;
          v5 = 1;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_17:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (!v5)
  {
    if (CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired())
    {
      v9 = -1;
    }
    else if (a1 && CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a1))
    {
      v9 = 10;
    }
    else if ((v1 & 0xFFFFFFFE) == 0xA)
    {
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    dword_1EE2B3C9C = v9;
  }
  result = MEMORY[0x1940352C8](gCMSM);
  if (v1 != dword_1EE2B3C9C)
  {
    result = FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1);
    if ((_DWORD)result)
    {
      v11 = dword_1EE2B3C9C;
      if (CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired())
      {
        v12 = 0;
      }
      else if ((objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0
             || CMSUtility_IsAudioCategoryRingtone(a1))
      {
        v12 = 1;
      }
      else if (CMSMUtility_PhoneCallOrRingtoneExists() | byte_1EE2B3CA0)
      {
        v12 = 1;
      }
      else
      {
        v12 = 0xFFFFFFFFLL;
      }
      return FigEndpointCentralUpdateiOSDeviceState(qword_1EE2B3CD8, v12, v11, (uint64_t)CFSTR("PlayAndRecord category app activity"), 0);
    }
  }
  return result;
}

uint64_t CMSMUtility_ShouldCarPlaySpeechAppStateBeSet(uint64_t result)
{
  void *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (result)
  {
    v1 = (void *)result;
    if (-[MXSessionManager sessionUtilizesIndependentRecordingOnly:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "sessionUtilizesIndependentRecordingOnly:", result))
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    if (CMSUtility_IsAudioModeCameraRelated((uint64_t)v1)
      || CMSUtility_IsAudioCategoryVoicemail(v1))
    {
      return 0;
    }
    if (CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(v1, "audioCategory")))
      return 1;
    else
      return objc_msgSend(v1, "hasPhoneCallBehavior");
  }
  return result;
}

uint64_t CMSUtility_IsAudioModeCameraRelated(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    objc_msgSend((id)result, "audioMode");
    if (FigCFEqual())
      return 1;
    objc_msgSend(v1, "audioMode");
    if (FigCFEqual())
      return 1;
    objc_msgSend(v1, "audioMode");
    if (FigCFEqual())
      return 1;
    objc_msgSend(v1, "audioMode");
    if (FigCFEqual())
      return 1;
    objc_msgSend(v1, "audioMode");
    result = FigCFEqual();
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

BOOL CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired()
{
  CFTypeRef v0;
  CFTypeRef v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v4;
  _BOOL8 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  if (v1)
  {
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
    {
      v3(CMBaseObject, *MEMORY[0x1E0CA4478], *MEMORY[0x1E0C9AE00], cf);
      v4 = cf[0];
    }
    else
    {
      v4 = 0;
    }
    v5 = v4 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v4 = cf[0];
    }
    if (v4)
      CFRelease(v4);
  }
  else
  {
    v5 = 0;
  }
  if (v0)
    CFRelease(v0);
  if (v1)
    CFRelease(v1);
  return v5;
}

CFTypeRef FigRoutingManagerCopyActivatedCarPlayEndpoint(uint64_t a1)
{
  CFTypeRef v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  if (!a1)
    return 0;
  theArray = 0;
  v1 = 0;
  if (!FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray))
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
        goto LABEL_12;
      v3 = Count;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
          break;
        if (v3 == ++v4)
          goto LABEL_12;
      }
      if (ValueAtIndex)
        v1 = CFRetain(ValueAtIndex);
      else
LABEL_12:
        v1 = 0;
      goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  if (theArray)
    CFRelease(theArray);
  return v1;
}

CFTypeRef CMSMUtility_CopySystemAudioRoutingContextUUID()
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EE2B3CF0;
  if (qword_1EE2B3CF0)
    return CFRetain(result);
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&qword_1EE2B3CF0);
  result = (CFTypeRef)qword_1EE2B3CF0;
  if (qword_1EE2B3CF0)
    return CFRetain(result);
  return result;
}

void *CMSUtility_IsAudioCategoryVoicemail(void *result)
{
  if (result)
  {
    objc_msgSend(result, "audioCategory");
    return (void *)FigCFEqual();
  }
  return result;
}

uint64_t CMSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  int v9;
  uint64_t UpTimeNanoseconds;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v8 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v9 = objc_msgSend(a1, "copyPropertyForKey:valueOut:", a2, a4);
    *((_DWORD *)v16 + 6) = v9;
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v11 = MXGetSerialQueue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __CMSessionCopyProperty_block_invoke;
    v14[3] = &unk_1E30995C8;
    v14[4] = &v15;
    v14[5] = a1;
    v14[6] = a2;
    v14[7] = a3;
    v14[8] = a4;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionCopyProperty", (uint64_t)"CMSession_CInterface.m", 560, 0, 0, v11, (uint64_t)v14);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "CMSessionCopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  }
  objc_autoreleasePoolPop(v8);
  v12 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v12;
}

void sub_193665684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionCopyProperty(_QWORD *a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t UpTimeNanoseconds;
  void *v11;

  v8 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v9 = objc_msgSend(a1, "copyPropertyForKey:valueOut:", a2, a4);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      v11 = (void *)a1[2];
    else
      v11 = 0;
    v9 = MXCoreSessionCopyProperty(v11, a2, a3, a4);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_CMSessionCopyProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  }
  objc_autoreleasePoolPop(v8);
  return v9;
}

void *isCoreSessionSidekick(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isMemberOfClass:", objc_opt_class());
  return result;
}

uint64_t MXCoreSessionSetProperty(void *a1, const __CFString *cf1, NSDictionary *a3, void *a4)
{
  const __CFString *v4;
  void *v5;
  CFTypeID v6;
  int v7;
  NSDictionary *v8;
  char v9;
  CFTypeID v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  CFTypeID v15;
  int Value;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v21;
  uint64_t IsPlaying;
  CFTypeID v23;
  CFTypeID v24;
  uint64_t v25;
  int v26;
  CFTypeID v27;
  CFTypeID v28;
  BOOL v29;
  uint64_t v30;
  CFTypeID v31;
  BOOL v32;
  uint64_t v33;
  uint64_t updated;
  CFTypeID v35;
  double v36;
  CFTypeID v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  CFTypeID v42;
  float v43;
  int v44;
  NSObject *v45;
  CFTypeID v46;
  int v47;
  CFTypeID v48;
  CFTypeID v49;
  CFTypeID v50;
  NSObject *v51;
  CFTypeID v52;
  CFTypeID v53;
  CFTypeID v54;
  CFTypeID v55;
  CFTypeID v56;
  double v57;
  CFTypeID v58;
  int v59;
  NSObject *v60;
  CFTypeID v61;
  BOOL v62;
  uint64_t v63;
  CFTypeID v64;
  CFTypeID v65;
  BOOL v66;
  uint64_t v67;
  CFTypeID v68;
  CFTypeID v69;
  uint64_t v70;
  int v71;
  NSObject *v72;
  CFTypeID v73;
  int v74;
  NSObject *v75;
  _BOOL8 v76;
  CFTypeID v77;
  CFTypeID v78;
  NSObject *v79;
  CFTypeID v80;
  CFTypeID v81;
  int v82;
  NSObject *v83;
  CFTypeID v84;
  int v85;
  CFTypeID v86;
  int v87;
  NSObject *v88;
  CFTypeID v89;
  int v90;
  NSObject *v91;
  CFTypeID v92;
  int v93;
  CFTypeID v94;
  int v95;
  CFTypeID v96;
  int v97;
  NSObject *v98;
  CFTypeID v99;
  int v100;
  NSObject *v101;
  CFTypeID v102;
  int v103;
  NSObject *v104;
  double v105;
  CFTypeID v106;
  int v107;
  double v108;
  CFTypeID v109;
  int v110;
  CFTypeID v111;
  int v112;
  void *v113;
  uint64_t v114;
  CFTypeID v115;
  id v116;
  CFTypeID v117;
  CFTypeID v118;
  _BOOL8 v119;
  CFTypeID v120;
  double v121;
  BOOL v122;
  uint64_t v123;
  int v124;
  CFTypeID v125;
  float ValueFloat32;
  NSObject *v127;
  uint64_t v128;
  CFTypeID v129;
  int v130;
  double v131;
  CFTypeID v132;
  int v133;
  CFTypeID v134;
  int v135;
  CFTypeID v136;
  BOOL v137;
  uint64_t v138;
  CFTypeID v139;
  CFTypeID v140;
  BOOL v141;
  uint64_t v142;
  CFTypeID v143;
  BOOL v144;
  uint64_t v145;
  CFTypeID v146;
  NSObject *v147;
  NSObject *v148;
  void *v149;
  CFTypeID v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  NSObject *v154;
  NSObject *v155;
  int v156;
  NSObject *v157;
  NSObject *v158;
  NSObject *v159;
  double v160;
  NSObject *v161;
  _BOOL8 v162;
  MXSessionManager *v163;
  double v164;
  double v165;
  uint64_t v166;
  CFTypeID v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t i;
  NSObject *v175;
  NSObject *v176;
  void *v177;
  NSObject *v178;
  void *v179;
  _BOOL8 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  void *v185;
  const __CFString *v186;
  const void *v187;
  char v188;
  char DoesPortSupportDoAP;
  uint64_t VolumeSequenceNumber;
  NSObject *v191;
  CFTypeID v192;
  const UInt8 *BytePtr;
  NSObject *v194;
  CFTypeID v195;
  void *v196;
  CFTypeID v197;
  int v198;
  NSObject *v199;
  CFTypeID v200;
  uint64_t v201;
  NSObject *v202;
  float v203;
  float v204;
  double v205;
  NSObject *v206;
  int v207;
  CFTypeID v208;
  int v209;
  CFTypeID v210;
  CFTypeID v211;
  CFTypeID v212;
  NSObject *v213;
  NSObject *v214;
  CFTypeID v215;
  CFTypeID v216;
  void *v217;
  NSDictionary *v218;
  CFTypeID v219;
  NSObject *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  const char *StyleString;
  float v225;
  CFTypeID v226;
  int v227;
  NSObject *v228;
  uint64_t v229;
  CFTypeID v230;
  int v231;
  NSObject *v232;
  CFTypeID v233;
  int v234;
  NSObject *v235;
  int IsSmartRoutingOnActivationEnabled;
  int v237;
  CFTypeID v238;
  int v239;
  CFTypeID v240;
  CFTypeID v241;
  uint64_t v242;
  int v243;
  NSObject *v244;
  CFTypeID v245;
  int v246;
  NSObject *v247;
  NSObject *v248;
  CFTypeID v249;
  double v250;
  double v251;
  double v252;
  const char *v253;
  unsigned int PreferredIOBufferFrames;
  const char *v255;
  float PreferredIOBufferDuration;
  _BOOL8 IsCategoryInputOnly;
  NSObject *v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  const char *v262;
  float v263;
  uint64_t v264;
  uint64_t v265;
  CFIndex j;
  const __CFNumber *ValueAtIndex;
  const void *v268;
  NSObject *v269;
  char v270;
  uint64_t v271;
  double v272;
  CFTypeID v273;
  double v274;
  double v275;
  double v276;
  const char *v277;
  unsigned int v278;
  const char *v279;
  float v280;
  _BOOL8 v281;
  NSObject *v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  const char *v286;
  unsigned int v287;
  double v288;
  char v289;
  uint64_t CurrentOutputVADID;
  char v291;
  CFTypeID v292;
  CFTypeID v293;
  CFTypeID v294;
  NSObject *v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  float v299;
  NSObject *v300;
  CFTypeID v301;
  NSDictionary *v302;
  NSObject *v303;
  NSObject *v304;
  CFTypeID v305;
  const __CFNumber *ValueUInt32;
  void *v307;
  NSDictionary *v308;
  NSObject *v309;
  CFTypeID v310;
  int v311;
  NSObject *v312;
  id v313;
  CFTypeID v314;
  id v315;
  CFTypeID v316;
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  CFTypeID v320;
  NSObject *v321;
  __CFArray *SubPortPreferenceFromPropertyValue;
  CFTypeID v323;
  NSObject *v324;
  CFTypeID v325;
  NSObject *v326;
  __CFArray *v327;
  __CFArray *v328;
  void *v329;
  CFTypeID v330;
  NSObject *v331;
  NSObject *v332;
  CFTypeID v333;
  CFTypeID v334;
  int v335;
  CFTypeID v336;
  int v337;
  _BOOL8 v338;
  void *v339;
  CFTypeID v340;
  NSObject *v341;
  CFTypeID v342;
  int v343;
  NSObject *v344;
  CFTypeID v345;
  CFTypeID v346;
  uint64_t v347;
  int v348;
  NSObject *v349;
  CFTypeID v350;
  int v351;
  void *SharePlayMediaSession;
  void *v353;
  NSObject *v354;
  CFTypeID v355;
  BOOL v356;
  CFTypeID v357;
  int v358;
  int v359;
  CFTypeID v360;
  int v361;
  NSObject *v362;
  CFTypeID v363;
  CFTypeID v364;
  CFTypeID v365;
  const __CFNumber *v366;
  const __CFNumber *v367;
  int VADPortIDFromVADPortType;
  int v369;
  __CFArray *OverridePortsList;
  CFTypeID v371;
  NSObject *v372;
  CFTypeID v373;
  int v374;
  NSObject *v375;
  unsigned int v376;
  NSObject *v377;
  void *v378;
  uint64_t v379;
  CFTypeID v380;
  NSObject *v381;
  NSObject *v382;
  CFTypeID v383;
  int v384;
  id v385;
  NSObject *v386;
  CFTypeID v387;
  unsigned int v388;
  uint64_t v389;
  void *v390;
  NSObject *v391;
  int v392;
  char v393;
  CFTypeID v394;
  NSObject *v395;
  CFTypeID v396;
  double v397;
  double v398;
  NSObject *v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  NSObject *v405;
  unsigned int v406;
  unsigned int v407;
  NSObject *v408;
  _BOOL4 v409;
  void *v410;
  uint64_t v411;
  int IsAC3EncodingSupported;
  NSObject *v413;
  unsigned int v414;
  unsigned int v415;
  __CFString **v416;
  CFTypeID v417;
  NSObject *v418;
  _BOOL4 v419;
  CFTypeID v420;
  char CFPreferenceNumberWithDefault;
  void *v422;
  void *v423;
  NSObject *v424;
  double v425;
  double v426;
  CFTypeID v427;
  NSObject *v428;
  const __CFNumber *v429;
  double v430;
  double v431;
  const char *v432;
  unsigned int v433;
  const char *v434;
  float v435;
  _BOOL8 v436;
  CFTypeID v437;
  uint64_t v438;
  NSObject *v439;
  NSObject *v440;
  CFTypeID v441;
  int v442;
  _BOOL8 v443;
  int CurrentConsolidatedPlayingState;
  NSObject *v445;
  uint64_t *v446;
  const void *v447;
  uint64_t v448;
  char IsSiriActive;
  NSObject *v450;
  CFTypeID v451;
  int v452;
  NSObject *v453;
  CFTypeID v454;
  float v455;
  void *v456;
  const void *v457;
  CFTypeID v458;
  const __CFNumber *v459;
  CFTypeID v460;
  int v461;
  NSObject *v462;
  CFTypeID v463;
  const char *v464;
  const __CFDictionary *v465;
  CFTypeID v466;
  CFTypeID v467;
  const __CFNumber *v468;
  _BOOL4 v469;
  CFTypeID v470;
  const char *v471;
  CFTypeID v472;
  int v473;
  CFTypeID v474;
  int v475;
  CFTypeID v476;
  MXSessionManager *v477;
  _BOOL8 v478;
  CFTypeID v479;
  MXSessionManager *v480;
  _BOOL8 v481;
  CFTypeID v482;
  MXSessionManager *v483;
  _BOOL8 v484;
  CFTypeID v485;
  CFTypeID v486;
  MXSessionManager *v487;
  _BOOL8 v488;
  CFTypeID v489;
  CFTypeID v490;
  float v491;
  uint64_t v492;
  CFTypeID v493;
  float v494;
  NSObject *v495;
  unsigned int v496;
  const char *v497;
  unsigned int v498;
  void *DisplayID;
  CFTypeID v500;
  uint64_t v501;
  __CFString *v502;
  uint64_t v503;
  uint64_t v504;
  CFTypeID v505;
  CFTypeID v506;
  NSObject *v507;
  CFTypeID v508;
  int v509;
  NSString *v510;
  CFTypeID v511;
  id v512;
  void *v513;
  CFTypeID v514;
  _BYTE *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  NSDictionary *v521;
  NSDictionary *v522;
  void *v523;
  CFTypeRef cf2;
  char v525;
  const __CFString *cfa;
  double valuePtr;
  os_log_type_t v530;
  os_log_type_t type[4];
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  _BYTE v536[32];
  __int16 v537;
  const __CFString *v538;
  __int16 v539;
  NSDictionary *v540;
  UInt8 buffer[16];
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  _BYTE v553[128];
  uint64_t v554;
  CFRange v555;

  v554 = *MEMORY[0x1E0C80C00];
  if (!cf1)
    return FigSignalErrorAt();
  v4 = cf1;
  v525 = 0;
  v522 = (NSDictionary *)*MEMORY[0x1E0C9AE50];
  v521 = (NSDictionary *)*MEMORY[0x1E0C9AE40];
  while (1)
  {
    v5 = a4;
    if (CFEqual(v4, CFSTR("AirPlayVideoIsActive")))
    {
      if (a1)
      {
        if (a3)
        {
          v11 = CFGetTypeID(a3);
          if (v11 == CFBooleanGetTypeID())
          {
            CMSUtility_SetAirPlayVideoIsActive(a1, (const char *)(v522 == a3));
            v12 = MXGetSerialQueue();
            v13 = &__block_literal_global_112;
            v14 = 8223;
            goto LABEL_383;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("AllowMixableAudioWhileRecording")))
    {
      if (a1)
      {
        if ((objc_msgSend(a1, "isTheAssistant") & 1) != 0)
        {
          if (a3)
          {
            v15 = CFGetTypeID(a3);
            if (v15 == CFBooleanGetTypeID())
            {
              Value = CFBooleanGetValue((CFBooleanRef)a3);
              if (Value != objc_msgSend(a1, "allowMixableAudioWhileRecording"))
              {
                objc_msgSend(a1, "setAllowMixableAudioWhileRecording:", Value != 0);
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("AudioOnlyAirPlayVideoIsActive")))
    {
      if (a1)
      {
        if (a3)
        {
          v17 = CFGetTypeID(a3);
          if (v17 == CFBooleanGetTypeID())
          {
            CMSUtility_SetAudioOnlyAirPlayVideoIsActive(a1, (const char *)(v522 == a3));
            v12 = MXGetSerialQueue();
            v13 = &__block_literal_global_113;
            v14 = 8258;
            goto LABEL_383;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("AuditToken")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v18 = CFGetTypeID(a3);
      if (v18 != CFDataGetTypeID())
        goto LABEL_1493;
      *(_OWORD *)buffer = 0u;
      v542 = 0u;
      v555.location = 0;
      v555.length = 32;
      CFDataGetBytes((CFDataRef)a3, v555, buffer);
      *(_OWORD *)v536 = *(_OWORD *)buffer;
      *(_OWORD *)&v536[16] = v542;
      objc_msgSend(a1, "setAuditToken:", v536);
      objc_msgSend(a1, "setAuditTokenSetByClient:", 1);
      if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
        return 0;
LABEL_95:
      MX_SystemStatus_PublishRecordingClientsInfo();
      return 0;
    }
    if (CFEqual(v4, CFSTR("AllowSystemSoundsWhileRecording")))
    {
      if (a1)
      {
        if (!a3 || (v19 = CFGetTypeID(a3), v19 == CFBooleanGetTypeID()))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (a3)
            v122 = v522 == a3;
          else
            v122 = 0;
          v123 = v122;
          objc_msgSend(a1, "setAllowSystemSoundsWhileRecording:", v123, v515, v518);
          v12 = MXGetSerialQueue();
          v13 = &__block_literal_global_115_0;
          v14 = 8297;
          goto LABEL_383;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("ClientName")))
    {
      if (a1)
      {
        v21 = CFGetTypeID(a3);
        if (v21 == CFStringGetTypeID())
        {
          objc_msgSend(a1, "updateClientName:", a3);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("ClientPID")))
    {
      if (a1)
      {
        IsPlaying = cmsSetClientPID(a1, a3);
LABEL_1494:
        if ((v525 & 1) != 0)
          return 0;
        return IsPlaying;
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("ClientSecTask")))
    {
      if (a1)
      {
        if (!a3 || (v23 = CFGetTypeID(a3), v23 == SecTaskGetTypeID()))
        {
          CMSUtility_FetchSessionEntitlements(a1, (__SecTask *)a3);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("DisallowAudioFormatChanges")))
    {
      if (a1)
      {
        if (!a3 || (v24 = CFGetTypeID(a3), v24 == CFBooleanGetTypeID()))
        {
          v25 = FigCFEqual();
          v26 = v25;
          vaemUpdateDisallowAudioFormatChanges(v25);
          objc_msgSend(a1, "setDisallowAudioFormatChanges:", v26 != 0);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("DoesInterAppAudio")))
    {
      if (a1)
      {
        if (!a3 || (v27 = CFGetTypeID(a3), v27 == CFBooleanGetTypeID()))
        {
          objc_msgSend(a1, "setDoesInterAppAudio:", v522 == a3);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("DoNotNotifyOtherSessionsOnNextInactive")))
    {
      if (a1)
      {
        if (!a3 || (v28 = CFGetTypeID(a3), v28 == CFBooleanGetTypeID()))
        {
          if (a3)
            v29 = v522 == a3;
          else
            v29 = 0;
          v30 = v29;
          objc_msgSend(a1, "setDoNotNotifyOtherSessionsOnNextInactive:", v30);
          if (objc_msgSend(a1, "doNotNotifyOtherSessionsOnNextInactive"))
          {
            objc_msgSend(a1, "setNotFullyInactive:", 1);
            return 0;
          }
          goto LABEL_963;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("DoNotResetAudioCategoryOnNextInactive")))
    {
      if (a1)
      {
        if (!a3 || (v31 = CFGetTypeID(a3), v31 == CFBooleanGetTypeID()))
        {
          if (a3)
            v32 = v522 == a3;
          else
            v32 = 0;
          v33 = v32;
          objc_msgSend(a1, "setDoNotResetAudioCategoryOnNextInactive:", v33);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("DuckFadeDuration")))
    {
      if (!a1)
        goto LABEL_1493;
      updated = (uint64_t)a3;
      if (!a3)
      {
        objc_msgSend(a1, "setDuckFadeDurationSetByClient:", 0);
        LODWORD(v105) = 0.5;
        objc_msgSend(a1, "setDuckFadeDuration:", v105);
        goto LABEL_964;
      }
      v35 = CFGetTypeID(a3);
      if (v35 != CFNumberGetTypeID())
        goto LABEL_1493;
      *(_DWORD *)buffer = 1056964608;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v36) = *(_DWORD *)buffer;
      if (*(float *)buffer >= 0.0)
      {
        if (*(float *)buffer > 5.0)
        {
          *(_DWORD *)buffer = 1084227584;
          LODWORD(v36) = 5.0;
        }
        objc_msgSend(a1, "setDuckFadeDuration:", v36);
        objc_msgSend(a1, "setDuckFadeDurationSetByClient:", 1);
        goto LABEL_963;
      }
LABEL_1449:
      v229 = FigSignalErrorAt();
LABEL_1450:
      updated = v229;
      goto LABEL_964;
    }
    if (CFEqual(v4, CFSTR("DuckToLevelDB")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
      {
        objc_msgSend(a1, "setDuckToLevelDBSetByClient:", 0);
        LODWORD(v108) = -1038090240;
        objc_msgSend(a1, "setDuckToLevelDB:", v108);
        goto LABEL_963;
      }
      v37 = CFGetTypeID(a3);
      if (v37 != CFNumberGetTypeID())
        goto LABEL_1493;
      if ((objc_msgSend(a1, "duckToLevelScalarSetByClient") & 1) != 0)
      {
        updated = 4294954311;
        goto LABEL_964;
      }
      if ((objc_msgSend(a1, "unduckToLevelScalarSetByClient") & 1) == 0)
      {
        *(_DWORD *)buffer = -1038090240;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
        LODWORD(v38) = *(_DWORD *)buffer;
        objc_msgSend(a1, "setDuckToLevelDB:", v38);
        objc_msgSend(a1, "setDuckToLevelDBSetByClient:", 1);
        return 0;
      }
      goto LABEL_620;
    }
    if (CFEqual(v4, CFSTR("DuckToLevelScalar")))
    {
      if (!a1)
        goto LABEL_1493;
      objc_msgSend(a1, "duckToLevelScalar");
      v40 = v39;
      v41 = objc_msgSend(a1, "duckToLevelScalarSetByClient");
      if (a3)
      {
        v42 = CFGetTypeID(a3);
        if (v42 != CFNumberGetTypeID())
          goto LABEL_1493;
        if ((objc_msgSend(a1, "duckToLevelDBSetByClient") & 1) != 0)
          goto LABEL_620;
        FigCFNumberGetFloat32();
        if (v43 < 0.0)
          goto LABEL_1493;
        v44 = LODWORD(v43);
        if (v43 > 1.0)
          goto LABEL_1493;
        if (dword_1EE2B3F38)
        {
LABEL_159:
          LODWORD(valuePtr) = 0;
          v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        v44 = 1045220557;
        if (dword_1EE2B3F38)
          goto LABEL_159;
      }
      v162 = a3 != 0;
      v163 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v515, v518);
      v166 = 1;
LABEL_583:
      LODWORD(v164) = v44;
      LODWORD(v165) = v40;
      IsPlaying = -[MXSessionManager updateDuckToLevelScalarSetByClient:session:newLevel:newLevelSetByClient:currentLevel:currentLevelSetByClient:](v163, "updateDuckToLevelScalarSetByClient:session:newLevel:newLevelSetByClient:currentLevel:currentLevelSetByClient:", v166, a1, v162, v41, v164, v165);
      goto LABEL_1494;
    }
    if (CFEqual(v4, CFSTR("ForceSoundCheck")))
    {
      if (a3)
      {
        v46 = CFGetTypeID(a3);
        if (v46 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v47 = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        v47 = 0;
      }
      if (a1)
      {
        if (v47 != objc_msgSend(a1, "forceSoundCheck"))
        {
          objc_msgSend(a1, "setForceSoundCheck:", v47 != 0);
          CMSMNotificationUtility_PostForceSoundCheckDidChange(v47, objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
          return 0;
        }
        goto LABEL_963;
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("HandsOverInterruptionsToInterruptor")))
    {
      if (a1)
      {
        if (a3)
        {
          v48 = CFGetTypeID(a3);
          if (v48 == CFNumberGetTypeID() || (v49 = CFGetTypeID(a3), v49 == CFBooleanGetTypeID()))
          {
            objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", CFBooleanGetValue((CFBooleanRef)a3) != 0);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("HostProcessAttribution")))
    {
      if (a1)
      {
        if (!a3 || (v50 = CFGetTypeID(a3), v50 == CFArrayGetTypeID()))
        {
          if (dword_1EE2B3F38)
          {
            v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v152 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution", v515, v518), "firstObject"), "valueForKey:", CFSTR("BundleID"));
          objc_msgSend(a1, "setHostProcessAttribution:", a3);
          v153 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution"), "firstObject"), "valueForKey:", CFSTR("BundleID"));
          if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
            && objc_msgSend(a1, "isActive")
            && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
          {
            if (v152)
            {
              if (v153)
              {
                if ((objc_msgSend(v152, "isEqualToString:", v153) & 1) == 0)
                {
                  if (-[NSSet containsObject:](-[MXSessionManager mutedSessionBundleIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mutedSessionBundleIDs"), "containsObject:", v152))
                  {
                    -[MXSessionManager updateMutedBundleIDs:muteValue:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateMutedBundleIDs:muteValue:", v152, 0);
                    -[MXSessionManager updateMutedBundleIDs:muteValue:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateMutedBundleIDs:muteValue:", v153, 1);
                    if (dword_1EE2B3F38)
                    {
                      v154 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                }
              }
            }
            -[MXSessionManager replaceMutedBundleIDwithHostID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v516, v519), "replaceMutedBundleIDwithHostID");
          }
          if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
            MX_SystemStatus_PublishRecordingClientsInfo();
          if (objc_msgSend(a1, "isRecording"))
          {
            CMSMUtility_UpdateRecordingAccessIntervals(a1);
            return 0;
          }
          goto LABEL_963;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IAmIDSMXCoreSession")))
    {
      if (!a1)
        goto LABEL_1493;
      if (a3)
      {
        v52 = CFGetTypeID(a3);
        if (v52 != CFBooleanGetTypeID())
          goto LABEL_1493;
        if (CFBooleanGetValue((CFBooleanRef)a3))
        {
          objc_msgSend(a1, "setIsIDSMXCoreSession:", 1);
          return 0;
        }
      }
      objc_msgSend(a1, "setIsIDSMXCoreSession:", 0);
      goto LABEL_963;
    }
    if (CFEqual(v4, CFSTR("IAmHardwareSafetySession")))
    {
      if (a1)
      {
        if (a3)
        {
          v53 = CFGetTypeID(a3);
          if (v53 == CFBooleanGetTypeID())
          {
            objc_msgSend(a1, "setIsHardwareSafetySession:", FigCFEqual() != 0);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IAmCar")))
    {
      if (a1)
      {
        if (!a3)
        {
          MEMORY[0x1940352BC](gCMSM);
          goto LABEL_393;
        }
        v54 = CFGetTypeID(a3);
        if (v54 == CFBooleanGetTypeID())
        {
          MEMORY[0x1940352BC](gCMSM);
          if (CFBooleanGetValue((CFBooleanRef)a3))
          {
            byte_1EE2B3D39 = 0;

            qword_1EE2B3CD0 = a1;
            objc_msgSend(a1, "setIsCarSession:", 1);
            goto LABEL_395;
          }
LABEL_393:

          qword_1EE2B3CD0 = 0;
          objc_msgSend(a1, "setIsCarSession:", 0);
          if (!byte_1EE2B3D39)
            CMSMNP_SaveCarPlayNowPlayingState();
LABEL_395:
          v128 = gCMSM;
LABEL_396:
          MEMORY[0x1940352C8](v128);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IAmTheAssistant")))
    {
      if (!a1)
        goto LABEL_1493;
      if (a3)
      {
        v55 = CFGetTypeID(a3);
        if (v55 != CFBooleanGetTypeID())
          goto LABEL_1493;
      }
      if (objc_msgSend(a1, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording")
        && objc_msgSend(a1, "wantsToShowMicrophoneIndicatorWhenNotRecording"))
      {
        goto LABEL_261;
      }
      if (a3)
      {
        v76 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        if (objc_msgSend(a1, "isTheAssistant") == v76)
          goto LABEL_963;
      }
      else
      {
        v76 = 0;
        updated = 0;
        if ((objc_msgSend(a1, "isTheAssistant") & 1) == 0)
          goto LABEL_964;
      }
      objc_msgSend(a1, "setIsTheAssistant:", v76);
      if (objc_msgSend(a1, "isTheAssistant"))
        objc_msgSend(a1, "setHandsOverInterruptionsToInterruptor:", 1);
      v149 = a1;
      goto LABEL_466;
    }
    if (CFEqual(v4, CFSTR("InterruptionFadeDuration")))
    {
      if (!a1)
        goto LABEL_1493;
      updated = (uint64_t)a3;
      if (!a3)
      {
        objc_msgSend(a1, "setInterruptionFadeDurationSetByClient:", 0);
        LODWORD(v131) = *(_DWORD *)"333?";
        objc_msgSend(a1, "setInterruptionFadeDuration:", v131);
        goto LABEL_964;
      }
      v56 = CFGetTypeID(a3);
      if (v56 != CFNumberGetTypeID())
        goto LABEL_1493;
      *(_DWORD *)buffer = 1060320051;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v57) = *(_DWORD *)buffer;
      if (*(float *)buffer >= 0.0)
      {
        if (*(float *)buffer > 5.0)
        {
          *(_DWORD *)buffer = 1084227584;
          LODWORD(v57) = 5.0;
        }
        objc_msgSend(a1, "setInterruptionFadeDuration:", v57);
        objc_msgSend(a1, "setInterruptionFadeDurationSetByClient:", 1);
        goto LABEL_963;
      }
      goto LABEL_1449;
    }
    if (CFEqual(v4, CFSTR("IsAirPlayReceiverSession")))
    {
      if (a1)
      {
        if (a3)
        {
          v58 = CFGetTypeID(a3);
          if (v58 == CFBooleanGetTypeID())
          {
            v59 = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1EE2B3F38)
            {
              v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(a1, "setIsAirPlayReceiverSession:", v59 != 0, v515, v518);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsAudioSession")))
    {
      if (a1)
      {
        if (!a3 || (v61 = CFGetTypeID(a3), v61 == CFBooleanGetTypeID()))
        {
          if (a3)
            v62 = v522 == a3;
          else
            v62 = 0;
          v63 = v62;
          objc_msgSend(a1, "setIsAudioSession:", v63);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsEligibleForNowPlayingAppConsideration")))
    {
      if (a1)
      {
        v64 = CFGetTypeID(a3);
        if (v64 == CFBooleanGetTypeID())
        {
          objc_msgSend(a1, "setIsEligibleForNowPlayingAppConsideration:", v522 == a3);
          if ((objc_msgSend(a1, "isEligibleForNowPlayingAppConsideration") & 1) == 0)
          {
            objc_msgSend(a1, "setBadgeType:", CFSTR("NotApplicable"));
            objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E0C99D20], "array"));
            return 0;
          }
          goto LABEL_963;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsFigInstantiatedAudioSession")))
    {
      if (a1)
      {
        if (!a3 || (v65 = CFGetTypeID(a3), v65 == CFBooleanGetTypeID()))
        {
          if (a3)
            v66 = v522 == a3;
          else
            v66 = 0;
          v67 = v66;
          objc_msgSend(a1, "setIsFigInstantiatedAudioSession:", v67);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsLongFormAudio")))
      goto LABEL_963;
    if (CFEqual(v4, CFSTR("IsSharedAVAudioSessionInstance")))
    {
      if (a1)
      {
        if (a3)
        {
          v68 = CFGetTypeID(a3);
          if (v68 == CFBooleanGetTypeID())
          {
            objc_msgSend(a1, "setIsSharedAVAudioSessionInstance:", CFBooleanGetValue((CFBooleanRef)a3) != 0);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsSharePlayCapableCallSession")))
    {
      if (!MX_FeatureFlags_IsSharePlayEnabled())
        goto LABEL_963;
      if (a1)
      {
        if (a3)
        {
          v69 = CFGetTypeID(a3);
          if (v69 == CFBooleanGetTypeID())
          {
            v70 = objc_msgSend(a1, "audioCategory");
            objc_msgSend(a1, "audioMode");
            if (CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(v70))
            {
              v71 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v71 == objc_msgSend(a1, "isSharePlayCapableCallSession"))
                goto LABEL_963;
              objc_msgSend(a1, "setIsSharePlayCapableCallSession:", v71 != 0);
              if (!dword_1EE2B3F38)
                goto LABEL_963;
              goto LABEL_240;
            }
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsUsingBuiltInMicForRecording")))
    {
      if (a1)
      {
        if ((objc_msgSend(a1, "hasEntitlementToSetIsUsingBuiltInMicForRecording") & 1) != 0)
        {
          if (a3)
          {
            v73 = CFGetTypeID(a3);
            if (v73 == CFBooleanGetTypeID() && (objc_msgSend(a1, "isTheAssistant") & 1) != 0)
            {
              v74 = FigCFEqual();
              if ((v74 != 0) == objc_msgSend(a1, "isUsingBuiltInMicForRecording"))
                goto LABEL_963;
              objc_msgSend(a1, "setIsUsingBuiltInMicForRecording:", v74 != 0);
              if (dword_1EE2B3F38)
              {
                v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              MX_SystemStatus_PublishRecordingClientsInfo();
              updated = -[MXExclaves updateSensorStatus:reason:](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "updateSensorStatus:reason:", a1, CFSTR("IsUsingBuiltInMicForRecording property has changed"));
              if (!(_DWORD)updated)
                goto LABEL_964;
              v176 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              objc_msgSend(a1, "setIsUsingBuiltInMicForRecording:", v74 == 0);
LABEL_534:
              MX_SystemStatus_PublishRecordingClientsInfo();
              goto LABEL_964;
            }
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("IsUsingCamera")))
    {
      if (a1)
      {
        if (a3)
        {
          v77 = CFGetTypeID(a3);
          if (v77 == CFBooleanGetTypeID())
          {
            objc_msgSend(a1, "setIsUsingCamera:", v522 == a3);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("MicrophoneAttribution")))
    {
      if (a1)
      {
        if (a3)
        {
          v78 = CFGetTypeID(a3);
          if (v78 == CFBooleanGetTypeID())
          {
            if ((objc_msgSend(a1, "isTheAssistant") & 1) == 0
              || objc_msgSend(a1, "prefersSuppressingRecordingState"))
            {
              goto LABEL_261;
            }
            if (!objc_msgSend(a1, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording"))
            {
              v175 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              if ((v525 & 1) == 0)
                return 4294954308;
              return 0;
            }
            v156 = FigCFEqual();
            if (dword_1EE2B3F38)
            {
              v157 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", v156 != 0, v515, v518);
            MX_SystemStatus_PublishRecordingClientsInfo();
            updated = -[MXExclaves updateSensorStatus:reason:](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "updateSensorStatus:reason:", a1, CFSTR("MicrophoneAttribution property has changed"));
            if (!(_DWORD)updated)
              goto LABEL_964;
            v194 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", v156 == 0);
            goto LABEL_534;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("NeroSuspended")))
    {
      if (a1)
      {
        if (a3)
        {
          v80 = CFGetTypeID(a3);
          if (v80 == CFBooleanGetTypeID())
          {
            -[MXSessionManager updateNeroScreenState:suspendScreen:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateNeroScreenState:suspendScreen:", a1, CFBooleanGetValue((CFBooleanRef)a3) != 0);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("OptOutOfMutePriority")))
    {
      if (a1)
      {
        if (a3)
        {
          v81 = CFGetTypeID(a3);
          if (v81 == CFBooleanGetTypeID())
          {
            v82 = CFBooleanGetValue((CFBooleanRef)a3);
            if (CMSUtility_GetOptOutOfMutePriority(a1) == v82)
              goto LABEL_963;
            objc_msgSend(a1, "setOptOutOfMutePriority:", v82 != 0);
            if (dword_1EE2B3F38)
            {
              v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v12 = MXGetSerialQueue();
            v13 = &__block_literal_global_121_0;
            v14 = 8814;
LABEL_383:
            MXDispatchAsync((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", v14, 0, 0, v12, (uint64_t)v13);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("PrefersBluetoothAccessoryMuting")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v84 = CFGetTypeID(a3);
      if (v84 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v85 = CFBooleanGetValue((CFBooleanRef)a3);
      if (!MX_FeatureFlags_IsCallManagementMuteControlEnabled())
        goto LABEL_963;
      if ((v85 != 0) == objc_msgSend(a1, "prefersBluetoothAccessoryMuting"))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersBluetoothAccessoryMuting:", v85 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("PrefersConcurrentAirPlayAudio")))
    {
      if (a1)
      {
        if (a3)
        {
          v86 = CFGetTypeID(a3);
          if (v86 == CFBooleanGetTypeID())
          {
            v87 = CFBooleanGetValue((CFBooleanRef)a3);
            if (objc_msgSend(a1, "prefersConcurrentAirPlayAudio") != (v87 != 0))
            {
              objc_msgSend(a1, "setPrefersConcurrentAirPlayAudio:", v87 != 0);
              if (dword_1EE2B3F38)
              {
                v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange(a1);
              return 0;
            }
            goto LABEL_963;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("PrefersInterruptionOnRouteDisconnect")))
    {
      if (a1)
      {
        if (!a3)
        {
          if (dword_1EE2B3F38)
          {
            v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnect:", 0, v515, v518);
          objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnectSetByClient:", 0);
          goto LABEL_963;
        }
        v89 = CFGetTypeID(a3);
        if (v89 == CFBooleanGetTypeID())
        {
          v90 = CFBooleanGetValue((CFBooleanRef)a3);
          if (dword_1EE2B3F38)
          {
            LODWORD(valuePtr) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v168 = a1;
          if ((v90 != 0) != objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect", v515, v518))
          {
            objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnect:", v90 != 0);
            if (objc_msgSend(a1, "isActive"))
            {
              v169 = objc_alloc_init(MEMORY[0x1E0C99E08]);
              objc_msgSend(v169, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect")), 0x1E30A9888);
              v534 = 0u;
              v535 = 0u;
              v532 = 0u;
              v533 = 0u;
              v170 = (void *)objc_msgSend(a1, "reporterIDs");
              v171 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", &v532, v553, 16);
              if (v171)
              {
                v172 = v171;
                v173 = *(_QWORD *)v533;
                do
                {
                  for (i = 0; i != v172; ++i)
                  {
                    if (*(_QWORD *)v533 != v173)
                      objc_enumerationMutation(v170);
                    off_1EE2B3D78(objc_msgSend(*(id *)(*((_QWORD *)&v532 + 1) + 8 * i), "longValue"), v169, 1, 5);
                  }
                  v172 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", &v532, v553, 16);
                }
                while (v172);
              }

              v168 = a1;
            }
          }
          objc_msgSend(v168, "setPrefersInterruptionOnRouteDisconnectSetByClient:", 1);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("PrefersNoDucking")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v92 = CFGetTypeID(a3);
      if (v92 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v93 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetPrefersNoDucking(a1) == v93)
        goto LABEL_963;
      if (CMSUtility_GetIsActive(a1))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersNoDucking:", v93 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("PrefersNoInterruptionsByMixableSessions")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v94 = CFGetTypeID(a3);
      if (v94 != CFBooleanGetTypeID())
        goto LABEL_1493;
      objc_msgSend(a1, "audioMode");
      if (!FigCFEqual())
        goto LABEL_1493;
      v95 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v95 == objc_msgSend(a1, "prefersNoInterruptionsByMixableSessions"))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersNoInterruptionsByMixableSessions:", v95 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("PrefersNoInterruptionsDuringRemoteDeviceControl")))
    {
      if (a1)
      {
        if (a3)
        {
          v96 = CFGetTypeID(a3);
          if (v96 == CFBooleanGetTypeID())
          {
            if (MX_FeatureFlags_IsOnenessEnabled())
            {
              v97 = CFBooleanGetValue((CFBooleanRef)a3);
              if ((v97 != 0) != objc_msgSend(a1, "prefersNoInterruptionsDuringRemoteDeviceControl"))
              {
                if (dword_1EE2B3F38)
                {
                  v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v29 = v97 == 0;
                v180 = v97 == 0;
                v181 = !v29;
                objc_msgSend(a1, "setPrefersNoInterruptionsDuringRemoteDeviceControl:", v181, v515, v518);
                objc_msgSend(a1, "setShouldMuteBeAppliedToRemoteDevice:", v180);
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("PrefersSpeechDetectEnabled")))
    {
      if (a1)
      {
        if (a3)
        {
          v99 = CFGetTypeID(a3);
          if (v99 == CFBooleanGetTypeID())
          {
            v100 = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1EE2B3F38)
            {
              v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if ((v100 != 0) != objc_msgSend(a1, "prefersSpeechDetectEnabled", v515, v518))
            {
              objc_msgSend(a1, "setPrefersSpeechDetectEnabled:", v100 != 0);
              CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
            }
            goto LABEL_963;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("PrefersBeingInterruptedByNextActiveRecordingClient")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v102 = CFGetTypeID(a3);
      if (v102 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v103 = CFBooleanGetValue((CFBooleanRef)a3);
      if (objc_msgSend(a1, "prefersBeingInterruptedByNextActiveRecordingClient") == (v103 != 0))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersBeingInterruptedByNextActiveRecordingClient:", v103 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      LODWORD(valuePtr) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT);
      goto LABEL_1088;
    }
    if (CFEqual(v4, CFSTR("PrefersToPlayDuringWombat")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v106 = CFGetTypeID(a3);
      if (v106 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v107 = CFBooleanGetValue((CFBooleanRef)a3);
      if (objc_msgSend(a1, "prefersToPlayDuringWombat") == (v107 != 0))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersToPlayDuringWombat:", v107 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
LABEL_1087:
      LODWORD(valuePtr) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v372 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT);
      goto LABEL_1088;
    }
    if (CFEqual(v4, CFSTR("PrefersToTakeHWControlFlagsFromAnotherSession")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v109 = CFGetTypeID(a3);
      if (v109 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v110 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(a1) == v110)
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersToTakeHWControlFlagsFromAnotherSession:", v110 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
LABEL_240:
      LODWORD(valuePtr) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
      goto LABEL_1088;
    }
    if (CFEqual(v4, CFSTR("PrefersToVibeWhenVibrationsAreDisabled")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v111 = CFGetTypeID(a3);
      if (v111 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v112 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v112 == objc_msgSend(a1, "prefersToVibeWhenVibrationsAreDisabled"))
        goto LABEL_963;
      objc_msgSend(a1, "setPrefersToVibeWhenVibrationsAreDisabled:", v112 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("ReporterIDs")))
    {
      if (!a1)
        goto LABEL_1493;
      if (objc_msgSend(a1, "isActive"))
        goto LABEL_1493;
      if (a3)
      {
        v115 = CFGetTypeID(a3);
        if (v115 != CFArrayGetTypeID())
          goto LABEL_1493;
      }
      v116 = (id)objc_msgSend(a1, "reporterIDs");
      objc_msgSend(a1, "setReporterIDs:", a3);
      if ((objc_msgSend(v116, "isEqualToArray:", a3) & 1) == 0)
        CMSMNotificationUtility_PostReporterIDsDidChange(a1);
      goto LABEL_360;
    }
    if (CFEqual(v4, CFSTR("SubscribeToNotifications")))
    {
      if (a1)
      {
        if (!a3)
        {
          if (dword_1EE2B3F38)
          {
            v158 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(a1, "setNotificationsSubscribedTo:", objc_msgSend(MEMORY[0x1E0C99E60], "set", v515, v518));
          return 0;
        }
        v117 = CFGetTypeID(a3);
        if (v117 == CFArrayGetTypeID())
        {
          objc_msgSend(a1, "subscribeToNotifications:", a3);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("TemporaryAssertionEnabled")))
    {
      if (a1)
      {
        if (!a3)
        {
          v119 = 0;
LABEL_498:
          objc_msgSend(a1, "setIsTemporaryAssertionEnabled:", v119);
          if (dword_1EE2B3F38)
          {
            v159 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(a1, "isTemporaryAssertionEnabled", v515, v518)
            && CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")))
          {
            CMSMSleep_FetchTemporaryPlaybackProcessAssertion(a1);
            return 0;
          }
          goto LABEL_963;
        }
        v118 = CFGetTypeID(a3);
        if (v118 == CFBooleanGetTypeID())
        {
          v119 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
          goto LABEL_498;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("UnduckFadeDuration")))
    {
      if (!a1)
        goto LABEL_1493;
      updated = (uint64_t)a3;
      if (!a3)
      {
        objc_msgSend(a1, "setUnduckFadeDurationSetByClient:", 0);
        LODWORD(v160) = 0.5;
        objc_msgSend(a1, "setUnduckFadeDuration:", v160);
        goto LABEL_964;
      }
      v120 = CFGetTypeID(a3);
      if (v120 != CFNumberGetTypeID())
        goto LABEL_1493;
      *(_DWORD *)buffer = 1056964608;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v121) = *(_DWORD *)buffer;
      if (*(float *)buffer >= 0.0)
      {
        if (*(float *)buffer > 5.0)
        {
          *(_DWORD *)buffer = 1084227584;
          LODWORD(v121) = 5.0;
        }
        objc_msgSend(a1, "setUnduckFadeDuration:", v121);
        objc_msgSend(a1, "setUnduckFadeDurationSetByClient:", 1);
        goto LABEL_963;
      }
      goto LABEL_1449;
    }
    if (CFEqual(v4, CFSTR("UnduckToLevelScalar")))
    {
      if (!a1)
        goto LABEL_1493;
      objc_msgSend(a1, "unduckToLevelScalar");
      v40 = v124;
      v41 = objc_msgSend(a1, "unduckToLevelScalarSetByClient");
      if (a3)
      {
        v125 = CFGetTypeID(a3);
        if (v125 != CFNumberGetTypeID())
          goto LABEL_1493;
        if ((objc_msgSend(a1, "duckToLevelDBSetByClient") & 1) == 0)
        {
          ValueFloat32 = MXCFNumberGetValueFloat32((const __CFNumber *)a3);
          if (ValueFloat32 >= 0.0)
          {
            v44 = LODWORD(ValueFloat32);
            if (ValueFloat32 <= 1.0)
            {
              if (dword_1EE2B3F38)
                goto LABEL_391;
              goto LABEL_582;
            }
          }
          goto LABEL_1493;
        }
LABEL_620:
        updated = 4294951611;
        goto LABEL_964;
      }
      v44 = 1045220557;
      if (dword_1EE2B3F38)
      {
LABEL_391:
        LODWORD(valuePtr) = 0;
        v127 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_582:
      v162 = a3 != 0;
      v163 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v515, v518);
      v166 = 0;
      goto LABEL_583;
    }
    if (CFEqual(v4, CFSTR("VibrationData")))
    {
      if (!a1)
        goto LABEL_1493;
      objc_msgSend(a1, "setVibrationData:", a3);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("WantsAutomaticClusterPairingOnPlaybackStart")))
    {
      if (a1)
      {
        if (a3)
        {
          v129 = CFGetTypeID(a3);
          if (v129 == CFBooleanGetTypeID())
          {
            v130 = CFBooleanGetValue((CFBooleanRef)a3);
            if (v130 != objc_msgSend(a1, "wantsAutomaticClusterPairingOnPlaybackStart"))
            {
              objc_msgSend(a1, "setWantsAutomaticClusterPairingOnPlaybackStart:", v130 != 0);
              return 0;
            }
            goto LABEL_963;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("WantsToBeVolumeButtonClient")))
    {
      if (!a1)
        goto LABEL_1493;
      if (!a3)
        goto LABEL_1493;
      v132 = CFGetTypeID(a3);
      if (v132 != CFBooleanGetTypeID())
        goto LABEL_1493;
      v133 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetWantsToBeVolumeButtonClient(a1) == v133)
        goto LABEL_963;
      objc_msgSend(a1, "setWantsToBeVolumeButtonClient:", v133 != 0);
      if (!dword_1EE2B3F38)
        goto LABEL_963;
      goto LABEL_1087;
    }
    if (CFEqual(v4, CFSTR("WantsToPauseSpokenAudio")))
    {
      if (!a1)
        goto LABEL_1493;
      if (a3)
      {
        v134 = CFGetTypeID(a3);
        if (v134 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v135 = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        v135 = 0;
      }
      if (dword_1EE2B3F38)
      {
        v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v177 = a1;
      if (!v135
        && objc_msgSend(a1, "wantsToPauseSpokenAudio")
        && objc_msgSend(a1, "isActive"))
      {
        if (dword_1EE2B3F38)
        {
          v178 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v177 = a1;
        objc_msgSend(a1, "setRecentlyWantedToPauseSpokenAudio:", 1, v515, v518);
      }
      objc_msgSend(v177, "setWantsToPauseSpokenAudio:", v135 != 0);
      return 0;
    }
    if (CFEqual(v4, CFSTR("WantsToSendResumableEndInterruptionWhenBackgrounded")))
    {
      if (a1)
      {
        if (!a3 || (v136 = CFGetTypeID(a3), v136 == CFBooleanGetTypeID()))
        {
          if (a3)
            v137 = v522 == a3;
          else
            v137 = 0;
          v138 = v137;
          objc_msgSend(a1, "setWantsToSendResumableEndInterruptionWhenBackgrounded:", v138);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("WantsVibrationNotifications")))
    {
      if (a1)
      {
        if (a3)
        {
          v139 = CFGetTypeID(a3);
          if (v139 == CFBooleanGetTypeID())
          {
            objc_msgSend(a1, "setWantsVibrationNotifications:", v522 == a3);
            return 0;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("WantsVolumeChangesWhenPaused")))
    {
      if (a1)
      {
        if (!a3 || (v140 = CFGetTypeID(a3), v140 == CFBooleanGetTypeID()))
        {
          if (a3)
            v141 = v522 == a3;
          else
            v141 = 0;
          v142 = v141;
          objc_msgSend(a1, "setWantsVolumeChangesWhenPaused:", v142);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("WantsVolumeChangesWhenPausedOrInactive")))
    {
      if (a1)
      {
        if (!a3 || (v143 = CFGetTypeID(a3), v143 == CFBooleanGetTypeID()))
        {
          if (a3)
            v144 = v522 == a3;
          else
            v144 = 0;
          v145 = v144;
          objc_msgSend(a1, "setWantsVolumeChangesWhenPausedOrInactive:", v145);
          return 0;
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("AllowedRouteTypes")))
    {
      if (a1)
      {
        if (!a3 || (v146 = CFGetTypeID(a3), v146 == CFArrayGetTypeID()))
        {
          if (CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(a1, "audioCategory")))
          {
            if (dword_1EE2B3F38)
            {
              v147 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            cmsUpdateAllowedRouteTypes(a1, a3);
            if (!objc_msgSend(a1, "isActive"))
              goto LABEL_963;
            if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
              cmsSetCategoryOnPVMAndAudioDevice(a1);
            goto LABEL_548;
          }
        }
      }
      goto LABEL_1493;
    }
    if (CFEqual(v4, CFSTR("AudioClockDevice")))
    {
      if (!a1)
        goto LABEL_1493;
      if (dword_1EE2B3F38)
      {
        v148 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setAggregateDeviceClockUID:", a3, v515, v518);
      if (!objc_msgSend(a1, "isActive"))
        goto LABEL_963;
      if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0)
      {
        if (objc_msgSend(a1, "isSharePlayMediaSession"))
        {
          CMSMUtility_SetSharePlayInfoOnVA(a1);
          return 0;
        }
        goto LABEL_963;
      }
      v179 = a1;
LABEL_554:
      cmsSetCategoryOnPVMAndAudioDevice(v179);
    }
    if (CFEqual(v4, CFSTR("AudioCategory")))
    {
      if (a1)
      {
        if (objc_msgSend(a1, "mode"))
        {
          objc_msgSend(a1, "audioMode");
          if (!CMSMUtility_IsModeValidForCategory(a3))
          {
            objc_msgSend(a1, "setMode:", 1768776806);
            objc_msgSend(a1, "setAudioMode:", CFSTR("Default"));
            objc_msgSend(a1, "setDefaultVPChatMode:", 0);
          }
        }
        objc_msgSend(a1, "setEnableBluetoothRecordingPreference:", 0);
        objc_msgSend(a1, "setEnableBluetoothRecordingPreferenceSetByClient:", 0);
        objc_msgSend(a1, "setDefaultBuiltInRoutePreference:", 0);
        objc_msgSend(a1, "setDefaultBuiltInRoutePreferenceSetByClient:", 0);
        IsPlaying = cmsSetAudioCategory(a1, a3, 0, v5);
        goto LABEL_1494;
      }
      goto LABEL_1493;
    }
    if (!CFEqual(v4, CFSTR("AudioMode")))
    {
      if (CFEqual(v4, CFSTR("AudioHardwareControlFlags")))
      {
        if (a1)
        {
          if (a3)
          {
            v150 = CFGetTypeID(a3);
            if (v150 == CFNumberGetTypeID())
            {
              v151 = -[NSDictionary unsignedIntValue](a3, "unsignedIntValue");
              if (objc_msgSend(a1, "doesntActuallyPlayAudio"))
              {
                if ((v151 & WORD1(v151)) == 0)
                {
                  objc_msgSend(a1, "setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:", v151);
                  return 0;
                }
                goto LABEL_479;
              }
              if (objc_msgSend(a1, "preferredPersistentRoute") && (v151 & 2) == 0)
              {
LABEL_261:
                LODWORD(valuePtr) = 0;
                v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                if ((v525 & 1) == 0)
                  return 4294951611;
                return 0;
              }
              v182 = objc_msgSend(a1, "hwControlFlags");
              updated = cmsSetControlFlags(a1, v151);
              if (!(_DWORD)updated && objc_msgSend(a1, "isActive"))
              {
                if (objc_msgSend(a1, "isTheAssistant")
                  && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0
                  && (objc_msgSend(a1, "currentlyControllingFlags") & 0x10) == 0
                  && (v182 ^ v151) == 0x10
                  && !CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)
                  && !CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume())
                {
                  v542 = 0u;
                  v543 = 0u;
                  *(_OWORD *)buffer = 0u;
                  CMSMUtility_GetCurrentRouteInfoAtIndex(0, buffer);
                  cfa = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"));
                  v183 = objc_msgSend(a1, "audioMode");
                  v523 = (void *)v542;
                  cf2 = (CFTypeRef)v183;
                  v184 = (const void *)*((_QWORD *)&v542 + 1);
                  v185 = *(void **)buffer;
                  v186 = *(const __CFString **)&buffer[8];
                  v187 = (const void *)v543;
                  v188 = byte_1EE2B3BE8;
                  DoesPortSupportDoAP = vaeDoesPortSupportDoAP(DWORD2(v543));
                  VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
                  PVMSetCurrentState(cfa, cf2, v185, v523, v184, v186, v187, 0, v188, DoesPortSupportDoAP, VolumeSequenceNumber);
                }
                if (((unsigned __int16)v151 & (unsigned __int16)~(unsigned __int16)cmsTryToTakeControl(a1)) != 0)
                  objc_msgSend(a1, "setHwControlFlags:", v182);
              }
              objc_msgSend(a1, "setAudioHWControlFlagsSetByClient:", 1);
LABEL_964:
              if ((v525 & 1) != 0)
                return 0;
              return updated;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("CameraParameters")))
      {
        if (a1)
        {
          if (!a3 || (v167 = CFGetTypeID(a3), v167 == CFDictionaryGetTypeID()))
          {
            objc_msgSend(a1, "setCameraParameters:", a3);
            if (objc_msgSend(a1, "isActive") && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
            {
              MEMORY[0x1940352BC](gCMSM);
              vaemSetCameraParameters(objc_msgSend(a1, "cameraParameters"));
              goto LABEL_516;
            }
LABEL_963:
            updated = 0;
            goto LABEL_964;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("CaptureOrientationOverride")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v192 = CFGetTypeID(a3);
        if (v192 != CFDataGetTypeID())
          goto LABEL_1493;
        BytePtr = CFDataGetBytePtr((CFDataRef)a3);
        if (!BytePtr)
          goto LABEL_1493;
        objc_msgSend(a1, "setOrientationOverride:", *(unsigned int *)BytePtr);
        if (objc_msgSend(a1, "isActive") && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
          updated = vaemSetCaptureOrientationOverride();
        else
          updated = 0;
        if (objc_msgSend(a1, "orientationOverride") == 5)
          goto LABEL_964;
        v196 = a1;
LABEL_601:
        objc_msgSend(v196, "setPreferredStereoInputOrientation:", 0);
        goto LABEL_964;
      }
      if (CFEqual(v4, CFSTR("DefaultBuiltInRoute")))
      {
        if (a1)
        {
          if (!a3 || (v195 = CFGetTypeID(a3), v195 == CFStringGetTypeID()))
          {
            IsPlaying = cmsSetDefaultBuiltInRoute(a1, a3, v5);
            goto LABEL_1494;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("EnableBluetoothRecording")))
      {
        if (a1)
        {
          if (!a3 || (v197 = CFGetTypeID(a3), v197 == CFBooleanGetTypeID()))
          {
            objc_msgSend(a1, "audioCategory");
            if (!FigCFEqual())
            {
              v198 = CFBooleanGetValue((CFBooleanRef)a3);
              if (dword_1EE2B3F38)
              {
                v199 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              IsPlaying = cmsEnableBluetoothRecording(a1, v198, v5);
              goto LABEL_1494;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("ClientPriority")))
      {
        if (a1)
        {
          if (a3)
          {
            v200 = CFGetTypeID(a3);
            if (v200 == CFNumberGetTypeID())
            {
              v201 = -[NSDictionary unsignedIntValue](a3, "unsignedIntValue");
              if (dword_1EE2B3F38)
              {
                v202 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              updated = cmsSetClientPriority(a1, v201);
              if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
                && !(_DWORD)updated
                && objc_msgSend(a1, "isActive")
                && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
              {
                -[MXSessionManager applyUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "applyUplinkMute:", a1);
              }
              CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
              goto LABEL_964;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("ConstantOutputVolumeLeveldB")))
      {
        if (a1)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            -[NSDictionary floatValue](a3, "floatValue");
            v204 = v203;
            objc_msgSend(a1, "constantOutputVolumeLeveldB");
            if (v204 != *(float *)&v205)
            {
              if (dword_1EE2B3F38)
              {
                v206 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(float *)&v205 = v204;
              objc_msgSend(a1, "setConstantOutputVolumeLeveldB:", v205, v515, v518);
              return 0;
            }
            goto LABEL_963;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("AudioSessionID")))
      {
        if (!a1)
          goto LABEL_1493;
        v207 = objc_msgSend(a1, "audioSessionID");
        if (a3)
        {
          v208 = CFGetTypeID(a3);
          if (v208 != CFNumberGetTypeID())
            goto LABEL_1493;
          v209 = -[NSDictionary unsignedIntValue](a3, "unsignedIntValue");
        }
        else
        {
          v209 = 0;
        }
        if (v207 == v209)
          goto LABEL_963;
        objc_msgSend(a1, "setAudioSessionID:");
        v149 = a1;
LABEL_466:
        if (!objc_msgSend(v149, "isActive"))
          goto LABEL_963;
LABEL_548:
        IsPlaying = -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance", v515, v518), "sendActiveSessionsInfoToVA");
        goto LABEL_1494;
      }
      if (CFEqual(v4, CFSTR("CreateSpeakerDevice")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v210 = CFGetTypeID(a3);
          if (v210 != CFBooleanGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "setCreateSpeakerDevice:", v522 == a3);
        if (dword_1EE2B3F38)
        {
LABEL_960:
          LODWORD(valuePtr) = 0;
          v326 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_961:
        if (!objc_msgSend(a1, "isActive", v515, v518))
          goto LABEL_963;
LABEL_962:
        if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0)
          goto LABEL_963;
LABEL_979:
        v179 = a1;
        goto LABEL_554;
      }
      if (CFEqual(v4, CFSTR("DefaultVPChatMode")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v211 = CFGetTypeID(a3);
          if (v211 != CFStringGetTypeID())
            goto LABEL_1493;
        }
        if (CMSMUtility_IsChatMode())
        {
          if (!objc_msgSend(a1, "audioMode")
            || objc_msgSend(a1, "audioMode") && (objc_msgSend(a1, "audioMode"), !CMSMUtility_IsChatMode()))
          {
            objc_msgSend(a1, "setDefaultVPChatMode:", a3);
            v113 = a1;
            v114 = (uint64_t)a3;
LABEL_349:
            IsPlaying = cmsSetAudioMode(v113, v114, v5);
            goto LABEL_1494;
          }
          goto LABEL_963;
        }
        goto LABEL_479;
      }
      if (CFEqual(v4, CFSTR("DeselectedInputs")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v212 = CFGetTypeID(a3);
          if (v212 != CFArrayGetTypeID())
            goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
        {
          v213 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a3 && CFArrayGetCount((CFArrayRef)a3) >= 1)
        {
          cmsDeselectSubPortPreferences((CFIndex)a1, (CFArrayRef)a3);
        }
        else
        {
          objc_msgSend(a1, "setSubPortPreferences:", 0, v515, v518);
          objc_msgSend(a1, "setOverridePortsList:", 0);
        }
        goto LABEL_961;
      }
      if (CFEqual(v4, CFSTR("ExcludedRoutes")))
      {
        if (a1)
        {
          if (dword_1EE2B3F38)
          {
            v214 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          updated = cmsUpdateExcludedPortsList(a1, a3);
          if (objc_msgSend(a1, "isActive") && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
            cmsSetCategoryOnPVMAndAudioDevice(a1);
          goto LABEL_964;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IgnoreRingerSwitch")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v215 = CFGetTypeID(a3);
          if (v215 != CFBooleanGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "setIgnoreRingerSwitch:", v522 == a3);
        if (dword_1EE2B3F38)
          goto LABEL_960;
        goto LABEL_961;
      }
      if (CFEqual(v4, CFSTR("InputGainScalar")))
      {
        if (!vaemCurrentRouteHasInputGainControl())
          goto LABEL_963;
        if (a1)
        {
          if (a3)
          {
            v216 = CFGetTypeID(a3);
            if (v216 != CFNumberGetTypeID())
              goto LABEL_1493;
            objc_msgSend(a1, "setDesiredInputGainScalar:", 0);
            v217 = a1;
            v218 = a3;
          }
          else
          {
            v217 = a1;
            v218 = 0;
          }
          objc_msgSend(v217, "setDesiredInputGainScalar:", v218);
          if (objc_msgSend(a1, "isActive")
            && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0
            && objc_msgSend(a1, "hasInput"))
          {
            if (objc_msgSend(a1, "desiredInputGainScalar"))
            {
              objc_msgSend((id)objc_msgSend(a1, "desiredInputGainScalar"), "floatValue");
              vaemSetDeviceInputGainScalar(v225);
            }
            else
            {
              vaemSetDefaultInputGain();
            }
            return 0;
          }
          goto LABEL_963;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("InterruptionStyle")))
      {
        LODWORD(valuePtr) = 0;
        if (!a1)
          goto LABEL_1449;
        if (!a3)
          goto LABEL_1449;
        v219 = CFGetTypeID(a3);
        if (v219 != CFNumberGetTypeID())
          goto LABEL_1449;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)type = 0;
          v530 = OS_LOG_TYPE_DEFAULT;
          v220 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v221 = *(_DWORD *)type;
          if (os_log_type_enabled(v220, v530))
            v222 = v221;
          else
            v222 = v221 & 0xFFFFFFFE;
          if (v222)
          {
            v223 = objc_msgSend(a1, "clientName");
            StyleString = CMSMUtility_GetStyleString(SLODWORD(valuePtr));
            *(_DWORD *)v536 = 136315650;
            *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
            *(_WORD *)&v536[12] = 2114;
            *(_QWORD *)&v536[14] = v223;
            *(_WORD *)&v536[22] = 2082;
            *(_QWORD *)&v536[24] = StyleString;
            LODWORD(v518) = 32;
            v515 = v536;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v229 = objc_msgSend(a1, "setInterruptionStyleAtClientRequest:", LODWORD(valuePtr), v515, v518);
        goto LABEL_1450;
      }
      if (CFEqual(v4, CFSTR("IsEligibleForBTSmartRoutingConsideration")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v226 = CFGetTypeID(a3);
        if (v226 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v227 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v227 != objc_msgSend(a1, "isEligibleForBTSmartRoutingConsideration"))
        {
          objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsideration:", v227 != 0);
          if (dword_1EE2B3F38)
          {
            v228 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          IsSmartRoutingOnActivationEnabled = MX_FeatureFlags_IsSmartRoutingOnActivationEnabled();
          v237 = objc_msgSend(a1, "isActive");
          if (IsSmartRoutingOnActivationEnabled)
          {
            if ((v237 & 1) == 0)
              goto LABEL_742;
LABEL_740:
            if (CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(a1))
              CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 8);
          }
          else if (v237 && objc_msgSend(a1, "isPlaying"))
          {
            goto LABEL_740;
          }
LABEL_742:
          CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
        }
        objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsiderationSetByClient:", 1, v515, v518);
        return 0;
      }
      if (CFEqual(v4, CFSTR("IsEligibleForBTTriangleConsideration")))
      {
        if (a1)
        {
          if (a3)
          {
            v230 = CFGetTypeID(a3);
            if (v230 == CFBooleanGetTypeID())
            {
              v231 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v231 != objc_msgSend(a1, "isEligibleForBTTriangleConsideration"))
              {
                objc_msgSend(a1, "setIsEligibleForBTTriangleConsideration:", v231 != 0);
                if (dword_1EE2B3F38)
                {
                  v232 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (objc_msgSend(a1, "isActive", v515, v518)
                  && objc_msgSend(a1, "isPlaying")
                  && objc_msgSend(a1, "isEligibleForBTTriangleConsideration"))
                {
                  cmsBeginInterruptionGuts(a1, 0, 2);
                  return 0;
                }
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IsRecordingMutedForRemoteDevice")))
      {
        if (a1)
        {
          if (a3)
          {
            v233 = CFGetTypeID(a3);
            if (v233 == CFBooleanGetTypeID())
            {
              if (MX_FeatureFlags_IsOnenessEnabled())
              {
                v234 = CFBooleanGetValue((CFBooleanRef)a3);
                if (!v234
                  || vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts()
                  && (objc_msgSend(a1, "isRecording") & 1) == 0
                  && !objc_msgSend(a1, "isRecordingMuted"))
                {
                  if (v234 != objc_msgSend(a1, "isRecordingMutedForRemoteDevice"))
                  {
                    if (dword_1EE2B3F38)
                    {
                      v235 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    objc_msgSend(a1, "setIsRecordingMutedForRemoteDevice:", v234 != 0, v515, v518);
                    if (objc_msgSend(a1, "isRecordingMutedForRemoteDevice"))
                    {
                      -[MXSessionManager postDisallowedRecordingNotification:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "postDisallowedRecordingNotification:", 1);
                      return 0;
                    }
                  }
                  goto LABEL_963;
                }
              }
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("MutesAudioBasedOnRingerSwitchState")))
      {
        if (a1)
        {
          if (a3)
          {
            v238 = CFGetTypeID(a3);
            if (v238 == CFBooleanGetTypeID()
              && objc_msgSend(a1, "isActive")
              && (objc_msgSend(a1, "isPlaying") & 1) != 0
              && !-[MXSessionManager isAudioCategoryMuteable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryMuteable:", objc_msgSend(a1, "audioCategory")))
            {
              v239 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v239 != objc_msgSend(a1, "mutesAudioBasedOnRingerSwitchState"))
              {
                objc_msgSend(a1, "setMutesAudioBasedOnRingerSwitchState:", v239 != 0);
                cmsUpdateMuteStatus(a1);
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("OrientationOverride")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v240 = CFGetTypeID(a3);
        if (v240 != CFNumberGetTypeID())
          goto LABEL_1493;
        *(_DWORD *)buffer = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, buffer);
        objc_msgSend(a1, "setOrientationOverride:", *(unsigned int *)buffer);
        updated = 0;
        if (objc_msgSend(a1, "isActive"))
        {
          if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
            updated = vaemSetOrientationOverride(*(int *)buffer);
          else
            updated = 0;
        }
        if (objc_msgSend(a1, "orientationOverride") == 5)
          goto LABEL_964;
        v196 = a1;
        goto LABEL_601;
      }
      if (CFEqual(v4, CFSTR("PrefersEchoCancelledInput")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v241 = CFGetTypeID(a3);
        if (v241 != CFBooleanGetTypeID()
          || !CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(a1, "audioCategory")))
        {
          goto LABEL_1493;
        }
        v242 = -[NSDictionary BOOLValue](a3, "BOOLValue");
        v243 = objc_msgSend(a1, "prefersEchoCancelledInput");
        objc_msgSend(a1, "setPrefersEchoCancelledInput:", v242);
        if ((_DWORD)v242 == v243)
          goto LABEL_963;
        if (dword_1EE2B3F38)
        {
          v244 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setPrefersEchoCancelledInput:", v242, v515, v518);
        if (!CMSMVAUtility_IsAdditiveRoutingEnabled())
          goto LABEL_963;
        v149 = a1;
        goto LABEL_466;
      }
      if (CFEqual(v4, CFSTR("PrefersNoInterruptionsByRingtonesAndAlerts")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v245 = CFGetTypeID(a3);
        if (v245 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v246 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v246 == objc_msgSend(a1, "prefersNoInterruptionsByRingtonesAndAlerts"))
          goto LABEL_963;
        objc_msgSend(a1, "setPrefersNoInterruptionsByRingtonesAndAlerts:", v246 != 0);
        if (dword_1EE2B3F38)
        {
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v247 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!objc_msgSend(a1, "isActive", v515, v518))
          goto LABEL_963;
        updated = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetValue();
        v264 = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
        if (v264 >= 1)
        {
          v265 = v264;
          for (j = 0; j != v265; ++j)
          {
            *(_QWORD *)buffer = 1;
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs"), j);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, buffer);
            off_1EE2B3D78(*(_QWORD *)buffer, updated, 1, 5);
          }
        }
        if (!updated)
          goto LABEL_964;
        v268 = (const void *)updated;
LABEL_810:
        CFRelease(v268);
        return 0;
      }
      if (CFEqual(v4, CFSTR("PreferredAudioHardwareFormat")))
      {
        if (a1)
        {
          objc_msgSend(a1, "setPreferredHardwareFormat:", CMSessionMgrGetUpdatedHardwareFormatBasedOnPreferredNumberOfOutputChannelsAndPreferredHardwareFormat(objc_msgSend(a1, "preferredNumberOfOutputChannels"), (uint64_t)a3));
          if (dword_1EE2B3F38)
          {
            v248 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if ((objc_msgSend((id)objc_msgSend(a1, "preferredHardwareFormat", v515, v518), "isEqualToString:", CFSTR("AC-3")) & 1) != 0|| objc_msgSend((id)objc_msgSend(a1, "preferredHardwareFormat"), "isEqualToString:", CFSTR("MATAtmos")))
          {
            if (dword_1EE2B3F38)
            {
              v269 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(a1, "preferredOutputSampleRate", v517, v520);
            v272 = v288;
            objc_msgSend(a1, "setPreferredOutputSampleRate:", 48000.0);
            v271 = objc_msgSend(a1, "preferredOutputSampleRateSetByClient");
            objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", 0);
            objc_msgSend(a1, "updatePreferredIOBufferFrames:", 0);
            v270 = 1;
          }
          else
          {
            v270 = 0;
            v271 = 0;
            v272 = 0.0;
          }
          if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
          {
            updated = cmsmUpdateDeviceAudioFormatConfigIfNeeded(0);
            v289 = v270 ^ 1;
            if (!(_DWORD)updated)
              v289 = 1;
            if ((v289 & 1) == 0)
              objc_msgSend(a1, "setPreferredOutputSampleRate:", v272);
            goto LABEL_964;
          }
          if (objc_msgSend(a1, "isActive")
            && -[MXSessionManager shouldSetDeviceFormatAndSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "shouldSetDeviceFormatAndSampleRate:", a1))
          {
            CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
            updated = vaemSetDeviceFormat(CurrentOutputVADID, (const void *)objc_msgSend(a1, "preferredHardwareFormat"), 0);
            v291 = v270 ^ 1;
            if (!(_DWORD)updated)
              v291 = 1;
            if ((v291 & 1) == 0)
            {
              objc_msgSend(a1, "setPreferredOutputSampleRate:", v272);
              objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", v271);
            }
            goto LABEL_964;
          }
          goto LABEL_963;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PreferredAudioHardwareIOBufferFrameDuration")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v249 = CFGetTypeID(a3);
        if (v249 != CFNumberGetTypeID())
          goto LABEL_1493;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
        LODWORD(v250) = LODWORD(valuePtr);
        objc_msgSend(a1, "updatePreferredIOBufferDuration:", v250);
        objc_msgSend(a1, "updatePreferredIOBufferFrames:", 0);
        if (objc_msgSend(a1, "isActive") && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          objc_msgSend(a1, "preferredOutputSampleRate");
          v252 = v251;
          PreferredIOBufferFrames = CMSUtility_GetPreferredIOBufferFrames(a1, v253);
          PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(a1, v255);
          IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
          cmsSetDeviceSampleRateAndBufferSize(a1, PreferredIOBufferFrames, IsCategoryInputOnly, v252, PreferredIOBufferDuration);
        }
        if (!dword_1EE2B3F38)
          return 0;
        *(_DWORD *)type = 0;
        v530 = OS_LOG_TYPE_DEFAULT;
        v258 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v259 = *(_DWORD *)type;
        if (os_log_type_enabled(v258, v530))
          v260 = v259;
        else
          v260 = v259 & 0xFFFFFFFE;
        if (v260)
        {
          v261 = objc_msgSend(a1, "clientName");
          v263 = CMSUtility_GetPreferredIOBufferDuration(a1, v262);
          *(_DWORD *)v536 = 136315650;
          *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
          *(_WORD *)&v536[12] = 2114;
          *(_QWORD *)&v536[14] = v261;
          *(_WORD *)&v536[22] = 2048;
          *(double *)&v536[24] = v263;
LABEL_829:
          _os_log_send_and_compose_impl();
          goto LABEL_1088;
        }
        goto LABEL_1088;
      }
      if (CFEqual(v4, CFSTR("PreferredAudioHardwareIOBufferFrames")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v273 = CFGetTypeID(a3);
        if (v273 != CFNumberGetTypeID())
          goto LABEL_1493;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        objc_msgSend(a1, "updatePreferredIOBufferFrames:", LODWORD(valuePtr));
        LODWORD(v274) = 0;
        objc_msgSend(a1, "updatePreferredIOBufferDuration:", v274);
        if (objc_msgSend(a1, "isActive") && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          objc_msgSend(a1, "preferredOutputSampleRate");
          v276 = v275;
          v278 = CMSUtility_GetPreferredIOBufferFrames(a1, v277);
          v280 = CMSUtility_GetPreferredIOBufferDuration(a1, v279);
          v281 = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
          cmsSetDeviceSampleRateAndBufferSize(a1, v278, v281, v276, v280);
        }
        if (!dword_1EE2B3F38)
          return 0;
        *(_DWORD *)type = 0;
        v530 = OS_LOG_TYPE_DEFAULT;
        v282 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v283 = *(_DWORD *)type;
        if (os_log_type_enabled(v282, v530))
          v284 = v283;
        else
          v284 = v283 & 0xFFFFFFFE;
        if (v284)
        {
          v285 = objc_msgSend(a1, "clientName");
          v287 = CMSUtility_GetPreferredIOBufferFrames(a1, v286);
          *(_DWORD *)v536 = 136315650;
          *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
          *(_WORD *)&v536[12] = 2114;
          *(_QWORD *)&v536[14] = v285;
          *(_WORD *)&v536[22] = 1024;
          *(_DWORD *)&v536[24] = v287;
          goto LABEL_829;
        }
LABEL_1088:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      if (CFEqual(v4, CFSTR("PreferredDecoupledInputOutput")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v292 = CFGetTypeID(a3);
        if (v292 != CFBooleanGetTypeID()
          || !CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput(objc_msgSend(a1, "audioCategory"))
          || objc_msgSend(a1, "requiresAggregatedInputOutput")
          || objc_msgSend(a1, "isPlaying"))
        {
          goto LABEL_1493;
        }
        objc_msgSend(a1, "setPreferredDecoupledInputOutput:", FigCFEqual() != 0);
        if (dword_1EE2B3F38)
          goto LABEL_960;
        goto LABEL_961;
      }
      if (CFEqual(v4, CFSTR("PreferredInputs")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v293 = CFGetTypeID(a3);
          if (v293 != CFArrayGetTypeID())
            goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
        {
LABEL_932:
          v321 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_933:
        if (a3 && CFArrayGetCount((CFArrayRef)a3) >= 1)
        {
          SubPortPreferenceFromPropertyValue = cmsCreateSubPortPreferenceFromPropertyValue(a1, (const __CFArray *)a3);
          if (SubPortPreferenceFromPropertyValue)
            cmsUpdateSubPortPreferences((CFIndex)a1, SubPortPreferenceFromPropertyValue);
        }
        else
        {
          objc_msgSend(a1, "setSubPortPreferences:", 0, v515, v518);
          objc_msgSend(a1, "setOverridePortsList:", 0);
          SubPortPreferenceFromPropertyValue = 0;
        }
        if (objc_msgSend(a1, "isActive", v515, v518)
          && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          cmsSetCategoryOnPVMAndAudioDevice(a1);
        }
        if (!SubPortPreferenceFromPropertyValue)
          goto LABEL_963;
        v268 = SubPortPreferenceFromPropertyValue;
        goto LABEL_810;
      }
      if (CFEqual(v4, CFSTR("PreferredInputSampleRate")))
      {
        if (a1)
        {
          if (a3)
          {
            v294 = CFGetTypeID(a3);
            if (v294 == CFNumberGetTypeID())
            {
              valuePtr = 0.0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat64Type, &valuePtr);
              objc_msgSend(a1, "setPreferredInputSampleRate:", valuePtr);
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)type = 0;
                v530 = OS_LOG_TYPE_DEFAULT;
                v295 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v296 = *(_DWORD *)type;
                if (os_log_type_enabled(v295, v530))
                  v297 = v296;
                else
                  v297 = v296 & 0xFFFFFFFE;
                if (v297)
                {
                  v298 = objc_msgSend(a1, "clientName");
                  *(_DWORD *)v536 = 136316162;
                  *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
                  *(_WORD *)&v536[12] = 2114;
                  *(_QWORD *)&v536[14] = v298;
                  *(_WORD *)&v536[22] = 2048;
                  *(_QWORD *)&v536[24] = a1;
                  v537 = 2114;
                  v538 = v4;
                  v539 = 2114;
                  v540 = a3;
                  LODWORD(v518) = 52;
                  v515 = v536;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (objc_msgSend(a1, "isActive", v515, v518)
                && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
              {
                cmsSetCategoryOnPVMAndAudioDevice(a1);
              }
              return 0;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PreferredMinimumMicrophoneIndicatorLightOnTime")))
      {
        if (!a1 || (objc_msgSend(a1, "hasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime") & 1) == 0)
          goto LABEL_1493;
        if (a3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_1493;
          -[NSDictionary floatValue](a3, "floatValue");
          if (v299 <= 0.0)
            goto LABEL_1493;
          if (dword_1EE2B3F38)
          {
            v300 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v307 = a1;
          v308 = a3;
        }
        else
        {
          if (dword_1EE2B3F38)
          {
            v304 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v307 = a1;
          v308 = 0;
        }
        objc_msgSend(v307, "setPreferredMinimumMicrophoneIndicatorLightOnTime:", v308, v515, v518);
        if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
          goto LABEL_963;
        goto LABEL_901;
      }
      if (CFEqual(v4, CFSTR("PreferredPersistentRoute")))
      {
        if (a1)
        {
          if (a3)
          {
            v301 = CFGetTypeID(a3);
            if (v301 != CFDictionaryGetTypeID())
              goto LABEL_1493;
            v302 = a3;
            if (!-[NSDictionary count](a3, "count"))
              v302 = 0;
            if (dword_1EE2B3F38)
            {
              LODWORD(valuePtr) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v303 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v313 = -[NSDictionary objectForKey:](v302, "objectForKey:", CFSTR("InputPortUIDs"), v515, v518);
            if (v313)
            {
              v314 = CFGetTypeID(v313);
              if (v314 != CFArrayGetTypeID())
                goto LABEL_1493;
            }
            v315 = -[NSDictionary objectForKey:](v302, "objectForKey:", CFSTR("OutputPortUIDs"));
            if (v315)
            {
              v316 = CFGetTypeID(v315);
              if (v316 != CFArrayGetTypeID())
                goto LABEL_1493;
            }
          }
          else
          {
            if (dword_1EE2B3F38)
            {
              v309 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v302 = 0;
          }
          objc_msgSend(a1, "setPreferredPersistentRoute:", v302, v515, v518);
          if ((objc_msgSend(a1, "hwControlFlags") & 2) != 0)
          {
            if (!objc_msgSend(a1, "isActive"))
              goto LABEL_963;
            v317 = objc_msgSend(a1, "preferredPersistentRoute");
            v318 = objc_msgSend(a1, "routingContextUUID");
            v550 = 0u;
            v551 = 0u;
            v548 = 0u;
            v549 = 0u;
            v546 = 0u;
            v547 = 0u;
            v544 = 0u;
            v545 = 0u;
            v542 = 0u;
            v543 = 0u;
            *(_OWORD *)buffer = 0u;
            v552 = v317;
            updated = cmsmSetVADRouteConfiguration(buffer, 0, v318);
            if (!(_DWORD)updated)
              goto LABEL_964;
          }
          else
          {
            cmsSetControlFlags(a1, objc_msgSend(a1, "hwControlFlags") & 0xFFFDFFFD | 2);
            if (!objc_msgSend(a1, "isActive"))
              goto LABEL_963;
            updated = cmsBeginInterruptionGuts(a1, 0, 2);
            if (!(_DWORD)updated)
              goto LABEL_964;
          }
          v319 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_964;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PreferredStereoInputOrientation")))
      {
        if (a1)
        {
          if (a3)
          {
            v305 = CFGetTypeID(a3);
            if (v305 == CFNumberGetTypeID())
            {
              ValueUInt32 = MXCFNumberGetValueUInt32((const __CFNumber *)a3);
              objc_msgSend(a1, "setPreferredStereoInputOrientation:", ValueUInt32);
              if (objc_msgSend(a1, "isActive")
                && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
              {
                updated = vaemSetStereoInputOrientation((int)ValueUInt32);
              }
              else
              {
                updated = 0;
              }
              if (objc_msgSend(a1, "preferredStereoInputOrientation"))
                objc_msgSend(a1, "setOrientationOverride:", 5);
              goto LABEL_964;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("RequiresAggregatedInputOutput")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v310 = CFGetTypeID(a3);
        if (v310 != CFBooleanGetTypeID()
          || !CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(a1, "audioCategory"))
          || objc_msgSend(a1, "isPlaying"))
        {
          goto LABEL_1493;
        }
        v311 = CFBooleanGetValue((CFBooleanRef)a3);
        if (dword_1EE2B3F38)
        {
          v312 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v311 == objc_msgSend(a1, "requiresAggregatedInputOutput", v515, v518))
          goto LABEL_963;
        objc_msgSend(a1, "setRequiresAggregatedInputOutput:", v311 != 0);
        if (!objc_msgSend(a1, "requiresAggregatedInputOutput")
          || !objc_msgSend(a1, "preferredDecoupledInputOutput"))
        {
          goto LABEL_963;
        }
        objc_msgSend(a1, "setPreferredDecoupledInputOutput:", 0);
        updated = 0;
        if (!objc_msgSend(a1, "isActive"))
          goto LABEL_964;
        goto LABEL_962;
      }
      if (CFEqual(v4, CFSTR("SelectedInputs")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v320 = CFGetTypeID(a3);
          if (v320 != CFArrayGetTypeID())
            goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
          goto LABEL_932;
        goto LABEL_933;
      }
      if (CFEqual(v4, CFSTR("SelectedOutputs")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v323 = CFGetTypeID(a3);
          if (v323 != CFArrayGetTypeID())
            goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
        {
          v324 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v324, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v327 = cmsCreateSubPortPreferenceFromPropertyValue(a1, (const __CFArray *)a3);
        if (v327)
        {
          v328 = v327;
          v329 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "subPortPreferences"));
          objc_msgSend(v329, "addObjectsFromArray:", v328);
          objc_msgSend(a1, "setSubPortPreferences:", v329);

        }
        goto LABEL_961;
      }
      if (CFEqual(v4, CFSTR("VPBlockConfiguration")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v325 = CFGetTypeID(a3);
          if (v325 != CFDictionaryGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "setVpBlockConfiguration:", a3);
        if (dword_1EE2B3F38)
          goto LABEL_960;
        goto LABEL_961;
      }
      if (CFEqual(v4, CFSTR("ActivationContext")) || CFEqual(v4, CFSTR("InitiationDescription")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v330 = CFGetTypeID(a3);
          if (v330 != CFDictionaryGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "setActivationContext:", a3);
        if (dword_1EE2B3F38)
        {
          v331 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setSiriInputDeviceUUID:", objc_msgSend((id)objc_msgSend(a1, "activationContext", v515, v518), "objectForKey:", 0x1E30A8468));
        if (objc_msgSend(a1, "siriInputDeviceUUID"))
        {
          cmsUpdateAudioBehavior(a1);
          objc_msgSend(a1, "setDontTakeOverHardware:", 1);
        }
        if (!objc_msgSend(a1, "isActive"))
          goto LABEL_963;
        v332 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v332, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0)
          goto LABEL_548;
        goto LABEL_979;
      }
      if (CFEqual(v4, CFSTR("DoesntActuallyPlayAudio")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v333 = CFGetTypeID(a3);
        if (v333 != CFBooleanGetTypeID())
        {
          v334 = CFGetTypeID(a3);
          if (v334 != CFNumberGetTypeID())
            goto LABEL_1493;
        }
        v335 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v335 == objc_msgSend(a1, "doesntActuallyPlayAudio"))
          goto LABEL_963;
        objc_msgSend(a1, "setDoesntActuallyPlayAudio:", v335 != 0);
        if (objc_msgSend(a1, "hwControlFlags")
          && objc_msgSend(a1, "doesntActuallyPlayAudio"))
        {
          objc_msgSend(a1, "setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:", objc_msgSend(a1, "hwControlFlags"));
          objc_msgSend(a1, "setHwControlFlags:", 0);
        }
        else if (!objc_msgSend(a1, "hwControlFlags")
               && (objc_msgSend(a1, "doesntActuallyPlayAudio") & 1) == 0)
        {
          objc_msgSend(a1, "setHwControlFlags:", objc_msgSend(a1, "savedHWControlFlagsForClientThatDoesNotActuallyPlayAudio"));
          if (dword_1EE2B3F38)
          {
            v341 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v341, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(a1, "isActive", v515, v518))
            cmsBeginInterruptionGuts(a1, 0, 2);
        }
        if (!objc_msgSend(a1, "isActive") || !CMSUtility_GetIsActuallyPlayingAudio(a1))
          goto LABEL_1176;
        if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
        {
          v376 = objc_msgSend(a1, "isActive");
          goto LABEL_1142;
        }
        if (objc_msgSend(a1, "shouldAttemptSmartRoutingHijackForMusicApp"))
        {
          v376 = (objc_msgSend(a1, "currentlyControllingFlags") >> 1) & 1;
LABEL_1142:
          if ((objc_msgSend(a1, "isPlaying") & 1) == 0)
          {
            if (!v376)
              goto LABEL_1176;
LABEL_1175:
            CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 7);
LABEL_1176:
            CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
            return 0;
          }
        }
        else
        {
          if (!objc_msgSend(a1, "isPlaying"))
            goto LABEL_1176;
          LOBYTE(v376) = 0;
        }
        if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
           || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(a1);
        }
        v392 = MX_FeatureFlags_IsSmartRoutingOnActivationEnabled();
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 7);
        if (v392)
          v393 = v376;
        else
          v393 = 1;
        if ((v393 & 1) == 0)
          goto LABEL_1176;
        goto LABEL_1175;
      }
      if (CFEqual(v4, CFSTR("HapticEngineIsPlaying")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v336 = CFGetTypeID(a3);
        if (v336 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v337 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v337 == objc_msgSend(a1, "hapticEngineIsPlaying"))
          goto LABEL_963;
        v338 = v337 != 0;
        v339 = a1;
        objc_msgSend(a1, "setHapticEngineIsPlaying:", v338);
        goto LABEL_1319;
      }
      if (CFEqual(v4, CFSTR("IAmWiredCar")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v340 = CFGetTypeID(a3);
          if (v340 != CFBooleanGetTypeID())
            goto LABEL_1493;
          if (CFBooleanGetValue((CFBooleanRef)a3))
          {
            CMSMSleep_CreateIdleSleepPreventorForSession(a1, CFSTR("com.apple.cmsession.WiredCarPlay.IsConnected"));
            return 0;
          }
        }
        CMSMSleep_ReleaseIdleSleepPreventorForSession(a1);
        return 0;
      }
      if (CFEqual(v4, CFSTR("IsPlayingOutput")))
      {
        if (a1)
        {
          if (a3)
          {
            v342 = CFGetTypeID(a3);
            if (v342 == CFBooleanGetTypeID())
            {
              v343 = CFBooleanGetValue((CFBooleanRef)a3);
              if (objc_msgSend(a1, "isPlayingOutput") != (v343 != 0))
              {
                if (dword_1EE2B3F38)
                {
                  v344 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v344, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                objc_msgSend(a1, "setIsPlayingOutput:", v343 != 0, v515, v518);
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("InputSource")))
      {
        if (a1)
        {
          if (a3)
          {
            v345 = CFGetTypeID(a3);
            if (v345 == CFNumberGetTypeID())
            {
              *(_DWORD *)buffer = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
              IsPlaying = vaemSetInputDataSource((uint64_t)a3);
              goto LABEL_1494;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IsExpanseCallSession")))
      {
        if (!MX_FeatureFlags_IsSharePlayEnabled())
          goto LABEL_963;
        if (a1)
        {
          if (a3)
          {
            v346 = CFGetTypeID(a3);
            if (v346 == CFBooleanGetTypeID())
            {
              v347 = objc_msgSend(a1, "audioCategory");
              objc_msgSend(a1, "audioMode");
              if (CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(v347)
                && (objc_msgSend(a1, "isSharePlayCapableCallSession") & 1) != 0)
              {
                v348 = CFBooleanGetValue((CFBooleanRef)a3);
                if (v348 == objc_msgSend(a1, "isSharePlayCallSession"))
                  goto LABEL_963;
                objc_msgSend(a1, "setIsSharePlayCallSession:", v348 != 0);
                if (dword_1EE2B3F38)
                {
                  v349 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                MEMORY[0x1940352BC](gCMSM);
                if (objc_msgSend(a1, "isActive")
                  && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
                {
                  if (!v348)
                    cmsSetCategoryOnPVMAndAudioDevice(a1);
                  CMSMUtility_SetSharePlayInfoOnVA(a1);
                  CMSMUtility_UpdateSharePlayVolumeBehaviours();
                }
                CMSUtility_UpdateBTLowLatencyMode();
                goto LABEL_395;
              }
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IsExpanseMediaSession")))
      {
        if (!MX_FeatureFlags_IsSharePlayEnabled())
          goto LABEL_963;
        if (a1)
        {
          if (a3)
          {
            v350 = CFGetTypeID(a3);
            if (v350 == CFBooleanGetTypeID()
              && -[MXSessionManager isAudioCategoryAllowedForSharePlayMedia:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryAllowedForSharePlayMedia:", objc_msgSend(a1, "audioCategory")))
            {
              v351 = CFBooleanGetValue((CFBooleanRef)a3);
              SharePlayMediaSession = CMSMUtility_GetSharePlayMediaSession();
              if (v351)
              {
                v353 = SharePlayMediaSession;
                if (SharePlayMediaSession)
                {
                  if (SharePlayMediaSession != a1)
                  {
                    if (dword_1EE2B3F38)
                    {
                      v354 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v354, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    objc_msgSend(v353, "setIsSharePlayMediaSession:", 0, v515, v518);
                  }
                }
              }
              if (v351 != objc_msgSend(a1, "isSharePlayMediaSession"))
              {
                objc_msgSend(a1, "setIsSharePlayMediaSession:", v351 != 0);
                if (dword_1EE2B3F38)
                {
                  v377 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v377, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (objc_msgSend(a1, "isActive", v515, v518))
                {
                  if (objc_msgSend(a1, "isSharePlayMediaSession"))
                    CMSMUtility_SetSharePlayInfoOnVA(a1);
                  CMSMUtility_UpdateSharePlayVolumeBehaviours();
                }
                CMSUtility_UpdateBTLowLatencyMode();
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IsPlaying")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v355 = CFGetTypeID(a3);
          if (v355 == CFNumberGetTypeID())
          {
            *(_DWORD *)buffer = 0;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
            v356 = *(_DWORD *)buffer == 1;
          }
          else
          {
            v380 = CFGetTypeID(a3);
            if (v380 != CFBooleanGetTypeID())
              goto LABEL_963;
            v356 = v522 == a3;
          }
          v379 = v356;
          v339 = a1;
          v378 = a1;
        }
        else
        {
          v339 = a1;
          v378 = a1;
          v379 = 0;
        }
        objc_msgSend(v378, "setClientIsPlaying:", v379);
LABEL_1319:
        CurrentConsolidatedPlayingState = CMSUtility_GetCurrentConsolidatedPlayingState(v339);
        IsPlaying = cmsSetIsPlaying(v339, CurrentConsolidatedPlayingState);
        goto LABEL_1494;
      }
      if (CFEqual(v4, CFSTR("IsRecording")))
      {
        if (a1)
        {
          if (a3)
          {
            v357 = CFGetTypeID(a3);
            if (v357 == CFBooleanGetTypeID())
            {
              v358 = CFBooleanGetValue((CFBooleanRef)a3);
              updated = CMSUtility_SetIsRecording(a1, v358);
              if (MX_FeatureFlags_IsSessionBasedMutingEnabled())
                goto LABEL_964;
              if ((_DWORD)updated)
                goto LABEL_964;
              v359 = objc_msgSend(a1, "isActive");
              if (!v358 || !v359)
                goto LABEL_964;
              if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
              {
                -[MXSessionManager replaceMutedBundleIDwithHostID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "replaceMutedBundleIDwithHostID");
                -[MXSessionManager applyUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "applyUplinkMute:", a1);
                -[MXSessionManager setUplinkMutedBundleID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setUplinkMutedBundleID:", 0);
                return 0;
              }
            }
          }
          else
          {
            v381 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v381, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_963;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("IsRecordingMuted")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v360 = CFGetTypeID(a3);
        if (v360 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v361 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v361 == objc_msgSend(a1, "isRecordingMuted"))
          goto LABEL_963;
        objc_msgSend(a1, "setIsRecordingMuted:", v361 != 0);
        if (dword_1EE2B3F38)
        {
          v362 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MX_SystemStatus_PublishRecordingClientsInfo();
        updated = -[MXExclaves updateSensorStatus:reason:](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "updateSensorStatus:reason:", a1, CFSTR("IsRecordingMuted property has changed"));
        if ((_DWORD)updated)
        {
          v382 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v382, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          objc_msgSend(a1, "setIsRecordingMuted:", v361 == 0);
          MX_SystemStatus_PublishRecordingClientsInfo();
        }
        if (!MX_FeatureFlags_IsSessionBasedMutingEnabled())
          goto LABEL_964;
        v385 = CMSUtility_CopyBundleID(a1);
        if (dword_1EE2B3F38)
        {
          v386 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        -[MXSessionManager updateBluetoothFrameworkToPlayMuteChime:playRejectTone:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v515, v518), "updateBluetoothFrameworkToPlayMuteChime:playRejectTone:", a1, 0);
        CMSMNotificationUtility_PostIsRecordingMutedDidChange(a1);
LABEL_1272:

        goto LABEL_964;
      }
      if (CFEqual(v4, CFSTR("NeedsAudioBudget")))
      {
        if (a1)
        {
          if (!a3 || (v363 = CFGetTypeID(a3), v363 == CFBooleanGetTypeID()))
          {
            objc_msgSend(a1, "audioCategory");
            if (!FigCFEqual())
              goto LABEL_963;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("OutputDestination")))
      {
        if (a1)
        {
          if (a3)
          {
            v364 = CFGetTypeID(a3);
            if (v364 == CFNumberGetTypeID())
            {
              *(_DWORD *)buffer = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
              vaemSetOutputDataDestination((uint64_t)a3);
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("OverrideRoute")))
      {
        if (a1)
        {
          objc_msgSend(a1, "setActivationContext:", 0);
          IsPlaying = cmsSetOverrideRoute(a1, a3);
          goto LABEL_1494;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PortOverride")))
      {
        if (a1)
        {
          if (!a3 || (v365 = CFGetTypeID(a3), v365 == CFArrayGetTypeID()))
          {
            *(_DWORD *)buffer = 0;
            *(_DWORD *)v536 = 0;
            v366 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
            CFNumberGetValue(v366, kCFNumberSInt32Type, buffer);
            v367 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
            CFNumberGetValue(v367, kCFNumberSInt32Type, v536);
            VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(*(int *)v536);
            v369 = vaemGetVADPortIDFromVADPortType(*(int *)buffer);
            objc_msgSend(a1, "setOverridePortsList:", 0);
            OverridePortsList = CMSMUtility_CreateOverridePortsList(v369, VADPortIDFromVADPortType);
            objc_msgSend(a1, "setOverridePortsList:", OverridePortsList);
            if (OverridePortsList)
              CFRelease(OverridePortsList);
            MEMORY[0x1940352BC](gCMSM);
            if (objc_msgSend(a1, "isActive"))
              cmsTryToTakeControl(a1);
LABEL_516:
            v128 = gCMSM;
            goto LABEL_396;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PowerProfile")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v371 = CFGetTypeID(a3);
          if (v371 != CFDictionaryGetTypeID())
            goto LABEL_1493;
          objc_msgSend(a1, "setPowerProfile:", a3);
          if (!dword_1EE2B3F38)
            goto LABEL_963;
        }
        else
        {
          objc_msgSend(a1, "setPowerProfile:", 0);
          if (!dword_1EE2B3F38)
            goto LABEL_963;
        }
        goto LABEL_1087;
      }
      if (CFEqual(v4, CFSTR("PrefersNoInterruptionWhenSecureMicrophoneIsEngaged"))
        || CFEqual(v4, CFSTR("PrefersToNotBeInterruptedWhenSecureMicIsEngaged")))
      {
        if (a1)
        {
          if (a3)
          {
            v373 = CFGetTypeID(a3);
            if (v373 == CFBooleanGetTypeID())
            {
              v374 = CFBooleanGetValue((CFBooleanRef)a3);
              if (CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1) != v374)
              {
                objc_msgSend(a1, "setPrefersNoInterruptionWhenSecureMicrophoneIsEngaged:", v374 != 0);
                if (dword_1EE2B3F38)
                {
                  v375 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (CMSUtility_GetIsRecording(a1)
                  && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1))
                {
                  CMSMUtility_UpdateSecureMicrophonePolicy(a1);
                  return 0;
                }
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PrefersSuppressingRecordingState")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v383 = CFGetTypeID(a3);
        if (v383 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v384 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v384 == objc_msgSend(a1, "prefersSuppressingRecordingState"))
          goto LABEL_963;
        if (objc_msgSend(a1, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording")
          && objc_msgSend(a1, "wantsToShowMicrophoneIndicatorWhenNotRecording")
          && v384)
        {
          goto LABEL_261;
        }
        objc_msgSend(a1, "setPrefersSuppressingRecordingState:", v384 != 0);
        if (dword_1EE2B3F38)
        {
          v391 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v391, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_901:
        if (!objc_msgSend(a1, "isRecording", v515, v518))
          goto LABEL_963;
        goto LABEL_95;
      }
      if (CFEqual(v4, CFSTR("PreferredNumberOfInputChannels")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v387 = CFGetTypeID(a3);
          if (v387 != CFNumberGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "audioCategory");
        if (FigCFEqual())
          goto LABEL_1493;
        if (a3)
        {
          *(_DWORD *)buffer = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
          v388 = *(_DWORD *)buffer;
          if (v388 > vaemGetMaximumNumberOfChannels(1))
            goto LABEL_1493;
          v389 = *(unsigned int *)buffer;
          v390 = a1;
        }
        else
        {
          v390 = a1;
          v389 = 0;
        }
        objc_msgSend(v390, "setPreferredNumberOfInputChannels:", v389);
        if (!objc_msgSend(a1, "isActive"))
          goto LABEL_963;
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
LABEL_1249:
          if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0
            && !-[MXSessionManager shouldSetDeviceFormatAndSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "shouldSetDeviceFormatAndSampleRate:", a1))
          {
            goto LABEL_963;
          }
LABEL_1302:
          objc_msgSend(a1, "preferredOutputSampleRate");
          v431 = v430;
          v433 = CMSUtility_GetPreferredIOBufferFrames(a1, v432);
          v435 = CMSUtility_GetPreferredIOBufferDuration(a1, v434);
          v436 = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(a1, "audioCategory"));
          cmsSetDeviceSampleRateAndBufferSize(a1, v433, v436, v431, v435);
          return 0;
        }
        goto LABEL_1280;
      }
      if (CFEqual(v4, CFSTR("PreferredNumberOfOutputChannels")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v394 = CFGetTypeID(a3);
          if (v394 != CFNumberGetTypeID())
            goto LABEL_1493;
        }
        objc_msgSend(a1, "audioCategory");
        if (FigCFEqual())
          goto LABEL_1493;
        if (dword_1EE2B3F38)
        {
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v395 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v395, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a3)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
          if (vaemIsMATAtmosEnabled())
          {
            v404 = LODWORD(valuePtr);
            if (LODWORD(valuePtr) >= 9)
            {
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)type = 0;
                v530 = OS_LOG_TYPE_DEFAULT;
                v405 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v406 = *(_DWORD *)type;
                if (os_log_type_enabled(v405, v530))
                  v407 = v406;
                else
                  v407 = v406 & 0xFFFFFFFE;
                if (v407)
                {
                  *(_DWORD *)v536 = 136315138;
                  *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
                  LODWORD(v518) = 12;
                  v515 = v536;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v416 = kMXSessionAudioHardwareFormat_MATAtmos;
                goto LABEL_1256;
              }
              v416 = kMXSessionAudioHardwareFormat_MATAtmos;
              goto LABEL_1257;
            }
          }
          IsAC3EncodingSupported = vaemIsAC3EncodingSupported();
          v404 = LODWORD(valuePtr);
          if (IsAC3EncodingSupported)
          {
            if (LODWORD(valuePtr) < 3)
            {
              if (v404 > vaemGetMaximumNumberOfChannels(0))
                goto LABEL_1493;
              v416 = kMXSessionAudioHardwareFormat_LPCM;
            }
            else
            {
              if (!dword_1EE2B3F38)
              {
                v416 = kMXSessionAudioHardwareFormat_AC3;
                goto LABEL_1257;
              }
              *(_DWORD *)type = 0;
              v530 = OS_LOG_TYPE_DEFAULT;
              v413 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v414 = *(_DWORD *)type;
              if (os_log_type_enabled(v413, v530))
                v415 = v414;
              else
                v415 = v414 & 0xFFFFFFFE;
              if (v415)
              {
                *(_DWORD *)v536 = 136315138;
                *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
                LODWORD(v518) = 12;
                v515 = v536;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v416 = kMXSessionAudioHardwareFormat_AC3;
            }
LABEL_1256:
            v404 = LODWORD(valuePtr);
LABEL_1257:
            objc_msgSend(a1, "setPreferredNumberOfOutputChannels:", v404, v515, v518);
            objc_msgSend(a1, "setPreferredHardwareFormat:", *v416);
            if (objc_msgSend(a1, "isActive"))
            {
              cmsTryToTakeControl(a1);
              return 0;
            }
            goto LABEL_963;
          }
          if (v404 > vaemGetMaximumNumberOfChannels(0))
            goto LABEL_1493;
          v411 = LODWORD(valuePtr);
          v410 = a1;
        }
        else
        {
          v410 = a1;
          v411 = 0;
        }
        objc_msgSend(v410, "setPreferredNumberOfOutputChannels:", v411, v515, v518);
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
          if (!objc_msgSend(a1, "isActive"))
            goto LABEL_963;
          goto LABEL_1249;
        }
        goto LABEL_1280;
      }
      if (CFEqual(v4, CFSTR("PreferredOutputSampleRate")) || CFEqual(v4, CFSTR("PreferredAudioHardwareSampleRate")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v396 = CFGetTypeID(a3);
        if (v396 != CFNumberGetTypeID())
          goto LABEL_1493;
        objc_msgSend(a1, "preferredOutputSampleRate");
        v398 = v397;
        valuePtr = 0.0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat64Type, &valuePtr);
        objc_msgSend(a1, "setPreferredOutputSampleRate:", valuePtr);
        objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", valuePtr != 0.0, valuePtr);
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)type = 0;
          v530 = OS_LOG_TYPE_DEFAULT;
          v399 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v400 = *(_DWORD *)type;
          if (os_log_type_enabled(v399, v530))
            v401 = v400;
          else
            v401 = v400 & 0xFFFFFFFE;
          if (v401)
          {
            v402 = objc_msgSend(a1, "clientName");
            objc_msgSend(a1, "preferredOutputSampleRate");
            *(_DWORD *)v536 = 136315650;
            *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
            *(_WORD *)&v536[12] = 2114;
            *(_QWORD *)&v536[14] = v402;
            *(_WORD *)&v536[22] = 2048;
            *(_QWORD *)&v536[24] = v403;
            LODWORD(v518) = 32;
            v515 = v536;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (vaemIsAC3EncodingSupported())
        {
          objc_msgSend(a1, "preferredHardwareFormat");
          v409 = FigCFEqual() != 0;
        }
        else
        {
          v409 = 0;
        }
        if (vaemIsMATAtmosEnabled())
        {
          objc_msgSend(a1, "preferredHardwareFormat");
          v419 = FigCFEqual() != 0;
        }
        else
        {
          v419 = 0;
        }
        if (v409 || v419)
        {
          objc_msgSend(a1, "preferredOutputSampleRate");
          if (v425 != 48000.0)
          {
            objc_msgSend(a1, "setPreferredOutputSampleRate:");
            objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", 0);
          }
        }
        objc_msgSend(a1, "preferredOutputSampleRate", v515, v518);
        if (v398 == v426)
          return 0;
        objc_msgSend(a1, "updatePreferredIOBufferFrames:", 0);
        if (!objc_msgSend(a1, "isActive"))
          return 0;
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
          if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0
            && !-[MXSessionManager shouldSetDeviceFormatAndSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "shouldSetDeviceFormatAndSampleRate:", a1))
          {
            return 0;
          }
          goto LABEL_1302;
        }
LABEL_1280:
        cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
        return 0;
      }
      if (CFEqual(v4, CFSTR("PreferredRouteControlFeatures")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_1493;
        }
        v385 = (id)objc_msgSend((id)objc_msgSend(a1, "preferredRouteControlFeatures"), "copy");
        objc_msgSend(a1, "setPreferredRouteControlFeatures:", a3);
        if (FigCFEqual())
          goto LABEL_1271;
        if (dword_1EE2B3F38)
        {
          v408 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v408, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (CMSMVAUtility_IsAdditiveRoutingEnabled() && objc_msgSend(a1, "isActive"))
          updated = -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA");
        else
LABEL_1271:
          updated = 0;
        goto LABEL_1272;
      }
      if (CFEqual(v4, CFSTR("ProcessAssertionAuditTokens")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v417 = CFGetTypeID(a3);
          if (v417 != CFArrayGetTypeID())
            goto LABEL_1493;
        }
        if ((objc_msgSend(a1, "hasEntitlementToSupportProcessAssertionAuditTokens") & 1) == 0)
          goto LABEL_1493;
        if (dword_1EE2B3F38)
        {
          v418 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v418, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v422 = (void *)objc_msgSend((id)objc_msgSend(a1, "parentProcessAuditTokens", v515, v518), "copy");
        v423 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", a3);
        objc_msgSend(a1, "setParentProcessAuditTokens:", v423);
        if (objc_msgSend(a1, "isActive") && objc_msgSend(a1, "isPlaying"))
        {
          if (dword_1EE2B3F38)
            goto LABEL_1270;
          goto LABEL_1311;
        }
        if (objc_msgSend(a1, "extendBackgroundAppAssertionTimer"))
        {
          if (dword_1EE2B3F38)
          {
LABEL_1270:
            v424 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v424, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_1311:
          CMSMSleep_UpdatePlaybackProcessAssertionsForHostProcesses(a1, (uint64_t)v422, v423);
        }

        return 0;
      }
      if (CFEqual(v4, CFSTR("RouteSharingPolicy")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v420 = CFGetTypeID(a3);
        if (v420 != CFNumberGetTypeID())
          goto LABEL_1493;
        CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
        if (CMSMDeviceState_IsHomePodHub() && CFPreferenceNumberWithDefault)
        {
          if (!dword_1EE2B3F38)
            goto LABEL_963;
          goto LABEL_1087;
        }
        v429 = MXCFNumberGetValueUInt32((const __CFNumber *)a3);
        if ((_DWORD)v429 == 1
          && CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
          && !CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
        {
          goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
        {
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v440 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "updateRouteSharingPolicy:setByClient:", v429, 1, v515, v518);
        if (objc_msgSend(a1, "routeSharingPolicy") == 3
          || objc_msgSend(a1, "routeSharingPolicy") == 1)
        {
          v446 = &qword_1EE2B3D08;
          goto LABEL_1334;
        }
        if (objc_msgSend(a1, "routeSharingPolicy") != 2)
        {
          v446 = &qword_1EE2B3CF0;
LABEL_1334:
          objc_msgSend(a1, "setRoutingContextUUID:", *v446);
        }
        if (dword_1EE2B3F38)
        {
          v450 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v450, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsUpdateAudioBehavior(a1);
        CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(a1, "routingContextUUID"));
        CFRetain(a1);
        v453 = MXGetNotificationSenderQueue();
        MXDispatchAsyncFunction((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", 11145, 0, 0, v453, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
        CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
        objc_msgSend(a1, "setRoutingContextSetByClient:", 1);
        goto LABEL_963;
      }
      if (CFEqual(v4, CFSTR("RoutingContextUUID")))
      {
        if (a1)
        {
          if (!a3 || (v427 = CFGetTypeID(a3), v427 == CFStringGetTypeID()))
          {
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) != 3
              || !CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
              || CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
            {
              objc_msgSend(a1, "routingContextUUID");
              if (!FigCFEqual())
              {
                objc_msgSend(a1, "setRoutingContextUUID:", a3);
                if (!objc_msgSend(a1, "routingContextUUID"))
                  objc_msgSend(a1, "setRoutingContextUUID:", qword_1EE2B3CF0);
                if (dword_1EE2B3F38)
                {
                  v428 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v428, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                cmsUpdateAudioBehavior(a1);
                CMSMUtility_InformAirPlayOfAudioModeIfNecessary(objc_msgSend(a1, "routingContextUUID"));
                CFRetain(a1);
                v439 = MXGetNotificationSenderQueue();
                MXDispatchAsyncFunction((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", 11184, 0, 0, v439, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
                objc_msgSend(a1, "setRoutingContextSetByClient:", 1);
                return 0;
              }
              goto LABEL_963;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("ShadowingAudioSessionID")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v437 = CFGetTypeID(a3);
          if (v437 != CFNumberGetTypeID())
            goto LABEL_1493;
          v438 = -[NSDictionary intValue](a3, "intValue");
        }
        else
        {
          v438 = 0;
        }
        objc_msgSend(a1, "setShadowingAudioSessionID:", v438);
        if (dword_1EE2B3F38)
        {
          v445 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v445, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MX_FeatureFlags_IsMandrakeEverywhereEnabled();
        return 0;
      }
      if (CFEqual(v4, CFSTR("SomeMXSessionIsPlaying")))
      {
        if (!a1)
          goto LABEL_1493;
        if (!a3)
          goto LABEL_1493;
        v441 = CFGetTypeID(a3);
        if (v441 != CFBooleanGetTypeID())
          goto LABEL_1493;
        v442 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v442 == objc_msgSend(a1, "someMXSessionIsPlaying"))
          goto LABEL_963;
        v443 = v442 != 0;
        v339 = a1;
        objc_msgSend(a1, "setSomeMXSessionIsPlaying:", v443);
        goto LABEL_1319;
      }
      if (CFEqual(v4, CFSTR("CarFigEndpointCentralObject")))
      {
        MEMORY[0x1940352BC](gCMSM);
        v447 = (const void *)qword_1EE2B3CD8;
        if (a3)
        {
          qword_1EE2B3CD8 = (uint64_t)a3;
          CFRetain(a3);
          if (v447)
            CFRelease(v447);
          v448 = qword_1EE2B3CD8;
          IsSiriActive = CMSMUtility_IsSiriActive();
          FigEndpointCentralUpdateIsVoiceAssistantActive(v448, IsSiriActive);
        }
        else if (qword_1EE2B3CD8)
        {
          CFRelease((CFTypeRef)qword_1EE2B3CD8);
          qword_1EE2B3CD8 = 0;
        }
        v128 = gCMSM;
        goto LABEL_396;
      }
      if (CFEqual(v4, CFSTR("UserMuted")))
      {
        if (!a1)
          goto LABEL_1493;
        if (a3)
        {
          v451 = CFGetTypeID(a3);
          if (v451 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v452 = CFBooleanGetValue((CFBooleanRef)a3);
          if (v452 && !PVMIsOKToMuteCurrentCategory())
          {
LABEL_479:
            updated = 4294954315;
            goto LABEL_964;
          }
        }
        else
        {
          v452 = 0;
        }
        if (v452 != objc_msgSend(a1, "userMuted"))
        {
          objc_msgSend(a1, "setUserMuted:", v452 != 0);
          if ((objc_msgSend(a1, "currentlyControllingFlags") & 0x10) != 0
            || CMSUtility_IsPlayingToSystemSoundLocalVAD(a1))
          {
            CMSUtility_UpdatePlaybackVolume(a1, 0.0, 0.0);
            return 0;
          }
        }
        goto LABEL_963;
      }
      if (CFEqual(v4, CFSTR("UserVolume")))
      {
        *(_DWORD *)buffer = 0;
        if (!a1)
          goto LABEL_1449;
        if (!a3)
          goto LABEL_1449;
        v454 = CFGetTypeID(a3);
        if (v454 != CFNumberGetTypeID())
          goto LABEL_1449;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
        v455 = *(float *)buffer;
        v456 = a1;
        v457 = 0;
        goto LABEL_1363;
      }
      if (CFEqual(v4, CFSTR("UserVolumeWithRefCon")))
      {
        *(_DWORD *)buffer = 0;
        if (!a1)
          goto LABEL_1449;
        if (!a3)
          goto LABEL_1449;
        v458 = CFGetTypeID(a3);
        if (v458 != CFDictionaryGetTypeID())
          goto LABEL_1449;
        v459 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("UserVolume"));
        CFNumberGetValue(v459, kCFNumberFloat32Type, buffer);
        v457 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("RefCon"));
        v455 = *(float *)buffer;
        v456 = a1;
LABEL_1363:
        cmsSetVolume(v456, (uint64_t)v457, v455);
        goto LABEL_963;
      }
      if (CFEqual(v4, CFSTR("VibratorOn")))
      {
        if (a1)
        {
          if (a3)
          {
            v460 = CFGetTypeID(a3);
            if (v460 == CFBooleanGetTypeID())
            {
              v461 = CFBooleanGetValue((CFBooleanRef)a3);
              if (dword_1EE2B3F38)
              {
                v462 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v462, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsVibrateForSession(a1, v461);
              return 0;
            }
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PickedRoute")))
      {
        if (!a3)
          goto LABEL_1493;
        v463 = CFGetTypeID(a3);
        if (v463 != CFDictionaryGetTypeID())
          goto LABEL_1493;
        CMSUtility_GetDisplayID(a1, v464);
        v465 = (const __CFDictionary *)a3;
LABEL_1388:
        IsPlaying = cmsmActivateEndpointFromRouteDescription(v465);
        goto LABEL_1494;
      }
      if (CFEqual(v4, CFSTR("RouteAwayFromAirPlay")))
      {
        if (a3)
        {
          v466 = CFGetTypeID(a3);
          if (v466 == CFBooleanGetTypeID())
          {
            CMSMAP_DisconnectAllAirPlaySessions(1);
            return 0;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("AvailableForVoicePrompts")))
      {
        v467 = CFGetTypeID(a3);
        if (v467 == CFDictionaryGetTypeID())
        {
          v468 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("PortNumber"));
          if (v468)
          {
            *(_DWORD *)buffer = 0;
            CFNumberGetValue(v468, kCFNumberSInt32Type, buffer);
            v469 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("BTDetails_IsAvailableForVoicePrompts")) == v522;
            updated = vaeSetPortAvailableForVoicePrompts(*(unsigned int *)buffer, v469);
            cmsmUpdatePickableRouteDescriptionLists(1);
            goto LABEL_964;
          }
          goto LABEL_963;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("PickedRouteWithPassword")))
      {
        if (!a3)
          goto LABEL_1493;
        v470 = CFGetTypeID(a3);
        if (v470 != CFDictionaryGetTypeID())
          goto LABEL_1493;
        CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("AVAudioRouteName"));
        FigCFEqual();
        CMSUtility_GetDisplayID(a1, v471);
        v465 = (const __CFDictionary *)a3;
        goto LABEL_1388;
      }
      if (CFEqual(v4, CFSTR("UplinkMute")))
      {
        if (a3)
        {
          v472 = CFGetTypeID(a3);
          if (v472 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v473 = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          v473 = 0;
        }
        IsPlaying = vaemSetUplinkMute(v473);
        goto LABEL_1494;
      }
      if (CFEqual(v4, CFSTR("DownlinkMute")))
      {
        if (a3)
        {
          v474 = CFGetTypeID(a3);
          if (v474 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v475 = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          v475 = 0;
        }
        IsPlaying = vaemSetDownlinkMute(v475);
        goto LABEL_1494;
      }
      if (CFEqual(v4, CFSTR("StarkMainAudioIsOwnedByiOSButBorrowedByCar")))
      {
        if (a3)
        {
          v476 = CFGetTypeID(a3);
          if (v476 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v477 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v478 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v477 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v478 = 0;
        }
        -[MXSessionManager setStarkMainAudioIsOwnedByiOSButBorrowedByCar:](v477, "setStarkMainAudioIsOwnedByiOSButBorrowedByCar:", v478);
        return 0;
      }
      if (CFEqual(v4, CFSTR("MakeStarkPortRoutableForPlayingSession")))
      {
        if (a3)
        {
          v479 = CFGetTypeID(a3);
          if (v479 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v480 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v481 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v480 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v481 = 0;
        }
        -[MXSessionManager makeStarkPortRoutableForPlayingSession:](v480, "makeStarkPortRoutableForPlayingSession:", v481);
        return 0;
      }
      if (CFEqual(v4, CFSTR("MakeStarkPortRoutableForPhoneCall")))
      {
        if (a3)
        {
          v482 = CFGetTypeID(a3);
          if (v482 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v483 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v484 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v483 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v484 = 0;
        }
        -[MXSessionManager makeStarkPortRoutableForPhoneCall:](v483, "makeStarkPortRoutableForPhoneCall:", v484);
        return 0;
      }
      if (CFEqual(v4, CFSTR("CarSpeechStateChanged")))
      {
        if (!a3)
          goto LABEL_963;
        v485 = CFGetTypeID(a3);
        if (v485 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue((CFBooleanRef)a3))
          {
            CMSMNotificationUtility_PostVoicePromptStyleDidChange();
            return 0;
          }
          goto LABEL_963;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("NowPlayingAppShouldResumeForCarPlay")))
      {
        if (a3)
        {
          v486 = CFGetTypeID(a3);
          if (v486 != CFBooleanGetTypeID())
            goto LABEL_1493;
          v487 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v488 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v487 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          v488 = 0;
        }
        -[MXSessionManager nowPlayingAppShouldResumeForCarPlay:](v487, "nowPlayingAppShouldResumeForCarPlay:", v488);
        return 0;
      }
      if (CFEqual(v4, CFSTR("AllowAppToInitiatePlaybackTemporarily")))
      {
        if (!a3 || (v489 = CFGetTypeID(a3), v489 == CFStringGetTypeID()))
        {
          -[MXSessionManager setAppAllowedToInitiatePlaybackTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setAppAllowedToInitiatePlaybackTemporarily:", a3);
          cmsmStartAllowedToInitiatePlaybackTemporarilyTimer();
          return 0;
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("HeadphoneVolumeLimit")))
      {
        if (a3)
        {
          v490 = CFGetTypeID(a3);
          if (v490 == CFNumberGetTypeID())
          {
            *(_DWORD *)buffer = 1065353216;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
            v491 = *(float *)buffer;
            v492 = CMSMUtility_GetVolumeSequenceNumber();
            PVMSetVolumeLimit(v492, v491);
            return 0;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("VibeIntensity")))
      {
        LODWORD(valuePtr) = 1065353216;
        if (a3)
        {
          v493 = CFGetTypeID(a3);
          if (v493 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &valuePtr);
            v494 = *(float *)&valuePtr;
            if (v494 != PVMGetVibeIntensityPreference())
            {
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)type = 0;
                v530 = OS_LOG_TYPE_DEFAULT;
                v495 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v496 = *(_DWORD *)type;
                if (os_log_type_enabled(v495, v530))
                  v498 = v496;
                else
                  v498 = v496 & 0xFFFFFFFE;
                if (v498)
                {
                  DisplayID = CMSUtility_GetDisplayID(a1, v497);
                  *(_DWORD *)v536 = 136315650;
                  *(_QWORD *)&v536[4] = "MXCoreSessionSetProperty";
                  *(_WORD *)&v536[12] = 2114;
                  *(_QWORD *)&v536[14] = DisplayID;
                  *(_WORD *)&v536[22] = 2048;
                  *(double *)&v536[24] = *(float *)&valuePtr;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v503 = PVMSetVibeIntensityPreference(*(float *)&valuePtr);
              updated = v503;
              if (!(_DWORD)v503)
                FigRoutingContextUtilities_LogCurrentState(v503, v504);
              goto LABEL_964;
            }
            goto LABEL_963;
          }
        }
        goto LABEL_1449;
      }
      if (CFEqual(v4, CFSTR("ThermalGainAdjustment_Speaker")))
      {
        if (!a3)
          goto LABEL_1493;
        v500 = CFGetTypeID(a3);
        if (v500 != CFNumberGetTypeID())
          goto LABEL_1493;
        v501 = qword_1EE2B3BE0;
        v502 = CFSTR("VAEM_ThermalGainAdjustment_Speaker");
LABEL_1462:
        FigEndpointManagerSetProperty(v501, (uint64_t)v502, (uint64_t)a3);
        return 0;
      }
      if (CFEqual(v4, CFSTR("ThermalGainAdjustment_Haptics")))
      {
        if (!a3)
          goto LABEL_1493;
        v505 = CFGetTypeID(a3);
        if (v505 != CFNumberGetTypeID())
          goto LABEL_1493;
        v501 = qword_1EE2B3BE0;
        v502 = CFSTR("VAEM_ThermalGainAdjustment_Haptics");
        goto LABEL_1462;
      }
      if (CFEqual(v4, CFSTR("AppToInterruptCurrentNowPlayingSession")))
      {
        if (a3)
        {
          v506 = CFGetTypeID(a3);
          if (v506 != CFStringGetTypeID())
            goto LABEL_1493;
        }
        if (dword_1EE2B3F38)
        {
          v507 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v507, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a3)
          v116 = CMSMUtility_CopyActiveMXCoreSessionEligibleForNowPlayingAppConsideration((uint64_t)a3);
        else
          v116 = 0;
        v512 = CMSMNP_CopyNowPlayingAppSession();
        v513 = v512;
        if (v512)
        {
          if (objc_msgSend(v512, "audioSessionID"))
            CMSMUtility_PostStopCommandToShadowingSessionsForSession(v513, a3 == 0);
          CMSMNotificationUtility_PostStopCommandToActiveClientWithDisplayID(objc_msgSend(v513, "displayID", v515, v518), 0);
        }
        if (v116)
        {
          CMSUtility_UpdateRoutingContextForSession(v116);
          -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(v116, "clientPID"), "intValue"), 0, 4);
        }

LABEL_360:
        return 0;
      }
      if (CFEqual(v4, CFSTR("AirPlayScreenSuspended")))
      {
        if (a3)
        {
          v508 = CFGetTypeID(a3);
          if (v508 == CFBooleanGetTypeID())
          {
            v509 = CFBooleanGetValue((CFBooleanRef)a3);
            v510 = -[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID");
            if (v509)
              FigRoutingManagerSuspendCurrentEndpointScreen((uint64_t)v510);
            else
              FigRoutingManagerResumeCurrentEndpointScreen((uint64_t)v510);
            return 0;
          }
        }
        goto LABEL_1493;
      }
      if (CFEqual(v4, CFSTR("ThermalControlInfo")))
      {
        if (!a3 || (v511 = CFGetTypeID(a3), v511 == CFDictionaryGetTypeID()))
        {
          IsPlaying = vaemSetThermalControlInfo((uint64_t)a3);
          goto LABEL_1494;
        }
      }
      else
      {
        if (!CFEqual(v4, CFSTR("AllowAppToFadeInTemporarily")))
        {
          updated = 4294954312;
          goto LABEL_964;
        }
        if (!a3 || (v514 = CFGetTypeID(a3), v514 == CFStringGetTypeID()))
        {
          if (MX_FeatureFlags_IsHandoffEnabled())
          {
            -[MXSessionManager setAppAllowedToFadeInTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setAppAllowedToFadeInTemporarily:", a3);
            cmsmStartAllowedToFadeInTemporarilyTimer();
            return 0;
          }
          goto LABEL_963;
        }
      }
LABEL_1493:
      IsPlaying = FigSignalErrorAt();
      goto LABEL_1494;
    }
    if (!a1)
      return FigSignalErrorAt();
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 != CFStringGetTypeID())
        goto LABEL_1493;
    }
    objc_msgSend(a1, "audioCategory");
    if (!FigCFEqual() || (v7 = FigCFEqual(), v8 = v522, !v7))
    {
      objc_msgSend(a1, "audioCategory");
      if (!FigCFEqual())
        break;
      if (!FigCFEqual())
        break;
      v9 = objc_msgSend(a1, "createSpeakerDevice");
      v8 = v521;
      if ((v9 & 1) == 0)
        break;
    }
    a4 = 0;
    v525 = 1;
    a3 = v8;
    v4 = CFSTR("CreateSpeakerDevice");
    if (!CFSTR("CreateSpeakerDevice"))
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  if (!FigCFEqual()
    || CMSMDeviceState_SupportsBeacon()
    || MX_FeatureFlags_IsMandrakeEverywhereEnabled())
  {
    objc_msgSend(a1, "setEnableBluetoothRecordingPreference:", 0);
    objc_msgSend(a1, "setEnableBluetoothRecordingPreferenceSetByClient:", 0);
    objc_msgSend(a1, "setDefaultBuiltInRoutePreference:", 0);
    objc_msgSend(a1, "setDefaultBuiltInRoutePreferenceSetByClient:", 0);
    v113 = a1;
    v114 = (uint64_t)a3;
    goto LABEL_349;
  }
  v191 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if ((v525 & 1) == 0)
    return 4294951615;
  return 0;
}

uint64_t MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled()
{
  if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_onceToken, &__block_literal_global_69);
  return MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_sPublishHostAttributionToSystemStatusEnabled;
}

const __CFNumber *MXCFNumberGetValueUInt32(const __CFNumber *result)
{
  uint64_t valuePtr;

  valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void *CMSUtility_SetAudioOnlyAirPlayVideoIsActive(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "setIsAudioOnlyAirPlayVideoActive:", (_DWORD)a2 != 0);
  return a1;
}

void *CMSUtility_SetAirPlayVideoIsActive(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "setIsActiveOverAirPlayVideo:", (_DWORD)a2 != 0);
  return a1;
}

uint64_t CMSUtility_GetIsActuallyPlayingAudio(void *a1)
{
  if (a1)
    return objc_msgSend(a1, "doesntActuallyPlayAudio") ^ 1;
  else
    return 1;
}

void FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager(const void *a1, const void *a2, const void *a3, const void *a4)
{
  void *SharedManager;
  NSObject *v9;
  _QWORD v10[8];

  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  v9 = *((_QWORD *)SharedManager + 1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  v10[7] = a4;
  MXDispatchAsync((uint64_t)"FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager", (uint64_t)"FigRoutingManager_iOS.m", 4758, 0, 0, v9, (uint64_t)v10);
}

void cmsmdeviceState_BatteryStateChanged(int a1, io_registry_entry_t entry, int a3)
{
  CFTypeRef CFProperty;

  if (a3 == -536723200)
  {
    CFProperty = IORegistryEntryCreateCFProperty(entry, CFSTR("ExternalConnected"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    byte_1EE2B2A10 = FigCFEqual();
    if (CFProperty)
      CFRelease(CFProperty);
  }
}

void sub_193671F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t vaemIsDefaultVADInItsDefaultConfiguration()
{
  uint64_t result;

  result = vaemIsVirtualAudioInItsDefaultRouteConfiguration();
  if ((_DWORD)result)
  {
    -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory");
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      -[MXSessionManager currentAudioMode](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioMode");
      return FigCFEqual() != 0;
    }
  }
  return result;
}

BOOL vaemIsVirtualAudioInItsDefaultRouteConfiguration()
{
  int VirtualAudioPlugInMode;
  int64x2_t v1;
  int64x2_t v2;
  int64x2_t v3;
  BOOL v4;

  if (vaemGetVirtualAudioPlugInCategory() != 1668505974)
    return 0;
  VirtualAudioPlugInMode = vaemGetVirtualAudioPlugInMode();
  v1.i64[0] = qword_1EE2B2BC8;
  v1.i64[1] = qword_1EE2B2B98;
  v2.i64[0] = qword_1EE2B2BC0;
  v2.i64[1] = qword_1EE2B2BA0;
  v3.i64[0] = qword_1EE2B3BF8;
  v3.i64[1] = qword_1EE2B2BE0;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v2), (int32x4_t)vceqzq_s64(v3)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v1), (int32x4_t)vceqzq_s64((int64x2_t)xmmword_1EE2B2BA8)))))) & 1) != 0|| qword_1EE2B2C48|| qword_1EE2B2BD8)
  {
    return 0;
  }
  v4 = !(byte_1EE2B2C40 | (byte_1EE2B2BD1 | byte_1EE2B2BD0))
    && VirtualAudioPlugInMode == 1768776806;
  return v4 && byte_1EE2B2BD2 == 0;
}

uint64_t vaemGetVirtualAudioPlugInCategory()
{
  unsigned int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  *(_QWORD *)&inAddress.mSelector = 0x676C6F6272637478;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

uint64_t CMSMUtility_UpdateRoutingContextForSessionsWithPID(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
          CMSUtility_UpdateRoutingContextForSession(v7);
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
}

BOOL CMSMUtility_FetchUIShouldIgnoreRemoteControlEvents(uint64_t a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;
  _BOOL8 v3;

  if ((int)a1 < 1)
    return 0;
  v1 = (const __CFBoolean *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID((uint64_t)CFSTR("UIShouldIgnoreRemoteControlEvents"), a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFBooleanGetValue(v1) != 0;
  CFRelease(v2);
  return v3;
}

void CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(CFTypeRef cf)
{
  NSObject *v2;
  _QWORD v3[5];

  if (cf)
    CFRetain(cf);
  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange_block_invoke;
  v3[3] = &unk_1E3099900;
  v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1229, 0, 0, v2, (uint64_t)v3);
}

CFIndex cmsUpdateSubPortPreferences(CFIndex result, CFArrayRef theArray)
{
  void *v3;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (result)
  {
    if (theArray)
    {
      v3 = (void *)result;
      result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        for (i = 0; i < result; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
          v6 = objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count");
          if (v6 < 1)
          {
LABEL_9:
            v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
            objc_msgSend(v9, "addObject:", ValueAtIndex);
          }
          else
          {
            v7 = v6;
            v8 = 0;
            while (!cmsmSubPortPreferenceMatches((const __CFDictionary *)objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "objectAtIndex:", v8), ValueAtIndex))
            {
              if (v7 == ++v8)
                goto LABEL_9;
            }
            v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
            objc_msgSend(v9, "setObject:atIndexedSubscript:", ValueAtIndex, v8);
          }
          objc_msgSend(v3, "setSubPortPreferences:", v9);

          result = CFArrayGetCount(theArray);
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

__CFArray *CMSUtility_CopyConsolidatedSourceFormatInfo(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  __CFDictionary *Mutable;
  const __CFDictionary *v7;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  const void *v13;
  __CFArray *theArray;
  id obj;
  const __CFAllocator *allocator;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = (id)objc_msgSend(a1, "copyMXSessionList");
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v19;
    v12 = (const void *)*MEMORY[0x1E0C9AE40];
    v13 = (const void *)*MEMORY[0x1E0C9AE50];
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v19 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        if (objc_msgSend(v5, "getIsPlaying"))
        {
          Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          objc_msgSend(v5, "getBestAvailableContentType");
          FigCFDictionarySetValue();
          v7 = (const __CFDictionary *)objc_msgSend(v5, "getCurrentlyPlayingSourceFormatInfo");
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          if (v7
            && !CFDictionaryContainsKey(v7, CFSTR("CurrentlyPlayingContentIsEligibleForSpatialization"))
            && (CFDictionaryGetValue(Mutable, CFSTR("CurrentlyPlayingFormat"))
             || CFDictionaryGetValue(Mutable, CFSTR("CurrentlyPlayingChannelCount"))))
          {
            if (objc_msgSend(v5, "getCurrentlyPlayingContentIsEligibleForSpatialization"))
              v8 = v13;
            else
              v8 = v12;
            CFDictionarySetValue(Mutable, CFSTR("CurrentlyPlayingContentIsEligibleForSpatialization"), v8);
          }
          if (CFDictionaryGetCount(Mutable) >= 1)
            goto LABEL_21;
          if (Mutable)
            goto LABEL_22;
        }
        else if (objc_msgSend(v5, "getClientType") == 2
               && objc_msgSend(a1, "someMXSessionIsPlaying"))
        {
          Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          objc_msgSend(v5, "getBestAvailableContentType");
          FigCFDictionarySetValue();
LABEL_21:
          CFArrayAppendValue(theArray, Mutable);
          if (!Mutable)
            continue;
LABEL_22:
          CFRelease(Mutable);
          continue;
        }
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v2);
  }

  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1 && dword_1EE2B3F38 != 0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return theArray;
}

uint64_t _MXSessionBeginInterruption_WithSecTaskAndFlags(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t UpTimeNanoseconds;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (!a1)
    return FigSignalErrorAt();
  v7 = (void *)MEMORY[0x194035B20](v6);
  if (isSessionSidekick(a1))
  {
    v8 = objc_msgSend(a1, "activate");
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v8 = objc_msgSend(a1, "_beginInterruptionWithSecTask:andFlags:", a2, a3);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionBeginInterruption_WithSecTaskAndFlags", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v7);
  return v8;
}

void *isSessionSidekick(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isMemberOfClass:", objc_opt_class());
  return result;
}

uint64_t MXCoreSessionBeginInterruption_WithSecTaskAndFlags(void *a1, __SecTask *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v10;
  int IsPlaying;
  int IsDisruptiveWhenGoingActive;
  BOOL v13;
  int IsRemoteInterruptionRequired;

  if (a1)
  {
    if (a4
      || (objc_msgSend(a1, "isActive") & 1) != 0
      || CMSUtility_HasEntitlementForInterruptions(a1, a2))
    {
      objc_msgSend(a1, "audioCategory");
      if (FigCFEqual()
        || objc_msgSend(a1, "isActive")
        && objc_msgSend(a1, "isPlaying")
        && !objc_msgSend(a1, "isTheAssistant"))
      {
        return 0;
      }
      else
      {
        if (!CMSUtility_IsAllowedToStartPlaying(a1))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v7 = 4294950316;
LABEL_27:
          CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
          return v7;
        }
        CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 1);
        if ((a3 & 4) != 0)
        {
          v10 = CMSMUtility_CopyCurrentRouteTypes();
          IsPlaying = CMSMUtility_SomeClientIsPlaying();
          IsDisruptiveWhenGoingActive = CMSUtility_IsDisruptiveWhenGoingActive(a1);
          if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
            v13 = FigCFArrayContainsValue() == 0;
          else
            v13 = 0;
          IsRemoteInterruptionRequired = CMSUtility_IsRemoteInterruptionRequired(a1);
          v7 = 4294954309;
          if (!IsPlaying && !IsDisruptiveWhenGoingActive && !v13 && !IsRemoteInterruptionRequired)
            v7 = cmsBeginInterruptionGuts(a1, 0, a3);
          if (v10)
            CFRelease(v10);
        }
        else
        {
          v7 = cmsBeginInterruptionGuts(a1, 0, a3);
        }
        if ((_DWORD)v7)
          goto LABEL_27;
      }
    }
    else
    {
      return 4294954308;
    }
  }
  else
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v7;
}

uint64_t CMSUtility_IsAllowedToStartPlaying(void *a1)
{
  unsigned int ApplicationStateForSession;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (MX_CoreServices_GetDeviceManagementPolicyForBundleID((void *)objc_msgSend(a1, "displayID"))
    && !CMSMUtility_IsCarPlaySessionPresent())
  {
    if (dword_1EE2B3F38)
      goto LABEL_23;
    return 0;
  }
  if (objc_msgSend(a1, "applicationState") == 8)
    return 1;
  if (!objc_msgSend(a1, "applicationState"))
    return 1;
  ApplicationStateForSession = CMSUtility_GetApplicationStateForSession(a1);
  CMSessionMgrSetApplicationStateFromPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), ApplicationStateForSession);
  if (objc_msgSend(a1, "applicationState") == 8 || !objc_msgSend(a1, "applicationState"))
    return 1;
  if (objc_msgSend(a1, "applicationState") != 4)
  {
    if (dword_1EE2B3F38)
      goto LABEL_23;
    return 0;
  }
  if (!CMSUtility_HasBackgroundEntitlement(a1) && !CMSUtility_IsReplayKitExtension(a1))
  {
    if (dword_1EE2B3F38)
      goto LABEL_23;
    return 0;
  }
  if (objc_msgSend(a1, "stopsWhenDeviceLocks"))
  {
    if (dword_1EE2B3F38)
      goto LABEL_23;
    return 0;
  }
  if (!objc_msgSend(a1, "mixesWithEveryone")
    || cmsutility_hasAssertionsToStartMixablePlayback(a1))
  {
    return 1;
  }
  if (dword_1EE2B3F38)
  {
LABEL_23:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t MX_CoreServices_GetDeviceManagementPolicyForBundleID(void *key)
{
  const __CFNumber *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t valuePtr[23];

  valuePtr[22] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = 0;
  if (key && gCoreServicesIsInitialized)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)gDeviceManagementPolicyCache, key))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gDeviceManagementPolicyCache, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberLongType, valuePtr);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      valuePtr[0] = objc_msgSend((id)objc_msgSend((id)gLSApplicationProxyClass, "applicationProxyForIdentifier:", key), "deviceManagementPolicy");
      cmsmLSUpdateDeviceManagementCache(valuePtr[0]);
    }
  }
  return valuePtr[0];
}

uint64_t CMSUtility_HasEntitlementForInterruptions(void *a1, __SecTask *a2)
{
  CFTypeRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  if (objc_msgSend(a1, "clientPriority") != 10)
    return 1;
  if (a2)
  {
    v3 = SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.private.coremedia.interruptions.phonecallpriority.allow"), 0);
    if (FigCFEqual())
    {
      if (!dword_1EE2B3F38)
      {
        v5 = 1;
        if (!v3)
          return v5;
        goto LABEL_12;
      }
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v3)
LABEL_12:
        CFRelease(v3);
    }
    else
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v5 = 0;
      if (v3)
        goto LABEL_12;
    }
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return v5;
}

void CMSessionMgrSystemSoundActivateForPID(int a1, char a2, int a3)
{
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  int v9;
  int v10;
  char v11;
  _QWORD v12[3];
  int v13;

  v6 = (void *)MEMORY[0x194035B20]();
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v13 = 0;
  v7 = MXGetSerialQueue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CMSessionMgrSystemSoundActivateForPID_block_invoke;
  v8[3] = &unk_1E309EA28;
  v11 = a2;
  v8[4] = v12;
  v9 = a1;
  v10 = a3;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundActivateForPID", (uint64_t)"CMSessionManager_SystemSounds.m", 4628, 0, 0, v7, (uint64_t)v8);
  _Block_object_dispose(v12, 8);
  objc_autoreleasePoolPop(v6);
}

void sub_1936747B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_IsSomeClientRecording()
{
  uint64_t v0;

  MEMORY[0x1940352BC](gCMSM);
  if (byte_1EE2B3C99)
    v0 = dword_1EE2B3C00;
  else
    v0 = 0;
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

void cmsmPrewarmAudioForSSID(int a1, uint64_t key, int a3)
{
  const __CFString *v6;
  BOOL v7;
  __CFString *MappedBehaviorCategory;
  uint64_t CurrentVADForSystemSoundAudioCategory;
  AudioObjectID v10;
  __CFString *VADNameForVADID;
  BOOL v12;
  CFTypeID TypeID;
  const __CFArray *Mutable;
  void *value;

  v6 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)key);
  if (v6)
    v7 = 0;
  else
    v7 = key > 0x1000;
  if (v7)
    v6 = CFSTR("ThirdPartySystemSound");
  MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v6);
  CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0);
  v10 = CurrentVADForSystemSoundAudioCategory;
  VADNameForVADID = CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory);
  value = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
  {
    v12 = gCMSS_5 == 0;
  }
  else
  {
    v12 = 1;
  }
  if (!v12)
  {
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gCMSS_5, VADNameForVADID, (const void **)&value)
      && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(value)))
    {
      cmsmPrewarmAudioDeviceIDForSSID(key, a3, v10, (uint64_t)VADNameForVADID, (const __CFArray *)value, a1);
      CFDictionaryReplaceValue((CFMutableDictionaryRef)gCMSS_5, VADNameForVADID, value);
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      cmsmPrewarmAudioDeviceIDForSSID(key, a3, v10, (uint64_t)VADNameForVADID, Mutable, a1);
      CFDictionaryAddValue((CFMutableDictionaryRef)gCMSS_5, VADNameForVADID, Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

const __CFString *CMSystemsoundMgr_GetMappedBehaviorCategory(CFStringRef theString)
{
  CFStringRef v1;
  const __CFString *Value;
  const __CFString *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int IsCarrierNetworkReachable;
  const void *v6;
  const void *v7;
  NSObject *v8;
  uint64_t CurrentCountryCode;
  int v11;
  int v12;
  BOOL v13;
  char v14;
  int v15;
  NSObject *v16;

  v1 = theString;
  if (!theString
    || !gRegionalSystemSoundsThatShareBehaviour
    || CFStringFind(theString, CFSTR("CameraShutter"), 1uLL).length >= 1
    && !CMSMUtility_IsCameraBeingUsed())
  {
    return v1;
  }
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gRegionalSystemSoundsThatShareBehaviour, v1);
  if (!Value)
    return v1;
  v3 = Value;
  if (FigCFEqual())
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v3;
  }
  if (!CFStringHasSuffix(v3, CFSTR("AlwaysHeard")) || !gCMSS_3 || CMSMDeviceState_IsAirplaneModeEnabled())
    return v3;
  IsCarrierNetworkReachable = MX_NetworkObserver_IsCarrierNetworkReachable();
  v6 = (const void *)MX_TelephonyClient_CopyIsoCountryCodeForMCC();
  v7 = (const void *)MX_TelephonyClient_CopyCountryNameFromOperatorCountryBundle();
  if (dword_1EE2B3F38)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (IsCarrierNetworkReachable)
  {
    CurrentCountryCode = MX_GEOCountryConfigurationObserver_GetCurrentCountryCode();
    v11 = MX_NetworkObserver_IsCarrierNetworkReachable();
    if (CurrentCountryCode && !FigCFEqual())
    {
      if (FigCFEqual())
        v13 = 1;
      else
        v13 = v11 == 0;
      v12 = v13;
      if (!v13)
        v11 = 1;
    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v12 = 1;
    if (!v6 || !v7)
      goto LABEL_46;
    v11 = 0;
  }
  if (v11 || !v6 || !v7)
    goto LABEL_41;
  if (FigCFStringFind() || (v14 = 1, FigCFStringFind()))
  {
    v14 = 0;
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  if (!FigCFEqual() && !FigCFEqual())
  {
    if (!FigCFEqual() && ((FigCFEqual() == 0) & ~v15) != 0)
      goto LABEL_43;
LABEL_41:
    if (v12)
    {
      v12 = 1;
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  if ((v14 & 1) == 0)
    goto LABEL_41;
LABEL_43:
  if (dword_1EE2B3F38)
  {
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = 0;
LABEL_46:
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v12)
    return v3;
  return v1;
}

void cmsmPrewarmAudioDeviceIDForSSID(uint64_t a1, int a2, AudioObjectID a3, uint64_t a4, const __CFArray *a5, int a6)
{
  CFNumberRef v9;
  CFNumberRef v10;
  NSObject *v11;
  NSObject *v12;
  CFRange v13;
  CFIndex FirstIndexOfValue;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  int valuePtr;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v10 = v9;
  if (!a6)
  {
    if (!v9)
      return;
    if (a5)
      v13.length = CFArrayGetCount(a5);
    else
      v13.length = 0;
    v13.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(a5, v13, v10);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(a5, FirstIndexOfValue);
      if (a5 && CFArrayGetCount(a5))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        AudioDeviceStop(a3, 0);
      }
    }
    goto LABEL_14;
  }
  if (!a5 || !CFArrayGetCount(a5))
  {
    if (dword_1EE2B3F38)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    AudioDeviceStart(a3, 0);
LABEL_12:
    if (!v10)
      return;
    goto LABEL_13;
  }
  if (!dword_1EE2B3F38)
    goto LABEL_12;
  v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v10)
  {
LABEL_13:
    CFArrayAppendValue(a5, v10);
LABEL_14:
    CFRelease(v10);
  }
}

uint64_t cmsmGetUpdatedSystemSoundPlayFlags(void *key, unsigned int a2, int a3, int a4, int a5, float *a6, int a7, unsigned int *a8, unsigned __int8 a9)
{
  unsigned int v11;
  const __CFString *Value;
  BOOL v13;
  const __CFString *MappedBehaviorCategory;
  __CFString *v15;
  _BOOL4 v16;
  uint64_t CurrentVADForSystemSoundAudioCategory;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v24;
  const __CFData *v25;
  int v26;
  const void *active;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  unsigned int v33;
  NSObject *v34;
  unsigned int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  unsigned int v39;
  int IsOnenessEnabled;
  NSObject *v41;
  __CFArray *Mutable;
  const __CFDictionary *v43;
  int CurrentSystemSoundVADForAudioBehaviour;
  NSPointerArray *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  void *v50;
  CFIndex Count;
  unsigned int v52;
  float v53;
  float v54;
  CFIndex j;
  void *ValueAtIndex;
  int ShouldSkipDuckingForSystemSounds;
  __CFString *CurrentAudioDestination;
  __CFString *VADNameForVADID;
  char v60;
  MXDuckingSource *v61;
  double v62;
  double v63;
  MXDuckingSource *v64;
  NSObject *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  __CFArray *v69;
  uint64_t v70;
  NSPointerArray *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char v80;
  char v81;
  uint64_t v82;
  id v83;
  int v85;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  char v89;
  int v90;
  unsigned int v91;
  NSPointerArray *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t k;
  void *v97;
  int v98;
  NSObject *v100;
  unsigned int v101;
  unsigned int v102;
  const char *v103;
  const char *v104;
  int IsConnected;
  int v106;
  NSDictionary *v107;
  NSDictionary *v108;
  unsigned int VADCategoryFromFigCategoryName;
  uint64_t v110;
  void (*v111)(uint64_t, __CFString *, uint64_t, os_log_type_t *, __int128 *);
  void *v112;
  _BOOL4 v113;
  BOOL v114;
  char v115;
  NSObject *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL8 IsCategoryInputOnly;
  int v120;
  int v121;
  int v122;
  const void *v123;
  const __CFString *v124;
  const void *v125;
  const __CFDictionary *v126;
  int v127;
  unsigned int v128;
  float v129;
  float SystemSoundVolumeScalarForCurrentRoute;
  NSObject *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  const void *CurrentRouteTypeForSystemSoundAtIndex;
  NSObject *v136;
  unsigned int v137;
  unsigned int v138;
  __CFString *v139;
  const __CFDictionary *v140;
  float ValueFloat32;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, __CFString *, uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFNumber *v145;
  float v146;
  NSObject *v147;
  unsigned int v148;
  unsigned int v149;
  AudioObjectID VADIDForVADName;
  NSObject *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  os_log_type_t *v155;
  uint64_t v156;
  uint64_t v157;
  int IsVoiceOverOn;
  uint64_t v159;
  int v163;
  __CFString *keya;
  void *v166;
  int v167;
  int v168;
  __CFString *v169;
  int v170;
  BOOL v171;
  uint64_t v172;
  _BOOL4 v173;
  CFMutableArrayRef theArraya;
  unsigned int v176;
  float v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  os_log_type_t v182;
  unsigned int v183;
  os_log_type_t type[4];
  const char *v185;
  __int16 v186;
  _BYTE v187[10];
  _DWORD v188[6];
  _QWORD v189[4];
  __int128 v190;
  __int128 v191;
  CFTypeRef cf[26];

  v11 = key;
  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v172 = key;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)key);
  if (Value)
    v13 = 0;
  else
    v13 = v11 > 0x1000;
  if (v13)
    Value = CFSTR("ThirdPartySystemSound");
  if (Value)
  {
    MappedBehaviorCategory = CMSystemsoundMgr_GetMappedBehaviorCategory(Value);
    v15 = (__CFString *)MappedBehaviorCategory;
    if (MappedBehaviorCategory)
      v16 = CFStringHasSuffix(MappedBehaviorCategory, CFSTR("AlwaysHeard")) != 0;
    else
      v16 = 0;
    CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(v15, a9);
  }
  else
  {
    v16 = 0;
    CurrentVADForSystemSoundAudioCategory = 0;
    v15 = 0;
  }
  v176 = 1;
  v177 = 1.0;
  if (FigCFEqual())
  {
    v18 = 0;
LABEL_14:
    v19 = CMSMDeviceState_VibrateOnRing(v18);
    v20 = CMSMDeviceState_VibrateOnSilent(1);
    goto LABEL_17;
  }
  if (!FigCFEqual())
  {
    v18 = 1;
    goto LABEL_14;
  }
  v20 = CMSMDeviceState_VibrateOnSilent(0);
  v19 = CMSMDeviceState_VibrateOnRing(1);
LABEL_17:
  v21 = FigCFEqual() == 0;
  if (CMSMDeviceState_RingerIsOn(v21))
    v22 = byte_1EE2B3CB0 == 0;
  else
    v22 = 0;
  v24 = v22 && HIBYTE(word_1EE2B3C40) == 0;
  if (v15 && (v25 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRingerSettings, v15)) != 0
    || (v25 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRingerSettings, CFSTR("Default"))) != 0)
  {
    v26 = CFDataGetBytePtr(v25)[(2 * v20) | (4 * v19) | v24];
    v176 = v26;
  }
  else
  {
    v26 = 1;
  }
  active = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
  keya = v15;
  if (CMSMDeviceState_IsVibrationDisabled())
  {
    if (objc_msgSend((id)gSystemSoundsDoNotObeyAccessibilityVibrationSetting, "containsObject:", v15))
    {
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v26 = v176;
      }
      v176 = v26 & 0xFFFFFFFD;
    }
  }
  if (!CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark())
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v178) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v176 &= ~2u;
  }
  if (CMSMUtility_IsCameraBeingUsed() && cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(v11))
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v178) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v176 &= ~2u;
  }
  if (HIBYTE(word_1EE2B3C40))
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v178) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v176 &= ~1u;
  }
  if (v11 - 1200 <= 0xB && CMSMUtility_IsPhoneCallActive())
  {
    v33 = v176;
    if ((v176 & 1) == 0)
    {
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v33 = v176;
      }
      v176 = v33 | 1;
    }
  }
  if (a3)
  {
    v35 = v176;
    if ((v176 & 1) == 0)
    {
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v35 = v176;
      }
      v176 = v35 | 1;
    }
  }
  if (active)
    CFRelease(active);
  if (!a4 || v16)
  {
    v39 = v176;
    v37 = a9;
    if ((v176 & 2) == 0)
      goto LABEL_83;
  }
  else
  {
    v37 = a9;
    if (dword_1EE2B3F38)
    {
      LODWORD(v178) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v39 = v176 & 0xFFFFFFFE;
    v176 = v39;
    if ((v39 & 2) == 0)
      goto LABEL_83;
  }
  if (a5)
  {
    if (!dword_1EE2B3F38)
    {
LABEL_82:
      v39 &= ~2u;
      v176 = v39;
      goto LABEL_83;
    }
    goto LABEL_80;
  }
  IsOnenessEnabled = MX_FeatureFlags_IsOnenessEnabled();
  LOBYTE(v39) = v176;
  if (!IsOnenessEnabled || v37 || (v176 & 1) == 0)
  {
LABEL_83:
    if ((v39 & 1) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (-[MXSessionManager isVADIDRoutedToOutputPortType:portType:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isVADIDRoutedToOutputPortType:portType:", CurrentVADForSystemSoundAudioCategory, 1885565807))
  {
    if (!dword_1EE2B3F38)
    {
LABEL_81:
      v39 = v176;
      goto LABEL_82;
    }
LABEL_80:
    LODWORD(v178) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_81;
  }
  if ((v176 & 1) != 0)
LABEL_84:
    cmsmUpdateDuckVolume(v15, (int *)&v177, &v176, v37);
LABEL_85:
  v159 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  theArraya = Mutable;
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
  {
    v43 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(v15, v37);
    CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
    if (v43)
      CFRelease(v43);
    if (CurrentSystemSoundVADForAudioBehaviour == -[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v154, v156), "systemSoundRemoteVADID")&& qword_1EE2B3CD0&& !CMSMUtility_IsPhoneCallActive())
    {
      if (CMSMUtility_SomeClientIsPlaying() || !CMSMUtility_DoesiOSHaveCarPlayMainAudio())
      {
        CFArrayAppendValue(Mutable, (const void *)qword_1EE2B3CD0);
      }
      else if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v87 = v178;
        if (os_log_type_enabled(v86, type[0]))
          v88 = v87;
        else
          v88 = v87 & 0xFFFFFFFE;
        if (v88)
        {
          LODWORD(v189[0]) = 136315138;
          *(_QWORD *)((char *)v189 + 4) = "cmsmSystemSoundCopySessionsToDuck";
          LODWORD(v157) = 12;
          v155 = (os_log_type_t *)v189;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v190 = 0u;
    v191 = 0u;
    memset(v189, 0, sizeof(v189));
    v45 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v46 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", v189, cf, 16);
    if (v46)
    {
      v47 = v46;
      v48 = *(_QWORD *)v189[2];
      do
      {
        for (i = 0; i != v47; ++i)
        {
          if (*(_QWORD *)v189[2] != v48)
            objc_enumerationMutation(v45);
          v50 = *(void **)(v189[1] + 8 * i);
          if (objc_msgSend(v50, "isActive", v154, v156)
            && objc_msgSend(v50, "isPlaying")
            && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v50, "audioCategory")))
          {
            CFArrayAppendValue(Mutable, v50);
          }
        }
        v47 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", v189, cf, 16);
      }
      while (v47);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v154, v156), "mxCoreSessionListEndIteration");
    v15 = keya;
  }
  if (Mutable)
    Count = CFArrayGetCount(Mutable);
  else
    Count = 0;
  v52 = v176;
  if ((v176 & 0x80) == 0 || !a7 && Count >= 1 && v177 != 1.0)
  {
    if (v16)
      goto LABEL_113;
LABEL_116:
    v171 = 1;
    if ((v52 & 0x80) == 0)
      goto LABEL_139;
    v53 = 0.5;
    if (v177 == 1.0)
      goto LABEL_139;
LABEL_118:
    v171 = !v16;
    cmsmGetSystemSoundMaxVolume(v15);
    if (v54 <= 0.0)
    {
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v66 = v178;
        if (os_log_type_enabled(v65, type[0]))
          v67 = v66;
        else
          v67 = v66 & 0xFFFFFFFE;
        if (v67)
        {
          LODWORD(v189[0]) = 136315138;
          *(_QWORD *)((char *)v189 + 4) = "cmsmGetUpdatedSystemSoundPlayFlags";
          LODWORD(v157) = 12;
          v155 = (os_log_type_t *)v189;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v176 &= ~1u;
    }
    else if (Count >= 1)
    {
      for (j = 0; j != Count; ++j)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(Mutable, j);
        ShouldSkipDuckingForSystemSounds = CMSUtility_ShouldSkipDuckingForSystemSounds(ValueAtIndex, CurrentVADForSystemSoundAudioCategory);
        if (v16
          && (CurrentAudioDestination = CMSUtility_GetCurrentAudioDestination(ValueAtIndex),
              VADNameForVADID = CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory),
              CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice((uint64_t)CurrentAudioDestination, (uint64_t)VADNameForVADID))|| !ShouldSkipDuckingForSystemSounds)
        {
          v60 = objc_msgSend(ValueAtIndex, "isDucked", v155, v157);
          v61 = [MXDuckingSource alloc];
          *(float *)&v62 = v177;
          *(float *)&v63 = v53;
          v64 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v61, "initWithType:ID:duckVolume:duckFadeDuration:", 0, v172, v62, v63);
          -[MXSessionManager duckVolume:duckerSession:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "duckVolume:duckerSession:duckingSource:", ValueAtIndex, 0, v64);
          if (MX_FeatureFlags_IsAsyncDuckingEnabled()
            && (v60 & 1) == 0
            && objc_msgSend(ValueAtIndex, "isPlayingOutput"))
          {
            v176 |= 0x100u;
          }

        }
      }
      v15 = keya;
    }
    goto LABEL_139;
  }
  v52 = v176 & 0xFFFFFF7F;
  v176 &= ~0x80u;
  if (!v16)
    goto LABEL_116;
LABEL_113:
  v176 = v52 & 0xFFFFFF77 | 8;
  v53 = 0.0;
  if (v177 != 1.0)
    goto LABEL_118;
  v171 = 0;
LABEL_139:
  if ((v176 & 1) == 0)
  {
    LOBYTE(v68) = 0;
    v69 = Mutable;
    goto LABEL_257;
  }
  v70 = cmsmGetCurrentVADForSystemSoundAudioCategory(v15, v37);
  v169 = CMSMUtility_GetVADNameForVADID(v70);
  v167 = FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F488, 0x1E30AA588);
  IsVoiceOverOn = CMSMDeviceState_IsVoiceOverOn();
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v180 = 0u;
  v181 = 0u;
  v178 = 0u;
  v179 = 0u;
  v71 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v72 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v178, cf, 16);
  if (!v72)
  {
    v163 = 0;
    v74 = 0;
    v168 = 0;
    v170 = 0;
    LOBYTE(v75) = 0;
    v173 = 1;
    goto LABEL_186;
  }
  v73 = v72;
  v163 = 0;
  v74 = 0;
  v168 = 0;
  v170 = 0;
  v75 = 0;
  v76 = 0;
  v166 = 0;
  v77 = *(_QWORD *)v179;
  v173 = 1;
  do
  {
    v78 = 0;
    do
    {
      if (*(_QWORD *)v179 != v77)
        objc_enumerationMutation(v71);
      v79 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * v78);
      if (objc_msgSend(v79, "isActive", v155, v157)
        && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v79, "audioCategory"))&& (!CMSMVAUtility_IsAdditiveRoutingEnabled() || (objc_msgSend(v79, "isRoutedToOnDemandVAD") & 1) == 0))
      {
        if (objc_msgSend(v79, "prefersToTakeHWControlFlagsFromAnotherSession"))
        {
          CMSUtility_GetCurrentAudioDestination(v79);
          v74 |= FigCFEqual();
          objc_msgSend(v79, "currentlyControllingFlags");
          if (objc_msgSend(v79, "isPlaying") && v74 && v173)
            v173 = (objc_msgSend(v79, "currentlyControllingFlags") & 0x10) == 0
                && objc_msgSend(v79, "isRecording")
                && !objc_msgSend(v79, "isPlayingOutput");
          if ((objc_msgSend(v79, "isPlaying") & 1) != 0 || objc_msgSend(v79, "isCarSession") && v167)
          {
            if (v76)
              v80 = 1;
            else
              v80 = v171;
            if ((v80 & 1) == 0)
              v76 = (objc_msgSend(v79, "currentlyControllingFlags") >> 1) & 1;
            v168 = 1;
            goto LABEL_167;
          }
          if (v166)
            v81 = 1;
          else
            v81 = v171;
          if ((v81 & 1) == 0 && (objc_msgSend(v79, "currentlyControllingFlags") & 2) != 0)
          {
            v170 = 1;
            v166 = v79;
          }
          else
          {
            if ((objc_msgSend(v79, "currentlyControllingFlags") & 2) != 0
              && (objc_msgSend(v79, "applicationState") == 2
               || objc_msgSend(v79, "applicationState") == 4))
            {
              v163 = 1;
            }
LABEL_167:
            v170 = 1;
          }
        }
        v75 |= objc_msgSend(v79, "hasPhoneCallBehavior");
      }
      ++v78;
    }
    while (v73 != v78);
    v82 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v178, cf, 16);
    v73 = v82;
  }
  while (v82);
LABEL_186:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v155, v157), "mxCoreSessionListEndIteration");
  v15 = keya;
  if (!(FigCFEqual() | IsVoiceOverOn))
  {
    v69 = theArraya;
    if (v170)
    {
      if ((CMSMDeviceState_ItsAnAppleTV() || FigCFArrayContainsValue())
        && CMSMUtility_SomeClientIsPlaying())
      {
        goto LABEL_202;
      }
      if (v168)
      {
        if (CMSMDeviceState_ItsAHomePod()
          && !CMSMUtility_IsAnyActiveSessionRoutedToDestination())
        {
          v85 = 2;
          goto LABEL_218;
        }
        goto LABEL_206;
      }
      -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory");
      if (!FigCFEqual())
      {
        -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory");
        v37 = a9;
        if (FigCFEqual()
          || (-[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"), FigCFEqual()))
        {
          v85 = 3;
        }
        else if (CMSMUtility_ActiveVideoConferenceExists() || (_BYTE)v75 && FigCFEqual())
        {
          v85 = 0;
        }
        else
        {
          v85 = v163 != 0;
          if (!CMSMUtility_IsAnyVoicePromptSessionThatDoesNotControlHardwareActive())
            v85 |= 2u;
        }
        goto LABEL_219;
      }
    }
    v85 = 3;
    goto LABEL_218;
  }
  v69 = theArraya;
  if (!IsVoiceOverOn)
  {
LABEL_202:
    v85 = 0;
    goto LABEL_218;
  }
  if (FigCFEqual())
  {
    CMSMUtility_GetCurrentAudioDestinationForVoiceOverSession();
    if (!FigCFEqual())
    {
LABEL_206:
      v85 = 2 * v173;
      goto LABEL_218;
    }
  }
  if (!CMSMVAUtility_IsAdditiveRoutingEnabled())
    goto LABEL_202;
  v83 = -[MXAdditiveRoutingManager copyActiveVoiceOverSessionPlayingToOnDemandVAD](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyActiveVoiceOverSessionPlayingToOnDemandVAD");
  if (!v173 || v83 == 0)
    v85 = 0;
  else
    v85 = 2;

LABEL_218:
  v37 = a9;
LABEL_219:
  if (CMSMDeviceState_ItsAHomePod())
  {
LABEL_220:
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
      v85 &= 1u;
  }
  else
  {
    if (FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB68))
    {
      IsConnected = vaemContinuityScreenOutputIsConnected();
      if (a6 && IsConnected)
        goto LABEL_220;
    }
    else if (a6)
    {
      goto LABEL_220;
    }
    v85 &= 1u;
  }
  if (v171)
  {
    if (!v85)
    {
      LOBYTE(v68) = 0;
      goto LABEL_257;
    }
LABEL_228:
    v89 = 1;
  }
  else
  {
    if (vaemSpeakerAlertVADExists() || vaemSystemSoundLocalVADExists())
    {
      v85 = 2;
      goto LABEL_228;
    }
    v85 = 2;
    if (!FigCFArrayContainsValue())
    {
      if (FigCFArrayContainsValue())
        v85 = 2;
      else
        v85 = 3;
    }
    FigAtomicIncrement32();
    v89 = 0;
  }
  if (!FigCFEqual()
    || MX_FeatureFlags_IsKeyboardCHAudioEnabled()
    || vaemSystemSoundLocalVADExists())
  {
LABEL_232:
    v68 = v85;
    goto LABEL_233;
  }
  MEMORY[0x1940352BC](gCMSS_12);
  v112 = (void *)gCMSS_7;
  v113 = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")&& v112)
  {
    v113 = objc_msgSend((id)objc_msgSend(v112, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)), "countForObject:", keya) != 0;
  }
  MEMORY[0x1940352C8](gCMSS_12);
  if (v168)
  {
    v68 = v85;
    v69 = theArraya;
    goto LABEL_402;
  }
  if (v170)
    v114 = v74 == 0;
  else
    v114 = 1;
  v115 = v114 || v113;
  v69 = theArraya;
  if ((v115 & 1) == 0)
    cmsmAddPrewarmedAudioCategoriesThatMixIn(a2, (uint64_t)keya);
  if (!v113)
    goto LABEL_232;
  if (dword_1EE2B3F38)
  {
    v183 = 0;
    v182 = OS_LOG_TYPE_DEFAULT;
    v116 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v117 = v183;
    if (os_log_type_enabled(v116, v182))
      v118 = v117;
    else
      v118 = v117 & 0xFFFFFFFE;
    if (v118)
    {
      *(_DWORD *)type = 136315906;
      v185 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
      v186 = 2114;
      *(_QWORD *)v187 = v169;
      *(_WORD *)&v187[8] = 1024;
      v188[0] = 0;
      LOWORD(v188[1]) = 1024;
      *(_DWORD *)((char *)&v188[1] + 2) = v170;
      LODWORD(v157) = 34;
      v155 = type;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v15 = keya;
  }
  if ((v85 & 1) == 0)
  {
    v68 = v85 & 0xFFFFFFFD;
LABEL_394:
    v113 = 1;
    goto LABEL_402;
  }
  if (!dword_1EE2B3F38)
  {
    v68 = 0;
    goto LABEL_394;
  }
  v183 = 0;
  v182 = OS_LOG_TYPE_DEFAULT;
  v147 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v148 = v183;
  if (os_log_type_enabled(v147, v182))
    v149 = v148;
  else
    v149 = v148 & 0xFFFFFFFE;
  if (v149)
  {
    *(_DWORD *)type = 136315906;
    v185 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
    v186 = 2114;
    *(_QWORD *)v187 = v169;
    *(_WORD *)&v187[8] = 1024;
    v188[0] = 0;
    LOWORD(v188[1]) = 1024;
    *(_DWORD *)((char *)&v188[1] + 2) = v170;
    LODWORD(v157) = 34;
    v155 = type;
    _os_log_send_and_compose_impl();
  }
  v15 = keya;
  v113 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v68 = 0;
LABEL_402:
  if (!v170 && v113)
  {
    VADIDForVADName = CMSMUtility_GetVADIDForVADName((uint64_t)v169);
    if (vaemGetDeviceVolume(VADIDForVADName, 0) == 0.0)
    {
      if (dword_1EE2B3F38)
      {
        v183 = 0;
        v182 = OS_LOG_TYPE_DEFAULT;
        v151 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v152 = v183;
        if (os_log_type_enabled(v151, v182))
          v153 = v152;
        else
          v153 = v152 & 0xFFFFFFFE;
        if (v153)
        {
          *(_DWORD *)type = 136315906;
          v185 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
          v186 = 1024;
          *(_DWORD *)v187 = v168;
          *(_WORD *)&v187[4] = 1024;
          *(_DWORD *)&v187[6] = 0;
          LOWORD(v188[0]) = 2114;
          *(_QWORD *)((char *)v188 + 2) = v169;
          LODWORD(v157) = 34;
          v155 = type;
          _os_log_send_and_compose_impl();
        }
        v15 = keya;
        v69 = theArraya;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_232;
    }
  }
LABEL_233:
  if ((v89 & 1) == 0)
    v176 |= 8u;
  if (v68)
  {
    if (!a7)
    {
      if ((v68 & 1) != 0)
        v90 = -3;
      else
        v90 = -1;
      if ((v68 & 2) != 0)
        v91 = v90 & 0xFFFFFFEF;
      else
        v91 = v90;
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v155, v157), "mxCoreSessionListBeginIteration");
      v190 = 0u;
      v191 = 0u;
      memset(v189, 0, sizeof(v189));
      v92 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v93 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v92, "countByEnumeratingWithState:objects:count:", v189, cf, 16);
      if (v93)
      {
        v94 = v93;
        v95 = *(_QWORD *)v189[2];
        do
        {
          for (k = 0; k != v94; ++k)
          {
            if (*(_QWORD *)v189[2] != v95)
              objc_enumerationMutation(v92);
            v97 = *(void **)(v189[1] + 8 * k);
            if (objc_msgSend(v97, "isActive"))
            {
              if (!-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v97, "audioCategory")))
              {
                v98 = objc_msgSend(v97, "currentlyControllingFlags");
                objc_msgSend(v97, "setCurrentlyControllingFlags:", objc_msgSend(v97, "currentlyControllingFlags") & v91);
                if (v98 != objc_msgSend(v97, "currentlyControllingFlags"))
                  objc_msgSend(v97, "setSystemSoundHasModifiedCurrentlyControllingFlags:", 1);
              }
            }
          }
          v94 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v92, "countByEnumeratingWithState:objects:count:", v189, cf, 16);
        }
        while (v94);
      }
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
      v15 = keya;
      v69 = theArraya;
    }
    if (a8)
      *a8 = v68;
  }
LABEL_257:
  if (!a7)
  {
    if (dword_1EE2B3F38)
    {
      LODWORD(v178) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v100 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v101 = v178;
      if (os_log_type_enabled(v100, type[0]))
        v102 = v101;
      else
        v102 = v101 & 0xFFFFFFFE;
      if (v102)
      {
        v103 = "YES";
        *(_QWORD *)((char *)v189 + 4) = "cmsmApplyAudioHardwareControlFlagsForSystemSound";
        WORD2(v189[1]) = 2114;
        if ((v68 & 1) != 0)
          v104 = "YES";
        else
          v104 = "NO";
        LODWORD(v189[0]) = 136315906;
        *(_QWORD *)((char *)&v189[1] + 6) = v15;
        if ((v68 & 2) == 0)
          v103 = "NO";
        HIWORD(v189[2]) = 2082;
        v189[3] = v104;
        LOWORD(v190) = 2082;
        *(_QWORD *)((char *)&v190 + 2) = v103;
        LODWORD(v157) = 42;
        v155 = (os_log_type_t *)v189;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if ((v176 & 1) == 0)
    {
      if (a6)
      {
        cmsmGetSystemSoundMaxVolume(CFSTR("TouchTone"));
        *(_DWORD *)a6 = v106;
      }
      goto LABEL_258;
    }
    if ((v68 & 1) != 0)
    {
      if (!v15
        || (v107 = (NSDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRoutingForCategories, v15)) == 0)
      {
        PVMSetEnabled(0);
      }
      v108 = v107;
      VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v107);
      *(_DWORD *)type = FigVAEndpointManagerGetPropertyUInt32(qword_1EE2B3BE0, 0x1E30ABE48);
      *(_QWORD *)&v178 = *MEMORY[0x1E0C9AE40];
      v110 = qword_1EE2B3BE0;
      v111 = *(void (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                                + 8);
      if (v111)
        v111(v110, CFSTR("VAEM_IsPlayAndRecordCategory"), v159, type, &v178);
      if (FigCFEqual()
        && (FigCFArrayContainsValue() || FigCFArrayContainsValue())
        && (_QWORD)v178 == *MEMORY[0x1E0C9AE50])
      {
        PVMSetEnabled(0);
      }
      if (dword_1EE2B3BEC != VADCategoryFromFigCategoryName || CFStringHasSuffix(v15, CFSTR("AlwaysHeard")))
      {
        -[MXSessionManager setCurrentAudioCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v155, v157), "setCurrentAudioCategory:", v108);
        -[MXSessionManager setCurrentAudioMode:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCurrentAudioMode:", CFSTR("Default"));
        PVMSetEnabled(0);
      }
      cmsmUpdateDuckVolume(v15, 0, &v176, v37);
      IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly(0);
      cmsSetDeviceSampleRateAndBufferSize(0, 0, IsCategoryInputOnly, 44100.0, 0.0);
    }
    else
    {
      cmsmUpdateDuckVolume(v15, 0, &v176, v37);
    }
    if (CMSMDeviceState_ItsAHomePod()
      && (v120 = cmsmGetCurrentVADForSystemSoundAudioCategory(v15, v37),
          v120 == -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID")))
    {
      if ((v68 & 2) == 0)
      {
        v121 = 0;
        goto LABEL_338;
      }
    }
    else
    {
      v122 = CMSMDeviceState_ItsAHomePod();
      v121 = 0;
      if ((v68 & 2) == 0 || v122)
        goto LABEL_338;
    }
    v123 = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
    if (FigCFArrayContainsValue())
    {
      v121 = 0;
      if (!v123)
        goto LABEL_338;
    }
    else
    {
      v134 = cmsmGetCurrentVADForSystemSoundAudioCategory(v15, v37);
      CurrentRouteTypeForSystemSoundAtIndex = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
      if (dword_1EE2B3F38)
      {
        LODWORD(v178) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v136 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v137 = v178;
        if (os_log_type_enabled(v136, type[0]))
          v138 = v137;
        else
          v138 = v137 & 0xFFFFFFFE;
        if (v138)
        {
          v139 = CMSMUtility_GetVADNameForVADID(v134);
          LODWORD(v189[0]) = 136315906;
          *(_QWORD *)((char *)v189 + 4) = "cmsmSetVolumeForSystemSound";
          WORD2(v189[1]) = 2114;
          *(_QWORD *)((char *)&v189[1] + 6) = v139;
          HIWORD(v189[2]) = 2114;
          v189[3] = CurrentRouteTypeForSystemSoundAtIndex;
          LOWORD(v190) = 2114;
          *(_QWORD *)((char *)&v190 + 2) = keya;
          LODWORD(v157) = 42;
          v155 = (os_log_type_t *)v189;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v15 = keya;
        v37 = a9;
      }
      cmsmGetSystemSoundMaxVolume(v15);
      vaemSetDeviceVolumeIfNotSet(v134, 0, CurrentRouteTypeForSystemSoundAtIndex, 0, v146, 0.0, 0.0);
      v121 = 1;
      v69 = theArraya;
      if (!v123)
      {
LABEL_338:
        if (!a6)
          goto LABEL_258;
        *a6 = 1.0;
        if (v15)
        {
          v124 = CMSystemsoundMgr_GetMappedBehaviorCategory(v15);
          if (v124)
          {
            if (CFStringHasSuffix(v124, CFSTR("AlwaysHeard")))
              goto LABEL_258;
          }
          if (FigCFEqual() || FigCFEqual() || FigCFEqual())
            goto LABEL_258;
        }
        v125 = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
        v126 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(v15, v37);
        v127 = cmsGetCurrentSystemSoundVADForAudioBehaviour();
        if (v126)
          CFRelease(v126);
        v128 = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v155, v157), "systemSoundLocalVADID");
        if (FigCFArrayContainsValue())
        {
          cmsmGetSystemSoundMaxVolume(v15);
          SystemSoundVolumeScalarForCurrentRoute = v129;
          v69 = theArraya;
        }
        else
        {
          if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)
            && FigCFEqual())
          {
            *a6 = 1.0;
            v69 = theArraya;
            if (!v125)
              goto LABEL_258;
            goto LABEL_379;
          }
          if (FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB68) && v127 == v128)
          {
            v140 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(keya, v37);
            cmsGetCurrentSystemSoundVADForAudioBehaviour();
            if (v140)
              CFRelease(v140);
            ValueFloat32 = 1.0;
            if (FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB68))
            {
              v142 = -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
              cf[0] = 0;
              v143 = qword_1EE2B3BE0;
              v144 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 40);
              if (v144)
              {
                v144(v143, CFSTR("VAEM_DeviceVolume"), v159, v142, 0, cf);
                v145 = (const __CFNumber *)cf[0];
              }
              else
              {
                v145 = 0;
              }
              ValueFloat32 = MXCFNumberGetValueFloat32(v145);
              if (cf[0])
                CFRelease(cf[0]);
            }
            cmsmGetSystemSoundVolumeScalarForRawVolume(keya, ValueFloat32);
          }
          v69 = theArraya;
          if (v121)
          {
            *a6 = 1.0;
            if (!v125)
              goto LABEL_258;
            goto LABEL_379;
          }
          SystemSoundVolumeScalarForCurrentRoute = cmsmGetSystemSoundVolumeScalarForCurrentRoute(keya, v37);
        }
        *a6 = SystemSoundVolumeScalarForCurrentRoute;
        if (SystemSoundVolumeScalarForCurrentRoute == 0.0)
        {
          if (dword_1EE2B3F38)
          {
            LODWORD(v178) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v132 = v178;
            if (os_log_type_enabled(v131, type[0]))
              v133 = v132;
            else
              v133 = v132 & 0xFFFFFFFE;
            if (v133)
            {
              LODWORD(v189[0]) = 136315138;
              *(_QWORD *)((char *)v189 + 4) = "cmsmUpdateSystemSoundVolume";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v69 = theArraya;
          }
          v176 &= ~1u;
        }
        if (!v125)
          goto LABEL_258;
LABEL_379:
        CFRelease(v125);
        goto LABEL_258;
      }
    }
    CFRelease(v123);
    goto LABEL_338;
  }
LABEL_258:
  if (v69)
    CFRelease(v69);
  return v176;
}

uint64_t cmsmGetCurrentVADForSystemSoundAudioCategory(void *a1, int a2)
{
  const __CFDictionary *v2;
  uint64_t CurrentSystemSoundVADForAudioBehaviour;

  v2 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(a1, a2);
  CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
  if (v2)
    CFRelease(v2);
  return CurrentSystemSoundVADForAudioBehaviour;
}

const __CFDictionary *cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(void *key, int a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFAllocator *v6;
  const __CFDictionary *MutableCopy;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  NSObject *v15;
  NSObject *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFRange v20;
  CFRange v21;

  v4 = (const __CFDictionary *)gSystemSoundAudioBehaviors;
  if (key)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundAudioBehaviors, key);
    if (Value)
      goto LABEL_5;
    v4 = (const __CFDictionary *)gSystemSoundAudioBehaviors;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("Default"));
  if (!Value)
    return 0;
LABEL_5:
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Value);
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
  {
    v8 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("AudioBehaviour_Destination"));
    if (CMSMDeviceState_ScreenIsBlanked()
      && !CMSMDeviceState_ScreenIsBlankedByProximitySensor()
      && v8)
    {
      v20.length = CFArrayGetCount(v8);
      v20.location = 0;
      if (CFArrayContainsValue(v8, v20, CFSTR("VirtualAudioDevice_SystemRemote")))
      {
        v9 = cmsmCopyDestinationsWithoutElement(v8, 0x1E30A4C48);
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(MutableCopy, CFSTR("AudioBehaviour_Destination"), v9);
          CFRelease(v10);
        }
      }
      goto LABEL_13;
    }
    if (v8)
    {
LABEL_13:
      if (FigCFEqual() && CMSMUtility_IsPhoneCallActive())
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v12 = CFArrayCreateMutableCopy(v6, 0, v8);
        v21.length = CFArrayGetCount(v12);
        v21.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v21, CFSTR("VirtualAudioDevice_Default"));
        if (FirstIndexOfValue != -1)
        {
          CFArrayRemoveValueAtIndex(v12, FirstIndexOfValue);
          CFArrayInsertValueAtIndex(v12, 0, CFSTR("VirtualAudioDevice_Default"));
        }
        FigCFDictionarySetValue();
        if (v12)
          CFRelease(v12);
      }
    }
  }
  if (MX_FeatureFlags_IsOnenessEnabled()
    && !MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled()
    && vaemContinuityScreenOutputIsConnected())
  {
    if (a2)
    {
      if (dword_1EE2B3F38)
      {
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("AudioBehaviour_Destination"));
      v18 = cmsmCopyDestinationsWithoutElement(v17, 0x1E30A4C48);
      if (v18)
      {
        v19 = v18;
        CFDictionarySetValue(MutableCopy, CFSTR("AudioBehaviour_Destination"), v18);
        CFRelease(v19);
      }
    }
  }
  return MutableCopy;
}

uint64_t cmsGetCurrentSystemSoundVADForAudioBehaviour()
{
  uint64_t v0;
  const __CFArray *Value;
  CFIndex v2;
  CFIndex i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  Value = (const __CFArray *)FigCFDictionaryGetValue();
  v2 = 0;
  if (!Value)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(Value); v2 < i; i = 0)
  {
    CFArrayGetValueAtIndex(Value, v2);
    if (FigCFEqual())
    {
      if (-[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID"))
      {
        return -[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID");
      }
    }
    else if (FigCFEqual())
    {
      if (-[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID"))
      {
        return -[MXSessionManager siriOutputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "siriOutputVADID");
      }
    }
    else if (FigCFEqual())
    {
      if (-[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID"))
      {
        return -[MXSessionManager systemSoundRemoteVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundRemoteVADID");
      }
    }
    else if (FigCFEqual())
    {
      if (-[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"))
      {
        return -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID");
      }
    }
    else if (FigCFEqual())
    {
      if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
      {
        return -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
      }
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ++v2;
    if (Value)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return v0;
}

uint64_t CMSMDeviceState_IsVoiceOverOn()
{
  return byte_1EE2B2A20;
}

BOOL CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark()
{
  uint64_t v0;

  v0 = 1;
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1)
    && CMSMDeviceState_ScreenIsBlanked())
  {
    return CMSMDeviceState_ScreenIsBlankedByProximitySensor() != 0;
  }
  return v0;
}

void cmsmUpdateDuckVolume(__CFString *key, int *a2, _DWORD *a3, int a4)
{
  const __CFNumber *Value;
  int HasSuffix;
  int v10;
  const __CFDictionary *v11;
  int CurrentSystemSoundVADForAudioBehaviour;
  __CFArray *v13;
  int valuePtr;

  if (a3)
  {
    if (a2)
      *a2 = 1065353216;
    valuePtr = 1065353216;
    if (key)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundLowersMusicVolume, key);
      HasSuffix = CFStringHasSuffix(key, CFSTR("AlwaysHeard"));
      if (Value)
      {
        v10 = HasSuffix;
        v11 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(key, a4);
        CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
        if (v11)
          CFRelease(v11);
        CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
        if (a2)
          *a2 = valuePtr;
        if (CurrentSystemSoundVADForAudioBehaviour == -[MXSessionManager systemSoundLocalVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemSoundLocalVADID"))
        {
          v13 = CMSMUtility_CopyCurrentRouteTypes();
          if (FigCFEqual())
            *a3 |= 0x80u;
          if (v13)
            CFRelease(v13);
        }
        else if (!v10)
        {
          *a3 |= 0x80u;
        }
      }
    }
  }
}

uint64_t cmsmCopyCurrentActiveRouteTypesForSystemSound()
{
  const void *v0;
  _BOOL4 PropertyBoolean;
  uint64_t *v2;
  uint64_t v3;

  MEMORY[0x1940352BC](gCMSM);
  v0 = (const void *)qword_1EE2B3C10;
  if (qword_1EE2B3C10)
    goto LABEL_5;
  PropertyBoolean = FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB68);
  v2 = &kVirtualAudioDeviceUID_SystemLocal_CFString;
  if (!PropertyBoolean)
    v2 = &kVirtualAudioDeviceUID_Default_CFString;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(*v2, (__CFArray **)&qword_1EE2B3C10, 0, 0);
  v0 = (const void *)qword_1EE2B3C10;
  if (qword_1EE2B3C10)
  {
LABEL_5:
    CFRetain(v0);
    v3 = qword_1EE2B3C10;
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x1940352C8](gCMSM);
  return v3;
}

uint64_t MX_FeatureFlags_IsKeyboardCHAudioEnabled()
{
  if (MX_FeatureFlags_IsKeyboardCHAudioEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsKeyboardCHAudioEnabled_onceToken, &__block_literal_global_58_1);
  return MX_FeatureFlags_IsKeyboardCHAudioEnabled_sIsKeyboardCHAudioEnabled;
}

uint64_t FigEndpointCentralEntityHoldsResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v11[8];
  os_log_type_t type;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          if (*(_BYTE *)DerivedStorage)
          {
            v13 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            v7 = *(NSObject **)(DerivedStorage + 48);
            v11[0] = MEMORY[0x1E0C809B0];
            v11[1] = 3221225472;
            v11[2] = __FigEndpointCentralEntityHoldsResource_block_invoke;
            v11[3] = &unk_1E3099668;
            v11[4] = &v14;
            v11[5] = a1;
            v11[6] = a2;
            v11[7] = a3;
            MXDispatchSync((uint64_t)"FigEndpointCentralEntityHoldsResource", (uint64_t)"FigEndpoint_Central.m", 1948, 0, 0, v7, (uint64_t)v11);
          }
        }
      }
    }
  }
  v8 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_1936789CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_IsCameraBeingUsed()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v4), "isUsingCamera") & 1) != 0)
        {
          v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_11:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

void CMSMSleep_CreatePrewarmIdleSleepPreventor(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  BOOL v6;
  const __CFString *v7;
  CFStringRef v8;
  CFStringRef v9;
  CFAbsoluteTime Current;
  CFDateRef v11;
  const void *v12;
  const void *v13;
  __CFDictionary *PowerLogDataForSystemSound;

  if (FigAtomicCompareAndSwap32())
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if ((a1 - 1103) >= 3)
    {
      if ((a1 - 1200) >= 0xC)
      {
        v6 = (a1 - 1522) < 0xFFFFFFFD;
        if ((a1 - 1522) >= 0xFFFFFFFD)
          v7 = CFSTR("orb");
        else
          v7 = 0;
      }
      else
      {
        v6 = 0;
        v7 = CFSTR("touchtone");
      }
    }
    else
    {
      v6 = 0;
      v7 = CFSTR("keypress");
    }
    v8 = MX_RunningBoardServices_CopyDisplayIDForPID(a2);
    v9 = v8;
    if (v8)
      CFStringAppendFormat(Mutable, 0, CFSTR("MediaExperience.pid-%d.%@."), a2, v8);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("MediaExperience.pid-%d."), a2);
    if (v6)
      CFStringAppendFormat(Mutable, 0, CFSTR("ssid-%d.isprewarmed"), a1);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%@.isprewarmed"), v7);
    Current = CFAbsoluteTimeGetCurrent();
    v11 = CFDateCreate(v4, Current);
    v12 = (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName;
    sCMSessionMgrPrewarmIdleSleepPreventorName = (uint64_t)Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v12)
      CFRelease(v12);
    v13 = (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime;
    sCMSessionMgrPrewarmIdleSleepPreventorCreationTime = (uint64_t)v11;
    if (v11)
      CFRetain(v11);
    if (v13)
      CFRelease(v13);
    PowerLogDataForSystemSound = CMSMPowerLogCreatePowerLogDataForSystemSound(v7, a2, CFSTR("SystemSoundPlayback_Start"), sCMSessionMgrPrewarmIdleSleepPreventor, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
    sCMSessionMgrPrewarmIdleSleepPreventorAllocated = CMSMSleep_CreateIdleSleepPreventor(Mutable, CFSTR("CoreMedia_SystemSoundPlayback"), PowerLogDataForSystemSound, (IOPMAssertionID *)&sCMSessionMgrPrewarmIdleSleepPreventor);
    if (PowerLogDataForSystemSound)
      CFRelease(PowerLogDataForSystemSound);
    if (Mutable)
      CFRelease(Mutable);
    if (v11)
      CFRelease(v11);
    if (v9)
      CFRelease(v9);
  }
}

BOOL CMSMSleep_CreateIdleSleepPreventor(const void *a1, const void *a2, __CFDictionary *a3, IOPMAssertionID *a4)
{
  const __CFString *DefaultIdlePreventorName;
  const __CFString *v9;
  IOReturn v10;
  CFNumberRef v11;
  IOPMAssertionID AssertionID;
  IOPMAssertionID valuePtr;

  if (!a4)
    return 0;
  if (a1)
    DefaultIdlePreventorName = (const __CFString *)CFRetain(a1);
  else
    DefaultIdlePreventorName = CMSMSleep_CreateDefaultIdlePreventorName();
  v9 = DefaultIdlePreventorName;
  AssertionID = 0;
  v10 = IOPMAssertionCreateWithName(CFSTR("NoIdleSleepAssertion"), 0xFFu, DefaultIdlePreventorName, &AssertionID);
  if (!v10)
  {
    if (a2)
    {
      valuePtr = AssertionID;
      if (a3)
      {
        if (AssertionID)
        {
          v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(a3, CFSTR("AssertionID"), v11);
          if (v11)
            CFRelease(v11);
        }
      }
      CMSMPowerLogPostPowerLogData(a2, a3);
    }
    *a4 = AssertionID;
  }
  if (v9)
    CFRelease(v9);
  return v10 == 0;
}

void CMSMPowerLogPostPowerLogData(CFTypeRef cf, CFTypeRef a2)
{
  NSObject *global_queue;
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CMSMPowerLogPostPowerLogData_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMSMPowerLogPostPowerLogData", (uint64_t)"CMSessionManager_PowerLog.m", 175, 0, 0, global_queue, (uint64_t)v5);
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForSystemSound(const void *a1, int a2, const void *a3, int a4, const void *a5, const void *a6)
{
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  CFNumberRef v14;
  CFNumberRef v15;
  char v16;
  int v18;
  int valuePtr;

  v18 = a4;
  valuePtr = a2;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
  {
    v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
    if (a4)
      goto LABEL_3;
LABEL_7:
    v15 = 0;
LABEL_8:
    v16 = 1;
    if (!a5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = 0;
  if (!a4)
    goto LABEL_7;
LABEL_3:
  v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &v18);
  if (!v15)
    goto LABEL_8;
  CFDictionarySetValue(Mutable, CFSTR("AssertionID"), v15);
  v16 = 0;
  if (a5)
LABEL_9:
    CFDictionarySetValue(Mutable, CFSTR("AssertionName"), a5);
LABEL_10:
  if (a6)
  {
    CFDictionarySetValue(Mutable, CFSTR("CreationTime"), a6);
    CFDictionarySetValue(Mutable, CFSTR("PlaybackStartTime"), a6);
  }
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("SystemSoundName"), a1);
  if (v14)
    CFDictionarySetValue(Mutable, CFSTR("PID"), v14);
  if (a3)
    CFDictionarySetValue(Mutable, CFSTR("Operation"), a3);
  if (qword_1EE2B3C10)
    CFDictionarySetValue(Mutable, CFSTR("SystemSoundAudioRoute"), (const void *)qword_1EE2B3C10);
  if ((v16 & 1) == 0)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  return Mutable;
}

uint64_t CMSMDeviceState_VibrateOnSilent(int a1)
{
  if (!a1)
    cmsmdevicestate_UpdateVibrateOnSilent();
  return byte_1EE2B2A0D;
}

uint64_t CMSMDeviceState_VibrateOnRing(int a1)
{
  if (!a1)
    cmsmdevicestate_UpdateVibrateOnRing();
  return byte_1EE2B2A0C;
}

uint64_t CMSMDeviceState_IsVibrationDisabled()
{
  return byte_1EE2B2A0F;
}

void DisposeDiscovererServerState(void *a1)
{
  if (a1)
  {
    FigEndpointRPCCacheDispose();
    free(a1);
  }
}

void cmsUpdateAllowedRouteTypes(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSDictionary *VADOutputPortTypeFromFigRouteName;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(a2);
        VADOutputPortTypeFromFigRouteName = CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(*(NSDictionary **)(*((_QWORD *)&v10 + 1) + 8 * v8));
        if ((_DWORD)VADOutputPortTypeFromFigRouteName)
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", VADOutputPortTypeFromFigRouteName));
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  objc_msgSend(a1, "setAllowedRouteTypes:", a2);
  objc_msgSend(a1, "setAllowedPortTypes:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v4));

}

void CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(const void *a1)
{
  int IsPlaying;
  uint64_t *v3;
  uint64_t v4;
  const __CFString *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  CFIndex v8;
  void *v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  NSObject *v12;
  _QWORD v13[6];
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  IsPlaying = CMSMUtility_SomePrimaryAudioCategoryClientIsPlaying();
  v3 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (!IsPlaying)
    v3 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v4 = *v3;
  if (CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_cachedSomePrimaryAudioCategoryClientIsPlaying != *v3)
  {
    v5 = CFSTR("SomeNonAmbientAudioCategoryClientIsPlayingDidChange_IsPlaying");
    v6 = v4 != 0;
    v7 = CFSTR("SomeNonAmbientAudioCategoryClientIsPlayingDidChange_IsPlaying") != 0;
    v8 = v6 & v7;
    if (v6 && v7)
    {
      v9 = (void *)v4;
    }
    else
    {
      v5 = 0;
      v9 = 0;
    }
    keys[0] = (void *)v5;
    values = v9;
    v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    if (a1)
      CFRetain(a1);
    v12 = MXGetNotificationSenderQueue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_block_invoke;
    v13[3] = &unk_1E309DAB0;
    v13[4] = a1;
    v13[5] = v11;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1249, 0, 0, v12, (uint64_t)v13);
    CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_cachedSomePrimaryAudioCategoryClientIsPlaying = v4;
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeNonAmbientAudioCategoryClientIsPlayingDidChange"), v11, 0);
    if (v11)
      CFRelease(v11);
  }
}

void DisposeRoutingContextServerState(void *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex v6;
  const void *ValueAtIndex;
  const __CFSet *Value;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef cf[2];

  if (a1)
  {
    if (*((_QWORD *)a1 + 1))
    {
      if (FigCFEqual())
      {
        cf[0] = 0;
        v2 = *((_QWORD *)a1 + 1);
        v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
        if (v3)
        {
          v3(v2, CFSTR("contextUUID"), *MEMORY[0x1E0C9AE00], cf);
          if (cf[0])
          {
            FigRoutingManager_CloseRelayCommChannels((uint64_t)cf[0]);
            if (cf[0])
              CFRelease(cf[0]);
          }
        }
      }
      if (*((_QWORD *)a1 + 2))
      {
        v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v4)
        {
          v5 = v4;
          if (CFArrayGetCount(v4) >= 1)
          {
            v6 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v5, v6);
              Value = (const __CFSet *)CFDictionaryGetValue(*((CFDictionaryRef *)a1 + 2), ValueAtIndex);
              cf[0] = *((CFTypeRef *)a1 + 1);
              cf[1] = ValueAtIndex;
              CFSetApplyFunction(Value, (CFSetApplierFunction)CloseCommChannelApplier, cf);
              ++v6;
            }
            while (v6 < CFArrayGetCount(v5));
          }
          CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)a1 + 2));
          CFRelease(v5);
        }
        else
        {
          CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)a1 + 2));
        }
      }
    }
    v9 = (const void *)*((_QWORD *)a1 + 2);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)a1 + 2) = 0;
    }
    v10 = (const void *)*((_QWORD *)a1 + 1);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)a1 + 1) = 0;
    }
    v11 = (const void *)*((_QWORD *)a1 + 3);
    if (v11)
      CFRelease(v11);
    free(a1);
  }
}

void CMScreenHandleIdleEvent(int a1, int a2, int a3)
{
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v8;
  unsigned int v9;
  const __CFString *v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  CFTypeRef cf;
  CFTypeRef v15;
  CFTypeRef v16;
  os_log_type_t type;
  unsigned int v18;
  int v19;
  const char *v20;
  __int16 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return;
  v15 = 0;
  v16 = 0;
  FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&v15);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v15, 0, (uint64_t)&cf);
  if (cf)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4468], *MEMORY[0x1E0C9AE00], &v16);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (FigCFEqual() || !FigCFEqual())
  {
    if (v16)
      CFRelease(v16);
    return;
  }
  if (v16)
    CFRelease(v16);
  if (a1 != 100)
  {
    if (a1 != 101)
      return;
    if (a3 == 1)
      goto LABEL_32;
    goto LABEL_22;
  }
  if (!a3)
  {
LABEL_32:
    CMSMAP_StopDisconnectAirPlayScreenTimer();
    return;
  }
  if (!CMSMUtility_SomeClientIsPlayingToAirPlay())
  {
LABEL_22:
    if (cmscreenIsTetheredDemoModeOn_onceToken != -1)
      dispatch_once(&cmscreenIsTetheredDemoModeOn_onceToken, &__block_literal_global_18_0);
    if (dword_1EE2B3F38)
    {
      v18 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v8 = v18;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if (v9)
      {
        v10 = CFSTR("YES");
        if (!cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn)
          v10 = CFSTR("NO");
        v19 = 136315394;
        v20 = "cmscreenIsTetheredDemoModeOn";
        v21 = 2114;
        v22 = v10;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn)
    {
      if (dword_1EE2B3F38)
      {
        v18 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v12 = v18;
        if (os_log_type_enabled(v11, type))
          v13 = v12;
        else
          v13 = v12 & 0xFFFFFFFE;
        if (v13)
        {
          v19 = 136315138;
          v20 = "CMScreenHandleIdleEvent";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      CMSMAP_StartDisconnectAirPlayScreenTimer(60.0);
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4638, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t CMSUtility_IsAllowedToStartRecording(void *a1)
{
  uint64_t v1;
  _BOOL4 IsAnExtension;
  uint64_t UpTimeNanoseconds;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  id v40;
  int v41;
  const __CFNumber *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  const __CFString *StringForApplicationState;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  os_log_type_t v57[2];
  unsigned int v58;
  int v59;
  const char *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  _BYTE v64[10];
  _BYTE v65[14];
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  _QWORD valuePtr[17];

  v1 = (uint64_t)a1;
  valuePtr[16] = *MEMORY[0x1E0C80C00];
  if (!CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(a1, "audioCategory")))
    goto LABEL_58;
  if ((objc_msgSend((id)v1, "hasEntitlementToRecordDuringCall") & 1) == 0
    && CMSMUtility_IsSomeOtherPhoneCallPrioritySessionActive((void *)v1)
    && (objc_msgSend((id)v1, "hasAudioMode:", CFSTR("EchoCancellationInput")) & 1) == 0)
  {
    if (!dword_1EE2B3F38)
      return 0;
LABEL_58:
    v58 = 0;
    v57[1] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_92:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  *(_WORD *)v57 = 0;
  if ((objc_msgSend((id)v1, "isTheAssistant") & 1) == 0
    && !objc_msgSend((id)v1, "clientPriority")
    && -[MXSessionManager isSiriSessionActive:andMixable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSiriSessionActive:andMixable:", &v57[1], v57)&& v57[1]&& ((objc_msgSend((id)v1, "mixesWithEveryone") & 1) != 0 || v57[0]))
  {
    if (dword_1EE2B3F38)
    {
      v58 = 0;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v23 = v58;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if (!v24)
        goto LABEL_92;
      v25 = objc_msgSend((id)v1, "clientName");
      v26 = v57[1];
      v27 = objc_msgSend((id)v1, "mixesWithEveryone");
      v59 = 136316162;
      v60 = "CMSUtility_IsAllowedToStartRecording";
      v61 = 2114;
      v62 = v25;
      v63 = 1024;
      *(_DWORD *)v64 = v26;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)&v64[6] = v27;
      *(_WORD *)v65 = 1024;
      *(_DWORD *)&v65[2] = v57[0];
      goto LABEL_65;
    }
    return 0;
  }
  IsAnExtension = CMSUtility_IsAnExtension((void *)v1);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v4 = UpTimeNanoseconds - objc_msgSend((id)v1, "timestampWhenMostRecentResumableEndInterruptionWasSent");
  v5 = objc_msgSend((id)v1, "wasInterruptedWhileRecording");
  if (v4 < 0x28FA6AE00)
    v6 = v5;
  else
    v6 = 0;
  if (v6 == 1)
  {
    objc_msgSend((id)v1, "setTimestampWhenMostRecentResumableEndInterruptionWasSent:", 0);
    objc_msgSend((id)v1, "setWasInterruptedWhileRecording:", 0);
  }
  v7 = FigGetUpTimeNanoseconds();
  v8 = v7 - objc_msgSend((id)v1, "timestampWhenRecordingInBackgroundMostRecentlyStopped");
  v9 = objc_msgSend((id)v1, "wasInterruptedWhileRecording");
  if (v8 > 0xB2D05DFF)
    v10 = 1;
  else
    v10 = v9;
  if ((v10 & 1) == 0)
    objc_msgSend((id)v1, "setTimestampWhenRecordingInBackgroundMostRecentlyStopped:", 0);
  if (objc_msgSend((id)v1, "applicationState") != 4
    || (v11 = objc_msgSend((id)v1, "clientPriority"),
        v12 = -[MXSessionManager isSessionAllowedToStartRecordingTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionAllowedToStartRecordingTemporarily:", v1), v13 = objc_msgSend((id)v1, "hasAudioMode:", CFSTR("EchoCancellationInput")), (objc_msgSend((id)v1, "hasEntitlementToStartRecordingInTheBackground") & 1) != 0)|| v11 == 10|| ((v6 | objc_msgSend((id)v1, "doesInterAppAudio") | v10 ^ 1 | v12 | v13) & 1) != 0)
  {
    if (IsAnExtension && (objc_msgSend((id)v1, "hasEntitlementToRecordAudioInAnExtension") & 1) == 0)
    {
      if (!dword_1EE2B3F38)
        return 0;
      v58 = 0;
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v20 = v58;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if (!v21)
        goto LABEL_92;
    }
    else if (CMSMDeviceState_IsSmartCoverClosed()
           && CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone()
           && (!v1 || (objc_msgSend((id)v1, "prefersNoInterruptionWhenSecureMicrophoneIsEngaged") & 1) == 0))
    {
      if (!dword_1EE2B3F38)
        return 0;
      v58 = 0;
      v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v30 = v58;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v31 = v30;
      else
        v31 = v30 & 0xFFFFFFFE;
      if (!v31)
        goto LABEL_92;
    }
    else
    {
      if (!objc_msgSend((id)v1, "mixesWithEveryone")
        || objc_msgSend((id)v1, "applicationState") == 8
        || !objc_msgSend((id)v1, "applicationState"))
      {
        return 1;
      }
      if (objc_msgSend((id)v1, "applicationState") != 4)
      {
        if (!dword_1EE2B3F38)
          return 0;
        v58 = 0;
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v45 = v58;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if (!v46)
          goto LABEL_92;
        v47 = objc_msgSend((id)v1, "clientName");
        StringForApplicationState = CMSMUtility_GetStringForApplicationState(objc_msgSend((id)v1, "applicationState"));
        v59 = 136315650;
        v60 = "CMSUtility_IsAllowedToStartRecording";
        v61 = 2114;
        v62 = v47;
        v63 = 2114;
        *(_QWORD *)v64 = StringForApplicationState;
LABEL_65:
        _os_log_send_and_compose_impl();
        goto LABEL_92;
      }
      if (!CMSUtility_HasBackgroundEntitlement((void *)v1))
      {
        if (dword_1EE2B3F38)
        {
          v58 = 0;
          v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v50 = v58;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            v51 = v50;
          else
            v51 = v50 & 0xFFFFFFFE;
          if (v51)
          {
            v52 = objc_msgSend((id)v1, "clientName");
            v59 = 136315394;
            v60 = "CMSUtility_IsAllowedToStartRecording";
            v61 = 2114;
            v62 = v52;
            _os_log_send_and_compose_impl();
          }
          goto LABEL_92;
        }
        return 0;
      }
      if (cmsutility_hasAssertionsToStartMixableRecording((void *)v1))
      {
        if (dword_1EE2B3F38)
        {
          v58 = 0;
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v15 = v58;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            v16 = v15;
          else
            v16 = v15 & 0xFFFFFFFE;
          if (v16)
          {
            v17 = objc_msgSend((id)v1, "clientName");
            v18 = objc_msgSend((id)objc_msgSend((id)v1, "clientPID"), "intValue");
            v59 = 136315650;
            v60 = "CMSUtility_IsAllowedToStartRecording";
            v61 = 2114;
            v62 = v17;
            v63 = 1024;
            *(_DWORD *)v64 = v18;
            _os_log_send_and_compose_impl();
          }
          v1 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return v1;
        }
        return 1;
      }
      if (!dword_1EE2B3F38)
        return 0;
      v58 = 0;
      v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v54 = v58;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        v55 = v54;
      else
        v55 = v54 & 0xFFFFFFFE;
      if (!v55)
        goto LABEL_92;
    }
    v32 = objc_msgSend((id)v1, "clientName");
    v33 = objc_msgSend((id)objc_msgSend((id)v1, "clientPID"), "intValue");
    v59 = 136315650;
    v60 = "CMSUtility_IsAllowedToStartRecording";
    v61 = 2114;
    v62 = v32;
    v63 = 1024;
    *(_DWORD *)v64 = v33;
    goto LABEL_65;
  }
  v58 = 0;
  v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v35 = v58;
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    v36 = v35;
  else
    v36 = v35 & 0xFFFFFFFE;
  if (v36)
  {
    v37 = objc_msgSend((id)v1, "clientName");
    v38 = objc_msgSend((id)v1, "clientPID");
    v39 = objc_msgSend((id)v1, "hasEntitlementToStartRecordingInTheBackground");
    v40 = -[MXSessionManager getClientPriorityAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getClientPriorityAsString:", objc_msgSend((id)v1, "clientPriority"));
    v41 = objc_msgSend((id)v1, "doesInterAppAudio");
    v59 = 136317442;
    v60 = "CMSUtility_IsAllowedToStartRecording";
    v61 = 2114;
    v62 = v37;
    v63 = 2114;
    *(_QWORD *)v64 = v38;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)v65 = v39;
    *(_WORD *)&v65[4] = 2114;
    *(_QWORD *)&v65[6] = v40;
    v66 = 1024;
    v67 = v41;
    v68 = 1024;
    v69 = 0;
    v70 = 1024;
    v71 = 0;
    v72 = 1024;
    v73 = 0;
    v74 = 1024;
    v75 = 0;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v1)
  {
    if (objc_msgSend((id)objc_msgSend((id)v1, "reporterIDs"), "count"))
    {
      valuePtr[0] = 1;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend((id)v1, "reporterIDs"), 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend((id)v1, "displayID");
      FigCFDictionarySetValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      off_1EE2B3D78(valuePtr[0], Mutable, 11, 6);
      if (Mutable)
        CFRelease(Mutable);
    }
    return 0;
  }
  return v1;
}

BOOL cmscreenIsActivated()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t vaemVADCopyAvailableStreamFormatsForVADID(AudioObjectID a1, int a2, _QWORD *a3, unsigned int *a4)
{
  _BOOL4 v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  AudioObjectID outData;

  outData = 0;
  v9 = 0;
  v6 = a2 == 0;
  result = vaemGetStream0(a1, v6, &outData);
  if ((_DWORD)result)
    v8 = 1;
  else
    v8 = outData == 0;
  if (!v8)
  {
    result = vaemCopySupportedStreamFormats(outData, v6, &v9, a4);
    if (!(_DWORD)result)
      *a3 = v9;
  }
  return result;
}

BOOL vaemIsVolumeRampInProgress(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  UInt32 ioDataSize;
  uint64_t inAddress;
  _QWORD inAddress_8[23];

  inAddress_8[22] = *MEMORY[0x1E0C80C00];
  if (vaemDeviceSupportsVolumeRamp(a1))
  {
    inAddress = *(_QWORD *)"spmrptuo";
    inAddress_8[0] = 0;
    ioDataSize = 4;
    if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, (char *)inAddress_8 + 4))return HIDWORD(inAddress_8[0]) == 1;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_7;
  }
  if (dword_1EE2B3F38)
  {
    LODWORD(inAddress) = 0;
    BYTE4(inAddress_8[0]) = 0;
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
LABEL_7:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t vaemGetDownlinkMute()
{
  int v1;

  v1 = 0;
  if (!unk_1EE2B3BC0)
    return 0;
  unk_1EE2B3BC0(0, &v1);
  return (v1 >> 1) & 1;
}

float vaemGetCurrentLatencyForVADIDAndScope(uint64_t a1, int a2)
{
  __CFString *VADNameForVADID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v6[25];

  v6[24] = *(double *)MEMORY[0x1E0C80C00];
  v6[0] = 0.0;
  if (off_1EE2B3BC8)
  {
    VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
    off_1EE2B3BC8(VADNameForVADID, a2 == 1, v6);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v6[0];
}

__CFArray *vaemCopyActiveInputRouteNamesForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  __CFArray *Mutable;
  CFIndex i;
  AudioObjectID PortAtIndex;
  const void *v14;
  const void *v15;

  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  v7 = (const __CFArray *)vaemCopyVADInputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, a3);
  if (!v7)
    return 0;
  v8 = v7;
  Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
    Mutable = 0;
  }
  else
  {
    v10 = Count;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    for (i = 0; i != v10; ++i)
    {
      PortAtIndex = CMSMVAUtility_GetPortAtIndex(v8, i);
      v14 = (const void *)vaeCopyNameForPort(PortAtIndex);
      if (v14)
      {
        v15 = v14;
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v15);
      }
    }
  }
  CFRelease(v8);
  return Mutable;
}

void routingContextRemoteXPC_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[5] = 0;
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)DerivedStorage && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendSyncMessage();
    FigXPCRelease();
  }
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    CFRelease(v1);
  v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
    CFRelease(v4);
  v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(DerivedStorage + 48);
  if (v6)
    dispatch_release(v6);
  if (*(_QWORD *)(DerivedStorage + 72))
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __routingContextRemoteXPC_Finalize_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = DerivedStorage;
    MXDispatchSync((uint64_t)"routingContextRemoteXPC_Finalize", (uint64_t)"FigRoutingContextRemoteXPC.m", 552, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v7);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 72));
  }
}

uint64_t mx_runningBoardServices_removePIDFromApplicationStateCache(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (objc_msgSend(a1, "unsignedIntValue"))
  {
    objc_msgSend((id)gApplicationStateCacheLock, "lock");
    if (objc_msgSend((id)gApplicationStateCache, "objectForKey:", a1))
      objc_msgSend((id)gApplicationStateCache, "removeObjectForKey:", a1);
    return objc_msgSend((id)gApplicationStateCacheLock, "unlock");
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t mx_runningBoardServices_InvalidateProcessAssertion(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
    return objc_msgSend(a1, "invalidate");
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t getSTActivityAttributionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__5;
  v7 = __Block_byref_object_dispose__5;
  v0 = getSTActivityAttributionClass_softClass;
  v8 = getSTActivityAttributionClass_softClass;
  if (!getSTActivityAttributionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTActivityAttributionClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getSTActivityAttributionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19367BD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPAAccessLoggerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getPAAccessLoggerClass_softClass;
  v8 = getPAAccessLoggerClass_softClass;
  if (!getPAAccessLoggerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPAAccessLoggerClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getPAAccessLoggerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19367BE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL cmsmSubPortPreferenceMatches(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  int v7;
  int v8;
  BOOL v9;
  const __CFNumber *v10;
  const __CFNumber *v11;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("port id"));
  v5 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("port id"));
  if (CFNumberCompare(Value, v5, 0))
    return 0;
  v7 = CFDictionaryContainsKey(a2, CFSTR("polar pattern"));
  v8 = CFDictionaryContainsKey(a1, CFSTR("polar pattern"));
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    return (v7 | v8) == 0;
  }
  else
  {
    v10 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("sub-port id"));
    v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("sub-port id"));
    return CFNumberCompare(v10, v11, 0) == kCFCompareEqualTo;
  }
}

__CFArray *cmsCreateSubPortPreferenceFromPropertyValue(void *a1, const __CFArray *a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  CFIndex i;
  __CFDictionary *v6;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v9;
  const void *v10;
  CFArrayRef v11;
  BOOL v12;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2 && CFArrayGetCount(a2) >= 1 && CFArrayGetCount(a2) >= 1)
  {
    for (i = 0; CFArrayGetCount(a2) > i; ++i)
    {
      v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_MicrophonePolarPattern")))
      {
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_MicrophonePolarPattern"));
        CFDictionarySetValue(v6, CFSTR("polar pattern"), Value);
      }
      else if (!CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_DataSourceID")))
      {
        values[0] = 0;
        values[0] = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_RouteID"));
        v11 = CFArrayCreate(v3, (const void **)values, 1, MEMORY[0x1E0C9B378]);
        objc_msgSend(a1, "setOverridePortsList:", v11);
        if (v11)
          CFRelease(v11);
        goto LABEL_9;
      }
      v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_DataSourceID"));
      CFDictionarySetValue(v6, CFSTR("sub-port id"), v9);
      v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_RouteID"));
      CFDictionarySetValue(v6, CFSTR("port id"), v10);
LABEL_9:
      if (CFDictionaryGetCount(v6) >= 1)
        CFArrayAppendValue(Mutable, v6);
      if (v6)
        CFRelease(v6);
    }
  }
  if (CFArrayGetCount(Mutable))
    v12 = 1;
  else
    v12 = Mutable == 0;
  if (!v12)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t _VAEndpointManager_CopyPropertyForAudioDevice(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, CFNumberRef *a6)
{
  uint64_t v10;
  uint64_t Stream0;
  CFNumberRef v12;
  float CurrentLatencyForVADIDAndScope;
  double SampleRateForDevice;
  uint64_t v16;
  uint64_t v17;
  int v18;
  UInt32 ioDataSize;
  float outData;
  AudioObjectPropertyAddress inAddress;

  CMBaseObjectGetDerivedStorage();
  v10 = 4294950586;
  if (a2 && (_DWORD)a4 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, CFSTR("VAEM_Stream0")))
    {
      inAddress.mSelector = 0;
      Stream0 = vaemGetStream0(a4, *a5, &inAddress);
LABEL_8:
      v10 = Stream0;
      v12 = MXCFNumberCreateFromSInt64(inAddress.mSelector);
LABEL_9:
      *a6 = v12;
      return v10;
    }
    if (CFEqual(a2, CFSTR("VAEM_DeviceFormatID")))
    {
      inAddress.mSelector = 0;
      vaemGetDeviceFormatID(a4, *a5, &inAddress);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("VAEM_DeviceVolume")))
    {
      *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
      inAddress.mElement = 0;
      ioDataSize = 4;
      outData = 0.0;
      AudioObjectGetPropertyData(a4, &inAddress, 0, 0, &ioDataSize, &outData);
      CurrentLatencyForVADIDAndScope = outData;
LABEL_13:
      v12 = MXCFNumberCreateFromFloat32(CurrentLatencyForVADIDAndScope);
LABEL_14:
      v10 = 0;
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAEM_DecibelEquivalentInVAD")))
    {
      inAddress.mSelector = *a5;
      v10 = vaemConvertToDecibelInVAD(a4, &inAddress);
      v12 = MXCFNumberCreateFromFloat32(*(float *)&inAddress.mSelector);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("VAEM_DeviceSampleRate")))
    {
      SampleRateForDevice = vaemGetSampleRateForDevice(a4);
      v12 = MXCFNumberCreateFromFloat64(SampleRateForDevice);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("VAEM_DeviceFormat")))
    {
      *(_QWORD *)&inAddress.mSelector = 0;
      vaemCopyDeviceFormat(a4, *a5, (CFTypeRef *)&inAddress);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("VAEM_AudioClockDevice")))
      {
        if (CFEqual(a2, CFSTR("VAEM_DetailedActiveAudioRoute")))
        {
          v12 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", a4);
          goto LABEL_14;
        }
        if (CFEqual(a2, CFSTR("VAEM_CurrentInputLatency")))
        {
          v17 = a4;
          v18 = 1;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("VAEM_CurrentOutputLatency")))
            return 0;
          v17 = a4;
          v18 = 0;
        }
        CurrentLatencyForVADIDAndScope = vaemGetCurrentLatencyForVADIDAndScope(v17, v18);
        goto LABEL_13;
      }
      *(_QWORD *)&inAddress.mSelector = 0;
      v16 = vaemCopyClockDeviceForAudioDevice(a4, (const __CFString **)&inAddress);
    }
    v10 = v16;
    *a6 = *(CFNumberRef *)&inAddress.mSelector;
  }
  return v10;
}

void MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion(void *a1)
{
  void *v2;

  if (initializeLogging_onceToken != -1)
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  v2 = (void *)MEMORY[0x194035B20]();
  mx_runningBoardServices_InvalidateProcessAssertion(a1);
  objc_autoreleasePoolPop(v2);
}

id MX_PrivacyAccounting_CreateRecordingAccessIntervals(int a1, __int128 *a2, int a3, void *a4, uint64_t a5)
{
  void *v6;
  void *v8;
  int v9;
  uint64_t i;
  void *v11;
  void *v12;
  const __CFData *v13;
  void *v14;
  objc_class *v15;
  void *PATCCAccessClass;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  UInt8 buffer[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  _BYTE v49[128];
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  uint64_t v53;
  CFRange v54;

  LODWORD(v6) = a3;
  LODWORD(v8) = a1;
  v53 = *MEMORY[0x1E0C80C00];
  if (mx_privacyAccounting_isAvailable_onceToken != -1)
LABEL_48:
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_8);
  if ((mx_privacyAccounting_isAvailable_result & 1) != 0
    || !objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "loggingEnabled"))
  {
    return 0;
  }
  v34 = (int)v8;
  v31 = a2;
  v32 = v6;
  v33 = a5;
  v35 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (!objc_msgSend(a4, "count"))
    goto LABEL_41;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v38 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
  if (!v38)
    goto LABEL_41;
  v9 = 0;
  v37 = *(_QWORD *)v42;
  while (2)
  {
    for (i = 0; i != v38; ++i)
    {
      if (*(_QWORD *)v42 != v37)
        objc_enumerationMutation(a4);
      a2 = *(__int128 **)(*((_QWORD *)&v41 + 1) + 8 * i);
      v11 = (void *)objc_msgSend(a2, "valueForKey:", CFSTR("BundleID"), v29, v30);
      v8 = v11;
      if (v11)
      {
        a5 = objc_msgSend(v11, "cStringUsingEncoding:", 4);
        *(_QWORD *)&v45 = 0;
        *((_QWORD *)&v45 + 1) = &v45;
        *(_QWORD *)&v46 = 0x2020000000;
        v6 = gettcc_identity_createSymbolLoc_ptr;
        *((_QWORD *)&v46 + 1) = gettcc_identity_createSymbolLoc_ptr;
        if (!gettcc_identity_createSymbolLoc_ptr)
        {
          v12 = (void *)TCCLibrary();
          v6 = dlsym(v12, "tcc_identity_create");
          *(_QWORD *)(*((_QWORD *)&v45 + 1) + 24) = v6;
          gettcc_identity_createSymbolLoc_ptr = v6;
        }
        _Block_object_dispose(&v45, 8);
        if (!v6)
          goto LABEL_47;
        a5 = ((uint64_t (*)(_QWORD, uint64_t))v6)(0, a5);
        v13 = (const __CFData *)objc_msgSend(a2, "valueForKey:", CFSTR("AuditToken"));
        *(_OWORD *)buffer = 0u;
        v40 = 0u;
        if (v13)
        {
          v54.location = 0;
          v54.length = 32;
          CFDataGetBytes(v13, v54, buffer);
        }
        v50 = *(_OWORD *)buffer;
        v51 = v40;
        *(_QWORD *)&v45 = 0;
        *((_QWORD *)&v45 + 1) = &v45;
        *(_QWORD *)&v46 = 0x2020000000;
        v6 = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
        *((_QWORD *)&v46 + 1) = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
        if (!getPAAuthenticatedClientIdentitySymbolLoc_ptr)
        {
          v14 = (void *)PrivacyAccountingLibrary();
          v6 = dlsym(v14, "PAAuthenticatedClientIdentity");
          *(_QWORD *)(*((_QWORD *)&v45 + 1) + 24) = v6;
          getPAAuthenticatedClientIdentitySymbolLoc_ptr = v6;
        }
        _Block_object_dispose(&v45, 8);
        if (!v6)
          goto LABEL_47;
        v45 = v50;
        v46 = v51;
        a2 = (__int128 *)((uint64_t (*)(__int128 *, uint64_t))v6)(&v45, a5);
        if (!a2)
          goto LABEL_26;
        *(_QWORD *)&v45 = 0;
        *((_QWORD *)&v45 + 1) = &v45;
        *(_QWORD *)&v46 = 0x3052000000;
        *((_QWORD *)&v46 + 1) = __Block_byref_object_copy__1;
        v47 = __Block_byref_object_dispose__1;
        v15 = (objc_class *)getPAApplicationClass_softClass;
        v48 = getPAApplicationClass_softClass;
        if (!getPAApplicationClass_softClass)
        {
          *(_QWORD *)&v50 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v50 + 1) = 3221225472;
          *(_QWORD *)&v51 = __getPAApplicationClass_block_invoke;
          *((_QWORD *)&v51 + 1) = &unk_1E3099018;
          v52 = &v45;
          __getPAApplicationClass_block_invoke((uint64_t)&v50);
          v15 = *(objc_class **)(*((_QWORD *)&v45 + 1) + 40);
        }
        _Block_object_dispose(&v45, 8);
        a2 = (__int128 *)objc_msgSend([v15 alloc], "initWithTCCIdentity:", a2);
        if (a2
          && (PATCCAccessClass = (void *)getPATCCAccessClass(),
              (v17 = objc_msgSend(PATCCAccessClass, "accessWithAccessor:forService:", a2, getkTCCServiceMicrophone())) != 0))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v35, "setObject:forKey:", objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "beginIntervalForAccess:", v17), v8);
          v9 = 1;
        }
        else
        {
LABEL_26:
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          LODWORD(v8) = 0;
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_QWORD *)&v45 = 0;
        *((_QWORD *)&v45 + 1) = &v45;
        *(_QWORD *)&v46 = 0x2020000000;
        v6 = gettcc_releaseSymbolLoc_ptr;
        *((_QWORD *)&v46 + 1) = gettcc_releaseSymbolLoc_ptr;
        if (!gettcc_releaseSymbolLoc_ptr)
        {
          v23 = (void *)TCCLibrary();
          v6 = dlsym(v23, "tcc_release");
          *(_QWORD *)(*((_QWORD *)&v45 + 1) + 24) = v6;
          gettcc_releaseSymbolLoc_ptr = v6;
        }
        _Block_object_dispose(&v45, 8);
        if (!v6)
        {
LABEL_47:
          __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
          __break(1u);
          goto LABEL_48;
        }
        ((void (*)(uint64_t))v6)(a5);

      }
      else
      {
        *(_DWORD *)buffer = 0;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v21 = *(_DWORD *)buffer;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v22 = v21;
        else
          v22 = v21 & 0xFFFFFFFE;
        if (v22)
        {
          LODWORD(v50) = 136315138;
          *(_QWORD *)((char *)&v50 + 4) = "MX_PrivacyAccounting_CreateRecordingAccessIntervals";
          LODWORD(v30) = 12;
          v29 = &v50;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v38 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
    if (v38)
      continue;
    break;
  }
  if (!v9)
  {
LABEL_41:
    v24 = (void *)getPATCCAccessClass();
    v25 = getkTCCServiceMicrophone();
    if (v34)
    {
      v26 = v31[1];
      v45 = *v31;
      v46 = v26;
      v27 = objc_msgSend(v24, "accessWithAuditToken:forService:", &v45, v25);
    }
    else
    {
      v27 = objc_msgSend(v24, "accessWithInsecureProcessIdentifier:forService:", v32, v25);
    }
    objc_msgSend(v35, "setObject:forKey:", objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "beginIntervalForAccess:", v27), v33);
  }
  return v35;
}

void sub_19367D320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t MXCoreSessionEndInterruption_WithSecTaskAndStatus(void *a1, __SecTask *a2, const __CFString *a3, int a4)
{
  MXDuckingSource *v8;
  uint64_t v9;
  double v10;
  double v11;
  char v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  NSObject *v15;
  NSUInteger v17;
  void **v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void **v33;
  id v34;
  void **v36;
  id v37;
  void *v38;
  int v39;
  id v40;
  NSObject *v41;
  const __CFArray *v42;
  AudioObjectID A2DPPort;
  int IsBTPortKnownToNotBeInEar;
  _BOOL4 v45;
  NSObject *v46;
  int IsSharedAudioRouteConnectedToLocalAndRemote;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v50;
  const __CFArray *v51;
  __CFArray *Mutable;
  uint64_t i;
  id v54;
  int v55;
  char v56;
  NSObject *v57;
  void **v58;
  id v59;
  char v60;
  uint64_t v61;
  NSObject *v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  CFNumberRef v67;
  int v68;
  _BOOL4 IsDoingSpokenAudio;
  char v70;
  const void *v71;
  CFTypeRef v72;
  CFTypeRef v73;
  NSObject *v74;
  unsigned int v75;
  const char *v76;
  unsigned int v77;
  void *v78;
  const char *v79;
  void (*v80)(uint64_t, uint64_t);
  NSObject *v81;
  unsigned int v82;
  const char *v83;
  unsigned int v84;
  void *ClientName;
  const char *v86;
  void *DisplayID;
  uint64_t v88;
  dispatch_time_t v89;
  NSObject *v90;
  id *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const __CFAllocator *allocator;
  char v105;
  CFIndex Count;
  int v107;
  BOOL v108;
  CFStringRef cf;
  const __CFString *cf1;
  char v111;
  int v112;
  void **ptr;
  int v114;
  MXDuckingSource *v115;
  NSPointerArray *obj;
  const __CFString *obja;
  _QWORD block[8];
  os_log_type_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  CFTypeRef v124;
  _QWORD v125[3];
  CFTypeRef v126;
  os_log_type_t v127[8];
  os_log_type_t *v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  void (*v131)(uint64_t);
  CFTypeRef v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;
  char v138;
  os_log_type_t type[4];
  const char *v140;
  __int16 v141;
  void *v142;
  __int16 v143;
  void *v144;
  __int16 v145;
  uint64_t v146;
  _BYTE v147[24];
  void (*v148)(uint64_t, uint64_t);
  __int128 v149;
  _BYTE v150[128];
  uint64_t v151;
  _BYTE v152[512];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((objc_msgSend(a1, "isActive") & 1) != 0 || (objc_msgSend(a1, "notFullyInactive") & 1) != 0)
    {
      if (a4
        || !objc_msgSend(a1, "isActive")
        || CMSUtility_HasEntitlementForInterruptions(a1, a2))
      {
        if (qword_1EE2B3BD0)
          ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))qword_1EE2B3BD0)(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), objc_msgSend(a1, "audioSessionID"), 0, 0);
        v105 = objc_msgSend(a1, "currentlyControllingFlags");
        v138 = 1;
        v137 = 1;
        v8 = [MXDuckingSource alloc];
        v9 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
        LODWORD(v10) = 0;
        LODWORD(v11) = 0;
        v115 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v8, "initWithType:ID:duckVolume:duckFadeDuration:", 2, v9, v10, v11);
        v112 = objc_msgSend(a1, "nowPlayingAppWasStoppedOnMostRecentActivation");
        cf1 = a3;
        if (CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
          || CMSUtility_DidSessionRecentlyWantToPauseSpokenAudio(a1))
        {
          v12 = objc_msgSend(a1, "isTheAssistant");
          v111 = v12 ^ 1;
        }
        else
        {
          v111 = 0;
          v12 = 1;
        }
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)v127 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (-[NSPointerArray count](-[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v92, v98), "mxCoreSessionList"), "count") < 0x21)
        {
          v18 = (void **)v152;
        }
        else
        {
          v17 = -[NSPointerArray count](-[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList"), "count");
          v18 = (void **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 16 * v17, 0);
          if (!v18)
          {

            return 0;
          }
        }
        ptr = v18;
        CMSUtility_InterpretInterruptionStyle(a1, (BOOL *)&v138, 0, (BOOL *)&v137);
        if (cf1)
          v108 = CFEqual(cf1, CFSTR("non-resumable.deallocated")) != 0;
        else
          v108 = 0;
        if ((objc_msgSend(a1, "makesMusicResume") & 1) != 0)
        {
          v19 = 0;
        }
        else
        {
          if (!objc_msgSend(a1, "needToEndInterruption"))
          {
            v19 = 0;
            cf = 0;
LABEL_43:
            if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v93, v99), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory"))&& ((cf1 != 0) & objc_msgSend(a1, "areBothBudsInEarForA2DPPortBeforeInterrupting")) == 1&& CFStringHasPrefix(cf1, CFSTR("resumable"))&& -[MXSessionManager isAtleastOneBudNotInEarForA2DPPort](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAtleastOneBudNotInEarForA2DPPort"))
            {
              if (cf)
                CFRelease(cf);
              cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%@"), CFSTR("non"), cf1);
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)v127 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v25, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            -[MXSessionManager cancelAnyInProgressRampIfNeeded:reason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v94, v100), "cancelAnyInProgressRampIfNeeded:reason:", a1, 1);
            cmsSetIsPlaying(a1, 0);
            if (!objc_msgSend(a1, "extendBackgroundAppAssertionTimer") && objc_msgSend(a1, "playbackAssertionRef"))
              CMSMSleep_ReleasePlaybackProcessAssertion(a1);
            MEMORY[0x1940352BC](gCMSM);
            if (dword_1EE2B3F38)
            {
              *(_DWORD *)v127 = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v26, type[0]);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (objc_msgSend(a1, "triggeredRemoteInterruption", v95, v101))
            {
              if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
                 || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
                && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
              {
                CMSM_IDSClient_NotifyRemote_LocalIsDoingEndInterruption(cf1);
              }
              objc_msgSend(a1, "setTriggeredRemoteInterruption:", 0);
            }
            v114 = objc_msgSend(a1, "currentlyControllingFlags");
            v27 = (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0
               && (objc_msgSend(a1, "currentlyControllingFlags") & 0x10) == 0;
            cmsSetIsActive(a1, 0, 0);
            objc_msgSend(a1, "resetInterruptionFlags");
            objc_msgSend(a1, "setWasInterruptedByNowPlayingApp:", 0);
            objc_msgSend(a1, "setWasInterruptedWhileSuspended:", 0);
            v107 = objc_msgSend(a1, "doNotNotifyOtherSessionsOnNextInactive");
            if ((v107 & 1) != 0)
            {

              if (cf)
                CFRelease(cf);
              goto LABEL_231;
            }
            if (((objc_msgSend(a1, "currentlyControllingFlags") & 0x10) != 0
               && !objc_msgSend(a1, "isSharePlayCapableCallSession")
               || CMSUtility_IsSharePlayCapableMediaSession(a1))
              && CMSMUtility_IsSharePlayCapableCallSessionActive())
            {
              CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume();
              CMSMUtility_TransferVolumeControlFlagToSharePlayCapableCallSession();
            }
            else if ((objc_msgSend(a1, "isSharePlayCapableCallSession") & v27) == 1)
            {
              CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume();
            }
            cmsReleaseBorrowedStarkMainAudio(a1, v19);
            -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
            v135 = 0u;
            v136 = 0u;
            v133 = 0u;
            v134 = 0u;
            obj = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
            v28 = 0;
            v29 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v133, v150, 16);
            if (v29)
            {
              v30 = *(_QWORD *)v134;
              allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              do
              {
                v31 = 0;
                do
                {
                  if (*(_QWORD *)v134 != v30)
                    objc_enumerationMutation(obj);
                  v32 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * v31);
                  if (v32 != a1
                    && objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * v31), "isDucked")
                    && -[MXSessionManager isSessionDucked:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionDucked:duckingSource:", v32, v115))
                  {
                    v33 = &ptr[2 * v28];
                    *v33 = v32;
                    *((_DWORD *)v33 + 2) = 3;
                    v34 = v32;
                    ++v28;
                  }
                  if (objc_msgSend(v32, "waitingToResume", v96, v102)
                    && (objc_msgSend(v32, "isPlaying") & 1) == 0)
                  {
                    if (v32 == a1)
                    {
                      objc_msgSend(a1, "setWaitingToResume:", 0);
                      goto LABEL_110;
                    }
                    objc_msgSend(a1, "audioCategory");
                    if (FigCFEqual())
                    {
                      objc_msgSend(v32, "audioCategory");
                      if (FigCFEqual())
                      {
                        if (CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v32, "clientPID"), "intValue")))
                          CMSMSleep_FetchTemporaryPlaybackProcessAssertion(v32);
                        objc_msgSend(v32, "setWaitingToResume:", 0);
                        v36 = &ptr[2 * v28];
                        *v36 = v32;
                        *((_DWORD *)v36 + 2) = 1;
                        v37 = v32;
                        ++v28;
                        goto LABEL_110;
                      }
                    }
                    if ((void *)objc_msgSend(v32, "interruptingSession") != a1)
                      goto LABEL_110;
                    if (FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F488, 0x1E30AA588))
                    {
                      objc_msgSend(v32, "setInterruptingSession:", qword_1EE2B3CD0);
                      goto LABEL_110;
                    }
                    v38 = CMSMUtility_GetPlayingPhoneCallOrRingtoneSession();
                    v39 = v112;
                    if (!v38)
                      v39 = 0;
                    if (v39 == 1
                      && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v32)
                      && (objc_msgSend(v32, "isSharePlayMediaSession") & 1) == 0)
                    {
                      objc_msgSend(v32, "setInterruptingSession:", v38);
                      goto LABEL_110;
                    }
                    if (v112
                      && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v32)
                      && CMSMNP_GetNowPlayingAppIsPlaying())
                    {
                      v40 = CMSMNP_CopyNowPlayingAppSession();
                      if (dword_1EE2B3F38)
                      {
                        *(_DWORD *)v127 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v41, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      objc_msgSend(v32, "setInterruptingSession:", 0, v96, v102);
                      objc_msgSend(v32, "setWaitingToResume:", 0);

                      goto LABEL_110;
                    }
                    objc_msgSend(v32, "setWaitingToResume:", 0);
                    v42 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
                    A2DPPort = cmsmGetA2DPPort(v42);
                    if (v42)
                      CFRelease(v42);
                    if (A2DPPort && vaeDoesBTPortSupportInEarDetection(A2DPPort))
                    {
                      IsBTPortKnownToNotBeInEar = CMSMVAUtility_IsBTPortKnownToNotBeInEar(A2DPPort);
                      v45 = IsBTPortKnownToNotBeInEar != 0;
                      if (IsBTPortKnownToNotBeInEar && dword_1EE2B3F38)
                      {
                        *(_DWORD *)v127 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v46, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        v45 = 1;
                      }
                    }
                    else
                    {
                      v45 = 0;
                    }
                    if (CMSUtility_IsAudioCategoryNonLongFormPlayback((uint64_t)v32))
                      goto LABEL_236;
                    if (objc_msgSend(v32, "overridePortsList"))
                      goto LABEL_236;
                    IsSharedAudioRouteConnectedToLocalAndRemote = CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote();
                    if (!v45)
                    {
                      if (IsSharedAudioRouteConnectedToLocalAndRemote)
                        goto LABEL_236;
                    }
                    if (objc_msgSend(v32, "audioCategory", v96, v102)
                      && (VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v32, "audioCategory")),
                          VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v32, "audioMode")),
                          v50 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)objc_msgSend(v32, "activationContext"), (const void *)objc_msgSend(v32, "allowedPortTypes")), (v51 = v50) != 0))
                    {
                      Count = CFArrayGetCount(v50);
                      if (Count < 1)
                      {
                        Mutable = 0;
                      }
                      else
                      {
                        Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                        for (i = 0; i != Count; ++i)
                        {
                          v151 = 0;
                          FigCFArrayGetInt64AtIndex();
                          v54 = vaeCopyFigOutputDeviceNameFromVADPort(v151);
                          if (v54)
                          {
                            CFArrayAppendValue(Mutable, v54);
                            CFRelease(v54);
                          }
                        }
                      }
                      CFRelease(v51);
                    }
                    else
                    {
                      Mutable = 0;
                    }
                    objc_msgSend(v32, "activeRoutesWhenInterrupted");
                    if (FigCFEqual())
                    {
LABEL_148:
                      v55 = 1;
                      if (!Mutable)
                        goto LABEL_155;
LABEL_154:
                      CFRelease(Mutable);
                      goto LABEL_155;
                    }
                    if (CMSMVAUtility_IsAnyRouteAvailableForRouteConfiguration(objc_msgSend(v32, "activeRoutesWhenInterrupted"), (NSDictionary *)objc_msgSend(v32, "audioCategory"), objc_msgSend(v32, "audioMode"), (const void *)objc_msgSend(v32, "allowedPortTypes")))
                    {
                      objc_msgSend(v32, "activeRoutesWhenInterrupted");
                      if (FigCFArrayContainsValue())
                      {
                        byte_1EE2B3CE0 = 0;
                        goto LABEL_148;
                      }
                    }
                    v55 = 0;
                    if (Mutable)
                      goto LABEL_154;
LABEL_155:
                    if (v55)
                    {
LABEL_236:
                      v56 = !CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v32, "clientPID", v96, v102), "intValue"))|| v108;
                      if ((v56 & 1) == 0 && (objc_msgSend(v32, "wasInterruptedWhileSuspended") & 1) == 0)
                        CMSMSleep_FetchTemporaryPlaybackProcessAssertion(v32);
                      if (dword_1EE2B3F38)
                      {
                        *(_DWORD *)v127 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v57, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      v58 = &ptr[2 * v28];
                      *v58 = v32;
                      *((_DWORD *)v58 + 2) = 1;
                      v59 = v32;
                      ++v28;
                    }
                    if (CMSUtility_IsDoingSpokenAudio(v32))
                      v60 = v111;
                    else
                      v60 = 0;
                    if ((v60 & 1) == 0)
                      objc_msgSend(v32, "setActiveRoutesWhenInterrupted:", 0);
                    goto LABEL_110;
                  }
                  if (v32 == a1)
                    goto LABEL_110;
                  if (objc_msgSend(v32, "isActive") && objc_msgSend(v32, "isPlaying"))
                  {
                    objc_msgSend(v32, "setWaitingToResume:", 0);
                    if (!v114)
                      goto LABEL_110;
LABEL_93:
                    cmsTryToTakeControl(v32);
                    goto LABEL_110;
                  }
                  if (objc_msgSend(v32, "isActive"))
                  {
                    if (!CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote() && v114 != 0)
                      goto LABEL_93;
                  }
LABEL_110:
                  ++v31;
                }
                while (v31 != v29);
                v61 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v133, v150, 16);
                v29 = v61;
              }
              while (v61);
            }
            -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v96, v102), "mxCoreSessionListEndIteration");
            MEMORY[0x1940352C8](gCMSM);
            -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "startAsyncDuckingOperation");
            if (-[MXSessionManager voiceOverSessionWantsRelativeDucking:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "voiceOverSessionWantsRelativeDucking:", a1))
            {
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)v127 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v62, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              -[MXSessionManager updateDuckedSessionsForVoiceOver:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v97, v103), "updateDuckedSessionsForVoiceOver:", a1);
            }
            v63 = cf1;
            if (v28 < 1)
            {
              -[MXSessionManager endAsyncDuckingOperationForSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperationForSession:", a1);
              goto LABEL_222;
            }
            if (cf)
              v63 = cf;
            obja = v63;
            v64 = v28;
            v65 = v28;
            v66 = ptr;
            while (1)
            {
              v67 = CMSUtility_CopyFadeDuration(a1, 1, 0);
              v68 = *((_DWORD *)v66 + 2);
              if (v68 == 3)
              {
                -[MXSessionManager unduckVolume:sessionCausingUnduck:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckVolume:sessionCausingUnduck:duckingSource:", *v66, a1, v115);
              }
              else if (v68 == 1)
              {
                IsDoingSpokenAudio = CMSUtility_IsDoingSpokenAudio(*v66);
                v70 = v111 ^ 1;
                if (!IsDoingSpokenAudio)
                  v70 = 1;
                if ((v70 & 1) == 0)
                {
                  *(_QWORD *)v147 = 0;
                  *(_QWORD *)&v147[8] = v147;
                  *(_QWORD *)&v147[16] = 0x3052000000;
                  v148 = __Block_byref_object_copy__17;
                  *(_QWORD *)&v149 = __Block_byref_object_dispose__17;
                  *((_QWORD *)&v149 + 1) = 0;
                  v71 = *v66;
                  if (*v66)
                    v71 = CFRetain(v71);
                  *((_QWORD *)&v149 + 1) = v71;
                  *(_QWORD *)v127 = 0;
                  v128 = v127;
                  v129 = 0x3052000000;
                  v130 = __Block_byref_object_copy__17;
                  v131 = __Block_byref_object_dispose__17;
                  v132 = 0;
                  v132 = CFRetain(a1);
                  v125[0] = 0;
                  v125[1] = v125;
                  v125[2] = 0x2020000000;
                  v126 = 0;
                  v72 = (CFTypeRef)objc_msgSend(a1, "clientName");
                  if (v72)
                    v72 = CFRetain(v72);
                  v126 = v72;
                  v121 = 0;
                  v122 = &v121;
                  v123 = 0x2020000000;
                  v124 = 0;
                  if (obja)
                    v73 = CFRetain(obja);
                  else
                    v73 = 0;
                  v124 = v73;
                  objc_msgSend(a1, "setWaitingToSendEndInterruptionToSpokenAudioApp:", 1, v97, v103);
                  if (dword_1EE2B3F38)
                  {
                    v120 = 0;
                    v119 = OS_LOG_TYPE_DEFAULT;
                    v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v82 = v120;
                    if (os_log_type_enabled(v81, v119))
                      v84 = v82;
                    else
                      v84 = v82 & 0xFFFFFFFE;
                    if (v84)
                    {
                      ClientName = CMSUtility_GetClientName(*(void **)(*(_QWORD *)&v147[8] + 40), v83);
                      DisplayID = CMSUtility_GetDisplayID(*(void **)(*(_QWORD *)&v147[8] + 40), v86);
                      v88 = v122[3];
                      *(_DWORD *)type = 136315906;
                      v140 = "MXCoreSessionEndInterruption_WithSecTaskAndStatus";
                      v141 = 2114;
                      v142 = ClientName;
                      v143 = 2114;
                      v144 = DisplayID;
                      v145 = 2114;
                      v146 = v88;
                      LODWORD(v103) = 42;
                      v97 = type;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v89 = dispatch_time(0, 1000000000);
                  v90 = MXGetSerialQueue();
                  block[0] = MEMORY[0x1E0C809B0];
                  block[1] = 3221225472;
                  block[2] = __MXCoreSessionEndInterruption_WithSecTaskAndStatus_block_invoke;
                  block[3] = &unk_1E309D258;
                  block[4] = v147;
                  block[5] = v127;
                  block[6] = &v121;
                  block[7] = v125;
                  dispatch_after(v89, v90, block);
                  _Block_object_dispose(&v121, 8);
                  _Block_object_dispose(v125, 8);
                  _Block_object_dispose(v127, 8);
                  _Block_object_dispose(v147, 8);
                  if (!v67)
                    goto LABEL_214;
LABEL_213:
                  CFRelease(v67);
                  goto LABEL_214;
                }
                if (dword_1EE2B3F38)
                {
                  *(_DWORD *)v127 = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v75 = *(_DWORD *)v127;
                  if (os_log_type_enabled(v74, type[0]))
                    v77 = v75;
                  else
                    v77 = v75 & 0xFFFFFFFE;
                  if (v77)
                  {
                    v78 = CMSUtility_GetClientName(*v66, v76);
                    v80 = (void (*)(uint64_t, uint64_t))CMSUtility_GetDisplayID(*v66, v79);
                    *(_DWORD *)v147 = 136315906;
                    *(_QWORD *)&v147[4] = "MXCoreSessionEndInterruption_WithSecTaskAndStatus";
                    *(_WORD *)&v147[12] = 2114;
                    *(_QWORD *)&v147[14] = v78;
                    *(_WORD *)&v147[22] = 2114;
                    v148 = v80;
                    LOWORD(v149) = 2114;
                    *(_QWORD *)((char *)&v149 + 2) = obja;
                    LODWORD(v103) = 42;
                    v97 = (os_log_type_t *)v147;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                CMSUtility_PostInterruptionCommandNotification(*v66, 1u, (const __CFString *)objc_msgSend(a1, "clientName", v97, v103), obja, 0, v67, 0, (const void *)objc_msgSend(a1, "displayID"));
                if (cf
                  && CFStringHasPrefix(cf, CFSTR("resumable"))
                  && (objc_msgSend(*v66, "wasInterruptedWhileRecording") & 1) != 0
                  || cf1
                  && CFStringHasPrefix(cf1, CFSTR("resumable"))
                  && objc_msgSend(*v66, "wasInterruptedWhileRecording"))
                {
                  objc_msgSend(*v66, "setTimestampWhenMostRecentResumableEndInterruptionWasSent:", FigGetUpTimeNanoseconds());
                }
              }
              if (v67)
                goto LABEL_213;
LABEL_214:
              v66 += 2;
              if (!--v65)
              {
                -[MXSessionManager endAsyncDuckingOperationForSession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperationForSession:", a1);
                v91 = ptr;
                do
                {

                  *v91 = 0;
                  v91 += 2;
                  --v64;
                }
                while (v64);
LABEL_222:
                if (ptr != (void **)v152)
                  CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ptr);
                objc_msgSend(a1, "setNeedToEndInterruption:", 0, v97, v103);
                objc_msgSend(a1, "setAreBothBudsInEarForA2DPPortBeforeInterrupting:", 0);
                objc_msgSend(a1, "setRecentlyWantedToPauseSpokenAudio:", 0);
                objc_msgSend(a1, "setNotFullyInactive:", 0);
                if ((v105 & 2) != 0 && (objc_msgSend(a1, "currentlyControllingFlags") & 2) == 0)
                  cmsmUpdatePickableRouteDescriptionLists(1);
                CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();

                if (cf)
                {
                  CFRelease(cf);
                  if ((v107 & 1) == 0)
                    return 0;
                }
                else if (!v107)
                {
                  return 0;
                }
LABEL_231:
                MEMORY[0x1940352C8](gCMSM);
                return 0;
              }
            }
          }
          if (v137 || cf1 && CFStringHasPrefix(cf1, CFSTR("resumable")))
          {
            v19 = 0;
            cf = 0;
          }
          else
          {
            v22 = objc_msgSend(a1, "audioCategory");
            cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), CFSTR("non-resumable"), v22);
            if (objc_msgSend(a1, "isTheAssistant"))
            {
              if (dword_1EE2B3F38)
              {
                *(_DWORD *)v127 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v23, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v19 = 1;
            }
            else
            {
              v19 = 0;
            }
          }
          if (-[MXSessionManager phoneCallBehaviorSessionShouldResumeForCarPlay](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v93, v99), "phoneCallBehaviorSessionShouldResumeForCarPlay"))
          {
            -[MXSessionManager setPhoneCallBehaviorSessionShouldResumeForCarPlay:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setPhoneCallBehaviorSessionShouldResumeForCarPlay:", 0);
            if (dword_1EE2B3F38)
            {
              *(_DWORD *)v127 = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, type[0]);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v19 = 1;
          }
          if ((v12 & 1) != 0)
            goto LABEL_43;
          if (cf)
            CFRelease(cf);
        }
        v20 = objc_msgSend(a1, "audioCategory", v93, v99);
        cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), CFSTR("resumable"), v20);
        goto LABEL_43;
      }
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954308;
    }
    else
    {
      objc_msgSend(a1, "resetInterruptionFlags");
      if (dword_1EE2B3F38)
      {
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
  }
  else
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
}

void sub_19367F03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

CFNumberRef MXCFNumberCreateFromFloat32(float a1)
{
  float valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
}

CFDataRef MXCFDataCreate(UInt8 *bytes, CFIndex length)
{
  if (bytes && (_DWORD)length)
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, length);
  else
    return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v2;
  int v5;
  CFMutableArrayRef Mutable;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v11[7];
  CFTypeRef cf;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v5 = byte_1EE2B2EB0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    cf = 0;
    v2 = FigRoutingManagerContextUtilities_CopyPickedEndpoints(a1, (uint64_t)&cf);
    if (v5)
      v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v7 = 0;
    v8 = (uint64_t)&qword_1EE2B2EA0;
    if (!v5)
      v8 = 504;
    v9 = *(NSObject **)v8;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints_block_invoke;
    v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = cf;
    v11[5] = v7;
    v11[6] = Mutable;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2841, 0, 0, v9, (uint64_t)v11);
    *a2 = Mutable;
    if (cf)
      CFRelease(cf);
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointNames(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v2;
  CFTypeRef cf;

  v2 = 4294949876;
  if (a1)
  {
    if (a2)
    {
      cf = 0;
      v2 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&cf);
      *a2 = routingContextUtilities_copyEndpointNames((const __CFArray *)cf);
      if (cf)
        CFRelease(cf);
    }
  }
  return v2;
}

uint64_t FigRoutingContextUtilities_CopyLeaderUUIDForContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextUtilities_CopyLeaderUUIDForContext_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = v4;
  v9[6] = a1;
  v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingContextUtilities_CopyLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 4810, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_19367F39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CMSystemSoundMgr_StopSystemSoundsforPID()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (off_1EE2B3BA8)
    return off_1EE2B3BA8();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

const __CFString *CMSessionMgrGetUpdatedHardwareFormatBasedOnPreferredNumberOfOutputChannelsAndPreferredHardwareFormat(int a1, uint64_t a2)
{
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (vaemIsAC3EncodingSupported())
  {
    v4 = FigCFEqual();
    if (a1 >= 3)
    {
      if (v4)
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return CFSTR("AC-3");
      }
    }
  }
  return (const __CFString *)a2;
}

void CMSessionFinalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  _QWORD v4[5];
  os_log_type_t type;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    v6 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v3 = MXGetSerialQueue();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __CMSessionFinalize_block_invoke;
    v4[3] = &__block_descriptor_40_e5_v8__0l;
    v4[4] = a1;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionFinalize", (uint64_t)"CMSession_CInterface.m", 242, 0, 0, v3, (uint64_t)v4);
  }
}

uint64_t CMSUtility_SetIsRecording(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  id RecordingAccessIntervals;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  os_log_type_t type;
  int v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (CMSUtility_SetIsRecording_onceToken != -1)
    dispatch_once(&CMSUtility_SetIsRecording_onceToken, &__block_literal_global_54);
  if (objc_msgSend(a1, "isRecording") == a2)
    return 0;
  if (a2 && !CMSUtility_IsAllowedToStartRecording(a1))
    return 4294950315;
  objc_msgSend(a1, "setIsRecording:", a2 != 0);
  CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
  v4 = -[MXExclaves updateSensorStatus:reason:](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "updateSensorStatus:reason:", a1, CFSTR("IsRecording property has changed"));
  if ((_DWORD)v4)
  {
    v5 = v4;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    objc_msgSend(a1, "setIsRecording:", a2 == 0);
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
    return v5;
  }
  if (vaemContinuityScreenOutputIsConnected())
  {
    if (dword_1EE2B3F38)
      goto LABEL_13;
  }
  else if (dword_1EE2B3F38)
  {
LABEL_13:
    v20 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSUtility_SetIsRecording_greenTeaLogger)
  {
    CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
    if (CTGreenTeaOsLogHandle)
    {
      v9 = CTGreenTeaOsLogHandle;
      if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
      {
        v10 = objc_msgSend(a1, "clientName");
        v11 = "started";
        if (!a2)
          v11 = "stopped";
        *(_DWORD *)buf = 138412546;
        v22 = v10;
        v23 = 2080;
        v24 = v11;
        _os_log_impl(&dword_1935FC000, v9, OS_LOG_TYPE_INFO, "Client %@ has %s recording", buf, 0x16u);
      }
    }
  }
  if (objc_msgSend(a1, "isRecording", v16, v17))
  {
    v12 = objc_msgSend(a1, "auditTokenSetByClient");
    if (a1)
      objc_msgSend(a1, "auditToken");
    else
      memset(v18, 0, sizeof(v18));
    RecordingAccessIntervals = MX_PrivacyAccounting_CreateRecordingAccessIntervals(v12, v18, objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), (void *)objc_msgSend(a1, "hostProcessAttribution"), objc_msgSend(a1, "displayID"));
    objc_msgSend(a1, "setBundleIdToPAAccessIntervalMap:", RecordingAccessIntervals);

  }
  else
  {
    if (objc_msgSend(a1, "applicationState") == 4)
      objc_msgSend(a1, "setTimestampWhenRecordingInBackgroundMostRecentlyStopped:", FigGetUpTimeNanoseconds());
    MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)objc_msgSend(a1, "bundleIdToPAAccessIntervalMap"));
    objc_msgSend(a1, "setBundleIdToPAAccessIntervalMap:", 0);
  }
  if (!objc_msgSend(a1, "isRecording")
    || !objc_msgSend(a1, "isActive")
    || !objc_msgSend(a1, "isTheAssistant")
    || !CMSUtility_IsAnyoneBesidesAssistantsSessionsActive(a1)
    || (!objc_msgSend(a1, "dontTakeOverHardware") ? (v14 = 2) : (v14 = 8),
        v5 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, v14, 0),
        !(_DWORD)v5))
  {
    CMSMUtility_UpdatePlayAndRecordAppSpeechState(0);
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
    CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
    return 0;
  }
  return v5;
}

uint64_t CMSUtility_ResetIsPlayingStates(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "setClientIsPlaying:", 0);
  objc_msgSend(a1, "setHapticEngineIsPlaying:", 0);
  v2 = (void *)objc_msgSend(a1, "copyMXSessionList");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v7, "getIsPlaying"))
          objc_msgSend(v7, "resetIsPlayingStates");
        if (objc_msgSend(v7, "getIsPlayingOutput"))
          objc_msgSend(v7, "setIsPlayingOutput:", 0);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  objc_msgSend(a1, "setSomeMXSessionIsPlaying:", 0);
  objc_msgSend(a1, "setIsPlayingOutput:", 0);
  return cmsSetIsPlaying(a1, 0);
}

void *CMSUtility_GetAllowSystemSoundsWhileRecording(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "allowSystemSoundsWhileRecording");
  return result;
}

uint64_t CMSMUtility_UpdateSomeRecordingSessionPresentThatDisallowsSystemSounds()
{
  uint64_t result;

  result = CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds();
  if ((_DWORD)result != byte_1EE2B3D38)
  {
    byte_1EE2B3D38 = result;
    return CMSMNotificationUtility_PostSomeRecordingSessionPresentThatDisallowsSystemSoundsDidChange(result);
  }
  return result;
}

uint64_t CMSMUtility_IsSomeOtherPhoneCallPrioritySessionActive(void *a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v7, "isActive"))
        {
          v8 = objc_msgSend(v7, "isIDSMXCoreSession");
          if (v7 != a1
            && (v8 & 1) == 0
            && objc_msgSend(v7, "hasPhoneCallBehavior")
            && objc_msgSend(v7, "clientPriority") == 10)
          {
            v9 = 1;
            goto LABEL_15;
          }
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_15:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v9;
}

BOOL CMSMUtility_IsRecordingCategory(const void *a1)
{
  return a1
      && (CFEqual(a1, CFSTR("Record"))
       || CFEqual(a1, CFSTR("Record_WithBluetooth"))
       || CFEqual(a1, CFSTR("PlayAndRecord"))
       || CFEqual(a1, CFSTR("PlayAndRecord_WithBluetooth"))
       || CFEqual(a1, CFSTR("PlayAndRecord_NoBluetooth_DefaultToSpeaker"))
       || CFEqual(a1, CFSTR("PlayAndRecord_WithBluetooth_DefaultToSpeaker")));
}

BOOL CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput(uint64_t a1)
{
  return CMSMUtility_IsPlayAndRecordCategory(a1) || FigCFEqual() != 0;
}

uint64_t CMSMUtility_DoesActiveAirPlayVideoSessionExistForPID(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          if (objc_msgSend(v7, "isActive"))
          {
            if (objc_msgSend(v7, "isActiveOverAirPlayVideo"))
            {
              objc_msgSend(v7, "audioCategory");
              if (FigCFEqual()
                || (objc_msgSend(v7, "audioCategory"), FigCFEqual())
                || (objc_msgSend(v7, "audioCategory"), FigCFEqual()))
              {
                v8 = 1;
                goto LABEL_16;
              }
            }
          }
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_16:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

uint64_t CMSMNotificationUtility_PostUserMutedDidChange(uint64_t a1, int a2)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("DeviceMutedDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2 != 0), CFSTR("AudioMuted"), a1, CFSTR("AudioCategory"), 0), 0);
}

void CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID(uint64_t a1, int a2)
{
  void *v2;

  if (a2)
    v2 = CMSUtilityApplier_PostNotificationToBackgroundedSession_StopCommand;
  else
    v2 = CMSUtilityApplier_PostNotification_StopCommand;
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsSameClientAndActive, a1, (unint64_t)v2, 0);
}

uint64_t CMSMNotificationUtility_PostSomeRecordingSessionPresentThatDisallowsSystemSoundsDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeRecordingSessionPresentThatDisallowsSystemSounds"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("SessionPresent"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostRecordingStateDidChange(int a1, uint64_t a2, uint64_t a3)
{
  id RecordingSessionsDescription;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  RecordingSessionsDescription = CMSMNotificationUtility_CreateRecordingSessionsDescription();
  v7 = (void *)MEMORY[0x1E0C99D80];
  v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0);
  v9 = objc_msgSend(v7, "dictionaryWithObjectsAndKeys:", v8, CFSTR("RecordingState"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2), CFSTR("ClientPID"), a3, CFSTR("ClientPIDs"), RecordingSessionsDescription, CFSTR("Sessions"), 0);

  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("RecordingStateDidChange"), v9, 0);
}

uint64_t CMSMDeviceState_IsSmartCoverClosed()
{
  uint64_t v0;

  MEMORY[0x1940352BC](qword_1EE2B2A60);
  v0 = byte_1EE2B29D5;
  MEMORY[0x1940352C8](qword_1EE2B2A60);
  return v0;
}

uint64_t CMSMDeviceState_DeactivateHardwareSafetySession(const __CFString *a1)
{
  void **v2;
  void **v3;
  uint64_t v4;

  v2 = (void **)CMSMDeviceState_CopyHardwareSafetySession();
  if (!v2)
    return 4294954315;
  v3 = v2;
  v4 = MXCoreSessionEndInterruption_WithSecTaskAndStatus(v2[2], 0, a1, 1);
  CFRelease(v3);
  return v4;
}

CFTypeRef CMSMDeviceState_CopyHardwareSafetySession()
{
  CFTypeRef result;

  if (CMSMDeviceState_CopyHardwareSafetySession_onceToken != -1)
    dispatch_once(&CMSMDeviceState_CopyHardwareSafetySession_onceToken, &__block_literal_global_18_1);
  result = (CFTypeRef)qword_1EE2B2A68;
  if (qword_1EE2B2A68)
    return CFRetain((CFTypeRef)qword_1EE2B2A68);
  return result;
}

void sub_193681304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

const __CFString *FSMDebug_GetFigStarkModeEntityString(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("***Unknown***");
  else
    return off_1E3098C78[a1];
}

const __CFString *FSMDebug_GetFigStarkModeConstraintString(int a1)
{
  if (a1 > 499)
  {
    if (a1 != 500)
    {
      if (a1 == 1000)
        return CFSTR("Never");
      return CFSTR("***Unknown***");
    }
    return CFSTR("UserInitiated");
  }
  else
  {
    if (a1)
    {
      if (a1 == 100)
        return CFSTR("Anytime");
      return CFSTR("***Unknown***");
    }
    return CFSTR("N/A");
  }
}

CFStringRef FSMDebug_CopyFigStarkModeBorrowIDString(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v2;

  if ((*(_DWORD *)a1 & 0xFFFFFFFE) != 0x16)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("N/A"), 0);
  v1 = *(_QWORD *)(a1 + 8);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v1)
    return CFStringCreateWithFormat(v2, 0, CFSTR("\"%@\""), v1);
  else
    return CFStringCreateWithFormat(v2, 0, CFSTR("NULL"), 0);
}

const __CFString *FSMDebug_GetFigStarkModeTransferTypeString(int a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 20:
      result = CFSTR("Take");
      break;
    case 21:
      result = CFSTR("Untake");
      break;
    case 22:
      result = CFSTR("Borrow");
      break;
    case 23:
      result = CFSTR("Unborrow");
      break;
    default:
      if (a1)
        result = CFSTR("***Unknown***");
      else
        result = CFSTR("N/A");
      break;
  }
  return result;
}

const __CFString *FSMDebug_GetFigStarkModeTransferPriorityString(int a1)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = CFSTR("UserInitiated");
  v2 = CFSTR("***Unknown***");
  if (a1 == 100)
    v2 = CFSTR("NiceToHave");
  if (a1 != 500)
    v1 = v2;
  if (a1)
    return v1;
  else
    return CFSTR("N/A");
}

const __CFString *FSMDebug_GetFigStarkModeSpeechModeRequestString(int a1)
{
  if (a1 > 9)
  {
    if (a1 != 10)
    {
      if (a1 == 11)
        return CFSTR("RecognizingSpeech");
      return CFSTR("***Unknown***");
    }
    return CFSTR("Speaking");
  }
  else
  {
    if (a1 != -1)
    {
      if (!a1)
        return CFSTR("N/A");
      return CFSTR("***Unknown***");
    }
    return CFSTR("Neither");
  }
}

const __CFString *FSMDebug_GetFigStarkModeTriStateString(int a1)
{
  if ((a1 + 1) > 2)
    return CFSTR("***Unknown***");
  else
    return off_1E3098C90[a1 + 1];
}

__CFString *FSMDebug_CopyPrettyPrintStringForStarkModeState(int *a1)
{
  __CFString *Mutable;
  __CFString *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  const __CFString *v19;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (a1)
  {
    v4 = *a1;
    if (v4 > 2)
      v5 = CFSTR("***Unknown***");
    else
      v5 = off_1E3098C78[v4];
    v6 = a1[1];
    if (v6 > 2)
      v7 = CFSTR("***Unknown***");
    else
      v7 = off_1E3098C78[v6];
    v8 = a1[2];
    if (v8 > 2)
      v9 = CFSTR("***Unknown***");
    else
      v9 = off_1E3098C78[v8];
    v10 = a1[3];
    if (v10 > 2)
      v11 = CFSTR("***Unknown***");
    else
      v11 = off_1E3098C78[v10];
    v12 = a1[4];
    if (v12 > 2)
      v13 = CFSTR("***Unknown***");
    else
      v13 = off_1E3098C78[v12];
    v14 = a1[5];
    if (v14)
    {
      if (v14 == 11)
      {
        v15 = CFSTR("RecognizingSpeech");
      }
      else if (v14 == 10)
      {
        v15 = CFSTR("Speaking");
      }
      else
      {
        v15 = CFSTR("***Unknown***");
      }
    }
    else
    {
      v15 = CFSTR("N/A");
    }
    v16 = a1[6];
    if (v16 > 2)
      v17 = CFSTR("***Unknown***");
    else
      v17 = off_1E3098C78[v16];
    v18 = a1[7];
    if (v18 > 2)
      v19 = CFSTR("***Unknown***");
    else
      v19 = off_1E3098C78[v18];
    CFStringAppendFormat(Mutable, 0, CFSTR("\n\t Mode: \n\t ScreenEntity = %@ \n\t ScreenOwnerEntity = %@ \n\t MainAudioEntity = %@ \n\t MainAudioOwnerEntity = %@ \n\t\t SpeechEntity =  %@ \n\t\t SpeechMode = %@ \n\t PhoneCallEntity = %@ \n\t TurnByTurnEntity = %@"), v5, v7, v9, v11, v13, v15, v17, v19);
  }
  return v3;
}

__CFString *FSMDebug_CopyPrettyPrintStringForResourceChangeRequest(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;
  int v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  int v17;
  const __CFString *v18;
  int v19;
  const __CFString *v20;
  int v21;
  const __CFString *v22;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0x14:
        v4 = *(_DWORD *)(a1 + 4);
        if (v4)
        {
          if (v4 == 500)
          {
            v5 = CFSTR("UserInitiated");
          }
          else if (v4 == 100)
          {
            v5 = CFSTR("NiceToHave");
          }
          else
          {
            v5 = CFSTR("***Unknown***");
          }
        }
        else
        {
          v5 = CFSTR("N/A");
        }
        v19 = *(_DWORD *)(a1 + 16);
        if (v19 > 499)
        {
          if (v19 == 500)
          {
            v20 = CFSTR("UserInitiated");
            goto LABEL_58;
          }
          if (v19 == 1000)
          {
            v20 = CFSTR("Never");
            goto LABEL_58;
          }
        }
        else
        {
          if (!v19)
          {
            v20 = CFSTR("N/A");
            goto LABEL_58;
          }
          if (v19 == 100)
          {
            v20 = CFSTR("Anytime");
            goto LABEL_58;
          }
        }
        v20 = CFSTR("***Unknown***");
LABEL_58:
        v21 = *(_DWORD *)(a1 + 20);
        if (v21 > 499)
        {
          if (v21 == 500)
          {
            v22 = CFSTR("UserInitiated");
            goto LABEL_68;
          }
          if (v21 == 1000)
          {
            v22 = CFSTR("Never");
            goto LABEL_68;
          }
        }
        else
        {
          if (!v21)
          {
            v22 = CFSTR("N/A");
            goto LABEL_68;
          }
          if (v21 == 100)
          {
            v22 = CFSTR("Anytime");
            goto LABEL_68;
          }
        }
        v22 = CFSTR("***Unknown***");
LABEL_68:
        CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t Priority = %@ \n\t\t\t TakeConstraint =  %@ \n\t\t\t BorrowConstraint = %@ \n"), CFSTR("Take"), v5, v20, v22);
        return v3;
      case 0x15:
        v6 = CFSTR("Untake");
        goto LABEL_11;
      case 0x16:
        v11 = *(_DWORD *)(a1 + 4);
        if (v11)
        {
          if (v11 == 500)
          {
            v12 = CFSTR("UserInitiated");
          }
          else if (v11 == 100)
          {
            v12 = CFSTR("NiceToHave");
          }
          else
          {
            v12 = CFSTR("***Unknown***");
          }
        }
        else
        {
          v12 = CFSTR("N/A");
        }
        v17 = *(_DWORD *)(a1 + 16);
        if (v17 > 499)
        {
          if (v17 == 500)
          {
            v18 = CFSTR("UserInitiated");
            goto LABEL_54;
          }
          if (v17 == 1000)
          {
            v18 = CFSTR("Never");
            goto LABEL_54;
          }
        }
        else
        {
          if (!v17)
          {
            v18 = CFSTR("N/A");
            goto LABEL_54;
          }
          if (v17 == 100)
          {
            v18 = CFSTR("Anytime");
            goto LABEL_54;
          }
        }
        v18 = CFSTR("***Unknown***");
LABEL_54:
        CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t BorrowID = %@ \n\t\t Priority = %@ \n\t\t\t UnborrowConstraint = %@ \n"), CFSTR("Borrow"), *(_QWORD *)(a1 + 8), v12, v18);
        break;
      case 0x17:
        v13 = *(_DWORD *)(a1 + 4);
        v14 = CFSTR("UserInitiated");
        v15 = CFSTR("***Unknown***");
        if (v13 == 100)
          v15 = CFSTR("NiceToHave");
        if (v13 != 500)
          v14 = v15;
        if (v13)
          v16 = v14;
        else
          v16 = CFSTR("N/A");
        CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t BorrowID = %@ \n\t\t Priority = %@ \n"), CFSTR("Unborrow"), *(_QWORD *)(a1 + 8), v16);
        return v3;
      default:
        if (*(_DWORD *)a1)
          v6 = CFSTR("***Unknown***");
        else
          v6 = CFSTR("N/A");
LABEL_11:
        v7 = *(_DWORD *)(a1 + 4);
        v8 = CFSTR("UserInitiated");
        v9 = CFSTR("***Unknown***");
        if (v7 == 100)
          v9 = CFSTR("NiceToHave");
        if (v7 != 500)
          v8 = v9;
        if (v7)
          v10 = v8;
        else
          v10 = CFSTR("N/A");
        CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t Priority = %@ \n"), v6, v10);
        return v3;
    }
  }
  return v3;
}

__CFString *FSMDebug_CopyPrettyPrintStringForModeChangeRequest(int *a1)
{
  __CFString *Mutable;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  int v10;
  const __CFString *v11;
  unsigned int v12;
  const __CFString *v13;
  unsigned int v14;
  const __CFString *v15;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!a1)
    return Mutable;
  v3 = FSMDebug_CopyPrettyPrintStringForResourceChangeRequest((uint64_t)(a1 + 2));
  v4 = FSMDebug_CopyPrettyPrintStringForResourceChangeRequest((uint64_t)(a1 + 8));
  v5 = v4;
  v6 = *a1;
  if (v6 > 2)
    v7 = CFSTR("***Unknown***");
  else
    v7 = off_1E3098C78[v6];
  v8 = a1[1];
  if (v8 > 2)
    v9 = CFSTR("***Unknown***");
  else
    v9 = off_1E3098C78[v8];
  v10 = a1[14];
  if (v10 > 9)
  {
    if (v10 == 10)
    {
      v11 = CFSTR("Speaking");
      goto LABEL_18;
    }
    if (v10 == 11)
    {
      v11 = CFSTR("RecognizingSpeech");
      goto LABEL_18;
    }
LABEL_15:
    v11 = CFSTR("***Unknown***");
    goto LABEL_18;
  }
  if (v10 == -1)
  {
    v11 = CFSTR("Neither");
    goto LABEL_18;
  }
  if (v10)
    goto LABEL_15;
  v11 = CFSTR("N/A");
LABEL_18:
  v12 = a1[15] + 1;
  if (v12 > 2)
    v13 = CFSTR("***Unknown***");
  else
    v13 = off_1E3098C90[v12];
  v14 = a1[16] + 1;
  if (v14 > 2)
    v15 = CFSTR("***Unknown***");
  else
    v15 = off_1E3098C90[v14];
  CFStringAppendFormat(Mutable, 0, CFSTR("\n\t ModeChangeRequest: \n\t Requestor = Screen: %@       MainAudio: %@\n\t Screen = %@ \n\t MainAudio =  %@ \n\t SpeechMode = %@ \n\t IsOnPhoneCall = %@ \n\t IsDoingTurnByTurn = %@"), v7, v9, v3, v4, v11, v13, v15);
  if (v3)
    CFRelease(v3);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

void sub_193682D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193682E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936830C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19368385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_193683E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_19368435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193684440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscoveryManagerShouldRegisterEndpointManager(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MXCFPreferencesCopyPreference(CFSTR("EndpointManagerDenyList"));
  v3 = objc_msgSend(v2, "containsObject:", a1) ^ 1;

  return v3;
}

uint64_t FigRouteDiscoveryManagerCopyRoutePresentForType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  _QWORD v7[7];
  _QWORD v8[4];

  if (a3)
  {
    if (discoverManager_getSharedManager_onceToken != -1)
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
    v4 = &discoverManager_getSharedManager_discoveryState;
    if (!qword_1EE2B3238)
      v4 = 0;
    if (*v4)
    {
      v5 = 0;
      v8[0] = 0;
      v8[1] = v8;
      v8[2] = 0x2020000000;
      v8[3] = *MEMORY[0x1E0C9AE40];
      if (a2 <= 8)
        v5 = qword_1937A3290[a2];
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __FigRouteDiscoveryManagerCopyRoutePresentForType_block_invoke;
      v7[3] = &unk_1E3098D60;
      v7[5] = v4;
      v7[6] = v5;
      v7[4] = v8;
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v7);
    }
  }
  return 0;
}

void sub_193685484(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void FigRouteDiscoveryManagerAddToCachedDiscoverers()
{
  CFIndex v0;
  int v1;
  uint64_t v2;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  const void *v8;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = 0;
  v1 = 0;
  if (qword_1EE2B3238)
    v2 = (uint64_t)&qword_1EE2B3348;
  else
    v2 = 280;
  while (1)
  {
    Count = *(const __CFArray **)v2;
    if (*(_QWORD *)v2)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v0 >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v2, v0);
    v5 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
    if (FigCFEqual())
    {
      if (dword_1EE2B3DE8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        v1 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v1 = 1;
      }
    }
    if (v5)
      CFRelease(v5);
    ++v0;
  }
  if (!v1)
  {
    if (dword_1EE2B3DE8)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFArrayAppendValue(*(CFMutableArrayRef *)v2, v8);
    if (v8)
      CFRelease(v8);
  }
}

void FigRouteDiscoveryManagerRemoveCachedDiscoverers()
{
  CFIndex v0;
  uint64_t v1;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const void *v4;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = 0;
  if (qword_1EE2B3238)
    v1 = (uint64_t)&qword_1EE2B3348;
  else
    v1 = 280;
  while (1)
  {
    Count = *(const __CFArray **)v1;
    if (*(_QWORD *)v1)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v0 >= (uint64_t)Count)
      goto LABEL_15;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v1, v0);
    v4 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
    if (FigCFEqual())
      break;
    if (v4)
      CFRelease(v4);
    ++v0;
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)v1, v0);
  if (v4)
    CFRelease(v4);
LABEL_15:
  discoveryManager_removeFreedWeakRefs(*(const __CFArray **)v1);
}

void discoveryManager_removeFreedWeakRefs(const __CFArray *a1)
{
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *v7;

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v2 = (uint64_t)&qword_1EE2B3330;
  else
    v2 = 256;
  MEMORY[0x1940352F8](*(_QWORD *)v2);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      v7 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v7)
      {
        ++v5;
        CFRelease(v7);
      }
      else
      {
        CFArrayRemoveValueAtIndex(a1, v5);
        --v4;
      }
    }
    while (v5 < v4);
  }
  JUMPOUT(0x194035304);
}

uint64_t FigRouteDiscoveryManagerStart()
{
  char *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[5];

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = discoverManager_getSharedManager_discoveryState;
  v1 = (uint64_t)&qword_1EE2B3238;
  if (!qword_1EE2B3238)
  {
    v0 = 0;
    v1 = 8;
  }
  v2 = *(NSObject **)v1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigRouteDiscoveryManagerStart_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = v0;
  MXDispatchSync((uint64_t)"FigRouteDiscoveryManagerStart", (uint64_t)"FigRouteDiscoveryManager.m", 2435, 0, 0, v2, (uint64_t)v5);
  result = MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled();
  if ((_DWORD)result)
  {
    if (discoverManager_getSharedManager_onceToken != -1)
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
    v4 = (uint64_t)&qword_1EE2B3238;
    if (!qword_1EE2B3238)
      v4 = 8;
    return notify_register_dispatch("com.apple.sharing.activity-level-changed", &activityLevelNotifyToken, *(dispatch_queue_t *)v4, &__block_literal_global_45);
  }
  return result;
}

void discoveryManager_registerEndpointManager(const void *a1)
{
  char *v2;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, const __CFAllocator *, void **);
  int v7;
  void *v8;
  void *v9;
  int v10;
  NSObject *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  __CFDictionary *Mutable;
  __CFArray *v17;
  const void *v18;
  uint64_t v19;
  __CFDictionary *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *);
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void *UInt64;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, const __CFAllocator *, _BYTE *);
  const void *v28;
  uint64_t v29;
  _QWORD v30[7];
  os_log_type_t type;
  int v32;
  void *value;
  CFTypeRef cf;
  _BYTE v35[12];
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v2 = discoverManager_getSharedManager_discoveryState;
  else
    v2 = 0;
  value = 0;
  v3 = *MEMORY[0x1E0CA3A40];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v6)
  {
    v7 = v6(CMBaseObject, v3, v4, &value);
    if (a1)
      goto LABEL_8;
LABEL_16:
    v13 = MXGetAssertionLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    *(_DWORD *)v35 = 136446722;
    *(_QWORD *)&v35[4] = "-FigRouteDiscoveryManager-";
    v36 = 2082;
    v37 = "discoveryManager_registerEndpointManager";
    v38 = 1024;
    v39 = 2325;
LABEL_50:
    _os_log_impl(&dword_1935FC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", v35, 0x1Cu);
    goto LABEL_43;
  }
  v7 = -12782;
  if (!a1)
    goto LABEL_16;
LABEL_8:
  v8 = value;
  if (!value)
  {
    v13 = MXGetAssertionLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    *(_DWORD *)v35 = 136446722;
    *(_QWORD *)&v35[4] = "-FigRouteDiscoveryManager-";
    v36 = 2082;
    v37 = "discoveryManager_registerEndpointManager";
    v38 = 1024;
    v39 = 2326;
    goto LABEL_50;
  }
  if (v7)
  {
    v13 = MXGetAssertionLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    *(_DWORD *)v35 = 136446722;
    *(_QWORD *)&v35[4] = "-FigRouteDiscoveryManager-";
    v36 = 2082;
    v37 = "discoveryManager_registerEndpointManager";
    v38 = 1024;
    v39 = 2327;
    goto LABEL_50;
  }
  v9 = (void *)MXCFPreferencesCopyPreference(CFSTR("EndpointManagerDenyList"));
  v10 = objc_msgSend(v9, "containsObject:", v8);

  if (!v10)
  {
    v29 = v3;
    if (dword_1EE2B3DE8)
    {
      v32 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("EndpointManager_RefKey"), a1);
    CFDictionarySetValue(Mutable, CFSTR("EndpointManager_TypeKey"), value);
    v17 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
    v18 = (const void *)*MEMORY[0x1E0CA39F0];
    v19 = 7;
    while (1)
    {
      v20 = CFDictionaryCreateMutable(v4, 0, v14, v15);
      CFDictionarySetValue(v20, CFSTR("Requestor_DiscoveryMode"), v18);
      CFArrayAppendValue(v17, v20);
      if (v20)
        CFRelease(v20);
      if (!--v19)
      {
        CFDictionarySetValue(Mutable, CFSTR("EndpointManager_RequestedDiscoveryModesKey"), v17);
        if (v17)
          CFRelease(v17);
        CFDictionarySetValue(Mutable, CFSTR("EndpointFeature_CurrentDiscoveryModeKey"), v18);
        *(_QWORD *)v35 = 0;
        v21 = FigEndpointManagerGetCMBaseObject();
        v22 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v22)
          v22(v21, v29, v4, v35);
        if (!FigCFEqual() && !FigCFEqual())
        {
          cf = 0;
          v23 = FigEndpointManagerGetCMBaseObject();
          v24 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v24)
            v24(v23, *MEMORY[0x1E0CA3A50], v4, &cf);
          FigCFNumberGetUInt64();
          if (cf)
            CFRelease(cf);
        }
        if (*(_QWORD *)v35)
          CFRelease(*(CFTypeRef *)v35);
        UInt64 = (const void *)FigCFNumberCreateUInt64();
        CFDictionarySetValue(Mutable, CFSTR("EndpointManager_SupportedEndpointFeaturesKey"), UInt64);
        if (UInt64)
          CFRelease(UInt64);
        *(_QWORD *)v35 = 0;
        v26 = FigEndpointManagerGetCMBaseObject();
        v27 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
        if (v27)
          v27(v26, *MEMORY[0x1E0CA3A48], v4, v35);
        FigCFNumberGetUInt64();
        if (*(_QWORD *)v35)
          CFRelease(*(CFTypeRef *)v35);
        v28 = (const void *)FigCFNumberCreateUInt64();
        CFDictionarySetValue(Mutable, CFSTR("EndpointManager_SupportedDiscoveryModesKey"), v28);
        if (v28)
          CFRelease(v28);
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = __discoveryManager_registerEndpointManager_block_invoke;
        v30[3] = &__block_descriptor_56_e5_v8__0l;
        v30[4] = value;
        v30[5] = v2;
        v30[6] = Mutable;
        FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v30);
      }
    }
  }
  if (dword_1EE2B3DE8)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_43:
  if (value)
    CFRelease(value);
}

uint64_t FigRouteDiscoveryManagerRegisterEndpointManager(CFTypeRef cf)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  __CFArray *Mutable;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  CFTypeRef cfa;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (discoverManager_getSharedManager_onceToken == -1)
  {
    if (cf)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
    if (cf)
    {
LABEL_3:
      v2 = qword_1EE2B3238;
      if (discoverManager_getSharedManager_discoveryState[0])
      {
        CFRetain(cf);
        cfa = 0;
        CMBaseObject = FigEndpointManagerGetCMBaseObject();
        v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
        if (v4)
          v4(CMBaseObject, *MEMORY[0x1E0CA3A40], *MEMORY[0x1E0C9AE00], &cfa);
        v7 = FigCFEqual();
        v8 = (uint64_t)&qword_1EE2B3238;
        if (!v2)
          v8 = 8;
        v9 = *(NSObject **)v8;
        if (v7)
        {
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 3221225472;
          v13[2] = __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke;
          v13[3] = &__block_descriptor_40_e5_v8__0l;
          v13[4] = cf;
          MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerRegisterEndpointManager", (uint64_t)"FigRouteDiscoveryManager.m", 2490, 0, 0, v9, (uint64_t)v13);
          CFRelease(cf);
        }
        else
        {
          v12[0] = MEMORY[0x1E0C809B0];
          v12[1] = 3221225472;
          v12[2] = __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke_2;
          v12[3] = &__block_descriptor_40_e5_v8__0l;
          v12[4] = cf;
          MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerRegisterEndpointManager", (uint64_t)"FigRouteDiscoveryManager.m", 2499, 0, 0, v9, (uint64_t)v12);
        }
        if (cfa)
          CFRelease(cfa);
      }
      else
      {
        if (qword_1EE2B3238)
          v5 = (uint64_t)&qword_1EE2B3338;
        else
          v5 = 264;
        Mutable = *(__CFArray **)v5;
        if (!*(_QWORD *)v5)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)v5 = Mutable;
        }
        CFArrayAppendValue(Mutable, cf);
      }
      return 0;
    }
  }
  v11 = MXGetAssertionLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v16 = "-FigRouteDiscoveryManager-";
    v17 = 2082;
    v18 = "FigRouteDiscoveryManagerRegisterEndpointManager";
    v19 = 1024;
    v20 = 2463;
    _os_log_impl(&dword_1935FC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
  }
  return 0;
}

void FigRouteDiscoveryManagerInit()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v1;
  NSObject *v2;

  if (dword_1EE2B3DE8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (dword_1EE2B3DE8)
  {
    v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3DE8)
    {
      v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  MXInstallSysdiagnoseBlock((uint64_t)CFSTR("DiscovererList"), (uint64_t)&__block_literal_global_0);
}

void FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed()
{
  char *v0;
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];

  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  v0 = &discoverManager_getSharedManager_discoveryState;
  v1 = (uint64_t)&qword_1EE2B3238;
  if (!qword_1EE2B3238)
  {
    v0 = 0;
    v1 = 8;
  }
  v2 = *(NSObject **)v1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = v0;
  MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed", (uint64_t)"FigRouteDiscoveryManager.m", 2556, 0, 0, v2, (uint64_t)v3);
}

void FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[5];

  v2 = MXGetSerialQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms_block_invoke;
  v3[3] = &unk_1E3098E18;
  v3[4] = a1;
  MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms", (uint64_t)"FigRouteDiscoveryManager.m", 2637, 0, 0, v2, (uint64_t)v3);
}

id __discoverManager_getSharedManager_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int IsAVODDiscoveryEnhancementEnabled;
  CFAllocatorRef *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  id result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1EE2B3DE8 < 0x100)
  {
    if (dword_1EE2B3DE8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    dword_1EE2B3DE8 = 0;
  }
  IsAVODDiscoveryEnhancementEnabled = MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled();
  v2 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (IsAVODDiscoveryEnhancementEnabled)
    qword_1EE2B3348 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  discoverManager_getSharedManager_discoveryState[0] = 0;
  qword_1EE2B3338 = 0;
  v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1EE2B3238 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.DiscoveryManagerSerializationQueue", v3);
  qword_1EE2B3358 = 0;
  unk_1EE2B3360 = 0;
  if (dword_1EE2B3DE8)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1EE2B3240 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.DiscoveryManagerNotificationQueue", v5);
  if (CMSMDeviceState_ItsAHomePod())
  {
    if (!dword_1EE2B3DE8)
      goto LABEL_15;
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    CMSMDeviceState_AddQueueToWatchDogMonitoring();
  }
  if (dword_1EE2B3DE8)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_15:
  v8 = *v2;
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v10 = 0;
  qword_1EE2B3320 = (uint64_t)CFArrayCreateMutable(*v2, 0, MEMORY[0x1E0C9B378]);
  v11 = (const void *)*MEMORY[0x1E0CA39F0];
  do
  {
    *(_QWORD *)&discoverManager_getSharedManager_discoveryState[v10 + 24] = CFArrayCreateMutable(v8, 0, v9);
    if (v11)
      v12 = CFRetain(v11);
    else
      v12 = 0;
    *(_QWORD *)&discoverManager_getSharedManager_discoveryState[v10 + 32] = v12;
    v10 += 24;
  }
  while (v10 != 216);
  qword_1EE2B3330 = FigSimpleMutexCreate();
  qword_1EE2B3328 = FigReentrantMutexCreate();
  qword_1EE2B3340 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D80]);
  result = objc_alloc_init(MEMORY[0x1E0CB3530]);
  qword_1EE2B3368 = (uint64_t)result;
  return result;
}

OpaqueFigEndpoint *__discoveryManager_iOSCopyAvailableEndpoints_block_invoke_2(uint64_t a1)
{
  OpaqueFigEndpoint *result;

  result = FigRoutingManagerCopyEndpointWithDeviceID(*(_QWORD *)(a1 + 40), 0, *MEMORY[0x1E0CA3A80], 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __discoveryManager_updateDiscoveryModeForType_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 8);
  if (v4)
    return v4(v1, v2, 0);
  return result;
}

void __discoveryManager_postNotificationToAllDiscoverers_block_invoke_39(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];

  if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 8);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke_2;
    v4[3] = &unk_1E3098E18;
    v4[4] = v2;
    MXDispatchAsyncAndWait((uint64_t)"discoveryManager_postNotificationToAllDiscoverers_block_invoke", (uint64_t)"FigRouteDiscoveryManager.m", 461, 0, 0, v3, (uint64_t)v4);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

void __discoveryManager_postNotificationToAllDiscoverers_block_invoke_2(uint64_t a1)
{
  FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms(*(_QWORD *)(a1 + 32));
}

void __discoveryManager_registerEndpointManager_block_invoke(uint64_t a1)
{
  int v2;
  __CFArray *v3;

  v2 = FigCFEqual();
  v3 = *(__CFArray **)(*(_QWORD *)(a1 + 40) + 240);
  if (v2)
    CFArrayInsertValueAtIndex(v3, 0, *(const void **)(a1 + 48));
  else
    CFArrayAppendValue(v3, *(const void **)(a1 + 48));
}

void figRouteDiscoveryManager_stopTimerForActivityMonitoring(int a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v10;
  const void *v11;
  void (*v12)(const void *, const __CFString *, uint64_t, CFTypeRef *);
  NSObject *v13;
  NSObject *v14;
  CFTypeRef cf[21];

  cf[19] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (discoverManager_getSharedManager_onceToken != -1)
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
  if (qword_1EE2B3238)
    v2 = (uint64_t)&unk_1EE2B3350;
  else
    v2 = 288;
  v3 = *(NSObject **)v2;
  if (*(_QWORD *)v2)
  {
    if (dword_1EE2B3DE8)
    {
      LODWORD(cf[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = *(NSObject **)v2;
    }
    dispatch_source_cancel(v3);
    if (*(_QWORD *)v2)
    {
      dispatch_release(*(dispatch_object_t *)v2);
      *(_QWORD *)v2 = 0;
    }
  }
  if (a1)
  {
    if (discoverManager_getSharedManager_onceToken != -1)
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_15);
    v5 = 0;
    if (qword_1EE2B3238)
      v6 = (uint64_t)&qword_1EE2B3348;
    else
      v6 = 280;
    v7 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      Count = *(const __CFArray **)v6;
      if (*(_QWORD *)v6)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (v5 >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v6, v5);
      v10 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v10)
      {
        v11 = (const void *)v10;
        cf[0] = 0;
        v12 = *(void (**)(const void *, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (v12)
          v12(v11, CFSTR("DiscoveryMode"), v7, cf);
        if (FigCFEqual())
        {
          if (dword_1EE2B3DE8)
          {
            v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRouteDiscovererSetDiscoveryModeNoneOnDiscoverer();
          FigRouteDiscoveryManagerUpdateDiscoveryMode();
        }
        if (cf[0])
          CFRelease(cf[0]);
        CFRelease(v11);
      }
      ++v5;
    }
  }
  else if (dword_1EE2B3DE8)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __figRouteDiscoveryManager_startTimerForActivityMonitoring_block_invoke()
{
  figRouteDiscoveryManager_stopTimerForActivityMonitoring(1);
}

uint64_t __figRouteDiscoveryManager_setDiscoveryModeDetailedOnCachedDiscoverers_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3DE8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void sub_193688AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMDeviceSilentModeClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMDeviceSilentMode");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getBMDeviceSilentModeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getBMDeviceSilentModeClass_block_invoke_cold_1();
    return (Class)BiomeLibraryLibrary();
  }
  return result;
}

uint64_t BiomeLibraryLibrary()
{
  uint64_t v0;
  void *v2;

  if (!BiomeLibraryLibraryCore_frameworkLibrary)
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = BiomeLibraryLibraryCore_frameworkLibrary;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

CFMutableDictionaryRef FigRoutingContextUtilities_CreateRouteConfigUpdatedFailedPayload(const __CFDictionary *a1, uint64_t a2, int a3, const __CFArray *a4)
{
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, uint64_t, const __CFAllocator *, void **);
  const void *v16;
  const void *v17;
  uint64_t v18;
  void *value;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (a4)
  {
    Count = CFArrayGetCount(a4);
    if (Count >= 1)
    {
      v11 = Count;
      v12 = 0;
      v13 = *MEMORY[0x1E0CA4258];
      do
      {
        value = 0;
        CFArrayGetValueAtIndex(a4, v12);
        CMBaseObject = FigEndpointGetCMBaseObject();
        v15 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v15)
          v15(CMBaseObject, v13, v7, &value);
        if (value)
        {
          CFArrayAppendValue(v9, value);
          if (value)
            CFRelease(value);
        }
        ++v12;
      }
      while (v11 != v12);
    }
  }
  if (a1)
  {
    v16 = CFDictionaryGetValue(a1, CFSTR("clientRouteRequestID"));
    if (v16)
    {
      v17 = CFRetain(v16);
      CFDictionaryGetValue(a1, CFSTR("initiator"));
      if (v17)
        goto LABEL_16;
    }
    else
    {
      CFDictionaryGetValue(a1, CFSTR("initiator"));
    }
  }
  v18 = MEMORY[0x194035214]();
  v17 = CFStringCreateWithFormat(v7, 0, CFSTR("%d"), v18);
LABEL_16:
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (a3 == -72276)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  if (v17)
    CFRelease(v17);
  if (v9)
    CFRelease(v9);
  return Mutable;
}

void FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict)
{
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("initiator"));
  if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a1, a2, CFSTR("configUpdateReasonEndedNoop"));
    FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, (uint64_t)CFSTR("currentRouteChanged"), 0);
  }
}

void FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, const __CFDictionary *a2, __CFString *a3)
{
  __CFArray *v5;
  CFMutableDictionaryRef RouteConfigUpdatedPayload;
  CFTypeRef cf;

  if (CFSTR("configUpdateReasonEndpointDescriptorChanged") == a3)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&cf);
    v5 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(a1, (uint64_t)v5);
    if (v5)
      CFRelease(v5);
  }
  RouteConfigUpdatedPayload = routingContextUtilities_createRouteConfigUpdatedPayload(a2);
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, (uint64_t)CFSTR("routeConfigUpdated"), (uint64_t)RouteConfigUpdatedPayload);
  if (RouteConfigUpdatedPayload)
    CFRelease(RouteConfigUpdatedPayload);
}

void FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[9];
  _QWORD v7[4];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
    {
      v7[0] = 0;
      v7[1] = v7;
      v7[2] = 0x2020000000;
      v7[3] = 0;
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers_block_invoke;
      v6[3] = &unk_1E30995C8;
      v6[4] = v7;
      v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v6[6] = a1;
      v6[7] = a2;
      v6[8] = a3;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers", (uint64_t)"FigRoutingManagerContextUtilities.m", 426, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
      _Block_object_dispose(v7, 8);
    }
  }
}

void sub_1936890FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 4294949876;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = v4;
  v9[6] = a1;
  v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 5279, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_193689220(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef routingContextUtilities_createRouteConfigUpdatedPayload(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  const void *Value;
  const void *v5;
  uint64_t v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1)
  {
    Value = CFDictionaryGetValue(a1, CFSTR("clientRouteRequestID"));
    if (Value)
    {
      v5 = CFRetain(Value);
      CFDictionaryGetValue(a1, CFSTR("initiator"));
      if (v5)
        goto LABEL_7;
    }
    else
    {
      CFDictionaryGetValue(a1, CFSTR("initiator"));
    }
  }
  v6 = MEMORY[0x194035214]();
  v5 = CFStringCreateWithFormat(v2, 0, CFSTR("%d"), v6);
LABEL_7:
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (v5)
    CFRelease(v5);
  return Mutable;
}

void FigRoutingManagerContextUtilities_PostNotificationAndRouteDescriptorChangeToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, (uint64_t)CFSTR("routeDescriptionEvent"), (uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void _routingContextUtilities_postNotificationToContextAndItsFollowers(uint64_t a1, const void *a2, const void *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;
  const void *v12;
  CFMutableDictionaryRef v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v21;
  _QWORD v22[9];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v18 = byte_1EE2B2EB0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v21 = FigCFWeakReferenceHolderCopyReferencedObject();
    v6 = *(const __CFArray **)(a1 + 88);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), i);
          if (ValueAtIndex)
          {
            if (_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
            {
              v11 = FigCFWeakReferenceHolderCopyReferencedObject();
              if (v11)
              {
                v12 = (const void *)v11;
                v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                FigCFDictionarySetValue();
                FigCFDictionarySetValue();
                CFArrayAppendValue(Mutable, v13);
                if (v13)
                  CFRelease(v13);
                CFRelease(v12);
              }
            }
          }
        }
      }
    }
    if (v21)
    {
      v14 = *(const void **)(a1 + 8);
      if (v14)
        v15 = CFRetain(v14);
      else
        v15 = 0;
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      if (Mutable)
        CFRetain(Mutable);
      v16 = (uint64_t)&qword_1EE2B2EA8;
      if (!v18)
        v16 = 512;
      v17 = *(NSObject **)v16;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = ___routingContextUtilities_postNotificationToContextAndItsFollowers_block_invoke;
      v22[3] = &__block_descriptor_72_e5_v8__0l;
      v22[4] = a2;
      v22[5] = v15;
      v22[6] = a3;
      v22[7] = v21;
      v22[8] = Mutable;
      MXDispatchAsync((uint64_t)"_routingContextUtilities_postNotificationToContextAndItsFollowers", (uint64_t)"FigRoutingManagerContextUtilities.m", 240, 0, 0, v17, (uint64_t)v22);
    }
    if (Mutable)
      CFRelease(Mutable);
  }
}

void FigRoutingManagerContextUtilities_Create(uint64_t a1, uint64_t a2)
{
  _QWORD v4[7];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
    {
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = __FigRoutingManagerContextUtilities_Create_block_invoke;
      v4[3] = &unk_1E30995F0;
      v4[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v4[6] = a1;
      v4[4] = a2;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_Create", (uint64_t)"FigRoutingManagerContextUtilities.m", 930, 0, 0, qword_1EE2B2EA0, (uint64_t)v4);
    }
  }
}

uint64_t FigRoutingContextUtilities_SetLeaderUUIDForContext(const void *a1, uint64_t a2, __CFString *a3)
{
  uint64_t v6;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v6 = 4294949876;
  if (a1 && a2 && byte_1EE2B2EB0)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingContextUtilities_SetLeaderUUIDForContext_block_invoke;
    v8[3] = &unk_1E3099618;
    v8[6] = a1;
    v8[7] = a2;
    v8[4] = &v13;
    v8[5] = &v9;
    v8[8] = &routingContextUtilities_getSharedContextUtilities_contextState;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_SetLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 1020, 0, 0, qword_1EE2B2EA0, (uint64_t)v8);
    if (a3)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a2, 0, a3);
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a2, (uint64_t)CFSTR("currentRouteChanged"), 0);
    }
    if ((const void *)qword_1EE2B2EC8 == a1)
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      routingContextUtilities_setRoutingContextDetailsForVolumeControl(v10[3], a1);
    }
    v6 = *((unsigned int *)v14 + 6);
    _Block_object_dispose(&v9, 8);
    _Block_object_dispose(&v13, 8);
  }
  return v6;
}

void sub_193689924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _routingContextUtilities_setLeaderUUIDForContext(void *a1, void *key)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  const UInt8 *ContextForUUIDFromDict;
  const UInt8 *v8;
  BOOL v9;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = (uint64_t)&qword_1EE2B2E88;
  else
    v4 = 480;
  CFDictionaryGetValue(*(CFDictionaryRef *)v4, key);
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFDictionaryGetValue(*(CFDictionaryRef *)v4, a1);
  v6 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, key);
  v8 = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, a1);
  if (v5)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v11 = (uint64_t)v8;
    if (_routingContextUtilities_getIndexOfFollower((uint64_t)ContextForUUIDFromDict, (uint64_t)v8) < 0)
      CFArrayAppendValue(*((CFMutableArrayRef *)ContextForUUIDFromDict + 11), v6);
    if (!v11)
    {
LABEL_25:
      CFRelease(v6);
      if (!v5)
        return v11;
      goto LABEL_13;
    }
    v12 = *(const __CFArray **)(v11 + 80);
    if (*(_DWORD *)v11 == 10)
    {
      _routingContextUtilities_pruneLeaders(v12);
    }
    else
    {
      Count = CFArrayGetCount(v12);
      if (Count)
      {
        if (Count != 1)
        {
LABEL_24:
          v11 = 0;
          goto LABEL_25;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v11 + 80), 0);
      }
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 80), v5);
    goto LABEL_24;
  }
  v11 = 4294949876;
  if (v6)
    goto LABEL_25;
  if (v5)
LABEL_13:
    CFRelease(v5);
  return v11;
}

void routingContextUtilities_setRoutingContextDetailsForVolumeControl(uint64_t a1, const void *a2)
{
  const void *v3;

  if (a1 && a2)
  {
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    FigVolumeControllerSaveRoutingContextState(a2);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t FigRoutingContextUtilities_SetLeaderToSystemAudioContext(const void *a1, __CFString *a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    return FigRoutingContextUtilities_SetLeaderUUIDForContext(a1, qword_1EE2B2EB8, a2);
  else
    return 4294949876;
}

uint64_t FigRoutingContextUtilities_UnfollowUUIDFromLeader(const void *a1, __CFString *a2)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingContextUtilities_UnfollowUUIDFromLeader_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[7] = a1;
    v6[4] = &v7;
    v6[5] = &v11;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_UnfollowUUIDFromLeader", (uint64_t)"FigRoutingManagerContextUtilities.m", 1071, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    if (a2)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, 0, a2);
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, (uint64_t)CFSTR("currentRouteChanged"), 0);
    }
    if ((const void *)qword_1EE2B2EC8 == a1)
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      routingContextUtilities_setRoutingContextDetailsForVolumeControl(v8[3], a1);
    }
    v4 = *((unsigned int *)v12 + 6);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
  }
  return v4;
}

void sub_193689D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _routingContextUtilities_getIndexOfFollower(uint64_t a1, uint64_t a2)
{
  CFIndex v2;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;

  v2 = -1;
  if (a1)
  {
    if (a2)
    {
      v4 = *(const __CFArray **)(a1 + 88);
      if (v4)
      {
        Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          v6 = Count;
          v2 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v2);
            if (_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
            {
              if (FigCFEqual())
                break;
            }
            if (v6 == ++v2)
              return -1;
          }
        }
      }
    }
  }
  return v2;
}

void _routingContextUtilities_removeLeader(uint64_t a1)
{
  const __CFArray *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    v2 = *(const __CFArray **)(a1 + 80);
    if (v2 && CFArrayGetCount(v2) == 1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), 0);
    }
    else if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_AddContext(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  __CFString *FeatureString;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  _QWORD v12[11];
  int v13;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  result = 4294949876;
  if (a2 && a1 && byte_1EE2B2EB0)
  {
    FeatureString = routingContextUtilities_getFeatureString(a3);
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 216);
    CFDataSetLength(Mutable, 216);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __FigRoutingManagerContextUtilities_AddContext_block_invoke;
    v12[3] = &__block_descriptor_92_e5_v8__0l;
    v12[4] = a1;
    v12[5] = FeatureString;
    v12[6] = a4;
    v12[7] = MutableBytePtr;
    v13 = a3;
    v12[8] = a2;
    v12[9] = Mutable;
    v12[10] = &routingContextUtilities_getSharedContextUtilities_contextState;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 1169, 0, 0, qword_1EE2B2EA0, (uint64_t)v12);
    if (Mutable)
      CFRelease(Mutable);
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  _QWORD v15[9];
  os_log_type_t type;
  int v17;
  CFTypeRef cf;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v6 = 0;
  result = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    cf = 0;
    v19 = 0;
    if (a2)
    {
      v8 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v10)
        v10(CMBaseObject, *MEMORY[0x1E0CA4258], v8, &v19);
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v12)
        v12(v11, *MEMORY[0x1E0CA4348], v8, &cf);
    }
    if (dword_1EE2B3E28)
    {
      v17 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    v20 = 0;
    v21 = &v20;
    v22 = 0x2020000000;
    v23 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo_block_invoke;
    v15[3] = &unk_1E30995C8;
    v15[6] = a1;
    v15[7] = a2;
    v15[4] = &v20;
    v15[5] = v6;
    v15[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 1345, 0, 0, qword_1EE2B2EA0, (uint64_t)v15);
    v14 = (const void *)v21[3];
    if (v14)
      CFRelease(v14);
    _Block_object_dispose(&v20, 8);
    return 0;
  }
  return result;
}

void sub_19368A8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v19;
  uint64_t VTable;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v27;
  _QWORD v29[11];
  char v30;
  char v31;
  os_log_type_t type;
  int v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef cf;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v9 = &routingContextUtilities_getSharedContextUtilities_contextState;
  if (!byte_1EE2B2EB0)
    v9 = 0;
  v27 = v9;
  v10 = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    v36 = 0;
    cf = 0;
    v34 = 0;
    v35 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0CA4258];
    v12 = (_QWORD *)MEMORY[0x1E0C9AE00];
    v13 = (_QWORD *)MEMORY[0x1E0CA4348];
    if (a2)
    {
      v14 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v16)
        v16(CMBaseObject, *v11, v14, &cf);
      v17 = FigEndpointGetCMBaseObject();
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v18)
        v18(v17, *v13, v14, &v36);
    }
    if (a3)
    {
      v19 = FigEndpointGetCMBaseObject();
      VTable = CMBaseObjectGetVTable();
      v21 = *v12;
      v22 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(VTable + 8) + 48);
      if (v22)
        v22(v19, *v11, *v12, &v35);
      v23 = FigEndpointGetCMBaseObject();
      v24 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v24)
        v24(v23, *v13, v21, &v34);
    }
    if (dword_1EE2B3E28)
    {
      v33 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    if (v35)
    {
      CFRelease(v35);
      v35 = 0;
    }
    if (v34)
    {
      CFRelease(v34);
      v34 = 0;
    }
    LOBYTE(v38) = 0;
    LOBYTE(v33) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v39 = 0;
    v40 = &v39;
    v41 = 0x2020000000;
    v42 = 0;
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo_block_invoke;
    v29[3] = &unk_1E30996B0;
    v29[4] = &v39;
    v29[5] = v27;
    v29[6] = a1;
    v29[7] = a2;
    v30 = v38;
    v31 = 0;
    v29[8] = a3;
    v29[9] = a5;
    v29[10] = a4;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 1438, 0, 0, qword_1EE2B2EA0, (uint64_t)v29);
    v10 = *((unsigned int *)v40 + 6);
    _Block_object_dispose(&v39, 8);
  }
  return v10;
}

void sub_19368AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void _routingContextUtilities_postRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(void *a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef RouteConfigUpdatedPayload;
  const UInt8 *ContextForUUIDFromDict;

  RouteConfigUpdatedPayload = routingContextUtilities_createRouteConfigUpdatedPayload(a2);
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
    {
      ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict((CFDictionaryRef)qword_1EE2B2E88, a1);
      _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)ContextForUUIDFromDict, CFSTR("routeConfigUpdated"), RouteConfigUpdatedPayload);
    }
  }
  if (RouteConfigUpdatedPayload)
    CFRelease(RouteConfigUpdatedPayload);
}

uint64_t FigRoutingManagerContextUtilities_SaveCommChannelUUID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_SaveCommChannelUUID_block_invoke;
    v6[3] = &unk_1E3099668;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[6] = a1;
    v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SaveCommChannelUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 1543, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_19368B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v19[11];
  os_log_type_t type;
  int v21;
  CFTypeRef cf;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v10 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v10 = 0;
  v11 = 4294949876;
  if (a2 && byte_1EE2B2EB0)
  {
    cf = 0;
    v23 = 0;
    if (a3)
    {
      v12 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v14)
        v14(CMBaseObject, *MEMORY[0x1E0CA4258], v12, &v23);
      v15 = FigEndpointGetCMBaseObject();
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v16)
        v16(v15, *MEMORY[0x1E0CA4348], v12, &cf);
    }
    if (dword_1EE2B3E28)
    {
      v21 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v23)
    {
      CFRelease(v23);
      v23 = 0;
    }
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint_block_invoke;
    v19[3] = &unk_1E30996D8;
    v19[4] = &v24;
    v19[5] = v10;
    v19[6] = a2;
    v19[7] = a3;
    v19[8] = a1;
    v19[9] = a4;
    v19[10] = a5;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 1584, 0, 0, qword_1EE2B2EA0, (uint64_t)v19);
    v11 = *((unsigned int *)v25 + 6);
    _Block_object_dispose(&v24, 8);
  }
  return v11;
}

void sub_19368B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void _routingContextUtilities_checkActivationTimeout(uint64_t a1, const void *a2)
{
  __objc2_meth_list **p_inst_meths;
  int64_t Count;
  const void **v5;
  uint64_t v6;
  const UInt8 *ContextForUUIDFromDict;
  const void *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const void **v16;
  int64_t v17;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
  {
    p_inst_meths = &OBJC_PROTOCOL___APSubjectMonitor.inst_meths;
    Count = CFDictionaryGetCount((CFDictionaryRef)qword_1EE2B2E88);
    v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1EE2B2E88, v5, 0);
    if (Count >= 1)
    {
      v6 = 0;
      v16 = v5;
      v17 = Count;
      do
      {
        ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict((CFDictionaryRef)p_inst_meths[465], (void *)v5[v6]);
        v8 = (const void *)*((_QWORD *)ContextForUUIDFromDict + 14);
        if (v8)
        {
          v9 = (const __CFArray *)CFRetain(v8);
          if (v9)
          {
            v10 = v9;
            v11 = CFArrayGetCount(v9);
            if (v11 >= 1)
            {
              v12 = v11;
              for (i = 0; i != v12; ++i)
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, i);
                if (CFDictionaryGetValue(ValueAtIndex, CFSTR("CurrentlyActivatingEndpointsInfo_Endpoint")) == a2)
                {
                  Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions"));
                  if (Value)
                    CFDictionaryGetValue(Value, CFSTR("clientRouteRequestID"));
                  if (FigCFEqual())
                  {
                    if (*((_DWORD *)ContextForUUIDFromDict + 14))
                      off_1EE2B2E90(*((_QWORD *)ContextForUUIDFromDict + 1), a2);
                  }
                }
              }
            }
            CFRelease(v10);
            p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___APSubjectMonitor + 24);
            v5 = v16;
            Count = v17;
          }
        }
        ++v6;
      }
      while (v6 != Count);
    }
    free(v5);
  }
}

uint64_t FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v15;
  _QWORD v17[9];
  os_log_type_t type;
  int v19;
  CFTypeRef v20;
  CFTypeRef cf;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v7 = 0;
  v8 = 4294949876;
  if (a2 && byte_1EE2B2EB0)
  {
    v20 = 0;
    cf = 0;
    if (a3)
    {
      v9 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v11)
        v11(CMBaseObject, *MEMORY[0x1E0CA4258], v9, &cf);
      v12 = FigEndpointGetCMBaseObject();
      v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v13)
        v13(v12, *MEMORY[0x1E0CA4348], v9, &v20);
    }
    if (dword_1EE2B3E28)
    {
      v19 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v20)
    {
      CFRelease(v20);
      v20 = 0;
      v15 = cf;
    }
    else
    {
      v15 = 0;
    }
    v22 = 0;
    v23 = &v22;
    v24 = 0x2020000000;
    v25 = 0;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint_block_invoke;
    v17[3] = &unk_1E30995C8;
    v17[4] = &v22;
    v17[5] = v7;
    v17[6] = a2;
    v17[7] = a4;
    v17[8] = v15;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 1687, 0, 0, qword_1EE2B2EA0, (uint64_t)v17);
    v8 = *((unsigned int *)v23 + 6);
    _Block_object_dispose(&v22, 8);
  }
  return v8;
}

void sub_19368BDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void _routingContextUtilities_removeCurrentlyActivatingEndpointWithID(void *key, const __CFString *a2)
{
  uint64_t v4;
  const UInt8 *ContextForUUIDFromDict;
  const UInt8 *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  const __CFDictionary *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, uint64_t, uint64_t, CFStringRef *);
  CFStringRef v16;
  CFStringRef prefix;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = (uint64_t)&qword_1EE2B2E88;
  if (!byte_1EE2B2EB0)
    v4 = 480;
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, key);
  if (ContextForUUIDFromDict)
  {
    v6 = ContextForUUIDFromDict;
    v7 = (const __CFArray *)*((_QWORD *)ContextForUUIDFromDict + 14);
    if (v7)
    {
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v9 = Count;
        v10 = 0;
        v11 = *MEMORY[0x1E0CA4258];
        v12 = *MEMORY[0x1E0C9AE00];
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 14), v10);
          if (CFDictionaryGetValue(ValueAtIndex, CFSTR("CurrentlyActivatingEndpointsInfo_Endpoint")))
          {
            prefix = 0;
            CMBaseObject = FigEndpointGetCMBaseObject();
            v15 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
            if (v15)
              v15(CMBaseObject, v11, v12, &prefix);
            v16 = prefix;
            if (a2 && prefix)
            {
              if (CFStringHasPrefix(a2, prefix) && !FigCFEqual())
              {
                CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v6 + 14), v10);
                if (prefix)
                  CFRelease(prefix);
                return;
              }
              v16 = prefix;
            }
            if (v16)
              CFRelease(v16);
          }
          ++v10;
        }
        while (v9 != v10);
      }
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  __CFArray *Mutable;
  uint64_t v11;

  if (!a3)
    return 4294949876;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, a3);
  v11 = FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints(a1, a2, Mutable, a4, a5);
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v15;
  uint64_t VTable;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFIndex i;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD v35[11];
  os_log_type_t type;
  int v37;
  CFTypeRef v38;
  CFTypeRef cf;
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v6 = a2;
  v46 = *MEMORY[0x1E0C80C00];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
  {
    v26 = a5;
    v28 = a4;
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    a4 = v28;
    v6 = a2;
    a5 = v26;
  }
  if (byte_1EE2B2EB0)
    v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v7 = 0;
  v8 = 4294949876;
  if (a1 && v6 && byte_1EE2B2EB0)
  {
    v29 = v7;
    v30 = a4;
    v31 = a5;
    v40 = 0;
    v41 = 0;
    if (theArray)
    {
      v9 = v6;
      Count = CFArrayGetCount(theArray);
      v6 = v9;
      v11 = Count;
    }
    else
    {
      v11 = 0;
    }
    v34 = *MEMORY[0x1E0CA4258];
    v12 = *MEMORY[0x1E0C9AE00];
    v32 = v6;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
      v14(CMBaseObject, v34, v12, &v41);
    v15 = FigEndpointGetCMBaseObject();
    VTable = CMBaseObjectGetVTable();
    v17 = *MEMORY[0x1E0CA4348];
    v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(VTable + 8) + 48);
    if (v18)
      v18(v15, *MEMORY[0x1E0CA4348], v12, &v40);
    if (v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v38 = 0;
        cf = 0;
        CFArrayGetValueAtIndex(theArray, i);
        v20 = FigEndpointGetCMBaseObject();
        v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v21)
          v21(v20, v34, v12, &cf);
        v22 = FigEndpointGetCMBaseObject();
        v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v23)
          v23(v22, v17, v12, &v38);
        if (dword_1EE2B3E28)
        {
          v37 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v38)
          CFRelease(v38);
      }
    }
    if (v41)
    {
      CFRelease(v41);
      v41 = 0;
    }
    if (v40)
    {
      CFRelease(v40);
      v40 = 0;
    }
    v42 = 0;
    v43 = &v42;
    v44 = 0x2020000000;
    v45 = 0;
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints_block_invoke;
    v35[3] = &unk_1E30996D8;
    v35[4] = &v42;
    v35[5] = v29;
    v35[6] = a1;
    v35[7] = v30;
    v35[8] = theArray;
    v35[9] = v31;
    v35[10] = v32;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 1754, 0, 0, qword_1EE2B2EA0, (uint64_t)v35);
    FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed();
    v8 = *((unsigned int *)v43 + 6);
    _Block_object_dispose(&v42, 8);
  }
  return v8;
}

void sub_19368C500(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef *v8;
  __CFArray *Mutable;
  int v10;
  CFMutableArrayRef v11;
  const __CFArray *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  __CFArray *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x1E0C80C00];
  v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(Mutable, a2);
  }
  else
  {
    Mutable = 0;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v10 = byte_1EE2B2EB0;
    v11 = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E0C9B378]);
    v12 = v11;
    if (a1 && a2)
    {
      v13 = &routingContextUtilities_getSharedContextUtilities_contextState;
      v14 = (uint64_t)&qword_1EE2B2EA0;
      if (!v10)
        v14 = 504;
      v15 = *(NSObject **)v14;
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      if (!v10)
        v13 = 0;
      v19[2] = __routingContextUtilities_copyIndividualEndpointsFromAggregate_block_invoke;
      v19[3] = &__block_descriptor_56_e5_v8__0l;
      v19[4] = a2;
      v19[5] = v13;
      v19[6] = v11;
      MXDispatchSync((uint64_t)"routingContextUtilities_copyIndividualEndpointsFromAggregate", (uint64_t)"FigRoutingManagerContextUtilities.m", 2922, 0, 0, v15, (uint64_t)v19);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v12, 0);
    if (v12)
      CFRelease(v12);
  }
  else
  {
    v16 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
  }
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, Mutable, a3, a4, (uint64_t)v16);
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_SetPickedEndpoints(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int ContextType;
  int v9;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  CFMutableArrayRef v13;
  CFMutableArrayRef v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD v23[12];
  os_log_type_t type;
  int v25;
  uint64_t valuePtr;
  uint64_t *p_valuePtr;
  uint64_t v28;
  uint64_t v29;
  CFNumberRef number;
  CFNumberRef *p_number;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (a2)
  {
    v9 = ContextType;
    if (CFArrayGetCount(a2) >= 1 && v9 == 2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        LODWORD(valuePtr) = 0;
        number = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v12 = *(void (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (v12)
        {
          v12(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], &number);
          if (number)
          {
            CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
            if (number)
              CFRelease(number);
          }
        }
        if ((_DWORD)valuePtr != 1885433971)
          a2 = 0;
      }
    }
  }
  v13 = routingContextUtilities_copyEndpointIDs(a2);
  v14 = routingContextUtilities_copyEndpointNames(a2);
  if (dword_1EE2B3E28)
  {
    v25 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v16 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v16 = 0;
  number = 0;
  p_number = &number;
  v32 = 0x2020000000;
  v33 = 0;
  valuePtr = 0;
  p_valuePtr = &valuePtr;
  v28 = 0x2020000000;
  v29 = 0;
  v17 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v17 = 504;
  v18 = *(NSObject **)v17;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __FigRoutingManagerContextUtilities_SetPickedEndpoints_block_invoke;
  v23[3] = &unk_1E3099700;
  v23[6] = v16;
  v23[7] = a1;
  v23[4] = &valuePtr;
  v23[5] = &number;
  v23[8] = a5;
  v23[9] = a2;
  v23[10] = a4;
  v23[11] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetPickedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2118, 0, 0, v18, (uint64_t)v23);
  routingContextUtilities_setRoutingContextDetailsForVolumeControl(p_valuePtr[3], a1);
  CMSMUtility_InformAirPlayOfAudioModeIfNecessary((uint64_t)a1);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  v19 = *((unsigned int *)p_number + 6);
  _Block_object_dispose(&valuePtr, 8);
  _Block_object_dispose(&number, 8);
  return v19;
}

void sub_19368CD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Unwind_Resume(exception_object);
}

uint64_t FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFStringRef *);
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFString *ValueAtIndex;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v21;
  CFStringRef prefix;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  v5 = 0;
  if (!a2 || !Count)
    return v5;
  if (FigCFArrayContainsValue())
    return 1;
  prefix = 0;
  v6 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8 || (v8(CMBaseObject, *MEMORY[0x1E0CA4258], v6, &prefix), !prefix))
  {
    v21 = 0;
    v15 = FigEndpointGetCMBaseObject();
    v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v16)
      v16(v15, *MEMORY[0x1E0CA4348], v6, &v21);
    cf = 0;
    v17 = FigEndpointGetCMBaseObject();
    v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v18)
    {
      v18(v17, *MEMORY[0x1E0CA4468], v6, &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    if (v21)
      CFRelease(v21);
    return 0;
  }
  v9 = routingContextUtilities_copyEndpointIDs(a1);
  v10 = v9;
  if (v9 && (v11 = CFArrayGetCount(v9), v11 >= 1))
  {
    v12 = v11;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v13);
      if (CFStringHasPrefix(ValueAtIndex, prefix))
        break;
      if (v12 == ++v13)
        goto LABEL_13;
    }
    v5 = 1;
  }
  else
  {
LABEL_13:
    v5 = 0;
  }
  if (prefix)
  {
    CFRelease(prefix);
    prefix = 0;
  }
  if (v10)
    CFRelease(v10);
  return v5;
}

CFMutableArrayRef routingContextUtilities_copyEndpointIDs(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  __CFArray *Mutable;
  CFIndex v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, uint64_t, uint64_t, void **);
  void *value;

  if (!a1)
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Count = CFArrayGetCount(a1);
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    v5 = 0;
    v6 = *MEMORY[0x1E0CA4258];
    do
    {
      CFArrayGetValueAtIndex(a1, v5);
      value = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v8)
        v8(CMBaseObject, v6, v3, &value);
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        if (value)
          CFRelease(value);
      }
      ++v5;
    }
    while (Count != v5);
  }
  return Mutable;
}

void FigRoutingContextUtilities_LogRouteDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  __CFString *Mutable;
  CFIndex v5;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFIndex v9;
  CFIndex j;
  const __CFDictionary *v11;
  const void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Updating from old route descriptors: "));
  v5 = 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v5 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
    if (ValueAtIndex)
    {
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteName"));
      CFStringAppendFormat(Mutable, 0, CFSTR("Endpoint[%ld]: %@"), v5, Value);
    }
    ++v5;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" to new route descriptors: "));
  v9 = 0;
  if (!a2)
    goto LABEL_11;
LABEL_10:
  for (j = CFArrayGetCount(a2); v9 < j; j = 0)
  {
    v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v9);
    if (v11)
    {
      v12 = CFDictionaryGetValue(v11, CFSTR("RouteName"));
      CFStringAppendFormat(Mutable, 0, CFSTR("Endpoint[%ld]: %@"), v9, v12);
    }
    ++v9;
    if (a2)
      goto LABEL_10;
LABEL_11:
    ;
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable)
    CFRelease(Mutable);
}

void _routingContextUtilities_notifyClientsOfChangeInPickedEndpoints(int a1, uint64_t a2, int a3, void *key)
{
  uint64_t v6;
  const UInt8 *ContextForUUIDFromDict;
  const UInt8 *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v6 = (uint64_t)&qword_1EE2B2E88;
  if (!byte_1EE2B2EB0)
    v6 = 480;
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v6, key);
  if (ContextForUUIDFromDict)
  {
    v8 = ContextForUUIDFromDict;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    if ((*(_DWORD *)v8 | 4) == 6)
      CMSMNotificationUtility_PostExternalScreenDidChange();
    _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)v8, CFSTR("currentRouteChanged"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
    v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (a2)
      _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)v8, CFSTR("routeConfigUpdated"), v11);
    if (v11)
      CFRelease(v11);
  }
}

uint64_t FigRoutingManagerContextUtilities_AddActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const void *SInt64;
  const void *v14;
  _QWORD v16[11];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  CFTypeRef v21;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v7 = 0;
  v8 = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    v9 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(CMBaseObject, *MEMORY[0x1E0CA4460], v9, &v21);
    FigCFDictionarySetValue();
    if (v21)
    {
      CFRelease(v21);
      v21 = 0;
    }
    FigCFDictionarySetValue();
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    FigCFDictionarySetValue();
    v14 = (const void *)FigCFNumberCreateSInt64();
    FigCFDictionarySetValue();
    if (v14)
      CFRelease(v14);
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __FigRoutingManagerContextUtilities_AddActivatedEndpoint_block_invoke;
    v16[3] = &unk_1E30996D8;
    v16[4] = &v17;
    v16[5] = v7;
    v16[6] = a1;
    v16[7] = Mutable;
    v16[8] = a2;
    v16[9] = a4;
    v16[10] = SInt64;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 2292, 0, 0, qword_1EE2B2EA0, (uint64_t)v16);
    if (Mutable)
      CFRelease(Mutable);
    if (SInt64)
      CFRelease(SInt64);
    v8 = *((unsigned int *)v18 + 6);
    _Block_object_dispose(&v17, 8);
  }
  return v8;
}

void sub_19368DAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v6 = 4294949876;
  if (a2 && a1 && byte_1EE2B2EB0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingManagerContextUtilities_RemoveActivatedEndpoint_block_invoke;
    v8[3] = &unk_1E30995C8;
    v8[4] = &v9;
    v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v8[6] = a1;
    v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 2368, 0, 0, qword_1EE2B2EA0, (uint64_t)v8);
    v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_19368DD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetPickingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a2 && a1 && byte_1EE2B2EB0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_GetPickingState_block_invoke;
    v6[3] = &unk_1E3099668;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[6] = a1;
    v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetPickingState", (uint64_t)"FigRoutingManagerContextUtilities.m", 2424, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_19368DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetPickingState(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a1 && byte_1EE2B2EB0)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_SetPickingState_block_invoke;
    v6[3] = &unk_1E3099728;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[6] = a1;
    v6[4] = &v8;
    v7 = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetPickingState", (uint64_t)"FigRoutingManagerContextUtilities.m", 2495, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    v4 = *((unsigned int *)v9 + 6);
    _Block_object_dispose(&v8, 8);
  }
  return v4;
}

void sub_19368E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a2 && a1 && byte_1EE2B2EB0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext_block_invoke;
    v6[3] = &unk_1E3099668;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[6] = a1;
    v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 2524, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_19368E240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyAllAudioContexts(CFMutableArrayRef *a1)
{
  CFMutableArrayRef Mutable;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  _QWORD v7[6];

  if (!a1)
    return 4294949876;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v3 = 0;
  v4 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v4 = 504;
  v5 = *(NSObject **)v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __FigRoutingManagerContextUtilities_CopyAllAudioContexts_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = v3;
  v7[5] = Mutable;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAllAudioContexts", (uint64_t)"FigRoutingManagerContextUtilities.m", 2671, 0, 0, v5, (uint64_t)v7);
  result = 0;
  *a1 = Mutable;
  return result;
}

uint64_t FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalAirPlayEndpoint(uint64_t a1)
{
  const void *ValueAtIndex;
  _BOOL8 IsEndpointLocal;
  CFArrayRef theArray;

  if (!a1)
    return 1;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray) == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    IsEndpointLocal = FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex);
  }
  else
  {
    IsEndpointLocal = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return IsEndpointLocal;
}

uint64_t FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(uint64_t a1)
{
  const void *ValueAtIndex;
  _BOOL8 v2;
  CFArrayRef theArray;

  if (!a1)
    return 1;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray)
    return 0;
  v2 = CFArrayGetCount(theArray) == 1
    && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
        FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
    && FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex) != 0;
  if (theArray)
    CFRelease(theArray);
  return v2;
}

BOOL FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair(uint64_t a1)
{
  const void *ValueAtIndex;
  _BOOL8 v2;
  CFArrayRef theArray;

  if (!a1)
    return 0;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray)
    return 0;
  v2 = CFArrayGetCount(theArray) == 1
    && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex))
    && FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex) != 0;
  if (theArray)
    CFRelease(theArray);
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v4 = 4294949876;
  if (a2 && a1 && byte_1EE2B2EB0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl_block_invoke;
    v6[3] = &unk_1E3099668;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v6[6] = a1;
    v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl", (uint64_t)"FigRoutingManagerContextUtilities.m", 3091, 0, 0, qword_1EE2B2EA0, (uint64_t)v6);
    v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_19368E6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v6 = 4294949876;
  if (a1 && a3 && a2 && byte_1EE2B2EB0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures_block_invoke;
    v8[3] = &unk_1E30995C8;
    v8[4] = &v9;
    v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v8[6] = a1;
    v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures", (uint64_t)"FigRoutingManagerContextUtilities.m", 3134, 0, 0, qword_1EE2B2EA0, (uint64_t)v8);
    v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_19368E8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v6 = 4294949876;
  if (a1 && a3 && a2 && byte_1EE2B2EB0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint_block_invoke;
    v8[3] = &unk_1E30995C8;
    v8[4] = &v9;
    v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    v8[6] = a1;
    v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 3212, 0, 0, qword_1EE2B2EA0, (uint64_t)v8);
    v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_19368EBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v3 = 4294949876;
  if (a1 && a3)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v7 = 0;
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    v8 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v8 = 504;
    v9 = *(NSObject **)v8;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex_block_invoke;
    v11[3] = &unk_1E30995C8;
    v11[4] = &v12;
    v11[5] = v7;
    v11[6] = a1;
    v11[7] = a2;
    v11[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 3288, 0, 0, v9, (uint64_t)v11);
    v3 = *((unsigned int *)v13 + 6);
    _Block_object_dispose(&v12, 8);
  }
  return v3;
}

void sub_19368EEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = v4;
  v9[6] = a1;
  v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 3321, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_19368F04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3352, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19368F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v6;
  CFArrayRef theArray;

  v2 = 4294949876;
  if (a1 && a2)
  {
    theArray = 0;
    v2 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(a1, (uint64_t)&theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1 && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1)) != 0)
        v6 = CFRetain(ValueAtIndex);
      else
        v6 = 0;
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      v6 = 0;
    }
    *a2 = v6;
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v6;
  CFArrayRef theArray;

  v2 = 4294949876;
  if (a1 && a2)
  {
    theArray = 0;
    v2 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo(a1, (uint64_t)&theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1 && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1)) != 0)
        v6 = CFRetain(ValueAtIndex);
      else
        v6 = 0;
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      v6 = 0;
    }
    *a2 = v6;
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3502, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19368F490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(int a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef cf;

  if (a1 == 2)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
  else
  {
    if (a1 != 1)
      return 0;
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  }
  v3 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)cf, a2);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v3 = 4294949876;
  if (a1 && a3)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v7 = 0;
    v8 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v8 = 504;
    v9 = *(NSObject **)v8;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints_block_invoke;
    v11[3] = &unk_1E30995C8;
    v11[4] = &v12;
    v11[5] = v7;
    v11[6] = a1;
    v11[7] = a2;
    v11[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3529, 0, 0, v9, (uint64_t)v11);
    v3 = *((unsigned int *)v13 + 6);
    _Block_object_dispose(&v12, 8);
  }
  return v3;
}

void sub_19368F690(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3609, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_19368F888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(int a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef cf;

  if (!a2)
    return 4294954296;
  if (a1 == 2)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
  else
  {
    if (a1 != 1)
      return 0;
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  }
  v3 = FigRoutingManagerContextUtilities_CopyActivatedEndpoints((uint64_t)cf, a2);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[8];

  if (!a3)
    return 4294954296;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v6 = 0;
  v7 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v7 = 504;
  v8 = *(NSObject **)v7;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = v6;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 3668, 0, 0, v8, (uint64_t)v10);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_RemoveContext(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[8];
  _QWORD v11[10];
  os_log_type_t type[8];
  os_log_type_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294949876;
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  LOBYTE(v23) = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  *(_QWORD *)type = 0;
  v13 = type;
  v14 = 0x2020000000;
  v15 = 0;
  if (byte_1EE2B2EB0)
    v5 = (uint64_t)&qword_1EE2B2EA0;
  else
    v5 = 504;
  v6 = *(NSObject **)v5;
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerContextUtilities_RemoveContext_block_invoke;
  v11[3] = &unk_1E3099750;
  v11[8] = v4;
  v11[9] = a1;
  v11[4] = &v16;
  v11[5] = &v24;
  v11[6] = type;
  v11[7] = &v20;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 3843, 0, 0, v6, (uint64_t)v11);
  if (*((_BYTE *)v21 + 24))
    FigVolumeControllerSaveRoutingContextState(a1);
  if (v17[3])
  {
    v8 = *(NSObject **)v5;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = __FigRoutingManagerContextUtilities_RemoveContext_block_invoke_2;
    v10[3] = &unk_1E3099640;
    v10[4] = &v16;
    v10[5] = type;
    v10[6] = v4;
    v10[7] = a1;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 3932, 0, 0, v8, (uint64_t)v10);
  }
  v3 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  return v3;
}

void sub_19368FF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Unwind_Resume(exception_object);
}

uint64_t FigRoutingManagerContextUtilities_CopyHijackID(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  int v12;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    v12 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopyHijackID_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyHijackID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4016, 0, 0, v4, (uint64_t)v6);
    v1 = v8[3];
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_1936905FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetAggregateEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_SetAggregateEndpoint_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetAggregateEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 4044, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_193690788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate", (uint64_t)"FigRoutingManagerContextUtilities.m", 4072, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_193690A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyFigEndpointFromAggregateEndpointForClientUse(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, uint64_t);
  uint64_t v6;
  CFTypeRef cf;

  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
    return FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, a2);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
  if (!cf)
    return 4294950571;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v6 = v5(CMBaseObject, CFSTR("remoteEndpoint"), *MEMORY[0x1E0C9AE00], a2);
  else
    v6 = 4294954514;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 4128, 0, 0, v7, (uint64_t)v9);
    v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_193690C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyNonControlPickedContexts(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (!a1)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v2 = 0;
  v3 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v3 = 504;
  v4 = *(NSObject **)v3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __FigRoutingManagerContextUtilities_CopyNonControlPickedContexts_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = v2;
  v6[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyNonControlPickedContexts", (uint64_t)"FigRoutingManagerContextUtilities.m", 4185, 0, 0, v4, (uint64_t)v6);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v2 = 0;
  v3 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v3 = 504;
  v4 = *(NSObject **)v3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = v2;
  v6[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4495, 0, 0, v4, (uint64_t)v6);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4595, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySidePlayContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySidePlayContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySidePlayContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4610, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4625, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemVideoContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemVideoContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemVideoContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4651, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4664, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyAudioContextUUIDs(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopyAudioContextUUIDs_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAudioContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4677, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4690, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 4294949876;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v4 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = v4;
  v9[6] = a1;
  v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4763, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_193691A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSidePlay(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  int v12;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    v12 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_IsContextSidePlay_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSidePlay", (uint64_t)"FigRoutingManagerContextUtilities.m", 4944, 0, 0, v4, (uint64_t)v6);
    v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_193691C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemAudio(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  int v12;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    v12 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_IsContextSystemAudio_block_invoke;
    v6[3] = &unk_1E3099640;
    v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemAudio", (uint64_t)"FigRoutingManagerContextUtilities.m", 5006, 0, 0, v4, (uint64_t)v6);
    v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_193691DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  int v13;

  v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v2 = byte_1EE2B2EB0;
    if (byte_1EE2B2EB0)
      v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v3 = 0;
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2020000000;
    v13 = 0;
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
    {
      v4 = (uint64_t)&qword_1EE2B2EA0;
      if (!v2)
        v4 = 504;
      v5 = *(NSObject **)v4;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay_block_invoke;
      v7[3] = &unk_1E3099640;
      v7[6] = v3;
      v7[7] = v1;
      v7[4] = v12;
      v7[5] = &v8;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay", (uint64_t)"FigRoutingManagerContextUtilities.m", 5038, 0, 0, v5, (uint64_t)v7);
    }
    v1 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
    _Block_object_dispose(v12, 8);
  }
  return v1;
}

void sub_193691FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = -1;
  if (a1 && theArray && CFArrayGetCount(theArray))
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = -1;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = v5;
    v9[6] = a1;
    v9[7] = theArray;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 5372, 0, 0, v7, (uint64_t)v9);
    v2 = v11[3];
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_1936921E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID(uint64_t a1, uint64_t a2)
{
  float v2;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[8];
  uint64_t v10;
  float *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = (float *)&v10;
  v12 = 0x2020000000;
  v13 = 1065353216;
  v2 = 1.0;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v5 = 0;
    v6 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v6 = 504;
    v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[6] = a1;
    v9[7] = a2;
    v9[4] = &v10;
    v9[5] = v5;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5523, 0, 0, v7, (uint64_t)v9);
    v2 = v11[6];
  }
  _Block_object_dispose(&v10, 8);
  return v2;
}

void sub_1936923B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID(uint64_t a1, uint64_t a2, float a3)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[7];
  float v10;

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v6 = 0;
  v7 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v7 = 504;
  v8 = *(NSObject **)v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID_block_invoke;
  v9[3] = &__block_descriptor_60_e5_v8__0l;
  v9[4] = v6;
  v9[5] = a1;
  v10 = a3;
  v9[6] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5551, 0, 0, v8, (uint64_t)v9);
}

void FigRoutingManagerContextUtilities_SetScreenEndpoint(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[7];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    v5 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v5 = 504;
    v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    if (!byte_1EE2B2EB0)
      v4 = 0;
    v7[2] = __FigRoutingManagerContextUtilities_SetScreenEndpoint_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    v7[4] = v4;
    v7[5] = a1;
    v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetScreenEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 5635, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopyScreenEndpointUUID(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopyScreenEndpointUUID_block_invoke;
    v6[3] = &unk_1E3098D60;
    v6[5] = v2;
    v6[6] = v1;
    v6[4] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyScreenEndpointUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5669, 0, 0, v4, (uint64_t)v6);
    v1 = v8[3];
  }
  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_1936927B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_SetAudioEndpoint(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[7];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    v5 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v5 = 504;
    v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    if (!byte_1EE2B2EB0)
      v4 = 0;
    v7[2] = __FigRoutingManagerContextUtilities_SetAudioEndpoint_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    v7[4] = v4;
    v7[5] = a1;
    v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetAudioEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 5699, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v1 = 1;
  v12 = 1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v3 = 0;
    v4 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v4 = 504;
    v5 = *(NSObject **)v4;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver_block_invoke;
    v8[3] = &unk_1E3098D60;
    v8[5] = v3;
    v8[6] = a1;
    v8[4] = &v9;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver", (uint64_t)"FigRoutingManagerContextUtilities.m", 5758, 0, 0, v5, (uint64_t)v8);
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v1 = *((unsigned __int8 *)v10 + 24);
  }
  _Block_object_dispose(&v9, 8);
  return v1;
}

void sub_193692B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_StopDiscoveryTimer(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  if (byte_1EE2B2EB0)
    v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v2 = 0;
  v3 = (uint64_t)&qword_1EE2B2EA0;
  if (!byte_1EE2B2EB0)
    v3 = 504;
  v4 = *(NSObject **)v3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigRoutingManagerContextUtilities_StopDiscoveryTimer_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = v2;
  v5[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_StopDiscoveryTimer", (uint64_t)"FigRoutingManagerContextUtilities.m", 5814, 0, 0, v4, (uint64_t)v5);
}

void FigRoutingManagerContextUtilities_StopMirroringTimer(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __FigRoutingManagerContextUtilities_StopMirroringTimer_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v2;
    v5[5] = a1;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_StopMirroringTimer", (uint64_t)"FigRoutingManagerContextUtilities.m", 5936, 0, 0, v4, (uint64_t)v5);
  }
}

void FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[7];

  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    v5 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v5 = 504;
    v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    if (!byte_1EE2B2EB0)
      v4 = 0;
    v7[2] = __FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    v7[4] = v4;
    v7[5] = a1;
    v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts", (uint64_t)"FigRoutingManagerContextUtilities.m", 5973, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  CFMutableArrayRef Mutable;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    if (byte_1EE2B2EB0)
      v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    else
      v2 = 0;
    v3 = (uint64_t)&qword_1EE2B2EA0;
    if (!byte_1EE2B2EB0)
      v3 = 504;
    v4 = *(NSObject **)v3;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts_block_invoke;
    v7[3] = &unk_1E3098D60;
    v7[5] = v2;
    v7[6] = a1;
    v7[4] = &v8;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts", (uint64_t)"FigRoutingManagerContextUtilities.m", 6000, 0, 0, v4, (uint64_t)v7);
  }
  v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_193693160(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting(uint64_t a1)
{
  int ContextType;
  unint64_t v2;

  if (a1)
  {
    ContextType = FigRoutingManagerContextUtilities_GetContextType(a1);
    v2 = 0x1000000000101uLL >> (8 * (ContextType - 3));
    if ((ContextType - 3) > 6)
      LOBYTE(v2) = 0;
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

id FigRoutingContextUtilities_CreateStateInfoStringForContext(uint64_t a1)
{
  int v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  _QWORD v9[7];

  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  v2 = byte_1EE2B2EB0;
  v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v4 = v3;
  v5 = (uint64_t)&qword_1EE2B2EA0;
  if (!v2)
    v5 = 504;
  v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  if (v2)
    v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  else
    v7 = 0;
  v9[2] = __FigRoutingContextUtilities_CreateStateInfoStringForContext_block_invoke;
  v9[3] = &unk_1E30995F0;
  v9[5] = v7;
  v9[6] = a1;
  v9[4] = v3;
  MXDispatchSync((uint64_t)"FigRoutingContextUtilities_CreateStateInfoStringForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 6231, 0, 0, v6, (uint64_t)v9);
  return v4;
}

void ___routingContextUtilities_postNotificationToContextAndItsFollowers_block_invoke(uint64_t a1)
{
  BOOL v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex i;
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (FigCFEqual())
    v2 = 1;
  else
    v2 = dword_1EE2B3E28 == 0;
  if (!v2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 64);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("routingContextUUID"));
    CFDictionaryGetValue(ValueAtIndex, CFSTR("routingContext"));
    if (dword_1EE2B3E28)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  v8 = *(const void **)(a1 + 40);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 32);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 48);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 64);
  if (v11)
    CFRelease(v11);
}

void __routingContextUtilities_getSharedContextUtilities_block_invoke()
{
  NSObject *v0;
  NSObject *v1;
  const __CFAllocator *v2;
  uint64_t v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  uint64_t *v6;
  const CFArrayCallBacks *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v9;
  uint64_t i;
  const void *v11;
  const void *v12;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1EE2B2EA0 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.RoutingContextUtilitiesSerializationQueue", v0);
  if (qword_1EE2B2EA0)
  {
    v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    qword_1EE2B2EA8 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.RoutingContextUtilitiesNotificationQueue", v1);
    if (qword_1EE2B2EA8)
    {
      CMSMDeviceState_AddQueueToWatchDogMonitoring();
      CMSMDeviceState_AddQueueToWatchDogMonitoring();
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      qword_1EE2B2E88 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (qword_1EE2B2E88)
      {
        qword_1EE2B2F00 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
        if (qword_1EE2B2F00)
        {
          qword_1EE2B2F08 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
          if (qword_1EE2B2F08)
          {
            qword_1EE2B2F10 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
            if (qword_1EE2B2F10)
            {
              v3 = 0;
              v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
              v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
              v6 = &qword_1EE2B2CB8;
              v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
              while (1)
              {
                *((_DWORD *)v6 - 4) = v3;
                Mutable = CFDictionaryCreateMutable(v2, 0, v4, v5);
                *(v6 - 1) = (uint64_t)Mutable;
                if (!Mutable)
                  break;
                v9 = CFArrayCreateMutable(v2, 0, v7);
                v6[1] = (uint64_t)v9;
                if (!v9)
                  break;
                *v6 = 0;
                v6 += 4;
                if (++v3 == 15)
                {
                  byte_1EE2B2EB0 = 1;
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!byte_1EE2B2EB0)
  {
    if (qword_1EE2B2EA8)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B2EA8);
      qword_1EE2B2EA8 = 0;
    }
    if (qword_1EE2B2E88)
      CFRelease((CFTypeRef)qword_1EE2B2E88);
    for (i = 0; i != 480; i += 32)
    {
      v11 = *(const void **)((char *)&routingContextUtilities_getSharedContextUtilities_contextState + i + 8);
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)((char *)&routingContextUtilities_getSharedContextUtilities_contextState + i + 24);
      if (v12)
        CFRelease(v12);
    }
    if (qword_1EE2B2F00)
    {
      CFRelease((CFTypeRef)qword_1EE2B2F00);
      qword_1EE2B2F00 = 0;
    }
    if (qword_1EE2B2F08)
    {
      CFRelease((CFTypeRef)qword_1EE2B2F08);
      qword_1EE2B2F08 = 0;
    }
    if (qword_1EE2B2F10)
    {
      CFRelease((CFTypeRef)qword_1EE2B2F10);
      qword_1EE2B2F10 = 0;
    }
  }
}

void _routingContextUtilities_pruneLeaders(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count;
      for (i = 0; i < v3; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (!ValueAtIndex || !_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
        {
          CFArrayRemoveValueAtIndex(a1, i--);
          --v3;
        }
      }
    }
  }
}

void __routingContextUtilities_copyIndividualEndpointsFromAggregate_block_invoke(uint64_t *a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  const __CFAllocator *v4;
  __CFArray *MutableCopy;
  CFTypeRef v6;
  const void *v7;
  __CFArray *v8;
  const __CFArray *v9;
  CFIndex FirstIndexOfValue;
  CFIndex v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  const UInt8 *ContextForUUIDFromDict;
  const void *v16;
  const void *v17;
  CFArrayRef theArray;
  CFRange v19;
  CFRange v20;

  theArray = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
    if (theArray)
    {
      MutableCopy = CFArrayCreateMutableCopy(v4, 0, theArray);
      if (theArray)
      {
        if (FigRoutingManagerIsEndpointOfSubtype(a1[4]))
        {
          v6 = FigRoutingManagerCopyLocalAirPlayEndpoint();
          if (v6)
          {
            v7 = v6;
            if (!FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v6))
            {
              v9 = theArray;
              v19.length = CFArrayGetCount(theArray);
              v19.location = 0;
              FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v9, v19, v7);
              if (FirstIndexOfValue != -1)
              {
                v11 = FirstIndexOfValue;
                v12 = a1[5];
                v13 = *(const void **)(v12 + 528);
                if (v13)
                {
                  v14 = (void *)CFRetain(v13);
                  v12 = a1[5];
                }
                else
                {
                  v14 = 0;
                }
                v17 = 0;
                ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)(v12 + 480), v14);
                _routingContextUtilities_copyPickedEndpointAtIndex((uint64_t)ContextForUUIDFromDict, 0, &v17);
                v16 = v17;
                if (v17)
                {
                  if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v17))
                    CFArraySetValueAtIndex(MutableCopy, v11, v16);
                  CFRelease(v16);
                }
                if (v14)
                  CFRelease(v14);
              }
            }
            CFRelease(v7);
          }
        }
        v8 = (__CFArray *)a1[6];
        v20.length = CFArrayGetCount(theArray);
        v20.location = 0;
        CFArrayAppendArray(v8, MutableCopy, v20);
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
      }
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
  }
}

uint64_t FigRouteDiscovererStartServer()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t RouteDiscovererServerNotificationEnqueueDecisionFunction(const void *a1)
{
  uint64_t result;

  if (CFEqual(a1, CFSTR("Discoverer_AvailableRoutesChanged")))
    return 1;
  if (CFEqual(a1, CFSTR("Discoverer_RoutePresentChanged")))
    return 1;
  result = CFEqual(a1, CFSTR("Discoverer_EndpointDescriptorChanged"));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t PowerManager_Initialize()
{
  int IsCPMSSupportedForClient;
  uint64_t result;
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  IsCPMSSupportedForClient = powerManager_IsCPMSSupportedForClient(5);
  result = powerManager_IsCPMSSupportedForClient(6);
  if (IsCPMSSupportedForClient | result)
  {
    v2 = result;
    sCMSMPowerManager_0 = 1;
    if (IsCPMSSupportedForClient)
    {
      result = PowerManager_InitializeCPMSForAudio();
      IsCPMSSupportedForClient = result;
    }
    if (v2)
    {
      result = PowerManager_InitializeCPMSForHaptics();
      v2 = result;
    }
    if (IsCPMSSupportedForClient)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v2)
    {
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t powerManager_IsCPMSSupportedForClient(uint64_t a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  if (objc_msgSend(MEMORY[0x1E0D09930], "isCPMSSupportedForClient:", a1))
  {
    if (a1 == 5)
    {
      v2 = 1;
      PowerManager_SetCPMSSupportedForAudio(1);
      goto LABEL_10;
    }
    if (!MX_FeatureFlags_IsHapticEngineCPMSEnabled())
    {
      v2 = 1;
      PowerManager_SetCPMSSupportedForHaptics(1);
      goto LABEL_10;
    }
    PowerManager_SetCPMSSupportedForHaptics(0);
    if (!dword_1EE2B3F38)
      return 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = 0;
LABEL_10:
  if (dword_1EE2B3F38)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

const __CFString *FigRoutingManagerGetNotifyingObject()
{
  return CFSTR("RoutingManager");
}

uint64_t FigRoutingManager_GetDataTransmissionQueue()
{
  if (FigRoutingManager_GetDataTransmissionQueue_once != -1)
    dispatch_once(&FigRoutingManager_GetDataTransmissionQueue_once, &__block_literal_global_3);
  return FigRoutingManager_GetDataTransmissionQueue_dataTransmissionQueue;
}

void routingManager_pickingTimeoutCallback(CFTypeRef cf, CFTypeRef a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD v10[6];

  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  v4 = qword_1EE2B2880;
  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  if (v4)
    v5 = (uint64_t)&qword_1EE2B2880;
  else
    v5 = 8;
  v6 = *(NSObject **)v5;
  v7 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a2;
  v10[5] = cf;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleActivationTimeoutCallback", (uint64_t)"FigRoutingManager.m", 2479, 0, 0, v6, (uint64_t)v10);
  v8 = *(NSObject **)v5;
  v9[0] = v7;
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke_2;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = cf;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleActivationTimeoutCallback", (uint64_t)"FigRoutingManager.m", 2513, 0, 0, v8, (uint64_t)v9);
}

uint64_t FigRoutingManagerCreateEndpointManagers()
{
  uint64_t result;
  void *v1;
  void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  CFTypeRef cf;
  __int128 v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD v22[6];

  v22[5] = *MEMORY[0x1E0C80C00];
  result = MX_FeatureFlags_IsExplicitInitializationForFigEndpointManagersEnabled();
  if (!(_DWORD)result)
    return result;
  if (!AirPlaySenderLibraryCore_frameworkLibrary)
  {
    v18 = xmmword_1E3099888;
    v19 = 0;
    result = _sl_dlopen();
    AirPlaySenderLibraryCore_frameworkLibrary = result;
  }
  if (AirPlaySenderLibraryCore_frameworkLibrary)
  {
    if (FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E0CA3A58]))
    {
      cf = 0;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = &v18;
      v19 = 0x2020000000;
      v1 = getAPGetEndpointManagerSymbolLoc_ptr;
      v20 = getAPGetEndpointManagerSymbolLoc_ptr;
      if (!getAPGetEndpointManagerSymbolLoc_ptr)
      {
        v2 = (void *)AirPlaySenderLibrary();
        v1 = dlsym(v2, "APGetEndpointManager");
        *(_QWORD *)(*((_QWORD *)&v18 + 1) + 24) = v1;
        getAPGetEndpointManagerSymbolLoc_ptr = v1;
      }
      _Block_object_dispose(&v18, 8);
      if (!v1)
      {
        __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
        goto LABEL_44;
      }
      if (!((unsigned int (*)(CFTypeRef *))v1)(&cf))
      {
        FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    if (FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E0CA3A68]))
    {
      cf = 0;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = &v18;
      v19 = 0x2020000000;
      v4 = getAPGetEndpointManagerCarPlaySymbolLoc_ptr;
      v20 = getAPGetEndpointManagerCarPlaySymbolLoc_ptr;
      if (!getAPGetEndpointManagerCarPlaySymbolLoc_ptr)
      {
        v5 = (void *)AirPlaySenderLibrary();
        v4 = dlsym(v5, "APGetEndpointManagerCarPlay");
        *(_QWORD *)(*((_QWORD *)&v18 + 1) + 24) = v4;
        getAPGetEndpointManagerCarPlaySymbolLoc_ptr = v4;
      }
      _Block_object_dispose(&v18, 8);
      if (!v4)
        goto LABEL_43;
      if (!((unsigned int (*)(CFTypeRef *))v4)(&cf))
      {
        FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1EE2B3E28)
        {
          v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    result = FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E0CA3A78]);
    if (!(_DWORD)result)
      goto LABEL_26;
    cf = 0;
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = &v18;
    v19 = 0x2020000000;
    v7 = getSPGetEndpointManagerSymbolLoc_ptr;
    v20 = getSPGetEndpointManagerSymbolLoc_ptr;
    if (!getSPGetEndpointManagerSymbolLoc_ptr)
    {
      v8 = (void *)AirPlaySenderLibrary();
      v7 = dlsym(v8, "SPGetEndpointManager");
      *(_QWORD *)(*((_QWORD *)&v18 + 1) + 24) = v7;
      getSPGetEndpointManagerSymbolLoc_ptr = v7;
    }
    _Block_object_dispose(&v18, 8);
    if (v7)
    {
      result = ((uint64_t (*)(CFTypeRef *))v7)(&cf);
      if (!(_DWORD)result)
      {
        result = FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1EE2B3E28)
        {
          v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      goto LABEL_26;
    }
LABEL_43:
    __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
LABEL_44:
    __break(1u);
  }
LABEL_26:
  if (!MediaToolboxLibraryCore_frameworkLibrary)
  {
    v18 = xmmword_1E30998A0;
    v19 = 0;
    result = _sl_dlopen();
    MediaToolboxLibraryCore_frameworkLibrary = result;
  }
  if (MediaToolboxLibraryCore_frameworkLibrary)
  {
    result = FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E0CA3A70]);
    if ((_DWORD)result)
    {
      v22[0] = 0;
      v22[1] = v22;
      v22[2] = 0x2020000000;
      v10 = (uint64_t (*)(uint64_t, uint64_t))getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr;
      v22[3] = getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr;
      if (!getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr)
      {
        *(_QWORD *)&v18 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v18 + 1) = 3221225472;
        v19 = (uint64_t)__getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke;
        v20 = &unk_1E3099018;
        v21 = v22;
        __getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke((uint64_t)&v18);
        v10 = *(uint64_t (**)(uint64_t, uint64_t))(v22[1] + 24);
      }
      _Block_object_dispose(v22, 8);
      if (v10)
      {
        result = v10(v11, v12);
        v13 = result;
        if (result)
        {
          result = FigRouteDiscoveryManagerRegisterEndpointManager((CFTypeRef)result);
          if (dword_1EE2B3E28)
          {
            LODWORD(cf) = 0;
            v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v15 = cf;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              v16 = v15;
            else
              v16 = v15 & 0xFFFFFFFE;
            if (v16)
            {
              LODWORD(v22[0]) = 136315394;
              *(_QWORD *)((char *)v22 + 4) = "FigRoutingManagerCreateEndpointManagers";
              WORD2(v22[1]) = 2048;
              *(_QWORD *)((char *)&v22[1] + 6) = v13;
              _os_log_send_and_compose_impl();
            }
            return fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        return result;
      }
      goto LABEL_43;
    }
  }
  return result;
}

void sub_193695454(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void FigRoutingMangerCreateBluetoothEndpointManager()
{
  NSObject *v0;
  dispatch_queue_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  _QWORD v6[16];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v1 = dispatch_queue_create("com.apple.routingManager.bluetooth", v0);
  routingManager_createBluetoothEndpointManager_queue = (uint64_t)v1;
  if (v1)
  {
    v2 = v1;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v3 = getBluetoothEndpointManagerCreateSymbolLoc_ptr;
    v10 = getBluetoothEndpointManagerCreateSymbolLoc_ptr;
    if (!getBluetoothEndpointManagerCreateSymbolLoc_ptr)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __getBluetoothEndpointManagerCreateSymbolLoc_block_invoke;
      v6[3] = &unk_1E3099018;
      v6[4] = &v7;
      __getBluetoothEndpointManagerCreateSymbolLoc_block_invoke((uint64_t)v6);
      v3 = (void *)v8[3];
    }
    _Block_object_dispose(&v7, 8);
    if (!v3)
    {
      __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
      __break(1u);
    }
    if (!((unsigned int (*)(_QWORD, dispatch_queue_t, _QWORD, CFTypeRef *))v3)(*MEMORY[0x1E0C9AE00], v2, 0, &cf))
    {
      FigRouteDiscoveryManagerRegisterEndpointManager(cf);
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_1936956A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t MXRegisterEndpointManager(const void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194035B20]();
  FigRouteDiscoveryManagerInit();
  FigRouteDiscoveryManagerRegisterEndpointManager(a1);
  FigRouteDiscoveryManagerStart();
  FigRoutingManagerInit();
  objc_autoreleasePoolPop(v2);
  return 0;
}

void FigRoutingManagerInit()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v1;
  uint64_t v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  CFTypeRef v4;
  CFTypeRef cf;
  CFTypeRef v6[21];

  v6[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf = 0;
  v6[0] = 0;
  v4 = 0;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  if (qword_1EE2B2880)
  {
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 1, &cf);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 1);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 2, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 2);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 9, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 9);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 3, v6);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 3);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 11, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 11);
    if (MX_FeatureFlags_IsSystemInputPickerEnabled())
    {
      routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 13, 0);
      FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 13);
    }
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
    {
      routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 14, 0);
      FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 14);
    }
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 12, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 12);
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_SetLeaderUUIDForContext(v6[0], (uint64_t)cf, 0);
    v1 = FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext((uint64_t)v6[0], (uint64_t)cf);
    FigRoutingContextUtilities_LogCurrentState(v1, v2);
    if (!FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID((uint64_t)v6[0], (uint64_t)&v4)
      && !FigRoutingSessionManagerInit(v4))
    {
      MXInstallSysdiagnoseBlock((uint64_t)CFSTR("RouteList"), (uint64_t)&__block_literal_global_17);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)routingManager_handlePlaybackImminentNotification, CFSTR("com.apple.mediaremote.playbackImminent"), 0, (CFNotificationSuspensionBehavior)0);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v6[0])
    CFRelease(v6[0]);
  if (v4)
    CFRelease(v4);
}

uint64_t FigRoutingManagerInternal_CreateAirPlayAggregate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AggregateEndpoint;
  OpaqueFigEndpointManager *v7;
  uint64_t v8;
  OpaqueFigEndpointManager *v9;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v12)(OpaqueFigEndpointManager *, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  BOOL v14;
  NSObject *v15;
  NSObject *v17;
  CFTypeRef *v18;
  uint64_t v19;
  CFTypeRef cf[23];

  AggregateEndpoint = a4;
  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a4)
  {
    v7 = -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]);
    if (v7)
    {
      v9 = v7;
      v18 = (CFTypeRef *)AggregateEndpoint;
      v19 = (uint64_t)a2;
      if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(v7, v8))
      {
        v10 = 5;
        while (1)
        {
          if (dword_1EE2B3E28)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v12 = *(uint64_t (**)(OpaqueFigEndpointManager *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 24);
          if (v12)
          {
            AggregateEndpoint = v12(v9, a3, cf);
            v13 = cf[0];
            if ((_DWORD)AggregateEndpoint)
              v14 = 1;
            else
              v14 = cf[0] == 0;
            if (!v14)
              goto LABEL_18;
          }
          else
          {
            AggregateEndpoint = 4294954514;
          }
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          usleep(0xC350u);
          if (!--v10)
            goto LABEL_16;
        }
      }
      AggregateEndpoint = MXAggregateEndpointCreateAggregateEndpoint(v9, a2, a3, cf);
LABEL_16:
      if ((_DWORD)AggregateEndpoint)
      {
        if (dword_1EE2B3E28)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerContextUtilities_SetAggregateEndpoint(v19, 0);
        if (cf[0])
          CFRelease(cf[0]);
      }
      else
      {
        v13 = cf[0];
LABEL_18:
        FigRoutingManagerContextUtilities_SetAggregateEndpoint(v19, (uint64_t)v13);
        AggregateEndpoint = 0;
        *v18 = cf[0];
      }
    }
    else
    {
      return 0;
    }
  }
  return AggregateEndpoint;
}

void FigRoutingManagerCreateAndActivateSystemRemotePoolEndpoint()
{
  uint64_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v3[21];

  v3[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  cf = 0;
  v3[0] = 0;
  v0 = FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&cf);
  FigRoutingManagerInternal_CreateAirPlayAggregateForSystemRemotePool(v0, cf, v3);
  if (v3[0] && MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)v3[0], cf) && dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v3[0])
    CFRelease(v3[0]);
}

uint64_t FigRoutingManagerInternal_CreateAirPlayAggregateForSystemRemotePool(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  OpaqueFigEndpointManager *v5;
  uint64_t v6;
  OpaqueFigEndpointManager *v7;
  uint64_t AggregateEndpoint;
  int v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v11)(OpaqueFigEndpointManager *, CFTypeRef *);
  CFTypeRef v12;
  BOOL v13;
  NSObject *v14;
  CFTypeRef cf[23];

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (!a3)
    return 0;
  v5 = -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]);
  if (!v5)
    return 0;
  v7 = v5;
  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(v5, v6))
  {
    v9 = 5;
    while (1)
    {
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v11 = *(uint64_t (**)(OpaqueFigEndpointManager *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
      if (v11)
      {
        AggregateEndpoint = v11(v7, cf);
        v12 = cf[0];
        if ((_DWORD)AggregateEndpoint)
          v13 = 1;
        else
          v13 = cf[0] == 0;
        if (!v13)
          goto LABEL_18;
      }
      else
      {
        AggregateEndpoint = 4294954514;
      }
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      usleep(0xC350u);
      if (!--v9)
        goto LABEL_16;
    }
  }
  AggregateEndpoint = MXAggregateEndpointCreateAggregateEndpoint(v7, a2, 3, cf);
LABEL_16:
  if (!(_DWORD)AggregateEndpoint)
  {
    v12 = cf[0];
    if (cf[0])
    {
LABEL_18:
      FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, (uint64_t)v12);
      AggregateEndpoint = 0;
      *a3 = cf[0];
      return AggregateEndpoint;
    }
    return 0;
  }
  FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, 0);
  if (cf[0])
    CFRelease(cf[0]);
  return AggregateEndpoint;
}

uint64_t FigRoutingManagerCreateAndActivateAggregateEndpointForContext(const void *a1)
{
  OpaqueFigEndpointManager *v2;
  OpaqueFigEndpointManager *v3;
  int ContextType;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v2 = -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 9)
    v5 = 3;
  else
    v5 = 0;
  v6 = MXAggregateEndpointCreateAggregateEndpoint(v3, a1, v5, &cf);
  if (!(_DWORD)v6)
  {
    if (cf)
    {
      FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a1, (uint64_t)cf);
      v2 = (OpaqueFigEndpointManager *)cf;
    }
    else
    {
      v2 = 0;
    }
    if (ContextType != 9)
    {
      v7 = FigRoutingManager_iOSActivateEndpoint(v2, a1, 0, 0);
      goto LABEL_11;
    }
LABEL_9:
    v7 = MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)v2, a1);
LABEL_11:
    v8 = v7;
    goto LABEL_12;
  }
  v8 = v6;
  FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a1, 0);
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigRoutingManagerCreateAggregateForContextIfNecessary(const void *a1, CFIndex a2)
{
  int v4;
  int ContextType;
  char v6;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2)
    || !FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting((uint64_t)a1))
  {
    return 0;
  }
  v4 = FigRoutingManagerUtilities_AreAllEndpointsOfTypeAirPlay(a2);
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 9)
  {
    if (!v4)
      goto LABEL_12;
  }
  else
  {
    v6 = FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable(a2);
    if (!v4 || (v6 & 1) == 0)
    {
LABEL_12:
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)cf);
  if (cf[0])
  {
    if (FigRoutingManagerIsEndpointActivated((uint64_t)cf[0]))
    {
      if (dword_1EE2B3E28)
      {
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (ContextType == 9)
    {
      MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)cf[0], a1);
    }
    else
    {
      FigRoutingManager_iOSActivateEndpoint(cf[0], a1, 0, 0);
    }
  }
  else
  {
    FigRoutingManagerCreateAndActivateAggregateEndpointForContext(a1);
  }
  if (cf[0])
    CFRelease(cf[0]);
  return 0;
}

uint64_t FigRoutingManagerRegisterAndCopyContext(uint64_t a1, const __CFDictionary *a2, int a3, CFStringRef *a4)
{
  void *v8;
  const __CFAllocator *v9;
  const __CFUUID *v10;
  const __CFUUID *v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a3 - 1) < 0xE && ((0x3F07u >> (a3 - 1)) & 1) != 0)
    return 4294955276;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  if (qword_1EE2B2880)
    v8 = &FigRoutingManagerGetSharedManager_manager;
  else
    v8 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v10)
    return 4294955275;
  v11 = v10;
  v12 = CFUUIDCreateString(v9, v10);
  CFRelease(v11);
  if (!v12)
    return 4294955275;
  v13 = routingManager_registerContextInternal((uint64_t)v8, v12, a1, a3, a2);
  v15 = v13;
  if (!(_DWORD)v13)
  {
    if (a4)
    {
      *a4 = v12;
      FigRoutingContextUtilities_LogCurrentState(v13, v14);
      return 0;
    }
    FigRoutingContextUtilities_LogCurrentState(v13, v14);
  }
  CFRelease(v12);
  return v15;
}

uint64_t routingManager_registerContextInternal(uint64_t a1, const void *a2, uint64_t a3, int a4, const __CFDictionary *a5)
{
  uint64_t v9;
  CFTypeRef v10;
  const void *Value;
  _BOOL4 IsEndpointActivated;
  NSObject *v13;
  _QWORD v15[5];
  CFTypeRef cf;

  v9 = FigRoutingManagerContextUtilities_AddContext((uint64_t)a2, a3, a4, (uint64_t)a5);
  if ((_DWORD)v9)
    return v9;
  if (a4 == 4)
  {
    if (CMSMDeviceState_IsHomePodHub())
    {
      cf = 0;
      Value = CFDictionaryGetValue(a5, CFSTR("isAudioContextTest"));
      if (Value != (const void *)*MEMORY[0x1E0C9AE50])
      {
        FigRoutingManagerInternal_CreateAirPlayAggregate((uint64_t)Value, a2, 0, (uint64_t)&cf);
        FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, (uint64_t)cf);
        if (cf)
        {
          IsEndpointActivated = FigRoutingManagerIsEndpointActivated((uint64_t)cf);
          v10 = cf;
          if (IsEndpointActivated)
          {
LABEL_6:
            if (v10)
              CFRelease(v10);
            goto LABEL_13;
          }
          MXAudioContext_ActivateAggregateEndpoint((uint64_t)cf, a2);
LABEL_5:
          v10 = cf;
          goto LABEL_6;
        }
      }
    }
  }
  else if (a4 == 5)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
    FigRoutingContextUtilities_SetLeaderUUIDForContext(a2, (uint64_t)cf, CFSTR("configUpdateReasonEndedBottomUpRouteChange"));
    FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext((uint64_t)a2, (uint64_t)cf);
    goto LABEL_5;
  }
LABEL_13:
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, (uint64_t)CFSTR("currentRouteChanged"), 0);
  if (a2)
    CFRetain(a2);
  v13 = *(NSObject **)(a1 + 16);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __routingManager_registerContextInternal_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = a2;
  MXDispatchAsync((uint64_t)"routingManager_registerContextInternal", (uint64_t)"FigRoutingManager.m", 500, 0, 0, v13, (uint64_t)v15);
  return v9;
}

uint64_t FigRoutingManagerRegisterContextWithUUID(uint64_t a1, const __CFDictionary *a2, int a3, const void *a4)
{
  void *v8;
  uint64_t result;
  uint64_t v10;

  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  if ((a3 - 1) < 0xE && ((0x3F07u >> (a3 - 1)) & 1) != 0)
    return 4294955276;
  if (qword_1EE2B2880)
    v8 = &FigRoutingManagerGetSharedManager_manager;
  else
    v8 = 0;
  result = routingManager_registerContextInternal((uint64_t)v8, a4, a1, a3, a2);
  if (!(_DWORD)result)
  {
    FigRoutingContextUtilities_LogCurrentState(result, v10);
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerUnregisterContext(uint64_t result)
{
  const void *v1;
  int ContextType;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  os_log_type_t type;
  int v17;
  os_log_type_t v18[8];
  CFArrayRef theArray[23];

  theArray[21] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (const void *)result;
    ContextType = FigRoutingManagerContextUtilities_GetContextType(result);
    if ((ContextType - 5) > 1)
    {
      if (ContextType == 4 && CMSMDeviceState_IsHomePodHub() && dword_1EE2B3E28)
      {
        LODWORD(theArray[0]) = 0;
        v18[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo((uint64_t)v1, (uint64_t)theArray);
      if (theArray[0])
      {
        Count = CFArrayGetCount(theArray[0]);
        if (Count >= 1)
        {
          v4 = Count;
          for (i = 0; i != v4; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray[0], i);
            Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("ActivatedEndpointsInfo_Endpoint"));
            *(_QWORD *)v18 = 0;
            FigCFDictionaryGetInt64IfPresent();
            if (dword_1EE2B3E28)
            {
              v17 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManager_iOSDeactivateEndpoint(Value, *(uint64_t *)v18);
            FigRoutingManagerContextUtilities_SetPickedEndpoints(v1, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
          }
        }
        if (theArray[0])
          CFRelease(theArray[0]);
      }
    }
    if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
      dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
    v10 = qword_1EE2B2880;
    CFRetain(v1);
    v11 = 16;
    if (v10)
      v11 = (uint64_t)&qword_1EE2B2888;
    v12 = *(NSObject **)v11;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __FigRoutingManagerUnregisterContext_block_invoke;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = v1;
    MXDispatchAsync((uint64_t)"FigRoutingManagerUnregisterContext", (uint64_t)"FigRoutingManager.m", 1462, 0, 0, v12, (uint64_t)v15);
    v13 = FigRoutingManagerContextUtilities_RemoveContext(v1);
    return FigRoutingContextUtilities_LogCurrentState(v13, v14);
  }
  return result;
}

void routingManager_notifyRoutingContextChanged()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

void FigRoutingManagerCopyCurrentGroupUUID(uint64_t a1, _QWORD *a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, _QWORD *);
  CFTypeRef cf;

  if (a2)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v4 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v4)
        v4(CMBaseObject, *MEMORY[0x1E0CA4228], *MEMORY[0x1E0C9AE00], a2);
    }
    else
    {
      *a2 = 0;
    }
    if (cf)
      CFRelease(cf);
  }
}

uint64_t FigRoutingManagerIsConfigurationWHASilentPrimary(uint64_t a1)
{
  CFIndex Count;
  uint64_t v3;
  CFIndex v4;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a1))
    return 0;
  theArray = 0;
  FigRoutingManagerCopyPickedEndpointsForRoutingContext(a1, &theArray);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  v3 = Count;
  if (Count)
  {
    if (Count < 1)
    {
LABEL_9:
      v3 = 1;
    }
    else
    {
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)
          || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          break;
        }
        if (v3 == ++v4)
          goto LABEL_9;
      }
      v3 = 0;
    }
  }
  if (theArray)
    CFRelease(theArray);
  return v3;
}

uint64_t FigRoutingManagerCopyPickedEndpointsForRoutingContext(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return 4294954516;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  return routingManager_iOSCopyPickedEndpointsForRoutingContext(a1, a2);
}

uint64_t FigRoutingManagerCopyRemotePickedEndpoint(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  v4 = 4294954516;
  if (a1 && a2)
  {
    cf = 0;
    v4 = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v6 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v6)
        v6(CMBaseObject, CFSTR("remoteEndpoint"), *MEMORY[0x1E0C9AE00], a2);
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a2 = cf;
    }
  }
  return v4;
}

uint64_t FigRoutingManagerCopyPickedRouteDescriptorForRoutingContext(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v4;
  __CFDictionary *v5;
  CFTypeRef cf;

  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  cf = 0;
  v4 = 4294954516;
  if (a1 && a2)
  {
    v4 = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    v5 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)cf, 0);
    if (cf)
      CFRelease(cf);
    *a2 = v5;
  }
  return v4;
}

uint64_t routingManager_iOSCopyPickedEndpointsForRoutingContext(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;
  CFTypeRef v8;

  v8 = 0;
  if (FigRoutingContextUtilities_IsFollowingAnotherContext(a1))
  {
    cf = 0;
    FigRoutingContextUtilities_CopyLeaderUUIDForContext(a1, (uint64_t)&cf);
    v4 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints((uint64_t)cf, (CFMutableArrayRef *)&v8);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v4 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&v8);
  }
  v5 = v8;
  if (!v8)
  {
    CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v5 = v8;
    goto LABEL_9;
  }
  if (a2)
  {
LABEL_9:
    *a2 = v5;
    return v4;
  }
  CFRelease(v8);
  return v4;
}

uint64_t FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext(uint64_t a1, __CFArray **a2)
{
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  v2 = 4294954516;
  if (a1 && a2)
  {
    if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
      dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
    v2 = routingManager_iOSCopyPickedEndpointsForRoutingContext(a1, &cf);
    *a2 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
    if (cf)
      CFRelease(cf);
  }
  return v2;
}

uint64_t FigRoutingManagerCopyPickedEndpointForRemoteControl(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = 4294954516;
  if (a1)
  {
    if (a2)
    {
      FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl(a1, (uint64_t)&v5);
      result = 0;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t FigRoutingManagerSaveCommunicationChannelUUIDForContext(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return FigRoutingManagerContextUtilities_SaveCommChannelUUID(a1, a2);
  else
    return 4294954516;
}

uint64_t routingManager_createSystemContext(uint64_t a1, int a2, _QWORD *a3)
{
  CFTypeRef v6;
  const __CFString *v7;
  uint64_t SystemAudioContextInternal;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  v7 = 0;
  switch(a2)
  {
    case 1:
      v7 = CFSTR("9FF3A19E-9347-44BE-9999-3527693EBD42");
      SystemAudioContextInternal = FigRoutingContextCreateSystemAudioContextInternal(CFSTR("9FF3A19E-9347-44BE-9999-3527693EBD42"));
      goto LABEL_11;
    case 2:
      v7 = CFSTR("AE0596F4-FE8D-41DC-B2AC-CB0C10793AFB");
      SystemAudioContextInternal = FigRoutingContextCreateSystemMirroringContextInternal((uint64_t)CFSTR("AE0596F4-FE8D-41DC-B2AC-CB0C10793AFB"));
      goto LABEL_11;
    case 3:
      v7 = CFSTR("577E1BCA-2D9B-41C2-A8F8-C515CE8072D4");
      SystemAudioContextInternal = FigRoutingContextCreateSystemMusicContextInternal((uint64_t)CFSTR("577E1BCA-2D9B-41C2-A8F8-C515CE8072D4"));
      goto LABEL_11;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      goto LABEL_13;
    case 9:
      v7 = CFSTR("0099C187-7408-4602-A91A-AD16480F63A6");
      SystemAudioContextInternal = FigRoutingContextCreateSystemRemotePoolContextInternal((uint64_t)CFSTR("0099C187-7408-4602-A91A-AD16480F63A6"));
      goto LABEL_11;
    case 10:
      v7 = CFSTR("EE613C90-4977-407B-830E-615886FFD46B");
      SystemAudioContextInternal = FigRoutingContextCreateSystemVideoDisplayMenu((uint64_t)CFSTR("EE613C90-4977-407B-830E-615886FFD46B"));
      goto LABEL_11;
    case 11:
      v7 = CFSTR("3C4D0FD7-378E-43FA-9D62-8F7873D548C7");
      SystemAudioContextInternal = FigRoutingContextCreateSystemVideoContextInternal((uint64_t)CFSTR("3C4D0FD7-378E-43FA-9D62-8F7873D548C7"));
      goto LABEL_11;
    case 12:
      v7 = CFSTR("1631DE8A-D3C9-463D-B86F-95DB6C143A72");
      SystemAudioContextInternal = FigRoutingContextCreateSidePlayContextInternal((uint64_t)CFSTR("1631DE8A-D3C9-463D-B86F-95DB6C143A72"));
      goto LABEL_11;
    case 13:
      v7 = CFSTR("7D6934D3-F9A8-4C49-9F66-83AB896A0C99");
      SystemAudioContextInternal = FigRoutingContextCreateSystemInputContextInternal((uint64_t)CFSTR("7D6934D3-F9A8-4C49-9F66-83AB896A0C99"));
      goto LABEL_11;
    case 14:
      v7 = CFSTR("1E27F250-0404-42B1-BF7E-AE233EA5DBC8");
      SystemAudioContextInternal = FigRoutingContextCreateSystemRemoteDisplayInternal(CFSTR("1E27F250-0404-42B1-BF7E-AE233EA5DBC8"), (uint64_t)&cf);
LABEL_11:
      v9 = SystemAudioContextInternal;
      if ((_DWORD)SystemAudioContextInternal)
        goto LABEL_23;
      v6 = cf;
LABEL_13:
      v10 = routingManager_registerContextInternal(a1, v7, (uint64_t)v6, a2, 0);
      if ((_DWORD)v10)
      {
        v9 = v10;
LABEL_23:
        if (cf)
          CFRelease(cf);
      }
      else if (a3)
      {
        if (v7)
          v11 = CFRetain(v7);
        else
          v11 = 0;
        v9 = 0;
        *a3 = v11;
      }
      else
      {
        return 0;
      }
      return v9;
    default:
      v7 = 0;
      goto LABEL_13;
  }
}

void routingManager_handlePlaybackImminentNotification()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v2[21];

  v2[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2[0] = 0;
  if (!CMSMDeviceState_IsHomePodHub())
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)cf, (uint64_t)v2);
    if (v2[0])
    {
      if (!FigRoutingManagerIsEndpointActivated((uint64_t)v2[0]))
      {
        FigRoutingManager_iOSActivateEndpoint(v2[0], cf, 0, 0);
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    if (cf)
      CFRelease(cf);
    if (v2[0])
      CFRelease(v2[0]);
  }
}

uint64_t FigRoutingManagerPerformPostInitOperations()
{
  uint64_t v0;
  uint64_t v1;
  CFTypeRef cf;
  CFTypeRef v4;

  v4 = 0;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1)
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_3);
  if (FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback())
  {
    FigRoutingManagerCreateAndActivateAggregateEndpointForLocalPlayback();
    v0 = 0;
  }
  else
  {
    cf = 0;
    v1 = FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
    FigRoutingManagerInternal_CreateAirPlayAggregate(v1, cf, 0, (uint64_t)&v4);
    if (v4)
      v0 = FigRoutingManager_iOSActivateEndpoint(v4, cf, 0, 0);
    else
      v0 = 0;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v4)
    {
      CFRelease(v4);
      v4 = 0;
    }
  }
  FigRoutingManagerCreateAndActivateSystemRemotePoolEndpoint();
  return v0;
}

uint64_t FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback()
{
  if (!CMSMDeviceState_ItsAHomePod())
    CMSMDeviceState_ItsAnAppleTV();
  return FigGetCFPreferenceNumberWithDefault();
}

CFTypeRef FigRoutingManagerCopyWHAGroupableVAEndpoint()
{
  uint64_t CMBaseObject;
  unsigned int (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v2;
  CFIndex v4;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef cf;

  cf = 0;
  -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A80]);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v1 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v1 && !v1(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], &cf))
  {
    v4 = 0;
    while (1)
    {
      Count = (CFIndex)cf;
      if (cf)
        Count = CFArrayGetCount((CFArrayRef)cf);
      if (v4 >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v4++);
      if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
      {
        if (!ValueAtIndex)
          break;
        v2 = CFRetain(ValueAtIndex);
        goto LABEL_4;
      }
    }
  }
  v2 = 0;
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v2;
}

CFTypeRef FigRoutingManagerCopyLocalAirPlayEndpoint()
{
  uint64_t CMBaseObject;
  unsigned int (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v2;
  CFIndex v4;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef cf;

  if (!-[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A58]))return 0;
  cf = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v1 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v1 && !v1(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], &cf))
  {
    v4 = 0;
    while (1)
    {
      Count = (CFIndex)cf;
      if (cf)
        Count = CFArrayGetCount((CFArrayRef)cf);
      if (v4 >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v4++);
      if (FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay((uint64_t)ValueAtIndex))
      {
        if (!ValueAtIndex)
          break;
        v2 = CFRetain(ValueAtIndex);
        goto LABEL_5;
      }
    }
  }
  v2 = 0;
LABEL_5:
  if (cf)
    CFRelease(cf);
  return v2;
}

CFTypeRef FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint()
{
  uint64_t CMBaseObject;
  unsigned int (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v2;
  CFTypeRef v3;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFStringRef *);
  uint64_t v7;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, CFStringRef *);
  int v13;
  CFStringRef v14;
  CFStringRef stringToFind;
  CFStringRef theString;
  CFArrayRef theArray;

  theArray = 0;
  -[MXEndpointDescriptorCache getEndpointManagerForType:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "getEndpointManagerForType:", *MEMORY[0x1E0CA3A60]);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v1 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v1)
    return 0;
  v2 = *MEMORY[0x1E0C9AE00];
  if (v1(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], &theArray))
    return 0;
  theString = 0;
  v5 = FigEndpointGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v7 = *MEMORY[0x1E0CA4258];
    v6(v5, *MEMORY[0x1E0CA4258], v2, &theString);
    if (theString)
    {
      for (i = 0; ; ++i)
      {
        Count = (CFIndex)theArray;
        if (theArray)
          Count = CFArrayGetCount(theArray);
        if (i >= Count)
          goto LABEL_19;
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        stringToFind = 0;
        v11 = FigEndpointGetCMBaseObject();
        v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
        if (!v12)
          goto LABEL_15;
        v13 = v12(v11, v7, v2, &stringToFind);
        v14 = stringToFind;
        if (stringToFind)
        {
          if (!v13)
            break;
        }
LABEL_16:
        if (v14)
          CFRelease(v14);
      }
      if (CFStringFind(theString, stringToFind, 0).location != -1)
      {
        if (ValueAtIndex)
          v3 = CFRetain(ValueAtIndex);
        else
          v3 = 0;
        if (stringToFind)
          CFRelease(stringToFind);
        goto LABEL_20;
      }
LABEL_15:
      v14 = stringToFind;
      goto LABEL_16;
    }
  }
LABEL_19:
  v3 = 0;
LABEL_20:
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (theString)
    CFRelease(theString);
  return v3;
}

uint64_t FigRoutingManagerCopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v11;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12[0] = 0;
  cf = 0;
  if (a2 && FigRoutingManagerContextUtilities_IsContextSidePlay(a1))
  {
    v3 = routingMangager_copySelectedBufferedEndpointForSidePlay();
    v4 = 0;
    v12[0] = v3;
  }
  else
  {
    FigRoutingManagerCopyPickedEndpointForRoutingContext(a1, &cf);
    v3 = 0;
    v4 = cf;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v4)
    || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    v5 = cf;
    v12[0] = cf;
    if (cf)
      CFRetain(cf);
    if (v3)
      CFRelease(v3);
  }
  else if (FigRoutingManagerContextUtilities_GetContextType(a1) - 3 > 2)
  {
    v5 = v3;
  }
  else
  {
    if (v3)
    {
      CFRelease(v3);
      v12[0] = 0;
    }
    FigRoutingManagerContextUtilities_CopyFigEndpointFromAggregateEndpointForClientUse(a1, (uint64_t)v12);
    v5 = (CFTypeRef)v12[0];
  }
  if (v5)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
      v7(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v11);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v11)
  {
    CFRelease(v11);
    v11 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v12[0];
}

CFTypeRef routingMangager_copySelectedBufferedEndpointForSidePlay()
{
  const __CFAllocator *v0;
  __CFString *Mutable;
  OpaqueFigEndpointManager *v2;
  uint64_t v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t *v6;
  CFIndex i;
  uint64_t *v8;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  const void *v14;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  CFTypeRef v18;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef cf[23];

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = FigRoutingManagerUtilities_CopySidePlayEndpoints();
  v3 = 0;
  v4 = 0;
  v21 = *MEMORY[0x1E0CA4258];
  v5 = *MEMORY[0x1E0CA4348];
  v6 = &sCategoryToPriorityMapForTriangle;
  v20 = *MEMORY[0x1E0CA4348];
  if (!v2)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount((CFArrayRef)v2); ; i = 0)
  {
    if (v4 >= i)
    {
      v18 = 0;
      goto LABEL_37;
    }
    v8 = v6;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v2, v4);
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v11)
      v11(CMBaseObject, v21, v0, cf);
    v22 = 0;
    v12 = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v13)
      v13(v12, v5, v0, &v22);
    CFStringAppendFormat(Mutable, 0, CFSTR("\t[%ld] endpointName=%@, endpointID=%@\n"), v4, v22, cf[0]);
    v6 = v8;
    if (!FigCFEqual())
    {
      v14 = (const void *)v8[177];
      if (v14)
      {
        CFRelease(v14);
        v8[177] = 0;
      }
      if (v2)
      {
        v8[177] = (uint64_t)CFRetain(v2);
        Count = CFArrayGetCount((CFArrayRef)v2);
      }
      else
      {
        Count = 0;
        v8[177] = 0;
      }
      if (v4 == Count - 1)
      {
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          v6 = v8;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = v20;
        }
      }
      else if (v4 && !(v3 + 5 * (v4 / 5uLL)))
      {
        if (dword_1EE2B3E28)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = v20;
          v6 = v8;
        }
        if (Mutable)
          CFRelease(Mutable);
        Mutable = CFStringCreateMutable(v0, 0);
      }
    }
    if (FigCFEqual())
      break;
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v22)
      CFRelease(v22);
    ++v4;
    --v3;
    if (v2)
      goto LABEL_2;
LABEL_3:
    ;
  }
  v18 = CFRetain(ValueAtIndex);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v22)
    CFRelease(v22);
LABEL_37:
  if (Mutable)
    CFRelease(Mutable);
  if (v2)
    CFRelease(v2);
  return v18;
}

void FigRoutingManagerLogEndpointID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a2)
  {
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
    if (a4 && dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
}

void FigRoutingManagerLogEndpointIDs(uint64_t a1, const __CFArray *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  __CFString *Mutable;
  CFIndex v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a2)
  {
    v6 = *MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFArrayGetCount(a2) >= 1)
    {
      v8 = 0;
      v9 = *MEMORY[0x1E0CA4348];
      do
      {
        CFArrayGetValueAtIndex(a2, v8);
        cf[0] = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v11)
          v11(CMBaseObject, v9, v6, cf);
        CFStringAppendFormat(Mutable, 0, CFSTR("[%d]. %@ "), v8, cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
        ++v8;
      }
      while (v8 < CFArrayGetCount(a2));
    }
    if (a4 && dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Mutable)
      CFRelease(Mutable);
  }
}

void FigRoutingManagerLogRoutingRequestDetails(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t v9;
  CFMutableStringRef Mutable;
  __CFString *v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  uint64_t v19;
  const void *ValueAtIndex;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v23;
  _BOOL4 v24;
  const char *v25;
  _BOOL4 IsEndpointWHAGroupable;
  const char *v27;
  CFStringRef v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString *theString;
  CFTypeRef v31[19];

  v31[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v9 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  theString = Mutable;
  if (a2)
  {
    v11 = Mutable;
    v31[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
    {
      v13(CMBaseObject, *MEMORY[0x1E0CA4348], v9, v31);
      v14 = v31[0];
    }
    else
    {
      v14 = 0;
    }
    IsEndpointWHAGroupable = FigRoutingManagerIsEndpointWHAGroupable(a2);
    v27 = "YES";
    if (!IsEndpointWHAGroupable)
      v27 = "NO";
    CFStringAppendFormat(v11, 0, CFSTR("%@(isWHAGroupable=%s)"), v14, v27);
    if (v31[0])
      CFRelease(v31[0]);
  }
  else if (a3)
  {
    Count = CFArrayGetCount(a3);
    v16 = Count - 1;
    if (Count >= 1)
    {
      v17 = Count;
      v18 = 0;
      v19 = *MEMORY[0x1E0CA4348];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v18);
        v31[0] = 0;
        v21 = FigEndpointGetCMBaseObject();
        v22 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v22)
          v22(v21, v19, v9, v31);
        v23 = v31[0];
        if (v31[0])
        {
          v24 = FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex);
          v25 = "YES";
          if (!v24)
            v25 = "NO";
          if (v16 == v18)
            CFStringAppendFormat(theString, 0, CFSTR("%@(isWHAGroupable=%s)"), v23, v25);
          else
            CFStringAppendFormat(theString, 0, CFSTR("%@(isWHAGroupable=%s), "), v23, v25);
          if (v31[0])
            CFRelease(v31[0]);
        }
        ++v18;
      }
      while (v17 != v18);
    }
  }
  FigCFDictionaryGetInt32IfPresent();
  v28 = FigRoutingManagerCopyClientNameFromPID(0);
  if (a6)
  {
    CFDictionaryGetValue(a6, CFSTR("initiator"));
    CFDictionaryGetValue(a6, CFSTR("avoidAuthPrompt"));
    CFDictionaryGetValue(a6, CFSTR("silentSender"));
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theString)
    CFRelease(theString);
  if (v28)
    CFRelease(v28);
}

CFStringRef FigRoutingManagerCopyClientNameFromPID(int a1)
{
  unsigned int v1;
  _OWORD v3[8];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  if (a1 >= 1)
  {
    v1 = proc_name(a1, v3, 0x80u);
    if ((v1 & 0x80000000) == 0)
      *((_BYTE *)v3 + v1) = 0;
  }
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v3, 0x8000100u);
}

__CFDictionary *FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(CFDictionaryRef theDict)
{
  const __CFAllocator *v1;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v3;
  const void *Value;
  const void *v5;
  uint64_t v6;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = MutableCopy;
  if (MutableCopy)
  {
    if ((Value = CFDictionaryGetValue(MutableCopy, CFSTR("clientRouteRequestID"))) != 0
      && (v5 = CFRetain(Value)) != 0
      || (v6 = MEMORY[0x194035214](),
          v5 = CFStringCreateWithFormat(v1, 0, CFSTR("%lld"), v6),
          CFDictionarySetValue(v3, CFSTR("clientRouteRequestID"), v5),
          v5))
    {
      CFRelease(v5);
    }
  }
  return v3;
}

__CFArray *FigRoutingManagerCreateArrayFromEndpoint(const void *a1)
{
  __CFArray *Mutable;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, a1);
  return Mutable;
}

void FigRoutingManager_CloseRelayCommChannels(uint64_t a1)
{
  _QWORD v2[5];

  if (FigRoutingManager_GetDataTransmissionQueue_once != -1)
    dispatch_once(&FigRoutingManager_GetDataTransmissionQueue_once, &__block_literal_global_3);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __FigRoutingManager_CloseRelayCommChannels_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  v2[4] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManager_CloseRelayCommChannels", (uint64_t)"FigRoutingManager.m", 2544, 0, 0, FigRoutingManager_GetDataTransmissionQueue_dataTransmissionQueue, (uint64_t)v2);
}

void FigRoutingManagerHandleDescriptionChangedForRemoteDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  const void *ValueAtIndex;
  CFTypeRef v9;
  __CFDictionary *v10;
  void *v11;
  CFTypeRef cf;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;

  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  if (a1 && a2)
  {
    FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&v14);
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v14, 0, (uint64_t)&v13);
    v2 = *MEMORY[0x1E0CA4258];
    v3 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v5)
      v5(CMBaseObject, v2, v3, &v16);
    if (v13)
    {
      v6 = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v7)
        v7(v6, v2, v3, &v15);
    }
    if (FigCFEqual() || MXCFStringHasCaseInsensitivePrefix((const __CFString *)v15, (CFStringRef)v16))
    {
      cf = 0;
      FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors((uint64_t)v14, (uint64_t)&cf);
      ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
        v9 = CFRetain(ValueAtIndex);
      else
        v9 = 0;
      v10 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v13, 0);
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v10, 0);
      FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext((uint64_t)v14, (uint64_t)v11);

      FigRoutingManagerContextUtilities_PostNotificationAndRouteDescriptorChangeToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v14);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v9)
        CFRelease(v9);
      if (v10)
        CFRelease(v10);
    }
  }
  if (v16)
  {
    CFRelease(v16);
    v16 = 0;
  }
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (v14)
  {
    CFRelease(v14);
    v14 = 0;
  }
  if (v13)
    CFRelease(v13);
}

void FigRoutingManagerHandleAggregateFailure(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  CFTypeRef cf;
  CFTypeRef v7[21];

  v7[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    cf = 0;
    v7[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v2)
      goto LABEL_12;
    v2(CMBaseObject, *MEMORY[0x1E0CA4398], *MEMORY[0x1E0C9AE00], &cf);
    v3 = cf;
    if (!cf)
      goto LABEL_12;
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = cf;
    }
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v3, 0, (uint64_t)v7);
    if (FigCFEqual())
    {
      if (dword_1EE2B3E28)
      {
        v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMUtility_InterruptSessionsWithRoutingContextUUID();
      FigRoutingManagerPickEndpointsForContext(cf, 0, 0, 0);
    }
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_12:
  if (v7[0])
    CFRelease(v7[0]);
}

void *__getBluetoothEndpointManagerCreateSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (BluetoothAudioLibraryCore_frameworkLibrary)
  {
    v2 = (void *)BluetoothAudioLibraryCore_frameworkLibrary;
  }
  else
  {
    BluetoothAudioLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)BluetoothAudioLibraryCore_frameworkLibrary;
    if (!BluetoothAudioLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "BluetoothEndpointManagerCreate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBluetoothEndpointManagerCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AirPlaySenderLibrary()
{
  uint64_t v0;
  void *v2;

  if (!AirPlaySenderLibraryCore_frameworkLibrary)
    AirPlaySenderLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = AirPlaySenderLibraryCore_frameworkLibrary;
  if (!AirPlaySenderLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *__getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (MediaToolboxLibraryCore_frameworkLibrary)
  {
    v2 = (void *)MediaToolboxLibraryCore_frameworkLibrary;
  }
  else
  {
    MediaToolboxLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)MediaToolboxLibraryCore_frameworkLibrary;
    if (!MediaToolboxLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "FigEndpointManagerForNeroGetShared");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __routingManager_registerContextInternal_block_invoke(uint64_t a1)
{
  const void *v2;

  routingManager_notifyRoutingContextChanged();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t MXSystemAudio_PickRouteDescriptor(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *v9;
  NSObject *v10;
  const void *ContextType;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  CFTypeRef v17;
  CFAllocatorRef *v18;
  uint64_t CMBaseObject;
  void (*v20)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  __CFDictionary *v21;
  CFIndex Count;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  const __CFDictionary *ValueAtIndex;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  const __CFAllocator *v31;
  __CFArray *Mutable;
  __CFArray *v33;
  int v34;
  __CFArray *v35;
  unsigned int NumberOfCurrentOutputPorts;
  CFIndex v37;
  __CFArray *v38;
  const __CFDictionary *v39;
  CFIndex v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, const __CFAllocator *, void **);
  __CFArray *v44;
  __CFArray *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *);
  int v50;
  int IsMirroringScreenAudioSeperateFunctionalityAllowed;
  const void *v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  CFIndex v56;
  uint64_t v57;
  const void *v58;
  OpaqueFigEndpoint *v59;
  OpaqueFigEndpoint *v60;
  const __CFDictionary *v61;
  __CFArray *v62;
  __CFArray *v63;
  uint64_t v64;
  void (*v65)(uint64_t, __CFString *, const __CFAllocator *, void **);
  unsigned int PortFromCFNumber;
  CFArrayRef v67;
  CFIndex v68;
  CFIndex v69;
  CFIndex i;
  const __CFDictionary *v71;
  CFTypeRef v72;
  const void *v74;
  uint64_t v75;
  CFMutableDictionaryRef v76;
  const void *v77;
  const __CFDictionary *v79;
  NSObject *v80;
  unsigned int v81;
  unsigned int v82;
  NSObject *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t FigEndpointFeatures;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  unsigned int v90;
  unsigned int v91;
  const void *v92;
  const void *v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  __CFDictionary *v96;
  const __CFDictionary *v97;
  uint64_t v98;
  __CFArray *v99;
  uint64_t v100;
  __CFArray *v101;
  uint64_t v102;
  CFTypeRef v103;
  os_log_type_t v104;
  os_log_type_t v105[4];
  const void *v106;
  const void *v107;
  CFTypeRef cf;
  os_log_type_t v109[8];
  CFArrayRef theArray;
  os_log_type_t type[8];
  CFTypeRef v112;
  _BYTE v113[12];
  __int16 v114;
  CFTypeRef v115;
  __int16 v116;
  CFTypeRef v117;
  void *value[18];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("RouteName"));
  if (dword_1EE2B3E28)
  {
    LODWORD(v112) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigCFDictionaryGetCount())
  {
    v9 = (const __CFDictionary *)FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
    if (!v9)
    {
      LODWORD(v112) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v9, CFSTR("configUpdateReasonEndedFailed"));
      v14 = 4294954296;
      goto LABEL_148;
    }
  }
  else
  {
    v9 = 0;
  }
  v103 = 0;
  ContextType = (const void *)FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (theDict && (_DWORD)ContextType == 3)
  {
    v13 = CFDictionaryGetValue(theDict, CFSTR("RouteSupportsAirPlayMusic"));
    if (v13 != (const void *)*MEMORY[0x1E0C9AE50])
    {
      if (dword_1EE2B3E28)
        goto LABEL_21;
      goto LABEL_22;
    }
    if (CFDictionaryGetValue(theDict, CFSTR("IsWHAGroupable")) != v13)
    {
      if (dword_1EE2B3E28)
        goto LABEL_21;
      goto LABEL_22;
    }
    if (!FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      if (dword_1EE2B3E28)
      {
LABEL_21:
        LODWORD(v112) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_22:
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
      ContextType = (const void *)FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v103);
      goto LABEL_23;
    }
    if (dword_1EE2B3E28)
    {
      LODWORD(v112) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ContextType = (const void *)FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v103);
  }
LABEL_23:
  v17 = v103;
  if (!v103)
  {
    if (!a1 || (ContextType = CFRetain(a1), v17 = ContextType, (v103 = ContextType) == 0))
    {
      v14 = 0;
      goto LABEL_148;
    }
  }
  FigRoutingContextUtilities_LogCurrentState(ContextType, v12);
  v112 = 0;
  v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v9)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v20 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v20)
      v20(CMBaseObject, *MEMORY[0x1E0CA4348], *v18, &v112);
  }
  v100 = (uint64_t)a3;
  v21 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("preprocessPickEndpoint - "), (uint64_t)v9, 0, 0, (uint64_t)v17, v21);
  *(_QWORD *)type = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)v17, (uint64_t)type);
  if (!*(_QWORD *)type)
    goto LABEL_46;
  Count = CFArrayGetCount(*(CFArrayRef *)type);
  if (Count < 1)
    goto LABEL_46;
  v23 = Count;
  if (CFArrayGetValueAtIndex(*(CFArrayRef *)type, 0) != v9)
  {
    v24 = 1;
    while (1)
    {
      v25 = v24;
      if (v23 == v24)
        break;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)type, v24);
      v24 = v25 + 1;
      if (ValueAtIndex == v9)
      {
        v27 = v25;
        goto LABEL_39;
      }
    }
    v27 = 0;
LABEL_39:
    if (v25 < v23)
      goto LABEL_40;
LABEL_46:
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v17, (uint64_t)&theArray);
    v31 = *v18;
    Mutable = CFArrayCreateMutable(*v18, 0, MEMORY[0x1E0C9B378]);
    v33 = Mutable;
    if (v9)
      CFArrayAppendValue(Mutable, v9);
    v34 = FigCFEqual();
    if (v33)
      CFRelease(v33);
    if (v34)
    {
      if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v17) != 1)
        goto LABEL_72;
      v96 = v21;
      v35 = CMSMUtility_CopyCurrentRouteIdentifiers();
      NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
      if (theArray)
      {
        v37 = CFArrayGetCount(theArray);
        v38 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
        if (v37 >= 1)
        {
          v101 = v35;
          v92 = a1;
          v39 = a4;
          v40 = 0;
          v41 = *MEMORY[0x1E0CA4258];
          do
          {
            CFArrayGetValueAtIndex(theArray, v40);
            value[0] = 0;
            v42 = FigEndpointGetCMBaseObject();
            v43 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
            if (v43)
              v43(v42, v41, v31, value);
            if (value[0])
            {
              CFArrayAppendValue(v38, value[0]);
              if (value[0])
                CFRelease(value[0]);
            }
            ++v40;
          }
          while (v37 != v40);
          a4 = v39;
          a1 = v92;
          v35 = v101;
        }
      }
      else
      {
        v38 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
      }
      if (FigCFEqual())
      {
        v44 = 0;
        LODWORD(v45) = 0;
        v46 = 1;
      }
      else
      {
        v93 = a1;
        v95 = a4;
        v99 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
        v102 = NumberOfCurrentOutputPorts;
        if (NumberOfCurrentOutputPorts)
        {
          v56 = 0;
          v57 = *MEMORY[0x1E0CA3A80];
          v98 = *MEMORY[0x1E0CA3A58];
          do
          {
            v58 = CFArrayGetValueAtIndex(v35, v56);
            v59 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v58, 0, v57, (uint64_t)v17);
            if (v59)
            {
              v60 = v59;
              v61 = v9;
              v62 = v38;
              v63 = v35;
              value[0] = 0;
              v64 = FigEndpointGetCMBaseObject();
              v65 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
              if (v65)
                v65(v64, CFSTR("VAE_PortType"), v31, value);
              PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)value[0]);
              if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
              {
                CFRelease(v60);
                v60 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v58, 1, v98, (uint64_t)v17);
              }
              v35 = v63;
              v38 = v62;
              if (value[0])
                CFRelease(value[0]);
              v9 = v61;
              if (v60)
              {
                CFArrayAppendValue(v99, v60);
                CFRelease(v60);
              }
            }
            ++v56;
          }
          while (v102 != v56);
        }
        v44 = v99;
        if (v99)
        {
          a4 = v95;
          if (FigCFEqual())
          {
            v46 = 0;
            LODWORD(v45) = 1;
            a1 = v93;
          }
          else
          {
            v45 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v99, 0);
            FigRoutingManagerContextUtilities_SetPickedEndpoints(v17, v99, 0, 0, (uint64_t)v45);
            if (dword_1EE2B3E28)
            {
              *(_DWORD *)v109 = 0;
              LOBYTE(cf) = 0;
              v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v84 = *(_DWORD *)v109;
              if (os_log_type_enabled(v83, (os_log_type_t)cf))
                v85 = v84;
              else
                v85 = v84 & 0xFFFFFFFE;
              if (v85)
              {
                *(_DWORD *)v113 = 136315138;
                *(_QWORD *)&v113[4] = "mxSystemAudio_preprocessPickEndpoint";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v44 = v99;
            }
            a1 = v93;
            if (v45)
            {
              CFRelease(v45);
              v46 = 0;
              LODWORD(v45) = 0;
            }
            else
            {
              v46 = 0;
            }
          }
        }
        else
        {
          LODWORD(v45) = 0;
          v46 = 1;
          a1 = v93;
          a4 = v95;
        }
      }
      if (v38)
        CFRelease(v38);
      if (v35)
        CFRelease(v35);
      v21 = v96;
      if ((v46 & 1) == 0)
        CFRelease(v44);
      if ((_DWORD)v45)
      {
LABEL_72:
        FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v17, v21, a4);
        v14 = 0;
        goto LABEL_138;
      }
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v17, 1);
    FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint((uint64_t)a1, (uint64_t)v17, (uint64_t)v9, (uint64_t)v21, (uint64_t)a4);
    if (!v9)
    {
      if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v17) == 1)
        v14 = 4294954296;
      else
        v14 = mxSystemAudio_processPickEndpoint(0, v17, v21, a4);
LABEL_138:
      v67 = theArray;
      if (theArray)
        CFRelease(theArray);
      goto LABEL_140;
    }
    *(_QWORD *)v109 = 0;
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v9))
    {
      v48 = FigEndpointGetCMBaseObject();
      v49 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
      if (v49)
        v49(v48, CFSTR("VAE_FigOutputDeviceName"), v31, v109);
    }
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)v9)
      && (!FigRoutingManagerIsEndpointOfType((uint64_t)v9) || !FigCFEqual()))
    {
      if (FigRoutingManagerIsEndpointOfType((uint64_t)v9)
        || FigRoutingManagerIsEndpointOfType((uint64_t)v9))
      {
        v14 = mxSystemAudio_processPickEndpoint(v9, v17, v21, a4);
      }
      else
      {
        v14 = 0;
      }
LABEL_136:
      if (*(_QWORD *)v109)
        CFRelease(*(CFTypeRef *)v109);
      goto LABEL_138;
    }
    v107 = 0;
    cf = 0;
    FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v107, &cf, 0);
    v50 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)cf);
    IsMirroringScreenAudioSeperateFunctionalityAllowed = MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed();
    v52 = v107;
    if (IsMirroringScreenAudioSeperateFunctionalityAllowed && v107 && v50 == 2)
    {
      if (FigCFEqual())
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v106) = 0;
          v105[0] = OS_LOG_TYPE_DEFAULT;
          v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v54 = v106;
          if (os_log_type_enabled(v53, v105[0]))
            v55 = v54;
          else
            v55 = v54 & 0xFFFFFFFE;
          if (v55)
          {
            *(_DWORD *)v113 = 136315394;
            *(_QWORD *)&v113[4] = "mxSystemAudio_preprocessPickEndpoint";
            v114 = 2114;
            v115 = v112;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        value[0] = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v17, (uint64_t)v9, (uint64_t)value);
        FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v9, (uint64_t)v17);
        MXSystemMirroring_iOSHandleEndpointAudioActivation(v9, FigEndpointFeatures, (uint64_t)value[0], v17, v100);
        FigRoutingContextUtilities_LogCurrentState(v87, v88);
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
        if (v21)
          CFRelease(v21);
        if (v112)
        {
          CFRelease(v112);
          v112 = 0;
        }
        if (*(_QWORD *)type)
          CFRelease(*(CFTypeRef *)type);
        v14 = 0;
        goto LABEL_146;
      }
      v94 = a4;
      v97 = v21;
      v52 = v107;
    }
    else
    {
      v94 = a4;
      v97 = v21;
    }
    if (!v52 || FigRoutingManagerUtilities_IsCurrentRouteHandoff())
    {
      value[0] = 0;
      *(_QWORD *)v113 = 0;
      FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(-1, (CFMutableArrayRef *)value, (CFMutableArrayRef *)v113, 0, 0);
      if (value[0])
      {
        v68 = CFArrayGetCount((CFArrayRef)value[0]);
        if (v68 >= 1)
        {
          v69 = v68;
          for (i = 0; i != v69; ++i)
          {
            v71 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value[0], i);
            v72 = CFArrayGetValueAtIndex(*(CFArrayRef *)v113, i);
            if (v71 != v9 || v72 != v17)
            {
              v74 = v72;
              v75 = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v71, (uint64_t)v72);
              v76 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              FigCFDictionarySetValue();
              v106 = 0;
              FigRoutingManagerCreateEndpointDeactivateCompletionContext(v74, &v106);
              FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Preprocess - Calling to deactivate endpoint with name="), (uint64_t)v71, 0, 1);
              FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v74, (uint64_t)v71, (uint64_t)CFSTR("configUpdateReasonEndedUserCancelled"));
              FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)v71, v75, (uint64_t)v76, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, (uint64_t)v106);
              if (v76)
                CFRelease(v76);
            }
          }
        }
      }
      v21 = v97;
      v14 = mxSystemAudio_processPickEndpoint(v9, v17, v97, v94);
      if (value[0])
      {
        CFRelease(value[0]);
        value[0] = 0;
      }
      v77 = *(const void **)v113;
      if (!*(_QWORD *)v113)
        goto LABEL_134;
      goto LABEL_133;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v17, 2);
    CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)v17);
    v106 = 0;
    FigEndpointCopyProperty((uint64_t)v107, *MEMORY[0x1E0CA4348], (uint64_t)v31, (uint64_t)&v106);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v107))
    {
      v79 = v94;
      v21 = v97;
      if (dword_1EE2B3E28)
      {
        *(_DWORD *)v105 = 0;
        v104 = OS_LOG_TYPE_DEFAULT;
        v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v81 = *(_DWORD *)v105;
        if (os_log_type_enabled(v80, v104))
          v82 = v81;
        else
          v82 = v81 & 0xFFFFFFFE;
        if (v82)
        {
          *(_DWORD *)v113 = 136315650;
          *(_QWORD *)&v113[4] = "mxSystemAudio_preprocessPickEndpoint";
          v114 = 2114;
          v115 = v106;
          v116 = 2114;
          v117 = v112;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      value[0] = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)cf, (uint64_t)v107, (uint64_t)value);
      FigRoutingManager_iOSDeactivateEndpoint(v107, (uint64_t)value[0]);
      if (v50 == 1)
      {
LABEL_194:
        v14 = mxSystemAudio_processPickEndpoint(v9, v17, v21, v79);
        v77 = v106;
        if (!v106)
        {
LABEL_134:
          if (cf)
            CFRelease(cf);
          goto LABEL_136;
        }
LABEL_133:
        CFRelease(v77);
        goto LABEL_134;
      }
    }
    else
    {
      v79 = v94;
      v21 = v97;
      if (!FigRoutingManagerIsEndpointOfType((uint64_t)v107))
        goto LABEL_194;
      if (dword_1EE2B3E28)
      {
        *(_DWORD *)v105 = 0;
        v104 = OS_LOG_TYPE_DEFAULT;
        v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v90 = *(_DWORD *)v105;
        if (os_log_type_enabled(v89, v104))
          v91 = v90;
        else
          v91 = v90 & 0xFFFFFFFE;
        if (v91)
        {
          *(_DWORD *)v113 = 136315394;
          *(_QWORD *)&v113[4] = "mxSystemAudio_preprocessPickEndpoint";
          v114 = 2114;
          v115 = v112;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v107, cf, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
      CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)cf);
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
    goto LABEL_194;
  }
  v27 = 0;
LABEL_40:
  if (dword_1EE2B3E28)
  {
    LODWORD(theArray) = 0;
    v109[0] = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v29 = theArray;
    if (os_log_type_enabled(v28, v109[0]))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if (v30)
    {
      *(_DWORD *)v113 = 136315394;
      *(_QWORD *)&v113[4] = "mxSystemAudio_preprocessPickEndpoint";
      v114 = 2114;
      v115 = v112;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  value[0] = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)v17, v27, (uint64_t)value);
  FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)v17, v27);
  FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)v17, (uint64_t)value[0]);
  FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v17, v21, a4);
  v67 = (CFArrayRef)value[0];
  if (value[0])
    CFRelease(value[0]);
  v14 = 0;
LABEL_140:
  FigRoutingContextUtilities_LogCurrentState(v67, v47);
  if (v21)
    CFRelease(v21);
  if (v112)
  {
    CFRelease(v112);
    v112 = 0;
  }
  if (*(_QWORD *)type)
    CFRelease(*(CFTypeRef *)type);
LABEL_146:
  if (v103)
    CFRelease(v103);
LABEL_148:
  if (v9)
    CFRelease(v9);
  return v14;
}

uint64_t FigEndpointCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointGetCMBaseObject();
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(CMBaseObject, a2, a3, a4);
  return result;
}

uint64_t mxSystemAudio_processPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t ContextType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  CFTypeRef cf;

  ContextType = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 3);
  v10 = ContextType;
  if (a1)
  {
    if (!(_DWORD)ContextType)
    {
      ContextType = FigRoutingManager_iOSActivateEndpoint(a1, a2, a3, a4);
      v10 = ContextType;
    }
  }
  else
  {
    ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
    if ((_DWORD)ContextType)
    {
      cf = 0;
      ContextType = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&cf);
      if (cf)
      {
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, 0);
        v12 = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)cf, (uint64_t)&v12);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
        {
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Going to deactivate endpoint with name="), (uint64_t)cf, (uint64_t)CFSTR("because user selected NULL"), 1);
          FigRoutingManager_iOSDeactivateEndpoint(cf, v12);
        }
        ContextType = (uint64_t)cf;
        if (cf)
          CFRelease(cf);
      }
    }
  }
  FigRoutingContextUtilities_LogCurrentState(ContextType, v9);
  return v10;
}

uint64_t MXFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MXBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MXEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t MXSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

void sub_19369BB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19369C538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMStrings_Check()
{
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  return FigCFEqual();
}

void sub_19369F238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19369F360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19369F444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFDictionary *FVIOKit_CreateIntensityDictionary(float a1)
{
  const __CFAllocator *v1;
  __CFDictionary *Mutable;
  CFNumberRef v3;
  CFNumberRef v4;
  BOOL v5;
  __CFDictionary *result;
  unsigned int valuePtr;

  valuePtr = vcvts_n_s32_f32(a1, 0x10uLL);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
  v4 = v3;
  if (Mutable)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    CFDictionarySetValue(Mutable, CFSTR("intensity"), v3);
LABEL_9:
    CFRelease(v4);
    return Mutable;
  }
  if (Mutable)
    CFRelease(Mutable);
  Mutable = 0;
  result = 0;
  if (v4)
    goto LABEL_9;
  return result;
}

__CFArray *FVIOKit_VibePatternArrayCreateDefault(float a1)
{
  __CFArray *Mutable;
  __CFDictionary *IntensityDictionary;
  __CFDictionary *v4;
  BOOL v5;
  __CFArray *result;
  const void *v7;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B378]);
  IntensityDictionary = FVIOKit_CreateIntensityDictionary(a1);
  v4 = IntensityDictionary;
  if (Mutable)
    v5 = IntensityDictionary == 0;
  else
    v5 = 1;
  if (!v5)
  {
    CFArrayAppendValue(Mutable, IntensityDictionary);
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0C9AE50]);
    v7 = (const void *)*MEMORY[0x1E0C9AE40];
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0C9AE40]);
    CFArrayAppendValue(Mutable, v7);
LABEL_9:
    CFRelease(v4);
    return Mutable;
  }
  if (Mutable)
    CFRelease(Mutable);
  Mutable = 0;
  result = 0;
  if (v4)
    goto LABEL_9;
  return result;
}

uint64_t FVIOKit_ConvertFigTimeToMillisec(CMTime *a1)
{
  CMTimeValue value;
  CMTime v3;
  CMTime v4;

  memset(&v4, 0, sizeof(v4));
  v3 = *a1;
  CMTimeConvertScale(&v4, &v3, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  if ((v4.flags & 0x1D) != 1)
    return 0;
  value = v4.value;
  if (v4.value >= 0x7FFFFFFF)
    value = 0x7FFFFFFFLL;
  return value & ~(value >> 63);
}

uint64_t FVIOKit_StartIOServiceVibration(uint64_t a1, int a2, int a3, int a4, float a5)
{
  int v6;
  int v7;
  __CFArray *Default;
  __CFArray *v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  const void **v16;
  uint64_t v17;
  int v19;
  int valuePtr;

  if (!*(_DWORD *)(a1 + 24))
    return FigSignalErrorAt();
  v6 = a2 <= 1 ? 1 : a2;
  v7 = a3 <= 1 ? 1 : a3;
  v19 = v7;
  valuePtr = v6;
  if (!*(_QWORD *)(a1 + 32))
    return FigSignalErrorAt();
  Default = FVIOKit_VibePatternArrayCreateDefault(a5);
  if (!Default)
    return FigSignalErrorAt();
  v10 = Default;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("hertz_millisecs"), Default);
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (v12
    && (v13 = v12,
        CFArraySetValueAtIndex(v10, 1, v12),
        CFRelease(v13),
        (v14 = CFNumberCreate(v11, kCFNumberIntType, &v19)) != 0))
  {
    v15 = v14;
    CFArraySetValueAtIndex(v10, 3, v14);
    CFRelease(v15);
    v16 = (const void **)MEMORY[0x1E0C9AE40];
    if (a4)
      v16 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("repeat"), *v16);
    if (*(_BYTE *)(a1 + 20))
    {
      notify_set_state(*(_DWORD *)(a1 + 16), 1uLL);
      notify_post("com.apple.coremedia.vibration");
    }
    FigVibratorPostNotification(CFSTR("VibeWillStart"));
    IORegistryEntrySetCFProperties(*(_DWORD *)(a1 + 24), *(CFTypeRef *)(a1 + 32));
    v17 = 0;
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  CFRelease(v10);
  return v17;
}

uint64_t FVIOKit_StartIOServiceVibrationWithPattern(uint64_t a1, void *value)
{
  __CFDictionary *v3;

  if (!value)
    return FigSignalErrorAt();
  if (!*(_DWORD *)(a1 + 24))
    return FigSignalErrorAt();
  v3 = *(__CFDictionary **)(a1 + 32);
  if (!v3)
    return FigSignalErrorAt();
  CFDictionarySetValue(v3, CFSTR("hertz_millisecs"), value);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("repeat"), (const void *)*MEMORY[0x1E0C9AE40]);
  if (*(_BYTE *)(a1 + 20))
  {
    notify_set_state(*(_DWORD *)(a1 + 16), 1uLL);
    notify_post("com.apple.coremedia.vibration");
  }
  FigVibratorPostNotification(CFSTR("VibeWillStart"));
  IORegistryEntrySetCFProperties(*(_DWORD *)(a1 + 24), *(CFTypeRef *)(a1 + 32));
  return 0;
}

uint64_t FVIOKit_StopVibrator(uint64_t a1)
{
  io_registry_entry_t v2;
  CFDictionaryRef v3;
  NSObject *v4;
  const void *v5;
  _QWORD v7[6];

  v2 = *(_DWORD *)(a1 + 24);
  if (!v2)
    return FigSignalErrorAt();
  IORegistryEntrySetCFProperties(v2, *(CFTypeRef *)(a1 + 40));
  if (*(_BYTE *)(a1 + 20))
  {
    notify_set_state(*(_DWORD *)(a1 + 16), 0);
    notify_post("com.apple.coremedia.vibration");
  }
  FigVibratorPostNotification(CFSTR("VibeWillStop"));
  if (*(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 120))
  {
    v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigVibratorNotificationKey_VibeStopped_Context, (const void **)(a1 + 120), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v4 = *(NSObject **)(a1 + 8);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = __FVIOKit_StopVibrator_block_invoke;
    v7[3] = &__block_descriptor_tmp;
    v7[4] = a1;
    v7[5] = v3;
    MXDispatchAsync((uint64_t)"FVIOKit_StopVibrator", (uint64_t)"FigVibrator_IOKit.c", 250, 0, 0, v4, (uint64_t)v7);
    v5 = *(const void **)(a1 + 120);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 120) = 0;
    }
  }
  return 0;
}

uint64_t FVIOKit_PlayVibration(CMTime *a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  CMTimeEpoch v11;
  uint64_t v12;
  __int128 v13;
  double Seconds;
  double v15;
  Float64 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t started;
  BOOL v21;
  double Current;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int32_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  float v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  dispatch_time_t v38;
  __int128 v39;
  __int128 v40;
  const void *v41;
  __int128 v43;
  __int128 v44;
  CMTime rhs;
  CMTime time2;
  CMTime time1;

  if (!gFVInfo)
    return 4294950806;
  if (a5 >= 0.0 && a5 <= 1.0)
  {
    if ((a1->flags & 0x1D) != 1)
      return FigSignalErrorAt();
    time1 = *a1;
    v44 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
    v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    time2.epoch = v11;
    if (CMTimeCompare(&time1, &time2) == -1)
      return FigSignalErrorAt();
    v12 = MEMORY[0x1940352F8](*(_QWORD *)gFVInfo);
    if (!(_DWORD)v12)
    {
      if ((a2->flags & 0x1D) == 1
        && (time1 = *a2, *(_OWORD *)&time2.value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == 1)
        && (a3->flags & 0x1D) == 1
        && (time1 = *a3, *(_OWORD *)&time2.value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == 1))
      {
        time1 = *a1;
        time2 = *a2;
        if (CMTimeCompare(&time1, &time2) == -1
          || (time1 = *a2, time2 = *a3, CMTimeCompare(&time1, &time2) == -1)
          || (time1 = *a3, *(_OWORD *)&time2.value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == -1))
        {
          started = 4294950805;
          goto LABEL_53;
        }
        time1 = *a2;
        time2 = *(CMTime *)(gFVInfo + 72);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          memset(&time1, 0, sizeof(time1));
          time2 = *(CMTime *)(gFVInfo + 48);
          CMTimeMultiply(&time1, &time2, 2);
          time2 = *a2;
          rhs = time1;
          if (CMTimeCompare(&time2, &rhs) == -1)
            *a2 = time1;
        }
        else
        {
          v13 = *(_OWORD *)(gFVInfo + 72);
          a2->epoch = *(_QWORD *)(gFVInfo + 88);
          *(_OWORD *)&a2->value = v13;
        }
        time1 = *a3;
        time2 = *(CMTime *)(gFVInfo + 48);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          v43 = *(_OWORD *)(gFVInfo + 48);
          a3->epoch = *(_QWORD *)(gFVInfo + 64);
          *(_OWORD *)&a3->value = v43;
        }
        memset(&time1, 0, sizeof(time1));
        time2 = *a2;
        rhs = *(CMTime *)(gFVInfo + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
        time2 = *a3;
        rhs = time1;
        if (CMTimeCompare(&time2, &rhs) != 1)
        {
LABEL_24:
          if (!*(_BYTE *)(gFVInfo + 112))
          {
            if (IOPMAssertionCreateWithName(CFSTR("NoIdleSleepAssertion"), 0xFFu, CFSTR("coremedia-vibrating"), (IOPMAssertionID *)(gFVInfo + 108)))
            {
              v21 = 0;
            }
            else
            {
              v21 = *(_DWORD *)(gFVInfo + 108) != 0;
            }
            *(_BYTE *)(gFVInfo + 104) = v21;
            time1 = *a1;
            time2 = *a2;
            v27 = CMTimeCompare(&time1, &time2);
            v28 = gFVInfo;
            if (v27 == 1)
            {
              time1 = *a2;
              v29 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              time1 = *a3;
              v30 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              v31 = v29 - v30;
              v32 = v28;
              v33 = a5;
              v34 = 1;
            }
            else
            {
              time1 = *a3;
              v30 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              v32 = v28;
              v33 = a5;
              v31 = 0;
              v34 = 0;
            }
            started = FVIOKit_StartIOServiceVibration(v32, v30, v31, v34, v33);
            v35 = gFVInfo;
            if ((_DWORD)started)
            {
              if (*(_BYTE *)(gFVInfo + 104))
              {
                IOPMAssertionRelease(*(_DWORD *)(gFVInfo + 108));
                v36 = gFVInfo;
                *(_BYTE *)(gFVInfo + 104) = 0;
                *(_DWORD *)(v36 + 108) = 0;
              }
              goto LABEL_53;
            }
            *(_BYTE *)(gFVInfo + 112) = 1;
            *(_BYTE *)(v35 + 192) = 0;
            v37 = *(const void **)(v35 + 120);
            *(_QWORD *)(v35 + 120) = a4;
            if (a4)
              CFRetain(a4);
            if (v37)
              CFRelease(v37);
            time2 = *a1;
            CMTimeConvertScale(&time1, &time2, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            *a1 = time1;
            v38 = dispatch_time(0, a1->value);
            dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), (unint64_t)(double)v38, 0xFFFFFFFFFFFFFFFFLL, 0);
            goto LABEL_52;
          }
          if (*(_BYTE *)(gFVInfo + 192))
          {
            started = 4294950801;
LABEL_53:
            MEMORY[0x194035304](*(_QWORD *)gFVInfo);
            return started;
          }
          Current = CFAbsoluteTimeGetCurrent();
          time1 = *a1;
          v23 = Current + CMTimeGetSeconds(&time1);
          v24 = gFVInfo;
          if (*(_BYTE *)(gFVInfo + 192))
          {
            if (*(double *)(gFVInfo + 136) < v23)
            {
              *(double *)(gFVInfo + 136) = v23;
              v25 = *(_OWORD *)&a3->value;
              *(_QWORD *)(v24 + 184) = a3->epoch;
              *(_OWORD *)(v24 + 168) = v25;
              v26 = *(_OWORD *)&a2->value;
              *(_QWORD *)(v24 + 160) = a2->epoch;
              *(_OWORD *)(v24 + 144) = v26;
            }
            if (*(float *)(v24 + 208) >= a5)
              goto LABEL_48;
          }
          else
          {
            *(double *)(gFVInfo + 136) = v23;
            v39 = *(_OWORD *)&a3->value;
            *(_QWORD *)(v24 + 184) = a3->epoch;
            *(_OWORD *)(v24 + 168) = v39;
            v40 = *(_OWORD *)&a2->value;
            *(_QWORD *)(v24 + 160) = a2->epoch;
            *(_OWORD *)(v24 + 144) = v40;
          }
          *(float *)(v24 + 208) = a5;
LABEL_48:
          *(_BYTE *)(v24 + 192) = 1;
          v41 = *(const void **)(v24 + 200);
          *(_QWORD *)(v24 + 200) = a4;
          if (a4)
            CFRetain(a4);
          if (v41)
            CFRelease(v41);
LABEL_52:
          started = 0;
          goto LABEL_53;
        }
      }
      else
      {
        time1 = *a1;
        time2 = *(CMTime *)(gFVInfo + 72);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          time1 = *a1;
          time2 = *(CMTime *)(gFVInfo + 48);
          if (CMTimeCompare(&time1, &time2) == -1)
          {
            v17 = *(_OWORD *)(gFVInfo + 48);
            a1->epoch = *(_QWORD *)(gFVInfo + 64);
            *(_OWORD *)&a1->value = v17;
          }
          v18 = *(_OWORD *)&a1->value;
          a3->epoch = a1->epoch;
          *(_OWORD *)&a3->value = v18;
          v19 = *(_OWORD *)(gFVInfo + 72);
          a2->epoch = *(_QWORD *)(gFVInfo + 88);
          *(_OWORD *)&a2->value = v19;
          goto LABEL_24;
        }
        time1 = *a1;
        Seconds = CMTimeGetSeconds(&time1);
        time1 = *(CMTime *)(gFVInfo + 72);
        v15 = ceil(Seconds / CMTimeGetSeconds(&time1));
        time1 = *a1;
        v16 = CMTimeGetSeconds(&time1);
        CMTimeMakeWithSeconds(&time1, v16 / v15, 1000);
        *a2 = time1;
        time2 = *a2;
        rhs = *(CMTime *)(gFVInfo + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
      }
      *a3 = time1;
      goto LABEL_24;
    }
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t FVIOKit_PlayVibrationWithPattern(const __CFArray *a1, const void *a2, float a3)
{
  uint64_t *v3;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t Count;
  CFIndex v10;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  CFIndex v13;
  const void *v14;
  const void *ValueAtIndex;
  const void *v16;
  CFTypeID TypeID;
  __CFDictionary *IntensityDictionary;
  __CFDictionary *v19;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  CFNumberRef v23;
  CFNumberRef v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  const __CFBoolean *v28;
  CFNumberRef v29;
  CFIndex v30;
  CFIndex v31;
  int v32;
  CFIndex i;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  uint64_t v37;
  IOReturn v38;
  uint64_t v39;
  BOOL v40;
  double v41;
  CMTime *v42;
  CMTime *v43;
  const void *v44;
  uint64_t v45;
  const void *v46;
  uint64_t started;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  dispatch_time_t v51;
  CMTime valuePtr;
  int v55;

  v55 = 0;
  v3 = &sCategoryToPriorityMapForTriangle;
  if (!gFVInfo)
    return 4294950806;
  v5 = a3 < 0.0 || a3 > 1.0;
  if (!v5 && a1)
  {
    valuePtr = *(CMTime *)(gFVInfo + 72);
    v7 = FVIOKit_ConvertFigTimeToMillisec(&valuePtr);
    valuePtr = *(CMTime *)(gFVInfo + 48);
    v55 = FVIOKit_ConvertFigTimeToMillisec(&valuePtr);
    v8 = MEMORY[0x1940352F8](*(_QWORD *)gFVInfo);
    if ((_DWORD)v8)
      return v8;
    Count = CFArrayGetCount(a1);
    if (Count < 2 || (v10 = Count, (Count & 1) != 0))
    {
      v37 = FigSignalErrorAt();
      Mutable = 0;
    }
    else
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v13 = 0;
        v14 = (const void *)*MEMORY[0x1E0C9AE40];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
          if (!ValueAtIndex)
            goto LABEL_78;
          v16 = ValueAtIndex;
          TypeID = CFBooleanGetTypeID();
          if (TypeID != CFGetTypeID(v16))
            goto LABEL_78;
          if (CFBooleanGetValue((CFBooleanRef)v16) == 1)
          {
            IntensityDictionary = FVIOKit_CreateIntensityDictionary(a3);
            if (!IntensityDictionary)
              goto LABEL_78;
            v19 = IntensityDictionary;
            CFArrayAppendValue(Mutable, IntensityDictionary);
            CFRelease(v19);
          }
          else
          {
            CFArrayAppendValue(Mutable, v16);
          }
          v20 = CFArrayGetValueAtIndex(a1, v13 | 1);
          if (!v20 || (v21 = v20, v22 = CFNumberGetTypeID(), v22 != CFGetTypeID(v21)))
          {
LABEL_78:
            v37 = FigSignalErrorAt();
            v3 = &sCategoryToPriorityMapForTriangle;
            goto LABEL_75;
          }
          if (CFBooleanGetValue((CFBooleanRef)v16) == 1)
          {
            LODWORD(valuePtr.value) = 0;
            CFNumberGetValue((CFNumberRef)v21, kCFNumberSInt32Type, &valuePtr);
            if (SLODWORD(valuePtr.value) <= v7)
            {
              if (SLODWORD(valuePtr.value) < v55)
                LODWORD(valuePtr.value) = v55;
            }
            else
            {
              LODWORD(valuePtr.value) = v7;
            }
            v24 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
            CFArrayAppendValue(Mutable, v24);
            if (v24)
              CFRelease(v24);
            v13 += 2;
            if (v13 >= v10)
            {
              v28 = (const __CFBoolean *)CFArrayGetValueAtIndex(a1, 0);
            }
            else
            {
              v25 = CFArrayGetValueAtIndex(a1, v13);
              if (!v25)
                goto LABEL_78;
              v26 = v25;
              v27 = CFBooleanGetTypeID();
              if (v27 != CFGetTypeID(v26))
                goto LABEL_78;
              v28 = (const __CFBoolean *)v26;
            }
            if (CFBooleanGetValue(v28) == 1)
            {
              v29 = CFNumberCreate(v11, kCFNumberSInt32Type, &v55);
              CFArrayAppendValue(Mutable, v14);
              CFArrayAppendValue(Mutable, v29);
              if (v29)
                CFRelease(v29);
            }
          }
          else
          {
            LODWORD(valuePtr.value) = 0;
            CFNumberGetValue((CFNumberRef)v21, kCFNumberSInt32Type, &valuePtr);
            if (SLODWORD(valuePtr.value) < v55)
              LODWORD(valuePtr.value) = v55;
            v23 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
            CFArrayAppendValue(Mutable, v23);
            if (v23)
              CFRelease(v23);
            v13 += 2;
          }
        }
        while (v13 < v10);
        v30 = CFArrayGetCount(Mutable);
        v3 = &sCategoryToPriorityMapForTriangle;
        if (v30 < 1)
        {
          v32 = 0;
        }
        else
        {
          v31 = v30;
          v32 = 0;
          for (i = 0; i != v31; ++i)
          {
            v34 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
            if (v34)
            {
              v35 = v34;
              v36 = CFNumberGetTypeID();
              if (v36 == CFGetTypeID(v35))
              {
                LODWORD(valuePtr.value) = 0;
                CFNumberGetValue(v35, kCFNumberSInt32Type, &valuePtr);
                v32 += LODWORD(valuePtr.value);
              }
            }
          }
        }
        if (*(_BYTE *)(gFVInfo + 112))
        {
          if (*(_BYTE *)(gFVInfo + 192))
          {
            v37 = 4294950801;
            goto LABEL_75;
          }
          v41 = CFAbsoluteTimeGetCurrent() + (float)((float)v32 / 1000.0);
          v42 = (CMTime *)gFVInfo;
          if (!*(_BYTE *)(gFVInfo + 192) || *(double *)(gFVInfo + 136) < v41)
          {
            *(double *)(gFVInfo + 136) = v41;
            CMTimeMake(&valuePtr, 0, 1);
            v42[7] = valuePtr;
            v43 = (CMTime *)gFVInfo;
            CMTimeMake(&valuePtr, 0, 1);
            v43[6] = valuePtr;
            v44 = *(const void **)(gFVInfo + 128);
            *(_QWORD *)(gFVInfo + 128) = Mutable;
            CFRetain(Mutable);
            if (v44)
              CFRelease(v44);
          }
          v45 = gFVInfo;
          if (!*(_BYTE *)(gFVInfo + 192) || *(float *)(gFVInfo + 208) < a3)
            *(float *)(gFVInfo + 208) = a3;
          *(_BYTE *)(v45 + 192) = 1;
          v46 = *(const void **)(v45 + 200);
          *(_QWORD *)(v45 + 200) = a2;
          if (a2)
            CFRetain(a2);
          if (v46)
            CFRelease(v46);
          goto LABEL_74;
        }
        v38 = IOPMAssertionCreateWithName(CFSTR("NoIdleSleepAssertion"), 0xFFu, CFSTR("coremedia-vibrating"), (IOPMAssertionID *)(gFVInfo + 108));
        v39 = gFVInfo;
        if (v38)
          v40 = 0;
        else
          v40 = *(_DWORD *)(gFVInfo + 108) != 0;
        *(_BYTE *)(gFVInfo + 104) = v40;
        started = FVIOKit_StartIOServiceVibrationWithPattern(v39, Mutable);
        v48 = gFVInfo;
        if (!(_DWORD)started)
        {
          *(_BYTE *)(gFVInfo + 112) = 1;
          *(_BYTE *)(v48 + 192) = 0;
          v50 = *(const void **)(v48 + 120);
          *(_QWORD *)(v48 + 120) = a2;
          if (a2)
            CFRetain(a2);
          if (v50)
            CFRelease(v50);
          v51 = dispatch_time(0, 1000000 * v32);
          dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), v51, 0xFFFFFFFFFFFFFFFFLL, 0);
LABEL_74:
          v37 = 0;
          goto LABEL_75;
        }
        v37 = started;
        if (*(_BYTE *)(gFVInfo + 104))
        {
          IOPMAssertionRelease(*(_DWORD *)(gFVInfo + 108));
          v49 = gFVInfo;
          *(_BYTE *)(gFVInfo + 104) = 0;
          *(_DWORD *)(v49 + 108) = 0;
        }
      }
      else
      {
        v37 = FigSignalErrorAt();
      }
    }
LABEL_75:
    MEMORY[0x194035304](*(_QWORD *)v3[437]);
    if (Mutable)
      CFRelease(Mutable);
    return v37;
  }
  return FigSignalErrorAt();
}

const __CFDictionary *FVIOKit_GetVibrationPatternFromDictionary(const __CFDictionary *result, int *a2, float *a3, float *a4, float *a5, const __CFDictionary **a6, char *a7, char *a8)
{
  const __CFDictionary **v10;
  const __CFDictionary *v15;
  const __CFNumber *Value;
  const __CFDictionary *v17;
  char v18;
  const __CFNumber *v19;
  float v20;
  float v21;
  int v22;
  char v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  float v26;
  char *v27;
  const __CFNumber *number;
  int v30;
  float v31;
  float v32;
  uint64_t valuePtr;

  v10 = a6;
  valuePtr = 0x3ECCCCCD3DCCCCCDLL;
  v31 = 0.85;
  v32 = 0.5;
  v30 = 1056964608;
  if (!result)
  {
    v18 = 0;
    v17 = 0;
    v23 = 0;
    *a2 = 1053609165;
    *a3 = 0.5;
    v20 = 0.5;
    *a5 = 0.85;
    goto LABEL_20;
  }
  v15 = result;
  Value = (const __CFNumber *)CFDictionaryGetValue(result, CFSTR("Intensity"));
  result = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("VibePattern"));
  v17 = result;
  if (result)
  {
    v18 = 0;
    v19 = 0;
    valuePtr = 0;
    v20 = 0.0;
    v32 = 0.0;
    v21 = 0.0;
    v22 = 0;
    v30 = 0;
  }
  else
  {
    v27 = a8;
    v24 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("OnDuration"));
    number = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("OffDuration"));
    v25 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("Period"));
    result = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("TotalDuration"));
    v19 = result;
    v20 = 0.5;
    v22 = 1053609165;
    if (v24 && (unint64_t)number | (unint64_t)v25)
    {
      result = (const __CFDictionary *)CFNumberGetValue(v24, kCFNumberFloatType, (char *)&valuePtr + 4);
      if (number)
        result = (const __CFDictionary *)CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
      a8 = v27;
      if (v25)
      {
        result = (const __CFDictionary *)CFNumberGetValue(v25, kCFNumberFloatType, &v32);
        v22 = HIDWORD(valuePtr);
        v18 = 1;
        v21 = v32;
      }
      else
      {
        v22 = HIDWORD(valuePtr);
        v21 = *((float *)&valuePtr + 1) + *(float *)&valuePtr;
        v32 = *((float *)&valuePtr + 1) + *(float *)&valuePtr;
        v18 = 1;
      }
    }
    else
    {
      v18 = 0;
      v21 = 0.5;
      a8 = v27;
    }
  }
  *a2 = v22;
  *a3 = v21;
  if (Value)
  {
    result = (const __CFDictionary *)CFNumberGetValue(Value, kCFNumberFloatType, &v31);
    v26 = v31;
    if (v31 <= 1.0)
    {
      v10 = a6;
      if (v31 < 0.0)
      {
        v31 = 0.0;
        v26 = 0.0;
      }
      goto LABEL_17;
    }
    v31 = 1.0;
    v26 = 1.0;
  }
  else
  {
    v26 = 0.85;
  }
  v10 = a6;
LABEL_17:
  *a5 = v26;
  if (v19)
  {
    result = (const __CFDictionary *)CFNumberGetValue(v19, kCFNumberFloatType, &v30);
    v23 = 1;
    v20 = *(float *)&v30;
  }
  else
  {
    v23 = 0;
  }
LABEL_20:
  *a4 = v20;
  *a7 = v18;
  *a8 = v23;
  *v10 = v17;
  return result;
}

uint64_t FVIOKit_PlayVibrationEndTimeout()
{
  uint64_t result;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  int started;
  const void *v6;
  NSObject *v7;
  dispatch_time_t v8;
  Float64 Seconds;
  uint64_t v10;
  float v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  NSObject *v23;
  CMTime v24;

  if (!gFVInfo)
    return FigSignalErrorAt();
  result = MEMORY[0x1940352F8](*(_QWORD *)gFVInfo);
  if (!(_DWORD)result)
  {
    v1 = gFVInfo;
    if (*(_BYTE *)(gFVInfo + 112))
    {
      if (FVIOKit_StopVibrator(gFVInfo))
        return MEMORY[0x194035304](*(_QWORD *)gFVInfo);
      v1 = gFVInfo;
    }
    if (*(_BYTE *)(v1 + 192))
    {
      v2 = *(double *)(v1 + 136);
      v3 = v2 - CFAbsoluteTimeGetCurrent();
      v4 = *(void **)(gFVInfo + 128);
      if (v4)
      {
        started = FVIOKit_StartIOServiceVibrationWithPattern(gFVInfo, v4);
        v6 = *(const void **)(gFVInfo + 128);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(gFVInfo + 128) = 0;
        }
      }
      else
      {
        v24 = *(CMTime *)(gFVInfo + 144);
        Seconds = CMTimeGetSeconds(&v24);
        v10 = gFVInfo;
        v11 = *(float *)(gFVInfo + 208);
        if (v3 <= Seconds)
        {
          v24 = *(CMTime *)(gFVInfo + 168);
          v13 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          v15 = v10;
          v16 = v11;
          v14 = 0;
          v17 = 0;
        }
        else
        {
          v24 = *(CMTime *)(gFVInfo + 144);
          v12 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          v24 = *(CMTime *)(gFVInfo + 168);
          v13 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          v14 = v12 - v13;
          v15 = v10;
          v16 = v11;
          v17 = 1;
        }
        started = FVIOKit_StartIOServiceVibration(v15, v13, v14, v17, v16);
      }
      if (started)
        return MEMORY[0x194035304](*(_QWORD *)gFVInfo);
      v18 = gFVInfo;
      *(_BYTE *)(gFVInfo + 192) = 0;
      v19 = *(const void **)(v18 + 120);
      v20 = *(const void **)(v18 + 200);
      *(_QWORD *)(v18 + 120) = v20;
      if (v20)
        CFRetain(v20);
      if (v19)
        CFRelease(v19);
      v21 = gFVInfo;
      v22 = *(const void **)(gFVInfo + 200);
      if (v22)
      {
        CFRelease(v22);
        v21 = gFVInfo;
        *(_QWORD *)(gFVInfo + 200) = 0;
      }
      v23 = *(NSObject **)(v21 + 96);
      v8 = dispatch_time(0, (uint64_t)(v3 * 1000000000.0));
      v7 = v23;
    }
    else
    {
      *(_BYTE *)(v1 + 112) = 0;
      if (*(_BYTE *)(v1 + 104))
      {
        IOPMAssertionRelease(*(_DWORD *)(v1 + 108));
        v1 = gFVInfo;
        *(_BYTE *)(gFVInfo + 104) = 0;
        *(_DWORD *)(v1 + 108) = 0;
      }
      v7 = *(NSObject **)(v1 + 96);
      v8 = -1;
    }
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    return MEMORY[0x194035304](*(_QWORD *)gFVInfo);
  }
  return result;
}

uint64_t FigStarkModeControllerRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t uint64;
  uint64_t DerivedStorage;
  uint64_t v14;
  NSObject *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  xpc_object_t xdict;

  xdict = 0;
  os_unfair_lock_lock(&remoteFigStarkModeController_EnsureClientEstablished_lock);
  if (remoteFigStarkModeController_EnsureClientEstablished_err)
    v4 = 1;
  else
    v4 = gFigStarkModeControllerRemoteClient == 0;
  if (v4)
  {
    v5 = objc_alloc(MEMORY[0x1E0C99D80]);
    v6 = (void *)objc_msgSend(v5, "initWithObjectsAndKeys:", CFSTR("ServerConnectionDied"), *MEMORY[0x1E0CA54A0], 0, 0, 0);
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work();
    fig_note_initialize_category_with_default_work();
    v7 = FigXPCRemoteClientCreate();
    remoteFigStarkModeController_EnsureClientEstablished_err = v7;
    if ((_DWORD)v7 || !gFigStarkModeControllerRemoteClient)
      MXSimulateCrash(objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("FigXPCRemoteClientCreate failed with error=%d, gFigStarkModeControllerRemoteClient=%p"), v7, gFigStarkModeControllerRemoteClient), "UTF8String"));

  }
  os_unfair_lock_unlock(&remoteFigStarkModeController_EnsureClientEstablished_lock);
  v8 = remoteFigStarkModeController_EnsureClientEstablished_err;
  if (!remoteFigStarkModeController_EnsureClientEstablished_err)
  {
    FigStarkModeControllerGetClassID();
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
    {
      v8 = v9;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v11 = FigXPCCreateBasicMessage();
      if ((_DWORD)v11 || (v11 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v11))
      {
        v8 = v11;
        goto LABEL_21;
      }
      uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(DerivedStorage + 8))
      {
        v14 = FigSignalErrorAt();
      }
      else
      {
        *(_QWORD *)DerivedStorage = uint64;
        v14 = FigXPCRemoteClientAssociateObject();
      }
      v8 = v14;
      if (!(_DWORD)v14)
      {
        *a3 = 0;
        goto LABEL_21;
      }
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCStarkModeController_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t remoteFigStarkModeController_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v2;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3F88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage()
      || (v2 = FigXPCRemoteClientSendSyncMessage(), FigXPCRemoteClientKillServerOnTimeout(), v2))
    {
      v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigXPCRelease();
}

uint64_t remoteFigStarkModeController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  id v3;
  CFIndex v4;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v5 = " SERVER DIED";
  else
    v5 = "";
  return objc_msgSend(v3, "initWithFormat:", CFSTR("<FigStarkModeControllerRemote %p retainCount: %ld objectID: %016llx%s>"), a1, v4, *(_QWORD *)DerivedStorage, v5);
}

uint64_t remoteFigStarkModeController_GetCurrentMode(uint64_t a1, UInt8 *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[3];
  CFRange v7;

  memset(v6, 0, sizeof(v6));
  ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v6);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCMessageCopyCFData();
    if (!(_DWORD)v4)
    {
      v7.location = 0;
      v7.length = 32;
      CFDataGetBytes(0, v7, a2);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteFigStarkModeController_RequestModeChange(uint64_t a1, uint64_t a2, const char *a3, UInt8 *a4)
{
  uint64_t ObjectID;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  CFRange v15;

  memset(v14, 0, sizeof(v14));
  ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v14);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v12 = ObjectID;
    a3 = 0;
    v8 = 0;
    goto LABEL_15;
  }
  if (a2)
  {
    v8 = MXCFDataCreate((UInt8 *)a2, 72);
    v9 = FigXPCMessageSetCFData();
    if ((_DWORD)v9
      || *(_QWORD *)(a2 + 16) && (v9 = FigXPCMessageSetCFString(), (_DWORD)v9)
      || *(_QWORD *)(a2 + 40) && (v9 = FigXPCMessageSetCFString(), (_DWORD)v9))
    {
      v12 = v9;
      a3 = 0;
      goto LABEL_15;
    }
    if (a3)
      goto LABEL_10;
  }
  else
  {
    v8 = 0;
    if (a3)
    {
LABEL_10:
      a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 0x8000100u);
      FigXPCMessageSetCFString();
    }
  }
  FigXPCMessageSetCFBoolean();
  v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v10)
  {
    v12 = v10;
  }
  else
  {
    v11 = FigXPCMessageCopyCFData();
    v12 = v11;
    if (a4 && !(_DWORD)v11)
    {
      v15.location = 0;
      v15.length = 32;
      CFDataGetBytes(0, v15, a4);
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  if (v8)
    CFRelease(v8);
  if (a3)
    CFRelease(a3);
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteFigStarkModeController_RequestInitialModeChange(uint64_t a1, UInt8 *a2, UInt8 *a3, uint64_t a4, const char *a5, UInt8 *a6)
{
  uint64_t ObjectID;
  uint64_t v12;
  uint64_t v13;
  CFDataRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  CFRange v21;

  memset(v20, 0, sizeof(v20));
  ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v20);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v18 = ObjectID;
    a3 = 0;
    v14 = 0;
    a5 = 0;
    a2 = 0;
    goto LABEL_19;
  }
  if (a2)
  {
    a2 = (UInt8 *)MXCFDataCreate(a2, 12);
    v12 = FigXPCMessageSetCFData();
    if ((_DWORD)v12)
    {
      v18 = v12;
      a3 = 0;
LABEL_35:
      v14 = 0;
      goto LABEL_36;
    }
  }
  if (a3)
  {
    a3 = (UInt8 *)MXCFDataCreate(a3, 12);
    v13 = FigXPCMessageSetCFData();
    if ((_DWORD)v13)
    {
      v18 = v13;
      goto LABEL_35;
    }
  }
  if (a4)
  {
    v14 = MXCFDataCreate((UInt8 *)a4, 72);
    v15 = FigXPCMessageSetCFData();
    if (!(_DWORD)v15)
    {
      if (!*(_QWORD *)(a4 + 16) || (v15 = FigXPCMessageSetCFString(), !(_DWORD)v15))
      {
        if (!*(_QWORD *)(a4 + 40) || (v15 = FigXPCMessageSetCFString(), !(_DWORD)v15))
        {
          if (!a5)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
    }
    v18 = v15;
LABEL_36:
    a5 = 0;
    goto LABEL_19;
  }
  v14 = 0;
  if (a5)
  {
LABEL_14:
    a5 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a5, 0x8000100u);
    FigXPCMessageSetCFString();
  }
LABEL_15:
  v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v16)
  {
    v18 = v16;
  }
  else
  {
    v17 = FigXPCMessageCopyCFData();
    v18 = v17;
    if (a6 && !(_DWORD)v17)
    {
      v21.location = 0;
      v21.length = 32;
      CFDataGetBytes(0, v21, a6);
    }
  }
LABEL_19:
  FigXPCRelease();
  FigXPCRelease();
  if (a2)
    CFRelease(a2);
  if (a3)
    CFRelease(a3);
  if (v14)
    CFRelease(v14);
  if (a5)
    CFRelease(a5);
  FigXPCRemoteClientKillServerOnTimeout();
  return v18;
}

uint64_t remoteXPCStarkModeController_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;
  uint64_t result;

  if (!a2)
    return 4294954315;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v4 = (_QWORD *)DerivedStorage;
  result = 0;
  *a2 = *v4;
  return result;
}

void __mxsmInteruptionActionMapper_setUpInterruptionPriorityDictionaries_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  CelestialGetModelSpecificName();
  v0 = (void *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v0)
  {
    v1 = v0;
    v2 = (void *)objc_msgSend(v0, "objectForKey:", CFSTR("AudioCategoryMap"));
    v3 = (void *)objc_msgSend(v1, "objectForKey:", CFSTR("InterruptionPriorityMap"));

    sCategoryToCategoryMapForTriangle = v2;
    sCategoryToPriorityMapForTriangle = v3;

  }
  CelestialGetModelSpecificName();
  v4 = (void *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v4)
  {
    v7 = v4;
    v5 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("AudioCategoryMap"));
    v6 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("InterruptionPriorityMap"));

    sCategoryToCategoryMapForTipi = v5;
    sCategoryToPriorityMapForTipi = v6;

  }
}

CFStringRef FigRouteDiscovererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRouteDiscoverer %p]"), a1);
}

void FigRoutingManager_iOSEndpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *SharedManager;
  const void *v11;
  const void *v12;
  double v13;
  double v14;
  float v15;
  id v16;
  NSObject *v17;
  __int128 v18;
  _QWORD v19[10];
  __int128 v20;
  uint64_t v21;
  int v22;
  float v23;

  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    v11 = *(const void **)a5;
    v12 = *(const void **)(a5 + 8);
    objc_msgSend(*(id *)(a5 + 32), "timeIntervalSinceNow", *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
  }
  else
  {
    v12 = 0;
    v11 = 0;
    objc_msgSend(0, "timeIntervalSinceNow", 0, 0);
  }
  v14 = v13;
  if (a1)
    CFRetain(a1);
  if (v11)
    CFRetain(v11);
  if (v12)
    CFRetain(v12);
  if ((_QWORD)v18)
    CFRetain((CFTypeRef)v18);
  v15 = fabs(v14) * 1000.0;
  v16 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v17 = *((_QWORD *)SharedManager + 1);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __FigRoutingManager_iOSEndpointActivateCompletionCallback_block_invoke;
  v19[3] = &unk_1E309BDF0;
  v19[4] = v16;
  v19[5] = a1;
  v22 = a4;
  v19[6] = a3;
  v19[7] = a2;
  v23 = v15;
  v19[8] = v11;
  v19[9] = v12;
  v20 = v18;
  v21 = a5;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSEndpointActivateCompletionCallback", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 151, 0, 0, v17, (uint64_t)v19);
}

uint64_t FigRoutingManagerRegisterForFigEndpointNotifications(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (FigRoutingManagerIsEndpointOfType(result)
      || FigRoutingManagerIsEndpointOfType(v1)
      || FigRoutingManagerIsEndpointOfType(v1))
    {
      if (FigRoutingManagerIsEndpointOfType(v1))
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        routingManager_handleAirPlayVolumeControlDidChange();
      }
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
    result = FigRoutingManagerIsEndpointOfType(v1);
    if (!(_DWORD)result)
    {
      result = FigRoutingManagerIsEndpointOfType(v1);
      if (!(_DWORD)result)
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterAddListener();
      }
    }
  }
  return result;
}

void FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(void *a1, char a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v10;
  int IsRoutedToLocalAirplayReceiver;
  CFTypeRef cf;

  if (a1)
  {
    if ((a2 & 2) != 0)
    {
      if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        || !MXSystemMirroring_IsDefaultRouteAirPlayReceiver())
      {
        goto LABEL_8;
      }
      cf = 0;
      FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
      IsRoutedToLocalAirplayReceiver = FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)cf);
      if (cf)
        CFRelease(cf);
      if (IsRoutedToLocalAirplayReceiver)
LABEL_8:
        FigRoutingManagerHandleEndpointAudioActivation(a1, v10, a3, a4, a5);
    }
    if ((a2 & 1) != 0)
    {
      FigRoutingManagerHandleEndpointScreenActivation(a1, a4, a5);
      if ((a2 & 4) == 0)
      {
LABEL_11:
        if ((a2 & 0x10) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((a2 & 4) == 0)
    {
      goto LABEL_11;
    }
    FigRoutingManagerHandleEndpointPlaybackActivation(a1, a4, a5);
    if ((a2 & 0x10) == 0)
      return;
LABEL_12:
    FigRoutingManagerHandleEndpointControlActivation(a1, a4, a5);
  }
}

uint64_t FigRoutingManager_iOSIsCarPlayAuxStreamSupported()
{
  CFTypeRef v0;
  CFTypeRef v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  if (v1)
    FigEndpointCopyStreamsForTypeAndSubType();
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
    CFRelease(v1);
  if (v0)
    CFRelease(v0);
  return 0;
}

uint64_t FigRoutingManager_iOSDeactivateEndpoint(const void *a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  void *SharedManager;
  const __CFAllocator *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *);
  const void *v13;
  NSObject *v15;
  uint64_t FigEndpointFeatures;
  CFMutableDictionaryRef Mutable;
  os_log_type_t type[8];
  _QWORD v19[5];
  os_log_type_t v20;
  CFTypeRef cf;
  CFTypeRef v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294954315;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  cf = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
    v9(CMBaseObject, *MEMORY[0x1E0CA4348], v7, &cf);
  if (dword_1EE2B3E28)
  {
    *(_DWORD *)type = 0;
    v20 = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v23[0] = 0;
  v11 = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v12)
  {
    v12(v11, *MEMORY[0x1E0CA4260], v7, v23);
    v13 = (const void *)v23[0];
  }
  else
  {
    v13 = 0;
  }
  if (v13 != (const void *)*MEMORY[0x1E0C9AE50])
  {
    v5 = 0;
    if (!v13)
      return v5;
LABEL_18:
    CFRelease(v13);
    return v5;
  }
  CFRetain(a1);
  v15 = *((_QWORD *)SharedManager + 1);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __FigRoutingManager_iOSDeactivateEndpoint_block_invoke;
  v19[3] = &__block_descriptor_40_e5_v8__0l;
  v19[4] = a1;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSDeactivateEndpoint", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1097, 0, 0, v15, (uint64_t)v19);
  v22 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint((uint64_t)a1, a2, (uint64_t)&v22);
  FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)v22);
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigRoutingManagerUnregisterFromFigEndpointNotifications(a1);
  *(_QWORD *)type = 0;
  FigRoutingManagerCreateEndpointDeactivateCompletionContext(v22, type);
  v5 = FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)a1, FigEndpointFeatures, (uint64_t)Mutable, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, *(uint64_t *)type);
  if (Mutable)
    CFRelease(Mutable);
  if (v22)
    CFRelease(v22);
  v13 = (const void *)v23[0];
  if (v23[0])
    goto LABEL_18;
  return v5;
}

void FigRoutingManager_iOSHandleEndpointActivationError(const void *a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString **v11;
  uint64_t v12;
  const __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  __CFDictionary *v18;
  NSObject *v19;
  os_log_type_t type[8];
  CFTypeRef cf[23];

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (dword_1EE2B3E28)
  {
    LODWORD(cf[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 <= -15583)
  {
    v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUserCancelled;
    switch(a3)
    {
      case -17608:
        goto LABEL_9;
      case -17607:
      case -17606:
      case -17605:
      case -17603:
      case -17602:
        goto LABEL_23;
      case -17604:
        goto LABEL_38;
      case -17601:
        goto LABEL_24;
      case -17600:
        v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorizedNoPrompt;
        goto LABEL_38;
      default:
        if (a3 != -16728)
          goto LABEL_23;
        goto LABEL_38;
    }
  }
  if ((a3 + 15582) >= 2)
  {
    if (!a3)
      goto LABEL_41;
    if (a3 != 200453)
    {
LABEL_23:
      FigRoutingManager_HandleEndpointFailed(a1, a3, a4, 0);
LABEL_24:
      v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_38:
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(a5, (uint64_t)a1, (uint64_t)*v11);
      if ((a2 & 1) != 0)
        routingManager_resetScreenSettings((uint64_t)a1);
      FigRoutingManagerContextUtilities_SetPickingState(a5, 0);
LABEL_41:
      if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
        CMSMAP_MakeAirPlayHandOffPortRoutable(0, a5);
      FigRoutingManagerRemoveCachedDelegateContext((uint64_t)a1);
    }
  }
LABEL_9:
  FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(a5, (uint64_t)a1, (uint64_t)CFSTR("configUpdateReasonEndedFailed"));
  FigRoutingManagerContextUtilities_SetPickingState(a5, 0);
  v12 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf[0] = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v15)
    v15(CMBaseObject, *MEMORY[0x1E0CA4258], v12, cf);
  *(_QWORD *)type = 0;
  v16 = FigEndpointGetCMBaseObject();
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v17)
    v17(v16, *MEMORY[0x1E0CA4348], v12, type);
  v18 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)a1, 0);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (a3 > -15582)
  {
    if (a3 != -15581)
    {
      if (a3 != 200453)
        goto LABEL_29;
      FigCFDictionarySetValue();
      if (!dword_1EE2B3E28)
        goto LABEL_29;
      goto LABEL_28;
    }
    FigCFDictionarySetValue();
    if (dword_1EE2B3E28)
    {
LABEL_28:
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (a3 != -17608)
    {
      if (a3 != -15582)
        goto LABEL_29;
      FigCFDictionarySetValue();
      if (!dword_1EE2B3E28)
        goto LABEL_29;
      goto LABEL_28;
    }
    FigCFDictionarySetValue();
    if (dword_1EE2B3E28)
      goto LABEL_28;
  }
LABEL_29:
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  FigEndpointUIAgentHelper_ShowError(Mutable);
  if (*(_QWORD *)type)
  {
    CFRelease(*(CFTypeRef *)type);
    *(_QWORD *)type = 0;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
  goto LABEL_41;
}

uint64_t sub_1936A5634()
{
  return 0;
}

uint64_t FigRoutingManager_iOSHandleStartupFailed(uint64_t result, CFMutableDictionaryRef theDict)
{
  __CFString **v3;
  const void *SInt32;

  if ((_DWORD)result && theDict)
  {
    if ((int)result <= -15583)
    {
      if ((_DWORD)result == -71891)
      {
        v3 = kFigEndpointUIAgentPromptInfo_ReasonStartErrorLowSignal;
        goto LABEL_15;
      }
      if ((_DWORD)result == -17608)
      {
        v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorAuthenticationFailed;
        goto LABEL_15;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0xFFFFC322:
          v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailedMultiDFS;
          goto LABEL_15;
        case 0xFFFFC323:
          v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailed2G;
          goto LABEL_15;
        case 0x30F05:
          v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorHijackFailed;
LABEL_15:
          CFDictionarySetValue(theDict, CFSTR("reason"), *v3);
          return FigEndpointUIAgentHelper_ShowError(theDict);
      }
    }
    CFDictionarySetValue(theDict, CFSTR("reason"), CFSTR("startError"));
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    FigCFDictionarySetValue();
    if (SInt32)
      CFRelease(SInt32);
    return FigEndpointUIAgentHelper_ShowError(theDict);
  }
  return result;
}

void FigRoutingManagerHandleEndpointAudioActivation(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int ContextType;
  int AirPlayPortForEndpoint;
  int v17;
  __CFArray *v18;
  NSObject *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v23 = 0;
  v9 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(CMBaseObject, *MEMORY[0x1E0CA4468], v9, &v23);
  v22 = 0;
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(v12, *MEMORY[0x1E0CA4348], v9, &v22);
  if (dword_1EE2B3E28)
  {
    LODWORD(v21) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      cf[0] = 0;
      if (FigRoutingManagerFindCarPlayMainAudioPortForEndpoint((uint64_t)a1))
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a4, (uint64_t)a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
        FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer(a1, (uint64_t)a4, 5.0);
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    goto LABEL_29;
  }
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a4);
  if (ContextType <= 6 && ((1 << ContextType) & 0x46) != 0)
  {
    FigRoutingManagerStartDeactivateAirPlayEndpointTimer(a1, a3, 5.0);
    AirPlayPortForEndpoint = CMSMAP_FindAirPlayPortForEndpoint((uint64_t)a1);
    if (AirPlayPortForEndpoint)
    {
      v17 = AirPlayPortForEndpoint;
      FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
      if (CMSMVAUtility_MakePortRoutable(v17, (uint64_t)a4))
      {
        v21 = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a4, (uint64_t)&v21);
        v18 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)v21, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a4, (const __CFArray *)v21, (uint64_t)CFSTR("configUpdateReasonEndedFailed"), a5, (uint64_t)v18);
        if (dword_1EE2B3E28)
        {
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManager_iOSDeactivateEndpoint(a1, a3);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        if (v18)
          CFRelease(v18);
        v20 = v21;
        if (!v21)
          goto LABEL_28;
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a5);
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf[0], a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a5);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        v20 = cf[0];
        if (!cf[0])
          goto LABEL_28;
      }
      CFRelease(v20);
LABEL_28:
      MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed();
      FigRoutingManagerCrossfadePlayback();
      goto LABEL_29;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
  }
LABEL_29:
  if (v22)
  {
    CFRelease(v22);
    v22 = 0;
  }
  if (v23)
    CFRelease(v23);
}

void FigRoutingManagerHandleEndpointScreenActivation(const void *a1, const void *a2, uint64_t a3)
{
  int IsPropertyTrue;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v13;
  CFTypeRef v14;
  int InitialModesReceived;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21[18];

  v21[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  IsPropertyTrue = FigEndpointUtility_EndpointPredicate_IsPropertyTrue();
  v19 = 0;
  v20 = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    v9(CMBaseObject, *MEMORY[0x1E0CA4468], v7, &v20);
  v10 = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(v10, *MEMORY[0x1E0CA4460], v7, &v19);
  CMScreenHandleActivation(v20, v19);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) | IsPropertyTrue)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      v13 = CMSMUtility_DoesiOSHaveCarPlayScreen();
      v14 = CMSMUtility_CopyStarkEndpointCentral();
      InitialModesReceived = FigEndpointCentralGetInitialModesReceived();
      if (v13)
      {
        if (InitialModesReceived)
        {
          CMScreenGetScreenState();
          if (!FigCFEqual())
            FigEndpointCopyFirstStreamOfType();
        }
      }
      if (v14)
        CFRelease(v14);
    }
  }
  else
  {
    FigEndpointCopyFirstStreamOfType();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v21[0] = 0;
    v16 = FigEndpointGetCMBaseObject();
    v17 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v17)
    {
      v17(v16, *MEMORY[0x1E0CA4218], v7, v21);
      v18 = v21[0];
    }
    else
    {
      v18 = 0;
    }
    if (v18 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
    {
      CMScreenSetMirroringMode(1);
      v18 = v21[0];
    }
    if (v18)
    {
      CFRelease(v18);
      v21[0] = 0;
    }
    CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange();
    CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange();
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a3);
    FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
  }
  if (v20)
  {
    CFRelease(v20);
    v20 = 0;
  }
  if (v19)
    CFRelease(v19);
}

uint64_t FigRoutingManagerHandleEndpointPlaybackActivation(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
  if ((_DWORD)result == 5)
  {
    if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)a1, 0))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 9);
      CMSMVAUtility_CreatePerAppAirPlayVADIfNeeded(0, (uint64_t)a1, (uint64_t)a2);
      FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a3);
      FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
      v7 = 0;
    }
    else
    {
      v7 = 8;
    }
    return FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, v7);
  }
  return result;
}

uint64_t FigRoutingManagerHandleEndpointControlActivation(const void *a1, const void *a2, uint64_t a3)
{
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a3);
  FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
  return FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
}

uint64_t FigRoutingManager_iOSActivateEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t v8;
  CFMutableDictionaryRef EndpointActivateOptions;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *EndpointDelegateContext;
  _QWORD *v14;
  CFTypeRef v15;
  _QWORD *SharedManager;
  void (*v17)(const void *, uint64_t **);
  void (*v18)(const void *, uint64_t **);
  const void *Value;
  unsigned int ContextType;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v22;
  AudioObjectID CurrentInputPortAtIndex;
  CFTypeRef v25;
  __CFArray *v26;
  __CFArray *v27;
  __CFArray *v28;
  AudioObjectID CurrentOutputPortAtIndex;
  AudioObjectID v30;
  const void *v31;
  CFTypeRef v32;
  NSObject *v33;
  CFTypeRef FigEndpointFeatures;
  CFTypeRef v35;
  os_log_type_t type[8];
  const void *v37;
  int v38;
  CFTypeRef cf;
  uint64_t *v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v42;
  void (*v43)(CFTypeRef, uint64_t, const void *, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a2, a3);
  FigEndpointFeatures = (CFTypeRef)FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  cf = 0;
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(v37) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
    || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    EndpointDelegateContext = (uint64_t *)FigRoutingManagerCreateEndpointDelegateContext();
    v14 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
    if (a1)
      v15 = CFRetain(a1);
    else
      v15 = 0;
    v14[1] = v15;
    v14[2] = EndpointDelegateContext;
    *v14 = 0;
    SharedManager = FigRoutingManagerGetSharedManager();
    MEMORY[0x1940352F8](SharedManager[7]);
    if (SharedManager[8])
      *(_QWORD *)SharedManager[9] = v14;
    else
      SharedManager[8] = v14;
    SharedManager[9] = v14;
    MEMORY[0x194035304](SharedManager[7]);
    if (FigRoutingManagerIsEndpointOfSubtype((uint64_t)a1))
    {
      v40 = EndpointDelegateContext;
      v41 = 0;
      v42 = FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate;
      v43 = FigRoutingManager_HandleDidCloseCommChannelDelegate;
      v17 = *(void (**)(const void *, uint64_t **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v17)
        v17(a1, &v40);
    }
    v43 = 0;
    v44 = 0;
    v40 = EndpointDelegateContext;
    v41 = FigRoutingManager_HandleAuthorizationRequiredDelegate;
    v42 = FigRoutingManager_iOSHandleEndpointFailedDelegate;
    v18 = *(void (**)(const void *, uint64_t **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v18)
      v18(a1, &v40);
  }
  if (!(_DWORD)v8)
  {
    if (a3)
    {
      Value = CFDictionaryGetValue(a3, CFSTR("authInfo"));
      if (Value)
        FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
    }
    ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
    v38 = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v38);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
      || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      if (ContextType <= 6 && ((1 << ContextType) & 0x6E) != 0)
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      v40 = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v40);
      FigRoutingManagerCrossfadePlayback();
      MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      v8 = FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, MutableCopy, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v40);
      if (MutableCopy)
      {
        v22 = MutableCopy;
LABEL_30:
        CFRelease(v22);
      }
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
           || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      v40 = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v40);
      v8 = FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, EndpointActivateOptions, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v40);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 6);
      v8 = FigEndpointActivate();
      v37 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&v37);
      if ((_DWORD)v8)
      {
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)a1, (uint64_t)CFSTR("configUpdateReasonEndedFailed"));
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
      }
      else
      {
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v37))
          FigRoutingManagerDeactivateEndpointFromPickedContexts(v37, (uint64_t)a2, 1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
        if (ContextType == 13)
        {
          CurrentInputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
          v25 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
          if (v25)
          {
            v35 = v25;
            v26 = (__CFArray *)(id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v25);
          }
          else
          {
            v35 = 0;
            v26 = 0;
          }
        }
        else
        {
          v26 = CMSMUtility_CopyCurrentRouteIdentifiers();
          v35 = 0;
        }
        v27 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v26, (uint64_t)a2);
        v28 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v27, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, v27, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, (uint64_t)v28);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
        if (ContextType == 13)
          CurrentOutputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
        else
          CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
        v30 = CurrentOutputPortAtIndex;
        v31 = (const void *)vaeCopySpecificNameForPort(CurrentOutputPortAtIndex);
        v32 = vaeCopyDeviceIdentifierFromVADPort(v30);
        *(_QWORD *)type = 0;
        FigEndpointCopyProperty((uint64_t)a1, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], (uint64_t)type);
        if (!FigCFEqual())
        {
          if (dword_1EE2B3E28)
          {
            v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)a1, (uint64_t)CFSTR("configUpdateReasonEndedFailed"));
        }
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
        if (*(_QWORD *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(_QWORD *)type = 0;
        }
        if (v32)
          CFRelease(v32);
        if (v31)
          CFRelease(v31);
        if (v28)
          CFRelease(v28);
        if (v27)
          CFRelease(v27);
        if (v26)
          CFRelease(v26);
        if (v35)
          CFRelease(v35);
      }
      v22 = (const __CFDictionary *)v37;
      if (v37)
        goto LABEL_30;
    }
    else
    {
      v8 = 0;
      if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) && ContextType != 13)
      {
        v40 = 0;
        FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v40);
        FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, EndpointActivateOptions, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v40);
        v8 = 0;
      }
    }
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
  return v8;
}

void FigRoutingManager_iOSHandleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *SharedManager;
  NSObject *v10;
  _QWORD v11[8];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1 && a3)
  {
    if (dword_1EE2B3E28)
    {
      v13 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4)
      CFRetain(a4);
    v10 = *((_QWORD *)SharedManager + 1);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManager_iOSHandleEndpointFailedDelegate_block_invoke;
    v11[3] = &__block_descriptor_64_e5_v8__0l;
    v11[4] = a4;
    v11[5] = a3;
    v11[6] = a1;
    v11[7] = a2;
    MXDispatchAsync((uint64_t)"FigRoutingManager_iOSHandleEndpointFailedDelegate", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1498, 0, 0, v10, (uint64_t)v11);
  }
}

__CFArray *FigRoutingManagerCopyEndpointsFromRouteIdentifiers(const __CFArray *a1, uint64_t a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v10;
  OpaqueFigEndpoint *v11;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = *MEMORY[0x1E0CA3A80];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        v10 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v8, a2);
        if (v10)
        {
          v11 = v10;
          CFArrayAppendValue(Mutable, v10);
          CFRelease(v11);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return Mutable;
}

void FigRoutingManager_iOSEndpointDeactivateCompletionCallback(CFTypeRef cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *v10;
  double v11;
  float v12;
  void *SharedManager;
  id v14;
  NSObject *v15;
  _QWORD v16[10];
  int v17;
  float v18;

  if (cf)
    CFRetain(cf);
  if (a5)
    v10 = *(void **)(a5 + 16);
  else
    v10 = 0;
  objc_msgSend(v10, "timeIntervalSinceNow");
  v12 = fabs(v11) * 1000.0;
  SharedManager = FigRoutingManagerGetSharedManager();
  v14 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v15 = *((_QWORD *)SharedManager + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __FigRoutingManager_iOSEndpointDeactivateCompletionCallback_block_invoke;
  v16[3] = &unk_1E309BE18;
  v16[4] = v14;
  v16[5] = cf;
  v17 = a4;
  v16[6] = a3;
  v16[7] = a2;
  v18 = v12;
  v16[8] = a5;
  v16[9] = a5;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSEndpointDeactivateCompletionCallback", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 986, 0, 0, v15, (uint64_t)v16);
}

void FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(const void *a1, char a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFTypeRef v12;
  CFArrayRef theArray;
  CFTypeRef cf;

  if ((a2 & 1) != 0)
  {
    routingManager_resetScreenSettings((uint64_t)a1);
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4468], *MEMORY[0x1E0C9AE00], &cf);
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(a3, (uint64_t)&theArray);
    if (!theArray)
      goto LABEL_12;
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
      goto LABEL_12;
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("ActivatedEndpointsInfo_Endpoint")) == a1)
        break;
      if (v8 == ++v9)
        goto LABEL_12;
    }
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("ActivatedEndpointsInfo_EndpointTransportType"));
    if (Value)
      v12 = CFRetain(Value);
    else
LABEL_12:
      v12 = 0;
    CMScreenHandleDeactivation(cf, v12);
    if (FigCFEqual())
    {
      CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange();
      CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange();
    }
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
    if (v12)
      CFRelease(v12);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t FigRoutingManagerUnregisterFromFigEndpointNotifications(uint64_t result)
{
  const void *v1;
  CFTypeRef cf;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    if (FigRoutingManagerIsEndpointOfType(result))
    {
      FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)v1);
      v3 = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v3);
      cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v3, (uint64_t)&cf);
      if (cf)
      {
        if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
          FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener((uint64_t)cf, v1);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
      if (v3)
        CFRelease(v3);
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v1))
    {
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v1)
      || FigRoutingManagerIsEndpointOfType((uint64_t)v1))
    {
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    result = FigRoutingManagerIsEndpointOfType((uint64_t)v1);
    if (!(_DWORD)result)
    {
      result = FigRoutingManagerIsEndpointOfType((uint64_t)v1);
      if (!(_DWORD)result)
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterRemoveListener();
      }
    }
  }
  return result;
}

void routingManager_resetScreenSettings(uint64_t a1)
{
  CFArrayRef v1;
  CFArrayRef theArray;

  if (a1)
  {
    v1 = 0;
    theArray = 0;
    FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(1, &theArray, 0, &v1, 0);
    if ((!theArray || !CFArrayGetCount(theArray))
      && (!v1 || !CFArrayGetCount(v1) || FigCFArrayContainsValue()))
    {
      CMScreenSetMirroringMode(0);
      CMScreenSetVirtualDisplayClientPID(0);
    }
    if (v1)
    {
      CFRelease(v1);
      v1 = 0;
    }
    if (theArray)
      CFRelease(theArray);
  }
}

void FigRoutingManagerSetMirroringModeOnBKSDisplayServices(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  int ContextType;
  int v9;

  if (a1)
  {
    CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3760]);
    CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3758]);
  }
  if (a3)
    FigCFDictionaryGetInt32IfPresent();
  ContextType = FigRoutingManagerContextUtilities_GetContextType(a2);
  if (a4)
  {
    v9 = 1;
LABEL_7:
    CMScreenSetMirroringMode(v9);
    return;
  }
  if (ContextType == 6)
  {
    CMScreenSetMirroringMode(2);
    CMScreenSetVirtualDisplayClientPID(-1);
    return;
  }
  if (ContextType == 2)
  {
    v9 = 0;
    goto LABEL_7;
  }
}

void FigRoutingManagerResumeCurrentEndpointScreen(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v6;
  CFTypeRef cf;
  CFTypeRef v8;
  CFTypeRef v9;

  if (a1)
  {
    v9 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&v9);
    if (v9)
    {
      v8 = 0;
      v1 = *MEMORY[0x1E0C9AE00];
      FigEndpointCopyFirstStreamOfType();
      cf = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v3 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v3)
        v3(CMBaseObject, *MEMORY[0x1E0CA4468], v1, &cf);
      v6 = 0;
      v4 = FigEndpointGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v5)
        v5(v4, *MEMORY[0x1E0CA4460], v1, &v6);
      if (v8)
        CMScreenResumeStream(v8, cf, v6, CFSTR("AirPlay Audio/Video"));
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v6)
      {
        CFRelease(v6);
        v6 = 0;
      }
      if (v8)
        CFRelease(v8);
      if (v9)
        CFRelease(v9);
    }
  }
}

void FigRoutingManagerSuspendCurrentEndpointScreen(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v6;
  CFTypeRef cf;
  CFTypeRef v8;
  CFTypeRef v9;

  if (a1)
  {
    v9 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&v9);
    if (v9)
    {
      v8 = 0;
      v1 = *MEMORY[0x1E0C9AE00];
      FigEndpointCopyFirstStreamOfType();
      cf = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v3 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v3)
        v3(CMBaseObject, *MEMORY[0x1E0CA4468], v1, &cf);
      v6 = 0;
      v4 = FigEndpointGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v5)
        v5(v4, *MEMORY[0x1E0CA4460], v1, &v6);
      if (v8)
        CMScreenSuspendStream(v8, cf, v6, CFSTR("AirPlay Audio/Video"));
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v6)
      {
        CFRelease(v6);
        v6 = 0;
      }
      if (v8)
        CFRelease(v8);
      if (v9)
        CFRelease(v9);
    }
  }
}

void routingManager_handleFigEndpointDeactivatedNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  void *SharedManager;
  char Int64IfPresent;
  NSObject *v8;
  _QWORD v9[8];
  char v10;
  uint64_t v11;
  uint64_t v12;

  SharedManager = FigRoutingManagerGetSharedManager();
  v12 = 0;
  FigCFDictionaryGetInt64IfPresent();
  v11 = 0;
  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *((_QWORD *)SharedManager + 1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __routingManager_handleFigEndpointDeactivatedNotification_block_invoke;
  v9[3] = &__block_descriptor_65_e5_v8__0l;
  v10 = Int64IfPresent;
  v9[4] = a4;
  v9[5] = v12;
  v9[6] = v11;
  v9[7] = a3;
  MXDispatchAsync((uint64_t)"routingManager_handleFigEndpointDeactivatedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1713, 0, 0, v8, (uint64_t)v9);
}

void __routingManager_handleFigEndpointDeactivatedNotification_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *v11;
  const void *v12;
  NSString *v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!*(_BYTE *)(a1 + 64))
  {
    cf[0] = 0;
    if (*(_QWORD *)(a1 + 32))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v7)
      {
        v7(CMBaseObject, *MEMORY[0x1E0CA4468], *v2, cf);
        if (cf[0])
          CFRelease(cf[0]);
      }
    }
  }
  v16 = 0;
  v17 = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(v3, *MEMORY[0x1E0CA4348], *v2, &v16);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 32)))
  {
    v8 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    v17 = v8;
    FigRoutingManagerGetEndpointManager(*MEMORY[0x1E0CA3A68]);
    FigRoutingManagerProcessCarPlayEndpointDeactivation(0);
    cf[0] = 0;
    v9 = FigEndpointManagerGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
      v10(v9, *MEMORY[0x1E0CA3A40], *v2, cf);
    v11 = FigRoutingManagerCopyEndpointToAutoConnect();
    if (v11)
    {
      v12 = v11;
      FigRoutingManagerProcessEndpointToAutoconnect(v11);
      CFRelease(v12);
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    FigEndpointServerSetActiveEndpoint();
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
      FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(0);
    routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(*(const void **)(a1 + 32), (uint64_t)CFSTR("configUpdateReasonEndedFailed"));
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v8);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
    FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(0, *(const void **)(a1 + 32));
  }
  else if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 32)))
  {
    v13 = -[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID");
    v17 = v13;
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v13, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v13);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  }
  else if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 32)))
  {
    FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), (uint64_t)&v17);
    if (v17)
    {
      FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v17);
      FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v17, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      FigRoutingManagerRemoveCachedDelegateContext(*(_QWORD *)(a1 + 32));
    }
  }
  if (v16)
  {
    CFRelease(v16);
    v16 = 0;
  }
  if (v17)
  {
    CFRelease(v17);
    v17 = 0;
  }
  v14 = *(const void **)(a1 + 32);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 56);
  if (v15)
    CFRelease(v15);
}

void routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(const void *a1, uint64_t a2)
{
  CFTypeRef v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  CFArrayRef theArray;

  v4 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)v4, (uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      while (CFArrayGetValueAtIndex(theArray, v7) != a1)
      {
        if (v6 == ++v7)
          goto LABEL_8;
      }
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v4, (uint64_t)a1, a2);
    }
LABEL_8:
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
  }
  if (v4)
    CFRelease(v4);
}

void routingManager_handleEndpointFailedNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  char Int64IfPresent;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *SharedManager;
  CFTypeRef v15;
  NSObject *v16;
  _QWORD v17[9];
  char v18;
  os_log_type_t type;
  int v20;
  CFTypeRef cf;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v22 = 0;
    v23 = 0;
    v7 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(CMBaseObject, *MEMORY[0x1E0CA4348], v7, &v22);
    cf = 0;
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(v10, *MEMORY[0x1E0CA4468], v7, &cf);
    Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    if (dword_1EE2B3E28)
    {
      v20 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a4))
    {
      MXSimulateCrash((uint64_t)"This is unexpected. Please file a radar to MediaExperience (New Bugs) | All.");
    }
    else
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a4);
      if (cf)
        CFRetain(cf);
      if (a5)
        CFRetain(a5);
      if (v22)
      {
        CFRetain(v22);
        v15 = v22;
      }
      else
      {
        v15 = 0;
      }
      v16 = *((_QWORD *)SharedManager + 1);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __routingManager_handleEndpointFailedNotification_block_invoke;
      v17[3] = &__block_descriptor_73_e5_v8__0l;
      v18 = Int64IfPresent;
      v17[4] = a5;
      v17[5] = a4;
      v17[6] = v23;
      v17[7] = cf;
      v17[8] = v15;
      MXDispatchAsync((uint64_t)"routingManager_handleEndpointFailedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1438, 0, 0, v16, (uint64_t)v17);
    }
    if (v22)
    {
      CFRelease(v22);
      v22 = 0;
    }
    if (cf)
      CFRelease(cf);
  }
}

void __routingManager_handleEndpointFailedNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (*(_BYTE *)(a1 + 72))
  {
    FigCFDictionaryGetInt64IfPresent();
    FigRoutingManager_HandleEndpointFailed(*(const void **)(a1 + 40), *(_DWORD *)(a1 + 48), 0, 1);
  }
  if (FigCFEqual())
    routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(*(const void **)(a1 + 40), (uint64_t)CFSTR("configUpdateReasonEndedFailed"));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 64);
  if (v5)
    CFRelease(v5);
}

void routingManager_handleEndpointFeaturesChangedNotification(int a1, int a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  NSObject *v7;
  _QWORD v8[6];

  if (cf)
    CFRetain(cf);
  if (a5)
    CFRetain(a5);
  v7 = *((_QWORD *)FigRoutingManagerGetSharedManager() + 1);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __routingManager_handleEndpointFeaturesChangedNotification_block_invoke;
  v8[3] = &__block_descriptor_48_e5_v8__0l;
  v8[4] = a5;
  v8[5] = cf;
  MXDispatchAsync((uint64_t)"routingManager_handleEndpointFeaturesChangedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1838, 0, 0, v7, (uint64_t)v8);
}

void __routingManager_handleEndpointFeaturesChangedNotification_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v5;
  const void *v6;
  CFTypeRef cf;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11[17];

  v11[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v8 = 0;
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
    v3(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11[0] = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(*(_QWORD *)(a1 + 40), v8, (uint64_t)v11);
  if (v9)
  {
    CMSMUtility_InformAirPlayOfAudioModeIfNecessary((uint64_t)v11[0]);
    FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(*(void **)(a1 + 40), v10, v8, v11[0], 0);
  }
  else
  {
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 40), v10, (uint64_t)v11[0]);
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v11[0])
  {
    CFRelease(v11[0]);
    v11[0] = 0;
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
}

void routingManager_handleAirPlayVolumeControlDidChange()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *SharedManager;
  CFTypeRef v4;
  NSObject *v5;
  _QWORD v6[5];
  os_log_type_t type;
  int v8;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = *(CFTypeRef *)MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v1)
    v1(CMBaseObject, *MEMORY[0x1E0CA44A8], *MEMORY[0x1E0C9AE00], cf);
  if (dword_1EE2B3E28)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  if (cf[0])
  {
    CFRetain(cf[0]);
    v4 = cf[0];
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_QWORD *)SharedManager + 1);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __routingManager_handleAirPlayVolumeControlDidChange_block_invoke;
  v6[3] = &__block_descriptor_40_e5_v8__0l;
  v6[4] = v4;
  MXDispatchAsync((uint64_t)"routingManager_handleAirPlayVolumeControlDidChange", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1816, 0, 0, v5, (uint64_t)v6);
  if (cf[0])
    CFRelease(cf[0]);
}

void __routingManager_handleAirPlayVolumeControlDidChange_block_invoke(uint64_t a1)
{
  const void *v2;

  vaemHandleVolumeControlDidChange(*(_QWORD *)(a1 + 32) == *MEMORY[0x1E0C9AE50]);
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t _FigEndpointCentralSendCommand(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t);
  uint64_t v13;
  _BOOL4 v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v11 = *(_QWORD *)(DerivedStorage + 8);
  if (v11
    && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass())
    && (v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 72)) != 0)
  {
    v13 = v12(v11, a2, a3, a4, a5);
  }
  else
  {
    v13 = 4294954514;
  }
  v15 = (_DWORD)v13 == -12782 || (_DWORD)v13 == -12785;
  if (a4 && v15)
    a4(a1, v13, 0, a5);
  return v13;
}

uint64_t FigEndpointCreateCentral(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t);
  NSObject *v14;
  dispatch_queue_t v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2 && !FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    v18 = 4294954311;
LABEL_18:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v18;
  }
  if (!a4)
  {
    v18 = FigSignalErrorAt();
    if (!(_DWORD)v18)
      return v18;
    goto LABEL_18;
  }
  FigEndpointExtendedGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    goto LABEL_20;
  gFigEndpointCentralObjectWeakRef = FigCFWeakReferenceHolderCreateWithReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigStarkModeControllerCreate((_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v7)
    goto LABEL_20;
  v9 = fsmcontroller_CopyCarModesQueue(*(_QWORD *)(DerivedStorage + 24));
  *(_QWORD *)(DerivedStorage + 48) = v9;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v9, v10))
    goto LABEL_9;
  v11 = *(_QWORD *)(DerivedStorage + 24);
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v13)
  {
    v18 = 4294954514;
    goto LABEL_18;
  }
  v7 = v13(CMBaseObject, *MEMORY[0x1E0CA43B8], v11);
  if ((_DWORD)v7)
  {
LABEL_20:
    v18 = v7;
    goto LABEL_18;
  }
LABEL_9:
  v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v15 = dispatch_queue_create("com.apple.coremedia.figEndpointcentral.modechangequeue", v14);
  *(_QWORD *)(DerivedStorage + 32) = v15;
  if (!v15)
  {
    v18 = 4294954314;
    goto LABEL_18;
  }
  if (a2)
    v16 = CFRetain(a2);
  else
    v16 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v16;
  if (a3)
  {
    v17 = CFRetain(a3);
    *(_QWORD *)(DerivedStorage + 16) = v17;
    CMSessionGetNotificationCenter(v17);
    CMNotificationCenterAddListener();
  }
  *(_QWORD *)(DerivedStorage + 40) = FigStarkModeControllerAddStateChangedHandler(*(_QWORD **)(DerivedStorage + 24), *(NSObject **)(DerivedStorage + 32), &__block_literal_global_7);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v18 = 0;
  *a4 = 0;
  return v18;
}

void central_interruptionNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v11[7];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v8 = DerivedStorage;
    if (FigCFEqual())
    {
      v9 = *(NSObject **)(v8 + 48);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __central_interruptionNotificationCallback_block_invoke;
      v11[3] = &__block_descriptor_56_e5_v8__0l;
      v11[4] = v8;
      v11[5] = a4;
      v11[6] = a5;
      MXDispatchSync((uint64_t)"central_interruptionNotificationCallback", (uint64_t)"FigEndpoint_Central.m", 943, 0, 0, v9, (uint64_t)v11);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void central_endpointNotificationCallback(uint64_t a1, uint64_t a2)
{
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  else if (FigCFEqual() || FigCFEqual())
  {
    central_endpointDidDeactivateNotificationCallback(a2);
  }
}

uint64_t FigEndpointCentralGetInitialModesReceived()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
    return *(unsigned __int8 *)(result + 3);
  return result;
}

uint64_t FigEndpointSessionHandleInterruption(_QWORD *DerivedStorage, __int128 *a2, uint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t CStringPtrAndBufferToFree;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];

  if (*(_DWORD *)a2 == 1)
  {
    v14 = *((_QWORD *)a2 + 2);
    v15 = *((_DWORD *)a2 + 6);
    v24 = 0u;
    v25 = 0u;
    v31 = 0u;
    memset(v32, 0, 24);
    v29 = 0u;
    v30 = 0u;
    if (DerivedStorage)
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v17 = DerivedStorage;
        *(_QWORD *)&v29 = 0x200000002;
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            *(_QWORD *)((char *)v32 + 12) = v14;
            DWORD2(v32[0]) = v15;
            if (a4)
            {
              if (FigCFEqual())
              {
                *(_QWORD *)&v31 = 23;
                LODWORD(v32[0]) = 0;
                v18 = v17[3];
                CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
                v12 = fsmcontroller_RequestModeChange(v18, (uint64_t)&v29, CStringPtrAndBufferToFree, (uint64_t)&v24, a5);
                DerivedStorage = 0;
                goto LABEL_25;
              }
            }
          }
        }
        DerivedStorage = 0;
      }
    }
    v12 = 0;
LABEL_25:
    free(DerivedStorage);
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
    return v12;
  }
  if (!*(_DWORD *)a2)
  {
    v21 = *a2;
    v22 = a2[1];
    v23 = *((_QWORD *)a2 + 4);
    v28 = 0;
    if (DerivedStorage)
    {
      v6 = CMBaseObjectGetDerivedStorage();
      if (v6)
      {
        v7 = v6;
        memset(v27, 0, sizeof(v27));
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        memset(v32, 0, 24);
        v24 = v21;
        v25 = v22;
        v26 = v23;
        v8 = central_ConstructModeChangeRequestToGet((uint64_t)a4, (uint64_t)CFSTR("MainAudio"), (uint64_t)&v24, (uint64_t)&v29);
        if ((_DWORD)v8)
        {
          v12 = v8;
          goto LABEL_24;
        }
        v9 = *(_QWORD *)(v7 + 24);
        v10 = FigCFStringGetCStringPtrAndBufferToFree();
        v11 = fsmcontroller_RequestModeChange(v9, (uint64_t)&v29, v10, (uint64_t)v27, 0);
        v12 = 4294954311;
        if (v11 || DWORD2(v27[0]) != 2)
          goto LABEL_24;
        if (a4)
        {
          if ((v31 - 20) > 3)
            v13 = 0;
          else
            v13 = (uint64_t)*(&off_1E309BF00 + (int)v31 - 20);
          v12 = 0;
          *a4 = v13;
          goto LABEL_24;
        }
      }
    }
    v12 = 0;
LABEL_24:
    DerivedStorage = v28;
    goto LABEL_25;
  }
  return 0;
}

uint64_t FigEndpointCentralGetResourceTypeBorrowConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  if (a1 && (DerivedStorage = CMBaseObjectGetDerivedStorage()) != 0)
    return FigStarkModeControllerGetCurrentResourceBorrowConstraint(*(_QWORD *)(DerivedStorage + 24), a2);
  else
    return 0;
}

uint64_t _FigEndpointCentralEntityHoldsResource(uint64_t result, uint64_t a2, uint64_t a3)
{
  __n128 **DerivedStorage;
  __n128 **v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __n128 v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (a3)
      {
        DerivedStorage = (__n128 **)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage || (v4 = DerivedStorage, *(_BYTE *)DerivedStorage))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return 0;
        }
        else
        {
          if (_FigIsNotCurrentDispatchQueue())
            MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar agains"
                                     "t 'MediaExperience Session | All'");
          _fsmcontroller_GetCurrentMode(v4[3], v6);
          if (FigCFEqual())
            return FigCFEqual();
          result = FigCFEqual();
          if ((_DWORD)result)
            return FigCFEqual();
        }
      }
    }
  }
  return result;
}

uint64_t FigEndpointCentralEntityOwnsResource(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t result;
  _OWORD v6[2];

  result = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        result = CMBaseObjectGetDerivedStorage();
        if (result)
        {
          memset(v6, 0, sizeof(v6));
          fsmcontroller_GetCurrentMode(*(_QWORD *)(result + 24), (uint64_t)v6);
          if (CFEqual(a3, CFSTR("MainAudio")))
            return FigCFEqual();
          result = CFEqual(a3, CFSTR("Screen"));
          if ((_DWORD)result)
            return FigCFEqual();
        }
      }
    }
  }
  return result;
}

uint64_t _FigEndpointCentralGetEntityDoingActivity(uint64_t result, const void *a2)
{
  uint64_t DerivedStorage;
  __n128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  if (result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    result = 0;
    if (a2)
    {
      if (DerivedStorage)
      {
        if (_FigIsNotCurrentDispatchQueue())
          MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar against "
                                   "'MediaExperience Session | All'");
        _fsmcontroller_GetCurrentMode(*(__n128 **)(DerivedStorage + 24), &v4);
        if (CFEqual(a2, CFSTR("PhoneCall")))
        {
          return DWORD2(v5);
        }
        else if (CFEqual(a2, CFSTR("Speech")))
        {
          return v5;
        }
        else
        {
          result = CFEqual(a2, CFSTR("TurnByTurnNavigation"));
          if ((_DWORD)result)
            return HIDWORD(v5);
        }
      }
    }
  }
  return result;
}

uint64_t FigEndpointCentralRequestResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CStringPtrAndBufferToFree;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];

  memset(v26, 0, sizeof(v26));
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  if (!a1)
    goto LABEL_13;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_13;
  v9 = DerivedStorage;
  v10 = *(_OWORD *)(a3 + 16);
  v19[0] = *(_OWORD *)a3;
  v19[1] = v10;
  v20 = *(_QWORD *)(a3 + 32);
  v11 = central_ConstructModeChangeRequestToGet((uint64_t)a5, a2, (uint64_t)v19, (uint64_t)v22);
  if ((_DWORD)v11)
  {
    v16 = v11;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v9 + 24);
  CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
  v14 = fsmcontroller_RequestModeChange(v12, (uint64_t)v22, CStringPtrAndBufferToFree, (uint64_t)v26, 0);
  if (FigCFEqual())
  {
    v15 = DWORD2(v26[0]);
  }
  else
  {
    if (!FigCFEqual())
    {
      v16 = 4294954311;
      goto LABEL_17;
    }
    v15 = v26[0];
  }
  v16 = 4294954311;
  if (!v14 && v15 == 2)
  {
    if (a5)
    {
      if ((v23 - 20) > 3)
        v17 = 0;
      else
        v17 = (uint64_t)*(&off_1E309BF00 + (int)v23 - 20);
      v16 = 0;
      *a5 = v17;
      goto LABEL_17;
    }
LABEL_13:
    v16 = 0;
  }
LABEL_17:
  free(v21);
  return v16;
}

uint64_t central_ConstructModeChangeRequestToGet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v12 = *(_QWORD *)(a3 + 16);
  v6 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)a4 = 0x200000002;
  if (FigCFEqual())
  {
    v7 = (uint64_t *)(a4 + 32);
    if (!a1)
      goto LABEL_10;
LABEL_6:
    if (FigCFEqual())
    {
      v8 = 500;
      v9 = 0x1F400000016;
    }
    else
    {
      FigCFEqual();
      v9 = 0x1F400000014;
      v8 = 0x6400000064;
    }
    *v7 = v9;
    v7[2] = v8;
    goto LABEL_10;
  }
  if (!FigCFEqual())
    return 4294949808;
  v7 = (uint64_t *)(a4 + 8);
  if (a1)
    goto LABEL_6;
LABEL_10:
  *(_QWORD *)(a4 + 60) = v12;
  *(_DWORD *)(a4 + 56) = v6;
  if ((v6 & 0xFFFFFFFE) == 0xA)
  {
    *((_DWORD *)v7 + 4) = 500;
    v10 = *(_DWORD *)(a4 + 60);
  }
  else
  {
    v10 = v12;
  }
  if (v10 == 1)
    *((_DWORD *)v7 + 4) = 1000;
  if (FigCFEqual() || (result = FigCFEqual(), (_DWORD)result))
  {
    result = 0;
    *((_DWORD *)v7 + 4) = 1000;
  }
  return result;
}

uint64_t FigEndpointCentralUpdateiOSDeviceState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t CStringPtrAndBufferToFree;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14[5];
  _OWORD v15[2];

  memset(v15, 0, sizeof(v15));
  memset(v14, 0, 72);
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v9 = DerivedStorage;
      *(_QWORD *)&v14[0] = 0x200000002;
      *(_QWORD *)((char *)&v14[3] + 12) = a2;
      DWORD2(v14[3]) = a3;
      CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      v11 = *(_QWORD **)(v9 + 24);
      if (!a5)
      {
        v12 = fsmcontroller_RequestModeChange((uint64_t)v11, (uint64_t)v14, CStringPtrAndBufferToFree, (uint64_t)v15, 0);
        goto LABEL_7;
      }
      fsmcontroller_RequestModeChangeAsync(v11, v14, CStringPtrAndBufferToFree, (uint64_t)&__block_literal_global_29_0, 0);
    }
  }
  v12 = 0;
LABEL_7:
  free(0);
  return v12;
}

uint64_t FigEndpointCentralUpdateIsVoiceAssistantActive(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return 4294954316;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294954315;
  FigStarkModeControllerUpdateIsVoiceAssistantActive(*(_QWORD *)(DerivedStorage + 24), a2);
  return 0;
}

uint64_t FigEndpointCentralCopyStarkModeController(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  const void *v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = 4294954316;
  if (a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v6 = *(const void **)(DerivedStorage + 24);
      if (v6)
        v7 = CFRetain(v6);
      else
        v7 = 0;
      result = 0;
      *a2 = v7;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954315;
    }
  }
  return result;
}

uint64_t central_Invalidate()
{
  MXSimulateCrash((uint64_t)"Invalidate was called in FigEndpoint_Central, this is unexpected! Please file a radar against"
                           " 'MediaExperience Session | All'");
  return 0;
}

void central_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 48);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __central_Finalize_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = a1;
  MXDispatchSync((uint64_t)"central_Finalize", (uint64_t)"FigEndpoint_Central.m", 1092, 0, 0, v3, (uint64_t)v5);
  v4 = *(NSObject **)(DerivedStorage + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

__CFString *central_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigEndpointCentral %p>"), a1);
  return Mutable;
}

uint64_t central_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __central_CopyProperty_block_invoke;
  v11[3] = &unk_1E30995C8;
  v11[4] = &v12;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  MXDispatchSync((uint64_t)"central_CopyProperty", (uint64_t)"FigEndpoint_Central.m", 1182, 0, 0, v8, (uint64_t)v11);
  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1936AC074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __central_SetProperty_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  MXDispatchSync((uint64_t)"central_SetProperty", (uint64_t)"FigEndpoint_Central.m", 1294, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1936AC150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void central_resetStates()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  _QWORD v8[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    FigStarkModeControllerRemoveStateChangedHandler(*(CFTypeRef *)(DerivedStorage + 24), *(_QWORD *)(DerivedStorage + 40));
    *(_QWORD *)(v1 + 40) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    v2 = FigNotificationCenterRemoveWeakListener();
    *(_WORD *)(v1 + 1) = 0;
    *(_BYTE *)(v1 + 3) = 0;
    if (*(_QWORD *)(v1 + 16))
    {
      CMSessionGetNotificationCenter(v2);
      CMNotificationCenterRemoveListener();
      v3 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      v4 = MXGetNotificationSenderQueue();
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __central_resetStates_block_invoke;
      v8[3] = &__block_descriptor_40_e5_v8__0l;
      v8[4] = v3;
      MXDispatchAsync((uint64_t)"central_resetStates", (uint64_t)"FigEndpoint_Central.m", 1052, 0, 0, v4, (uint64_t)v8);
    }
    v5 = *(const void **)(v1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v1 + 24) = 0;
    }
    v6 = *(NSObject **)(v1 + 32);
    if (v6)
    {
      dispatch_release(v6);
      *(_QWORD *)(v1 + 32) = 0;
    }
    v7 = *(const void **)(v1 + 8);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v1 + 8) = 0;
    }
  }
}

void __central_resetStates_block_invoke(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t central_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __central_SetDelegateRemoteControl_block_invoke;
  v7[3] = &unk_1E3098D60;
  v7[4] = &v8;
  v7[5] = DerivedStorage;
  v7[6] = a2;
  MXDispatchSync((uint64_t)"central_SetDelegateRemoteControl", (uint64_t)"FigEndpoint_Central.m", 1193, 0, 0, v4, (uint64_t)v7);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1936AC72C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t central_RequestCarUI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 48);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __central_RequestCarUI_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  v9[7] = a3;
  MXDispatchSync((uint64_t)"central_RequestCarUI", (uint64_t)"FigEndpoint_Central.m", 1305, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1936AC878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_BorrowScreen(uint64_t a1, const __CFString *a2, CFStringRef theString)
{
  int v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v8 = 0x200000002;
  LODWORD(v9) = 22;
  if (!theString
    || CFStringFind(theString, CFSTR("presenting siri"), 0).location == -1
    && CFStringFind(theString, CFSTR("full screen alert"), 0).location == -1
    && CFStringFind(theString, CFSTR("InCall"), 0).location == -1
    && CFStringFind(theString, CFSTR("Siri"), 0).location == -1)
  {
    v6 = 100;
  }
  else
  {
    v6 = 500;
  }
  DWORD1(v9) = v6;
  LODWORD(v10) = 100;
  central_requestCarModeChange(a1, (__int128 *)&v8, a2, theString);
  return 0;
}

uint64_t central_UnborrowScreen(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v4 = 0x200000002;
  LODWORD(v5) = 23;
  central_requestCarModeChange(a1, (__int128 *)&v4, a2, a3);
  return 0;
}

uint64_t central_TakeScreen(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  *(_QWORD *)&v10 = 0x200000002;
  DWORD2(v10) = 20;
  v9 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(CMBaseObject, *MEMORY[0x1E0CA4480], *MEMORY[0x1E0C9AE00], &v9);
  HIDWORD(v10) = 500;
  *((_QWORD *)&v11 + 1) = 0x64000001F4;
  if (FigCFEqual() && v9 == *MEMORY[0x1E0C9AE40])
  {
    HIDWORD(v10) = 100;
    *((_QWORD *)&v11 + 1) = 0x6400000064;
  }
  central_requestCarModeChange(a1, &v10, a2, a3);
  return 0;
}

uint64_t central_SetHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 48);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __central_SetHIDInputMode_block_invoke;
  v9[3] = &unk_1E3099668;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  v9[7] = a3;
  MXDispatchSync((uint64_t)"central_SetHIDInputMode", (uint64_t)"FigEndpoint_Central.m", 1419, 0, 0, v6, (uint64_t)v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1936ACB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_CopyHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(NSObject **)(DerivedStorage + 48);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __central_CopyHIDInputMode_block_invoke;
  v11[3] = &unk_1E30995C8;
  v11[4] = &v12;
  v11[5] = DerivedStorage;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  MXDispatchSync((uint64_t)"central_CopyHIDInputMode", (uint64_t)"FigEndpoint_Central.m", 1449, 0, 0, v8, (uint64_t)v11);
  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1936ACC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  _QWORD v12[9];

  v10 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __central_SendCommand_block_invoke;
  v12[3] = &__block_descriptor_72_e5_v8__0l;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  v12[8] = a5;
  MXDispatchSync((uint64_t)"central_SendCommand", (uint64_t)"FigEndpoint_Central.m", 1479, 0, 0, v10, (uint64_t)v12);
  return 0;
}

uint64_t central_CreateRemoteControlSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v6 = 0;
  v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __central_CreateRemoteControlSession_block_invoke;
  v10[3] = &unk_1E30995C8;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = v6;
  v10[7] = a2;
  v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CreateRemoteControlSession", (uint64_t)"FigEndpoint_Central.m", 1522, 0, 0, v7, (uint64_t)v10);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1936ACE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v6 = 0;
  v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __central_CreateCommChannel_block_invoke;
  v10[3] = &unk_1E30995C8;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = v6;
  v10[7] = a2;
  v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CreateCommChannel", (uint64_t)"FigEndpoint_Central.m", 1549, 0, 0, v7, (uint64_t)v10);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1936ACF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[11];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD *)(DerivedStorage + 8);
  if (!v11 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v11 = 0;
  v12 = *(NSObject **)(DerivedStorage + 48);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __central_SendData_block_invoke;
  v15[3] = &unk_1E30996D8;
  v15[4] = &v16;
  v15[5] = DerivedStorage;
  v15[6] = v11;
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  v15[10] = a5;
  MXDispatchSync((uint64_t)"central_SendData", (uint64_t)"FigEndpoint_Central.m", 1576, 0, 0, v12, (uint64_t)v15);
  v13 = *((unsigned int *)v17 + 6);
  if ((_DWORD)v13 == -12782)
  {
    if (!a4)
    {
      v13 = 4294954514;
      goto LABEL_10;
    }
LABEL_9:
    a4(a1, a2, *((unsigned int *)v17 + 6), a5);
    v13 = *((unsigned int *)v17 + 6);
    goto LABEL_10;
  }
  if (a4 && (_DWORD)v13 == -12785)
    goto LABEL_9;
LABEL_10:
  _Block_object_dispose(&v16, 8);
  return v13;
}

void sub_1936AD090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (!v4 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v4 = 0;
  v5 = *(NSObject **)(DerivedStorage + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __central_CloseCommChannel_block_invoke;
  v8[3] = &unk_1E3099668;
  v8[4] = &v9;
  v8[5] = DerivedStorage;
  v8[6] = v4;
  v8[7] = a2;
  MXDispatchSync((uint64_t)"central_CloseCommChannel", (uint64_t)"FigEndpoint_Central.m", 1606, 0, 0, v5, (uint64_t)v8);
  v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1936AD190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_RequestScreenViewArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v6 = 0;
  v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __central_RequestScreenViewArea_block_invoke;
  v10[3] = &unk_1E30995C8;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = v6;
  v10[7] = a2;
  v10[8] = a3;
  MXDispatchSync((uint64_t)"central_RequestScreenViewArea", (uint64_t)"FigEndpoint_Central.m", 1633, 0, 0, v7, (uint64_t)v10);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1936AD298(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_CopyCurrentScreenViewArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v6 = 0;
  v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __central_CopyCurrentScreenViewArea_block_invoke;
  v10[3] = &unk_1E30995C8;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = v6;
  v10[7] = a2;
  v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CopyCurrentScreenViewArea", (uint64_t)"FigEndpoint_Central.m", 1660, 0, 0, v7, (uint64_t)v10);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1936AD3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void central_requestCarModeChange(uint64_t a1, __int128 *a2, const __CFString *a3, const __CFString *a4)
{
  __CFString *MutableCopy;
  _QWORD *DerivedStorage;
  _QWORD *v9;
  uint64_t CStringPtrAndBufferToFree;

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  CFStringAppend(MutableCopy, CFSTR(": "));
  CFStringAppend(MutableCopy, a4);
  if (a1)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v9 = (_QWORD *)DerivedStorage[3];
      CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      fsmcontroller_RequestModeChangeAsync(v9, a2, CStringPtrAndBufferToFree, (uint64_t)&__block_literal_global_47, 0);
      DerivedStorage = 0;
    }
  }
  else
  {
    DerivedStorage = 0;
  }
  free(DerivedStorage);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void __central_interruptionNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v4;
  void *v5;
  float v6;
  float v7;
  id v8;
  double v9;
  uint64_t v10;
  CFMutableDictionaryRef DuckAudioPayload;
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)v1)
  {
    if (dword_1EE2B3FA8)
    {
LABEL_3:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(v1 + 16))
      goto LABEL_3;
    v4 = (void *)objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("InterruptionCmd"));
    if (v4 && (objc_msgSend(v4, "intValue") & 0xFFFFFFFE) == 2)
    {
      v5 = (void *)objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("QuietVolume"));
      objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("VolumeChangeDuration"));
      if (v5)
      {
        objc_msgSend(v5, "floatValue");
        v7 = log10(v6) * 20.0;
        v8 = objc_alloc(MEMORY[0x1E0CB37E8]);
        *(float *)&v9 = v7;
        v10 = objc_msgSend(v8, "initWithFloat:", v9);
      }
      else
      {
        v10 = 0;
      }
      v12 = (id)v10;
      DuckAudioPayload = FigRoutingManagerCreateDuckAudioPayload();
      FigRoutingManagerSendCarPlayDuckCommand(*(const void **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)DuckAudioPayload);
      if (DuckAudioPayload)
        CFRelease(DuckAudioPayload);

    }
  }
}

void central_endpointDidDeactivateNotificationCallback(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __central_endpointDidDeactivateNotificationCallback_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = a1;
  MXDispatchSync((uint64_t)"central_endpointDidDeactivateNotificationCallback", (uint64_t)"FigEndpoint_Central.m", 1073, 0, 0, v2, (uint64_t)v3);
}

void __central_endpointDidDeactivateNotificationCallback_block_invoke()
{
  central_resetStates();
}

uint64_t MX_PrivacyAccounting_IsPAAccessLoggingEnabled()
{
  if (mx_privacyAccounting_isAvailable_onceToken != -1)
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_8);
  if ((mx_privacyAccounting_isAvailable_result & 1) != 0)
    return 0;
  else
    return objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "loggingEnabled");
}

uint64_t getPATCCAccessClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getPATCCAccessClass_softClass;
  v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1936ADF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkTCCServiceMicrophone()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkTCCServiceMicrophoneSymbolLoc_ptr;
  v7 = getkTCCServiceMicrophoneSymbolLoc_ptr;
  if (!getkTCCServiceMicrophoneSymbolLoc_ptr)
  {
    v1 = (void *)TCCLibrary();
    v0 = dlsym(v1, "kTCCServiceMicrophone");
    v5[3] = (uint64_t)v0;
    getkTCCServiceMicrophoneSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    v3 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

void MX_PrivacyAccounting_EndRecordingAccessIntervals(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (mx_privacyAccounting_isAvailable_onceToken != -1)
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_8);
  if ((mx_privacyAccounting_isAvailable_result & 1) == 0)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v12 != v4)
            objc_enumerationMutation(a1);
          v6 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v8 = (void *)objc_msgSend(a1, "objectForKey:", v6, v9, v10);
          if (v8)
            objc_msgSend(v8, "end");
        }
        v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v3);
    }
  }
}

void __mx_privacyAccounting_isAvailable_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
    PrivacyAccountingLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
  {
    mx_privacyAccounting_isAvailable_result = 1;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAAccessLogger");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getPAAccessLoggerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getPAAccessLoggerClass_block_invoke_cold_1();
    return (Class)PrivacyAccountingLibrary();
  }
  return result;
}

uint64_t PrivacyAccountingLibrary()
{
  uint64_t v0;
  void *v2;

  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
    PrivacyAccountingLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = PrivacyAccountingLibraryCore_frameworkLibrary;
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t TCCLibrary()
{
  uint64_t v0;
  void *v2;

  if (!TCCLibraryCore_frameworkLibrary)
    TCCLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = TCCLibraryCore_frameworkLibrary;
  if (!TCCLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAApplication");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getPAApplicationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getPAApplicationClass_block_invoke_cold_1();
    return __getPATCCAccessClass_block_invoke(v3);
  }
  return result;
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  PrivacyAccountingLibrary();
  result = objc_getClass("PATCCAccess");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getPATCCAccessClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getPATCCAccessClass_block_invoke_cold_1();
    return (Class)CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(v3);
  }
  return result;
}

uint64_t CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(uint64_t a1)
{
  __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  void *ValueAtIndex;
  unsigned int LocalSessionPriority;
  uint64_t v8;
  unsigned int v10;

  v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
  if (!v2)
    return 100;
  v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    v5 = 100;
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = 100;
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
      LocalSessionPriority = CMSM_GetLocalSessionPriority(ValueAtIndex, a1 != 0);
      if (LocalSessionPriority <= v5)
        v8 = v5;
      else
        v8 = LocalSessionPriority;
      if (LocalSessionPriority <= v5 || a1 == 0)
      {
        v5 = v8;
      }
      else
      {
        v10 = LocalSessionPriority;
        if (CMSUtility_DoPickedEndpointsForSessionContainDeviceIdentifier(ValueAtIndex, a1))
          v5 = v10;
        else
          v5 = v5;
      }
      ++v4;
    }
    while (v4 < CFArrayGetCount(v3));
  }
  CFRelease(v3);
  return v5;
}

uint64_t CMSM_GetHighestRemotePlayingSessionPriority()
{
  const __CFArray *RemotePlayingInfo;
  const __CFArray *v1;
  CFIndex v2;
  uint64_t v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  MXSessionManager *v8;
  unsigned int v9;
  _OWORD v11[2];
  const void *v12;
  __int128 v13;
  __int128 v14;
  const void *v15;

  RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
  if (!RemotePlayingInfo)
    return 100;
  v1 = RemotePlayingInfo;
  if (CFArrayGetCount(RemotePlayingInfo) < 1)
    return 100;
  v2 = 0;
  LODWORD(v3) = 100;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, v2);
    if (ValueAtIndex)
    {
      v5 = ValueAtIndex;
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
      *((_QWORD *)&v13 + 1) = CFDictionaryGetValue(ValueAtIndex, CFSTR("HostApplicationDisplayID"));
      *(_QWORD *)&v13 = CFDictionaryGetValue(v5, CFSTR("ClientName"));
      Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("InterruptionStyle"));
      if (Value)
        CFNumberGetValue(Value, kCFNumberSInt32Type, &v14);
      v7 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("ClientPriority"));
      if (v7)
        CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&v14 + 4);
      *((_QWORD *)&v14 + 1) = CFDictionaryGetValue(v5, CFSTR("AudioCategory"));
      v15 = CFDictionaryGetValue(v5, CFSTR("AudioMode"));
      v8 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      v11[0] = v13;
      v11[1] = v14;
      v12 = v15;
      v9 = -[MXSessionManager getSessionPriority:forTipi:](v8, "getSessionPriority:forTipi:", v11, 0);
    }
    else
    {
      v9 = 100;
    }
    if (v9 <= v3)
      v3 = v3;
    else
      v3 = v9;
    ++v2;
  }
  while (v2 < CFArrayGetCount(v1));
  return v3;
}

BOOL vaemStarkAudioPortIsCurrentlyActive()
{
  return dword_1EE2B3CC8 != 0;
}

uint64_t vaemSetCallScreeningStatus(int a1)
{
  uint64_t CurrentOutputPortAtIndex;

  byte_1EE2B2C5C = a1;
  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  return vaeUpdateBluetoothCallScreeningStatus(CurrentOutputPortAtIndex, a1);
}

uint64_t vaemGetCachedCallScreeningStatus()
{
  return byte_1EE2B2C5C;
}

uint64_t vaemGetCallScreeningStatus()
{
  uint64_t CurrentOutputPortAtIndex;

  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  return vaeGetBluetoothCallScreeningStatus(CurrentOutputPortAtIndex);
}

uint64_t vaemAudioDevicesChanged()
{
  OSStatus PropertyDataSize;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v2;
  unsigned int v3;
  MXSessionManager *v4;
  NSObject *v5;
  NSObject *v6;
  UInt32 ioDataSize;
  unsigned int v9;
  __CFString *v10;
  AudioObjectPropertyAddress type;
  UInt32 outDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int v14;
  __int128 outData;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"#vedbolg";
  inAddress.mElement = 0;
  outDataSize = 0;
  PropertyDataSize = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, &outDataSize);
  if (PropertyDataSize)
  {
    v14 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v2 = v14;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if (v3)
    {
      LODWORD(outData) = 136315138;
      *(_QWORD *)((char *)&outData + 4) = "vaemAudioDevicesChanged";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (outDataSize >= 4)
  {
    type.mElement = 0;
    v10 = CFSTR("VirtualAudioDevice_Default");
    *(_QWORD *)&type.mSelector = *(_QWORD *)"diudbolg";
    *(_QWORD *)&outData = &v10;
    *((_QWORD *)&outData + 1) = 8;
    v16 = &v9;
    v17 = 4;
    ioDataSize = 32;
    v9 = 0;
    AudioObjectGetPropertyData(1u, &type, 0, 0, &ioDataSize, &outData);
    v4 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setDefaultVADID:](v4, "setDefaultVADID:", v9);
    if (!PropertyDataSize)
    {
      if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")&& qword_1EE2B2B80)
      {
        if (dword_1EE2B3F38)
        {
          v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (vaemAudioDevicesChanged_vadInitializationCompleteSignalOnce != -1)
          dispatch_once(&vaemAudioDevicesChanged_vadInitializationCompleteSignalOnce, &__block_literal_global_9);
        return 0;
      }
      if (!dword_1EE2B3F38)
        return 0;
    }
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

intptr_t __vaemAudioDevicesChanged_block_invoke()
{
  return dispatch_semaphore_signal((dispatch_semaphore_t)qword_1EE2B2B80);
}

uint64_t vaemAddAudioDevicesChangedListener()
{
  AudioObjectPropertyAddress v1;

  v1.mElement = 0;
  *(_QWORD *)&v1.mSelector = *(_QWORD *)"#vedbolg";
  AudioObjectAddPropertyListener(1u, &v1, (AudioObjectPropertyListenerProc)vaemAudioDevicesChanged, 0);
  return vaemAudioDevicesChanged();
}

void vaemAddToPortEndpointCache(int a1)
{
  const __CFAllocator *v1;
  CFNumberRef v2;
  void *value;
  int valuePtr;

  valuePtr = a1;
  value = 0;
  if (a1)
  {
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    FigVAEndpointCreate(*MEMORY[0x1E0C9AE00], a1, &value);
    if (value)
    {
      if (!qword_1EE2B2B88)
        qword_1EE2B2B88 = (uint64_t)CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v2 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1EE2B2B88, v2, value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      if (v2)
        CFRelease(v2);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t vaemSetOrientationOverride(int a1)
{
  uint64_t v1;
  AudioObjectPropertyAddress v3;
  int v4;

  v3.mElement = 0;
  v4 = a1;
  *(_QWORD *)&v3.mSelector = *(_QWORD *)"rvootpni";
  MEMORY[0x1940352BC](gCMSM);
  if (-[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID")&& AudioObjectHasProperty(-[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID"), &v3))
  {
    -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID");
    v1 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    v1 = 0;
  }
  MEMORY[0x1940352C8](gCMSM);
  return v1;
}

uint64_t vaemSetCaptureOrientationOverride()
{
  uint64_t v0;
  AudioObjectPropertyAddress v2;

  v2.mElement = 0;
  *(_QWORD *)&v2.mSelector = *(_QWORD *)"drootpni";
  MEMORY[0x1940352BC](gCMSM);
  if (-[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID")&& AudioObjectHasProperty(-[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID"), &v2))
  {
    -[MXSessionManager decoupledInputVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "decoupledInputVADID");
    v0 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    v0 = 0;
  }
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

uint64_t vaemGetStereoInputOrientation()
{
  uint64_t result;
  unsigned int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"roiutpni";
  outData = 0;
  ioDataSize = 4;
  result = AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress);
  if ((_DWORD)result)
  {
    if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData))
    {
      return 0;
    }
    else
    {
      return outData;
    }
  }
  return result;
}

uint64_t vaemSetStereoInputOrientation(int a1)
{
  uint64_t v1;
  AudioObjectPropertyAddress v3;
  int v4;

  v3.mElement = 0;
  v4 = a1;
  *(_QWORD *)&v3.mSelector = *(_QWORD *)"roiutpni";
  MEMORY[0x1940352BC](gCMSM);
  if (AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &v3))
  {
    -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
    v1 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    v1 = 0;
  }
  MEMORY[0x1940352C8](gCMSM);
  return v1;
}

uint64_t __vaemSupportsBootChimeVolume_block_invoke()
{
  AudioObjectID VADPortIDFromVADPortType;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertyAddress inAddress;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(1886613611);
  dword_1EE2B2C54 = VADPortIDFromVADPortType;
  if (VADPortIDFromVADPortType)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"cblvbolg";
    result = AudioObjectHasProperty(VADPortIDFromVADPortType, &inAddress);
    vaemSupportsBootChimeVolume_isSupported = result;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

const __CFArray *vaemGetVADPortIDFromVADPortType(int a1)
{
  const __CFArray *result;
  const __CFArray *v2;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;
  int inQualifierData;

  valuePtr = 0;
  inQualifierData = a1;
  result = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(&inQualifierData, 0x676C6F62u);
  if (result)
  {
    v2 = result;
    if (CFArrayGetCount(result) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    CFRelease(v2);
    return (const __CFArray *)valuePtr;
  }
  return result;
}

void vaemSetBootChimeVolume(float a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (vaemSupportsBootChimeVolume_onceToken != -1)
    dispatch_once(&vaemSupportsBootChimeVolume_onceToken, &__block_literal_global_1);
  if (vaemSupportsBootChimeVolume_isSupported)
  {
    if (CMSMVAUtility_AudioObjectSetPropertyData())
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

float vaemGetBootChimeVolume()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  float outData;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  ioDataSize = 4;
  outData = -1.0;
  if (vaemSupportsBootChimeVolume_onceToken != -1)
    dispatch_once(&vaemSupportsBootChimeVolume_onceToken, &__block_literal_global_1);
  if (vaemSupportsBootChimeVolume_isSupported)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"cblvbolg";
    if (!AudioObjectGetPropertyData(dword_1EE2B2C54, &inAddress, 0, 0, &ioDataSize, &outData))
      return outData;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return -1.0;
}

uint64_t vaemGetCachedSpeakerPortID()
{
  return dword_1EE2B2C54;
}

uint64_t vaemGetCachedContinuityScreenOutputPortID()
{
  return dword_1EE2B2C58;
}

uint64_t vaemSetCachedContinuityScreenOutputPortID(uint64_t result)
{
  dword_1EE2B2C58 = result;
  return result;
}

uint64_t cmsmInEarBluetoothStatusListener(int a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[5];
  int v7;
  os_log_type_t type;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  CMSMNotificationUtility_PostPreferredExternalRouteDidChange();
  if (dword_1EE2B3F38)
  {
    v9 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __cmsmInEarBluetoothStatusListener_block_invoke;
  v6[3] = &unk_1E309BF78;
  v7 = a1;
  v6[4] = &v10;
  MXDispatchAsync((uint64_t)"cmsmInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1347, 0, 0, v3, (uint64_t)v6);
  v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_1936AF928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cmsmInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
  int DoesPortSupportMultipleConnections;
  uint64_t v3;
  _BOOL4 ShouldBTPortBeTreatedAsInEar;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  __CFArray *v8;
  uint64_t SInt64;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int BTPortOwnsSharedAudioConnection;
  int v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  __CFArray *v27;
  const void *v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  __CFArray *v37;
  const void *v38;
  __CFArray *ArrayFromPortIDAndPartners;
  CFArrayRef theArray;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v43;
  unsigned __int8 IsPortBTManaged;
  os_log_type_t v45;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BOOL4 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)cf, (uint64_t)&theArray);
  DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(*(unsigned int *)(a1 + 40));
  v3 = *(unsigned int *)(a1 + 40);
  if (!DoesPortSupportMultipleConnections)
  {
    if (!CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(*(_DWORD *)(a1 + 40)))
      goto LABEL_88;
    if (theArray && CFArrayGetCount(theArray))
      goto LABEL_51;
    v8 = CMSMUtility_CopyCurrentOutputPorts();
    SInt64 = FigCFNumberCreateSInt64();
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(v8) && FigCFArrayContainsValue())
    {
      if (dword_1EE2B3F38)
      {
        v43 = 0;
        v45 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v11 = v43;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v45))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if (v12)
        {
          v13 = *(_DWORD *)(a1 + 40);
          v46 = 136315394;
          v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          v48 = 1024;
          v49 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (!v8)
          goto LABEL_85;
        goto LABEL_84;
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v43 = 0;
        v45 = OS_LOG_TYPE_DEFAULT;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v19 = v43;
        if (os_log_type_enabled(v18, v45))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if (v20)
        {
          v21 = *(_DWORD *)(a1 + 40);
          v46 = 136315394;
          v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          v48 = 1024;
          v49 = v21;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ArrayFromPortIDAndPartners = CMSMVAUtility_CreateArrayFromPortIDAndPartners(*(_DWORD *)(a1 + 40));
      vaemMakeArrayOfPortsRoutable(ArrayFromPortIDAndPartners, 1, 0, qword_1EE2B3CF0, 0);
      if (ArrayFromPortIDAndPartners)
        CFRelease(ArrayFromPortIDAndPartners);
    }
    if (!v8)
    {
LABEL_85:
      if (!SInt64)
        goto LABEL_88;
      v38 = (const void *)SInt64;
      goto LABEL_87;
    }
LABEL_84:
    CFRelease(v8);
    goto LABEL_85;
  }
  v45 = OS_LOG_TYPE_DEFAULT;
  IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(v3, 1);
  ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v3);
  if (ShouldBTPortBeTreatedAsInEar)
    MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(v3, &v45, &IsPortBTManaged, 1, ShouldBTPortBeTreatedAsInEar);
  if (dword_1EE2B3F38)
  {
    v43 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v6 = v43;
    if (os_log_type_enabled(v5, type))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if (v7)
    {
      v46 = 136315906;
      v47 = "vaemGetRoutingActionsForMultiConnectHeadset";
      v48 = 1024;
      v49 = IsPortBTManaged;
      v50 = 1024;
      v51 = v45;
      v52 = 1024;
      v53 = ShouldBTPortBeTreatedAsInEar;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!IsPortBTManaged)
  {
    if (ShouldBTPortBeTreatedAsInEar)
    {
      if (CMSMDeviceState_ItsAnAppleWatch())
      {
        if (!vaemShouldRequestOwnershipForSharedAudioRoute())
          goto LABEL_26;
      }
      else if (!cmsmShouldRequestOwnershipOnSharedAudioRoute(0, v3))
      {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_46:
    v14 = 0;
    goto LABEL_47;
  }
  if (v45 == OS_LOG_TYPE_DEFAULT)
  {
    if (dword_1EE2B3F38)
    {
      v43 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v43;
      if (os_log_type_enabled(v15, type))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
        v46 = 136315138;
        v47 = "vaemGetRoutingActionsForMultiConnectHeadset";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_46;
  }
  if (!vaeGetBTPortOwnsSharedAudioConnection(v3))
LABEL_25:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = vaeRequestOwnershipOnBTPort(*(unsigned int *)(a1 + 40));
LABEL_26:
  v14 = 1;
LABEL_47:
  BTPortOwnsSharedAudioConnection = vaeGetBTPortOwnsSharedAudioConnection(*(unsigned int *)(a1 + 40));
  v23 = BTPortOwnsSharedAudioConnection;
  if (v14 && BTPortOwnsSharedAudioConnection)
  {
    if (theArray && CFArrayGetCount(theArray))
    {
LABEL_51:
      FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("Skipping to make ports routable because there are currently activating endpoints"), theArray, 0, 1);
      goto LABEL_88;
    }
    v27 = CMSMUtility_CopyCurrentOutputPorts();
    v28 = (const void *)FigCFNumberCreateSInt64();
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(v27) && FigCFArrayContainsValue())
    {
      if (dword_1EE2B3F38)
      {
        v43 = 0;
        v45 = OS_LOG_TYPE_DEFAULT;
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v30 = v43;
        if (os_log_type_enabled(v29, v45))
          v31 = v30;
        else
          v31 = v30 & 0xFFFFFFFE;
        if (v31)
        {
          v32 = *(_DWORD *)(a1 + 40);
          v46 = 136315394;
          v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          v48 = 1024;
          v49 = v32;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (!v28)
          goto LABEL_78;
        goto LABEL_77;
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v43 = 0;
        v45 = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v34 = v43;
        if (os_log_type_enabled(v33, v45))
          v35 = v34;
        else
          v35 = v34 & 0xFFFFFFFE;
        if (v35)
        {
          v36 = *(_DWORD *)(a1 + 40);
          v46 = 136315394;
          v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          v48 = 1024;
          v49 = v36;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v37 = CMSMVAUtility_CreateArrayFromPortIDAndPartners(*(_DWORD *)(a1 + 40));
      vaemMakeArrayOfPortsRoutable(v37, 1, 0, qword_1EE2B3CF0, 0);
      if (v37)
        CFRelease(v37);
    }
    if (!v28)
    {
LABEL_78:
      if (!v27)
        goto LABEL_88;
      v38 = v27;
LABEL_87:
      CFRelease(v38);
      goto LABEL_88;
    }
LABEL_77:
    CFRelease(v28);
    goto LABEL_78;
  }
  if (dword_1EE2B3F38)
  {
    v43 = 0;
    v45 = OS_LOG_TYPE_DEFAULT;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v25 = v43;
    if (os_log_type_enabled(v24, v45))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if (v26)
    {
      v46 = 136315650;
      v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
      v48 = 1024;
      v49 = v14;
      v50 = 1024;
      v51 = v23;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_88:
  cmsmUpdatePickableRouteDescriptionLists(1);
  FigPredictedRouting_UpdatePredictedRoute(5);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (theArray)
    CFRelease(theArray);
}

const __CFArray *vaemMakeArrayOfPortsRoutable(const __CFArray *result, int a2, int a3, const void *a4, int a5)
{
  const __CFArray *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v12;
  int v13;
  CFIndex v14;
  int v15;
  uint64_t PortAtIndex;
  int PortTypeFromPortID;
  const __CFAllocator *v19;
  uint64_t UInt32;
  const void *v21;
  const void *v22;
  __CFArray *Mutable;
  __CFArray *v24;
  NSObject *v25;
  int v26;
  BOOL v27;
  NSObject *v28;
  unsigned int v29;
  CFIndex v30;
  const __CFNumber *ValueAtIndex;
  CFTypeRef v32;
  const void *v33;
  NSObject *v35;
  NSObject *v36;
  __CFArray *cf;
  const void *v38;
  AudioObjectID valuePtr;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  const __CFArray *v43;
  __CFArray *v44;
  uint64_t v45;
  __CFArray *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[24];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v9 = result;
  result = (const __CFArray *)CFArrayGetCount(result);
  if (!result)
    return result;
  v10 = (uint64_t)result;
  if (!a2 && a3)
  {
    if (dword_1EE2B3F38)
    {
      valuePtr = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(1);
  }
  v38 = a4;
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
    v12 = CMSMUtility_CopyCurrentOutputPorts();
  else
    v12 = 0;
  v13 = CMSMVAUtility_ArePortsHFPOnly(v9) | a5;
  cf = v12;
  if (a2)
  {
    if (v10 >= 1)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        PortAtIndex = CMSMVAUtility_GetPortAtIndex(v9, v14);
        PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
        if (PortTypeFromPortID == 1885433953 || PortTypeFromPortID == 1885433971)
          v15 = 1;
        if (PortTypeFromPortID == 1885433953)
          break;
        if (PortTypeFromPortID == 1885433971)
          break;
        ++v14;
      }
      while (v10 != v14);
      if (v15)
      {
        if (dword_1EE2B3C18)
        {
          v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          UInt32 = FigCFNumberCreateUInt32();
          v21 = a4;
          if (UInt32)
          {
            v22 = (const void *)UInt32;
            if (vaeDoesPortSupportRoutability(dword_1EE2B3C18)
              && vaeIsPortRoutable(dword_1EE2B3C18))
            {
              Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
              CFArrayAppendValue(Mutable, v22);
            }
            else
            {
              Mutable = 0;
            }
            CFRelease(v22);
          }
          else
          {
            Mutable = 0;
          }
        }
        else
        {
          Mutable = 0;
          v21 = a4;
        }
        if (dword_1EE2B3F38)
        {
          valuePtr = 0;
          v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v21 = a4;
        }
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        v43 = v9;
        v44 = Mutable;
        v45 = 0;
        v46 = v12;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        memset(v52, 0, sizeof(v52));
        v29 = cmsmSetVADRouteConfiguration((uint64_t)&v40, a3, v21);
        if (Mutable)
          CFRelease(Mutable);
        goto LABEL_44;
      }
    }
    if (v13)
      v24 = 0;
    else
      v24 = v12;
    if (dword_1EE2B3F38)
    {
      valuePtr = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v43 = v9;
    v44 = 0;
    v45 = 0;
    v46 = v24;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    *(_OWORD *)v52 = 0u;
  }
  else
  {
    if (v13)
      v12 = 0;
    v26 = CMSMUtility_IsSharePlayCapableCallSessionActive();
    v27 = 0;
    if (a3 && v26)
      v27 = CMSMVAUtility_ArePortsHFPOnly(v9) != 0;
    if (dword_1EE2B3F38)
    {
      valuePtr = 0;
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v43 = 0;
    v44 = v9;
    v45 = 0;
    v46 = v12;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52[0] = v27;
    *(_QWORD *)&v52[9] = 0;
    *(_QWORD *)&v52[1] = 0;
  }
  *(_QWORD *)&v52[16] = 0;
  v29 = cmsmSetVADRouteConfiguration((uint64_t)&v40, a3, v38);
LABEL_44:
  if (!v29 && v10 >= 1)
  {
    v30 = 0;
    while (1)
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v30);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      v32 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      v33 = v32;
      if (v32 && dword_1EE2B3F38 != 0)
        break;
      if (v32)
        goto LABEL_53;
LABEL_54:
      if (v10 == ++v30)
        goto LABEL_55;
    }
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_53:
    CFRelease(v33);
    goto LABEL_54;
  }
LABEL_55:
  if (cf)
    CFRelease(cf);
  return (const __CFArray *)v29;
}

uint64_t cmsmPrimaryBudInEarBluetoothStatusListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmPrimaryBudInEarBluetoothStatusListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmPrimaryBudInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1452, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmPrimaryBudInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
  cmsmUpdateInEarBasedPlaybackState(*(_DWORD *)(a1 + 32), 0, 0);
}

uint64_t cmsmSecondaryBudInEarBluetoothStatusListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmSecondaryBudInEarBluetoothStatusListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmSecondaryBudInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1465, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmSecondaryBudInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
  cmsmUpdateInEarBasedPlaybackState(*(_DWORD *)(a1 + 32), 0, 0);
}

uint64_t cmsmOwnsSharedAudioConnectionListener(uint64_t a1)
{
  int v1;
  uint64_t BTPortOwnsSharedAudioConnection;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  _QWORD v7[4];
  int v8;
  uint64_t v9;

  v1 = a1;
  v9 = *MEMORY[0x1E0C80C00];
  BTPortOwnsSharedAudioConnection = vaeGetBTPortOwnsSharedAudioConnection(a1);
  v3 = BTPortOwnsSharedAudioConnection;
  CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(BTPortOwnsSharedAudioConnection);
  if (v3)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaeSignalOwnershipIsTaken();
  }
  else
  {
    v5 = MXGetSerialQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __cmsmOwnsSharedAudioConnectionListener_block_invoke;
    v7[3] = &__block_descriptor_36_e5_v8__0l;
    v8 = v1;
    MXDispatchAsync((uint64_t)"cmsmOwnsSharedAudioConnectionListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1500, 0, 0, v5, (uint64_t)v7);
  }
  return 0;
}

void __cmsmOwnsSharedAudioConnectionListener_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(_DWORD *)(a1 + 32);
  v4 = CMSMUtility_CopyCurrentOutputPorts();
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      while (CMSMVAUtility_GetPortAtIndex(v5, v8) != v3)
      {
        if (v7 == ++v8)
          goto LABEL_10;
      }
      CMSMVAUtility_DisableBluetoothSharingSession();
    }
LABEL_10:
    CFRelease(v5);
  }
}

uint64_t cmsmSharedAudioConnectionFailedListener(uint64_t a1)
{
  uint64_t BTPortOwnsSharedAudioConnection;

  BTPortOwnsSharedAudioConnection = vaeGetBTPortOwnsSharedAudioConnection(a1);
  CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(BTPortOwnsSharedAudioConnection);
  return 0;
}

uint64_t cmsmBluetoothListeningModeListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothListeningModeListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothListeningModeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1550, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothListeningModeListener_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  vaeGetBluetoothListeningMode(*(unsigned int *)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, CFSTR("configUpdateReasonEndpointDescriptorChanged"));
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t cmsmBluetoothSharingAggregationListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSharingAggregationListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSharingAggregationListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1576, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSharingAggregationListener_block_invoke(uint64_t a1)
{
  const __CFArray *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v3;
  CFTypeRef v4;
  int v5;
  CFIndex v6;
  const void *ValueAtIndex;
  CFRange v8;

  v1 = (const __CFArray *)vaeCopyBluetoothShareablePortsForPort(*(_DWORD *)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
  {
    if (CFArrayGetCount(v1) >= 1)
    {
      if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
      {
        v3 = CMSMUtility_CopyCurrentOutputPorts();
        if (!v3)
          goto LABEL_15;
        v4 = v3;
        if (CFArrayGetCount(v3) < 1)
        {
LABEL_14:
          CFRelease(v4);
          goto LABEL_15;
        }
        v5 = 0;
        v6 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4, v6);
          v8.length = CFArrayGetCount(v1);
          v8.location = 0;
          if (!CFArrayContainsValue(v1, v8, ValueAtIndex))
            v5 = 1;
          ++v6;
        }
        while (v6 < CFArrayGetCount((CFArrayRef)v4));
        CFRelease(v4);
        if (!v5)
          goto LABEL_15;
      }
      v4 = CMSMUtility_CopySystemAudioRoutingContextUUID();
      CMSMVAUtility_AggregatePorts((uint64_t)v1, 0, (uint64_t)v4);
      if (v4)
        goto LABEL_14;
    }
LABEL_15:
    CFRelease(v1);
  }
}

uint64_t cmsmBluetoothSpatialAudioEnabledListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioEnabledListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioEnabledListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1626, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioEnabledListener_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  byte_1EE2B2C30 = vaeIsHeadTrackedSpatialAudioActive(*(_DWORD *)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, CFSTR("configUpdateReasonEndpointDescriptorChanged"));
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t cmsmBluetoothSpatialAudioUserEnableFeatureListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioUserEnableFeatureListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioUserEnableFeatureListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1652, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioUserEnableFeatureListener_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  vaeDoesPortAllowHeadTrackedSpatialAudio(*(_DWORD *)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, CFSTR("configUpdateReasonEndpointDescriptorChanged"));
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t cmsmBluetoothSpatialAudioModeListener(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioModeListener_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioModeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1681, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioModeListener_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  vaeGetBluetoothSpatialAudioMode(*(unsigned int *)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, CFSTR("configUpdateReasonEndpointDescriptorChanged"));
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t vaemIsMATAtmosAvailable()
{
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  unsigned int outData;

  ioDataSize = 4;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"smtaptuo";
  inAddress.mElement = 0;
  if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData))
  {
    return 0;
  }
  else
  {
    return outData;
  }
}

CFArrayRef vaemCopyVirtualFormatsSupported()
{
  const __CFArray *Mutable;
  CFArrayRef Copy;
  BOOL v2;
  const __CFAllocator *v3;
  uint64_t v4;
  char *v5;
  CFNumberRef v6;
  unsigned int capacity[4];
  AudioObjectID outData;
  CFRange v10;

  outData = 0;
  *(_QWORD *)&capacity[1] = 0;
  capacity[0] = 0;
  Mutable = 0;
  Copy = 0;
  if (vaemGetStream0(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0, &outData))v2 = 1;
  else
    v2 = outData == 0;
  if (!v2)
  {
    if (vaemCopySupportedStreamFormats(outData, 0, &capacity[1], capacity))
    {
      Mutable = 0;
      Copy = 0;
    }
    else
    {
      v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v4 = capacity[0];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity[0], MEMORY[0x1E0C9B378]);
      if ((_DWORD)v4)
      {
        v5 = (char *)(*(_QWORD *)&capacity[1] + 8);
        while (1)
        {
          v6 = CFNumberCreate(v3, kCFNumberIntType, v5);
          v10.length = CFArrayGetCount(Mutable);
          v10.location = 0;
          if (!CFArrayContainsValue(Mutable, v10, v6))
            break;
          if (v6)
            goto LABEL_10;
LABEL_11:
          v5 += 56;
          if (!--v4)
            goto LABEL_15;
        }
        CFArrayAppendValue(Mutable, v6);
        if (!v6)
          goto LABEL_11;
LABEL_10:
        CFRelease(v6);
        goto LABEL_11;
      }
LABEL_15:
      Copy = CFArrayCreateCopy(v3, Mutable);
    }
  }
  if (*(_QWORD *)&capacity[1])
    free(*(void **)&capacity[1]);
  if (Mutable)
    CFRelease(Mutable);
  return Copy;
}

uint64_t vaemSetStreamASBD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = CMSMVAUtility_AudioObjectSetPropertyData();
  -[MXSessionManager updateDeviceSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDeviceSampleRate:", a4);
  return v5;
}

uint64_t vaemSetVirtualFormatForScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int outData;

  outData = 0;
  v6 = 0xFFFFFFFFLL;
  if (!vaemGetStream0(a1, a3, &outData))
  {
    if (outData)
    {
      vaemRemoveVADAvailableSampleRatesListener();
      v6 = vaemSetStreamASBD(outData, a2, a3, a1);
      vaemAddVADAvailableSampleRatesListener(0);
      if (!(_DWORD)v6)
      {
        v7 = *(_DWORD *)(a2 + 28);
        if ((_DWORD)a3 == 1)
          CMSMNotificationUtility_PostNumberOfInputChannelsDidChange(v7);
        else
          CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange(v7);
        return 0;
      }
    }
  }
  return v6;
}

uint64_t vaemRemoveVADAvailableSampleRatesListener()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  if ((_DWORD)result)
  {
    LODWORD(v2) = 0;
    return AudioObjectRemovePropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x676C6F626E737223, v2), "defaultVADID"), (const AudioObjectPropertyAddress *)&v1, (AudioObjectPropertyListenerProc)vaemVADAvailableSampleRatesListener, 0);
  }
  return result;
}

void vaemAddVADAvailableSampleRatesListener(int a1)
{
  uint64_t v2;
  uint64_t v3;

  LODWORD(v3) = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0, v3), "defaultVADID"))
  {
    LODWORD(v3) = 0;
    AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x676C6F626E737223, v3), "defaultVADID"), (const AudioObjectPropertyAddress *)&v2, (AudioObjectPropertyListenerProc)vaemVADAvailableSampleRatesListener, 0);
  }
  if (a1)
    vaemVADAvailableSampleRatesListenerGuts_f();
}

BOOL vaemMusicVADExists()
{
  return -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID") != 0;
}

BOOL vaemPerAppAirPlayVADExists()
{
  return -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID") != 0;
}

BOOL vaemSpeechDetectionVADExists()
{
  return -[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID") != 0;
}

BOOL vaemSpeakerAlertVADExists()
{
  return -[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID") != 0;
}

uint64_t vaemSetCameraParameters(uint64_t a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  result = CMSMVAUtility_AudioObjectSetPropertyData();
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

float vaemGetCurrentSafetyOffsetForScope(AudioObjectID a1, int a2)
{
  AudioObjectPropertyScope v3;
  unint64_t v4;
  double v5;
  float v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
    v3 = 1768845428;
  else
    v3 = 1869968496;
  inAddress.mSelector = 1935763060;
  inAddress.mScope = v3;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    outData = 0;
    v5 = 0.0;
  }
  else
  {
    LODWORD(v4) = outData;
    v5 = (double)v4;
  }
  v6 = v5 / vaemGetSampleRateForDevice(a1);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v6;
}

float vaemGetDeviceVolume(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  UInt32 ioDataSize;
  float outData;
  AudioObjectPropertyAddress inAddress;

  *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = a2;
  ioDataSize = 4;
  outData = 0.0;
  AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

BOOL vaemCurrentRouteHasMuteControl()
{
  const __CFNumber *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertyAddress inAddress;
  int valuePtr;
  UInt32 ioDataSize;
  CFTypeRef outData[21];

  outData[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  outData[0] = 0;
  valuePtr = 1;
  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"rptcbolg";
  inAddress.mElement = 0;
  if (AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, outData))
  {
    valuePtr = 1;
  }
  else
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)outData[0], CFSTR("policyMute"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (outData[0])
    CFRelease(outData[0]);
  return valuePtr != 0;
}

uint64_t vaemConvertToDecibelInVAD(AudioObjectID a1, _DWORD *outData)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = 0x6F75747076326462;
  inAddress.mElement = 0;
  ioDataSize = 4;
  result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData);
  v7 = result;
  if ((_DWORD)result)
  {
    *outData = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v7;
  }
  return result;
}

void vaemCalculateAndSetDeviceBufferDuration(int a1, int a2, float DefaultBufferDuration, double SampleRateForDevice)
{
  float LongBufferDuration;
  float v9;
  char v10;
  int IsHangsBufferedSizeHintEnabled;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v13;
  unsigned int v14;
  unsigned int v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  LongBufferDuration = CMSMUtility_GetLongBufferDuration();
  if (DefaultBufferDuration == 0.0)
  {
    v9 = LongBufferDuration;
    if (!CMSMDeviceState_ScreenIsBlanked()
      || v9 == 0.0
      || (dword_1EE2B3CC8 != 0) | a2 | byte_1EE2B2C30)
    {
      DefaultBufferDuration = cmsmGetDefaultBufferDuration();
      v10 = 0;
    }
    else
    {
      v10 = 1;
      DefaultBufferDuration = v9;
    }
  }
  else
  {
    IsHangsBufferedSizeHintEnabled = MX_FeatureFlags_IsHangsBufferedSizeHintEnabled();
    v10 = 0;
    if (a2 && IsHangsBufferedSizeHintEnabled)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v21, v22), "defaultVADID");
      if (CMSMVAUtility_AudioObjectSetPropertyData())
      {
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v10 = 0;
      goto LABEL_30;
    }
  }
  if (SampleRateForDevice == 0.0)
    SampleRateForDevice = vaemGetSampleRateForDevice(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
  if (SampleRateForDevice != 0.0 && DefaultBufferDuration != 0.0)
  {
    v13 = SampleRateForDevice * DefaultBufferDuration;
    v14 = v13;
    v15 = FigUInt32NearestPowerOfTwo();
    if (dword_1EE2B3F38)
    {
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
    {
      vaemSetDeviceBufferNumPCMFramesQuiet(v15);
    }
    else
    {
      if (a2)
        v17 = v14;
      else
        v17 = v15;
      v18 = vaemSetDeviceBufferNumPCMFrames(v17);
      if (a2 && v18)
      {
        if (dword_1EE2B3F38)
        {
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaemSetDeviceBufferNumPCMFrames(v15);
      }
    }
LABEL_30:
    byte_1EE2B2C25 = v10;
  }
}

uint64_t vaemSetDeviceBufferNumPCMFramesQuiet(unsigned int a1)
{
  unsigned int v1;
  int v2;
  _QWORD v4[2];
  int v5;
  unsigned int v6;

  v1 = a1;
  v6 = a1;
  v4[0] = 0;
  vaemGetDeviceBufferNumPCMFramesRange((_DWORD *)v4 + 1, v4);
  if (!v2)
  {
    if (HIDWORD(v4[0]) > v1)
    {
      v6 = HIDWORD(v4[0]);
      v1 = HIDWORD(v4[0]);
    }
    if (v1 > LODWORD(v4[0]))
      v6 = v4[0];
  }
  v4[1] = 0x6F7574707166737ALL;
  v5 = 0;
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemSetDeviceFormat(uint64_t a1, const void *a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Stream0;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  double v22;
  _DWORD *v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  NSObject *v32;
  AudioObjectID outData;
  os_log_type_t type[4];
  _OWORD v35[3];
  void *v36;
  int v37;
  _DWORD v38[8];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (dword_1EE2B3F38)
  {
    LODWORD(v35[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (byte_1EE2B2C24)
    return 4294954309;
  Stream0 = vaemGetStream0(a1, 0, &outData);
  if ((_DWORD)Stream0 || !outData)
    return Stream0;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  vaemGetStreamASBD(outData, (uint64_t)v38);
  if ((_DWORD)v9)
    return v9;
  if (!a2)
    goto LABEL_23;
  if (!CFEqual(a2, CFSTR("MATAtmos")))
  {
    if (CFEqual(a2, CFSTR("AC-3")))
    {
      if (v38[2] != 1667326771)
      {
        if (vaemStreamSupportsFormat(outData, 1667326771))
        {
          *(_QWORD *)&v35[0] = 0x40E7700000000000;
          *(_OWORD *)((char *)v35 + 8) = xmmword_1937A3550;
          *(_OWORD *)((char *)&v35[1] + 8) = xmmword_1937A3560;
          Stream0 = vaemSetStreamASBD(outData, (uint64_t)v35, 0, a1);
          if (!(_DWORD)Stream0 && dword_1EE2B3F38)
            goto LABEL_16;
          return Stream0;
        }
        *(_DWORD *)type = 0;
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v28 = *(_DWORD *)type;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if (!v29)
          goto LABEL_59;
        LODWORD(v35[0]) = 136315138;
        *(_QWORD *)((char *)v35 + 4) = "vaemSetDeviceFormat";
LABEL_53:
        _os_log_send_and_compose_impl();
LABEL_59:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
LABEL_23:
    if (a3 || v38[2] != 1819304813)
    {
      memset(v35, 0, 40);
      v36 = 0;
      *(_DWORD *)type = 0;
      v14 = vaemCopySupportedStreamFormats(outData, 0, &v36, (unsigned int *)type);
      if ((_DWORD)v14)
      {
        Stream0 = v14;
        free(v36);
        return Stream0;
      }
      v15 = *(unsigned int *)type;
      if (*(_DWORD *)type)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = (char *)v36 + v16;
          if (*(_DWORD *)((char *)v36 + v16 + 8) == 1819304813)
          {
            if (v18 && *(_DWORD *)((char *)v36 + v16 + 28) != 2)
            {
              v18 = 1;
            }
            else
            {
              v20 = *(_OWORD *)v19;
              v21 = *((_OWORD *)v19 + 1);
              *(_QWORD *)&v35[2] = *((_QWORD *)v19 + 4);
              v35[0] = v20;
              v35[1] = v21;
              v22 = *(double *)v19;
              *(_QWORD *)&v35[0] = *(_QWORD *)v19;
              v17 = HIDWORD(v21);
              v18 = 1;
              if (HIDWORD(v21) == 2 && v22 == 44100.0)
                goto LABEL_56;
            }
          }
          v16 += 56;
        }
        while (56 * *(unsigned int *)type != v16);
        if (v17 != 2)
        {
          v23 = v36;
          while (v23[2] != 1819304813 || *(double *)v23 != 44100.0)
          {
            v23 += 14;
            if (!--v15)
              goto LABEL_56;
          }
          v30 = *((_QWORD *)v23 + 4);
          v31 = *((_OWORD *)v23 + 1);
          *((_QWORD *)&v35[0] + 1) = *((_QWORD *)v23 + 1);
          v35[1] = v31;
          *(_QWORD *)&v35[2] = v30;
          *(_QWORD *)&v35[0] = 0x40E5888000000000;
        }
      }
LABEL_56:
      free(v36);
      v36 = (void *)0x6F75747073666D74;
      v37 = 0;
      Stream0 = CMSMVAUtility_AudioObjectSetPropertyData();
      -[MXSessionManager updateDeviceSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDeviceSampleRate:", a1);
      if ((_DWORD)Stream0)
        return Stream0;
      if (dword_1EE2B3F38)
      {
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        goto LABEL_59;
      }
    }
    return 0;
  }
  if ((v38[2] & 0xFFFFFEFF) == 0x6D74622B)
    return 0;
  v10 = 1836344107;
  v11 = vaemStreamSupportsFormat(outData, 1836344107);
  v12 = vaemStreamSupportsFormat(outData, 1836343851);
  if (!v11)
  {
    v10 = 1836343851;
    if (!v12)
    {
      *(_DWORD *)type = 0;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v25 = *(_DWORD *)type;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if (!v26)
        goto LABEL_59;
      LODWORD(v35[0]) = 136315138;
      *(_QWORD *)((char *)v35 + 4) = "vaemSetDeviceFormat";
      goto LABEL_53;
    }
  }
  *(_QWORD *)&v35[0] = 0x40E7700000000000;
  DWORD2(v35[0]) = v10;
  *(_OWORD *)((char *)v35 + 12) = xmmword_1937A3540;
  *(_QWORD *)((char *)&v35[1] + 12) = 0x1000000020;
  DWORD1(v35[2]) = 0;
  v36 = (void *)0x6F75747073666D74;
  v37 = 0;
  Stream0 = CMSMVAUtility_AudioObjectSetPropertyData();
  -[MXSessionManager updateDeviceSampleRate:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDeviceSampleRate:", a1);
  if (!(_DWORD)Stream0 && dword_1EE2B3F38)
  {
LABEL_16:
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return Stream0;
}

uint64_t vaemGetDisallowAudioFormatChanges()
{
  return byte_1EE2B2C24;
}

uint64_t vaemSetToolboxDuckingEnabled(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  unsigned int v4;
  unsigned int v5;
  AudioObjectPropertyAddress inAddress;
  unsigned int v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dxevptuo";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(a1, &inAddress))
  {
    result = CMSMVAUtility_AudioObjectSetPropertyData();
    v7 = result;
    if (!(_DWORD)result)
      return result;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    v7 = 0;
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v4 = v7;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if (v5)
    {
      v8 = 136315138;
      v9 = "vaemSetToolboxDuckingEnabled";
      _os_log_send_and_compose_impl();
    }
  }
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void vaemSetDeviceInputGainScalar(float a1)
{
  uint64_t CurrentInputPortAtIndex;
  const void *v2;
  CFTypeRef v3;
  id v4;
  uint64_t v5;
  float v6;

  *((float *)&v5 + 1) = a1;
  LODWORD(v5) = 0;
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", *(_QWORD *)"mlovtpni", v5), "defaultVADID");
  CMSMVAUtility_AudioObjectSetPropertyData();
  CurrentInputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  v2 = (const void *)vaeCopyNameForPort(CurrentInputPortAtIndex);
  v3 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
  v4 = vaeCopyFigInputDeviceNameFromVADPort(CurrentInputPortAtIndex);
  PVMSetInputVolumePreference(v2, (unint64_t)v3, (uint64_t)v4, v6);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
}

uint64_t vaemSetDefaultInputGain()
{
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

void vaemSetInputGainFromPreferenceIfPresent()
{
  uint64_t CurrentInputPortAtIndex;
  const void *v1;
  CFTypeRef v2;
  id v3;
  float v4;

  CurrentInputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  v1 = (const void *)vaeCopyNameForPort(CurrentInputPortAtIndex);
  v2 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
  v3 = vaeCopyFigInputDeviceNameFromVADPort(CurrentInputPortAtIndex);
  if (PVMInputVolumePrefExistsForDeviceRoute(v1, (unint64_t)v2, (uint64_t)v3))
  {
    v4 = PVMGetInputVolumePreference(v1, (unint64_t)v2, (uint64_t)v3);
    vaemSetDeviceInputGainScalar(v4);
    if (!v1)
      goto LABEL_4;
    goto LABEL_3;
  }
  vaemSetDefaultInputGain();
  if (v1)
LABEL_3:
    CFRelease(v1);
LABEL_4:
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
}

BOOL vaemIsPersistentRouteActive()
{
  return *((_QWORD *)&xmmword_1EE2B2BA8 + 1) != 0;
}

uint64_t vaemSetUplinkMute(int a1)
{
  int v2;
  uint64_t v3;

  v2 = -[MXSessionManager uplinkMute](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "uplinkMute");
  v3 = vaemSetUplinkMuteOnDevice(a1);
  if (!(_DWORD)v3)
  {
    -[MXSessionManager setUplinkMute:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setUplinkMute:", a1 != 0);
    if (v2 != -[MXSessionManager uplinkMute](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "uplinkMute"))CMSMNotificationUtility_PostUplinkMuteDidChange(v2);
  }
  return v3;
}

uint64_t vaemSetUplinkMuteOnDevice(int a1)
{
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _DWORD v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v2 = (int)unk_1EE2B3BC0;
  if (unk_1EE2B3BC0)
  {
    unk_1EE2B3BC0(0, v11);
    v2 = v11[0] & 2;
  }
  v8 = v2 | a1;
  v9 = 0x696E70746D757465;
  v10 = 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v6, v7), "defaultVADID");
  v4 = CMSMVAUtility_AudioObjectSetPropertyData();
  if (unk_1EE2B3BC0)
    unk_1EE2B3BC0(1, &v8);
  return v4;
}

uint64_t vaemSetDownlinkMute(int a1)
{
  int v2;

  v2 = vaemGetUplinkMute() | (2 * a1);
  if (unk_1EE2B3BC0)
    unk_1EE2B3BC0(1, &v2);
  return 0;
}

uint64_t vaemGetUplinkMute()
{
  int outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  outData = 0;
  if (unk_1EE2B3BC0)
  {
    unk_1EE2B3BC0(0, &outData);
    return outData & 1;
  }
  else
  {
    *(_QWORD *)&inAddress.mSelector = 0x696E70746D757465;
    inAddress.mElement = 0;
    ioDataSize = 4;
    AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
    return outData;
  }
}

uint64_t vaemUnmuteFullMuteIfMuted()
{
  uint64_t result;

  result = vaemGetFullMute();
  if ((_DWORD)result)
    return vaemSetFullMute();
  return result;
}

uint64_t vaemSetFullMute()
{
  int FullMute;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v2;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  FullMute = vaemGetFullMute();
  v4 = CMSMVAUtility_AudioObjectSetPropertyData();
  if (v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v4;
  }
  else
  {
    MEMORY[0x1940352BC](gCMSM);
    v2 = vaemGetFullMute();
    byte_1EE2B3CB0 = v2;
    MEMORY[0x1940352C8](gCMSM);
    if (FullMute != v2)
      CMSMNotificationUtility_PostFullMuteDidChangeToVolumeButtonClientAndAVSystemControllers(v2);
    return 0;
  }
}

uint64_t vaemSetInputDataSource(uint64_t a1)
{
  Boolean outIsSettable;
  AudioObjectPropertyAddress inAddress;
  uint64_t v4;

  v4 = a1;
  *(_QWORD *)&inAddress.mSelector = 0x696E707464737263;
  inAddress.mElement = 0;
  outIsSettable = 1;
  AudioObjectIsPropertySettable(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, &outIsSettable);
  if (!outIsSettable)
    return 0;
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemSetOutputDataDestination(uint64_t a1)
{
  Boolean outIsSettable;
  AudioObjectPropertyAddress inAddress;
  uint64_t v4;

  v4 = a1;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747064647374;
  inAddress.mElement = 0;
  outIsSettable = 1;
  AudioObjectIsPropertySettable(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, &outIsSettable);
  if (!outIsSettable)
    return 0;
  -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemVolumeStateGetLastVolumeRampCategory()
{
  return qword_1EE2B2B78;
}

uint64_t vaemVolumeStateGetLastVolumeRampInProgress()
{
  return HIBYTE(word_1EE2B2B70);
}

uint64_t vaemVolumeStateGetLastVolumeSetVADID()
{
  return gVAEM;
}

uint64_t vaemDeviceCancelVolumeRamp(uint64_t a1, __int16 a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSMVAUtility_AudioObjectSetPropertyData())
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return vaemVADVolumeRampStatusChangeListenerGuts_f(a1);
}

uint64_t vaemVADVolumeRampStatusChangeListenerGuts_f(uint64_t a1)
{
  float v2;
  uint64_t result;
  float v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 v6;
  unsigned int v7;
  __CFString *VADNameForVADID;
  UInt32 ioDataSize;
  float outData;
  const char *v11;
  __int16 v12;
  __CFString *v13;
  AudioObjectPropertyAddress inAddress;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(float *)&dword_1EE2B2B5C;
  *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = 0;
  ioDataSize = 4;
  outData = 0.0;
  result = AudioObjectGetPropertyData(gVAEM, &inAddress, 0, 0, &ioDataSize, &outData);
  v4 = outData;
  HIBYTE(word_1EE2B2B70) = 0;
  qword_1EE2B2B78 = 0;
  if (vabds_f32(v2, outData) > 0.025)
  {
    if (dword_1EE2B3F38)
    {
      ioDataSize = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v6 = ioDataSize;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if (v7)
      {
        VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
        outData = 4.8151e-34;
        v11 = "vaemVADVolumeRampStatusChangeListenerGuts_f";
        v12 = 2114;
        v13 = VADNameForVADID;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return vaemVADDeviceVolumeChangeListenerGuts_f(0, 1, v4);
  }
  return result;
}

uint64_t vaemAggregatePorts(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __CFArray *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFArray *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3)
    v7 = CMSMUtility_CopyCurrentOutputPorts();
  else
    v7 = 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  memset(v11, 0, sizeof(v11));
  v12 = a1;
  v13 = 0;
  v14 = a1;
  v15 = v7;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v9 = cmsmSetVADRouteConfiguration(v11, a2, a4);
  if (v7)
    CFRelease(v7);
  return v9;
}

uint64_t vaemDeaggregatePorts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v12 = a2;
  v13 = 0;
  v14 = a1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  return cmsmSetVADRouteConfiguration(v10, a3, a4);
}

uint64_t vaemSetHDMILatencyOverride(int a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __vaemSetHDMILatencyOverride_block_invoke;
  v5[3] = &unk_1E309BF78;
  v6 = a1;
  v5[4] = &v7;
  MXDispatchAsync((uint64_t)"vaemSetHDMILatencyOverride", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4624, 0, 0, v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1936B4798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __vaemSetHDMILatencyOverride_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  AudioObjectPropertyAddress inAddress;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"otalptuo";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v5, v6), "defaultVADID");
    result = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    result = 4294954509;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t vaemAddVADDeviceVolumeChangeListener(int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  if ((_DWORD)result)
  {
    LODWORD(v4) = a1;
    return AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x6F757470766F6C6DLL, v4), "defaultVADID"), (const AudioObjectPropertyAddress *)&v3, (AudioObjectPropertyListenerProc)vaemVADDeviceVolumeChangeListener, 0);
  }
  return result;
}

uint64_t vaemVADDeviceVolumeChangeListener(int a1, unsigned int a2, uint64_t *a3)
{
  _DWORD *v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  _QWORD v11[5];
  unsigned int v12;
  int v13;
  os_log_type_t type;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = malloc_type_malloc(12 * a2, 0x10000403E1C8BA9uLL);
  v7 = *a3;
  v6[2] = *((_DWORD *)a3 + 2);
  *(_QWORD *)v6 = v7;
  if (dword_1EE2B3F38)
  {
    v15 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = MXGetSerialQueue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __vaemVADDeviceVolumeChangeListener_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = v6;
  v12 = a2;
  v13 = a1;
  MXDispatchAsync((uint64_t)"vaemVADDeviceVolumeChangeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4776, 0, 0, v9, (uint64_t)v11);
  return 0;
}

uint64_t vaemVADVolumeRampStatusChangeListener(int a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  _QWORD v5[4];
  int v6;
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled())
  {
    if (dword_1EE2B3F38)
    {
      v8 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = MXGetSerialQueue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __vaemVADVolumeRampStatusChangeListener_block_invoke;
    v5[3] = &__block_descriptor_36_e5_v8__0l;
    v6 = a1;
    MXDispatchAsync((uint64_t)"vaemVADVolumeRampStatusChangeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4890, 0, 0, v3, (uint64_t)v5);
  }
  return 0;
}

void vaemUpdateSystemHasAudioInputDeviceState()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668309362, 1768776806);
  v1 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668313666, 1768776806);
  v2 = v1;
  v3 = byte_1EE2B2BF9;
  if (byte_1EE2B2BF9 == v0)
  {
    if (byte_1EE2B2BFA == v1 || dword_1EE2B3F38 == 0)
      goto LABEL_12;
  }
  else if (!dword_1EE2B3F38)
  {
    goto LABEL_10;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v3 = byte_1EE2B2BF9;
LABEL_10:
  if (v3 != v0)
  {
    byte_1EE2B2BF9 = v0;
    CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange();
  }
LABEL_12:
  if (byte_1EE2B2BFA != v2)
  {
    byte_1EE2B2BFA = v2;
    CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange();
  }
}

uint64_t vaemVADAvailableSampleRatesListener()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADAvailableSampleRatesListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5383, 0, 0, v0, 0, (uint64_t)vaemVADAvailableSampleRatesListenerGuts_f);
  return 0;
}

void vaemAddVADCurrentSampleRateListener(int a1)
{
  uint64_t v2;
  uint64_t v3;

  LODWORD(v3) = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0, v3), "defaultVADID"))
  {
    LODWORD(v3) = 0;
    AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x676C6F626E737274, v3), "defaultVADID"), (const AudioObjectPropertyAddress *)&v2, (AudioObjectPropertyListenerProc)vaemVADCurrentSampleRateListener, 0);
  }
  if (a1)
    vaemVADCurrentSampleRateListenerGuts_f();
}

uint64_t vaemVADCurrentSampleRateListener()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADCurrentSampleRateListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5390, 0, 0, v0, 0, (uint64_t)vaemVADCurrentSampleRateListenerGuts_f);
  return 0;
}

void vaemVADCurrentSampleRateListenerGuts_f()
{
  NSObject *v0;

  -[MXSessionManager refreshDeviceSampleRateCache](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "refreshDeviceSampleRateCache");
  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"vaemVADCurrentSampleRateListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5363, 0, 0, v0, (uint64_t)&__block_literal_global_57);
}

void vaemAddVADCurrentDeviceBufferSizeListener(int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  LODWORD(v4) = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0, v4), "defaultVADID"))
  {
    LODWORD(v4) = 0;
    AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x676C6F626673697ALL, v4), "defaultVADID"), (const AudioObjectPropertyAddress *)&v3, (AudioObjectPropertyListenerProc)vaemVADCurrentBufferFrameSizeListener, 0);
  }
  if (a1)
  {
    v2 = MXGetNotificationSenderQueue();
    MXDispatchAsync((uint64_t)"vaemVADCurrentBufferFrameSizeListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5373, 0, 0, v2, (uint64_t)&__block_literal_global_58_0);
  }
}

uint64_t vaemVADCurrentBufferFrameSizeListener()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADCurrentBufferFrameSizeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5397, 0, 0, v0, 0, (uint64_t)vaemVADCurrentBufferFrameSizeListenerGuts_f);
  return 0;
}

void vaemVADCurrentBufferFrameSizeListenerGuts_f()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"vaemVADCurrentBufferFrameSizeListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5373, 0, 0, v0, (uint64_t)&__block_literal_global_58_0);
}

uint64_t vaemCopyCPMSPowerBudgetRangeInMilliWatts(uint64_t a1)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int inQualifierData;
  uint64_t outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747074686272;
  inAddress.mElement = 0;
  ioDataSize = 8;
  inQualifierData = a1;
  if (a1 == 6)
  {
    v1 = -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "actuatorVADID");
  }
  else
  {
    if (a1 != 5)
      return outData;
    v1 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  }
  if (AudioObjectGetPropertyData(v1, &inAddress, 4u, &inQualifierData, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return outData;
}

uint64_t vaemCopyThermalControlInfo()
{
  AudioObjectID v0;
  UInt32 ioDataSize;
  uint64_t outData;
  AudioObjectPropertyAddress inAddress;

  outData = 0;
  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747074686264;
  inAddress.mElement = 0;
  v0 = -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "actuatorVADID");
  if (!AudioObjectHasProperty(v0, &inAddress))
    return 0;
  if (AudioObjectGetPropertyData(v0, &inAddress, 0, 0, &ioDataSize, &outData))
    return 0;
  return outData;
}

uint64_t vaemSetThermalControlInfo(uint64_t a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "actuatorVADID");
  result = CMSMVAUtility_AudioObjectSetPropertyData();
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v3;
  }
  return result;
}

uint64_t vaemCopyCPMSPowerBudget(uint64_t a1)
{
  uint64_t v1;
  AudioObjectID v2;
  AudioObjectID v3;
  OSStatus PropertyData;
  uint64_t v6;
  uint64_t outData;
  AudioObjectPropertyAddress inAddress;

  inAddress.mElement = 0;
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dbhtptuo";
  v6 = a1 | 0x800000000;
  if (a1 == 6)
  {
    v2 = -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v6), "actuatorVADID");
  }
  else
  {
    v1 = 0;
    if (a1 != 5)
      return v1;
    v2 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v6), "defaultVADID");
  }
  v3 = v2;
  if (!AudioObjectHasProperty(v2, &inAddress))
    return 0;
  PropertyData = AudioObjectGetPropertyData(v3, &inAddress, 4u, &v6, (UInt32 *)&v6 + 1, &outData);
  v1 = outData;
  if (PropertyData)
    return 0;
  return v1;
}

uint64_t vaemSetCPMSPowerBudget(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (a2 == 6)
  {
    -[MXSessionManager actuatorVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "actuatorVADID");
  }
  else
  {
    if (a2 != 5)
      return 4294954315;
    -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID");
  }
  result = CMSMVAUtility_AudioObjectSetPropertyData();
  v4 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v4;
  }
  return result;
}

uint64_t vaemUpdateSpeakerThermalGainAdjustment(float a1)
{
  if (a1 > 1.0)
    a1 = 1.0;
  *(float *)&qword_1EE2B2C28 = a1;
  return vaemUpdateThermalGainAdjustment();
}

uint64_t vaemUpdateHapticsThermalGainAdjustment(float a1)
{
  if (a1 > 1.0)
    a1 = 1.0;
  *((float *)&qword_1EE2B2C28 + 1) = a1;
  return vaemUpdateThermalGainAdjustment();
}

uint64_t vaemUpdateDisallowAudioFormatChanges(uint64_t result)
{
  byte_1EE2B2C24 = result;
  return result;
}

void vaemAddAvailableVirtualFormatsListener()
{
  MXSessionManager *v0;
  NSObject *v1;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  AudioObjectID outData;
  AudioObjectPropertyAddress v5;

  v5.mElement = 0;
  *(_QWORD *)&v5.mSelector = 0;
  outData = 0;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
  {
    *(_QWORD *)&inAddress.mSelector = 0x6F75747073746D23;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData))
    {
      outData = 0;
    }
    else if (outData)
    {
      *(_QWORD *)&v5.mSelector = 0x676C6F6273666D61;
      v5.mElement = 0;
      AudioObjectAddPropertyListener(outData, &v5, (AudioObjectPropertyListenerProc)vaemAvailableVirtualFormatsListener, 0);
    }
    v0 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setCurrentStream0:](v0, "setCurrentStream0:", outData);
  }
  v1 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemAddAvailableVirtualFormatsListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2248, 0, 0, v1, 0, (uint64_t)vaemAvailableVirtualFormatsPropertyListenerGuts_f);
}

void vaemCancelOutputVolumeChangeTimer()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = qword_1EE2B2B68;
  if (qword_1EE2B2B68)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v0 = qword_1EE2B2B68;
    }
    dispatch_source_cancel(v0);
    if (qword_1EE2B2B68)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B2B68);
      qword_1EE2B2B68 = 0;
    }
  }
  LOBYTE(word_1EE2B2B70) = 0;
}

CFTypeRef vaemCopyPickableQuiesceableWiredPortsList(int a1)
{
  AudioObjectPropertyScope v1;
  OSStatus PropertyData;
  CFTypeRef result;
  CFTypeID v4;
  CFTypeID TypeID;
  UInt32 ioDataSize;
  CFTypeRef outData;
  AudioObjectPropertyAddress inAddress;

  if (a1 == 1)
    v1 = 1768845428;
  else
    v1 = 1869968496;
  inAddress.mSelector = 1903653475;
  inAddress.mScope = v1;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, &outData);
  result = outData;
  if (PropertyData)
  {
    if (!outData)
      return result;
LABEL_12:
    CFRelease(result);
    return 0;
  }
  if (outData)
  {
    v4 = CFGetTypeID(outData);
    TypeID = CFArrayGetTypeID();
    result = outData;
    if (v4 != TypeID && outData != 0)
      goto LABEL_12;
  }
  return result;
}

BOOL vaemLineOutIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886154613) != 0;
}

BOOL vaemUSBAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886745455) != 0;
}

BOOL vaemHDMIAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1885889645) != 0;
}

BOOL vaemDisplayPortAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1885631344) != 0;
}

BOOL vaemThunderboltOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886675567) != 0;
}

uint64_t vaemContinuityScreenOutputIsConnected()
{
  uint64_t result;

  result = MX_FeatureFlags_IsOnenessEnabled();
  if ((_DWORD)result)
    return vaemGetVADPortIDFromVADPortType(1885565807) != 0;
  return result;
}

CFNumberRef vaemCopyThermalGainAdjustment_Haptics()
{
  return MXCFNumberCreateFromFloat32(*((float *)&qword_1EE2B2C28 + 1));
}

CFNumberRef vaemCopyThermalGainAdjustment_Speaker()
{
  return MXCFNumberCreateFromFloat32(*(float *)&qword_1EE2B2C28);
}

uint64_t vaemGetVirtualAudioPlugInMode()
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;

  outData = 1768776806;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F62696E706DLL;
  inAddress.mElement = 0;
  ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

uint64_t vaemCreateVADWithRouteConfigurationDictionary(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  CFDictionaryRef v7;
  BOOL v8;
  uint64_t v9;
  const __CFNumber *Value;
  int v11;
  int valuePtr;
  uint64_t v14;
  int v15;
  CFDictionaryRef theDict[5];

  theDict[0] = 0;
  theDict[1] = a1;
  theDict[2] = (CFDictionaryRef)8;
  theDict[3] = (CFDictionaryRef)theDict;
  theDict[4] = (CFDictionaryRef)8;
  v14 = 0x676C6F6276616463;
  v15 = 0;
  v6 = CMSMVAUtility_AudioObjectSetPropertyData();
  v7 = theDict[0];
  if (v6)
    v8 = 1;
  else
    v8 = theDict[0] == 0;
  if (v8)
  {
    v9 = 4294954310;
    if (!theDict[0])
      return v9;
    goto LABEL_13;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict[0], CFSTR("route change reason"));
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v11 = CMSMVAUtility_MapVADReasonToCMSReason(valuePtr);
    if (a4)
    {
      if (v11 != 9)
      {
        vaemAQMERouteChanged(theDict[0], a2, 0);
        vaemVADRouteChangeListener(0, theDict[0]);
      }
    }
  }
  v9 = 0;
  v7 = theDict[0];
  if (theDict[0])
LABEL_13:
    CFRelease(v7);
  return v9;
}

uint64_t vaemDeleteVADWithRouteConfigurationDictionary(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  CFDictionaryRef v7;
  BOOL v8;
  uint64_t v9;
  const __CFNumber *Value;
  int v11;
  int valuePtr;
  uint64_t v14;
  int v15;
  CFDictionaryRef theDict[5];

  theDict[0] = 0;
  theDict[1] = a1;
  theDict[2] = (CFDictionaryRef)8;
  theDict[3] = (CFDictionaryRef)theDict;
  theDict[4] = (CFDictionaryRef)8;
  v14 = 0x676C6F6276616464;
  v15 = 0;
  v6 = CMSMVAUtility_AudioObjectSetPropertyData();
  v7 = theDict[0];
  if (v6)
    v8 = 1;
  else
    v8 = theDict[0] == 0;
  if (v8)
  {
    v9 = 4294954310;
    if (!theDict[0])
      return v9;
    goto LABEL_13;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict[0], CFSTR("route change reason"));
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v11 = CMSMVAUtility_MapVADReasonToCMSReason(valuePtr);
    if (a4)
    {
      if (v11 != 9)
      {
        vaemAQMERouteChanged(theDict[0], a2, 0);
        vaemVADRouteChangeListener(0, theDict[0]);
      }
    }
  }
  v9 = 0;
  v7 = theDict[0];
  if (theDict[0])
LABEL_13:
    CFRelease(v7);
  return v9;
}

uint64_t vaemShouldSetSharePlayMediaInfoInRouteConfiguration(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (byte_1EE2B2C40 != a3)
  {
    if (dword_1EE2B3F38)
      goto LABEL_10;
    return 1;
  }
  if (dword_1EE2B2C50 != a1)
  {
    if (dword_1EE2B3F38)
      goto LABEL_10;
    return 1;
  }
  if (!FigCFEqual())
  {
    if (dword_1EE2B3F38)
    {
LABEL_10:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v3 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v3;
    }
    return 1;
  }
  return 0;
}

uint64_t vaemShouldRequestOwnershipForSharedAudioRoute()
{
  int v0;
  int IsNearbyPairedDevicePresent;
  unsigned int HighestPriorityOfLocalSessionPlayingToDevice;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = CMSMDeviceState_ItsAnAppleWatch();
  IsNearbyPairedDevicePresent = CMSM_IDSConnection_IsNearbyPairedDevicePresent();
  if (v0)
  {
    if (IsNearbyPairedDevicePresent)
    {
      if (!byte_1EE2B3C98)
      {
        if (dword_1EE2B3F38)
          goto LABEL_24;
        return 0;
      }
      if (!CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
      {
        if (dword_1EE2B3F38)
          goto LABEL_24;
        return 0;
      }
      if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
      {
        HighestPriorityOfLocalSessionPlayingToDevice = CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(0);
        if (HighestPriorityOfLocalSessionPlayingToDevice < CMSM_GetHighestRemotePlayingSessionPriority())
        {
          if (dword_1EE2B3F38)
            goto LABEL_24;
          return 0;
        }
        if (dword_1EE2B3F38)
        {
LABEL_33:
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          v5 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return v5;
        }
      }
      else if (dword_1EE2B3F38)
      {
        goto LABEL_33;
      }
    }
    else if (dword_1EE2B3F38)
    {
      goto LABEL_33;
    }
    return 1;
  }
  if (!IsNearbyPairedDevicePresent)
  {
    if (dword_1EE2B3F38)
      goto LABEL_33;
    return 1;
  }
  if (CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
  {
    if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
    {
      v3 = CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(0);
      if (v3 < CMSM_GetHighestRemotePlayingSessionPriority())
      {
        if (dword_1EE2B3F38)
          goto LABEL_24;
        return 0;
      }
      if (dword_1EE2B3F38)
        goto LABEL_33;
    }
    else if (dword_1EE2B3F38)
    {
      goto LABEL_33;
    }
    return 1;
  }
  if (dword_1EE2B3F38)
  {
LABEL_24:
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t vaemUpdateSharedAudioRouteState(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  unsigned __int8 v6;
  CFIndex i;
  uint64_t PortAtIndex;
  NSObject *global_queue;
  CFIndex v10;
  CFIndex v11;
  CFIndex j;
  int v13;
  const __CFArray *v14;
  const void *ValueAtIndex;
  const void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  NSObject *v19;
  CFRange v21;

  if (!theArray || (Count = CFArrayGetCount(theArray), Count < 1))
  {
    v6 = 0;
    if (!a1)
      return v6;
    goto LABEL_12;
  }
  v5 = Count;
  v6 = 0;
  for (i = 0; i != v5; ++i)
  {
    PortAtIndex = CMSMVAUtility_GetPortAtIndex(theArray, i);
    if (vaeDoesPortSupportMultipleConnections(PortAtIndex))
    {
      if (!MXBluetoothServices_IsPortBTManaged(PortAtIndex, 1))
      {
        v6 = 1;
        CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(PortAtIndex, 0, 1);
        CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(1);
        global_queue = dispatch_get_global_queue(0, 0);
        MXDispatchAsync((uint64_t)"vaemUpdateSharedAudioRouteState", (uint64_t)"CMSessionManager_VAEndpointManager.m", 9812, 0, 0, global_queue, (uint64_t)&__block_literal_global_46);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          CMSMNotificationUtility_PostPickableRoutesDidChange(1);
      }
    }
  }
  if (a1)
  {
LABEL_12:
    v10 = CFArrayGetCount(a1);
    if (v10 >= 1)
    {
      v11 = v10;
      for (j = 0; j != v11; ++j)
      {
        v13 = CMSMVAUtility_GetPortAtIndex(a1, j);
        v14 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
        if (v14)
        {
          v16 = ValueAtIndex;
          v21.length = CFArrayGetCount(v14);
          v21.location = 0;
          if (CFArrayContainsValue(v14, v21, v16))
            CMSM_IDSConnection_RemovePortFromSharedAudioRoutePortIDs(v13);
          CFRelease(v14);
        }
        v17 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        v18 = v17;
        if (v17 && CFArrayGetCount(v17))
          goto LABEL_23;
        CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(0);
        CMSM_IDSConnection_ResetRemotePlayingInfo();
        CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer();
        v19 = dispatch_get_global_queue(0, 0);
        MXDispatchAsync((uint64_t)"vaemUpdateSharedAudioRouteState", (uint64_t)"CMSessionManager_VAEndpointManager.m", 9873, 0, 0, v19, (uint64_t)&__block_literal_global_47_0);
        cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 0, 0, 1, 0);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          CMSMNotificationUtility_PostPickableRoutesDidChange(1);
        if (v18)
LABEL_23:
          CFRelease(v18);
      }
    }
  }
  return v6;
}

void __vaemUpdateSharedAudioRouteState_block_invoke()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  void *ValueAtIndex;

  CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(1);
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
  {
    v0 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
    if (v0)
    {
      v1 = v0;
      Count = CFArrayGetCount(v0);
      if (Count >= 1)
      {
        v3 = Count;
        for (i = 0; i != v3; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v1, i);
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(ValueAtIndex);
        }
      }
      CFRelease(v1);
    }
  }
}

uint64_t __vaemUpdateSharedAudioRouteState_block_invoke_2()
{
  return CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(0);
}

CFIndex vaemTakeOwnershipOnSharedAudioRoute(CFIndex result)
{
  const __CFArray *v1;
  CFIndex v2;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  AudioObjectID v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v7;
  unsigned int v8;
  char v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  AudioObjectID valuePtr;
  os_log_type_t type;
  unsigned int v15;
  int v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v2 = result;
      for (i = 0; v2 != i; ++i)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        v5 = valuePtr;
        result = vaeDoesPortSupportMultipleConnections(valuePtr);
        if (!(_DWORD)result)
          continue;
        if (vaemShouldRequestOwnershipForSharedAudioRoute())
        {
          if (!vaeDoesBTPortSupportInEarDetection(v5)
            || !CMSMVAUtility_IsBTPortKnownToNotBeInEar(v5))
          {
            v9 = 0;
            goto LABEL_17;
          }
          if (dword_1EE2B3F38)
          {
            v15 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v7 = v15;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
              v8 = v7;
            else
              v8 = v7 & 0xFFFFFFFE;
            if (v8)
            {
              v16 = 136315138;
              v17 = "vaemShouldRequestOwnershipForTheFirstTime";
              _os_log_send_and_compose_impl();
            }
            v9 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_17;
          }
        }
        v9 = 1;
LABEL_17:
        result = cmsmDoesPortMatchCurrentEndpointID(v5);
        if ((_DWORD)result)
        {
          if (dword_1EE2B3F38)
          {
            v15 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v11 = v15;
            if (os_log_type_enabled(v10, type))
              v12 = v11;
            else
              v12 = v11 & 0xFFFFFFFE;
            if (v12)
            {
              v16 = 136315138;
              v17 = "vaemShouldRequestOwnershipForTheFirstTime";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else if ((v9 & 1) != 0)
        {
          continue;
        }
        result = vaeRequestOwnershipOnBTPort(valuePtr);
      }
    }
  }
  return result;
}

uint64_t vaemIsPortPresentInConnectedOutputPorts(uint64_t a1)
{
  return objc_msgSend((id)qword_1EE2B2B90, "containsObject:", a1);
}

BOOL vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts()
{
  BOOL v0;

  if (MX_FeatureFlags_IsOnenessEnabled())
    v0 = dword_1EE2B2C58 == 0;
  else
    v0 = 1;
  return !v0;
}

uint64_t FigVAEndpointManagerHandleAvailableEndpointsChanged()
{
  return cmsmUpdatePickableRouteDescriptionLists(0);
}

uint64_t FigVAEndpointManagerCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  CFTypeRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OSStatus PropertyData;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  dispatch_time_t v17;
  NSObject *v18;
  UInt32 v19;
  unsigned int v20;
  MXSessionManager *v21;
  intptr_t v22;
  NSObject *v23;
  UInt32 v24;
  unsigned int v25;
  NSObject *v26;
  UInt32 v27;
  unsigned int v28;
  MXSessionManager *v29;
  MXSessionManager *v30;
  MXSessionManager *v31;
  MXSessionManager *v32;
  MXSessionManager *v33;
  MXSessionManager *v34;
  MXSessionManager *v35;
  MXSessionManager *v36;
  OSStatus v37;
  OSStatus v38;
  NSObject *v39;
  AudioObjectPropertySelector mSelector;
  unsigned int v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _BYTE *v54;
  uint64_t v55;
  unsigned int v56;
  __CFString *v57;
  unsigned int v58;
  __CFString *v59;
  unsigned int v60;
  os_log_type_t v61[8];
  unsigned int v62;
  os_log_type_t type[8];
  unsigned int v64;
  unsigned int v65[3];
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  UInt32 ioDataSize[3];
  UInt32 v70;
  __int128 inAddress;
  __int128 v72;
  AudioObjectPropertyAddress outData;
  _BYTE outDataSize[18];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    __asm { FMOV            V0.2S, #1.0 }
    qword_1EE2B2C28 = _D0;
    FigVAEndpointManagerGetClassID();
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
      return v9;
    *a3 = 0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v11 = CFRetain(a2);
    else
      v11 = 0;
    *DerivedStorage = v11;
    qword_1EE2B2B80 = (uint64_t)dispatch_semaphore_create(0);
    if (MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      vaemGetVirtualAudioPlugin();
      *(_QWORD *)&inAddress = *(_QWORD *)"niavbolg";
      DWORD2(inAddress) = 0;
      outData.mSelector = 1;
      ioDataSize[0] = 4;
      if (dword_1EE2B3F38)
      {
        v65[0] = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(MEMORY[0x1E0C99D68], "now", v54, v55);
      PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, ioDataSize, &outData);
      if (PropertyData | outData.mSelector)
      {
        v65[0] = 0;
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (dword_1EE2B3F38)
      {
        v65[0] = 0;
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      vaemUpdateCurrentOutputRoutesInfo();
    }
    outData.mElement = 0;
    *(_QWORD *)&outData.mSelector = *(_QWORD *)"diudbolg";
    inAddress = xmmword_1937A3690;
    v72 = unk_1937A36A0;
    v70 = 32;
    if (MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      *(_QWORD *)ioDataSize = 0x1E30A4C28;
      v65[0] = 0;
      *(_QWORD *)&inAddress = ioDataSize;
      *(_QWORD *)&v72 = v65;
      if (AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress))
      {
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v21 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
        -[MXSessionManager setDefaultVADID:](v21, "setDefaultVADID:", v65[0]);
      }
    }
    else
    {
      vaemAddAudioDevicesChangedListener();
      if (!-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
      {
        v17 = dispatch_time(0, 9000000000);
        if (dword_1EE2B3F38)
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v19 = ioDataSize[0];
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if (v20)
          {
            *(_DWORD *)outDataSize = 136315138;
            *(_QWORD *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            LODWORD(v55) = 12;
            v54 = outDataSize;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v22 = dispatch_semaphore_wait((dispatch_semaphore_t)qword_1EE2B2B80, v17);
        if (qword_1EE2B2B80)
        {
          dispatch_release((dispatch_object_t)qword_1EE2B2B80);
          qword_1EE2B2B80 = 0;
        }
        if (v22)
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v24 = ioDataSize[0];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            v25 = v24;
          else
            v25 = v24 & 0xFFFFFFFE;
          if (v25)
          {
            *(_DWORD *)outDataSize = 136315138;
            *(_QWORD *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            LODWORD(v55) = 12;
            v54 = outDataSize;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v54, v55), "defaultVADID"))
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v27 = ioDataSize[0];
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            v28 = v27;
          else
            v28 = v27 & 0xFFFFFFFE;
          if (v28)
          {
            *(_DWORD *)outDataSize = 136315138;
            *(_QWORD *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      LODWORD(v76) = 0;
      v75 = *(_QWORD *)"#vedbolg";
      AudioObjectRemovePropertyListener(1u, (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemAudioDevicesChanged, 0);
    }
    v75 = 0x1E30A86C8;
    v68 = 0;
    *(_QWORD *)&inAddress = &v75;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v68;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v29 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setSpeechDetectionVADID:](v29, "setSpeechDetectionVADID:", v68);
    *(_QWORD *)outDataSize = 0x1E30A4C48;
    v67 = 0;
    *(_QWORD *)&inAddress = outDataSize;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v67;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v30 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setSystemSoundLocalVADID:](v30, "setSystemSoundLocalVADID:", v67);
    *(_QWORD *)ioDataSize = 0x1E30A4C68;
    v66 = 0;
    *(_QWORD *)&inAddress = ioDataSize;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v66;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v31 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setSystemSoundRemoteVADID:](v31, "setSystemSoundRemoteVADID:", v66);
    *(_QWORD *)v65 = 0x1E30A4C88;
    v64 = 0;
    *(_QWORD *)&inAddress = v65;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v64;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v32 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setSpeakerAlertVADID:](v32, "setSpeakerAlertVADID:", v64);
    *(_QWORD *)type = 0x1E30A86E8;
    v62 = 0;
    *(_QWORD *)&inAddress = type;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v62;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v33 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setDecoupledInputVADID:](v33, "setDecoupledInputVADID:", v62);
    *(_QWORD *)v61 = 0x1E30A8728;
    v60 = 0;
    *(_QWORD *)&inAddress = v61;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v60;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v34 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setSiriOutputVADID:](v34, "setSiriOutputVADID:", v60);
    v59 = CFSTR("VirtualAudioDevice_Actuator");
    v58 = 0;
    *(_QWORD *)&inAddress = &v59;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v58;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v35 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setActuatorVADID:](v35, "setActuatorVADID:", v58);
    v57 = CFSTR("VirtualAudioDevice_LowLatency");
    v56 = 0;
    *(_QWORD *)&inAddress = &v57;
    DWORD2(inAddress) = 8;
    *(_QWORD *)&v72 = &v56;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    v36 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    -[MXSessionManager setLowLatencyVADID:](v36, "setLowLatencyVADID:", v56);
    if (!MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      vaemGetVirtualAudioPlugin();
      vaemUpdateCurrentOutputRoutesInfo();
    }
    v75 = (uint64_t)vaemVADSerializationListener;
    v76 = 0;
    *(_QWORD *)&inAddress = 0x676C6F6273727A6CLL;
    DWORD2(inAddress) = 0;
    CMSMVAUtility_AudioObjectSetPropertyData();
    *(_QWORD *)outDataSize = vaemReceiverWillBeUsedListener;
    *(_QWORD *)&outDataSize[8] = 0;
    *(_QWORD *)&inAddress = 0x676C6F6272776275;
    DWORD2(inAddress) = 0;
    CMSMVAUtility_AudioObjectSetPropertyData();
    *(_QWORD *)&dword_1EE2B3BEC = 0x696D646663736176;
    byte_1EE2B2BE8 = 0;
    qword_1EE2B2C00 = 0;
    qword_1EE2B2BB8 = 0;
    dword_1EE2B2C54 = 0;
    qword_1EE2B2B90 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E20]);
    if (dword_1EE2B3C08)
    {
      DWORD2(inAddress) = 0;
      *(_QWORD *)&inAddress = *(_QWORD *)"strpbolg";
      v37 = AudioObjectAddPropertyListener(dword_1EE2B3C08, (const AudioObjectPropertyAddress *)&inAddress, (AudioObjectPropertyListenerProc)vaemConnectedPortsPropertyListener, 0);
      if (!v37)
        goto LABEL_58;
      v38 = v37;
      outData.mSelector = 0;
      LOBYTE(ioDataSize[0]) = 0;
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      mSelector = outData.mSelector;
      if (os_log_type_enabled(v39, ioDataSize[0]))
        v41 = mSelector;
      else
        v41 = mSelector & 0xFFFFFFFE;
      if (v41)
      {
        *(_DWORD *)outDataSize = 136315394;
        *(_QWORD *)&outDataSize[4] = "vaemAddConnectedPortsListener";
        *(_WORD *)&outDataSize[12] = 1024;
        *(_DWORD *)&outDataSize[14] = v38;
        _os_log_send_and_compose_impl();
      }
    }
    else
    {
      LODWORD(inAddress) = 0;
      LOBYTE(outData.mSelector) = 0;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v43 = inAddress;
      if (os_log_type_enabled(v42, outData.mSelector))
        v44 = v43;
      else
        v44 = v43 & 0xFFFFFFFE;
      if (v44)
      {
        *(_DWORD *)outDataSize = 136315138;
        *(_QWORD *)&outDataSize[4] = "vaemAddConnectedPortsListener";
        _os_log_send_and_compose_impl();
      }
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_58:
    byte_1EE2B2C18 = vaemHeadphoneJackIsConnected(0);
    byte_1EE2B2C19 = vaemHeadphoneJackHasInput(0);
    byte_1EE2B2C1A = vaemGetVADPortIDFromVADPortType(1886154613) != 0;
    *(_DWORD *)outDataSize = 0;
    v75 = 0x676C6F6273706374;
    LODWORD(v76) = 0;
    if (!AudioObjectGetPropertyDataSize(dword_1EE2B3C08, (const AudioObjectPropertyAddress *)&v75, 0, 0, (UInt32 *)outDataSize))
    {
      v45 = (char *)malloc_type_calloc(1uLL, *(unsigned int *)outDataSize, 0x8B6A41CCuLL);
      if (!AudioObjectGetPropertyData(dword_1EE2B3C08, (const AudioObjectPropertyAddress *)&v75, 0, 0, (UInt32 *)outDataSize, v45))
      {
        v47 = *(_DWORD *)outDataSize;
        v48 = *(_DWORD *)outDataSize >> 2;
        *(_DWORD *)outDataSize >>= 2;
        if (v47 <= 3)
        {
          free(v45);
          byte_1EE2B2BF8 = 0;
          goto LABEL_63;
        }
        v49 = 0;
        v50 = 0;
        if (v48 <= 1)
          v48 = 1;
        v51 = 4 * v48;
        do
        {
          v52 = *(_DWORD *)&v45[v49];
          if (v52 == 1668313666 || v52 == 1668309362)
            v50 = 1;
          v49 += 4;
        }
        while (v51 != v49);
        free(v45);
        byte_1EE2B2BF8 = v50;
        if (!v50)
          goto LABEL_63;
LABEL_62:
        byte_1EE2B2BF9 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668309362, 1768776806);
        byte_1EE2B2BFA = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668313666, 1768776806);
LABEL_63:
        byte_1EE2B2C1B = 0;
        vaemUpdateConnectedOutputPortsList();
        cmsmUpdatePickableRouteDescriptionLists(1);
        vaemAddVADAvailableSampleRatesListener(1);
        vaemAddVADCurrentSampleRateListener(1);
        vaemAddVADCurrentDeviceBufferSizeListener(1);
        LODWORD(v76) = 0;
        v75 = 0;
        if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
        {
          v75 = 0x6F75747076637370;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemCurrentRouteHasVolumeControlListener, 0);
        }
        vaemCurrentRouteHasVolumeControlListenerGuts();
        LODWORD(v76) = 0;
        v75 = 0;
        if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
        {
          v75 = 0x696E707476637370;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemCurrentRouteHasVolumeControlListener, 0);
        }
        vaemCurrentRouteHasInputGainControlListenerGuts();
        vaemAddAvailableVirtualFormatsListener();
        LODWORD(v76) = 0;
        v75 = 0;
        if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
        {
          v75 = 0x696E707473726373;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemInputSourcesListener, 0);
        }
        CMSMNotificationUtility_PostInputDataSourcesDidChange();
        LODWORD(v76) = 0;
        v75 = 0;
        if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
        {
          v75 = 0x6F75747064737473;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemOutputDestinationsListener, 0);
        }
        CMSMNotificationUtility_PostOutputDataDestinationsDidChange();
        LODWORD(v76) = 0;
        v75 = 0;
        if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
        {
          v75 = 0x696E7074766F6C6DLL;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemInputGainScalarListener, 0);
        }
        CMSMNotificationUtility_PostInputGainScalarDidChange();
        return 0;
      }
      free(v45);
    }
    byte_1EE2B2BF8 = 1;
    goto LABEL_62;
  }
  return FigSignalErrorAt();
}

uint64_t vaemGetVirtualAudioPlugin()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  _QWORD outData[4];
  AudioObjectPropertyAddress inAddress;
  _QWORD v5[23];

  v5[22] = *MEMORY[0x1E0C80C00];
  v5[0] = CFSTR("com.apple.audio.CoreAudio.VirtualAudio");
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"ibipbolg";
  inAddress.mElement = 0;
  outData[0] = v5;
  outData[1] = 8;
  outData[2] = &dword_1EE2B3C08;
  outData[3] = 4;
  ioDataSize = 32;
  result = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, outData);
  if ((_DWORD)result || !dword_1EE2B3C08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void vaemUpdateCurrentOutputRoutesInfo()
{
  const __CFArray *v0;
  int Count;

  v0 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(dword_1EE2B3BEC, dword_1EE2B3BF0, 0, 0, 0, 0x1E30A4C28);
  MEMORY[0x1940352BC](gCMSM);
  if (v0)
    Count = CFArrayGetCount(v0);
  else
    Count = 0;
  CMSMUtility_UpdateCurrentRoutesInfo(0, v0, 0, Count);
  MEMORY[0x1940352C8](gCMSM);
  if ((dword_1EE2B3F38 & 0x20) != 0)
    CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (v0)
    CFRelease(v0);
}

void vaemUpdateConnectedOutputPortsList()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t j;
  void *v11;
  uint64_t v12;
  const void *v13;
  CFTypeRef v14;
  int ConnectionTypeForPort;
  char v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v18;
  NSObject *v19;
  NSObject *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  int v24;
  const __CFArray *v25;
  const __CFNumber *ValueAtIndex;
  CFTypeRef v27;
  const void *v28;
  const void *v29;
  const __CFAllocator **v30;
  CFIndex v31;
  const __CFAllocator *v32;
  const __CFNumber *v33;
  CFNumberRef v34;
  CFIndex v35;
  const __CFNumber *v36;
  CFIndex v37;
  CFIndex v38;
  CFIndex v39;
  uint64_t PortAtIndex;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  NSObject *v50;
  unsigned int v51;
  unsigned int v52;
  const __CFArray *v53;
  const __CFArray *v54;
  CFIndex v55;
  __CFArray *Mutable;
  const __CFArray *v57;
  CFIndex k;
  AudioObjectID v59;
  CFTypeRef v60;
  const void *v61;
  void *v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  CFIndex v72;
  unsigned int PortOfTypeInArray;
  unsigned int v74;
  unsigned int v75;
  NSObject *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t m;
  id v83;
  void *v84;
  NSObject *v85;
  unsigned int v86;
  unsigned int v87;
  int *v88;
  int *v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const __CFArray *theArray;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  id obj;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  os_log_type_t type;
  int v106;
  os_log_type_t v107[4];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unsigned int PortTypeFromPortID;
  _BYTE v117[128];
  int v118;
  const char *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  unsigned int v123;
  _BYTE v124[128];
  _BYTE v125[128];
  int valuePtr[32];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  obj = (id)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  if (!objc_msgSend(obj, "count"))
  {

    return;
  }
  MEMORY[0x1940352BC](gCMSM);
  v95 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v1 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v3 = (void *)objc_msgSend((id)qword_1EE2B2B90, "allObjects");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v112, v125, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v113;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v113 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v112 + 1) + 8 * i);
        if ((objc_msgSend(obj, "containsObject:", v8) & 1) == 0)
        {
          objc_msgSend(v1, "addObject:", v8);
          objc_msgSend((id)qword_1EE2B2B90, "removeObject:", v8);
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v112, v125, 16);
    }
    while (v5);
  }
  theArray = (const __CFArray *)v1;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v9 = v0;
  v96 = v0;
  v97 = v2;
  v99 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v124, 16);
  if (v99)
  {
    v98 = *(_QWORD *)v109;
    do
    {
      for (j = 0; j != v99; ++j)
      {
        if (*(_QWORD *)v109 != v98)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * j);
        v12 = objc_msgSend(v11, "unsignedIntValue");
        v13 = (const void *)vaeCopyNameForPort(v12);
        v14 = vaeCopyDeviceIdentifierFromVADPort(v12);
        PortTypeFromPortID = 0;
        PortTypeFromPortID = vaeGetPortTypeFromPortID(v12);
        *(_DWORD *)v107 = 0;
        ConnectionTypeForPort = vaeGetConnectionTypeForPort(v12);
        *(_DWORD *)v107 = ConnectionTypeForPort;
        if (ConnectionTypeForPort != 1885544823)
          goto LABEL_19;
        if (FigCFEqual())
        {
          ConnectionTypeForPort = *(_DWORD *)v107;
LABEL_19:
          v16 = objc_msgSend((id)qword_1EE2B2B90, "containsObject:", v11);
          if (ConnectionTypeForPort == 1885566825)
          {
            if ((v16 & 1) == 0)
            {
              objc_msgSend(v9, "addObject:", v11);
              if (dword_1EE2B3F38)
              {
                v106 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_34:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v2 = v97;
                goto LABEL_35;
              }
            }
          }
          else
          {
            if (dword_1EE2B3F38)
              v18 = v16;
            else
              v18 = 1;
            if ((v18 & 1) == 0)
            {
              v106 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          goto LABEL_35;
        }
        if ((objc_msgSend((id)qword_1EE2B2B90, "containsObject:", v11) & 1) == 0)
        {
          if (!MX_FeatureFlags_IsOnenessEnabled() || PortTypeFromPortID != 1885565807)
            objc_msgSend(v95, "addObject:", v11);
          if (dword_1EE2B3F38)
          {
            v106 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
            goto LABEL_34;
          }
        }
LABEL_35:
        if ((objc_msgSend((id)qword_1EE2B2B90, "containsObject:", v11, v88, v91) & 1) == 0)
        {
          objc_msgSend((id)qword_1EE2B2B90, "addObject:", v11);
          objc_msgSend(v2, "addObject:", v11);
        }
        if (v13)
          CFRelease(v13);
        if (v14)
          CFRelease(v14);
      }
      v99 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v124, 16);
    }
    while (v99);
  }
  if (!dword_1EE2B3C18)
  {
    if (obj && (Count = CFArrayGetCount((CFArrayRef)obj), Count >= 1))
    {
      v22 = Count;
      v23 = 0;
      v24 = 0;
      v25 = (const __CFArray *)obj;
      do
      {
        valuePtr[0] = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v25, v23);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, valuePtr);
        v27 = vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
        if (v27)
        {
          v28 = v27;
          if (FigCFEqual())
          {
            v29 = (const void *)vaeCopyNameForPort(valuePtr[0]);
            if (FigCFEqual())
              v24 = valuePtr[0];
            if (v29)
              CFRelease(v29);
          }
          CFRelease(v28);
        }
        ++v23;
        v25 = (const __CFArray *)obj;
      }
      while (v22 != v23);
    }
    else
    {
      v24 = 0;
    }
    dword_1EE2B3C18 = v24;
    v9 = v96;
  }
  v30 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    v31 = 0;
    v32 = *v30;
    do
    {
      v118 = 0;
      v33 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v31);
      CFNumberGetValue(v33, kCFNumberSInt32Type, &v118);
      valuePtr[0] = v118;
      if (qword_1EE2B2B88)
      {
        v34 = CFNumberCreate(v32, kCFNumberSInt32Type, valuePtr);
        CFDictionaryGetValue((CFDictionaryRef)qword_1EE2B2B88, v34);
        FigVAEndpointDisassociatePort();
        CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EE2B2B88, v34);
        if (v34)
          CFRelease(v34);
      }
      ++v31;
    }
    while (v31 < CFArrayGetCount(theArray));
  }
  if (v2)
  {
    if (CFArrayGetCount((CFArrayRef)v2) >= 1)
    {
      v35 = 0;
      do
      {
        valuePtr[0] = 0;
        v36 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v2, v35);
        CFNumberGetValue(v36, kCFNumberSInt32Type, valuePtr);
        vaemAddToPortEndpointCache(valuePtr[0]);
        ++v35;
      }
      while (v35 < CFArrayGetCount((CFArrayRef)v2));
    }
    v37 = CFArrayGetCount((CFArrayRef)v2);
    if (v37 >= 1)
    {
      v38 = v37;
      v39 = 0;
      while (1)
      {
        PortAtIndex = CMSMVAUtility_GetPortAtIndex((const __CFArray *)v2, v39);
        v41 = vaeGetPortTypeFromPortID(PortAtIndex);
        v42 = v41;
        if (v41 == 1885892674)
          break;
        if (v41 == 1885892706)
          goto LABEL_92;
LABEL_111:
        ++v39;
        v9 = v96;
        v2 = v97;
        if (v38 == v39)
          goto LABEL_112;
      }
      if (vaeDoesPortSupportMultipleConnections(PortAtIndex))
      {
        vaeAddOwnsSharedAudioConnectionListenerForPort(PortAtIndex);
        vaeAddSharedAudioConnectionFailedListenerForPort(PortAtIndex);
        v43 = 1;
      }
      else
      {
        v43 = 0;
      }
      if (vaeDoesBTPortSupportInEarDetection(PortAtIndex))
      {
        if (dword_1EE2B3F38)
        {
          PortTypeFromPortID = 0;
          v107[0] = OS_LOG_TYPE_DEFAULT;
          v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v45 = PortTypeFromPortID;
          if (os_log_type_enabled(v44, v107[0]))
            v46 = v45;
          else
            v46 = v45 & 0xFFFFFFFE;
          if (v46)
          {
            v118 = 136315394;
            v119 = "vaemUpdatePortListeners";
            v120 = 1024;
            v121 = PortAtIndex;
            LODWORD(v91) = 18;
            v88 = &v118;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaeAddInEarBluetoothStatusListenerForPort(PortAtIndex);
        cmsmInEarBluetoothStatusListener(PortAtIndex);
        if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(PortAtIndex))
          v43 = 1;
        if (vaeIsInEarStatusTrueForBTPort(PortAtIndex))
          cmsmUpdateInEarBasedPlaybackState(0, 1, 0);
      }
      if (v43)
        CMSMNotificationUtility_PostPreferredExternalRouteDidChange();
LABEL_92:
      vaeAddBluetoothListeningModeListenerForPort(PortAtIndex);
      if (vaeDoesPortSupportHeadTrackedSpatialAudio(PortAtIndex))
      {
        vaeAddBluetoothSpatialAudioEnabledListenerForPort(PortAtIndex);
        vaeAddBluetoothSpatialAudioUserEnableFeatureListenerForPort(PortAtIndex);
        vaeAddBluetoothSpatialAudioModeListenerForPort(PortAtIndex);
      }
      if (vaeIsPortBluetoothShareable(PortAtIndex))
      {
        if (dword_1EE2B3F38)
        {
          PortTypeFromPortID = 0;
          v107[0] = OS_LOG_TYPE_DEFAULT;
          v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v48 = PortTypeFromPortID;
          if (os_log_type_enabled(v47, v107[0]))
            v49 = v48;
          else
            v49 = v48 & 0xFFFFFFFE;
          if (v49)
          {
            v118 = 136315394;
            v119 = "vaemUpdatePortListeners";
            v120 = 1024;
            v121 = PortAtIndex;
            LODWORD(v91) = 18;
            v88 = &v118;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaemAddVADDeviceVolumeChangeListener(PortAtIndex);
        if (v42 == 1885892674)
        {
          if (dword_1EE2B3F38)
          {
            PortTypeFromPortID = 0;
            v107[0] = OS_LOG_TYPE_DEFAULT;
            v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v51 = PortTypeFromPortID;
            if (os_log_type_enabled(v50, v107[0]))
              v52 = v51;
            else
              v52 = v51 & 0xFFFFFFFE;
            if (v52)
            {
              v118 = 136315394;
              v119 = "vaemUpdatePortListeners";
              v120 = 1024;
              v121 = PortAtIndex;
              LODWORD(v91) = 18;
              v88 = &v118;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeAddBluetoothSharingAggregationListenerForPort(PortAtIndex);
        }
      }
      goto LABEL_111;
    }
  }
LABEL_112:
  v53 = (const __CFArray *)objc_msgSend((id)qword_1EE2B2B90, "allObjects", v88, v91);
  if (v53)
  {
    v54 = v53;
    v55 = CFArrayGetCount(v53);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v57 = theArray;
    if (v55 >= 1)
    {
      for (k = 0; k != v55; ++k)
      {
        v59 = CMSMVAUtility_GetPortAtIndex(v54, k);
        v60 = vaeCopyDeviceIdentifierFromVADPort(v59);
        if (v60)
        {
          v61 = v60;
          CFArrayAppendValue(Mutable, v60);
          CFRelease(v61);
        }
      }
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v57 = theArray;
  }
  MXBluetoothServices_RemoveDisconnectedDeviceIDs(Mutable);
  v62 = v95;
  if (Mutable)
    CFRelease(Mutable);
  MEMORY[0x1940352C8](gCMSM);
  if (vaemUpdateSharedAudioRouteState(v57, (CFArrayRef)v2))
  {
    if (CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired())
    {
      if (dword_1EE2B3F38)
      {
        PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v64 = PortTypeFromPortID;
        if (os_log_type_enabled(v63, v107[0]))
          v65 = v64;
        else
          v65 = v64 & 0xFFFFFFFE;
        if (v65)
        {
          v118 = 136315138;
          v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v72 = (CFIndex)v2;
    }
    else if (CMSMDeviceState_ItsAnAppleWatch() || !byte_1EE2B3C98)
    {
      if (CMSMDeviceState_ItsAnAppleWatch() || CMSM_IDSConnection_IsPairedToAnotherDevice())
      {
        if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          if (dword_1EE2B3F38)
          {
            PortTypeFromPortID = 0;
            v107[0] = OS_LOG_TYPE_DEFAULT;
            v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v70 = PortTypeFromPortID;
            if (os_log_type_enabled(v69, v107[0]))
              v71 = v70;
            else
              v71 = v70 & 0xFFFFFFFE;
            if (v71)
            {
              v118 = 136315138;
              v119 = "vaemUpdateConnectedOutputPortsList";
              LODWORD(v92) = 12;
              v89 = &v118;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived(v2);
        }
        goto LABEL_152;
      }
      if (dword_1EE2B3F38)
      {
        PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v86 = PortTypeFromPortID;
        if (os_log_type_enabled(v85, v107[0]))
          v87 = v86;
        else
          v87 = v86 & 0xFFFFFFFE;
        if (v87)
        {
          v118 = 136315138;
          v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v72 = (CFIndex)v2;
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v67 = PortTypeFromPortID;
        if (os_log_type_enabled(v66, v107[0]))
          v68 = v67;
        else
          v68 = v67 & 0xFFFFFFFE;
        if (v68)
        {
          v118 = 136315138;
          v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v72 = (CFIndex)v2;
    }
    vaemTakeOwnershipOnSharedAudioRoute(v72);
  }
LABEL_152:
  if (objc_msgSend(v95, "count", v89, v92))
    FigRoutingManagerNewWirelessPortsAdded(v95);
  if (objc_msgSend(v9, "count"))
    FigRoutingManagerNewWiredPortsAdded(v9);
  PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(1886614639, (CFArrayRef)v2);
  v74 = CMSMVAUtility_GetPortOfTypeInArray(1886745455, (CFArrayRef)obj);
  if (v74 && PortOfTypeInArray)
  {
    v75 = v74;
    PortTypeFromPortID = 0;
    v107[0] = OS_LOG_TYPE_DEFAULT;
    v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v77 = PortTypeFromPortID;
    if (os_log_type_enabled(v76, v107[0]))
      v78 = v77;
    else
      v78 = v77 & 0xFFFFFFFE;
    if (v78)
    {
      v118 = 136315650;
      v119 = "vaemUpdateConnectedOutputPortsList";
      v120 = 1024;
      v121 = v75;
      v122 = 1024;
      v123 = PortOfTypeInArray;
      LODWORD(v93) = 24;
      v90 = &v118;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v62 = v95;
    v9 = v96;
  }
  CMSMVAUtility_RouteDefaultVADToCarPlayIfNecessary((CFArrayRef)v2);
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v79 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v101, v117, 16);
  if (v79)
  {
    v80 = v79;
    v81 = *(_QWORD *)v102;
    while (2)
    {
      for (m = 0; m != v80; ++m)
      {
        if (*(_QWORD *)v102 != v81)
          objc_enumerationMutation(v2);
        if (MXBluetoothServices_IsPortBTManaged(objc_msgSend(*(id *)(*((_QWORD *)&v101 + 1) + 8 * m), "unsignedIntValue", v90, v93), 1))
        {
          if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
            v83 = -[MXSessionManager copyHighestPriorityActiveSession:deviceIdentifier:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyHighestPriorityActiveSession:deviceIdentifier:", 0x1E30A4C28, 0);
          else
            v83 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
          v84 = v83;
          if (v83)
            CMSUtility_RouteToPreferredRouteIfRequired(v83, 0, 9);

          goto LABEL_179;
        }
      }
      v80 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v101, v117, 16);
      if (v80)
        continue;
      break;
    }
  }
LABEL_179:
  FigPredictedRouting_UpdatePredictedRoute(1);
  -[MXSessionManager updateCachedContinuityScreenOutputPortID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateCachedContinuityScreenOutputPortID");

}

void __vaemStartIgnoreOutputVolumeScalarChangesTimer_block_invoke()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v2;
  int v3;
  uint64_t v4;
  float v5;
  NSObject *v6;
  UInt32 v7;
  unsigned int v8;
  NSObject *v9;
  UInt32 v10;
  unsigned int v11;
  UInt32 ioDataSize;
  float outData;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  AudioObjectPropertyAddress inAddress;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE2B2B68)
  {
    if (!dword_1EE2B3F38)
      return;
    ioDataSize = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_21:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  if (dword_1EE2B3F38)
  {
    v0 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemCancelOutputVolumeChangeTimer();
  v2 = *(float *)&dword_1EE2B2B5C;
  v3 = gVAEM;
  v4 = dword_1EE2B2B60;
  *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = dword_1EE2B2B60;
  ioDataSize = 4;
  outData = 0.0;
  AudioObjectGetPropertyData(gVAEM, &inAddress, 0, 0, &ioDataSize, &outData);
  v5 = outData;
  if (vabds_f32(v2, outData) <= 0.025)
  {
    if (!dword_1EE2B3F38)
      return;
    ioDataSize = 0;
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v10 = ioDataSize;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if (v11)
    {
      outData = 4.8152e-34;
      v14 = "vaemIgnoreOutputVolumeChangesTimerDidFinish";
      v15 = 1024;
      v16 = v3;
      v17 = 1024;
      v18 = v4;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_21;
  }
  if (dword_1EE2B3F38)
  {
    ioDataSize = 0;
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v7 = ioDataSize;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if (v8)
    {
      outData = 4.8152e-34;
      v14 = "vaemIgnoreOutputVolumeChangesTimerDidFinish";
      v15 = 1024;
      v16 = v3;
      v17 = 1024;
      v18 = v4;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemVADDeviceVolumeChangeListenerGuts_f(v4, 0, v5);
}

void vaemVADDeviceVolumeChangeListenerGuts_f(uint64_t a1, int a2, float a3)
{
  uint64_t PortAtIndex;
  const __CFArray *v6;
  const __CFArray *v7;
  id v8;
  CFTypeRef v9;
  uint64_t v10;

  PortAtIndex = a1;
  if (!(_DWORD)a1)
  {
    v6 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1E30A4C28);
    if (!v6)
      return;
    v7 = v6;
    if (!CFArrayGetCount(v6))
      goto LABEL_10;
    PortAtIndex = CMSMVAUtility_GetPortAtIndex(v7, 0);
    CFRelease(v7);
  }
  v8 = vaeCopyFigOutputDeviceNameFromVADPort(PortAtIndex);
  v9 = vaeCopyDeviceIdentifierFromVADPort(PortAtIndex);
  v7 = (const __CFArray *)vaeCopyRouteSubtypeFromVADPort(PortAtIndex);
  v10 = getpid();
  MXSMPerformVolumeOperation(0xEu, 0, v8, v9, (const __CFString *)v7, a2, v10, 0, a3, 0.0, 0.0, 0, 0, 0, 0, 0);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v7)
LABEL_10:
    CFRelease(v7);
}

void __vaemVADDeviceVolumeChangeListener_block_invoke(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  AudioObjectID v8;
  float v9;
  AudioObjectID v10;
  float v11;
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 v14;
  unsigned int v15;
  double v16;
  NSObject *v17;
  AudioObjectID v18;
  int v19;
  NSObject *v20;
  UInt32 v21;
  unsigned int v22;
  NSObject *v23;
  _QWORD v24[4];
  int v25;
  int v26;
  os_log_type_t type;
  UInt32 ioDataSize;
  int outData;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  AudioObjectPropertyAddress inAddress;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    v2 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v2)
    {
      v3 = 0;
      for (i = 0; i < v2; ++i)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (*(_DWORD *)(v5 + v3) == 1987013741)
        {
          v6 = v5 + v3;
          if (*(_DWORD *)(v6 + 4) == 1869968496)
          {
            v7 = *(unsigned int *)(v6 + 8);
            if ((_DWORD)v7)
            {
              v8 = *(_DWORD *)(a1 + 44);
              *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
              inAddress.mElement = v7;
              ioDataSize = 4;
              outData = 0;
              AudioObjectGetPropertyData(v8, &inAddress, 0, 0, &ioDataSize, &outData);
              v9 = *(float *)&outData;
              v10 = *(_DWORD *)(a1 + 44);
              *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
              inAddress.mElement = 0;
              ioDataSize = 4;
              outData = 0;
              AudioObjectGetPropertyData(v10, &inAddress, 0, 0, &ioDataSize, &outData);
              v11 = *(float *)&outData;
              v12 = vaeCopyDeviceIdentifierFromVADPort(v7);
              if (dword_1EE2B3F38)
              {
                ioDataSize = 0;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v14 = ioDataSize;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
                  v15 = v14;
                else
                  v15 = v14 & 0xFFFFFFFE;
                if (v15)
                {
                  outData = 136315906;
                  v30 = "vaemVADDeviceVolumeChangeListener_block_invoke";
                  v31 = 1024;
                  v32 = v7;
                  v33 = 2048;
                  v34 = v11;
                  v35 = 2048;
                  v36 = v9;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(_QWORD *)&inAddress.mSelector = 0;
              FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&inAddress);
              *(float *)&v16 = v11;
              FigVolumeControllerPostVolumeDidChangeNotifications(*(const void **)&inAddress.mSelector, v16, v9);
              if (*(_QWORD *)&inAddress.mSelector)
              {
                CFRelease(*(CFTypeRef *)&inAddress.mSelector);
                *(_QWORD *)&inAddress.mSelector = 0;
              }
              if (v12)
                CFRelease(v12);
              CMSMVAUtility_SetVolumePreferenceForPort((uint64_t)CFSTR("Audio/Video"), CFSTR("Default"), v7, v9);
            }
          }
        }
        v3 += 12;
      }
    }
    goto LABEL_36;
  }
  if ((_BYTE)word_1EE2B2B70)
  {
    if (!dword_1EE2B3F38)
      goto LABEL_36;
LABEL_23:
    ioDataSize = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_36;
  }
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
    && vaemIsVolumeRampInProgress(*(_DWORD *)(a1 + 44)))
  {
    if (!dword_1EE2B3F38)
      goto LABEL_36;
    goto LABEL_23;
  }
  v18 = *(_DWORD *)(a1 + 44);
  *(_QWORD *)&inAddress.mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = 0;
  ioDataSize = 4;
  outData = 0;
  AudioObjectGetPropertyData(v18, &inAddress, 0, 0, &ioDataSize, &outData);
  v19 = outData;
  ++_block_invoke_counter;
  if (dword_1EE2B3F38)
  {
    ioDataSize = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v21 = ioDataSize;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if (v22)
    {
      outData = 136315394;
      v30 = "vaemVADDeviceVolumeChangeListener_block_invoke";
      v31 = 1024;
      v32 = _block_invoke_counter;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23 = MXGetSerialQueue();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __vaemVADDeviceVolumeChangeListener_block_invoke_2;
  v24[3] = &__block_descriptor_40_e5_v8__0l;
  v25 = *(_DWORD *)(a1 + 44);
  v26 = v19;
  MXDispatchAsync((uint64_t)"vaemVADDeviceVolumeChangeListener_block_invoke", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4824, 0, 0, v23, (uint64_t)v24);
LABEL_36:
  free(*(void **)(a1 + 32));
}

void __vaemVADDeviceVolumeChangeListener_block_invoke_2(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemVADDeviceVolumeChangeListenerGuts_f(0, 0, *(float *)(a1 + 36));
}

uint64_t __vaemVADVolumeRampStatusChangeListener_block_invoke(uint64_t a1)
{
  uint64_t result;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  if (gVAEM == *(_DWORD *)(a1 + 32))
  {
    result = vaemIsVolumeRampInProgress(gVAEM);
    v3 = result;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v3 != HIBYTE(word_1EE2B2B70))
      return vaemVADVolumeRampStatusChangeListenerGuts_f(*(unsigned int *)(a1 + 32));
  }
  else
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void __vaemVADCurrentSampleRateListenerGuts_f_block_invoke()
{
  CMSMNotificationUtility_PostCurrentOutputSampleRateDidChange();
  CMSMNotificationUtility_PostCurrentInputSampleRateDidChange();
}

void __vaemVADCurrentBufferFrameSizeListenerGuts_f_block_invoke()
{
  CMSMNotificationUtility_PostCurrentOutputDeviceBufferSizeDidChange();
  CMSMNotificationUtility_PostCurrentInputDeviceBufferSizeChange();
}

void vaemConnectedPortsPropertyListenerGuts()
{
  int IsConnected;
  int HasInput;
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  __CFArray *v6;

  IsConnected = vaemHeadphoneJackIsConnected(0);
  HasInput = vaemHeadphoneJackHasInput(0);
  v2 = vaemGetVADPortIDFromVADPortType(1886154613) != 0;
  MEMORY[0x1940352BC](gCMSM);
  if (byte_1EE2B2C1A != v2)
  {
    PVMRemoveVolumesForDeviceRoute(CFSTR("LineOut"), 0, 0);
    byte_1EE2B2C1A = v2;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (byte_1EE2B2C18 != IsConnected || byte_1EE2B2C19 != HasInput)
  {
    byte_1EE2B2C18 = IsConnected;
    byte_1EE2B2C19 = HasInput;
    if (dword_1EE2B3F38)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMNotificationUtility_PostHeadphoneJackIsConnectedDidChange();
  }
  MEMORY[0x1940352C8](gCMSM);
  vaemUpdateConnectedOutputPortsList();
  if (vaemConnectedPortsPropertyListenerGuts_onceToken != -1)
    dispatch_once(&vaemConnectedPortsPropertyListenerGuts_onceToken, &__block_literal_global_63);
  cmsmUpdatePickableRouteDescriptionLists(1);
  if (byte_1EE2B2BF8)
  {
    vaemUpdateSystemHasAudioInputDeviceState();
    v6 = vaemCopyActiveInputRouteNamesForRouteConfiguration((NSDictionary *)CFSTR("PlayAndRecord"), (uint64_t)CFSTR("Default"), 0);
    if (!FigCFEqual())
    {
      if (qword_1EE2B2BF0)
      {
        CFRelease((CFTypeRef)qword_1EE2B2BF0);
        qword_1EE2B2BF0 = 0;
      }
      if (v6)
        qword_1EE2B2BF0 = (uint64_t)CFRetain(v6);
      CMSMNotificationUtility_PostActiveInputRouteForPlayAndRecordNoBluetoothDidChange();
    }
    if (v6)
      CFRelease(v6);
  }
}

uint64_t __vaemConnectedPortsPropertyListenerGuts_block_invoke()
{
  uint64_t result;

  result = CMSMDeviceState_DeviceHasExclaveCapability();
  if ((_DWORD)result)
    return -[MXSessionManager updateSecureSpeakerMuteState:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateSecureSpeakerMuteState:", 0);
  return result;
}

uint64_t vaemAvailableVirtualFormatsListener()
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"vaemAvailableVirtualFormatsListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2196, 0, 0, global_queue, (uint64_t)&__block_literal_global_65);
  return 0;
}

void __vaemAvailableVirtualFormatsListener_block_invoke()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchSyncFunction((uint64_t)"vaemAvailableVirtualFormatsListener_block_invoke", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2197, 0, 0, v0, 0, (uint64_t)vaemAvailableVirtualFormatsPropertyListenerGuts_f);
}

__CFDictionary *vaemCreateDictionaryForActiveAudioRouteDidChange(int a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5)
{
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  const void *ValueAtIndex;
  BOOL v13;
  CFNumberRef v14;
  const void *v15;
  const void **v16;
  BOOL v18;
  int valuePtr;

  valuePtr = a1;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1 == 2)
  {
    if (a2 && CFArrayGetCount(a2) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      CFDictionarySetValue(Mutable, CFSTR("OutputDeviceDidChange_OldRoute"), ValueAtIndex);
      if (CFEqual(ValueAtIndex, CFSTR("broadcast")))
      {
        v13 = 0;
      }
      else if (CFEqual(ValueAtIndex, CFSTR("Headphone")) || CFEqual(ValueAtIndex, CFSTR("Headset")))
      {
        v18 = 0;
        if (CMSMUtility_IAPShouldPauseOnHeadphoneDisconnect((uint64_t)&v18))
          v13 = v18;
        else
          v13 = 1;
      }
      else
      {
        v13 = CFEqual(ValueAtIndex, CFSTR("HeadsetBT")) == 0;
      }
      if (CMSMUtility_IsSharePlayCallSessionActive())
      {
        v13 = 0;
        valuePtr = 3;
      }
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, CFSTR("OutputDeviceDidChange_Reason"), v14);
  if (v14)
    CFRelease(v14);
  if (a3 && CFArrayGetCount(a3) >= 1)
  {
    v15 = CFArrayGetValueAtIndex(a3, 0);
    CFDictionarySetValue(Mutable, CFSTR("OutputDeviceDidChange_NewRoute"), v15);
  }
  if (a4)
    CFDictionarySetValue(Mutable, CFSTR("ActiveAudioRouteDidChange_OldDetailedRoute"), a4);
  if (a5)
    CFDictionarySetValue(Mutable, CFSTR("ActiveAudioRouteDidChange_NewDetailedRoute"), a5);
  v16 = (const void **)MEMORY[0x1E0C9AE40];
  if (v13)
    v16 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("ShouldPause"), *v16);
  return Mutable;
}

uint64_t _VAEndpointManager_Invalidate()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

uint64_t _VAEndpointManager_Finalize()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

__CFString *_VAEndpointManager_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVAEndpointManager %p>"), a1);
  return Mutable;
}

uint64_t _VAEndpointManager_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  unsigned int ValueUInt32;
  void (*v7)(uint64_t, int *);
  int *p_UplinkMute;
  uint64_t result;
  AudioObjectID CurrentOutputPortAtIndex;
  int ValueSInt32;
  float ValueFloat32;
  float v13;
  float v14;
  char v15;
  int v16;
  int UplinkMute;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(_BYTE *)(DerivedStorage + 8))
    return 4294950584;
  if (CFEqual(a2, CFSTR("VAEM_DeviceQuietBufferSize")))
  {
    ValueUInt32 = MXCFNumberGetValueUInt32(a3);
    vaemSetDeviceBufferNumPCMFramesQuiet(ValueUInt32);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_UplinkMute")))
  {
    vaemSetUplinkMuteOnDevice(*MEMORY[0x1E0C9AE50] == (_QWORD)a3);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_DownlinkMute")))
  {
    if ((const __CFNumber *)*MEMORY[0x1E0C9AE50] == a3)
    {
      v16 = vaemGetUplinkMute() | 2;
      v7 = (void (*)(uint64_t, int *))unk_1EE2B3BC0;
      if (!unk_1EE2B3BC0)
        return 0;
      p_UplinkMute = &v16;
    }
    else
    {
      UplinkMute = vaemGetUplinkMute();
      v7 = (void (*)(uint64_t, int *))unk_1EE2B3BC0;
      if (!unk_1EE2B3BC0)
        return 0;
      p_UplinkMute = &UplinkMute;
    }
    v7(1, p_UplinkMute);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_BTLowLatencyMode")))
  {
    CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    ValueSInt32 = MXCFNumberGetValueSInt32(a3);
    vaeSetBTLowLatencyMode(CurrentOutputPortAtIndex, ValueSInt32);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentInputDataSource")))
  {
    vaemSetInputDataSource((uint64_t)a3);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_CurrentOutputDataDestination")))
  {
    vaemSetOutputDataDestination((uint64_t)a3);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_DefaultInputGain")))
  {
    vaemSetDefaultInputGain();
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_DeviceInputGainScalar")))
  {
    ValueFloat32 = MXCFNumberGetValueFloat32(a3);
    vaemSetDeviceInputGainScalar(ValueFloat32);
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_ThermalGainAdjustment_Speaker")))
  {
    v13 = MXCFNumberGetValueFloat32(a3);
    if (v13 > 1.0)
      v13 = 1.0;
    *(float *)&qword_1EE2B2C28 = v13;
LABEL_35:
    vaemUpdateThermalGainAdjustment();
    return 0;
  }
  if (CFEqual(a2, CFSTR("VAEM_ThermalGainAdjustment_Haptics")))
  {
    v14 = MXCFNumberGetValueFloat32(a3);
    if (v14 > 1.0)
      v14 = 1.0;
    *((float *)&qword_1EE2B2C28 + 1) = v14;
    goto LABEL_35;
  }
  result = CFEqual(a2, CFSTR("VAEM_DisallowAudioFormatChanges"));
  if ((_DWORD)result)
  {
    v15 = FigCFEqual();
    result = 0;
    byte_1EE2B2C24 = v15;
  }
  return result;
}

__CFArray *vaemCopyAllEndpoints()
{
  const __CFArray *v0;
  __CFArray *v1;

  v0 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  v1 = vaemCopyEndpointsForListOfPorts(v0, 0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t vaemDeviceSupportsMute()
{
  uint64_t v1;
  uint64_t v2;

  LODWORD(v2) = 0;
  return AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0x6F7574706D757465, v2), "defaultVADID"), (const AudioObjectPropertyAddress *)&v1);
}

CFNumberRef vaemCopyCurrentInputDataSource()
{
  AudioObjectID CurrentVADIDForInput;
  CFNumberRef result;
  int v2;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  CFNumberRef outData;

  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x696E707464737263;
  inAddress.mElement = 0;
  ioDataSize = 8;
  CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  if (AudioObjectGetPropertyData(CurrentVADIDForInput, &inAddress, 0, 0, &ioDataSize, &outData))
    ioDataSize = 0;
  result = outData;
  if (outData)
  {
    v2 = -1;
    CFNumberGetValue(outData, kCFNumberSInt32Type, &v2);
    return outData;
  }
  return result;
}

CFNumberRef vaemCopyCurrentOutputDataDestination()
{
  CFNumberRef result;
  int v1;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  CFNumberRef outData;

  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747064647374;
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData))
  {
    ioDataSize = 0;
  }
  result = outData;
  if (outData)
  {
    v1 = -1;
    CFNumberGetValue(outData, kCFNumberSInt32Type, &v1);
    return outData;
  }
  return result;
}

CFArrayRef vaemCopyInputDataSources()
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t outData;

  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x696E707473726373;
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (!AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress))return CFArrayCreate(0, 0, 0, 0);
  AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
  return (CFArrayRef)outData;
}

CFArrayRef vaemCopyOutputDataDestinations()
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t outData;

  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747064737473;
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (!AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress))return CFArrayCreate(0, 0, 0, 0);
  AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, &outData);
  return (CFArrayRef)outData;
}

uint64_t vaemIsVADInRecordingCategory()
{
  uint64_t result;
  BOOL v1;
  int v2;

  result = 1;
  if (dword_1EE2B3BEC > 1668313714)
  {
    v1 = dword_1EE2B3BEC == 1668313715 || dword_1EE2B3BEC == 1668440898;
    v2 = 1668441443;
  }
  else
  {
    v1 = dword_1EE2B3BEC == 1668301427 || dword_1EE2B3BEC == 1668309362;
    v2 = 1668313666;
  }
  if (!v1 && dword_1EE2B3BEC != v2)
    return 0;
  return result;
}

uint64_t vaemGetDeviceInputGainScalar(void *a1)
{
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  *(_QWORD *)&inAddress.mSelector = 0x696E7074766F6C6DLL;
  inAddress.mElement = 0;
  ioDataSize = 4;
  return AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 0, 0, &ioDataSize, a1);
}

uint64_t _VAEndpointManager_SetDiscoveryMode(int a1, CFTypeRef cf1)
{
  if (cf1
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA39F0])
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA39E8])
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA39F8]))
  {
    return 4294950586;
  }
  CMSMVAUtility_AudioObjectSetPropertyData();
  return 0;
}

uint64_t _VAEndpointManager_SetPropertyForAudioDevice(uint64_t a1, const void *a2, uint64_t a3, unsigned __int8 *a4, const __CFNumber *a5)
{
  uint64_t result;
  float ValueFloat32;
  int v11;

  CMBaseObjectGetDerivedStorage();
  result = 4294950586;
  if (a2 && (_DWORD)a3)
  {
    if (CFEqual(a2, CFSTR("VAEM_DeviceVolume")))
    {
      ValueFloat32 = MXCFNumberGetValueFloat32(a5);
      vaemSetDeviceVolume(a3, 0, ValueFloat32);
    }
    else
    {
      result = CFEqual(a2, CFSTR("VAEM_DeviceFormat"));
      if (!(_DWORD)result)
        return result;
      if (a4)
        v11 = *a4;
      else
        v11 = 0;
      vaemSetDeviceFormat(a3, a5, v11);
    }
    return 0;
  }
  return result;
}

uint64_t vaemCopyClockDeviceForAudioDevice(AudioObjectID a1, const __CFString **outData)
{
  uint64_t result;
  const __CFString *v4;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;

  ioDataSize = 8;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747061706364;
  inAddress.mElement = 0;
  if (!outData)
    return 0;
  result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData);
  if ((_DWORD)result)
  {
    v4 = 0;
LABEL_4:
    *outData = v4;
    return result;
  }
  if (!*outData)
  {
    v4 = &stru_1E30A1A48;
    goto LABEL_4;
  }
  return result;
}

uint64_t vaemReceiverWillBeUsedListener()
{
  return notify_post("com.apple.coremedia.routewillchangetoreceiver");
}

uint64_t vaemConnectedPortsPropertyListener()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"vaemConnectedPortsPropertyListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 10222, 0, 0, v0, (uint64_t)&__block_literal_global_83);
  return 0;
}

uint64_t vaemCurrentRouteHasVolumeControlListener(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v3 = a2;
    v4 = (_DWORD *)(a3 + 4);
    do
    {
      if (*(v4 - 1) == 1986229104)
      {
        if (*v4 == 1869968496)
        {
          v5 = MXGetSerialQueue();
          v6 = 5122;
          v7 = &__block_literal_global_85;
          goto LABEL_8;
        }
        if (*v4 == 1768845428)
        {
          v5 = MXGetSerialQueue();
          v6 = 5115;
          v7 = &__block_literal_global_84;
LABEL_8:
          MXDispatchAsync((uint64_t)"vaemCurrentRouteHasVolumeControlListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", v6, 0, 0, v5, (uint64_t)v7);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void vaemCurrentRouteHasInputGainControlListenerGuts()
{
  int HasInputGainControl;
  int v1;
  void **v2;
  CFDictionaryRef v3;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  HasInputGainControl = vaemCurrentRouteHasInputGainControl();
  if (byte_1EE2B2C1B != HasInputGainControl)
  {
    v1 = HasInputGainControl;
    byte_1EE2B2C1B = HasInputGainControl;
    if (HasInputGainControl)
      vaemUpdatePVMSettingsForInputGain();
    keys[0] = CFSTR("State");
    v2 = (void **)MEMORY[0x1E0C9AE50];
    if (!v1)
      v2 = (void **)MEMORY[0x1E0C9AE40];
    values = *v2;
    v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange(v3);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t vaemInputSourcesListener()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"vaemInputSourcesListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5039, 0, 0, v0, (uint64_t)&__block_literal_global_86);
  return 0;
}

uint64_t vaemOutputDestinationsListener()
{
  CMSMNotificationUtility_PostOutputDataDestinationsDidChange();
  return 0;
}

uint64_t vaemInputGainScalarListener()
{
  CMSMNotificationUtility_PostInputGainScalarDidChange();
  return 0;
}

CFStringRef FigRoutingContextCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRoutingContext %p]"), a1);
}

void sub_1936BDAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled()
{
  if (MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_onceToken, &__block_literal_global_9);
  return MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_relativeVoiceOverVolumeEnabled;
}

uint64_t MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled()
{
  if (MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_onceToken, &__block_literal_global_12);
  return MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_alertsRelativeVoiceOverVolumeEnabled;
}

uint64_t MX_FeatureFlags_IsHapticEngineCPMSEnabled()
{
  return _os_feature_enabled_impl();
}

BOOL MX_FeatureFlags_IsExplicitInitializationForFigEndpointManagersEnabled()
{
  return (_os_feature_enabled_impl() & 1) != 0 || FigIsAirplaydEnabled() != 0;
}

uint64_t MX_FeatureFlags_IsSeparatePlayerProcessEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled()
{
  if (MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_onceToken, &__block_literal_global_29_1);
  return MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_sIsDiscoveryEnhancementEnabled;
}

uint64_t MX_FeatureFlags_IsCounterfeitDetectionEnabled()
{
  if (MX_FeatureFlags_IsCounterfeitDetectionEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsCounterfeitDetectionEnabled_onceToken, &__block_literal_global_33);
  return MX_FeatureFlags_IsCounterfeitDetectionEnabled_gapaEnabled;
}

uint64_t MX_FeatureFlags_IsConversationDetectSupported()
{
  if (MX_FeatureFlags_IsConversationDetectSupported_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsConversationDetectSupported_onceToken, &__block_literal_global_35);
  return MX_FeatureFlags_IsConversationDetectSupported_conversationDetectSupported;
}

uint64_t MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled()
{
  if (MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_onceToken, &__block_literal_global_40);
  return MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_sInterruptOnRouteDisconnect;
}

uint64_t MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled()
{
  if (MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_onceToken, &__block_literal_global_45_1);
  return MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_sInterruptLongFormVideoOnSpeechDetect;
}

uint64_t MX_FeatureFlags_IsAudioFormatArbitrationEnabled()
{
  if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAudioFormatArbitrationEnabled_onceToken, &__block_literal_global_49);
  return MX_FeatureFlags_IsAudioFormatArbitrationEnabled_sAudioFormatArbitrationEnabled;
}

uint64_t MX_FeatureFlags_IsMXSilentModeEnabled()
{
  if (MX_FeatureFlags_IsMXSilentModeEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsMXSilentModeEnabled_onceToken, &__block_literal_global_53);
  return MX_FeatureFlags_IsMXSilentModeEnabled_sIsUseMXSilentModeEnabled;
}

uint64_t MX_FeatureFlags_IsSystemInputPickerEnabled()
{
  if (MX_FeatureFlags_IsSystemInputPickerEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSystemInputPickerEnabled_onceToken, &__block_literal_global_71);
  return MX_FeatureFlags_IsSystemInputPickerEnabled_sIsSystemInputPickerEnabled;
}

uint64_t MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()
{
  if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_onceToken, &__block_literal_global_73);
  return MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_isBufferedBadgingAndCapabilitiesEnabled;
}

uint64_t MX_FeatureFlags_IsAsyncDuckingEnabled()
{
  if (MX_FeatureFlags_IsAsyncDuckingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsAsyncDuckingEnabled_onceToken, &__block_literal_global_75);
  return MX_FeatureFlags_IsAsyncDuckingEnabled_isAsyncDuckingEnabled;
}

uint64_t MX_FeatureFlags_IsOffloadActivationOffACQEnabled()
{
  if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsOffloadActivationOffACQEnabled_onceToken, &__block_literal_global_77);
  return MX_FeatureFlags_IsOffloadActivationOffACQEnabled_isOffloadActivationOffACQEnabled;
}

uint64_t MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
{
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_onceToken, &__block_literal_global_80);
  return MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_isSystemRemoteDisplayContextEnabled;
}

uint64_t MX_FeatureFlags_IsOnenessEnabled()
{
  if (MX_FeatureFlags_IsOnenessEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsOnenessEnabled_onceToken, &__block_literal_global_84_0);
  return MX_FeatureFlags_IsOnenessEnabled_sIsOnenessEnabled;
}

uint64_t MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled()
{
  if (MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_onceToken, &__block_literal_global_86_0);
  return MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_sIsSystemSoundsMutingBehaviorInOnenessEnabled;
}

uint64_t MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled()
{
  if (MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_onceToken, &__block_literal_global_88);
  return MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_sIsInterruptingPlayingSessionsInOnenessEnabled;
}

uint64_t MX_FeatureFlags_IsHangsBufferedSizeHintEnabled()
{
  if (MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_onceToken, &__block_literal_global_90);
  return MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_sHangsBufferedSizeHintEnabled;
}

uint64_t MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_onceToken, &__block_literal_global_92);
  return MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_sHangsAudioSessionClientCachingEnabled;
}

uint64_t MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled()
{
  if (MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_onceToken, &__block_literal_global_94);
  return MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_sIsCarPlayRingtoneFadeInEnabled;
}

uint64_t MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled()
{
  if (MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_onceToken, &__block_literal_global_96);
  return MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_sIsSmartRoutingInEarQueryEnabled;
}

uint64_t MX_FeatureFlags_IsStartupSequenceChangeEnabled()
{
  if (MX_FeatureFlags_IsStartupSequenceChangeEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsStartupSequenceChangeEnabled_onceToken, &__block_literal_global_98);
  return MX_FeatureFlags_IsStartupSequenceChangeEnabled_isStartupSequenceChangeEnabled;
}

uint64_t MX_FeatureFlags_IsNowPlayingAppStackEnabled()
{
  if (MX_FeatureFlags_IsNowPlayingAppStackEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsNowPlayingAppStackEnabled_onceToken, &__block_literal_global_100);
  return MX_FeatureFlags_IsNowPlayingAppStackEnabled_sIsNowPlayingAppStackEnabled;
}

uint64_t MX_FeatureFlags_IsSessionBasedMutingEnabled()
{
  if (MX_FeatureFlags_IsSessionBasedMutingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsSessionBasedMutingEnabled_onceToken, &__block_literal_global_102);
  return MX_FeatureFlags_IsSessionBasedMutingEnabled_isSessionBasedMutingEnabled;
}

uint64_t MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled()
{
  if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_onceToken, &__block_literal_global_106);
  return MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_reduceRouteDiscoveryQueueHopping;
}

uint64_t MX_FeatureFlags_IsProtectedAppsEnabled()
{
  if (MX_FeatureFlags_IsProtectedAppsEnabled_onceToken != -1)
    dispatch_once(&MX_FeatureFlags_IsProtectedAppsEnabled_onceToken, &__block_literal_global_108);
  return MX_FeatureFlags_IsProtectedAppsEnabled_isProtectedAppsEnabled;
}

void *__getTUSharePlayForceDisabledSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v2 = (void *)TelephonyUtilitiesLibraryCore_frameworkLibrary;
  }
  else
  {
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)TelephonyUtilitiesLibraryCore_frameworkLibrary;
    if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "TUSharePlayForceDisabled");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getTUSharePlayForceDisabledSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1936C184C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1936C1D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C20C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C26F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_TelephonyClient_CopyIsoCountryCodeForMCC()
{
  uint64_t result;

  if (mx_telephonyClient_Initialize_onceToken != -1)
    dispatch_once(&mx_telephonyClient_Initialize_onceToken, &__block_literal_global_13);
  result = gTelephonyClient;
  if (gTelephonyClient)
    return objc_msgSend((id)gTelephonyClient, "copyIsoCountryCodeForMCC");
  return result;
}

uint64_t MX_TelephonyClient_CopyCountryNameFromOperatorCountryBundle()
{
  uint64_t result;

  if (mx_telephonyClient_Initialize_onceToken != -1)
    dispatch_once(&mx_telephonyClient_Initialize_onceToken, &__block_literal_global_13);
  result = gTelephonyClient;
  if (gTelephonyClient)
    return objc_msgSend((id)gTelephonyClient, "copyCountryNameFromOperatorCountryBundle");
  return result;
}

void __getCoreTelephonyClientClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_getClass("CoreTelephonyClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getCoreTelephonyClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getCoreTelephonyClientClass_block_invoke_cold_1();
    CoreTelephonyLibrary();
  }
}

void CoreTelephonyLibrary()
{
  void *v0;

  if (!CoreTelephonyLibraryCore_frameworkLibrary)
    CoreTelephonyLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getCTBundleClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  CoreTelephonyLibrary();
  result = objc_getClass("CTBundle");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getCTBundleClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getCTBundleClass_block_invoke_cold_1();
    return (Class)__mx_telephonyClient_Initialize_block_invoke(v3);
  }
  return result;
}

void sub_1936C34D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C3EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936C4744(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1936C4A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1936C4CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1936C57D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t FigEndpointUIAgentHelper_SetNewUIAgent(const void *a1)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  const void *v6;
  uint64_t result;

  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1)
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_14);
  v2 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v3 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  else
    v3 = 0;
  if (dword_1EE2B3DC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2)
    v5 = (uint64_t)&qword_1EE2B2840;
  else
    v5 = 8;
  if (*(_QWORD *)v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    endpointUIAgentHelper_handleUIAgentNoLongerCurrent(v3);
  }
  MEMORY[0x1940352F8](*v3);
  v6 = *(const void **)v5;
  *(_QWORD *)v5 = a1;
  if (a1)
    CFRetain(a1);
  if (v6)
    CFRelease(v6);
  result = MEMORY[0x194035304](*v3);
  if (*(_QWORD *)v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterAddListener();
  }
  return result;
}

uint64_t endpointUIAgentHelper_UIAgentNotificationCallback(int a1, _QWORD *a2, CFTypeRef cf2)
{
  const void *v5;
  const __CFString *v6;
  const void *v7;
  uint64_t result;

  if (CFEqual(CFSTR("FigEndpointUIAgentNotification_RemoteAgentCrashed"), cf2))
  {
    MEMORY[0x1940352F8](*a2);
    v5 = (const void *)a2[1];
    if (v5)
    {
      CFRelease(v5);
      a2[1] = 0;
    }
    MEMORY[0x194035304](*a2);
    v6 = CFSTR("remoteAgentCrashed");
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("FigEndpointUIAgentNotification_UserLoggedOut"), cf2))
  {
    MEMORY[0x1940352F8](*a2);
    v7 = (const void *)a2[1];
    if (v7)
    {
      CFRelease(v7);
      a2[1] = 0;
    }
    MEMORY[0x194035304](*a2);
    v6 = CFSTR("userLoggedOut");
LABEL_9:
    endpointUIAgentHelper_postEvent((uint64_t)a2, (uint64_t)v6);
  }
  if (CFEqual(CFSTR("FigEndpointUIAgentNotification_NoLongerCurrent"), cf2))
    endpointUIAgentHelper_handleUIAgentNoLongerCurrent(a2);
  if (CFEqual(CFSTR("FigEndpointUIAgentNotification_DeviceWake"), cf2))
  {
    v6 = CFSTR("deviceAwake");
    goto LABEL_9;
  }
  result = CFEqual(CFSTR("FigEndpointUIAgentNotification_DeviceWillSleep"), cf2);
  if ((_DWORD)result)
  {
    v6 = CFSTR("deviceWillSleep");
    goto LABEL_9;
  }
  return result;
}

void endpointUIAgentHelper_handleUIAgentNoLongerCurrent(_QWORD *a1)
{
  const void *v2;

  MEMORY[0x1940352F8](*a1);
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  MEMORY[0x194035304](*a1);
  endpointUIAgentHelper_postEvent((uint64_t)a1, (uint64_t)CFSTR("noLongerCurrent"));
}

uint64_t FigEndpointUIAgentHelper_ShowError(const __CFDictionary *a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void (*v6)(CFTypeRef, const __CFDictionary *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1)
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_14);
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v2 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  else
    v2 = 0;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v3 = (uint64_t)&qword_1EE2B2840;
  else
    v3 = 8;
  MEMORY[0x1940352F8](*v2);
  v4 = *(const void **)v3;
  if (*(_QWORD *)v3 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v2), (v4 = *(const void **)v3) != 0))
  {
    v5 = CFRetain(v4);
    MEMORY[0x194035304](*v2);
    if (v5)
    {
      v6 = *(void (**)(CFTypeRef, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v6)
        v6(v5, a1);
      CFRelease(v5);
      return 0;
    }
  }
  else
  {
    MEMORY[0x194035304](*v2);
  }
  if (a1)
    CFDictionaryGetValue(a1, CFSTR("ATVName"));
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

uint64_t endpointUIAgentHelper_updateCurrentUIAgent(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = (_QWORD *)(a1 + 8);
  result = FigEndpointUIAgentCopyCurrentEndpointUIAgent((_QWORD *)(a1 + 8));
  if (dword_1EE2B3DC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*v1)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterAddListener();
  }
  return result;
}

uint64_t FigEndpointUIAgentHelper_DisplayAuthPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFDictionaryRef v13;
  void (*v14)(CFTypeRef, CFDictionaryRef, uint64_t, void (*)(uint64_t, uint64_t, uint64_t));
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1)
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_14);
  v4 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v5 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  else
    v5 = 0;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v6 = (uint64_t)&qword_1EE2B2840;
  else
    v6 = 8;
  MEMORY[0x1940352F8](*v5);
  v7 = *(const void **)v6;
  if (*(_QWORD *)v6 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v5), (v7 = *(const void **)v6) != 0))
  {
    v8 = CFRetain(v7);
    MEMORY[0x194035304](*v5);
    if (v8)
    {
      MEMORY[0x1940352F8](*v5);
      v9 = 24;
      if (v4)
        v9 = (uint64_t)&unk_1EE2B2850;
      *(_QWORD *)v9 = a2;
      v10 = (uint64_t)&unk_1EE2B2860;
      if (!v4)
        v10 = 40;
      *(_QWORD *)v10 = *(_QWORD *)(a1 + 32);
      v11 = (uint64_t)&unk_1EE2B2868;
      if (!v4)
        v11 = 48;
      *(_QWORD *)v11 = *(_QWORD *)(a1 + 40);
      MEMORY[0x194035304](*v5);
      v13 = *(CFDictionaryRef *)a1;
      v12 = *(_QWORD *)(a1 + 8);
      v14 = *(void (**)(CFTypeRef, CFDictionaryRef, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v14)
        v14(v8, v13, v12, endpointUIAgentHelper_UIAgentCallback);
      CFRelease(v8);
      return 0;
    }
  }
  else
  {
    MEMORY[0x194035304](*v5);
  }
  if (*(_QWORD *)a1)
    CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("ATVName"));
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

void endpointUIAgentHelper_UIAgentCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1)
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_14);
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v6 = (uint64_t)&unk_1EE2B2850;
  else
    v6 = 24;
  if (*(_QWORD *)v6)
  {
    if ((_DWORD)a2)
    {
      v7 = 40;
      if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
        v7 = (uint64_t)&unk_1EE2B2860;
      v8 = *(_QWORD *)v7;
      v9 = (uint64_t)&unk_1EE2B2868;
      if (!FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
        v9 = 48;
      v10 = *(_QWORD *)v9;
      v11 = 0;
      v12 = a2;
    }
    else
    {
      if (!a1)
        return;
      v13 = 40;
      if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
        v13 = (uint64_t)&unk_1EE2B2860;
      v8 = *(_QWORD *)v13;
      v14 = (uint64_t)&unk_1EE2B2868;
      if (!FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
        v14 = 48;
      v10 = *(_QWORD *)v14;
      v11 = a1;
      v12 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v6)(v11, v12, a3, v8, v10);
    *(_QWORD *)v6 = 0;
  }
}

uint64_t FigEndpointUIAgentHelper_CleanupPrompt(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  const void **v14;
  void (*v15)(void *, __CFDictionary *);
  uint64_t v16;
  __CFDictionary *v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1)
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_14);
  v7 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj)
    v8 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  else
    v8 = 0;
  if (a1 && (a2 || !a4))
  {
    MEMORY[0x1940352F8](*v8);
    if (v7)
      v9 = (uint64_t)&qword_1EE2B2840;
    else
      v9 = 8;
    v10 = *(const void **)v9;
    if (*(_QWORD *)v9 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v8), (v10 = *(const void **)v9) != 0))
    {
      v11 = (void *)CFRetain(v10);
      MEMORY[0x194035304](*v8);
      if (v11)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v13 = Mutable;
          CFDictionarySetValue(Mutable, CFSTR("ATVName"), a1);
          v14 = (const void **)MEMORY[0x1E0C9AE40];
          if (a4)
            v14 = (const void **)MEMORY[0x1E0C9AE50];
          CFDictionarySetValue(v13, CFSTR("savePassword"), *v14);
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          v15 = *(void (**)(void *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v15)
            v15(v11, v13);
          v19 = 0uLL;
          v22 = 0;
          v23 = 0;
          v20 = a2;
          v21 = 0;
          FigEndpointAuthRequestHandler_SetProcessNextRequest(1);
          FigEndpointAuthRequestHandler_ProcessRequest(&v19);
          FigEndpointAuthRequestHandler_SetProcessNextRequest(0);
          if (FigEndpointAuthRequestHandler_IsAuthListEmpty())
          {
            v16 = (uint64_t)&unk_1EE2B2850;
            if (!v7)
              v16 = 24;
            *(_QWORD *)v16 = 0;
          }
          CFRelease(v11);
          v17 = v13;
        }
        else
        {
          v17 = (__CFDictionary *)v11;
        }
        CFRelease(v17);
      }
    }
    else
    {
      MEMORY[0x194035304](*v8);
    }
  }
  return 0;
}

void endpointUIAgentHelper_postEvent(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;

  MEMORY[0x1940352F8](*(_QWORD *)a1);
  if (*(_QWORD *)(a1 + 16))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      (*(void (**)(uint64_t, CFMutableDictionaryRef))(a1 + 16))(a2, Mutable);
      CFRelease(v5);
    }
  }
  JUMPOUT(0x194035304);
}

void MX_CoreServices_Initialize()
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"MX_CoreServices_Initialize", (uint64_t)"MX_CoreServices.m", 61, 0, 0, global_queue, (uint64_t)&__block_literal_global_15);
}

uint64_t MX_CoreServices_GetSerialQueue()
{
  if (MX_CoreServices_GetSerialQueue_onceToken != -1)
    dispatch_once(&MX_CoreServices_GetSerialQueue_onceToken, &__block_literal_global_7);
  return MX_CoreServices_GetSerialQueue_sSerialQueue;
}

const __CFString *MX_CoreServices_GetDMFPolicyString(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("DMFPolicyUnknown");
  else
    return off_1E309C500[a1];
}

void cmsmLSUpdateDeviceManagementCache(uint64_t a1)
{
  CFNumberRef v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD valuePtr[23];

  valuePtr[22] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = a1;
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, valuePtr);
  FigCFDictionarySetValue();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
    CFRelease(v1);
}

uint64_t MX_CoreServices_DoesAppHaveGamesGenre(uint64_t a1)
{
  void *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    v1 = (void *)objc_msgSend((id)gLSApplicationProxyClass, "applicationProxyForIdentifier:", a1);
    if ((objc_msgSend((id)objc_msgSend(v1, "genre"), "containsString:", CFSTR("Games")) & 1) != 0)
      return 1;
    else
      return objc_msgSend((id)objc_msgSend(v1, "genreID"), "isEqualToNumber:", &unk_1E30C1410);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

id MX_CoreServices_CopyContainingBundleID(_OWORD *a1)
{
  __int128 v1;
  id result;
  void *v3;
  _OWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  result = (id)objc_msgSend((id)gLSBundleRecordClass, "bundleRecordForAuditToken:error:", v4, 0);
  if (result)
  {
    v3 = result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return (id)objc_msgSend((id)objc_msgSend(v3, "containingBundleRecord"), "bundleIdentifier");
    else
      return 0;
  }
  return result;
}

uint64_t MXAudioContext_HandleAddEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t IndexOfCurrentlyActivatingSubEndpoints;
  __CFString **v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v15 = 0;
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v15);
  }
  IndexOfCurrentlyActivatingSubEndpoints = FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints((uint64_t)a2, (CFArrayRef)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", a1));
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("MXAudioContext_HandleAddEndpoint - "), (uint64_t)a1, 0, 0, (uint64_t)a2, a3);
  if (CMSMDeviceState_IsHomePodHub()
    && FigRoutingManagerIsEndpointLocal((uint64_t)a1)
    && FigRoutingManagerIsEndpointOfSubtype((uint64_t)a1))
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonStarted"));
    v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_13:
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, *v11);
LABEL_16:
    v13 = 0;
    goto LABEL_17;
  }
  if (IndexOfCurrentlyActivatingSubEndpoints != -1)
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, IndexOfCurrentlyActivatingSubEndpoints, (uint64_t)cf);
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, IndexOfCurrentlyActivatingSubEndpoints);
    FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)cf[0]);
    FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, a4);
    if (cf[0])
      CFRelease(cf[0]);
    goto LABEL_16;
  }
  if (FigRoutingManagerUtilities_IsEndpointPicked(a1, (uint64_t)a2))
  {
    v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedNoOp;
    goto LABEL_13;
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a1))
    goto LABEL_16;
  mxAudioContext_removeActivatedEndpointFromContext(a1);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)cf);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a2, (uint64_t)cf[0], a1, (uint64_t)a3, (uint64_t)a4);
  v13 = mxAudioContext_addWHAGroupableEndpoint((uint64_t)a1, a2, a3, a4);
  if (cf[0])
    CFRelease(cf[0]);
LABEL_17:
  if (v15)
    CFRelease(v15);
  return v13;
}

void mxAudioContext_removeActivatedEndpointFromContext(const void *a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v5;

  if (a1 && FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    v5 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4398], *MEMORY[0x1E0C9AE00], &v5);
    if (!FigCFEqual())
    {
      cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v5, (uint64_t)&cf);
      if (cf)
        mxAudioContext_removeEndpointFromAggregate((uint64_t)cf, a1, v5, 0, 0);
      else
        mxAudioContext_deactivateEndpoint(a1, v5, 0);
      if (cf)
        CFRelease(cf);
    }
    if (v5)
      CFRelease(v5);
  }
}

uint64_t mxAudioContext_addWHAGroupableEndpoint(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  uint64_t v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v18;
  CFTypeRef v19[25];

  v19[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v19[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v19);
  v18 = 0;
  v8 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    v10(CMBaseObject, *MEMORY[0x1E0CA4258], v8, &v18);
  cf = 0;
  v11 = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(v11, *MEMORY[0x1E0CA4348], v8, &cf);
  v13 = v19[0];
  if (!v19[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v13 = 0;
  v14 = FigRoutingManagerAddEndpointToAggregate((uint64_t)v13, a1, a2, a3, a4, (uint64_t)mxAudioContext_addEndpointCompletionCallback);
  if (!(_DWORD)v14 && dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    v18 = 0;
  }
  if (v19[0])
    CFRelease(v19[0]);
  return v14;
}

uint64_t MXAudioContext_HandleRemoveEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("MXEmbeddedAudioRouting_HandleRemoveEndpoint - "), (uint64_t)a1, 0, 0, (uint64_t)a2, a3);
  if (FigRoutingManagerUtilities_IsEndpointPicked(a1, (uint64_t)a2))
  {
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonStarted"));
      return mxAudioContext_removeWHAGroupableEndpoint(a1, a2, a3, a4);
    }
    else
    {
      return mxAudioContext_deactivateEndpoint(a1, a2, (uint64_t)a3);
    }
  }
  else
  {
    FigRoutingManagerLogEndpointID((uint64_t)CFSTR("MXAudioContext_HandleRemoveEndpoint: Posting no-op because endpoint="), (uint64_t)a1, (uint64_t)CFSTR(" is already removed"), 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonEndedNoop"));
    return 0;
  }
}

uint64_t mxAudioContext_removeWHAGroupableEndpoint(const void *a1, const void *a2, const void *a3, const void *a4)
{
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v18;
  CFTypeRef v19[23];

  v19[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v19[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v19);
  v8 = v19[0];
  if (!v19[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v8 = 0;
  v9 = mxAudioContext_removeEndpointFromAggregate((uint64_t)v8, a1, a2, a3, a4);
  v18 = 0;
  v10 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(CMBaseObject, *MEMORY[0x1E0CA4258], v10, &v18);
  cf = 0;
  v13 = FigEndpointGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(v13, *MEMORY[0x1E0CA4348], v10, &cf);
  if (!(_DWORD)v9 && dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    v18 = 0;
  }
  if (v19[0])
    CFRelease(v19[0]);
  return v9;
}

uint64_t mxAudioContext_deactivateEndpoint(const void *a1, const void *a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  void *SharedManager;
  const __CFAllocator *v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *v12;
  NSObject *v13;
  uint64_t FigEndpointFeatures;
  CFMutableDictionaryRef Mutable;
  __CFString **v16;
  _QWORD v18[5];
  os_log_type_t v19;
  os_log_type_t type[4];
  CFTypeRef cf;
  uint64_t v22[18];

  v22[16] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294954315;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  cf = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v11)
    v11(CMBaseObject, *MEMORY[0x1E0CA4348], v9, &cf);
  if (dword_1EE2B3E28)
  {
    *(_DWORD *)type = 0;
    v19 = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  CFRetain(a1);
  v13 = *((_QWORD *)SharedManager + 1);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __mxAudioContext_deactivateEndpoint_block_invoke;
  v18[3] = &__block_descriptor_40_e5_v8__0l;
  v18[4] = a1;
  MXDispatchAsync((uint64_t)"mxAudioContext_deactivateEndpoint", (uint64_t)"MXAudioContext_Embedded.m", 461, 0, 0, v13, (uint64_t)v18);
  FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigCFEqual())
    FigCFDictionarySetValue();
  FigRoutingManagerUnregisterFromFigEndpointNotifications((uint64_t)a1);
  v22[0] = 0;
  FigRoutingManagerCreateEndpointDeactivateCompletionContext(a2, v22);
  v7 = FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)a1, FigEndpointFeatures, (uint64_t)Mutable, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))mxAudioContext_endpointDeactivateCompletionCallback, v22[0]);
  if (FigCFEqual())
  {
    v16 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
  }
  else
  {
    if (!FigCFEqual())
      goto LABEL_20;
    v16 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
  }
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)*v16, a3, 0);
LABEL_20:
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

uint64_t MXAudioContext_HandlePickEndpoints(const __CFArray *a1, const void *a2, CFDictionaryRef theDict, const __CFDictionary *a4)
{
  __CFDictionary *v8;
  uint64_t IndexOfCurrentlyActivatingSubEndpoints;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  CFArrayRef v13;
  CFIndex v14;
  const void *ValueAtIndex;
  CFTypeRef v16;
  int v17;
  char v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex i;
  const void *v22;
  __CFArray *v23;
  __CFArray *v24;
  CFIndex v25;
  const void *v26;
  CFTypeRef cf[3];
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  v8 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("MXAudioContext_HandlePickEndpoints - "), 0, a1, 0, (uint64_t)a2, v8);
  if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a1))
  {
    IndexOfCurrentlyActivatingSubEndpoints = FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints((uint64_t)a2, a1);
    if (IndexOfCurrentlyActivatingSubEndpoints != -1)
    {
      v10 = IndexOfCurrentlyActivatingSubEndpoints;
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, v10, (uint64_t)theArray);
      FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, v10);
      FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)theArray[0]);
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, theDict, a4);
      if (theArray[0])
      {
        CFRelease(theArray[0]);
        theArray[0] = 0;
      }
      goto LABEL_57;
    }
  }
  theArray[0] = 0;
  FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)a2, theArray);
  if (a1)
    Count = CFArrayGetCount(a1);
  else
    Count = 0;
  v13 = theArray[0];
  if (theArray[0])
    v13 = (CFArrayRef)CFArrayGetCount(theArray[0]);
  if ((CFArrayRef)Count == v13)
  {
    if (Count < 1)
    {
LABEL_19:
      v18 = 0;
      goto LABEL_21;
    }
    v14 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v14);
      if (!FigCFArrayContainsValue())
      {
        if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
          break;
        v16 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
        v17 = FigCFArrayContainsValue();
        if (v16)
          CFRelease(v16);
        if (!v17)
          break;
      }
      if (Count == ++v14)
        goto LABEL_19;
    }
  }
  v18 = 1;
LABEL_21:
  if (theArray[0])
    CFRelease(theArray[0]);
  if ((v18 & 1) == 0)
  {
    FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("MXAudioContext_HandlePickEndpoints: Posting no-op because endpoints= "), a1, (uint64_t)CFSTR(" are already picked"), 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v8, CFSTR("configUpdateReasonEndedNoop"));
    goto LABEL_57;
  }
  if (a1 && CFArrayGetCount(a1) >= 1)
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
    if (CFArrayGetCount(a1))
    {
      v19 = CFArrayGetCount(a1);
      if (v19 >= 1)
      {
        v20 = v19;
        for (i = 0; i != v20; ++i)
        {
          v22 = CFArrayGetValueAtIndex(a1, i);
          mxAudioContext_removeActivatedEndpointFromContext(v22);
        }
      }
    }
    if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)theArray);
      v23 = FigRoutingManagerUtilities_CopyEndpointsToAdd((uint64_t)a2, a1);
      v24 = FigRoutingManagerUtilities_CopyEndpointsToRemove((uint64_t)a2, a1);
      FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("mxAudioContext_pickWHAGroupableEndpoints - endpointsToAdd are "), v23, 0, 1);
      FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("mxAudioContext_pickWHAGroupableEndpoints - endpointsToRemove are "), v24, 0, 1);
      if (!v23)
        goto LABEL_48;
      if (CFArrayGetCount(v23) >= 1)
      {
        v25 = 0;
        do
        {
          v26 = CFArrayGetValueAtIndex(v23, v25);
          mxAudioContext_removeActivatedEndpointFromContext(v26);
          ++v25;
        }
        while (v25 < CFArrayGetCount(v23));
      }
      if (CFArrayGetCount(v23) > 0)
      {
        FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints((uint64_t)a2, (uint64_t)theArray[0], v23, (uint64_t)v8, (uint64_t)a4);
      }
      else
      {
LABEL_48:
        if (v24 && CFArrayGetCount(v24) >= 1)
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v8, CFSTR("configUpdateReasonStarted"));
          mxAudioContext_addWHAGroupableEndpoints((CFIndex)a2, v23, v8, a4);
          mxAudioContext_removeWHAGroupableEndpoints((CFIndex)a2, v24, v8, a4);
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)cf);
          FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, cf[0], (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v8);
          if (cf[0])
            CFRelease(cf[0]);
          goto LABEL_52;
        }
      }
      mxAudioContext_addWHAGroupableEndpoints((CFIndex)a2, v23, v8, a4);
      mxAudioContext_removeWHAGroupableEndpoints((CFIndex)a2, v24, v8, a4);
      if (!v24)
      {
LABEL_53:
        if (v23)
          CFRelease(v23);
        if (theArray[0])
          CFRelease(theArray[0]);
        goto LABEL_57;
      }
LABEL_52:
      CFRelease(v24);
      goto LABEL_53;
    }
  }
  else
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)theArray);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)theArray[0]))
    {
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)theArray[0], a2, v8, a4, (uint64_t)mxAudioContext_removeEndpointCompletionCallback);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)theArray[0]))
    {
      mxAudioContext_deactivateEndpoint(theArray[0], a2, (uint64_t)v8);
    }
    if (theArray[0])
      CFRelease(theArray[0]);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v8, 0);
  }
LABEL_57:
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t MXAudioContext_ActivateAggregateEndpoint(uint64_t a1, const void *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef EndpointActivateOptions;
  uint64_t FigEndpointFeatures;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v11;
  unsigned int v12;
  CFMutableDictionaryRef EndpointDelegateContext;
  _QWORD *v14;
  CFTypeRef v15;
  _QWORD *SharedManager;
  void (*v17)(uint64_t, os_log_type_t *);
  void (*v18)(uint64_t, _BYTE *);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t (*v25)(uint64_t, uint64_t, CFMutableDictionaryRef, _QWORD, uint64_t);
  uint64_t v27;
  os_log_type_t type[8];
  uint64_t v29;
  void (*v30)(const void *, uint64_t, const void *, const void *, uint64_t);
  void (*v31)(CFTypeRef, uint64_t, const void *, uint64_t);
  CFTypeRef v32;
  os_log_type_t v33;
  unsigned int v34;
  CFTypeRef cf;
  _BYTE v36[24];
  uint64_t v37;
  uint64_t v38;
  int v39;
  const char *v40;
  __int16 v41;
  CFTypeRef v42;
  __int16 v43;
  int v44;
  __int16 v45;
  CFMutableDictionaryRef v46;
  uint64_t v47;

  v3 = a1;
  v47 = *MEMORY[0x1E0C80C00];
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions(a1, (uint64_t)a2, 0);
  FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(v3, (uint64_t)a2);
  v32 = 0;
  v6 = (_QWORD *)MEMORY[0x1E0CA4348];
  v7 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (v3)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(CMBaseObject, *v6, *v7, &v32);
  }
  if (dword_1EE2B3E28)
  {
    v39 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v11 = v39;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if (v12)
    {
      *(_DWORD *)v36 = 136315650;
      *(_QWORD *)&v36[4] = "MXAudioContext_ActivateAggregateEndpoint";
      *(_WORD *)&v36[12] = 2114;
      *(_QWORD *)&v36[14] = v32;
      *(_WORD *)&v36[22] = 2048;
      v37 = FigEndpointFeatures;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  EndpointDelegateContext = FigRoutingManagerCreateEndpointDelegateContext();
  v14 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
  if (v3)
    v15 = CFRetain((CFTypeRef)v3);
  else
    v15 = 0;
  v14[1] = v15;
  v14[2] = EndpointDelegateContext;
  *v14 = 0;
  SharedManager = FigRoutingManagerGetSharedManager();
  MEMORY[0x1940352F8](SharedManager[7]);
  if (SharedManager[8])
    *(_QWORD *)SharedManager[9] = v14;
  else
    SharedManager[8] = v14;
  SharedManager[9] = v14;
  MEMORY[0x194035304](SharedManager[7]);
  *(_QWORD *)type = EndpointDelegateContext;
  v29 = 0;
  v30 = mxAudioContext_handleDidReceiveDataFromCommChannelDelegate;
  v31 = mxAudioContext_handleDidCloseCommChannelDelegate;
  v17 = *(void (**)(uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v17)
    v17(v3, type);
  v37 = 0;
  v38 = 0;
  *(_QWORD *)v36 = EndpointDelegateContext;
  *(_QWORD *)&v36[8] = mxAudioContext_handleAuthorizationRequiredDelegate;
  *(_QWORD *)&v36[16] = mxAudioContext_handleEndpointFailedDelegate;
  v18 = *(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v18)
    v18(v3, v36);
  v27 = 0;
  FigRoutingManagerCreateEndpointActivateCompletionContext(a2, 0, 0, EndpointActivateOptions, &v27);
  v19 = v27;
  cf = 0;
  if (v3)
  {
    v20 = FigEndpointGetCMBaseObject();
    v21 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v21)
      v21(v20, *v6, *MEMORY[0x1E0C9AE00], &cf);
  }
  if (dword_1EE2B3E28)
  {
    v34 = 0;
    v33 = OS_LOG_TYPE_DEFAULT;
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v23 = v34;
    if (os_log_type_enabled(v22, v33))
      v24 = v23;
    else
      v24 = v23 & 0xFFFFFFFE;
    if (v24)
    {
      v39 = 136315906;
      v40 = "mxAudioContext_aggregateEndpointActivateWithCompletionCallback";
      v41 = 2114;
      v42 = cf;
      v43 = 1024;
      v44 = FigEndpointFeatures;
      v45 = 2114;
      v46 = EndpointActivateOptions;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
    if (v25)
      v3 = v25(v3, FigEndpointFeatures, EndpointActivateOptions, mxAudioContext_aggregateEndpointActivateCompletionCallback, v19);
    else
      v3 = 4294954514;
  }
  else
  {
    mxAudioContext_aggregateEndpointActivateCompletionCallback(0, FigEndpointFeatures, 0, 0, v19);
  }
  if (cf)
    CFRelease(cf);
  if (v32)
  {
    CFRelease(v32);
    v32 = 0;
  }
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
  return v3;
}

void mxAudioContext_handleDidReceiveDataFromCommChannelDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  NSObject *DataTransmissionQueue;
  _QWORD v10[8];

  if (a1 && a3)
  {
    if (a4)
    {
      CFRetain(a1);
      CFRetain(a3);
      CFRetain(a4);
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __mxAudioContext_handleDidReceiveDataFromCommChannelDelegate_block_invoke;
      v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = a5;
      v10[5] = a3;
      v10[6] = a4;
      v10[7] = a1;
      MXDispatchAsync((uint64_t)"mxAudioContext_handleDidReceiveDataFromCommChannelDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1005, 0, 0, DataTransmissionQueue, (uint64_t)v10);
    }
  }
}

void mxAudioContext_handleDidCloseCommChannelDelegate(CFTypeRef cf, uint64_t a2, const void *a3, uint64_t a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *DataTransmissionQueue;
  _QWORD v9[7];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (cf && a3)
  {
    if (dword_1EE2B3E28)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    CFRetain(a3);
    DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __mxAudioContext_handleDidCloseCommChannelDelegate_block_invoke;
    v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = a3;
    v9[6] = cf;
    MXDispatchAsync((uint64_t)"mxAudioContext_handleDidCloseCommChannelDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1052, 0, 0, DataTransmissionQueue, (uint64_t)v9);
  }
}

void mxAudioContext_handleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const __CFAllocator *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFMutableDictionaryRef v15;
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v19;
  __int128 v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    cf = 0;
    v19 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v12)
      v12(CMBaseObject, *MEMORY[0x1E0CA4348], v10, &cf);
    v13 = FigEndpointGetCMBaseObject();
    v14 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v14)
      v14(v13, *MEMORY[0x1E0CA4258], v10, &v19);
    v15 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
    Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = Mutable;
    v23 = a6;
    v24 = a7;
    v21 = v19;
    v22 = a2;
    FigEndpointAuthRequestHandler_ProcessRequest(&v20);
    if (Mutable)
      CFRelease(Mutable);
    if (v15)
      CFRelease(v15);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v19)
      CFRelease(v19);
  }
}

void mxAudioContext_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  void *SharedManager;
  NSObject *v8;
  _QWORD v9[7];

  if (a1 && a3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4)
      CFRetain(a4);
    v8 = *((_QWORD *)SharedManager + 1);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __mxAudioContext_handleEndpointFailedDelegate_block_invoke;
    v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = a3;
    v9[6] = a1;
    MXDispatchAsync((uint64_t)"mxAudioContext_handleEndpointFailedDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1147, 0, 0, v8, (uint64_t)v9);
  }
}

void mxAudioContext_aggregateEndpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *SharedManager;
  const void *v11;
  void *v12;
  double v13;
  double v14;
  float v15;
  id v16;
  NSObject *v17;
  _QWORD v18[10];
  int v19;
  float v20;

  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    v11 = *(const void **)a5;
    v12 = *(void **)(a5 + 32);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  objc_msgSend(v12, "timeIntervalSinceNow");
  v14 = v13;
  if (a1)
    CFRetain(a1);
  if (v11)
    CFRetain(v11);
  v15 = fabs(v14) * 1000.0;
  v16 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v17 = *((_QWORD *)SharedManager + 1);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __mxAudioContext_aggregateEndpointActivateCompletionCallback_block_invoke;
  v18[3] = &unk_1E309BE18;
  v18[4] = v16;
  v18[5] = a1;
  v19 = a4;
  v18[6] = a3;
  v18[7] = a2;
  v20 = v15;
  v18[8] = v11;
  v18[9] = a5;
  MXDispatchAsync((uint64_t)"mxAudioContext_aggregateEndpointActivateCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 937, 0, 0, v17, (uint64_t)v18);
}

uint64_t mxAudioContext_removeEndpointFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t FigEndpoint;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v14)(const void *, _QWORD);
  __CFDictionary *EndpointDeactivateOptions;
  void *v16;
  uint64_t (*v17)(uint64_t, const void *, _QWORD, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *);
  uint64_t v18;
  CFArrayRef theArray;
  void *v21[21];

  v21[20] = *(void **)MEMORY[0x1E0C80C00];
  FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v21[0] = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, v21);
  if (FigEndpoint)
  {
    theArray = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
    {
      v12(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
      if (theArray)
      {
        if (CFArrayGetCount(theArray) == 1 && FigRoutingManagerIsEndpointPresentInAggregate(a2, a1))
        {
          if (dword_1EE2B3E28)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMUtility_InterruptSessionsWithRoutingContextUUID();
        }
        if (theArray)
          CFRelease(theArray);
      }
    }
  }
  FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)a2);
  if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
    FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(a1, a2);
  v14 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v14)
    v14(a2, 0);
  EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions((uint64_t)a2, (uint64_t)a3);
  v16 = v21[0];
  v17 = *(uint64_t (**)(uint64_t, const void *, _QWORD, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 16);
  if (!v17 || (v18 = v17(a1, a2, 0, mxAudioContext_removeEndpointCompletionCallback, v16), (_DWORD)v18 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v21[0]);
    v18 = 4294954514;
  }
  if (EndpointDeactivateOptions)
    CFRelease(EndpointDeactivateOptions);
  return v18;
}

void mxAudioContext_removeEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  double v18;
  float v19;
  void *SharedManager;
  id v21;
  NSObject *v22;
  _QWORD v23[13];
  int v24;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    CFRetain(cf);
    if (a1)
      CFRetain(a1);
    if (*(_QWORD *)a6)
      v12 = CFRetain(*(CFTypeRef *)a6);
    else
      v12 = 0;
    v14 = *(const void **)(a6 + 8);
    if (v14)
      v15 = CFRetain(v14);
    else
      v15 = 0;
    v16 = *(const void **)(a6 + 16);
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    objc_msgSend(*(id *)(a6 + 24), "timeIntervalSinceNow");
    v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    v21 = objc_alloc_init(MEMORY[0x1E0C99D68]);
    v22 = *((_QWORD *)SharedManager + 1);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __mxAudioContext_removeEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E309BDF0;
    v23[4] = v21;
    v23[5] = cf;
    v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    v25 = v19;
    v23[8] = v12;
    v23[9] = v17;
    v23[10] = a1;
    v23[11] = v15;
    v23[12] = a6;
    MXDispatchAsync((uint64_t)"mxAudioContext_removeEndpointCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 574, 0, 0, v22, (uint64_t)v23);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
}

void __mxAudioContext_removeEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  os_log_type_t type[8];
  CFArrayRef v15;
  char v16;
  CFTypeRef v17;
  CFArrayRef theArray;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  v17 = 0;
  v2 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(a1 + 40))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4348], *v2, &v17);
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(v15) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v16 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(*(_QWORD *)(a1 + 64), (CFMutableArrayRef *)cf);
  v6 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf[0], 0);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(*(_QWORD *)(a1 + 64), (uint64_t)v6);
  FigVolumeControllerSaveRoutingContextState(*(const void **)(a1 + 64));
  if (v6)
    CFRelease(v6);
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), (uint64_t)&theArray);
  if (!theArray || !CFArrayGetCount(theArray))
    FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 0);
  v15 = 0;
  v7 = FigEndpointGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8 && (v8(v7, *MEMORY[0x1E0CA43D0], *v2, &v15), v15) && CFArrayGetCount(v15))
  {
    *(_QWORD *)type = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(*(_QWORD *)(a1 + 64), 0, (uint64_t)type);
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)type, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0);
    if (*(_QWORD *)type)
      CFRelease(*(CFTypeRef *)type);
  }
  else
  {
    FigRoutingManagerContextUtilities_SetPickedEndpoints(*(const void **)(a1 + 64), 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
  }
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (v16)
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(_QWORD *)(a1 + 64), *(const __CFDictionary **)(a1 + 88), CFSTR("configUpdateReasonEndedSuccess"));
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(_QWORD *)(a1 + 64), *(const __CFDictionary **)(a1 + 88), CFSTR("configUpdateReasonGroupDevicesChanged"));
  FigRoutingMangerDeactivateAggregateEndpointIfNecessary(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80));
  FigVolumeControllerRecomputeMainVolume(*(const void **)(a1 + 64), 0.0);
  FigRoutingManagerDestroyAggregateAddEndpointCompletionContext(*(const void ***)(a1 + 96));
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v17)
  {
    CFRelease(v17);
    v17 = 0;
  }
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 80);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 64);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 88);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 72);
  if (v13)
    CFRelease(v13);

}

void mxAudioContext_addEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  double v18;
  float v19;
  void *SharedManager;
  id v21;
  NSObject *v22;
  _QWORD v23[12];
  int v24;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    CFRetain(cf);
    if (a1)
      CFRetain(a1);
    if (*(_QWORD *)a6)
      v12 = CFRetain(*(CFTypeRef *)a6);
    else
      v12 = 0;
    v14 = *(const void **)(a6 + 8);
    if (v14)
      v15 = CFRetain(v14);
    else
      v15 = 0;
    v16 = *(const void **)(a6 + 16);
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    objc_msgSend(*(id *)(a6 + 24), "timeIntervalSinceNow");
    v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    v21 = objc_alloc_init(MEMORY[0x1E0C99D68]);
    v22 = *((_QWORD *)SharedManager + 1);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __mxAudioContext_addEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E309C538;
    v23[4] = v21;
    v23[5] = cf;
    v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    v25 = v19;
    v23[8] = v12;
    v23[9] = a1;
    v23[10] = v15;
    v23[11] = v17;
    MXDispatchAsync((uint64_t)"mxAudioContext_addEndpointCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 211, 0, 0, v22, (uint64_t)v23);
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __mxAudioContext_addEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  int v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef cf;
  CFTypeRef v31[19];

  v31[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v2 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
    v4(CMBaseObject, *MEMORY[0x1E0CA4348], v2, &v29);
  v5 = FigEndpointGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
    v6(v5, *MEMORY[0x1E0CA4258], v2, &v28);
  v7 = FigEndpointGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    v8(v7, *MEMORY[0x1E0CA4128], v2, &v27);
  v9 = FigEndpointGetCMBaseObject();
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    v10(v9, *MEMORY[0x1E0CA4310], v2, &v26);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = *(_DWORD *)(a1 + 96);
  if (v12 == -15580)
  {
    v20 = *(const void **)(a1 + 72);
    if (!v20 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
      v20 = 0;
    FigRoutingManagerRetryAddingEndpointToAggregate(v20, *(const void **)(a1 + 40), *(const void **)(a1 + 64), *(const void **)(a1 + 80), *(const void **)(a1 + 88), (uint64_t)mxAudioContext_addEndpointCompletionCallback);
  }
  else
  {
    if (v12)
    {
      FigRoutingManagerHandleAddEndpointCompletionCallbackError(*(_QWORD *)(a1 + 72), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), v12, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80));
      if (!FigEndpointAuthRequestHandler_HasEndpoint(*(_QWORD *)(a1 + 40)))
        goto LABEL_30;
      v18 = v28;
      v17 = v29;
      v19 = v26;
      v16 = 0;
      goto LABEL_29;
    }
    FigVolumeControllerAddAirPlayVolumeNotificationListeners(*(const void **)(a1 + 40));
    v31[0] = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)v31);
    cf = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v31[0], (uint64_t)&cf);
    if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
      FigRoutingManagerUtilities_RegisterAirPlayStreamCapabilitiesDidChangeListener((uint64_t)cf, *(_QWORD *)(a1 + 40));
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v31[0])
    {
      CFRelease(v31[0]);
      v31[0] = 0;
    }
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)(a1 + 72), (uint64_t)CFSTR("configUpdateReasonGroupDevicesChanged"), *(_QWORD *)(a1 + 80));
    if (MX_FeatureFlags_IsMuteEnabled())
      FigVolumeControllerUnmuteEndpointIfAlreadyMuted(*(_QWORD *)(a1 + 40));
    FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), *(_QWORD *)(a1 + 80));
    if (FigEndpointAuthRequestHandler_HasEndpoint(*(_QWORD *)(a1 + 40)))
    {
      v14 = v28;
      v13 = v29;
      v15 = v26;
      v16 = FigCFEqual();
      v17 = v13;
      v18 = v14;
      v19 = v15;
LABEL_29:
      FigEndpointUIAgentHelper_CleanupPrompt(v17, (uint64_t)v18, (uint64_t)v19, v16);
    }
  }
LABEL_30:
  if (*(_DWORD *)(a1 + 96) != -15580)
  {
    if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
      CMSMAP_MakeAirPlayHandOffPortRoutable(0, *(_QWORD *)(a1 + 64));
    v31[0] = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)v31);
    if (!v31[0] || !CFArrayGetCount((CFArrayRef)v31[0]))
      FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 0);
    if (v31[0])
      CFRelease(v31[0]);
  }
  v21 = *(const void **)(a1 + 88);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 80);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 64);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(a1 + 40);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(a1 + 72);
  if (v25)
    CFRelease(v25);
  if (v27)
  {
    CFRelease(v27);
    v27 = 0;
  }
  if (v26)
  {
    CFRelease(v26);
    v26 = 0;
  }
  if (v28)
  {
    CFRelease(v28);
    v28 = 0;
  }
  if (v29)
  {
    CFRelease(v29);
    v29 = 0;
  }

}

void __mxAudioContext_deactivateEndpoint_block_invoke(uint64_t a1)
{
  const void *v2;

  FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void mxAudioContext_endpointDeactivateCompletionCallback(CFTypeRef cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *v10;
  double v11;
  float v12;
  void *SharedManager;
  id v14;
  NSObject *v15;
  _QWORD v16[10];
  int v17;
  float v18;

  if (cf)
    CFRetain(cf);
  if (a5)
    v10 = *(void **)(a5 + 16);
  else
    v10 = 0;
  objc_msgSend(v10, "timeIntervalSinceNow");
  v12 = fabs(v11) * 1000.0;
  SharedManager = FigRoutingManagerGetSharedManager();
  v14 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v15 = *((_QWORD *)SharedManager + 1);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __mxAudioContext_endpointDeactivateCompletionCallback_block_invoke;
  v16[3] = &unk_1E309BE18;
  v16[4] = v14;
  v16[5] = cf;
  v17 = a4;
  v16[6] = a3;
  v16[7] = a2;
  v18 = v12;
  v16[8] = a5;
  v16[9] = a5;
  MXDispatchAsync((uint64_t)"mxAudioContext_endpointDeactivateCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 409, 0, 0, v15, (uint64_t)v16);
}

void __mxAudioContext_endpointDeactivateCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v5;
  uint64_t v6;
  const void *v7;
  CFTypeRef cf[29];

  cf[28] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  cf[0] = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(uint64_t **)(a1 + 64);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 40)))
    FigRoutingManagerRemoveCachedDelegateContext(*(_QWORD *)(a1 + 40));
  FigRoutingManagerDestroyEndpointDeactivateCompletionContext(*(const void ***)(a1 + 72));
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
  if (cf[0])
    CFRelease(cf[0]);

}

CFIndex mxAudioContext_addWHAGroupableEndpoints(CFIndex result, CFArrayRef theArray, const void *a3, const void *a4)
{
  const void *v7;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;

  if (theArray)
  {
    v7 = (const void *)result;
    result = CFArrayGetCount(theArray);
    if (result)
    {
      result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        v8 = result;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          result = mxAudioContext_addWHAGroupableEndpoint((uint64_t)ValueAtIndex, v7, a3, a4);
        }
      }
    }
  }
  return result;
}

CFIndex mxAudioContext_removeWHAGroupableEndpoints(CFIndex result, CFArrayRef theArray, const void *a3, const void *a4)
{
  const void *v7;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;

  if (theArray)
  {
    v7 = (const void *)result;
    result = CFArrayGetCount(theArray);
    if (result)
    {
      result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        v8 = result;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          result = mxAudioContext_removeWHAGroupableEndpoint(ValueAtIndex, v7, a3, a4);
        }
      }
    }
  }
  return result;
}

void __mxAudioContext_handleDidReceiveDataFromCommChannelDelegate_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *Value;
  uint64_t v4;
  __CFDictionary *Mutable;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = *(const __CFDictionary **)(a1 + 32);
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, CFSTR("EndpointDelegateContextKey_RoutingContextUUID"));
    if (Value)
    {
      v4 = (uint64_t)Value;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("commChannelUUID"), *(const void **)(a1 + 40));
      CFDictionarySetValue(Mutable, CFSTR("data"), *(const void **)(a1 + 48));
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(v4, (uint64_t)CFSTR("didReceiveData"), (uint64_t)Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
}

void __mxAudioContext_handleDidCloseCommChannelDelegate_block_invoke(_QWORD *a1)
{
  const __CFDictionary *v2;
  const void *Value;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  const void *v6;
  const void *v7;

  v2 = (const __CFDictionary *)a1[4];
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, CFSTR("EndpointDelegateContextKey_RoutingContextUUID"));
    if (Value)
    {
      v4 = (uint64_t)Value;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(v4, (uint64_t)CFSTR("commChannelDidClose"), (uint64_t)Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[5];
  if (v7)
    CFRelease(v7);
}

void __mxAudioContext_handleEndpointFailedDelegate_block_invoke(_QWORD *a1)
{
  const void *Value;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFDictionary *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFMutableDictionaryRef RouteConfigUpdatedFailedPayload;
  int v17;
  const void *FigEndpoint;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  const void *v24;
  const void *v25;
  const void *v26;
  os_log_type_t v27[8];
  CFTypeRef v28;
  uint64_t v29;
  int v30;
  CFTypeRef v31;
  int v32;
  const char *v33;
  __int16 v34;
  CFTypeRef v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  const void *v41;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v31 = 0;
  v30 = 0;
  Value = (const void *)FigCFDictionaryGetValue();
  v3 = (const void *)FigCFDictionaryGetValue();
  v4 = (const void *)FigCFDictionaryGetValue();
  v5 = FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  v6 = (const void *)FigCFDictionaryGetValue();
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigRoutingManagerIsEndpointOfType(a1[6]))
  {
    v29 = 0;
    FigCFDictionaryGetInt64IfPresent();
    if (v6)
    {
      v28 = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v10)
        v10(CMBaseObject, *MEMORY[0x1E0CA4258], v7, &v28);
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v12)
        v12(v11, *MEMORY[0x1E0CA4348], v7, &v31);
      v13 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v6, 0);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v30)
      {
        cf[0] = 0;
        v14 = FigEndpointGetCMBaseObject();
        v15 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v15)
          v15(v14, *MEMORY[0x1E0CA43D0], v7, cf);
        RouteConfigUpdatedFailedPayload = FigRoutingContextUtilities_CreateRouteConfigUpdatedFailedPayload(0, (uint64_t)v28, v30, (const __CFArray *)cf[0]);
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)Value, (uint64_t)CFSTR("routeConfigUpdated"), (uint64_t)RouteConfigUpdatedFailedPayload);
        if (RouteConfigUpdatedFailedPayload)
          CFRelease(RouteConfigUpdatedFailedPayload);
        if (cf[0])
          CFRelease(cf[0]);
      }
      *(_QWORD *)v27 = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)Value, (uint64_t)v27);
      if (*(_QWORD *)v27)
      {
        v17 = mxAudioContext_removeEndpointFromAggregate(*(uint64_t *)v27, v6, Value, v3, v4);
        FigEndpoint = (const void *)FigEndpointAggregateGetFigEndpoint();
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(Value, FigEndpoint, (uint64_t)CFSTR("configUpdateReasonEndedFailed"), 0);
        if (v17)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("mxAudioContext_handleEndpointFailedDelegate: Removed endpoint with ID from aggregate: "), (uint64_t)v6, 0, 0);
        }
      }
      if (FigCFEqual())
        FigRoutingManager_iOSHandleStartupFailed(v30, Mutable);
      if (*(_QWORD *)v27)
      {
        CFRelease(*(CFTypeRef *)v27);
        *(_QWORD *)v27 = 0;
      }
      if (v28)
      {
        CFRelease(v28);
        v28 = 0;
      }
      if (v13)
        CFRelease(v13);
    }
    else
    {
      LODWORD(v28) = 0;
      v27[0] = OS_LOG_TYPE_DEFAULT;
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(v29) = 0;
    LOBYTE(v28) = 0;
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v22 = v29;
    if (os_log_type_enabled(v21, (os_log_type_t)v28))
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFE;
    if (v23)
    {
      v32 = 136316162;
      v33 = "mxAudioContext_handleEndpointFailedDelegate_block_invoke";
      v34 = 2114;
      v35 = v31;
      v36 = 1024;
      v37 = v30;
      v38 = 2114;
      v39 = v5;
      v40 = 2114;
      v41 = Value;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v31)
  {
    CFRelease(v31);
    v31 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  v24 = (const void *)a1[6];
  if (v24)
    CFRelease(v24);
  v25 = (const void *)a1[5];
  if (v25)
    CFRelease(v25);
  v26 = (const void *)a1[4];
  if (v26)
    CFRelease(v26);
}

void __mxAudioContext_aggregateEndpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  const void *v6;
  const void *v7;
  CFTypeRef cf[29];

  cf[28] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  cf[0] = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 80))
    FigRoutingManagerRemoveCachedDelegateContext(v5);
  if (FigRoutingManagerIsEndpointOfType(v5))
  {
    FigRoutingManagerRegisterForFigEndpointNotifications(*(_QWORD *)(a1 + 40));
    FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(*(void **)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 64), 0);
    FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  }
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 72));
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v6 = *(const void **)(a1 + 64);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);

}

void FigVolumeControllerPostVolumeDidChangeNotifications(const void *a1, double a2, float a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigGetCFPreferenceNumberWithDefault())
  {
    if (dword_1EE2B3E88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    volumeController_postEndpointVolumeDidChangeNotification();
    volumeController_recomputeMainVolume(a1, a3);
  }
  else
  {
    volumeController_postMainVolumeDidChangeNotification();
    volumeController_postEndpointVolumeDidChangeNotification();
  }
}

void volumeController_postEndpointVolumeDidChangeNotification()
{
  const __CFDictionary *Mutable;
  const void *Float32;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  Float32 = (const void *)FigCFNumberCreateFloat32();
  FigCFDictionarySetValue();
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("endpointVolumeDidChange"), Mutable);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Float32)
    CFRelease(Float32);
  if (Mutable)
    CFRelease(Mutable);
}

void volumeController_recomputeMainVolume(const void *a1, float a2)
{
  float CachedMainVolume;
  float MaxSubEndpointVolume;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    CachedMainVolume = volumeController_getCachedMainVolume(a1);
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
    if (FigRoutingManagerAreAllEndpointsBluetoothShareable((const __CFArray *)cf[0])
      && !volumeController_isBluetoothSharingMainVolumeSupported((const __CFArray *)cf[0]))
    {
      if (dword_1EE2B3E88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (CachedMainVolume < a2 && FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, a2)
           || CachedMainVolume > a2
           && (MaxSubEndpointVolume = volumeController_getMaxSubEndpointVolume((const __CFArray *)cf[0]),
               MaxSubEndpointVolume >= 0.0)
           && (a2 = MaxSubEndpointVolume,
               FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, MaxSubEndpointVolume)))
    {
      volumeController_updateMainVolumeCache((uint64_t)a1, a2);
      volumeController_postMainVolumeDidChangeNotification();
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
  else if (dword_1EE2B3E88)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void volumeController_postMainVolumeDidChangeNotification()
{
  const __CFDictionary *Mutable;
  const void *Float32;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  Float32 = (const void *)FigCFNumberCreateFloat32();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("masterVolumeDidChange"), Mutable);
  if (Float32)
    CFRelease(Float32);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

void FigVolumeControllerAddAirPlayVolumeNotificationListeners(const void *a1)
{
  const __CFAllocator *v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, const void *, const __CFAllocator *, void **);
  uint64_t v9;
  int v10;
  int v11;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void *v13;
  void *v14;
  __CFDictionary *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const void *, const __CFAllocator *, void **);
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  void *v29;
  CFMutableDictionaryRef Mutable;
  int v31;
  int v32;
  int v33;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  void *value;

  if (a1)
  {
    v35 = 0;
    FigVolumeControllerCopySharedController(&v35);
    cf = 0;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4348], v2, &cf);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = *MEMORY[0x1E0CA3BC8];
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    v36 = 0;
    value = 0;
    v6 = (const void *)*MEMORY[0x1E0CA4258];
    v7 = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, const void *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v8)
      v8(v7, v6, v2, &value);
    v9 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v12)
    {
      v13 = (const void *)*MEMORY[0x1E0CA44A0];
      v12(v9, *MEMORY[0x1E0CA44A0], v2, &v36);
      v14 = value;
      if (!value || !v36)
      {
LABEL_14:
        if (v14)
        {
          CFRelease(v14);
          value = 0;
        }
        v18 = (int)v36;
        if (v36)
          CFRelease(v36);
        volumeController_handleAirPlayVolumeControlSupportDidChangeNotification(v18, v10, v11, a1);
        volumeController_handleAirPlayVolumeControlTypeDidChangeNotification(v19, v20, v21, a1);
        if (!MX_FeatureFlags_IsMuteEnabled())
          goto LABEL_32;
        CMNotificationCenterGetDefaultLocalCenter();
        v22 = *MEMORY[0x1E0CA3B60];
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        v36 = 0;
        value = 0;
        v23 = FigEndpointGetCMBaseObject();
        v24 = *(void (**)(uint64_t, const void *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
        if (v24)
          v24(v23, v6, v2, &value);
        v25 = FigEndpointGetCMBaseObject();
        v28 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v28)
        {
          v28(v25, *MEMORY[0x1E0CA42C0], v2, &v36);
          v29 = value;
          if (!value || !v36)
            goto LABEL_27;
          Mutable = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          FigCFDictionarySetValue();
          v31 = FigCFDictionarySetValue();
          volumeController_handleAirPlayMutedByUserDidChangeNotification(v31, v32, v22, a1, Mutable);
          if (Mutable)
            CFRelease(Mutable);
        }
        v29 = value;
LABEL_27:
        if (v29)
        {
          CFRelease(v29);
          value = 0;
        }
        v33 = (int)v36;
        if (v36)
          CFRelease(v36);
        volumeController_handleAirPlayMuteControlSupportDidChangeNotification(v33, v26, v27, a1);
LABEL_32:
        if (v35)
          CFRelease(v35);
        return;
      }
      v15 = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v15, v6, value);
      CFDictionarySetValue(v15, v13, v36);
      volumeController_handleAirPlayVolumeDidChangeNotification(v16, v17, v5, a1, v15);
      if (v15)
        CFRelease(v15);
    }
    v14 = value;
    goto LABEL_14;
  }
}

void volumeController_handleAirPlayVolumeDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf, const void *a5)
{
  CFTypeID v6;
  uint64_t TypeID;
  CFTypeID v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  float v20;
  float v21;
  __CFDictionary *VolumeNotificationPayload;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cfa[18];

  cfa[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    TypeID = FigEndpointGetTypeID();
    if (a5)
    {
      if (v6 == TypeID)
      {
        v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          v25 = 0;
          v9 = *MEMORY[0x1E0C9AE00];
          CMBaseObject = FigEndpointGetCMBaseObject();
          v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v11)
          {
            v11(CMBaseObject, *MEMORY[0x1E0CA4398], v9, &v25);
            v12 = v25;
          }
          else
          {
            v12 = 0;
          }
          if (volumeController_contextSupportsVolumeOperations(v12))
          {
            v24 = 0;
            v13 = FigEndpointGetCMBaseObject();
            v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v14)
              v14(v13, *MEMORY[0x1E0CA4348], v9, &v24);
            v23 = 0;
            v15 = FigEndpointGetCMBaseObject();
            v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v16)
              v16(v15, *MEMORY[0x1E0CA4258], v9, &v23);
            if (dword_1EE2B3E88)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v23)
            {
              cfa[0] = 0;
              v18 = FigEndpointGetCMBaseObject();
              v19 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
              if (v19)
              {
                v19(v18, *MEMORY[0x1E0CA44A0], v9, cfa);
                if (cfa[0])
                {
                  FigCFNumberGetFloat32();
                  v21 = v20;
                  volumeController_recomputeMainVolume(v25, v20);
                  volumeController_postEndpointVolumeDidChangeNotification();
                  if (!CMSMDeviceState_IsHomePodHub())
                  {
                    VolumeNotificationPayload = CMSMNotificationUtility_CreateVolumeNotificationPayload(CFSTR("Audio/Video"), CFSTR("ExplicitVolumeChange"), 0, 0, 0, v21);
                    CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload((uint64_t)VolumeNotificationPayload);
                    if (VolumeNotificationPayload)
                      CFRelease(VolumeNotificationPayload);
                  }
                  if (cfa[0])
                    CFRelease(cfa[0]);
                }
              }
              if (v23)
              {
                CFRelease(v23);
                v23 = 0;
              }
            }
            if (v24)
            {
              CFRelease(v24);
              v24 = 0;
            }
          }
          if (v25)
            CFRelease(v25);
        }
      }
    }
  }
}

void volumeController_handleAirPlayVolumeControlSupportDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  CFTypeID v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, const void **);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cfa[17];

  cfa[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (cf)
  {
    v5 = CFGetTypeID(cf);
    if (v5 == FigEndpointGetTypeID())
    {
      v18 = 0;
      v6 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v8)
      {
        v8(CMBaseObject, *MEMORY[0x1E0CA4398], v6, &v18);
        v9 = v18;
      }
      else
      {
        v9 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v9))
      {
        v10 = (const void *)*MEMORY[0x1E0C9AE40];
        v16 = (const void *)*MEMORY[0x1E0C9AE40];
        v17 = 0;
        if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
        {
          v11 = FigEndpointGetCMBaseObject();
          v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v12)
            v12(v11, *MEMORY[0x1E0CA4258], v6, &v17);
          v13 = FigEndpointGetCMBaseObject();
          v14 = *(void (**)(uint64_t, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (v14)
            v14(v13, *MEMORY[0x1E0CA44A8], v6, &v16);
          if (dword_1EE2B3E88)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          volumeController_postEndpointVolumeControlDidChangeNotification();
          cfa[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v18, (uint64_t)cfa);
          volumeController_updateMainVolumeControl((int)v18, (CFArrayRef)cfa[0]);
          if (cfa[0])
            CFRelease(cfa[0]);
          v10 = v16;
        }
        if (v10)
        {
          CFRelease(v10);
          v16 = 0;
        }
        if (v17)
        {
          CFRelease(v17);
          v17 = 0;
        }
      }
      if (v18)
        CFRelease(v18);
    }
  }
}

void volumeController_handleAirPlayVolumeControlTypeDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  CFTypeID v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cfa;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  if (cf)
  {
    v5 = CFGetTypeID(cf);
    if (v5 == FigEndpointGetTypeID())
    {
      v17 = 0;
      v6 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v8)
      {
        v8(CMBaseObject, *MEMORY[0x1E0CA4398], v6, &v17);
        v9 = v17;
      }
      else
      {
        v9 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v9)
        && FigRoutingManagerIsEndpointOfType((uint64_t)cf))
      {
        v15 = 0;
        v16 = 0;
        v10 = FigEndpointGetCMBaseObject();
        v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v11)
          v11(v10, *MEMORY[0x1E0CA4258], v6, &v16);
        v12 = FigEndpointGetCMBaseObject();
        v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v13)
        {
          v13(v12, *MEMORY[0x1E0CA44B0], v6, &v15);
          if (v15)
          {
            FigCFNumberGetUInt64();
            volumeController_postEndpointVolumeControlTypeDidChangeNotification();
          }
        }
        cfa = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v17, (uint64_t)&cfa);
        volumeController_updateMainVolumeControlType((int)v17, (CFArrayRef)cfa);
        if (cfa)
        {
          CFRelease(cfa);
          cfa = 0;
        }
        if (v16)
        {
          CFRelease(v16);
          v16 = 0;
        }
        if (v15)
          CFRelease(v15);
      }
      if (v17)
        CFRelease(v17);
    }
  }
}

void volumeController_handleAirPlayMutedByUserDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf, const void *a5)
{
  CFTypeID v6;
  uint64_t TypeID;
  CFTypeID v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef cfa;
  CFTypeRef v23;
  CFTypeRef v24[27];

  v24[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    TypeID = FigEndpointGetTypeID();
    if (a5)
    {
      if (v6 == TypeID)
      {
        v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          v24[0] = 0;
          v9 = *MEMORY[0x1E0C9AE00];
          CMBaseObject = FigEndpointGetCMBaseObject();
          v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v11)
          {
            v11(CMBaseObject, *MEMORY[0x1E0CA4398], v9, v24);
            v12 = v24[0];
          }
          else
          {
            v12 = 0;
          }
          if (volumeController_contextSupportsVolumeOperations(v12))
          {
            v23 = 0;
            v13 = FigEndpointGetCMBaseObject();
            v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v14)
              v14(v13, *MEMORY[0x1E0CA4348], v9, &v23);
            cfa = 0;
            v15 = FigEndpointGetCMBaseObject();
            v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v16)
              v16(v15, *MEMORY[0x1E0CA4258], v9, &cfa);
            v21 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
            v17 = FigEndpointGetCMBaseObject();
            v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
            if (v18)
              v18(v17, *MEMORY[0x1E0CA42C0], v9, &v21);
            if (dword_1EE2B3E88)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v20 = cfa;
            if (cfa && v21)
            {
              volumeController_postEndpointMuteByUserDidChangeNotification();
              v20 = cfa;
            }
            if (v20)
            {
              CFRelease(v20);
              cfa = 0;
            }
            if (v21)
            {
              CFRelease(v21);
              v21 = 0;
            }
            if (v23)
            {
              CFRelease(v23);
              v23 = 0;
            }
          }
          if (v24[0])
            CFRelease(v24[0]);
        }
      }
    }
  }
}

void volumeController_handleAirPlayMuteControlSupportDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFAllocator *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const __CFDictionary *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cfa[17];

  cfa[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == FigEndpointGetTypeID())
    {
      v17 = 0;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v7)
      {
        v7(CMBaseObject, *MEMORY[0x1E0CA4398], v5, &v17);
        v8 = v17;
      }
      else
      {
        v8 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v8))
      {
        v15 = 0;
        v16 = 0;
        v9 = FigEndpointGetCMBaseObject();
        v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v10)
          v10(v9, *MEMORY[0x1E0CA4258], v5, &v16);
        v11 = FigEndpointGetCMBaseObject();
        v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v12)
        {
          v12(v11, *MEMORY[0x1E0CA4340], v5, &v15);
          if (v15)
          {
            Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            cfa[0] = 0;
            FigVolumeControllerCopySharedController(cfa);
            volumeController_postNotificationWithPayload(cfa[0], (uint64_t)CFSTR("muteControlSupportDidChange"), Mutable);
            if (cfa[0])
            {
              CFRelease(cfa[0]);
              cfa[0] = 0;
            }
            if (Mutable)
              CFRelease(Mutable);
          }
        }
        if (dword_1EE2B3E88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v15)
        {
          CFRelease(v15);
          v15 = 0;
        }
        if (v16)
        {
          CFRelease(v16);
          v16 = 0;
        }
      }
      if (v17)
        CFRelease(v17);
    }
  }
}

void FigVolumeControllerRemoveAirPlayVolumeNotificationListeners(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v4;

  if (a1)
  {
    v4 = 0;
    FigVolumeControllerCopySharedController(&v4);
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v2)
    {
      v2(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    if (v4)
      CFRelease(v4);
  }
}

uint64_t FigVolumeControllerUnmuteEndpointIfAlreadyMuted(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v7;
  uint64_t v8;
  uint64_t MuteOfEndpointWithID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v15[23];

  v15[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v15[0] = 0;
  FigVolumeControllerCopySharedController(v15);
  v13 = 0;
  cf = 0;
  if (a1)
  {
    v2 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4348], v2, &cf);
    v5 = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      v6(v5, *MEMORY[0x1E0CA4258], v2, &v13);
      v7 = v13;
    }
    else
    {
      v7 = 0;
    }
    v12 = 0;
    MuteOfEndpointWithID = volumeController_GetMuteOfEndpointWithID((uint64_t)v15[0], (uint64_t)v7, &v12);
    if (v12)
    {
      if (dword_1EE2B3E88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MuteOfEndpointWithID = volumeController_SetMuteOfEndpointWithID((uint64_t)v15[0], (uint64_t)v13, 0);
    }
    v8 = MuteOfEndpointWithID;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v13)
    {
      CFRelease(v13);
      v13 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v15[0])
    CFRelease(v15[0]);
  return v8;
}

uint64_t volumeController_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsMuteEnabled())
    return 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v15);
  if (!v15)
    return 4294949706;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
    return 4294949706;
  v7(CMBaseObject, *MEMORY[0x1E0CA4398], *MEMORY[0x1E0C9AE00], &v13);
  if (!v13)
    return 4294949706;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v15))
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v13, (uint64_t)&v14);
    v8 = FigCFArrayContainsValue();
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v15))
    {
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v13, (uint64_t)cf);
      v9 = v15;
      v10 = cf[0];
      if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v10 = 0;
      if (FigRoutingManagerIsEndpointPresentInAggregate(v9, (uint64_t)v10))
        v8 = 1;
      else
        v8 = v8;
      if (cf[0])
        CFRelease(cf[0]);
    }
    if ((_DWORD)v8)
    {
      v8 = volumeController_setMuteForEndpoint(v15, a3);
      if (dword_1EE2B3E88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    v8 = 0;
  }
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (v14)
  {
    CFRelease(v14);
    v14 = 0;
  }
  if (v13)
    CFRelease(v13);
  return v8;
}

uint64_t FigVolumeControllerSaveRoutingContextState(const void *a1)
{
  int ContextType;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v4;
  unsigned int v5;
  uint64_t ContextString;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v9;
  int v10;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, _QWORD, _QWORD, _BYTE *);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, _QWORD, _BYTE *);
  CFIndex v18;
  CFIndex v19;
  const void *v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  CFIndex Count;
  CFIndex v28;
  CFIndex i;
  const void *ValueAtIndex;
  int v31;
  const __CFArray *v32;
  CFIndex v33;
  int v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, CFArrayRef *);
  CFMutableDictionaryRef ContextStateDict;
  CFIndex v45;
  CFIndex v46;
  CFIndex j;
  const void *v48;
  CFMutableDictionaryRef v49;
  float CachedMainVolume;
  float MaxSubEndpointVolume;
  float v52;
  CFTypeRef v53;
  os_log_type_t type[4];
  unsigned int v55;
  _BYTE cf[12];
  __int16 v57;
  const void *v58;
  __int16 v59;
  uint64_t v60;
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 7 || ContextType == 9)
    return 0;
  v53 = 0;
  FigVolumeControllerCopySharedController(&v53);
  if (dword_1EE2B3E88)
  {
    v55 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v4 = v55;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if (v5)
    {
      ContextString = FigRoutingManagerContextUtilities_GetContextString((uint64_t)a1);
      *(_DWORD *)cf = 136315651;
      *(_QWORD *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
      v57 = 2113;
      v58 = a1;
      v59 = 2114;
      v60 = ContextString;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  if (!a1)
    goto LABEL_50;
  theArray[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)theArray);
  if (!theArray[0])
    goto LABEL_50;
  if (CFArrayGetCount(theArray[0]) != 1)
  {
    if (!theArray[0])
    {
LABEL_50:
      if (dword_1EE2B3E88)
      {
        v55 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v25 = v55;
        if (os_log_type_enabled(v24, type[0]))
          v26 = v25;
        else
          v26 = v25 & 0xFFFFFFFE;
        if (v26)
        {
          *(_DWORD *)cf = 136315394;
          *(_QWORD *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
          v57 = 2114;
          v58 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(v53, a1, 0);
      volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(v53, a1, 0);
      if (Value)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), a1);
        theArray[0] = 0;
        FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)a1, (uint64_t)theArray);
        if (theArray[0])
        {
          Count = CFArrayGetCount(theArray[0]);
          if (Count >= 1)
          {
            v28 = Count;
            for (i = 0; i != v28; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], i);
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), ValueAtIndex);
            }
          }
          if (theArray[0])
            CFRelease(theArray[0]);
        }
      }
      MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
      *(_QWORD *)cf = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
      goto LABEL_65;
    }
    if (CFArrayGetCount(theArray[0]) >= 2)
    {
      v13 = FigRoutingManagerAreAllEndpointsBluetoothShareable(theArray[0]);
      goto LABEL_41;
    }
    goto LABEL_30;
  }
  v9 = CFArrayGetValueAtIndex(theArray[0], 0);
  v10 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  v12 = v10 == 1 || (v10 - 3) < 2;
  if (!FigRoutingManagerIsEndpointOfType((uint64_t)v9) || !v12)
  {
    *(_QWORD *)cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v15 = *(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
    {
      v15(CMBaseObject, *MEMORY[0x1E0CA43D8], *MEMORY[0x1E0C9AE00], cf);
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
    }
LABEL_30:
    v13 = 0;
    goto LABEL_41;
  }
  if (v10 == 4)
  {
    *(_QWORD *)cf = 0;
    v16 = FigEndpointGetCMBaseObject();
    v17 = *(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    v13 = 1;
    if (v17)
    {
      v17(v16, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], cf);
      if (*(_QWORD *)cf)
      {
        v18 = CFArrayGetCount(*(CFArrayRef *)cf);
        if (v18 >= 1)
        {
          v19 = v18;
          v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)cf, 0);
          if (v19 == 1 && FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)v20))
            v13 = 0;
        }
      }
    }
  }
  else
  {
    if (v10 != 3)
    {
      v13 = 1;
      goto LABEL_41;
    }
    *(_QWORD *)cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
    v13 = FigRoutingContextUtilities_IsFollowingAnotherContext(*(uint64_t *)cf) == 0;
  }
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
LABEL_41:
  if (theArray[0])
    CFRelease(theArray[0]);
  if (!v13)
    goto LABEL_50;
  if (dword_1EE2B3E88)
  {
    v55 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v22 = v55;
    if (os_log_type_enabled(v21, type[0]))
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFE;
    if (v23)
    {
      *(_DWORD *)cf = 136315394;
      *(_QWORD *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
      v57 = 2114;
      v58 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(v53, a1, 1);
  volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(v53, a1, 1);
  if (!Value)
  {
    ContextStateDict = volumeController_createContextStateDict(0.0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), a1, ContextStateDict);
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)a1, (uint64_t)theArray);
    if (theArray[0])
    {
      v45 = CFArrayGetCount(theArray[0]);
      if (v45 >= 1)
      {
        v46 = v45;
        for (j = 0; j != v46; ++j)
        {
          v48 = CFArrayGetValueAtIndex(theArray[0], j);
          v49 = volumeController_createContextStateDict(0.0);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v48, v49);
          if (v49)
            CFRelease(v49);
        }
      }
      if (theArray[0])
      {
        CFRelease(theArray[0]);
        theArray[0] = 0;
      }
    }
    if (ContextStateDict)
      CFRelease(ContextStateDict);
  }
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
  *(_QWORD *)cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
  CachedMainVolume = volumeController_getCachedMainVolume(a1);
  MaxSubEndpointVolume = volumeController_getMaxSubEndpointVolume(*(const __CFArray **)cf);
  if (MaxSubEndpointVolume >= 0.0)
  {
    v52 = MaxSubEndpointVolume;
    if (FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, MaxSubEndpointVolume))
      volumeController_updateMainVolumeCache((uint64_t)a1, v52);
  }
  volumeController_updateMainVolumeControl((int)a1, *(CFArrayRef *)cf);
  volumeController_updateMainVolumeControlType((int)a1, *(CFArrayRef *)cf);
LABEL_65:
  v31 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  v32 = *(const __CFArray **)cf;
  if (v31 == 1)
  {
    if (*(_QWORD *)cf && (v33 = CFArrayGetCount(*(CFArrayRef *)cf), v32 = *(const __CFArray **)cf, v33 >= 2))
    {
      v34 = FigRoutingManagerAreAllEndpointsBluetoothShareable(*(const __CFArray **)cf);
      v32 = *(const __CFArray **)cf;
    }
    else
    {
      v34 = 0;
    }
    if (FigVolumeControllerSaveRoutingContextState_cachedBluetoothSharingActive != v34)
    {
      if (v34)
      {
        v55 = 0;
        volumeController_getMainVolume(a1, (float *)&v55);
        volumeController_postMainVolumeDidChangeNotification();
        volumeController_postMainVolumeControlDidChangeNotification();
        volumeController_postMainVolumeControlTypeDidChangeNotification();
        v35 = CFArrayGetCount(v32);
        if (v35 >= 1)
        {
          v36 = v35;
          v37 = 0;
          v38 = *MEMORY[0x1E0CA4258];
          v39 = *MEMORY[0x1E0C9AE00];
          do
          {
            v40 = CFArrayGetValueAtIndex(v32, v37);
            *(_DWORD *)type = 0;
            volumeController_getVolumeForEndpoint(v40, type);
            theArray[0] = 0;
            v41 = FigEndpointGetCMBaseObject();
            v42 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
            if (v42)
              v42(v41, v38, v39, theArray);
            volumeController_postEndpointVolumeDidChangeNotification();
            volumeController_postEndpointVolumeControlDidChangeNotification();
            volumeController_postEndpointVolumeControlTypeDidChangeNotification();
            if (theArray[0])
              CFRelease(theArray[0]);
            ++v37;
          }
          while (v36 != v37);
        }
      }
      else
      {
        volumeController_postMainVolumeControlDidChangeNotification();
        volumeController_postMainVolumeControlTypeDidChangeNotification();
      }
      FigVolumeControllerSaveRoutingContextState_cachedBluetoothSharingActive = v34;
      v32 = *(const __CFArray **)cf;
    }
  }
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)cf = 0;
  }
  if (v53)
    CFRelease(v53);
  return 0;
}

void volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(const void *a1, const void *a2, int a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  if (volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification_cachedVolumeOperationsSupported != a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (a3)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("routingContext_CanUseForRoutingContext"), *v8);
    CFDictionarySetValue(v7, CFSTR("masterVolumeKey_RoutingContextUUID"), a2);
    volumeController_postNotificationWithPayload(a1, (uint64_t)CFSTR("canUseForRoutingContextDidChange"), v7);
    volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification_cachedVolumeOperationsSupported = a3;
    if (v7)
      CFRelease(v7);
  }
}

void volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(const void *a1, const void *a2, int a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  if (volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification_cachedMuteOperationsSupported != a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (a3)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("routingContext_CanUseForRoutingContext"), *v8);
    CFDictionarySetValue(v7, CFSTR("masterVolumeKey_RoutingContextUUID"), a2);
    volumeController_postNotificationWithPayload(a1, (uint64_t)CFSTR("MuteControlSupportForRoutingContextDidChang"), v7);
    volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification_cachedMuteOperationsSupported = a3;
    if (v7)
      CFRelease(v7);
  }
}

CFMutableDictionaryRef volumeController_createContextStateDict(float a1)
{
  const __CFAllocator *v1;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v3;
  float valuePtr;

  valuePtr = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = CFNumberCreate(v1, kCFNumberFloat32Type, &valuePtr);
  FigCFDictionarySetValue();
  if (v3)
    CFRelease(v3);
  return Mutable;
}

float volumeController_getCachedMainVolume(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  const __CFNumber *v4;
  CFTypeRef cf;
  float valuePtr;

  valuePtr = 0.0;
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  if (Value)
  {
    v4 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("MainVolume"));
    if (v4)
      CFNumberGetValue(v4, kCFNumberFloat32Type, &valuePtr);
  }
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
  if (cf)
    CFRelease(cf);
  return valuePtr;
}

float volumeController_getMaxSubEndpointVolume(const __CFArray *a1)
{
  const void *ValueAtIndex;
  float v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  float SubEndpointVolume;
  CFIndex v15;
  CFIndex v16;
  CFIndex i;
  const void *v18;
  CFTypeRef cf;
  CFArrayRef theArray;

  if (!a1)
  {
    volumeController_isBluetoothSharingMainVolumeSupported(0);
    return -1.0;
  }
  if (CFArrayGetCount(a1) == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
    v3 = -1.0;
    if (ValueAtIndex && FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
      theArray = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v5)
      {
        v6 = *MEMORY[0x1E0C9AE00];
        v5(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
        if (!theArray)
          return v3;
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v8 = Count;
          v9 = 0;
          v10 = *MEMORY[0x1E0CA4348];
          do
          {
            v11 = CFArrayGetValueAtIndex(theArray, v9);
            cf = 0;
            v12 = FigEndpointGetCMBaseObject();
            v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
            if (v13)
              v13(v12, v10, v6, &cf);
            if (v11)
              v11 = CFRetain(v11);
            SubEndpointVolume = volumecontroller_getSubEndpointVolume((uint64_t)v11);
            if (SubEndpointVolume > v3)
              v3 = SubEndpointVolume;
            if (v11)
              CFRelease(v11);
            if (cf)
              CFRelease(cf);
            ++v9;
          }
          while (v8 != v9);
        }
      }
      if (theArray)
        CFRelease(theArray);
    }
  }
  else
  {
    v3 = -1.0;
    if (volumeController_isBluetoothSharingMainVolumeSupported(a1))
    {
      v15 = CFArrayGetCount(a1);
      if (v15 >= 1)
      {
        v16 = v15;
        for (i = 0; i != v16; ++i)
        {
          v18 = CFArrayGetValueAtIndex(a1, i);
          LODWORD(theArray) = 0;
          volumeController_getVolumeForEndpoint(v18, &theArray);
          if (*(float *)&theArray > v3)
            v3 = *(float *)&theArray;
        }
      }
    }
  }
  return v3;
}

void volumeController_updateMainVolumeCache(uint64_t a1, float a2)
{
  CFMutableDictionaryRef ContextStateDict;
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeRef cf;

  if (a1)
  {
    ContextStateDict = volumeController_createContextStateDict(a2);
    cf = 0;
    FigVolumeControllerCopySharedController(&cf);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
    FigCFDictionarySetValue();
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
    if (ContextStateDict)
      CFRelease(ContextStateDict);
    if (cf)
      CFRelease(cf);
  }
  cf = 0;
  FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs(a1, (uint64_t)&cf);
  if (cf)
  {
    Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
        volumeController_updateMainVolumeCache(ValueAtIndex, a2);
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void volumeController_updateMainVolumeControl(int a1, CFArrayRef theArray)
{
  const void *ValueAtIndex;

  if (theArray && CFArrayGetCount(theArray) == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
      volumeController_isAirPlayMainVolumeSupported();
      volumeController_postMainVolumeControlDidChangeNotification();
    }
  }
}

void volumeController_updateMainVolumeControlType(int a1, CFArrayRef theArray)
{
  const void *ValueAtIndex;

  if (theArray && CFArrayGetCount(theArray) == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
      volumeController_getAirPlayMainVolumeControlType();
      volumeController_postMainVolumeControlTypeDidChangeNotification();
    }
  }
}

void FigVolumeControllerRecomputeMainVolume(const void *a1, float a2)
{
  if (volumeController_contextSupportsVolumeOperations(a1))
    volumeController_recomputeMainVolume(a1, a2);
}

uint64_t volumeController_contextSupportsVolumeOperations(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
  v3 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
  if (cf)
    CFRelease(cf);
  return v3;
}

void volumeController_postNotificationWithPayload(const void *a1, uint64_t a2, const __CFDictionary *a3)
{
  NSObject **DerivedStorage;
  const void *Value;
  CFTypeRef v8;
  NSObject *v9;
  _QWORD v10[8];
  CFTypeRef v11;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    Value = CFDictionaryGetValue(a3, CFSTR("masterVolumeKey_RoutingContextUUID"));
    FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)Value, (uint64_t)&v11);
  }
  if (a1)
    CFRetain(a1);
  if (a3)
    CFRetain(a3);
  if (v11)
  {
    CFRetain(v11);
    v8 = v11;
  }
  else
  {
    v8 = 0;
  }
  v9 = *DerivedStorage;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __volumeController_postNotificationWithPayload_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a1;
  v10[7] = v8;
  MXDispatchAsync((uint64_t)"volumeController_postNotificationWithPayload", (uint64_t)"FigVolumeController.m", 651, 0, 0, v9, (uint64_t)v10);
  if (v11)
    CFRelease(v11);
}

void __volumeController_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef MutableCopy;
  int v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFIndex v15;

  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1EE2B3E88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v3 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v3 = 1;
    }
  }
  else
  {
    v3 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v4 = *(const __CFArray **)(a1 + 56);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v15 = Count;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v7);
        MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, *(CFDictionaryRef *)(a1 + 40));
        FigCFDictionarySetValue();
        if (dword_1EE2B3E88)
          v10 = v3;
        else
          v10 = 0;
        if (v10 == 1)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v6 = v15;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (MutableCopy)
          CFRelease(MutableCopy);
        ++v7;
      }
      while (v6 != v7);
    }
    v12 = *(const void **)(a1 + 56);
    if (v12)
      CFRelease(v12);
  }
  v13 = *(const void **)(a1 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 48);
  if (v14)
    CFRelease(v14);
}

void volumeController_postEndpointVolumeControlDidChangeNotification()
{
  const __CFDictionary *Mutable;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("canSetEndpointVolumeDidChange"), Mutable);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

void volumeController_postEndpointVolumeControlTypeDidChangeNotification()
{
  const __CFDictionary *Mutable;
  const void *UInt64;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  FigCFDictionarySetValue();
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("endpointVolumeControlTypeDidChange"), Mutable);
  if (UInt64)
    CFRelease(UInt64);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

void volumeController_postEndpointMuteByUserDidChangeNotification()
{
  const __CFDictionary *Mutable;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("endpointMutedByUserDidChange"), Mutable);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t volumeController_getMainVolume(const void *a1, float *a2)
{
  uint64_t v2;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  CFNumberRef v9;
  BOOL v10;
  CFNumberRef number;
  CFArrayRef theArray;

  v2 = 4294949706;
  if (a1 && a2)
  {
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        v2 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
          || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
          || (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
           || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
          && volumeController_isBluetoothSharingMainVolumeSupported(theArray))
        {
          v2 = 0;
          *a2 = volumeController_getCachedMainVolume(a1);
        }
        else
        {
          number = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
          if (v8)
          {
            v2 = v8(CMBaseObject, *MEMORY[0x1E0CA4320], *MEMORY[0x1E0C9AE00], &number);
            v9 = number;
            if ((_DWORD)v2)
              v10 = 1;
            else
              v10 = number == 0;
            if (!v10)
            {
              CFNumberGetValue(number, kCFNumberFloat32Type, a2);
              v9 = number;
            }
            if (v9)
              CFRelease(v9);
          }
          else
          {
            v2 = 4294954514;
          }
        }
      }
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void volumeController_postMainVolumeControlDidChangeNotification()
{
  const __CFDictionary *Mutable;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("canSetMasterVolumeDidChange"), Mutable);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

void volumeController_postMainVolumeControlTypeDidChangeNotification()
{
  const __CFDictionary *Mutable;
  const void *UInt64;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, (uint64_t)CFSTR("masterVolumeControlTypeDidChange"), Mutable);
  if (UInt64)
    CFRelease(UInt64);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t volumeController_getVolumeForEndpoint(const void *a1, _DWORD *a2)
{
  uint64_t v2;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  BOOL v8;
  int v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v14;

  v2 = 4294949706;
  if (a1 && a2)
  {
    v4 = CFRetain(a1);
    v14 = 0;
    v5 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v7)
    {
      v2 = v7(CMBaseObject, *MEMORY[0x1E0CA44A0], v5, &v14);
      if ((_DWORD)v2)
        v8 = 1;
      else
        v8 = v14 == 0;
      if (!v8)
      {
        FigCFNumberGetFloat32();
        v2 = 0;
        *a2 = v9;
      }
    }
    else
    {
      v2 = 4294954514;
    }
    cf = 0;
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
    {
      v11(v10, *MEMORY[0x1E0CA4348], v5, &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    if (v14)
    {
      CFRelease(v14);
      v14 = 0;
    }
    if (v4)
      CFRelease(v4);
  }
  return v2;
}

BOOL volumeController_isBluetoothSharingMainVolumeSupported(const __CFArray *a1)
{
  char CFPreferenceNumberWithDefault;
  _BOOL4 v3;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v3 = a1 && CFArrayGetCount(a1) >= 2 && FigRoutingManagerAreAllEndpointsBluetoothShareable(a1);
  return CFPreferenceNumberWithDefault && v3;
}

void volumeController_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_QWORD *)DerivedStorage)
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
}

__CFString *volumeController_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVolumeController = %p: routingContexts = %@>"), a1, *(_QWORD *)(DerivedStorage + 16));
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t volumeController_ChangeMainVolumeForRoutingContext(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t MainVolume;
  CFTypeRef v8;
  const void *v9;
  const __CFAllocator *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, os_log_type_t *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *);
  CFIndex v15;
  int v16;
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  const void **v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  CFIndex v23;
  uint64_t v24;
  const void *ValueAtIndex;
  double v26;
  __CFDictionary *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  __CFDictionary *v31;
  void (*v32)(__CFDictionary *, uint64_t, __CFDictionary *, _QWORD, _QWORD);
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  uint64_t IsMuteEnabled;
  uint64_t MuteOfRoutingContext;
  CFTypeRef v40;
  CFTypeRef cf;
  os_log_type_t v42;
  os_log_type_t v43[4];
  CFArrayRef v44;
  os_log_type_t type[8];
  CFArrayRef theArray;
  int v47;
  const char *v48;
  __int16 v49;
  double v50;
  __int16 v51;
  __CFDictionary *v52;
  __int16 v53;
  __CFDictionary *v54;
  char v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 4294949706;
  v5 = &sCategoryToPriorityMapForTriangle;
  if (dword_1EE2B3E88)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a3, (uint64_t)&cf);
  v8 = cf;
  if (cf)
  {
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)cf, (uint64_t)&theArray);
    if (!theArray)
      goto LABEL_61;
    if (CFArrayGetCount(theArray) >= 1
      && (v9 = CFArrayGetValueAtIndex(theArray, 0), FigRoutingManagerIsEndpointOfType((uint64_t)v9)))
    {
      *(_QWORD *)type = 0;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v12)
        v12(CMBaseObject, *MEMORY[0x1E0CA44B0], v10, type);
      if ((unint64_t)(FigCFNumberGetSInt64() - 1) > 1)
      {
        v16 = 0;
      }
      else
      {
        v44 = 0;
        v13 = FigEndpointGetCMBaseObject();
        v14 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v14)
          v14(v13, *MEMORY[0x1E0CA43D0], v10, &v44);
        if (v44)
          *(double *)&v15 = COERCE_DOUBLE(CFArrayGetCount(v44));
        else
          *(double *)&v15 = 0.0;
        Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v18 = Mutable;
        v19 = (const void **)MEMORY[0x1E0C9AE40];
        if (a1 > 0.0)
          v19 = (const void **)MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4670], *v19);
        if (dword_1EE2B3E88)
        {
          *(_DWORD *)v43 = 0;
          v42 = OS_LOG_TYPE_DEFAULT;
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v21 = *(_DWORD *)v43;
          if (os_log_type_enabled(v20, v42))
            v22 = v21;
          else
            v22 = v21 & 0xFFFFFFFE;
          if (v22)
          {
            v47 = 136315651;
            v48 = "volumeController_changeMainVolumeBy";
            v49 = 2048;
            v50 = *(double *)&v15;
            v51 = 2113;
            v52 = v18;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = &sCategoryToPriorityMapForTriangle;
        }
        if (v15 < 1)
        {
          v16 = 0;
        }
        else
        {
          v40 = v8;
          v23 = 0;
          v24 = *MEMORY[0x1E0CA4640];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v44, v23);
            v26 = *(double *)&ValueAtIndex;
            if (ValueAtIndex)
              v27 = (__CFDictionary *)CFRetain(ValueAtIndex);
            else
              v27 = 0;
            if (*((_DWORD *)v5 + 930))
            {
              *(_DWORD *)v43 = 0;
              v42 = OS_LOG_TYPE_DEFAULT;
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v29 = *(_DWORD *)v43;
              if (os_log_type_enabled(v28, v42))
                v30 = v29;
              else
                v30 = v29 & 0xFFFFFFFE;
              if (v30)
              {
                v47 = 136315906;
                v48 = "volumeController_changeMainVolumeBy";
                v49 = 2048;
                v50 = v26;
                v51 = 2048;
                v52 = v27;
                v53 = 2114;
                v54 = v18;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v5 = &sCategoryToPriorityMapForTriangle;
            }
            if (!v27 || (FigEndpointExtendedGetClassID(), v31 = v27, !CMBaseObjectIsMemberOfClass()))
              v31 = 0;
            v32 = *(void (**)(__CFDictionary *, uint64_t, __CFDictionary *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 72);
            if (v32)
              v32(v31, v24, v18, 0, 0);
            if (v27)
              CFRelease(v27);
            ++v23;
          }
          while (v15 != v23);
          v16 = 1;
          v8 = v40;
        }
        if (v44)
        {
          CFRelease(v44);
          v44 = 0;
        }
        if (v18)
          CFRelease(v18);
      }
      if (*(_QWORD *)type)
        CFRelease(*(CFTypeRef *)type);
    }
    else
    {
      v16 = 0;
    }
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
    if (v16)
    {
      MainVolume = 0;
    }
    else
    {
LABEL_61:
      *(_DWORD *)type = 0;
      MainVolume = volumeController_getMainVolume(v8, (float *)type);
      if (*((_DWORD *)v5 + 930))
      {
        LODWORD(v44) = 0;
        v43[0] = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v34 = v44;
        if (os_log_type_enabled(v33, v43[0]))
          v35 = v34;
        else
          v35 = v34 & 0xFFFFFFFE;
        if (v35)
        {
          v47 = 136315394;
          v48 = "volumeController_changeMainVolumeBy";
          v49 = 2048;
          v50 = *(float *)type;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!(_DWORD)MainVolume)
      {
        v36 = *(float *)type + a1;
        *(float *)type = v36;
        if (v36 <= 1.0)
        {
          if (v36 < 0.0)
          {
            *(_DWORD *)type = 0;
            v36 = 0.0;
          }
        }
        else
        {
          *(_DWORD *)type = 1065353216;
          v36 = 1.0;
        }
        MainVolume = volumeController_setMainVolume(v8, v36);
      }
    }
  }
  else
  {
    MainVolume = 4294949706;
  }
  IsMuteEnabled = MX_FeatureFlags_IsMuteEnabled();
  if ((_DWORD)IsMuteEnabled)
  {
    v55[0] = 0;
    MuteOfRoutingContext = volumeController_GetMuteOfRoutingContext(IsMuteEnabled, a3, v55);
    if (v55[0])
      volumeController_SetMuteOfRoutingContext(MuteOfRoutingContext, a3, 0);
  }
  if (cf)
    CFRelease(cf);
  return MainVolume;
}

uint64_t volumeController_SetMainVolumeForRoutingContext(float a1, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t IsMuteEnabled;
  uint64_t MuteOfRoutingContext;
  int v10;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a3)
    return 4294949706;
  if (dword_1EE2B3E88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a3, (uint64_t)cf);
  v6 = volumeController_setMainVolume(cf[0], a1);
  IsMuteEnabled = MX_FeatureFlags_IsMuteEnabled();
  if ((_DWORD)IsMuteEnabled)
  {
    LOBYTE(v10) = 0;
    MuteOfRoutingContext = volumeController_GetMuteOfRoutingContext(IsMuteEnabled, a3, &v10);
    if ((_BYTE)v10)
      volumeController_SetMuteOfRoutingContext(MuteOfRoutingContext, a3, 0);
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v6;
}

uint64_t volumeController_GetMainVolumeForRoutingContext(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t MainVolume;
  CFTypeRef cf;

  if (!a2)
    return 4294949706;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&cf);
  MainVolume = volumeController_getMainVolume(cf, a3);
  if (cf)
    CFRelease(cf);
  return MainVolume;
}

uint64_t volumeController_IsMainVolumeControlSupportedForRoutingContext(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  const void *ValueAtIndex;
  char isAirPlayMainVolumeSupported;
  CFTypeRef v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v13;

  v3 = 4294949706;
  if (a2 && a3)
  {
    v13 = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v13);
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v13, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        v3 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          isAirPlayMainVolumeSupported = volumeController_isAirPlayMainVolumeSupported();
          v3 = 0;
        }
        else
        {
          v7 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
          cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
          CMBaseObject = FigEndpointGetCMBaseObject();
          v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v9)
          {
            v3 = v9(CMBaseObject, *MEMORY[0x1E0CA4328], *MEMORY[0x1E0C9AE00], &cf);
            v7 = cf;
          }
          else
          {
            v3 = 4294954514;
          }
          isAirPlayMainVolumeSupported = v7 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
          if (v7)
            CFRelease(v7);
        }
        *a3 = isAirPlayMainVolumeSupported;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      v3 = 0;
    }
    if (v13)
      CFRelease(v13);
  }
  return v3;
}

uint64_t volumeController_GetMainVolumeControlTypeForRoutingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  const void *ValueAtIndex;
  uint64_t AirPlayMainVolumeControlType;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v10;
  BOOL v11;
  CFTypeRef v12;
  CFArrayRef theArray;
  CFTypeRef cf;

  v3 = 4294949706;
  if (a2 && a3)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&cf);
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)cf, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        v3 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          AirPlayMainVolumeControlType = volumeController_getAirPlayMainVolumeControlType();
          v3 = 0;
        }
        else
        {
          v12 = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v9)
          {
            v3 = v9(CMBaseObject, *MEMORY[0x1E0CA44B0], *MEMORY[0x1E0C9AE00], &v12);
            v10 = v12;
            if ((_DWORD)v3)
              v11 = 1;
            else
              v11 = v12 == 0;
            if (v11)
            {
              AirPlayMainVolumeControlType = 3;
            }
            else
            {
              AirPlayMainVolumeControlType = FigCFNumberGetSInt64();
              v10 = v12;
            }
            if (v10)
              CFRelease(v10);
          }
          else
          {
            v3 = 4294954514;
            AirPlayMainVolumeControlType = 3;
          }
        }
        *a3 = AirPlayMainVolumeControlType;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      v3 = 0;
    }
    if (cf)
      CFRelease(cf);
  }
  return v3;
}

uint64_t volumeController_ChangeVolumeForEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef v6;
  const __CFAllocator *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *Mutable;
  const void *v11;
  const void **v12;
  CFTypeRef v13;
  uint64_t VolumeForEndpoint;
  float v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v17;
  unsigned int v18;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, const void *, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  CFTypeRef v27;
  os_log_type_t type;
  unsigned int v29;
  CFTypeRef cf;
  int v31;
  const char *v32;
  __int16 v33;
  CFTypeRef v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  float v39[32];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v27);
  v6 = v27;
  cf = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
    v9(CMBaseObject, *MEMORY[0x1E0CA44B0], v7, &cf);
  if ((unint64_t)(FigCFNumberGetSInt64() - 1) <= 1)
  {
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    v12 = (const void **)MEMORY[0x1E0C9AE40];
    if (a3 > 0.0)
      v12 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4670], *v12);
    if (v6)
      v13 = CFRetain(v6);
    else
      v13 = 0;
    if (dword_1EE2B3E88)
    {
      v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v17 = v29;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if (v18)
      {
        v31 = 136315650;
        v32 = "volumeController_changeIndividualVolumeBy";
        v33 = 2048;
        v34 = v6;
        v35 = 2048;
        v36 = (uint64_t)v13;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v13 || (FigEndpointExtendedGetClassID(), v19 = v13, !CMBaseObjectIsMemberOfClass()))
      v19 = 0;
    v20 = *(uint64_t (**)(CFTypeRef, _QWORD, const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 24)
                                                                                    + 72);
    if (v20)
    {
      VolumeForEndpoint = v20(v19, *MEMORY[0x1E0CA4640], v11, 0, 0);
      if (!v13)
      {
LABEL_27:
        if (!v11)
          goto LABEL_29;
        goto LABEL_28;
      }
    }
    else
    {
      VolumeForEndpoint = 4294954514;
      if (!v13)
        goto LABEL_27;
    }
    CFRelease(v13);
    goto LABEL_27;
  }
  v39[0] = 0.0;
  VolumeForEndpoint = volumeController_getVolumeForEndpoint(v6, v39);
  if (!(_DWORD)VolumeForEndpoint)
  {
    v15 = v39[0] + a3;
    v39[0] = v15;
    if (v15 <= 1.0)
    {
      if (v15 < 0.0)
      {
        v39[0] = 0.0;
        v15 = 0.0;
      }
    }
    else
    {
      v39[0] = 1.0;
      v15 = 1.0;
    }
    VolumeForEndpoint = volumeController_setVolumeForEndpoint(v6, v15);
    v11 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)v6);
    volumeController_recomputeMainVolume(v11, v39[0]);
    if (v11)
LABEL_28:
      CFRelease(v11);
  }
LABEL_29:
  if (cf)
    CFRelease(cf);
  cf = 0;
  if (v27)
  {
    v21 = FigEndpointGetCMBaseObject();
    v22 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v22)
      v22(v21, *MEMORY[0x1E0CA4348], v7, &cf);
  }
  if (dword_1EE2B3E88)
  {
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v24 = v29;
    if (os_log_type_enabled(v23, type))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if (v25)
    {
      v31 = 136315906;
      v32 = "volumeController_ChangeVolumeForEndpointWithID";
      v33 = 2114;
      v34 = cf;
      v35 = 2114;
      v36 = a2;
      v37 = 2048;
      v38 = a3;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (MX_FeatureFlags_IsMuteEnabled())
  {
    LOBYTE(v39[0]) = 0;
    volumeController_GetMuteOfEndpointWithID(a1, a2, v39);
    if (LOBYTE(v39[0]))
      volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v27)
    CFRelease(v27);
  return VolumeForEndpoint;
}

uint64_t volumeController_SetVolumeForEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v19);
  if (v19)
  {
    v6 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
      v8(CMBaseObject, *MEMORY[0x1E0CA4398], v6, &v16);
    v9 = FigEndpointGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
      v10(v9, *MEMORY[0x1E0CA4348], v6, &v17);
    if (v16)
    {
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v16, (uint64_t)&v18);
      v11 = FigCFArrayContainsValue();
      if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v19))
      {
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v16, (uint64_t)cf);
        v12 = v19;
        v13 = cf[0];
        if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
          v13 = 0;
        if (FigRoutingManagerIsEndpointPresentInAggregate(v12, (uint64_t)v13))
          v11 = 1;
        else
          v11 = v11;
        if (cf[0])
          CFRelease(cf[0]);
      }
      if ((_DWORD)v11)
      {
        v11 = volumeController_setVolumeForEndpoint(v19, a3);
        volumeController_recomputeMainVolume(v16, a3);
        if (dword_1EE2B3E88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      v11 = 0;
    }
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      LOBYTE(cf[0]) = 0;
      volumeController_GetMuteOfEndpointWithID(a1, a2, cf);
      if (LOBYTE(cf[0]))
        volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v17)
  {
    CFRelease(v17);
    v17 = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    v18 = 0;
  }
  if (v16)
    CFRelease(v16);
  return v11;
}

uint64_t volumeController_GetVolumeForEndpointWithID(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t VolumeForEndpoint;
  CFTypeRef cf;
  CFTypeRef v9;

  cf = 0;
  v9 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v9);
  if (!v9)
    return 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v5(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
  VolumeForEndpoint = volumeController_getVolumeForEndpoint(v9, a3);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v9)
    CFRelease(v9);
  return VolumeForEndpoint;
}

uint64_t volumeController_IsVolumeControlSupportedForEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  CFTypeRef v4;
  _QWORD *v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v13;
  CFTypeRef v14;

  if (!a3)
    return 4294949706;
  v14 = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&v14);
  v4 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v13 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v5 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!v14)
  {
LABEL_6:
    v8 = 0;
    *a3 = v4 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    goto LABEL_9;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
  {
    v8 = v7(CMBaseObject, *MEMORY[0x1E0CA44A8], *v5, &v13);
    if ((_DWORD)v8)
      goto LABEL_9;
    v4 = v13;
    goto LABEL_6;
  }
  v8 = 4294954514;
LABEL_9:
  cf = 0;
  if (v14)
  {
    v9 = FigEndpointGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
    {
      v10(v9, *MEMORY[0x1E0CA4348], *v5, &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  if (v13)
  {
    CFRelease(v13);
    v13 = 0;
  }
  if (v14)
    CFRelease(v14);
  return v8;
}

uint64_t volumeController_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf;

  if (a4)
  {
    cf = 0;
    volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
    if (cf)
      CFRelease(cf);
  }
  return 4294949706;
}

uint64_t volumeController_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf;

  cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
  if (MX_FeatureFlags_IsMuteEnabled())
    volumeController_GetMuteOfSubEndpointWithID(a1, a2, a3);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t volumeController_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf;

  if (!a4)
    return 4294949706;
  cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t volumeController_SetVolumeOfRoomWithID()
{
  return 0;
}

uint64_t volumeController_GetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return 0;
  else
    return 4294949706;
}

uint64_t volumeController_SetMuteOfRoutingContext(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *ValueAtIndex;
  const __CFAllocator *v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, os_log_type_t *);
  const char *v11;
  const __CFArray *v12;
  CFIndex v13;
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  CFTypeRef v20;
  uint64_t EndpointManagerName;
  const __CFDictionary *Mutable;
  const char *v23;
  uint64_t v24;
  CFTypeRef v25;
  os_log_type_t v26;
  unsigned int v27;
  CFTypeRef v28;
  os_log_type_t type[8];
  CFArrayRef theArray;
  int v31;
  const char *v32;
  __int16 v33;
  CFTypeRef v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  const char *v38;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294949706;
  result = MX_FeatureFlags_IsMuteEnabled();
  if (!(_DWORD)result)
    return result;
  if (dword_1EE2B3E88)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v25 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v25);
  if (!v25)
    return 4294949706;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v25, (uint64_t)&theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        *(_QWORD *)type = 0;
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        CMBaseObject = FigEndpointGetCMBaseObject();
        v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
        if (v10)
          v10(CMBaseObject, *MEMORY[0x1E0CA43D0], v8, type);
        v11 = "Yes";
        if (!a3)
          v11 = "No";
        v23 = v11;
        v12 = *(const __CFArray **)type;
        if (*(_QWORD *)type)
        {
          v13 = 0;
          v24 = *MEMORY[0x1E0CA4348];
          while (v13 < CFArrayGetCount(v12))
          {
            v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)type, v13);
            volumeController_setMuteForEndpoint(v14, a3);
            v28 = 0;
            v15 = FigEndpointGetCMBaseObject();
            v16 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v16)
              v16(v15, v24, v8, &v28);
            if (dword_1EE2B3E88)
            {
              v27 = 0;
              v26 = OS_LOG_TYPE_DEFAULT;
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v18 = v27;
              if (os_log_type_enabled(v17, v26))
                v19 = v18;
              else
                v19 = v18 & 0xFFFFFFFE;
              if (v19)
              {
                v20 = v28;
                EndpointManagerName = FigRoutingManagerGetEndpointManagerName((uint64_t)v14);
                v31 = 136315906;
                v32 = "volumeController_setMuteByUserForRoutingContext";
                v33 = 2114;
                v34 = v20;
                v35 = 2114;
                v36 = EndpointManagerName;
                v37 = 2082;
                v38 = v23;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            cf[0] = 0;
            FigVolumeControllerCopySharedController(cf);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            volumeController_postNotificationWithPayload(cf[0], (uint64_t)CFSTR("routingContextMutedByUserDidChange"), Mutable);
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            if (Mutable)
              CFRelease(Mutable);
            if (v28)
              CFRelease(v28);
            ++v13;
            v12 = *(const __CFArray **)type;
            if (!*(_QWORD *)type)
              goto LABEL_36;
          }
          if (*(_QWORD *)type)
            CFRelease(*(CFTypeRef *)type);
        }
      }
    }
LABEL_36:
    if (theArray)
      CFRelease(theArray);
  }
  result = (uint64_t)v25;
  if (v25)
  {
    CFRelease(v25);
    return 0;
  }
  return result;
}

uint64_t volumeController_GetMuteOfRoutingContext(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, _BYTE *);
  int v18;
  BOOL v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v21;
  unsigned int v22;
  const char *v23;
  CFTypeRef v25;
  CFArrayRef v26;
  _BYTE cf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294949706;
  if (!MX_FeatureFlags_IsMuteEnabled())
    return 0;
  v25 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v25);
  if (v25)
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v25, (uint64_t)theArray);
    *(_QWORD *)cf = 0;
    if (theArray[0])
    {
      if (CFArrayGetCount(theArray[0]) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          v26 = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
          if (!v7)
            goto LABEL_45;
          v8 = *MEMORY[0x1E0C9AE00];
          v7(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v26);
          if (v26)
          {
            Count = CFArrayGetCount(v26);
            if (Count >= 1)
            {
              v10 = Count;
              v11 = 0;
              v12 = 0;
              v13 = *MEMORY[0x1E0CA42C0];
              do
              {
                v14 = CFArrayGetValueAtIndex(v26, v11);
                if (v14)
                {
                  v15 = CFRetain(v14);
                  if (v15)
                  {
                    v16 = FigEndpointGetCMBaseObject();
                    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
                    if (v17)
                      v12 = v17(v16, v13, v8, cf);
                    else
                      v12 = 4294954514;
                  }
                  v18 = FigCFEqual();
                  if (v15)
                    v19 = v18 == 0;
                  else
                    v19 = 0;
                  if (v19)
                  {
                    CFRelease(v15);
                  }
                  else if (v18)
                  {
                    break;
                  }
                }
                ++v11;
              }
              while (v10 != v11);
LABEL_46:
              if (v26)
                CFRelease(v26);
              if ((_DWORD)v12)
                goto LABEL_29;
              goto LABEL_28;
            }
LABEL_45:
            v12 = 0;
            goto LABEL_46;
          }
        }
      }
    }
LABEL_28:
    v12 = 0;
    *a3 = FigCFEqual();
LABEL_29:
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
    goto LABEL_33;
  }
  v12 = 4294949706;
LABEL_33:
  if (dword_1EE2B3E88)
  {
    LODWORD(v26) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v21 = v26;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if (v22)
    {
      v23 = "YES";
      *(_QWORD *)&cf[4] = "volumeController_GetMuteOfRoutingContext";
      *(_DWORD *)cf = 136315650;
      if (!a3)
        v23 = "NO";
      v28 = 2114;
      v29 = a2;
      v30 = 2082;
      v31 = v23;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v25)
    CFRelease(v25);
  return v12;
}

uint64_t volumeController_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  CFTypeRef cf;

  result = MX_FeatureFlags_IsMuteEnabled();
  if ((_DWORD)result)
  {
    if (a3)
    {
      cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
      if (cf)
        CFRelease(cf);
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  CFTypeRef cf;

  result = MX_FeatureFlags_IsMuteEnabled();
  if ((_DWORD)result)
  {
    if (a3)
    {
      cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
      if (cf)
        CFRelease(cf);
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_CanSetMuteOfRoutingContext(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  CFIndex v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v18;
  BOOL v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v24;
  CFArrayRef v25[17];

  v25[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294949706;
  if (!MX_FeatureFlags_IsMuteEnabled())
    return 0;
  v24 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v24);
  if (!v24)
    return 4294949706;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v24, (uint64_t)&theArray);
  cf = 0;
  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        v25[0] = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
        if (!v7)
          goto LABEL_28;
        v8 = *MEMORY[0x1E0C9AE00];
        v7(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], v25);
        if (v25[0])
        {
          Count = CFArrayGetCount(v25[0]);
          if (Count >= 1)
          {
            v10 = Count;
            v11 = 0;
            v12 = 0;
            v13 = *MEMORY[0x1E0CA4340];
            do
            {
              v14 = CFArrayGetValueAtIndex(v25[0], v12);
              if (v14)
              {
                v15 = CFRetain(v14);
                if (v15)
                {
                  v16 = FigEndpointGetCMBaseObject();
                  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
                  if (v17)
                    v11 = v17(v16, v13, v8, &cf);
                  else
                    v11 = 4294954514;
                }
                v18 = FigCFEqual();
                if (v15)
                  v19 = v18 == 0;
                else
                  v19 = 0;
                if (v19)
                {
                  CFRelease(v15);
                }
                else if (v18)
                {
                  break;
                }
              }
              ++v12;
            }
            while (v10 != v12);
LABEL_29:
            if (v25[0])
              CFRelease(v25[0]);
            if ((_DWORD)v11)
              goto LABEL_33;
            goto LABEL_32;
          }
LABEL_28:
          v11 = 0;
          goto LABEL_29;
        }
      }
    }
  }
LABEL_32:
  v11 = 0;
  *a3 = FigCFEqual();
LABEL_33:
  if (dword_1EE2B3E88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v24)
    CFRelease(v24);
  return v11;
}

uint64_t volumeController_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  CFTypeRef v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsMuteEnabled())
    return 0;
  v16 = 0;
  cf[0] = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0]))
  {
    v15 = 0;
    if (!cf[0])
      return 4294949706;
    v6 = CFRetain(cf[0]);
    v7 = *MEMORY[0x1E0C9AE00];
    if (!v6)
      goto LABEL_7;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (!v9)
    {
      v10 = 4294954514;
      goto LABEL_12;
    }
    v10 = v9(CMBaseObject, *MEMORY[0x1E0CA4340], v7, &v15);
    if (!(_DWORD)v10)
    {
LABEL_7:
      v10 = 0;
      *a3 = FigCFEqual();
    }
LABEL_12:
    v11 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(v11, *MEMORY[0x1E0CA4348], v7, &v16);
    if (dword_1EE2B3E88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6)
      CFRelease(v6);
    if (v15)
      CFRelease(v15);
    goto LABEL_20;
  }
  v10 = 0;
LABEL_20:
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v16)
    CFRelease(v16);
  return v10;
}

uint64_t volumeController_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  CFTypeRef cf;

  result = MX_FeatureFlags_IsMuteEnabled();
  if ((_DWORD)result)
  {
    if (a3)
    {
      cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
      if (cf)
        CFRelease(cf);
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2)
{
  char v5;
  CFTypeRef cf;

  cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
  if (cf)
  {
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      v5 = 0;
      volumeController_GetMuteOfEndpointWithID(a1, a2, &v5);
      if (v5)
        volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
    }
    if (cf)
      CFRelease(cf);
  }
  return 0;
}

uint64_t volumeController_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf;

  if (!a4)
    return 4294949706;
  cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (OpaqueFigEndpoint **)&cf);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t volumeController_setMainVolume(const void *a1, float a2)
{
  uint64_t v3;
  BOOL v4;
  const void *ValueAtIndex;
  float CachedMainVolume;
  const void *v8;
  float v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  const void *v16;
  const void *v17;
  CFTypeRef v18;
  float SubEndpointVolume;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD, _QWORD);
  float v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  CFTypeRef v28;
  uint64_t v29;
  CFNumberRef v30;
  uint64_t CMBaseObject;
  uint64_t (*v32)(_QWORD, _QWORD, _QWORD);
  float v33;
  float v34;
  CFIndex Count;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  uint64_t v39;
  float v40;
  const void *v41;
  const void *v42;
  CFTypeRef v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD, _QWORD);
  float v46;
  float v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v51;
  unsigned int v52;
  const void *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CFArrayRef theArray;
  float valuePtr;
  os_log_type_t type;
  unsigned int v62;
  CFTypeRef v63;
  CFTypeRef cf;
  CFArrayRef v65;
  CFArrayRef v66;
  int v67;
  const char *v68;
  __int16 v69;
  CFTypeRef v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v3 = 4294949706;
  v4 = a2 > 1.0 || a1 == 0;
  if (v4 || a2 < 0.0)
    return v3;
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&theArray);
  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
      && !volumeController_isBluetoothSharingMainVolumeSupported(theArray))
    {
      v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
      CMBaseObject = FigEndpointGetCMBaseObject();
      v32 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v32)
        v3 = v32(CMBaseObject, *MEMORY[0x1E0CA4320], v30);
      else
        v3 = 4294954514;
      if (v30)
        CFRelease(v30);
      goto LABEL_84;
    }
    CachedMainVolume = volumeController_getCachedMainVolume(a1);
    if (FVCUtilitiesIsVolumeDifferenceAboveThreshold(a2, CachedMainVolume))
    {
      volumeController_updateMainVolumeCache((uint64_t)a1, a2);
      v66 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&v66);
      if (!v66)
      {
LABEL_82:
        volumeController_postMainVolumeDidChangeNotification();
        goto LABEL_83;
      }
      if (CFArrayGetCount(v66) >= 1)
      {
        v8 = CFArrayGetValueAtIndex(v66, 0);
        if (!FigRoutingManagerIsEndpointOfType((uint64_t)v8))
        {
          if (volumeController_isBluetoothSharingMainVolumeSupported(v66))
          {
            v33 = volumeController_getCachedMainVolume(a1);
            if (!v66)
              goto LABEL_82;
            v34 = v33;
            Count = CFArrayGetCount(v66);
            if (Count < 1)
            {
              v38 = 0;
              v40 = 0.0;
            }
            else
            {
              v36 = Count;
              v37 = 0;
              v38 = 0;
              v58 = *MEMORY[0x1E0CA4258];
              v39 = *MEMORY[0x1E0C9AE00];
              v56 = *MEMORY[0x1E0CA4348];
              v40 = 0.0;
              do
              {
                v41 = CFArrayGetValueAtIndex(v66, v37);
                v42 = v41;
                if (v41)
                  v43 = CFRetain(v41);
                else
                  v43 = 0;
                v65 = 0;
                v44 = FigEndpointGetCMBaseObject();
                v45 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
                if (v45)
                  v45(v44, v58, v39, &v65);
                LODWORD(v63) = 0;
                volumeController_getVolumeForEndpoint(v42, &v63);
                v46 = volumeController_computeScaledSubEndpointVolume((uint64_t)a1, (uint64_t)v65, CachedMainVolume, v34, *(float *)&v63);
                v47 = v46;
                if (v46 > v40)
                {
                  v40 = v46;
                  v38 = v37;
                }
                volumeController_setVolumeForEndpoint(v42, v46);
                cf = 0;
                v48 = FigEndpointGetCMBaseObject();
                v49 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
                if (v49)
                  v49(v48, v56, v39, &cf);
                if (dword_1EE2B3E88)
                {
                  v62 = 0;
                  type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v51 = v62;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                    v52 = v51;
                  else
                    v52 = v51 & 0xFFFFFFFE;
                  if (v52)
                  {
                    v67 = 136316418;
                    v68 = "volumeController_updateIndividualVolumes";
                    v69 = 2114;
                    v70 = cf;
                    v71 = 2048;
                    v72 = *(float *)&v63;
                    v73 = 2048;
                    v74 = v47;
                    v75 = 2048;
                    v76 = CachedMainVolume;
                    v77 = 2048;
                    v78 = v34;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (v65)
                {
                  CFRelease(v65);
                  v65 = 0;
                }
                if (cf)
                {
                  CFRelease(cf);
                  cf = 0;
                }
                if (v43)
                  CFRelease(v43);
                ++v37;
              }
              while (v36 != v37);
            }
            if (!v66)
              goto LABEL_82;
            v53 = CFArrayGetValueAtIndex(v66, v38);
            volumeController_setVolumeForEndpoint(v53, v40);
          }
          goto LABEL_80;
        }
        v9 = volumeController_getCachedMainVolume(a1);
        v65 = 0;
        v10 = FigEndpointGetCMBaseObject();
        v11 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (!v11)
          goto LABEL_41;
        v12 = *MEMORY[0x1E0C9AE00];
        v11(v10, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v65);
        if (v65)
        {
          v13 = CFArrayGetCount(v65);
          if (v13 >= 1)
          {
            v14 = v13;
            v15 = 0;
            v57 = *MEMORY[0x1E0CA4258];
            v55 = *MEMORY[0x1E0CA4348];
            do
            {
              v16 = CFArrayGetValueAtIndex(v65, v15);
              v17 = v16;
              if (v16)
                v18 = CFRetain(v16);
              else
                v18 = 0;
              SubEndpointVolume = volumecontroller_getSubEndpointVolume((uint64_t)v18);
              cf = 0;
              v20 = FigEndpointGetCMBaseObject();
              v21 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
              if (v21)
                v21(v20, v57, v12, &cf);
              v63 = 0;
              v22 = FigEndpointGetCMBaseObject();
              v23 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
              if (v23)
                v23(v22, v55, v12, &v63);
              v24 = v9;
              if (v14 != 1)
                v24 = volumeController_computeScaledSubEndpointVolume((uint64_t)a1, (uint64_t)cf, CachedMainVolume, v9, SubEndpointVolume);
              volumeController_setVolumeForEndpoint(v17, v24);
              if (dword_1EE2B3E88)
              {
                v62 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v26 = v62;
                if (os_log_type_enabled(v25, type))
                  v27 = v26;
                else
                  v27 = v26 & 0xFFFFFFFE;
                if (v27)
                {
                  v28 = v63;
                  *(double *)&v29 = COERCE_DOUBLE(FigRoutingManagerGetEndpointManagerName((uint64_t)v18));
                  v67 = 136316674;
                  v68 = "volumeController_updateIndividualVolumes";
                  v69 = 2114;
                  v70 = v28;
                  v71 = 2114;
                  v72 = *(double *)&v29;
                  v73 = 2048;
                  v74 = SubEndpointVolume;
                  v75 = 2048;
                  v76 = v24;
                  v77 = 2048;
                  v78 = CachedMainVolume;
                  v79 = 2048;
                  v80 = v9;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if (v63)
              {
                CFRelease(v63);
                v63 = 0;
              }
              if (v18)
                CFRelease(v18);
              ++v15;
            }
            while (v14 != v15);
          }
LABEL_41:
          if (v65)
            CFRelease(v65);
        }
      }
LABEL_80:
      if (v66)
        CFRelease(v66);
      goto LABEL_82;
    }
  }
LABEL_83:
  v3 = 0;
LABEL_84:
  if (theArray)
    CFRelease(theArray);
  return v3;
}

float volumecontroller_getSubEndpointVolume(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  CFNumberRef number;
  float valuePtr;

  valuePtr = -1.0;
  if (!a1)
    return -1.0;
  number = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
  {
    v2(CMBaseObject, *MEMORY[0x1E0CA44A0], *MEMORY[0x1E0C9AE00], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      if (number)
        CFRelease(number);
    }
  }
  return valuePtr;
}

float volumeController_computeScaledSubEndpointVolume(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  float MainVolumeScaleFactorForEndpointID;

  MainVolumeScaleFactorForEndpointID = 1.0;
  if (a3 >= a5)
  {
    if (FVCUtilitiesIsFloatEquivalentToZero(a3))
      MainVolumeScaleFactorForEndpointID = 1.0;
    else
      MainVolumeScaleFactorForEndpointID = a5 / a3;
  }
  if (FVCUtilitiesIsFloatEquivalentToZero(a4) && !FVCUtilitiesIsFloatEquivalentToZero(a3))
  {
    FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID(a1, a2, MainVolumeScaleFactorForEndpointID);
  }
  else if (FVCUtilitiesIsFloatEquivalentToZero(a3) && !FVCUtilitiesIsFloatEquivalentToZero(a4))
  {
    MainVolumeScaleFactorForEndpointID = FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID(a1, a2);
  }
  return MainVolumeScaleFactorForEndpointID * a4;
}

uint64_t volumeController_setVolumeForEndpoint(const void *a1, float a2)
{
  uint64_t v2;
  BOOL v3;
  CFTypeRef v5;
  uint64_t v6;
  CFNumberRef v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v17;
  float valuePtr;

  valuePtr = a2;
  v2 = 4294949706;
  v3 = a2 > 1.0 || a1 == 0;
  if (!v3 && a2 >= 0.0)
  {
    v5 = CFRetain(a1);
    v6 = *MEMORY[0x1E0C9AE00];
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      v2 = v9(CMBaseObject, *MEMORY[0x1E0CA44A0], v7);
    else
      v2 = 4294954514;
    v17 = 0;
    FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1);
    v10 = *MEMORY[0x1E0CA4258];
    v11 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(v11, v10, v6, &v17);
    volumeController_postEndpointVolumeDidChangeNotification();
    cf = 0;
    v13 = FigEndpointGetCMBaseObject();
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
    {
      v14(v13, *MEMORY[0x1E0CA4348], v6, &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    if (v17)
    {
      CFRelease(v17);
      v17 = 0;
    }
    if (v7)
      CFRelease(v7);
    if (v5)
      CFRelease(v5);
  }
  return v2;
}

uint64_t volumeController_isAirPlayMainVolumeSupported()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef cf;
  CFArrayRef theArray;

  theArray = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
    goto LABEL_11;
  v2 = *MEMORY[0x1E0C9AE00];
  v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
    v7 = *MEMORY[0x1E0CA44A8];
    v8 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v5);
      cf = v6;
      v9 = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (v10)
        v10(v9, v7, v2, &cf);
      if (cf == v8)
        break;
      if (cf)
        CFRelease(cf);
      if (v4 == ++v5)
        goto LABEL_11;
    }
    if (v8)
      CFRelease(v8);
    v11 = 1;
  }
  else
  {
LABEL_11:
    v11 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return v11;
}

uint64_t volumeController_getAirPlayMainVolumeControlType()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  uint64_t SInt64;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v10;
  CFTypeRef v11;
  BOOL v12;
  CFTypeRef cf;
  CFArrayRef theArray;

  theArray = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
    goto LABEL_18;
  v2 = *MEMORY[0x1E0C9AE00];
  v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_18:
    SInt64 = 0;
    goto LABEL_19;
  }
  v4 = Count;
  SInt64 = 0;
  v6 = 0;
  v7 = *MEMORY[0x1E0CA44B0];
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v6);
    cf = 0;
    v8 = FigEndpointGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (!v9)
    {
      v11 = cf;
LABEL_14:
      if (v11)
        CFRelease(v11);
      goto LABEL_16;
    }
    v10 = v9(v8, v7, v2, &cf);
    v11 = cf;
    if (v10)
      v12 = 1;
    else
      v12 = cf == 0;
    if (v12)
      goto LABEL_14;
    SInt64 = FigCFNumberGetSInt64();
    if (SInt64 == 3)
      break;
    if (cf)
      CFRelease(cf);
LABEL_16:
    if (v4 == ++v6)
      goto LABEL_19;
  }
  if (cf)
    CFRelease(cf);
  SInt64 = 3;
LABEL_19:
  if (theArray)
    CFRelease(theArray);
  return SInt64;
}

uint64_t volumeController_doesEndpointHaveSameID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v2 = 0;
  if (a1 && a2)
  {
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
    v2 = FigCFEqual();
    if (cf)
      CFRelease(cf);
  }
  return v2;
}

uint64_t volumeController_setMuteForEndpoint(const void *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v18[23];

  v18[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294949706;
  v3 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (!a2)
    v3 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v4 = *v3;
  v5 = CFRetain(a1);
  if (v5)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      v8 = v7(CMBaseObject, *MEMORY[0x1E0CA42C0], v4);
    else
      v8 = 4294954514;
  }
  else
  {
    v8 = 0;
  }
  v18[0] = 0;
  FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1);
  v9 = *MEMORY[0x1E0CA4258];
  v10 = *MEMORY[0x1E0C9AE00];
  v11 = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(v11, v9, v10, v18);
  volumeController_postEndpointMuteByUserDidChangeNotification();
  cf = 0;
  v13 = FigEndpointGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(v13, *MEMORY[0x1E0CA4348], v10, &cf);
  if (dword_1EE2B3E88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v5)
    CFRelease(v5);
  if (v18[0])
    CFRelease(v18[0]);
  return v8;
}

uint64_t FigRoutingManagerGetFigEndpointFeatures(uint64_t a1, uint64_t a2)
{
  int ContextType;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  CFTypeRef v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;
  CFTypeRef cf;

  if (!a1)
    return 0;
  ContextType = FigRoutingManagerContextUtilities_GetContextType(a2);
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v5(CMBaseObject, *MEMORY[0x1E0CA4130], *MEMORY[0x1E0C9AE00], &cf);
  v6 = 0;
  switch(ContextType)
  {
    case 1:
      if (FigRoutingManagerIsEndpointOfType(a1))
      {
        v6 = FigEndpointGetSupportedFeatures() & 8 | 3;
        goto LABEL_23;
      }
      if (!FigRoutingManagerIsEndpointOfType(a1) && !FigRoutingManagerIsEndpointOfType(a1))
        goto LABEL_31;
      v11 = CMSMDeviceState_ItsAHomePod() == 0;
      v9 = FigEndpointGetSupportedFeatures() & 4 | (2 * v11);
      v10 = FigEndpointGetSupportedFeatures() & 8;
      goto LABEL_22;
    case 2:
    case 6:
      if (FigRoutingManagerIsEndpointOfType(a1) && (v7 = cf, cf == (CFTypeRef)*MEMORY[0x1E0C9AE50]))
      {
        v6 = 3;
      }
      else
      {
        if (FigRoutingManagerIsEndpointOfType(a1))
          v6 = 3;
        else
          v6 = 7;
LABEL_23:
        v7 = cf;
      }
      if (v7)
        CFRelease(v7);
      break;
    case 3:
      v8 = CMSMDeviceState_ItsAHomePod() == 0;
      v9 = FigEndpointGetSupportedFeatures() & 8 | (2 * v8);
      v10 = FigEndpointGetSupportedFeatures() & 4;
LABEL_22:
      v6 = v9 | v10;
      goto LABEL_23;
    case 4:
      if (FigRoutingManagerIsEndpointOfType(a1))
      {
        v6 = 3;
      }
      else if (FigRoutingManagerIsEndpointOfType(a1))
      {
        v6 = FigEndpointGetSupportedFeatures() & 8;
      }
      else if (FigRoutingManagerIsEndpointOfType(a1))
      {
        v13 = FigEndpointGetSupportedFeatures() & 8;
        v6 = FigEndpointGetSupportedFeatures() & 4 | v13;
      }
      else
      {
LABEL_31:
        v6 = 2;
      }
      goto LABEL_23;
    case 5:
      v6 = FigEndpointGetSupportedFeatures() & 4 | 2;
      goto LABEL_23;
    case 7:
    case 9:
      v6 = 16;
      goto LABEL_23;
    default:
      goto LABEL_23;
  }
  return v6;
}

__CFString *FigRoutingManagerCopyEndpointFeaturesAsString(char a1)
{
  __CFString *Mutable;
  __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if ((a1 & 1) != 0)
  {
    CFStringAppend(Mutable, CFSTR("screen"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (v3 && CFStringGetLength(v3) >= 1)
    v4 = CFSTR("+audio");
  else
    v4 = CFSTR("audio");
  CFStringAppend(v3, v4);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_14:
  if (v3 && CFStringGetLength(v3) >= 1)
    v5 = CFSTR("+playback");
  else
    v5 = CFSTR("playback");
  CFStringAppend(v3, v5);
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_19:
  if (v3 && CFStringGetLength(v3) >= 1)
    v6 = CFSTR("+music");
  else
    v6 = CFSTR("music");
  CFStringAppend(v3, v6);
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      return v3;
    goto LABEL_29;
  }
LABEL_24:
  if (v3 && CFStringGetLength(v3) >= 1)
    v7 = CFSTR("+control");
  else
    v7 = CFSTR("control");
  CFStringAppend(v3, v7);
  if ((a1 & 0x20) != 0)
  {
LABEL_29:
    if (v3 && CFStringGetLength(v3) >= 1)
      v8 = CFSTR("+low latency audio");
    else
      v8 = CFSTR("low latency audio");
    CFStringAppend(v3, v8);
  }
  return v3;
}

uint64_t FigRoutingManagerIsEndpointOfSubtype(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
    v2(CMBaseObject, *MEMORY[0x1E0CA43D8], *MEMORY[0x1E0C9AE00], &cf);
  v3 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v3;
}

BOOL FigRoutingManagerIsEndpointLocal(uint64_t a1)
{
  const void *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, const void **);
  _BOOL8 v4;
  const void *v6;

  if (!a1)
    return 0;
  v1 = (const void *)*MEMORY[0x1E0C9AE40];
  v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E0CA42A8], *MEMORY[0x1E0C9AE00], &v6);
    v1 = v6;
  }
  v4 = v1 == (const void *)*MEMORY[0x1E0C9AE50];
  if (v1)
    CFRelease(v1);
  return v4;
}

BOOL FigRoutingManagerIsClusterEndpoint(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 v3;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
    v2(CMBaseObject, *MEMORY[0x1E0CA43D8], *MEMORY[0x1E0C9AE00], &cf);
  v3 = FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
  if (cf)
    CFRelease(cf);
  return v3;
}

BOOL FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay(uint64_t a1)
{
  _BOOL4 IsEndpointLocal;
  CFTypeRef v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef cf;

  IsEndpointLocal = FigRoutingManagerIsEndpointLocal(a1);
  v2 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
  {
    v4(CMBaseObject, *MEMORY[0x1E0CA42D8], *MEMORY[0x1E0C9AE00], &cf);
    v5 = cf;
    if (!cf)
      return v5 == v2 && IsEndpointLocal;
    goto LABEL_3;
  }
  v5 = v2;
  if (v2)
LABEL_3:
    CFRelease(v5);
  return v5 == v2 && IsEndpointLocal;
}

const __CFArray *FigRoutingManagerDoEndpointsContainLocalAirPlayEndpoint(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;

  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v3 = Count;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
        if (FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay((uint64_t)ValueAtIndex))
          break;
        if (v3 == ++v4)
          return 0;
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

const __CFArray *FigRoutingManagerDoEndpointsContainOdeonEndpoint(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef cf;

  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v3 = Count;
      v4 = 0;
      v5 = *MEMORY[0x1E0CA43D8];
      v6 = *MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
        cf = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v9)
          v9(CMBaseObject, v5, v6, &cf);
        if (FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex) && FigCFEqual())
          break;
        if (cf)
          CFRelease(cf);
        if (v3 == ++v4)
          return 0;
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

BOOL FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v6;
  _BOOL8 v7;
  int v8;
  CFTypeRef cf;
  CFTypeRef v11;

  if (!a1)
    return 0;
  v11 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v1 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
    v3(CMBaseObject, *MEMORY[0x1E0CA42A8], v1, &v11);
  cf = 0;
  v4 = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v5(v4, *MEMORY[0x1E0CA43D8], v1, &cf);
    v6 = cf;
  }
  else
  {
    v6 = 0;
  }
  if (v11 != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    v7 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_13;
  }
  v8 = FigCFEqual();
  v6 = cf;
  if (v8)
  {
    v7 = 1;
    if (!cf)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = FigCFEqual() != 0;
  v6 = cf;
  if (cf)
  {
LABEL_13:
    CFRelease(v6);
    cf = 0;
  }
LABEL_14:
  if (v11)
    CFRelease(v11);
  return v7;
}

BOOL FigRoutingManagerIsClusterLocalEndpoint(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v6;
  _BOOL8 v7;
  int v8;
  int v9;
  CFTypeRef cf;
  CFTypeRef v12;

  if (!a1)
    return 0;
  v12 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v1 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
    v3(CMBaseObject, *MEMORY[0x1E0CA42A8], v1, &v12);
  cf = 0;
  v4 = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v5(v4, *MEMORY[0x1E0CA43D8], v1, &cf);
    v6 = cf;
  }
  else
  {
    v6 = 0;
  }
  if (v12 != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    v7 = 0;
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  v8 = FigCFEqual();
  v6 = cf;
  if (v8 || (v9 = FigCFEqual(), v6 = cf, v9))
  {
    v7 = 1;
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  v7 = FigCFEqual() != 0;
  v6 = cf;
  if (cf)
  {
LABEL_14:
    CFRelease(v6);
    cf = 0;
  }
LABEL_15:
  if (v12)
    CFRelease(v12);
  return v7;
}

BOOL FigRoutingManagerIsLocalHomeTheaterEndpoint(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, const void **);
  const void *v6;
  _BOOL8 v7;
  const void *v9;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v1 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
    v3(CMBaseObject, *MEMORY[0x1E0CA42A8], v1, &cf);
  v9 = 0;
  v4 = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v5(v4, *MEMORY[0x1E0CA43D8], v1, &v9);
    v6 = v9;
  }
  else
  {
    v6 = 0;
  }
  if (cf != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    v7 = 0;
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  v7 = FigCFEqual() != 0;
  v6 = v9;
  if (v9)
  {
LABEL_10:
    CFRelease(v6);
    v9 = 0;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v7;
}

BOOL FigRoutingManagerIsEndpointWHAGroupable(uint64_t a1)
{
  const void *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, const void **);
  _BOOL8 v4;
  const void *v6;

  if (!a1)
    return 0;
  v1 = (const void *)*MEMORY[0x1E0C9AE40];
  v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E0CA42E8], *MEMORY[0x1E0C9AE00], &v6);
    v1 = v6;
  }
  v4 = v1 == (const void *)*MEMORY[0x1E0C9AE50];
  if (v1)
    CFRelease(v1);
  return v4;
}

BOOL FigRoutingManagerIsEndpointLowLatencyAirPlay(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v3;
  _BOOL8 v4;
  CFTypeRef cf;

  if (!FigRoutingManagerIsEndpointOfType(a1))
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v2)
  {
    v2(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], &cf);
    v3 = (const __CFNumber *)cf;
  }
  else
  {
    v3 = 0;
  }
  v4 = CMSMVAUtility_GetPortFromCFNumber(v3) == 1885433964;
  if (cf)
    CFRelease(cf);
  return v4;
}

BOOL FigRoutingManagerIsEndpointActivated(uint64_t a1)
{
  const void *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, const void **);
  _BOOL8 v4;
  const void *v6;

  if (!a1)
    return 0;
  v1 = (const void *)*MEMORY[0x1E0C9AE40];
  v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E0CA4260], *MEMORY[0x1E0C9AE00], &v6);
    v1 = v6;
  }
  v4 = v1 == (const void *)*MEMORY[0x1E0C9AE50];
  if (v1)
    CFRelease(v1);
  return v4;
}

uint64_t FigRoutingManagerCopyRoutingContextUUIDForEndpoint(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v9;

  v9 = 0;
  if (FigRoutingManagerIsEndpointWHAGroupable(a1) && FigRoutingManagerIsEndpointOfType(a1))
  {
    v2 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (v2)
    {
      v3 = v2;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v5)
        v5(CMBaseObject, *MEMORY[0x1E0CA4398], *MEMORY[0x1E0C9AE00], &v9);
      CFRelease(v3);
    }
  }
  else if (a1)
  {
    v6 = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
      v7(v6, *MEMORY[0x1E0CA4398], *MEMORY[0x1E0C9AE00], &v9);
  }
  return v9;
}

BOOL FigRoutingManagerIsEndpointBluetoothShareable(uint64_t a1)
{
  const void *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, const void **);
  _BOOL8 v4;
  const void *v6;

  if (!a1)
    return 0;
  v1 = (const void *)*MEMORY[0x1E0C9AE40];
  v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E0CA4270], *MEMORY[0x1E0C9AE00], &v6);
    v1 = v6;
  }
  v4 = v1 == (const void *)*MEMORY[0x1E0C9AE50];
  if (v1)
    CFRelease(v1);
  return v4;
}

BOOL FigRoutingManagerAreAllEndpointsBluetoothShareable(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL8 result;
  CFTypeRef cf[23];

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 1;
  v3 = Count;
  v4 = 0;
  v5 = *MEMORY[0x1E0CA4348];
  v6 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      cf[0] = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v9)
        v9(CMBaseObject, v5, v6, cf);
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    result = FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)ValueAtIndex);
    if (!result)
      break;
    if (v3 == ++v4)
      return 1;
  }
  return result;
}

uint64_t FigRoutingManagerGetEndpointManagerName(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v3;
  uint64_t *v4;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
    v2(CMBaseObject, *MEMORY[0x1E0CA4468], *MEMORY[0x1E0C9AE00], &cf);
  if (FigCFEqual())
  {
    v4 = (uint64_t *)MEMORY[0x1E0CA3A70];
LABEL_15:
    v3 = *v4;
    goto LABEL_16;
  }
  if (FigCFEqual())
  {
    v4 = (uint64_t *)MEMORY[0x1E0CA3A60];
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v4 = (uint64_t *)MEMORY[0x1E0CA3A58];
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v4 = (uint64_t *)MEMORY[0x1E0CA3A68];
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v4 = (uint64_t *)MEMORY[0x1E0CA3A80];
    goto LABEL_15;
  }
  if (FigCFEqual())
    v3 = *MEMORY[0x1E0CA3A78];
  else
    v3 = 0;
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v3;
}

CFMutableDictionaryRef FigRoutingManagerCreateEndpointDelegateContext()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  return Mutable;
}

void FigRoutingManagerRemoveCachedDelegateContext(uint64_t a1)
{
  _QWORD *SharedManager;
  CFDictionaryRef v3;
  _QWORD *v4;
  CFDictionaryRef v5;
  const void *v6;
  const void *v7;

  SharedManager = FigRoutingManagerGetSharedManager();
  MEMORY[0x1940352F8](SharedManager[7]);
  v3 = (CFDictionaryRef)SharedManager[8];
  if (!v3)
    goto LABEL_18;
  CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 2), CFSTR("EndpointDelegateContextKey_RoutingContextUUID"));
  v4 = 0;
  while (*((_QWORD *)v3 + 1) != a1 || !FigCFEqual())
  {
    v4 = v3;
    v3 = *(CFDictionaryRef *)v3;
    if (!v3)
      goto LABEL_18;
  }
  v5 = *(CFDictionaryRef *)v3;
  if (v4)
  {
    *v4 = v5;
    if (*(_QWORD *)v3)
    {
LABEL_10:
      v6 = (const void *)*((_QWORD *)v3 + 1);
      if (v6)
        CFRelease(v6);
      v7 = (const void *)*((_QWORD *)v3 + 2);
      if (v7)
        CFRelease(v7);
      free(v3);
LABEL_18:
      JUMPOUT(0x194035304);
    }
  }
  else
  {
    SharedManager[8] = v5;
    if (v5)
      goto LABEL_10;
  }
  SharedManager[9] = v4;
  goto LABEL_10;
}

void FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache(const void *a1, const void *a2, const void *a3)
{
  void *SharedManager;
  NSObject *v7;
  _QWORD v8[7];

  SharedManager = FigRoutingManagerGetSharedManager();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v7 = *((_QWORD *)SharedManager + 1);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 922, 0, 0, v7, (uint64_t)v8);
}

uint64_t FigRoutingManagerIsEndpointPresentInAggregate(const void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  CFArrayRef theArray;

  v2 = 0;
  if (a1 && a2)
  {
    theArray = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v5)
      goto LABEL_9;
    v5(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
    if (!theArray)
      return 0;
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      while (CFArrayGetValueAtIndex(theArray, v8) != a1)
      {
        if (v7 == ++v8)
          goto LABEL_9;
      }
      v2 = 1;
    }
    else
    {
LABEL_9:
      v2 = 0;
    }
    if (theArray)
      CFRelease(theArray);
  }
  return v2;
}

CFMutableDictionaryRef FigRoutingManagerCreateEndpointActivateOptions(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable;
  int IsCrossfadePlaybackSupported;
  const void *Float32;
  const void *v9;
  CFTypeRef cf[17];

  Mutable = 0;
  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (FigCFDictionaryGetBooleanIfPresent())
      FigCFDictionarySetValue();
    if (FigCFDictionaryGetBooleanIfPresent())
      FigCFDictionarySetValue();
    if (FigCFDictionaryGetBooleanIfPresent())
      FigCFDictionarySetValue();
    FigCFDictionaryGetBooleanIfPresent();
    IsCrossfadePlaybackSupported = FigRoutingManagerIsCrossfadePlaybackSupported();
    FigCFDictionarySetValue();
    if (IsCrossfadePlaybackSupported)
    {
      CMSMUtility_GetFadeInDurationForPlaybackHandoff();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      FigCFDictionarySetValue();
      if (Float32)
        CFRelease(Float32);
    }
    v9 = (const void *)FigRoutingManagerContextUtilities_CopyHijackID(a2);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    switch(FigRoutingManagerContextUtilities_GetContextType(a2))
    {
      case 1u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1))
          goto LABEL_18;
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)cf);
          if (cf[0])
            CFRelease(cf[0]);
        }
        break;
      case 2u:
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          goto LABEL_18;
        }
        break;
      case 3u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1))
          goto LABEL_18;
        break;
      case 4u:
      case 5u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1))
          goto LABEL_18;
        break;
      case 6u:
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          if (a3)
          {
            CFDictionaryGetValue(a3, CFSTR("clientPID"));
            goto LABEL_18;
          }
        }
        break;
      case 7u:
        if (FigRoutingManagerIsEndpointOfType(a1))
LABEL_18:
          FigCFDictionarySetValue();
        break;
      default:
        break;
    }
    if (v9)
      CFRelease(v9);
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateEndpointActivateCompletionContext(const void *a1, const void *a2, const void *a3, const void *a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  CFTypeRef v12;
  uint64_t result;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  id v17;

  if (!a5)
    return 4294954296;
  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x600407DD51EA1uLL);
  if (!v10)
    return 4294954295;
  v11 = v10;
  if (a4)
    v12 = CFRetain(a4);
  else
    v12 = 0;
  v11[3] = v12;
  if (a1)
    v14 = CFRetain(a1);
  else
    v14 = 0;
  *v11 = v14;
  if (a2)
    v15 = CFRetain(a2);
  else
    v15 = 0;
  v11[1] = v15;
  if (a3)
    v16 = CFRetain(a3);
  else
    v16 = 0;
  v11[2] = v16;
  v17 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  result = 0;
  v11[4] = v17;
  *a5 = v11;
  return result;
}

void FigRoutingManagerDestroyEndpointActivateCompletionContext(CFTypeRef *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;

  if (a1)
  {
    v2 = a1[3];
    if (v2)
      CFRelease(v2);
    if (*a1)
      CFRelease(*a1);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    v5 = a1[4];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

uint64_t FigRoutingManagerEndpointActivateWithCompletionCallback(const void *a1, uint64_t a2, const __CFDictionary *a3, void (*a4)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t *), uint64_t *a5)
{
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t (*v18)(const void *, uint64_t, const __CFDictionary *, _QWORD, uint64_t *);
  CFTypeRef v20;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v20 = 0;
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v20);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerSetupEndpointCentralForCarPlay(a1);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
           || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      if (a5)
      {
        v14 = *a5;
        v15 = a5[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      cf[0] = 0;
      v16 = FigEndpointGetCMBaseObject();
      v17 = *(CFTypeRef *)(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v17)
      {
        ((void (*)(uint64_t, _QWORD, _QWORD, CFTypeRef *))v17)(v16, *MEMORY[0x1E0CA4218], *MEMORY[0x1E0C9AE00], cf);
        v17 = cf[0];
      }
      FigRoutingManagerSetMirroringModeOnBKSDisplayServices(a3, v14, v15, v17 == (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      if (cf[0])
        CFRelease(cf[0]);
    }
    v18 = *(uint64_t (**)(const void *, uint64_t, const __CFDictionary *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v18)
      v13 = v18(a1, a2, a3, a4, a5);
    else
      v13 = 4294954514;
  }
  else
  {
    if (a4)
      a4(0, a2, 0, 0, a5);
    v13 = 0;
  }
  if (v20)
    CFRelease(v20);
  return v13;
}

__CFDictionary *FigRoutingManagerCreateEndpointDeactivateOptions(uint64_t a1, uint64_t a2)
{
  __CFDictionary *Mutable;
  int IsCrossfadePlaybackSupported;
  const void *Float32;

  Mutable = 0;
  if (a1 && a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (FigCFDictionaryGetBooleanIfPresent())
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3950], (const void *)*MEMORY[0x1E0C9AE40]);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    IsCrossfadePlaybackSupported = FigRoutingManagerIsCrossfadePlaybackSupported();
    FigCFDictionarySetValue();
    if (IsCrossfadePlaybackSupported)
    {
      CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      FigCFDictionarySetValue();
      if (Float32)
        CFRelease(Float32);
    }
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateEndpointDeactivateCompletionContext(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t result;
  id v8;

  if (!a2)
    return 4294954296;
  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040CF05A765uLL);
  if (!v4)
    return 4294954295;
  v5 = v4;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  *v5 = v6;
  v8 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  result = 0;
  v5[2] = v8;
  *a2 = v5;
  return result;
}

void FigRoutingManagerDestroyEndpointDeactivateCompletionContext(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t FigRoutingManagerEndpointDeactivateWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v13)(uint64_t, _QWORD);
  uint64_t (*v14)(uint64_t, uint64_t, void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t);
  uint64_t v15;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType(a1))
    {
      v13 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v13)
        v13(a1, 0);
    }
    v14 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v14)
      v15 = v14(a1, a3, a4, a5);
    else
      v15 = 4294954514;
  }
  else
  {
    if (a4)
      a4(0, a2, 0, 0, a5);
    v15 = 0;
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v15;
}

CFMutableDictionaryRef FigRoutingManagerCreateSubEndpointAddOptions(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  const void *v4;

  Mutable = 0;
  if (a1 && a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (FigCFDictionaryGetBooleanIfPresent())
      FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    v4 = (const void *)FigRoutingManagerContextUtilities_CopyHijackID(a2);
    FigCFDictionarySetValue();
    if (v4)
      CFRelease(v4);
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateAggregateAddEndpointCompletionContext(const void *a1, const void *a2, const void *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t result;
  CFTypeRef v12;
  CFTypeRef v13;
  id v14;

  if (!a4)
    return 4294954296;
  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x60040902580DDuLL);
  if (!v8)
    return 4294954295;
  v9 = v8;
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  *v9 = v10;
  if (a2)
    v12 = CFRetain(a2);
  else
    v12 = 0;
  v9[1] = v12;
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  v9[2] = v13;
  v14 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  result = 0;
  v9[3] = v14;
  *a4 = v9;
  return result;
}

void FigRoutingManagerDestroyAggregateAddEndpointCompletionContext(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    v5 = a1[3];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

uint64_t FigRoutingManagerAggregateAddLocalAirPlayEndpoint(const void *a1, void *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  const void *v7;
  id IsAirPlayDaemonEnabled;
  uint64_t v9;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  uint64_t (*v18)(id, const void *, _QWORD, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *);
  uint64_t v19;
  NSObject *v21;
  void *v22;
  id v23[21];

  v23[20] = *(id *)MEMORY[0x1E0C80C00];
  v23[0] = a2;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2) || a2)
  {
    v5 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (!v5)
    {
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    v7 = v5;
    IsAirPlayDaemonEnabled = (id)MX_FeatureFlags_IsAirPlayDaemonEnabled(v5, v6);
    if ((_DWORD)IsAirPlayDaemonEnabled && !a2)
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v22) = 0;
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerCreateAndActivateAggregateEndpointForContext(a1);
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)v23);
      IsAirPlayDaemonEnabled = v23[0];
    }
    if (MX_FeatureFlags_IsAirPlayDaemonEnabled(IsAirPlayDaemonEnabled, v9)
      && !FigRoutingManagerIsEndpointActivated((uint64_t)v23[0]))
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v22) = 0;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerActivateEndpoint(v23[0], a1, 0, 0);
    }
    v13 = v23[0];
    if (!v23[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
      v13 = 0;
    if (!FigRoutingManagerIsEndpointPresentInAggregate(v7, (uint64_t)v13))
    {
      if (FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint())
      {
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v7)
        && FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
      {
        if (dword_1EE2B3E28)
        {
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, CFSTR("configUpdateReasonEndedSuccess"));
      }
      v22 = 0;
      FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a1, 0, 0, &v22);
      v16 = v23[0];
      if (!v23[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v16 = 0;
      v17 = v22;
      v18 = *(uint64_t (**)(id, const void *, _QWORD, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 8);
      if (!v18
        || (v19 = v18(v16, v7, 0, FigRoutingManagerAggregateAddEndpointCompletionCallback, v17), (_DWORD)v19 == -12782))
      {
        FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v22);
        v4 = 4294954514;
        goto LABEL_35;
      }
      v4 = v19;
      if ((_DWORD)v19 || !dword_1EE2B3E28)
        goto LABEL_35;
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = 0;
LABEL_35:
    CFRelease(v7);
    return v4;
  }
  return 0;
}

uint64_t FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex v2;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v5;
  int v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray;
  CFTypeRef cf;
  CFTypeRef v12[21];

  v12[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v12[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)v12);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v12[0], (uint64_t)&cf);
  theArray = 0;
  if (cf)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v1)
      v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
  }
  v2 = 0;
  do
  {
    Count = (CFIndex)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (v2 >= Count)
    {
      v7 = 0;
      goto LABEL_16;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
  }
  while (!FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex));
  v5 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v5 = 0;
  v6 = FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)v5, ValueAtIndex, v12[0], 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
  v7 = 1;
  if (!v6 && dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v7 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_16:
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v12[0])
    CFRelease(v12[0]);
  return v7;
}

void FigRoutingManagerAggregateAddEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  double v18;
  float v19;
  void *SharedManager;
  id v21;
  NSObject *v22;
  _QWORD v23[12];
  int v24;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    CFRetain(cf);
    if (a1)
      CFRetain(a1);
    if (*(_QWORD *)a6)
      v12 = CFRetain(*(CFTypeRef *)a6);
    else
      v12 = 0;
    v14 = *(const void **)(a6 + 8);
    if (v14)
      v15 = CFRetain(v14);
    else
      v15 = 0;
    v16 = *(const void **)(a6 + 16);
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    objc_msgSend(*(id *)(a6 + 24), "timeIntervalSinceNow");
    v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    v21 = objc_alloc_init(MEMORY[0x1E0C99D68]);
    v22 = *((_QWORD *)SharedManager + 1);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __FigRoutingManagerAggregateAddEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E309C538;
    v23[4] = v21;
    v23[5] = cf;
    v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    v25 = v19;
    v23[8] = v12;
    v23[9] = a1;
    v23[10] = v15;
    v23[11] = v17;
    MXDispatchAsync((uint64_t)"FigRoutingManagerAggregateAddEndpointCompletionCallback", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 1812, 0, 0, v22, (uint64_t)v23);
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t FigRoutingManagerRemoveEndpointFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t FigEndpoint;
  CFTypeRef v13;
  const __CFAllocator *v14;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v17;
  __CFDictionary *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v20)(const void *, _QWORD);
  __CFDictionary *EndpointDeactivateOptions;
  void *v22;
  uint64_t (*v23)(uint64_t, const void *, _QWORD, uint64_t, void *);
  uint64_t v24;
  CFTypeRef cf;
  CFTypeRef v27;
  void *v28[21];

  v28[19] = *(void **)MEMORY[0x1E0C80C00];
  FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v28[0] = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, v28);
  FigRoutingManagerCrossfadePlayback();
  if (FigEndpoint)
  {
    v13 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v27 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v16 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v16 || (v16(CMBaseObject, *MEMORY[0x1E0CA42D8], v14, &v27), v17 = v27, v27 == v13))
    {
      if (FigRoutingManagerAggregateShouldEndpointRemovalInterruptSystemMusicSessions(a1, a2, (uint64_t *)v28[0]))
      {
        cf = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
        Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("currentRouteChanged_ShouldPause"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf, (uint64_t)CFSTR("currentRouteChanged"), (uint64_t)Mutable);
        if (Mutable)
          CFRelease(Mutable);
        if (cf)
          CFRelease(cf);
      }
      FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)a2);
      if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
        FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(a1, a2);
      v17 = v27;
    }
    if (v17)
      CFRelease(v17);
  }
  v20 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v20)
    v20(a2, 0);
  EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions((uint64_t)a2, (uint64_t)a3);
  v22 = v28[0];
  v23 = *(uint64_t (**)(uint64_t, const void *, _QWORD, uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 32)
                                                                                 + 16);
  if (!v23 || (v24 = v23(a1, a2, 0, a6, v22), (_DWORD)v24 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v28[0]);
    v24 = 4294954514;
  }
  if (EndpointDeactivateOptions)
    CFRelease(EndpointDeactivateOptions);
  return v24;
}

void FigRoutingManagerAggregateRemoveEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  double v18;
  float v19;
  void *SharedManager;
  id v21;
  NSObject *v22;
  _QWORD v23[13];
  int v24;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    CFRetain(cf);
    if (a1)
      CFRetain(a1);
    if (*(_QWORD *)a6)
      v12 = CFRetain(*(CFTypeRef *)a6);
    else
      v12 = 0;
    v14 = *(const void **)(a6 + 8);
    if (v14)
      v15 = CFRetain(v14);
    else
      v15 = 0;
    v16 = *(const void **)(a6 + 16);
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    objc_msgSend(*(id *)(a6 + 24), "timeIntervalSinceNow");
    v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    v21 = objc_alloc_init(MEMORY[0x1E0C99D68]);
    v22 = *((_QWORD *)SharedManager + 1);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __FigRoutingManagerAggregateRemoveEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E309BDF0;
    v23[4] = v21;
    v23[5] = cf;
    v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    v25 = v19;
    v23[8] = v12;
    v23[9] = v17;
    v23[10] = v15;
    v23[11] = a1;
    v23[12] = a6;
    MXDispatchAsync((uint64_t)"FigRoutingManagerAggregateRemoveEndpointCompletionCallback", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2366, 0, 0, v22, (uint64_t)v23);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
}

uint64_t FigRoutingManagerAddEndpointToAggregate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t FigEndpoint;
  uint64_t v13;
  uint64_t Value;
  CFMutableDictionaryRef EndpointActivateOptions;
  const void *MutableCopy;
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t, const void *, uint64_t, void *);
  uint64_t v19;
  void *v21;

  FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  if (!FigRoutingManagerIsEndpointActivated(FigEndpoint))
  {
    v13 = FigEndpointAggregateGetFigEndpoint();
    FigRoutingManager_iOSActivateEndpoint(v13, a3, 0, 0);
  }
  Value = FigCFDictionaryGetValue();
  FigRoutingManager_SetAuthorizationOnEndpoint(a2, Value);
  v21 = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, &v21);
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions(a2, (uint64_t)a3, (const __CFDictionary *)a4);
  FigRoutingManagerCrossfadePlayback();
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  v17 = v21;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 32)
                                                                                  + 8);
  if (!v18 || (v19 = v18(a1, a2, MutableCopy, a6, v17), (_DWORD)v19 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v21);
    v19 = 4294954514;
  }
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
  return v19;
}

uint64_t FigRoutingManager_SetAuthorizationOnEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t);
  _QWORD *v9;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
  {
LABEL_11:
    v6 = 4294954514;
    goto LABEL_12;
  }
  v5 = v4(CMBaseObject, *MEMORY[0x1E0CA4128], *MEMORY[0x1E0C9AE00], &cf);
  v6 = v5;
  if (a2 && !(_DWORD)v5)
  {
    if (FigCFEqual())
    {
      v7 = FigEndpointGetCMBaseObject();
      v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v8)
      {
        v9 = (_QWORD *)MEMORY[0x1E0CA4378];
LABEL_10:
        v6 = v8(v7, *v9, a2);
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    if (FigCFEqual())
    {
      v7 = FigEndpointGetCMBaseObject();
      v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v8)
      {
        v9 = (_QWORD *)MEMORY[0x1E0CA4370];
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    v6 = 0;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t FigRoutingManagerRetryAddingEndpointToAggregate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  void *SharedManager;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  dispatch_time_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD block[12];
  os_log_type_t type;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  CFTypeRef cf[23];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (cf[0])
    CFRetain(cf[0]);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  if (a5)
    CFRetain(a5);
  SharedManager = FigRoutingManagerGetSharedManager();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  if (dword_1EE2B3E28)
  {
    v22 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v16 = dispatch_time(0, 1000000000);
  v17 = *((_QWORD *)SharedManager + 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigRoutingManagerRetryAddingEndpointToAggregate_block_invoke;
  block[3] = &unk_1E309C560;
  block[4] = &v23;
  block[5] = cf[0];
  block[6] = a1;
  block[7] = a2;
  block[8] = a3;
  block[9] = a4;
  block[10] = a5;
  block[11] = a6;
  dispatch_after(v16, v17, block);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v18 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(&v23, 8);
  return v18;
}

void sub_1936D6E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerHandleAddEndpointCompletionCallbackError(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  __CFString **v10;

  if (a4 <= -17601)
  {
    if (a4 != -17604)
    {
      if (a4 == -17601)
      {
        v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_9:
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(a5, a1, (uint64_t)a2, (uint64_t)*v10, a6);
        return;
      }
      goto LABEL_10;
    }
LABEL_8:
    v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUserCancelled;
    goto LABEL_9;
  }
  if (a4 == -16728)
    goto LABEL_8;
  if (a4 == -17600)
  {
    v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorizedNoPrompt;
    goto LABEL_9;
  }
LABEL_10:
  FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(a5, a1, (uint64_t)a2, (uint64_t)CFSTR("configUpdateReasonEndedFailed"), a6);
  if (FigRoutingManagerContextUtilities_GetContextType(a5) != 9)
    FigRoutingManager_HandleEndpointFailed(a2, a4, a3, 0);
}

void FigRoutingManager_HandleEndpointFailed(const void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  const __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFDictionary *v14;
  const void *SInt32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v18[17];

  v18[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    v8 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v18[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4258], v8, v18);
    cf = 0;
    v12 = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(v12, *MEMORY[0x1E0CA4348], v8, &cf);
    v14 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)a1, 0);
    FigCFDictionarySetValue();
    if (v14)
      CFRelease(v14);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (a2 <= -17603)
    {
      if (a2 == -71891 || a2 == -17609 || a2 == -17608)
        goto LABEL_26;
    }
    else if (a2 > -15583)
    {
      if (a2 == -15582 || a2 == -15581)
        goto LABEL_26;
    }
    else if (a2 == -17602 || a2 == -16607)
    {
LABEL_26:
      FigCFDictionarySetValue();
LABEL_27:
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigEndpointUIAgentHelper_ShowError(Mutable);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v18[0])
      {
        CFRelease(v18[0]);
        v18[0] = 0;
      }
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_33;
    }
    FigCFDictionarySetValue();
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    FigCFDictionarySetValue();
    if (SInt32)
      CFRelease(SInt32);
    goto LABEL_27;
  }
LABEL_33:
  if (a4)
    FigRoutingManager_iOSDeactivateEndpoint(a1, a3);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void FigRoutingMangerDeactivateAggregateEndpointIfNecessary(uint64_t a1, uint64_t a2)
{
  int IsAirPlayDaemonEnabled;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray;
  CFArrayRef v9;
  uint64_t v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  IsAirPlayDaemonEnabled = MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2);
  if (a1 && a2 && IsAirPlayDaemonEnabled)
  {
    v9 = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(a1, a2, (uint64_t)&v9);
    theArray = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v6
      || (v6(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray), !theArray)
      || !CFArrayGetCount(theArray))
    {
      if (!v9 || !CFArrayGetCount(v9))
      {
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v10[0] = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint(a1, a2, (uint64_t)v10);
        FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(a1, a2, v10[0]);
        FigEndpointDeactivate();
      }
    }
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
    if (v9)
      CFRelease(v9);
  }
}

uint64_t *FigRoutingManagerAggregateShouldEndpointRemovalInterruptSystemMusicSessions(uint64_t a1, const void *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray[18];

  v3 = a3;
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (a3)
  {
    FigRoutingManagerContextUtilities_GetContextType(*a3);
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v3 = 0;
    if (a1 && a2)
    {
      theArray[0] = 0;
      FigEndpointAggregateGetFigEndpoint();
      CMBaseObject = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v7
        || (v7(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], theArray), !theArray[0])
        || CFArrayGetCount(theArray[0]) != 1
        || !FigRoutingManagerIsEndpointPresentInAggregate(a2, a1))
      {
        v3 = 0;
      }
      if (theArray[0])
        CFRelease(theArray[0]);
    }
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v3;
}

CFMutableDictionaryRef FigRoutingManagerCopyAuthInfoForEndpoint(uint64_t a1)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v15;

  if (!a1)
    return 0;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFEqual();
  FigCFDictionarySetValue();
  v15 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v5(CMBaseObject, *MEMORY[0x1E0CA4258], v2, &v15);
  cf = 0;
  v6 = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(v6, *MEMORY[0x1E0CA4348], v2, &cf);
  v8 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(a1, 0);
  v13 = 0;
  v9 = *MEMORY[0x1E0CA4310];
  v10 = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(v10, v9, v2, &v13);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (v8)
    CFRelease(v8);
  if (v13)
    CFRelease(v13);
  return Mutable;
}

void FigRoutingManager_HandleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  CFMutableDictionaryRef v18;
  uint64_t CMBaseObject;
  void (*v20)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  NSObject *v23;
  CFTypeRef cf;
  os_log_type_t type[8];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  if (dword_1EE2B3E28)
  {
    v26 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  cf = 0;
  *(_QWORD *)type = 0;
  v12 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!FigRoutingManagerIsEndpointOfType(a1) && !FigRoutingManagerIsClusterEndpoint(a1))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v20)
      v20(CMBaseObject, *MEMORY[0x1E0CA4348], v12, &cf);
    v21 = FigEndpointGetCMBaseObject();
    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v22)
      v22(v21, *MEMORY[0x1E0CA4258], v12, type);
    v18 = FigRoutingManagerCopyAuthInfoForEndpoint(a1);
    FigCFDictionarySetValue();
    *((_QWORD *)&v28 + 1) = a1;
    if (!dword_1EE2B3E28)
      goto LABEL_22;
LABEL_21:
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_22;
  }
  if (!a2)
  {
    if (Mutable)
    {
      CFRelease(Mutable);
      Mutable = 0;
    }
    v18 = 0;
    goto LABEL_22;
  }
  v14 = FigEndpointGetCMBaseObject();
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v15)
    v15(v14, *MEMORY[0x1E0CA4348], v12, &cf);
  v16 = FigEndpointGetCMBaseObject();
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v17)
    v17(v16, *MEMORY[0x1E0CA4258], v12, type);
  v18 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
  FigCFDictionarySetValue();
  *((_QWORD *)&v28 + 1) = a2;
  if (dword_1EE2B3E28)
    goto LABEL_21;
LABEL_22:
  *(_QWORD *)&v27 = v18;
  *((_QWORD *)&v27 + 1) = Mutable;
  *(_QWORD *)&v29 = a6;
  *((_QWORD *)&v29 + 1) = a7;
  *(_QWORD *)&v28 = *(_QWORD *)type;
  FigEndpointAuthRequestHandler_ProcessRequest(&v27);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
  if (*(_QWORD *)type)
    CFRelease(*(CFTypeRef *)type);
}

void FigRoutingManagerRemoveAllSubEndpointsFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5)
{
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  int IsMemberOfClass;
  uint64_t v17;
  CFArrayRef theArray;

  theArray = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
  {
    v11(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
    if (!theArray)
      return;
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (!a1
          || (FigEndpointAggregateGetClassID(),
              IsMemberOfClass = CMBaseObjectIsMemberOfClass(),
              v17 = a1,
              !IsMemberOfClass))
        {
          v17 = 0;
        }
        if (!FigRoutingManagerRemoveEndpointFromAggregate(v17, ValueAtIndex, a2, a3, a4, a5))
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("removeSubEndpoints: Removed endpoint with ID from aggregate: "), (uint64_t)ValueAtIndex, 0, 1);
      }
    }
  }
  if (theArray)
    CFRelease(theArray);
}

void FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  NSObject *DataTransmissionQueue;
  _QWORD v10[8];

  if (a1 && a3)
  {
    if (a4)
    {
      CFRetain(a1);
      CFRetain(a3);
      CFRetain(a4);
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate_block_invoke;
      v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = a5;
      v10[5] = a1;
      v10[6] = a3;
      v10[7] = a4;
      MXDispatchAsync((uint64_t)"FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2688, 0, 0, DataTransmissionQueue, (uint64_t)v10);
    }
  }
}

void FigRoutingManager_HandleDidCloseCommChannelDelegate(CFTypeRef cf, uint64_t a2, const void *a3, uint64_t a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *DataTransmissionQueue;
  _QWORD v9[7];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (cf && a3)
  {
    if (dword_1EE2B3E28)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    CFRetain(a3);
    DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManager_HandleDidCloseCommChannelDelegate_block_invoke;
    v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = cf;
    v9[6] = a3;
    MXDispatchAsync((uint64_t)"FigRoutingManager_HandleDidCloseCommChannelDelegate", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2750, 0, 0, DataTransmissionQueue, (uint64_t)v9);
  }
}

NSObject *FigRoutingManagerCreateOneShotTimer(NSObject *a1, double a2, uint64_t a3, void *a4, uint64_t a5)
{
  int64_t v8;
  void *DispatchSourceBlock;
  NSObject *v10;
  dispatch_time_t v11;
  void *v12;

  v8 = (uint64_t)(a2 * 1000000000.0);
  DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, a1);
  v11 = dispatch_time(0, v8);
  dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_set_context(v10, a4);
  dispatch_source_set_event_handler(v10, DispatchSourceBlock);
  _Block_release(DispatchSourceBlock);
  if (a5)
  {
    v12 = (void *)FigDispatchCreateDispatchSourceBlock();
    dispatch_source_set_cancel_handler(v10, v12);
    _Block_release(v12);
  }
  dispatch_resume(v10);
  return v10;
}

NSObject *FigRoutingManagerStartDeactivateAirPlayEndpointTimer(void *cf, uint64_t a2, float a3)
{
  void *SharedManager;
  NSObject *v7;
  NSObject *v8;
  NSObject *result;
  _QWORD v10[5];
  _QWORD v11[6];

  if (cf)
    CFRetain(cf);
  SharedManager = FigRoutingManagerGetSharedManager();
  v7 = *((_QWORD *)SharedManager + 6);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *((_QWORD *)SharedManager + 6);
    if (v8)
    {
      dispatch_release(v8);
      *((_QWORD *)SharedManager + 6) = 0;
    }
  }
  v10[4] = cf;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = cf;
  v11[5] = a2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke_2;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  result = FigRoutingManagerCreateOneShotTimer(*((NSObject **)SharedManager + 1), a3, (uint64_t)v11, cf, (uint64_t)v10);
  *((_QWORD *)SharedManager + 6) = result;
  return result;
}

void FigRoutingManagerStopDeactivateAirPlayEndpointTimer()
{
  void *SharedManager;
  NSObject *v1;
  NSObject *v2;

  SharedManager = FigRoutingManagerGetSharedManager();
  v1 = *((_QWORD *)SharedManager + 6);
  if (v1)
  {
    dispatch_source_cancel(v1);
    v2 = *((_QWORD *)SharedManager + 6);
    if (v2)
    {
      dispatch_release(v2);
      *((_QWORD *)SharedManager + 6) = 0;
    }
  }
}

CFTypeRef FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v10;
  CFTypeRef cf;

  v0 = -[MXEndpointDescriptorCache copyAvailableEndpointsForManager:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyAvailableEndpointsForManager:", FigRoutingManagerGetEndpointManager(*MEMORY[0x1E0CA3A60]));
  if (!v0)
    return 0;
  v1 = v0;
  if (CFArrayGetCount(v0) < 1 || (Count = CFArrayGetCount(v1), Count < 1))
  {
LABEL_11:
    v10 = 0;
  }
  else
  {
    v3 = Count;
    v4 = 0;
    v5 = *MEMORY[0x1E0CA4258];
    v6 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
      cf = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v9)
        v9(CMBaseObject, v5, v6, &cf);
      if (FigCFStringFind())
        break;
      if (cf)
        CFRelease(cf);
      if (v3 == ++v4)
        goto LABEL_11;
    }
    if (ValueAtIndex)
      v10 = CFRetain(ValueAtIndex);
    else
      v10 = 0;
    if (cf)
      CFRelease(cf);
  }
  CFRelease(v1);
  return v10;
}

CFMutableDictionaryRef FigRoutingManagerCreateDuckAudioPayload()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  return Mutable;
}

CFIndex FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable(CFIndex result)
{
  const __CFArray *v1;
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  if (result)
  {
    v1 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      v2 = result;
      if (result < 1)
      {
        return 1;
      }
      else
      {
        v3 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v1, v3);
          if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
            break;
          if (v2 == ++v3)
            return 1;
        }
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Found non-groupable route"), (uint64_t)ValueAtIndex, (uint64_t)CFSTR("in inEndpoints"), 0);
        return 0;
      }
    }
  }
  return result;
}

CFIndex FigRoutingManagerUtilities_AreAllEndpointsOfTypeAirPlay(CFIndex result)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (void *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
      {
        v3 = v2;
        v4 = *(_QWORD *)v7;
LABEL_5:
        v5 = 0;
        while (1)
        {
          if (*(_QWORD *)v7 != v4)
            objc_enumerationMutation(v1);
          result = FigRoutingManagerIsEndpointOfType(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5));
          if (!(_DWORD)result)
            break;
          if (v3 == ++v5)
          {
            v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
            result = 1;
            if (v3)
              goto LABEL_5;
            return result;
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigRoutingManagerUtilities_IsEndpointPicked(CFTypeRef a1, uint64_t a2)
{
  CFIndex i;
  CFIndex Count;
  CFTypeRef ValueAtIndex;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFArrayRef theArray;

  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a2, &theArray);
  if (a1)
    goto LABEL_2;
  if (!theArray)
    return 1;
  if (CFArrayGetCount(theArray))
  {
LABEL_2:
    for (i = 0; ; ++i)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
      {
        v8 = 0;
        goto LABEL_21;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (ValueAtIndex == a1)
        break;
      v6 = (uint64_t)ValueAtIndex;
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
        && FigRoutingManagerIsEndpointWHAGroupable(v6))
      {
        v7 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (v7 == a1)
        {
          if (a1)
            CFRelease(a1);
          break;
        }
        if (v7)
          CFRelease(v7);
      }
    }
  }
  v8 = 1;
LABEL_21:
  if (theArray)
    CFRelease(theArray);
  return v8;
}

__CFArray *FigRoutingManagerUtilities_CopyEndpointsToAdd(uint64_t a1, CFArrayRef theArray)
{
  const __CFAllocator *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *);
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFIndex v12;
  const void *v13;
  CFArrayRef theArraya;
  CFTypeRef cf;

  if (!theArray || !CFArrayGetCount(theArray))
    return 0;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
  theArraya = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (cf
    && (CMBaseObject = FigEndpointGetCMBaseObject(),
        (v6 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48)) != 0)
    && (v6(CMBaseObject, *MEMORY[0x1E0CA43D0], v4, &theArraya), theArraya))
  {
    Count = CFArrayGetCount(theArraya);
  }
  else
  {
    Count = 0;
  }
  v9 = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (v9 >= 1)
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
      if (Count < 1)
        goto LABEL_17;
      if (ValueAtIndex != CFArrayGetValueAtIndex(theArraya, 0))
        break;
LABEL_18:
      if (++v10 == v9)
        goto LABEL_19;
    }
    v12 = 1;
    while (Count != v12)
    {
      v13 = CFArrayGetValueAtIndex(theArraya, v12++);
      if (ValueAtIndex == v13)
      {
        if (v12 - 1 < Count)
          goto LABEL_18;
        break;
      }
    }
LABEL_17:
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_18;
  }
LABEL_19:
  if (theArraya)
  {
    CFRelease(theArraya);
    theArraya = 0;
  }
  if (cf)
    CFRelease(cf);
  return Mutable;
}

__CFArray *FigRoutingManagerUtilities_CopyEndpointsToRemove(uint64_t a1, const __CFArray *a2)
{
  CFAllocatorRef *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *);
  CFIndex Count;
  CFIndex v7;
  __CFArray *Mutable;
  CFIndex v9;
  const void *ValueAtIndex;
  CFIndex v11;
  const void *v12;
  CFArrayRef theArray;
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
  theArray = 0;
  v3 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (cf
    && (CMBaseObject = FigEndpointGetCMBaseObject(),
        (v5 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48)) != 0)
    && (v5(CMBaseObject, *MEMORY[0x1E0CA43D0], *v3, &theArray), theArray))
  {
    Count = CFArrayGetCount(theArray);
    if (!a2)
    {
LABEL_5:
      v7 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    Count = 0;
    if (!a2)
      goto LABEL_5;
  }
  v7 = CFArrayGetCount(a2);
LABEL_8:
  Mutable = CFArrayCreateMutable(*v3, 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
      if (v7 < 1)
        goto LABEL_16;
      if (ValueAtIndex != CFArrayGetValueAtIndex(a2, 0))
        break;
LABEL_17:
      if (++v9 == Count)
        goto LABEL_18;
    }
    v11 = 1;
    while (v7 != v11)
    {
      v12 = CFArrayGetValueAtIndex(a2, v11++);
      if (ValueAtIndex == v12)
      {
        if (v11 - 1 < v7)
          goto LABEL_17;
        break;
      }
    }
LABEL_16:
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_17;
  }
LABEL_18:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return Mutable;
}

uint64_t FigVAEndpointManagerGetClassID()
{
  if (FigVAEndpointManagerGetClassID_sRegisterFigVAEndpointManagerBaseTypeOnce != -1)
    dispatch_once(&FigVAEndpointManagerGetClassID_sRegisterFigVAEndpointManagerBaseTypeOnce, &__block_literal_global_17);
  return FigVAEndpointManagerGetClassID_sFigVAEndpointManagerClassID;
}

CFStringRef FigVAEndpointManagerBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVAEndpointManager %p]"), a1);
}

const __CFNumber *FigVAEndpointManagerGetPropertyUInt32(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFNumber *ValueUInt32;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v4 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    return 0;
  v4(CMBaseObject, a2, *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  ValueUInt32 = MXCFNumberGetValueUInt32((const __CFNumber *)cf);
  if (cf)
    CFRelease(cf);
  return ValueUInt32;
}

uint64_t FigVAEndpointManagerSetPropertyFloat32(float a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, CFNumberRef);
  uint64_t v7;

  v4 = MXCFNumberCreateFromFloat32(a1);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    v7 = v6(CMBaseObject, a3, v4);
  else
    v7 = 4294954514;
  CFRelease(v4);
  return v7;
}

uint64_t FigSTSGetClassID()
{
  if (FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce != -1)
    dispatch_once_f(&FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce, &FigSTSGetClassID_sFigSTSClassID, (dispatch_function_t)STSObtainClassID);
  return FigSTSGetClassID_sFigSTSClassID;
}

uint64_t STSObtainClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSTSGetTypeID()
{
  if (FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce != -1)
    dispatch_once_f(&FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce, &FigSTSGetClassID_sFigSTSClassID, (dispatch_function_t)STSObtainClassID);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSTSCreate(uint64_t a1, CFTypeRef cf, uint64_t a3, _QWORD *a4)
{
  CFTypeID v8;
  const char *v9;
  const char *v10;
  void *Function;
  uint64_t result;
  uint64_t v13;
  void *value;

  v13 = 0;
  if (STSInitializeFlavorCreationState_sInitFlavorCreationStateOnce != -1)
  {
    dispatch_once(&STSInitializeFlavorCreationState_sInitFlavorCreationStateOnce, &__block_literal_global_18);
    if (cf)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  if (!cf)
    return FigSignalErrorAt();
LABEL_3:
  v8 = CFGetTypeID(cf);
  if (v8 != CFStringGetTypeID() || !a4)
    return FigSignalErrorAt();
  value = 0;
  MEMORY[0x1940352F8](sFigSTSFlavorCreationState_0);
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sFigSTSFlavorCreationState_1, cf, (const void **)&value))
    goto LABEL_12;
  if (CFEqual(cf, CFSTR("B")))
  {
    v9 = "/System/Library/Frameworks/MediaToolbox.framework/Support/libSTS-B.dylib";
    v10 = "STSCreateFlavorB";
    goto LABEL_10;
  }
  if (CFEqual(cf, CFSTR("N")))
  {
    v9 = "/System/Library/Frameworks/MediaToolbox.framework/Support/libSTS-N.dylib";
    v10 = "STSCreateFlavorN";
LABEL_10:
    Function = STSLoadCreateFunction(v9, v10);
    value = Function;
    if (!Function)
      goto LABEL_12;
    goto LABEL_11;
  }
  Function = value;
  if (value)
LABEL_11:
    CFDictionarySetValue((CFMutableDictionaryRef)sFigSTSFlavorCreationState_1, cf, Function);
LABEL_12:
  MEMORY[0x194035304](sFigSTSFlavorCreationState_0);
  if (!value)
    return FigSignalErrorAt();
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))value)(a1, a3, &v13);
  *a4 = v13;
  return result;
}

CFStringRef STSCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSTS %p]"), a1);
}

void *STSLoadCreateFunction(const char *a1, const char *a2)
{
  void *result;

  result = dlopen(a1, 4);
  if (result)
    return dlsym(result, a2);
  return result;
}

void FigRouteDiscovererSetDiscoveryModeDetailedOnDiscoverer()
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v1;
  CFTypeRef v2;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    v1 = CFRetain(*DerivedStorage);
  else
    v1 = 0;
  if (FigCFEqual())
  {
    v2 = *DerivedStorage;
    *DerivedStorage = CFSTR("DiscoveryMode_Detailed");
    if (CFSTR("DiscoveryMode_Detailed"))
      CFRetain(CFSTR("DiscoveryMode_Detailed"));
    if (v2)
      CFRelease(v2);
  }
  if (v1)
    CFRelease(v1);
}

void FigRouteDiscovererSetDiscoveryModeNoneOnDiscoverer()
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v1;
  CFTypeRef v2;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    v1 = CFRetain(*DerivedStorage);
  else
    v1 = 0;
  if (FigCFEqual())
  {
    v2 = *DerivedStorage;
    *DerivedStorage = CFSTR("DiscoveryMode_None");
    if (CFSTR("DiscoveryMode_None"))
      CFRetain(CFSTR("DiscoveryMode_None"));
    if (v2)
      CFRelease(v2);
  }
  if (v1)
    CFRelease(v1);
}

void discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(const void *a1, const __CFArray *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  int v9;
  int v10;
  _BOOL4 IsClientSuspendedOrTerminated;
  NSObject *NotificationQueue;
  _QWORD v14[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (a3)
  {
    if (objc_msgSend(a3, "BOOLValue"))
      v8 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v8 = (const void *)*MEMORY[0x1E0C9AE40];
  }
  else
  {
    v8 = (const void *)FigRouteDiscovererCopyUserSelectionAvailable(*(_DWORD *)(DerivedStorage + 40), a2);
  }
  MEMORY[0x1940352BC](*(_QWORD *)(v7 + 64));
  v9 = *(_BYTE *)(v7 + 72) != 0;
  *(_BYTE *)(v7 + 72) = FigCFEqual() != 0;
  MEMORY[0x1940352C8](*(_QWORD *)(v7 + 64));
  v10 = FigCFEqual() != 0;
  CMBaseObjectGetDerivedStorage();
  IsClientSuspendedOrTerminated = FigRouteDiscoveryManagerIsClientSuspendedOrTerminated((uint64_t)a1);
  if (v9 != v10 && !IsClientSuspendedOrTerminated)
  {
    if (a1)
      CFRetain(a1);
    NotificationQueue = FigRouteDiscoveryManagerGetNotificationQueue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __discoverer_postRoutePresentChangedIfNecessary_block_invoke;
    v14[3] = &__block_descriptor_40_e5_v8__0l;
    v14[4] = a1;
    MXDispatchAsync((uint64_t)"discoverer_postRoutePresentChangedIfNecessary", (uint64_t)"FigRouteDiscoverer.m", 865, 0, 0, NotificationQueue, (uint64_t)v14);
  }
  if (v8)
    CFRelease(v8);
}

void __discoverer_postRoutePresentChangedIfNecessary_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t FigEndpointUIAgentCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1EE2B3EF8 >= 0x100)
    dword_1EE2B3EF8 = 0;
  if (a2)
  {
    FigEndpointUIAgentGetClassID();
    if (!CMDerivedObjectCreate())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v4 = FigReentrantMutexCreate();
      *(_QWORD *)(DerivedStorage + 8) = v4;
      if (v4)
      {
        if (dword_1EE2B3EF8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a2 = 0;
      }
    }
  }
  return 0;
}

uint64_t figEndpointUIAgent_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352BC](*(_QWORD *)(DerivedStorage + 8));
  *(_BYTE *)DerivedStorage = 1;
  MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

uint64_t figEndpointUIAgent_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  figEndpointUIAgent_Invalidate();
  DerivedStorage[3] = 0;
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  result = FigSimpleMutexDestroy();
  DerivedStorage[1] = 0;
  return result;
}

uint64_t figEndpointUIAgent_setAuthValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  void (*v6)(uint64_t, uint64_t, _QWORD);
  const void *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352BC](*(_QWORD *)(DerivedStorage + 8));
  if (a2 || (_DWORD)a3)
  {
    if (*(_BYTE *)DerivedStorage)
    {
      v8 = 4294950514;
    }
    else
    {
      v6 = *(void (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 24);
      if (v6)
        v6(a2, a3, *(_QWORD *)(DerivedStorage + 16));
      *(_QWORD *)(DerivedStorage + 24) = 0;
      v7 = *(const void **)(DerivedStorage + 16);
      if (v7)
      {
        CFRelease(v7);
        v8 = 0;
        *(_QWORD *)(DerivedStorage + 16) = 0;
      }
      else
      {
        v8 = 0;
      }
    }
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

uint64_t figEndpointUIAgent_showAuthPrompt(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  NSObject *v9;
  __CFDictionary *Mutable;
  CFTypeRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (theDict)
  {
    CFDictionaryGetValue(theDict, CFSTR("ATVName"));
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1940352BC](*(_QWORD *)(DerivedStorage + 8));
    if (*(_BYTE *)DerivedStorage)
    {
      MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 8));
      v8 = 4294950514;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("promptInfo"), theDict);
      *(_QWORD *)(DerivedStorage + 24) = a4;
      if (a3)
        v11 = CFRetain(a3);
      else
        v11 = 0;
      *(_QWORD *)(DerivedStorage + 16) = v11;
      MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 8));
      CMNotificationCenterGetDefaultLocalCenter();
      v8 = CMNotificationCenterPostNotification();
      if (Mutable)
        CFRelease(Mutable);
    }
    if (dword_1EE2B3EF8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294950516;
  }
  return v8;
}

uint64_t figEndpointUIAgent_finishedWithPrompt(uint64_t a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  uint64_t v5;

  if (!a2)
    return 4294950516;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950513;
  v4 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("finishedWithPromptInfo"), a2);
  CMNotificationCenterGetDefaultLocalCenter();
  v5 = CMNotificationCenterPostNotification();
  CFRelease(v4);
  return v5;
}

uint64_t figEndpointUIAgent_showError(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t v6;

  if (dword_1EE2B3EF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
    return 4294950516;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950513;
  v5 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("showErrorPromptInfo"), a2);
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  v6 = CMNotificationCenterPostNotification();
  CFRelease(v5);
  return v6;
}

uint64_t figEndpointUIAgent_screenStarted()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figEndpointUIAgent_screenStopped()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figEndpointUIAgent_copyPasswordFromKeychain(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950516;
  v8 = DerivedStorage;
  CFDictionaryGetValue(a2, CFSTR("ATVName"));
  MEMORY[0x1940352BC](*(_QWORD *)(v8 + 8));
  if (*(_BYTE *)v8)
  {
    v11 = 4294950514;
LABEL_9:
    MEMORY[0x1940352C8](*(_QWORD *)(v8 + 8));
    return v11;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v11 = 0;
    goto LABEL_9;
  }
  v10 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("copyPasswordInfo"), a2);
  CFDictionarySetValue(v10, CFSTR("copyPasswordFromKeychainContext"), a3);
  *(_QWORD *)(v8 + 32) = a4;
  MEMORY[0x1940352C8](*(_QWORD *)(v8 + 8));
  CMNotificationCenterGetDefaultLocalCenter();
  v11 = CMNotificationCenterPostNotification();
  CFRelease(v10);
  return v11;
}

uint64_t figEndpointUIAgent_setPasswordFromKeychain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  void (*v6)(uint64_t, uint64_t);
  const void *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352BC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 4294950514;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(DerivedStorage + 32);
    if (v6)
      v6(a2, a3);
    *(_QWORD *)(DerivedStorage + 32) = 0;
    v7 = *(const void **)(DerivedStorage + 16);
    if (v7)
    {
      CFRelease(v7);
      v8 = 0;
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    else
    {
      v8 = 0;
    }
  }
  MEMORY[0x1940352C8](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

__CFString *CMSMSleep_CreateDefaultIdlePreventorName()
{
  __CFString *Mutable;
  __CFString *FormattedDateAndTime;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  FormattedDateAndTime = CMSMUtility_CreateFormattedDateAndTime();
  CFStringAppend(Mutable, CFSTR("MediaExperience-idleSleepPreventor"));
  CFStringAppend(Mutable, FormattedDateAndTime);
  if (FormattedDateAndTime)
    CFRelease(FormattedDateAndTime);
  return Mutable;
}

BOOL CMSMSleep_ReleaseIdleSleepPreventor(IOPMAssertionID a1, const void *a2, const void *a3)
{
  IOReturn v5;
  IOReturn v6;

  v5 = IOPMAssertionRelease(a1);
  v6 = v5;
  if (a2 && !v5)
    CMSMPowerLogPostPowerLogData(a2, a3);
  return v6 == 0;
}

void CMSMSleep_CreateIdleSleepPreventorForSession(void *a1, const __CFString *a2)
{
  const __CFAllocator **v4;
  __CFString *MutableCopy;
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CFAbsoluteTime Current;
  CFDateRef v11;
  __CFDictionary *PowerLogDataForSession;
  IOPMAssertionID v13;

  if (a1 && (objc_msgSend(a1, "idleSleepPreventorAllocated") & 1) == 0)
  {
    v4 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    if (a2)
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    }
    else
    {
      v6 = CFGetAllocator(a1);
      MutableCopy = CFStringCreateMutable(v6, 0);
      v7 = objc_msgSend(a1, "displayID");
      v8 = objc_msgSend(a1, "clientName");
      if (v7)
        CFStringAppendFormat(MutableCopy, 0, CFSTR("MediaExperience.%@(%@).isplaying"), v8, objc_msgSend(a1, "displayID"));
      else
        CFStringAppendFormat(MutableCopy, 0, CFSTR("MediaExperience.%@.isplaying"), v8);
    }
    v9 = *v4;
    Current = CFAbsoluteTimeGetCurrent();
    v11 = CFDateCreate(v9, Current);
    objc_msgSend(a1, "setIdleSleepPreventorName:", MutableCopy);
    objc_msgSend(a1, "setIdleSleepPreventorCreationTime:", v11);
    PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(a1);
    v13 = 0;
    objc_msgSend(a1, "setIdleSleepPreventorAllocated:", CMSMSleep_CreateIdleSleepPreventor(MutableCopy, CFSTR("CoreMedia_AudioPlayback"), PowerLogDataForSession, &v13));
    objc_msgSend(a1, "setIdleSleepPreventor:", v13);
    if (v11)
      CFRelease(v11);
    if (PowerLogDataForSession)
      CFRelease(PowerLogDataForSession);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

void CMSMSleep_ReleasePrewarmIdleSleepPreventor(int a1, int a2)
{
  const __CFString *v4;
  const __CFString *v5;
  __CFDictionary *PowerLogDataForSystemSound;

  if (FigAtomicCompareAndSwap32())
  {
    if ((a1 - 1200) >= 0xC)
      v4 = 0;
    else
      v4 = CFSTR("touchtone");
    if ((a1 - 1103) >= 3)
      v5 = v4;
    else
      v5 = CFSTR("keypress");
    PowerLogDataForSystemSound = CMSMPowerLogCreatePowerLogDataForSystemSound(v5, a2, CFSTR("SystemSoundPlayback_Stop"), sCMSessionMgrPrewarmIdleSleepPreventor, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
    if (CMSMSleep_ReleaseIdleSleepPreventor(sCMSessionMgrPrewarmIdleSleepPreventor, CFSTR("CoreMedia_SystemSoundPlayback"), PowerLogDataForSystemSound))
    {
      sCMSessionMgrPrewarmIdleSleepPreventor = 0;
      if (sCMSessionMgrPrewarmIdleSleepPreventorName)
      {
        CFRelease((CFTypeRef)sCMSessionMgrPrewarmIdleSleepPreventorName);
        sCMSessionMgrPrewarmIdleSleepPreventorName = 0;
      }
      if (sCMSessionMgrPrewarmIdleSleepPreventorCreationTime)
      {
        CFRelease((CFTypeRef)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
        sCMSessionMgrPrewarmIdleSleepPreventorCreationTime = 0;
      }
      if (PowerLogDataForSystemSound)
        goto LABEL_14;
    }
    else
    {
      sCMSessionMgrPrewarmIdleSleepPreventorAllocated = 1;
      if (PowerLogDataForSystemSound)
LABEL_14:
        CFRelease(PowerLogDataForSystemSound);
    }
  }
}

void *CMSMSleep_ExtendPlaybackProcessAssertion(void *result)
{
  void *v1;
  MXAudioStatistics *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "extendBackgroundAppAssertionTimer"))
    {
      dispatch_source_cancel((dispatch_source_t)objc_msgSend(v1, "extendBackgroundAppAssertionTimer"));
      objc_msgSend(v1, "setExtendBackgroundAppAssertionTimer:", 0);
    }
    if (objc_msgSend(v1, "playbackAssertionRef"))
    {
      v2 = +[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance");
      v3 = objc_msgSend((id)objc_msgSend(v1, "playbackAssertionRef"), "explanation");
      -[MXAudioStatistics sendSinglePerformanceMessageForAssertion:explanation:activity:](v2, "sendSinglePerformanceMessageForAssertion:explanation:activity:", "CMSMSleep_ExtendPlaybackProcessAssertion", v3, kMXAudioStatistics_AssertionActivity_AssertionExtended);
      v4 = MXGetAssertionLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136447234;
        v9 = "-CMSSleep-";
        v10 = 2082;
        v11 = "CMSMSleep_ExtendPlaybackProcessAssertion";
        v12 = 1024;
        v13 = 439;
        v14 = 2048;
        v15 = objc_msgSend(v1, "playbackAssertionRef");
        v16 = 2114;
        v17 = objc_msgSend((id)objc_msgSend(v1, "playbackAssertionRef"), "explanation");
        _os_log_impl(&dword_1935FC000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s:%i Creating extendBackgroundAppAssertionTimer for assertion %p explanation %{public}@", buf, 0x30u);
      }
    }
    v5 = objc_msgSend((id)objc_msgSend(v1, "ID"), "longLongValue");
    v6 = MXGetSerialQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CMSMSleep_ExtendPlaybackProcessAssertion_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = v5;
    return (void *)objc_msgSend(v1, "setExtendBackgroundAppAssertionTimer:", FigRoutingManagerCreateOneShotTimer(v6, 5.0, (uint64_t)v7, 0, 0));
  }
  return result;
}

uint64_t CMSMSleep_FetchTemporaryPlaybackProcessAssertion(void *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *ClientName;
  const __CFString *v7;
  const void *PlaybackProcessAssertionForPID;
  uint64_t v9;
  NSObject *v10;
  _QWORD v12[5];

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  v4 = objc_msgSend(a1, "displayID");
  ClientName = CMSUtility_GetClientName(a1, v5);
  v7 = CFStringCreateWithFormat(v2, 0, CFSTR("MediaExperience.%d.\"%@\".\"%@\".\"%@\".temporaryIsPlayingProcessAssertion"), v3, v4, ClientName, objc_msgSend(a1, "audioCategory"));
  if (!objc_msgSend(a1, "resumeAssertionRef")
    || (MX_RunningBoardServices_IsAssertionValid((const void *)objc_msgSend(a1, "resumeAssertionRef")) & 1) == 0)
  {
    PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), v7);
    objc_msgSend(a1, "setResumeAssertionRef:", PlaybackProcessAssertionForPID);
    if (PlaybackProcessAssertionForPID)
      CFRelease(PlaybackProcessAssertionForPID);
  }
  if (v7)
    CFRelease(v7);
  if (objc_msgSend(a1, "resumeBackgroundAppUpdaterTimer"))
  {
    dispatch_source_cancel((dispatch_source_t)objc_msgSend(a1, "resumeBackgroundAppUpdaterTimer"));
    objc_msgSend(a1, "setResumeBackgroundAppUpdaterTimer:", 0);
  }
  v9 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
  v10 = MXGetSerialQueue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __CMSMSleep_FetchTemporaryPlaybackProcessAssertion_block_invoke;
  v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = v9;
  return objc_msgSend(a1, "setResumeBackgroundAppUpdaterTimer:", FigRoutingManagerCreateOneShotTimer(v10, 5.0, (uint64_t)v12, 0, 0));
}

void CMSMSleep_ReleasePlaybackProcessAssertion(void *a1)
{
  if (a1)
  {
    MX_RunningBoardServices_InvalidateAssertion((void *)objc_msgSend(a1, "playbackAssertionRef"));
    objc_msgSend(a1, "setPlaybackAssertionRef:", 0);
    CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(a1, (void *)objc_msgSend(a1, "parentProcessAuditTokens"));
  }
}

void CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t i;
  const __CFData *v6;
  uint64_t v7;
  void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  audit_token_t buffer;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  audit_token_t atoken;
  _BYTE v22[128];
  uint64_t v23;
  CFRange v24;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = (void *)objc_msgSend((id)objc_msgSend(a1, "hostProcessPlaybackAssertions"), "mutableCopy");
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    if (v15)
    {
      v4 = *(_QWORD *)v18;
      v14 = v3;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v18 != v4)
            objc_enumerationMutation(a2);
          v6 = *(const __CFData **)(*((_QWORD *)&v17 + 1) + 8 * i);
          memset(&buffer, 0, sizeof(buffer));
          v24.location = 0;
          v24.length = 32;
          CFDataGetBytes(v6, v24, (UInt8 *)&buffer);
          atoken = buffer;
          audit_token_to_pid(&atoken);
          v7 = objc_msgSend(v3, "objectForKey:", v6);
          if (v7)
          {
            v8 = (void *)v7;
            if (dword_1EE2B3F38)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v3 = v14;
            }
            MX_RunningBoardServices_InvalidateAssertion(v8);
            objc_msgSend(v3, "removeObjectForKey:", v6);
          }
          else if (dword_1EE2B3F38)
          {
            v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      }
      while (v15);
    }
    objc_msgSend(a1, "setHostProcessPlaybackAssertions:", v3, v11, v12);

  }
}

void CMSMSleep_UpdatePlaybackProcessAssertionsForHostProcesses(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = (void *)objc_msgSend((id)objc_msgSend(a3, "differenceFromArray:", a2), "removals");
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (objc_msgSend(v4, "count"))
    {
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v11;
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v11 != v8)
              objc_enumerationMutation(v4);
            objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "object"));
          }
          while (v7 != v9);
          v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        }
        while (v7);
      }
      CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(a1, v5);
    }

    CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(a1);
  }
}

void sub_1936DDE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1936DDF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFNumber *MXCFNumberGetValueSInt32(const __CFNumber *result)
{
  unsigned int valuePtr;

  valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

float MXCFNumberGetValueFloat32(const __CFNumber *a1)
{
  float valuePtr;

  valuePtr = 0.0;
  if (!a1)
    return 0.0;
  CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
  return valuePtr;
}

CFNumberRef MXCFNumberCreateFromFloat64(double a1)
{
  double valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
}

double MXCFDictionaryGetValueDouble(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *Value;
  double valuePtr;

  if (!a1)
    return 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  valuePtr = 0.0;
  if (!Value)
    return 0.0;
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

id MXCFDictionaryCreateMutableCopy(uint64_t a1)
{
  if (a1)
    return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:copyItems:", a1, 1);
  else
    return objc_alloc_init(MEMORY[0x1E0C99E08]);
}

__CFArray *MXCFArrayCreateFromCArrayOfSInt32(int *a1, unsigned int a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  int v7;
  CFNumberRef v8;
  CFNumberRef v9;
  int valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1 && a2)
  {
    v6 = a2;
    do
    {
      v7 = *a1++;
      valuePtr = v7;
      v8 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
      if (v8)
      {
        v9 = v8;
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v9);
      }
      --v6;
    }
    while (v6);
  }
  return Mutable;
}

BOOL MXCFArrayAreArrayContentsEqual(CFArrayRef theArray, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  int v9;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      v5 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
  }
  v5 = 0;
LABEL_6:
  if (Count != v5)
    return 0;
  v6 = 0;
  do
  {
    v7 = v6;
    if (theArray)
      v8 = CFArrayGetCount(theArray);
    else
      v8 = 0;
    if (v7 >= v8)
      break;
    CFArrayGetValueAtIndex(theArray, v7);
    v9 = FigCFArrayContainsValue();
    v6 = v7 + 1;
  }
  while (v9);
  return v7 >= v8;
}

__CFArray *MXCopyCFArrayDifferenceFromArray(uint64_t a1, const __CFArray *a2)
{
  __CFArray *Mutable;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = 0;
  if (!a2)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a2); v4 < i; i = 0)
  {
    CFArrayGetValueAtIndex(a2, v4);
    if (!FigCFArrayContainsValue())
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v4);
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v4;
    if (a2)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

BOOL MXCFStringHasCaseInsensitivePrefix(const __CFString *a1, CFStringRef theString)
{
  _BOOL8 result;
  CFIndex Length;
  CFRange v6;

  result = 0;
  if (a1 && theString)
  {
    Length = CFStringGetLength(theString);
    if (Length <= CFStringGetLength(a1))
    {
      v6.length = CFStringGetLength(theString);
      v6.location = 0;
      return CFStringCompareWithOptions(a1, theString, v6, 1uLL) == kCFCompareEqualTo;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MXCFPreferencesSetAndSynchronizeUserPreference(const __CFString *a1, const void *a2)
{
  CFPreferencesSetValue(a1, a2, CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

CFPropertyListRef MXCFPreferencesCopyPreference(const __CFString *a1)
{
  return CFPreferencesCopyValue(a1, CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

void MXCFPreferencesMigrateUserPreferencesToMXDomain()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v1;
  NSObject *v2;
  NSObject *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFDictionary *v6;

  if (CFPreferencesGetAppBooleanValue(CFSTR("celestialToMediaExperienceDomainMigrationFullyCompleted"), CFSTR("com.apple.mediaexperience"), 0))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v1 = (const __CFArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("AirTunesEntriesDeleted"), CFSTR("AirPlayLowLatencyEntriesDeleted"), CFSTR("BluetoothA2DPAndHFPVolumesCombined"), CFSTR("endpointTypeInfo"), CFSTR("inputVolumes"), CFSTR("measuredHDMILatency"), CFSTR("measuredHDMILatencyForCurrentRefreshRate"), CFSTR("nowPlayingAppDisplayID"), CFSTR("nowPlayingAppDisplayIDUponCarPlayDisconnect"), CFSTR("nowPlayingAppWasPlayingUponCarPlayDisconnect"), CFSTR("vibeIntensity"), CFSTR("volumeLimits"), CFSTR("volumeMultiplier"), CFSTR("volumes"), 0);
    if (CFPreferencesGetAppBooleanValue(CFSTR("celestialToMediaExperienceDomainMigrationCompleted"), CFSTR("com.apple.mediaexperience"), 0))
    {
      if (dword_1EE2B3F38)
      {
        v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
      CFPreferencesSetValue(CFSTR("celestialToMediaExperienceDomainMigrationCompleted"), 0, CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
      v6 = CFPreferencesCopyMultiple(v1, CFSTR("com.apple.celestial"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      CFPreferencesSetMultiple(v6, 0, CFSTR("com.apple.mediaexperience"), v4, v5);
      if (v6)
        CFRelease(v6);
    }
    CFPreferencesSetMultiple(0, v1, CFSTR("com.apple.celestial"), v4, v5);
    CFPreferencesSetValue(CFSTR("celestialToMediaExperienceDomainMigrationFullyCompleted"), (CFPropertyListRef)*MEMORY[0x1E0C9AE50], CFSTR("com.apple.mediaexperience"), v4, v5);
    CFPreferencesSynchronize(CFSTR("com.apple.mediaexperience"), v4, v5);
    CFPreferencesSynchronize(CFSTR("com.apple.celestial"), v4, v5);

  }
}

void MXCFPreferencesMigrateSilentModeUserPreferenceToMXDomain()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int CFPreferenceBooleanWithDefault;
  const void *v3;
  const void *v4;
  const __CFString *v5;
  const __CFString *v6;

  if (MX_FeatureFlags_IsMXSilentModeEnabled())
  {
    if (CFPreferencesGetAppBooleanValue(CFSTR("ringerMutePreferenceToMediaExperienceDomainMigrationComplete"), CFSTR("com.apple.mediaexperience"), 0))
    {
      if (!dword_1EE2B3F38)
        return;
      goto LABEL_4;
    }
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFPreferenceBooleanWithDefault = FigGetCFPreferenceBooleanWithDefault();
    v3 = (const void *)*MEMORY[0x1E0C9AE50];
    if (CFPreferenceBooleanWithDefault)
      v4 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v4 = (const void *)*MEMORY[0x1E0C9AE40];
    v5 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v6 = (const __CFString *)*MEMORY[0x1E0C9B230];
    CFPreferencesSetValue(CFSTR("silentModeEnabled"), v4, CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    CFPreferencesSetValue(CFSTR("ringerMutePreferenceToMediaExperienceDomainMigrationComplete"), v3, CFSTR("com.apple.mediaexperience"), v5, v6);
  }
  else if (dword_1EE2B3F38)
  {
LABEL_4:
    v0 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CelesteGetRegionSpecificVolumeLimit(const __CFDictionary *a1)
{
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  int Value;
  const __CFNumber *v5;
  const __CFNumber *v6;
  CFTypeID TypeID;
  int valuePtr;

  valuePtr = 1065353216;
  if (a1)
  {
    v2 = (const __CFBoolean *)MGCopyAnswer();
    if (v2)
    {
      v3 = v2;
      Value = CFBooleanGetValue(v2);
      CFRelease(v3);
      if (Value)
      {
        gRegionSpecificLimitEnabled = 1;
        v5 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("HighVolumeLimit"));
        if (v5)
        {
          v6 = v5;
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(v6))
            CFNumberGetValue(v6, kCFNumberFloatType, &valuePtr);
        }
      }
    }
  }
}

uint64_t CelesteIsRegionSpecificVolumeLimitEnabled()
{
  return gRegionSpecificLimitEnabled;
}

BOOL FVCUtilitiesIsFloatEquivalentToZero(float a1)
{
  return fabsf(a1) <= 0.00000011921;
}

uint64_t FVCUtilitiesIsVolumeDifferenceAboveThreshold(float a1, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  BOOL v5;
  float v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 < 0.0)
    a1 = 0.0;
  if (a2 < 0.0)
    a2 = 0.0;
  if (a1 > 1.0)
    a1 = 1.0;
  if (a2 > 1.0)
    a2 = 1.0;
  v2 = fabsf(a2);
  v3 = fabsf(a1) < 0.00000011921 || v2 < 0.00000011921;
  v4 = fabsf(a1 + -1.0);
  v5 = v3 || v4 < 0.00000011921;
  v6 = fabsf(a2 + -1.0);
  if (!v5 && v6 >= 0.00000011921)
  {
    if (vabds_f32(a1, a2) < 0.009)
    {
      if (!dword_1EE2B3E88)
        return 0;
      goto LABEL_22;
    }
    return 1;
  }
  if (vabds_f32(a1, a2) >= 0.00000011921)
    return 1;
  if (dword_1EE2B3E88)
  {
LABEL_22:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t FigVAEndpointGetClassID()
{
  if (FigVAEndpointGetClassID_sRegisterFigVAEndpointBaseTypeOnce != -1)
    dispatch_once(&FigVAEndpointGetClassID_sRegisterFigVAEndpointBaseTypeOnce, &__block_literal_global_21);
  return FigVAEndpointGetClassID_sFigVAEndpointClassID;
}

CFStringRef FigVAEndpointBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVAEndpoint %p]"), a1);
}

__CFArray *CMSMUtility_CopyPlayingSessionsInfo()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  CFMutableDictionaryRef v8;
  __CFDictionary *v9;
  const void *SInt64;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const void *SInt32;
  const void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v19 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (objc_msgSend(v7, "isActive"))
          {
            if (objc_msgSend(v7, "isPlaying"))
            {
              if ((objc_msgSend(v7, "doesntActuallyPlayAudio") & 1) == 0)
              {
                v8 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v8)
                {
                  v9 = v8;
                  objc_msgSend((id)objc_msgSend(v7, "ID"), "longLongValue");
                  SInt64 = (const void *)FigCFNumberCreateSInt64();
                  CFDictionarySetValue(v9, CFSTR("CMSessionID"), SInt64);
                  if (SInt64)
                    CFRelease(SInt64);
                  CMSUtility_GetClientName(v7, v11);
                  FigCFDictionarySetValue();
                  CMSUtility_GetDisplayID(v7, v12);
                  FigCFDictionarySetValue();
                  CMSUtility_GetAudioCategory(v7, v13);
                  FigCFDictionarySetValue();
                  CMSUtility_GetAudioMode(v7, v14);
                  FigCFDictionarySetValue();
                  objc_msgSend(v7, "interruptionStyle");
                  SInt32 = (const void *)FigCFNumberCreateSInt32();
                  CFDictionarySetValue(v9, CFSTR("InterruptionStyle"), SInt32);
                  if (SInt32)
                    CFRelease(SInt32);
                  objc_msgSend(v7, "clientPriority");
                  v16 = (const void *)FigCFNumberCreateSInt32();
                  FigCFDictionarySetValue();
                  if (v16)
                    CFRelease(v16);
                  CFArrayAppendValue(Mutable, v9);
                  CFRelease(v9);
                }
              }
            }
          }
        }
        v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v4);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

__CFString *CMSMUtility_MapCMSRouteChangeReasonToString(unsigned int a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_1E309CA40[a1];
}

uint64_t CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID(uint64_t a1, int a2)
{
  int v3;
  id v4;
  void *v5;
  const __CFString *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  MXSessionManagerSidekick *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v13[5];
  int v14;
  char v15;
  os_log_type_t type;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a1)
  {
    v3 = a1;
    v4 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a1);
    v5 = v4;
    if (v4)
    {
      if (a2)
        v6 = CFSTR("resumable.MXSessionManager");
      else
        v6 = CFSTR("non-resumable.MXSessionManager");
      if (objc_msgSend(v4, "waitingToResume"))
      {
        if (dword_1EE2B3F38)
        {
          v17 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v5, 1u, CFSTR("MXSessionManager"), v6, 0, 0, 0, 0);
      }
      else
      {
        v17 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v9 = +[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance");
      v10 = -[MXSessionManagerSidekick serialQueue](v9, "serialQueue");
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID_block_invoke;
      v13[3] = &unk_1E309C9C0;
      v13[4] = v9;
      v14 = v3;
      v15 = a2;
      MXDispatchAsync((uint64_t)"CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID", (uint64_t)"CMSessionManager_Utilities.m", 289, 0, 0, v10, (uint64_t)v13);
    }

    return 0;
  }
  else
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951615;
  }
}

uint64_t CMSMUtility_GetCurrentDeviceIdentifierAtIndex(uint64_t a1)
{
  __n128 CMSRouteInfoAt;
  uint64_t v3;
  _QWORD v5[6];

  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28 <= a1)
  {
    v3 = 0;
  }
  else
  {
    CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, a1, (uint64_t)v5);
    v3 = v5[2];
  }
  MEMORY[0x1940352C8](gCMSM, CMSRouteInfoAt);
  return v3;
}

uint64_t CMSMUtility_GetCurrentInputPortAtIndex(uint64_t a1)
{
  uint64_t v2;
  __n128 CMSRouteInfoAt;
  uint64_t v4;
  _DWORD v6[12];

  v2 = dword_1EE2B3C2C;
  MEMORY[0x1940352BC](gCMSM);
  if (v2 <= a1)
  {
    v4 = 0;
  }
  else
  {
    CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, a1, (uint64_t)v6);
    v4 = v6[11];
  }
  MEMORY[0x1940352C8](gCMSM, CMSRouteInfoAt);
  return v4;
}

CFMutableStringRef CMSMUtility_CopyCurrentRouteTypesAsCFString()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  __CFString *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;

  v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (!v0)
    return CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = v0;
  Count = CFArrayGetCount(v0);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, i);
      CFStringAppend(Mutable, ValueAtIndex);
      if (i < Count - 1)
        CFStringAppend(Mutable, CFSTR("~"));
    }
  }
  CFRelease(v1);
  return Mutable;
}

__CFArray *CMSMUtility_CopyCurrentInputRouteIdentifiers()
{
  __CFArray *Mutable;
  unint64_t v1;
  CFTypeRef v2;
  uint64_t v4;
  AudioObjectID v5;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C2C)
  {
    v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v1, (uint64_t)&v4);
      if (v5)
      {
        v2 = vaeCopyDeviceIdentifierFromVADPort(v5);
        CFArrayAppendValue(Mutable, v2);
        if (v2)
          CFRelease(v2);
      }
      else
      {
        CFArrayAppendValue(Mutable, &stru_1E30A1A48);
      }
      ++v1;
    }
    while (v1 < dword_1EE2B3C2C);
  }
  MEMORY[0x1940352C8](gCMSM);
  return Mutable;
}

__CFArray *CMSMUtility_CopyCurrentRouteSubtypes()
{
  __CFArray *Mutable;
  unint64_t v1;
  const __CFString *v2;
  uint64_t v4;
  const __CFString *v5;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28)
  {
    v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v1, (uint64_t)&v4);
      if (v5)
        v2 = v5;
      else
        v2 = &stru_1E30A1A48;
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1EE2B3C28);
  }
  MEMORY[0x1940352C8](gCMSM);
  return Mutable;
}

__CFArray *CMSMUtility_CopyCurrentOutputPorts()
{
  __CFArray *Mutable;
  unint64_t v1;
  const void *SInt64;
  uint64_t v4;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x1940352BC](gCMSM);
  if (dword_1EE2B3C28)
  {
    v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v1, (uint64_t)&v4);
      SInt64 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, SInt64);
      if (SInt64)
        CFRelease(SInt64);
      ++v1;
    }
    while (v1 < dword_1EE2B3C28);
  }
  MEMORY[0x1940352C8](gCMSM);
  return Mutable;
}

uint64_t CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v4), "doNotResetAudioCategoryOnNextInactive") & 1) != 0)
        {
          v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_11:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSMUtility_CopyCurrentPhoneCallIsRoutedViaCarBT()
{
  const void *v0;
  __CFArray *v1;
  const __CFString *CurrentDeviceIdentifierAtIndex;
  id v3;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  BOOL v10;
  const __CFNumber *ValueAtIndex;
  const __CFString *v12;
  int IsDeviceIDIncludedInCarBluetoothIDs;
  uint64_t v14;
  __CFArray *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectID valuePtr[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1EE2B3CF0);
  v1 = CMSMUtility_CopyCurrentRouteTypes();
  if (!CMSMUtility_PhoneCallOrRingtoneExists())
    goto LABEL_7;
  if (FigCFArrayContainsValue())
  {
    CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
    if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v0))
    {
      v3 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v4 = 1;
      goto LABEL_21;
    }
  }
  if (FigCFArrayContainsValue() || !dword_1EE2B3C28)
  {
    v5 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1E30A4C28);
    if (v5)
    {
      v6 = v5;
      Count = CFArrayGetCount(v5);
      if (Count < 1)
      {
        v10 = 0;
      }
      else
      {
        v8 = Count;
        v9 = 0;
        v10 = 1;
        do
        {
          valuePtr[0] = 0;
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v9);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, valuePtr);
          if (vaeGetPortTypeFromPortID(valuePtr[0]) == 1885892706)
          {
            v12 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
            IsDeviceIDIncludedInCarBluetoothIDs = cmsmIsDeviceIDIncludedInCarBluetoothIDs(v12, (uint64_t)v0);
            if (v12)
              CFRelease(v12);
            if (IsDeviceIDIncludedInCarBluetoothIDs)
              break;
          }
          v10 = ++v9 < v8;
        }
        while (v8 != v9);
      }
      CFRelease(v6);
    }
    else
    {
      v10 = 0;
    }
    v3 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v4 = v10;
  }
  else
  {
LABEL_7:
    v3 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v4 = 0;
  }
LABEL_21:
  v14 = objc_msgSend(v3, "initWithBool:", v4);
  v15 = CMSMUtility_CopyCurrentRouteIdentifiers();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
    CFRelease(v0);
  if (v15)
    CFRelease(v15);
  if (v1)
    CFRelease(v1);
  return v14;
}

uint64_t CMSMUtility_CopyCurrentPlayingSessionIsRoutedViaCarBT()
{
  __CFArray *v0;
  _BOOL4 v1;
  const void *v2;
  __CFArray *v3;
  const __CFString *CurrentDeviceIdentifierAtIndex;
  _BOOL8 v5;
  uint64_t v6;
  __CFArray *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue())
    v1 = 1;
  else
    v1 = FigCFArrayContainsValue() != 0;
  v2 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1EE2B3CF0);
  v3 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  v5 = 0;
  if (v3)
  {
    if (v1)
    {
      CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
      if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v2))
        v5 = 1;
    }
  }
  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", v5);
  v7 = CMSMUtility_CopyCurrentRouteIdentifiers();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
    CFRelease(v0);
  if (v7)
    CFRelease(v7);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return v6;
}

const void *CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(CFIndex a1)
{
  CFIndex Count;
  const void *ValueAtIndex;

  MEMORY[0x1940352BC](gCMSM);
  Count = qword_1EE2B3C10;
  if (qword_1EE2B3C10)
    Count = CFArrayGetCount((CFArrayRef)qword_1EE2B3C10);
  if (Count <= a1)
    ValueAtIndex = 0;
  else
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1EE2B3C10, a1);
  MEMORY[0x1940352C8](gCMSM);
  return ValueAtIndex;
}

CFArrayRef CMSMUtility_CopyDisplayIDsOfActiveSessions()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  CFArrayRef Copy;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v7, "isActive")
          && objc_msgSend(v7, "displayID")
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(v7, "audioCategory")))
        {
          CFArrayAppendValue(Mutable, (const void *)objc_msgSend(v7, "displayID"));
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  Copy = CFArrayCreateCopy(v0, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return Copy;
}

uint64_t CMSM_GetFakeSharedAudioRouteAsPicked()
{
  return word_1EE2B3C40;
}

__CFArray *CMSMUtility_CreateOverridePortsList(int a1, int a2)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int valuePtr;
  int v13;

  valuePtr = a2;
  v13 = a1;
  if ((a1 + 1) <= 1 && a2 == 0)
    return 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    v7 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      v8 = v7;
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
    }
  }
  if ((a1 - 1) <= 0xFFFFFFFD)
  {
    v9 = CFNumberCreate(v5, kCFNumberSInt32Type, &v13);
    if (v9)
    {
      v10 = v9;
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v10);
    }
  }
  return Mutable;
}

__CFArray *CMSMUtility_CopyMostImportantPlayingSession()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex v2;
  __CFArray *v3;
  __CFArray *v4;
  __CFArray *v5;
  __CFArray *ValueAtIndex;
  __CFArray *v7;
  __CFArray *v8;
  __CFArray *v10;

  v0 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  if (v0)
  {
    v1 = v0;
    if (CFArrayGetCount(v0) < 1)
    {
      v5 = 0;
      v4 = 0;
      v3 = 0;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = 0;
      do
      {
        ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(v1, v2);
        if ((-[__CFArray hasPhoneCallBehavior](ValueAtIndex, "hasPhoneCallBehavior") & 1) != 0
          || CMSUtility_IsAudioCategoryRingtone(ValueAtIndex))
        {
          v5 = ValueAtIndex;
        }
        else if (-[__CFArray isTheAssistant](ValueAtIndex, "isTheAssistant"))
        {
          v4 = ValueAtIndex;
        }
        else
        {
          v3 = ValueAtIndex;
        }
        ++v2;
      }
      while (v2 < CFArrayGetCount(v1));
    }
    if (v4)
      v7 = v4;
    else
      v7 = v3;
    if (v5)
      v8 = v5;
    else
      v8 = v7;
    v10 = v8;
    CFRelease(v1);
    v0 = v10;
  }
  return v0;
}

__CFArray *CMSMUtility_CopyPlayingSessionsUsingRoutingContext()
{
  __CFArray *Mutable;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActive"))
        {
          if (objc_msgSend(v6, "isPlaying"))
          {
            objc_msgSend(v6, "routingContextUUID");
            if (FigCFEqual())
              CFArrayAppendValue(Mutable, v6);
          }
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return Mutable;
}

void *CMSMUtility_CopyMXCoreSessionWithID(uint64_t a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "ID"), "unsignedLongLongValue") == a1)
        {
          v8 = v7;
          goto LABEL_11;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v7;
}

id CMSMUtility_CopyActiveMXCoreSessionEligibleForNowPlayingAppConsideration(uint64_t a1)
{
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v9;
LABEL_4:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v5);
        if (objc_msgSend(v6, "isActive"))
        {
          objc_msgSend(v6, "displayID");
          if (FigCFEqual())
          {
            if (CMSUtility_GetIsEligibleForNowPlayingAppConsideration(v6))
              break;
          }
        }
        if (v3 == ++v5)
        {
          v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
          if (v3)
            goto LABEL_4;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v6 = 0;
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void *CMSMUtility_GetPlayingPhoneCallOrRingtoneSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v8 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v4);
      if (((objc_msgSend(v5, "hasPhoneCallBehavior") & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5))
        && objc_msgSend(v5, "isActive")
        && (objc_msgSend(v5, "isPlaying") & 1) != 0)
      {
        break;
      }
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

void *CMSMUtility_CopyActiveSessionWithPhoneCallBehaviorOrRingtone()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  id v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && ((objc_msgSend(v5, "hasPhoneCallBehavior") & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5)))
        {
          v6 = v5;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

void *CMSMUtility_CopyActiveSiriSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  id v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isTheAssistant") && objc_msgSend(v5, "isActive"))
        {
          v6 = v5;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSMUtility_ActiveVideoConferenceExists()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive"))
        {
          objc_msgSend(v5, "audioMode");
          if (FigCFEqual() || (objc_msgSend(v5, "audioMode"), FigCFEqual()))
          {
            if (CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(v5, "audioCategory")))
            {
              v6 = 1;
              goto LABEL_14;
            }
          }
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_ClearOverridesForPhoneCallSessions(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSDictionary *v6;
  uint64_t i;
  void *v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    v6 = (NSDictionary *)*MEMORY[0x1E0C9AE40];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "hasPhoneCallBehavior"))
        {
          v9 = objc_msgSend(v8, "isActive");
          if (a1 == 1)
          {
            if (v9)
              MXCoreSessionSetProperty(v8, CFSTR("OverrideRoute"), 0, 0);
          }
        }
        if (objc_msgSend(v8, "isActive"))
          MXCoreSessionSetProperty(v8, CFSTR("UserMuted"), v6, 0);
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }
  return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
}

uint64_t CMSMUtility_IsSiriActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isTheAssistant") && (objc_msgSend(v5, "isActive") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_DoesSiriAllowMixableAudioWhileRecording()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isTheAssistant")
          && objc_msgSend(v5, "isRecording")
          && (objc_msgSend(v5, "allowMixableAudioWhileRecording") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

void CMSMUtility_UpdateSecureMicrophonePolicy(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  os_log_type_t type;
  unsigned int v20;
  _BYTE v21[128];
  int v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (CMSMDeviceState_IsSmartCoverClosed()
    && CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone())
  {
    if (a1)
    {
      if (CMSUtility_GetIsRecording(a1)
        && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_InterruptSessionForSecureMicrophonePolicy(a1);
      }
    }
    else
    {
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v5; ++i)
          {
            if (*(_QWORD *)v16 != v6)
              objc_enumerationMutation(v3);
            v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
            if (CMSUtility_GetIsRecording(v8)
              && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(v8))
            {
              if (dword_1EE2B3F38)
              {
                v20 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v10 = v20;
                if (os_log_type_enabled(v9, type))
                  v11 = v10;
                else
                  v11 = v10 & 0xFFFFFFFE;
                if (v11)
                {
                  v12 = objc_msgSend(v8, "clientName");
                  v22 = 136315394;
                  v23 = "CMSMUtility_UpdateSecureMicrophonePolicy";
                  v24 = 2114;
                  v25 = v12;
                  LODWORD(v14) = 22;
                  v13 = &v22;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CMSUtility_InterruptSessionForSecureMicrophonePolicy(v8);
            }
          }
          v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
        }
        while (v5);
      }
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v13, v14), "mxCoreSessionListEndIteration");
    }
  }
}

