uint64_t CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone()
{
  uint64_t result;

  result = CMSMUtility_GetCurrentInputPortAtIndex(0);
  if ((_DWORD)result)
    return vaeDoesPortSupportSecureMicrophone(result);
  return result;
}

uint64_t CMSMUtility_ShouldIgnorePlayCommandsFromAccessory()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive"))
        {
          if ((objc_msgSend(v5, "hasPhoneCallBehavior") & 1) != 0
            || CMSUtility_IsAudioCategoryRingtone(v5)
            || (objc_msgSend(v5, "isTheAssistant") & 1) != 0
            || (objc_msgSend(v5, "audioCategory"), FigCFEqual()))
          {
            v6 = 1;
            goto LABEL_16;
          }
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v6 = 0;
      if (v2)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_16:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_SomeClientIsPlayingLongFormAudio()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isPlaying")
          && (objc_msgSend(v5, "doesntActuallyPlayAudio") & 1) == 0
          && CMSUtility_IsSessionPlayingLongFormAudio(v5))
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_SomeClientIsPlayingToAirPlay()
{
  uint64_t v0;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSPointerArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CFTypeRef v14;
  CFTypeRef cf;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABB68))
    return 0;
  CMScreenGetScreenState();
  if (FigCFEqual())
    return 0;
  CMScreenGetScreenType();
  if (!FigCFEqual())
    return 0;
  v14 = 0;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)-[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID"), 0, (uint64_t)&cf);
  if (cf)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA40E0], *MEMORY[0x1E0C9AE00], &v14);
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v9, "isPlaying")
          && (!objc_msgSend(v9, "doesntActuallyPlayAudio") || FigCFEqual())
          && CMSUtility_IsPlayingToDefaultVAD(v9))
        {
          v0 = 1;
          goto LABEL_22;
        }
      }
      v6 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
  v0 = 0;
LABEL_22:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v14)
    CFRelease(v14);
  return v0;
}

uint64_t CMSMUtility_IsAnyVoicePromptSessionThatDoesNotControlHardwareActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        objc_msgSend(v5, "audioMode");
        if (FigCFEqual()
          && objc_msgSend(v5, "dontTakeOverHardware")
          && (objc_msgSend(v5, "isActive") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_IsAirPlayVideoActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v4), "isActiveOverAirPlayVideo") & 1) != 0)
        {
          v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_11:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsPlaying()
{
  int v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  int v7;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C06;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "isPlaying") && CMSUtility_IsLongFormVideoSession(v6))
        {
          v7 = 1;
          goto LABEL_13;
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v3)
        continue;
      break;
    }
    v7 = 0;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  byte_1EE2B3C06 = v7;
  result = MEMORY[0x1940352C8](gCMSM);
  if (v7 != v0)
  {
    result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingDidChange(v7);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionActiveOverAirPlayVideo()
{
  uint64_t v0;

  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C04;
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionPlayingOverAirPlayVideo()
{
  uint64_t v0;

  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C05;
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionPlaying()
{
  uint64_t v0;

  MEMORY[0x1940352BC](gCMSM);
  v0 = byte_1EE2B3C06;
  MEMORY[0x1940352C8](gCMSM);
  return v0;
}

BOOL CMSMUtility_AllowedToUseGPSInBackground(const __CFArray *a1)
{
  CFRange v3;

  v3.length = CFArrayGetCount(a1);
  v3.location = 0;
  return CFArrayContainsValue(a1, v3, CFSTR("location")) != 0;
}

BOOL CMSMUtility_iOSWillRequestCarMainAudio(int a1)
{
  __CFArray *v2;
  const __CFArray *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  CFIndex v7;
  void *ValueAtIndex;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t *v11;

  v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v7);
        if ((objc_msgSend(ValueAtIndex, "hasPhoneCallBehavior") & 1) != 0
          || CMSUtility_IsAudioCategoryRingtone(ValueAtIndex))
        {
          v6 = (unint64_t)ValueAtIndex;
        }
        else if (objc_msgSend(ValueAtIndex, "isTheAssistant"))
        {
          v5 = (unint64_t)ValueAtIndex;
        }
        else
        {
          v4 = ValueAtIndex;
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(v3));
    }
    v11 = (uint64_t *)kFigEndpointCentralTransferType_Borrow;
    if (!(v6 | v5) && !CMSUtility_ShouldBorrowCarMainAudio(v4))
      v11 = &kFigEndpointCentralTransferType_Take;
    v9 = (const __CFString *)*v11;
    CFRelease(v3);
    if (a1)
      goto LABEL_19;
  }
  else
  {
    v9 = 0;
    if (a1)
    {
LABEL_19:
      v10 = CFSTR("Borrow");
      return v9 == v10;
    }
  }
  v10 = CFSTR("Take");
  return v9 == v10;
}

uint64_t CMSMUtility_DoesiOSHaveCarPlayScreen()
{
  return FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F4A8, 0x1E30AA5A8);
}

uint64_t CMSMUtility_DoesiOSHaveCarPlayMainAudio()
{
  return FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F4A8, 0x1E30AA588);
}

uint64_t CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(uint64_t result)
{
  byte_1EE2B3CE0 = result;
  return result;
}

uint64_t CMSMUtility_IsCarPlayNowPlayingStateSaved()
{
  return byte_1EE2B3D39;
}

uint64_t CMSMUtility_CarPlayIsPlayingLongerDurationSession()
{
  id v0;
  int v1;
  int ResourceTypeBorrowConstraint;
  uint64_t v3;
  NSPointerArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = CMSMUtility_CopyCarPlaySession();
  if (v0)
  {

    MEMORY[0x1940352BC](gCMSM);
    v1 = FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F488, 0x1E30AA588);
    ResourceTypeBorrowConstraint = FigEndpointCentralGetResourceTypeBorrowConstraint(qword_1EE2B3CD8, 0x1E30AA588);
    MEMORY[0x1940352C8](gCMSM);
    if (v1 && ResourceTypeBorrowConstraint == 1000)
    {
      v3 = 1;
    }
    else
    {
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v4 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v13;
        while (2)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v13 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
            if (objc_msgSend(v9, "isActive")
              && (CMSUtility_IsAudioCategoryVoicemail(v9)
               || (objc_msgSend(v9, "hasPhoneCallBehavior") & 1) != 0))
            {
              v3 = 1;
              goto LABEL_18;
            }
          }
          v6 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v6)
            continue;
          break;
        }
      }
      v3 = 0;
LABEL_18:
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    }
  }
  else
  {
    v3 = 0;
  }
  if ((_DWORD)v3 != CMSMUtility_CarPlayIsPlayingLongerDurationSession_cachedIsPlayingLongerDurationSession)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_CarPlayIsPlayingLongerDurationSession_cachedIsPlayingLongerDurationSession = v3;
  }
  return v3;
}

CFTypeRef CMSMUtility_CopyStarkEndpointCentral()
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EE2B3CD8;
  if (qword_1EE2B3CD8)
    return CFRetain((CFTypeRef)qword_1EE2B3CD8);
  return result;
}

uint64_t CMSMUtility_CopyFigStarkModeController(CFTypeRef *a1)
{
  CFTypeRef v2;
  const void *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1 && (cf[0] = 0, qword_1EE2B3CD8) && (v2 = CFRetain((CFTypeRef)qword_1EE2B3CD8)) != 0)
  {
    v3 = v2;
    v4 = FigEndpointCentralCopyStarkModeController((uint64_t)v2, cf);
    if ((_DWORD)v4)
    {
      FigSignalErrorAt();
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a1 = cf[0];
      cf[0] = 0;
    }
    CFRelease(v3);
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v4;
}

uint64_t CMSMUtility_DoesCarPlaySupportMixableSiri()
{
  CFTypeRef v0;
  CFTypeRef v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[21];

  v6[20] = *MEMORY[0x1E0C80C00];
  v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  v6[0] = *MEMORY[0x1E0C9AE40];
  if (v1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4420], *MEMORY[0x1E0C9AE00], v6);
  }
  if (FigCFEqual())
  {
    if (!dword_1EE2B3F38)
      goto LABEL_9;
  }
  else if (!dword_1EE2B3F38)
  {
    goto LABEL_9;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_9:
  if (v1)
    CFRelease(v1);
  if (v0)
    CFRelease(v0);
  return FigCFEqual();
}

uint64_t CMSMUtility_UpdateVoiceAssistantActiveStateForCarPlay(void *a1)
{
  char IsSiriActive;

  if (!qword_1EE2B3CD8 || !objc_msgSend(a1, "isTheAssistant"))
    return 0;
  if ((objc_msgSend(a1, "isActive") & 1) != 0)
    IsSiriActive = 1;
  else
    IsSiriActive = CMSMUtility_IsSiriActive();
  return FigEndpointCentralUpdateIsVoiceAssistantActive(qword_1EE2B3CD8, IsSiriActive);
}

uint64_t CMSMUtility_ShouldEnableLongPullModeWhenScreenIsBlanked()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && (CMSUtility_GetPreferredIOBufferDuration(v5, v6) != 0.0
           || CMSUtility_GetPreferredIOBufferFrames(v5, v7)
           || objc_msgSend(v5, "vpBlockConfiguration") && (objc_msgSend(v5, "isRecording") & 1) != 0))
        {
          v8 = 0;
          goto LABEL_15;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v2)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_15:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

uint64_t CMSMUtility_ReassignHWControlFlagsAfterMusicVADDestruction()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  NSPointerArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  NSPointerArray *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v22;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v22 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v4);
      if (objc_msgSend(v5, "isActive"))
      {
        CMSUtility_GetCurrentAudioDestination(v5);
        if (FigCFEqual())
        {
          if ((objc_msgSend(v5, "prefersToTakeHWControlFlagsFromAnotherSession") & 1) == 0
            && (objc_msgSend(v5, "currentlyControllingFlags") & 2) != 0)
          {
            break;
          }
        }
      }
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v5 = 0;
  }
  result = -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (v5)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v18;
      v16 = v7;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if (objc_msgSend(v12, "isActive", v14, v15))
          {
            CMSUtility_GetCurrentAudioDestination(v12);
            if (FigCFEqual())
            {
              if (objc_msgSend(v12, "prefersToTakeHWControlFlagsFromAnotherSession")
                && ((objc_msgSend(v12, "hwControlFlags") & 2) != 0
                 || (objc_msgSend(v12, "hwControlFlags") & 0x20000) != 0))
              {
                if (dword_1EE2B3F38)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v7 = v16;
                }
                cmsTryToTakeControl(v12);
              }
            }
          }
        }
        v9 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
      }
      while (v9);
    }
    return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v14, v15), "mxCoreSessionListEndIteration");
  }
  return result;
}

void CMSMUtility_NotifyEachSubscribedSession(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CMSMUtility_ApplyForEachMatchingSessionGuts(a1, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_SessionHasSubscribedToNotification, a2, 0, a2, a3, a4);
}

float CMSMUtility_GetVoiceOverDuckFadeDuration()
{
  CFIndex AppIntegerValue;
  Boolean keyExistsAndHasValidFormat;

  if ((CMSMUtility_GetVoiceOverDuckFadeDuration_gCheckedVoiceOverDuckFadeDuration & 1) == 0)
  {
    keyExistsAndHasValidFormat = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("voiceover_duckfadeduration_ms"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      *(float *)&CMSMUtility_GetVoiceOverDuckFadeDuration_gVoiceOverDuckFadeDuration = (float)AppIntegerValue / 1000.0;
    CMSMUtility_GetVoiceOverDuckFadeDuration_gCheckedVoiceOverDuckFadeDuration = 1;
  }
  return *(float *)&CMSMUtility_GetVoiceOverDuckFadeDuration_gVoiceOverDuckFadeDuration;
}

void CMSMUtility_CreateTokensFromDeviceUID(CFStringRef theString, CFStringRef *a2, CFStringRef *a3)
{
  CFRange v6;
  CFIndex Length;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFRange v10;
  CFStringRef v11;
  CFRange v12;

  if ((unint64_t)a2 | (unint64_t)a3)
  {
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    if (theString)
    {
      v6 = CFStringFind(theString, CFSTR("-"), 4uLL);
      Length = CFStringGetLength(theString);
      if (v6.length <= 0)
      {
        v10.length = Length;
        v9 = 0;
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      }
      else
      {
        v12.length = CFStringGetLength(theString) + ~v6.location;
        v12.location = v6.location + 1;
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v9 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, v12);
        v10.length = v6.location;
      }
      v10.location = 0;
      v11 = CFStringCreateWithSubstring(v8, theString, v10);
      if (a2)
      {
        *a2 = v11;
        v11 = 0;
      }
      if (a3)
      {
        *a3 = v9;
        v9 = 0;
      }
      if (v11)
        CFRelease(v11);
      if (v9)
        CFRelease(v9);
    }
  }
}

const __CFString *CMSMUtility_CFStringEqualCaseInsensitive(const __CFString *result, const __CFString *a2)
{
  if (result == a2)
    return (const __CFString *)1;
  if (result)
    return (const __CFString *)(CFStringCompare(result, a2, 1uLL) == kCFCompareEqualTo);
  return result;
}

__CFString *CMSMUtility_CreateFormattedDateAndTime()
{
  __CFCalendar *v0;
  __CFString *Mutable;
  __CFString *v2;
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = CFCalendarCopyCurrent();
  v6 = 0;
  v7 = 0;
  v5 = 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = Mutable;
  if (v0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    CFCalendarDecomposeAbsoluteTime(v0, Current, "yMdHms", (char *)&v7 + 4, &v7, (char *)&v6 + 4, &v6, (char *)&v5 + 4, &v5);
    CFStringAppendFormat(v2, 0, CFSTR("%d/%d/%d-%.2d:%.2d:%.2d"), v7, HIDWORD(v6), HIDWORD(v7), v6, HIDWORD(v5), v5);
    CFRelease(v0);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("%d/%d/%d-%.2d:%.2d:%.2d"), 0, 0, 0, 0, 0, 0);
  }
  return v2;
}

CFIndex CMSMUtility_PrintRouteDescriptions(int a1, CFArrayRef theArray)
{
  CFIndex result;

  if (theArray)
    return CFArrayGetCount(theArray);
  return result;
}

uint64_t CMSMUtility_IsVoiceCallCategory()
{
  return FigCFEqual();
}

BOOL CMSMUtility_IsChatMode()
{
  return FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual() != 0;
}

const __CFString *CMSMUtility_GetVADNameforSiriEndpointID()
{
  return CFSTR("VirtualAudioDevice_SiriEndpoint");
}

CFTypeRef CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary()
{
  CFTypeRef result;
  const __CFAllocator *v1;
  CFArrayRef v2;
  const void *v3[2];

  v3[1] = *(const void **)MEMORY[0x1E0C80C00];
  result = (CFTypeRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour;
  if (CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour)
    return CFRetain(result);
  v3[0] = CFSTR("VirtualAudioDevice_Default");
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 1, MEMORY[0x1E0C9B378]);
  CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour = (uint64_t)CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue((CFMutableDictionaryRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour, CFSTR("AudioBehaviour_Destination"), v2);
  CFDictionarySetValue((CFMutableDictionaryRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour, CFSTR("AudioBehaviour_Stream"), CFSTR("Stream_Primary"));
  if (v2)
    CFRelease(v2);
  result = (CFTypeRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour;
  if (CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour)
    return CFRetain(result);
  return result;
}

float CMSMUtility_GetFadeInDurationForPlaybackHandoff()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!MX_FeatureFlags_IsHandoffEnabled())
    return 0.0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  gFadeInDurationAppliedForPlaybackHandoff = 1;
  return 0.5;
}

const char *CMSMUtility_GetVolumeOperationName(int a1)
{
  if ((a1 - 1) > 0xD)
    return "UNKNOWN";
  else
    return off_1E309CBE8[a1 - 1];
}

const __CFString *CMSMUtility_GetStringForRouteControlFeatures(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("UNKNOWN");
  else
    return off_1E309CC58[a1];
}

CFTypeRef CMSMUtility_CopyMostRelevantAirPlayAudioModeForRoutingContext()
{
  __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  void *ValueAtIndex;
  int v11;
  int v12;
  int v13;
  CFTypeRef v14;

  v0 = CMSMUtility_CopyPlayingSessionsUsingRoutingContext();
  if (!v0)
    return 0;
  v1 = v0;
  Count = CFArrayGetCount(v0);
  if (Count < 1)
    goto LABEL_17;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  v6 = (const void *)*MEMORY[0x1E0CA46C8];
  v7 = (const void *)*MEMORY[0x1E0CA46C0];
  v8 = (const void *)*MEMORY[0x1E0CA46D0];
  do
  {
    v9 = v5;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v1, v4);
    objc_msgSend(ValueAtIndex, "audioCategory");
    if (FigCFEqual())
    {
      objc_msgSend(ValueAtIndex, "audioMode");
      v11 = FigCFEqual();
      v5 = v6;
      if (!v11)
      {
        objc_msgSend(ValueAtIndex, "audioMode");
        v12 = FigCFEqual();
        v5 = v7;
        if (v12)
        {
          v5 = v8;
          if (v9)
          {
            v13 = FigCFEqual();
            v5 = v8;
            if (!v13)
              v5 = v7;
          }
        }
      }
    }
    else if (v9)
    {
      v5 = v9;
    }
    else
    {
      v5 = v7;
    }
    ++v4;
  }
  while (v3 != v4);
  if (v5)
    v14 = CFRetain(v5);
  else
LABEL_17:
    v14 = 0;
  CFRelease(v1);
  return v14;
}

uint64_t CMSMUtility_ChangeMainVolumeForSession(void *a1, float a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef, float);
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, CFTypeRef, float);
  CFTypeRef v17;
  CFTypeRef v18;
  void (*v19)(CFTypeRef, CFTypeRef, uint64_t);
  CFTypeRef v20;
  CFTypeRef v21;
  void (*v22)(CFTypeRef, CFTypeRef, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v25;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  FigVolumeControllerCopySharedController(cf);
  v25 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(objc_msgSend(a1, "routingContextUUID"), (uint64_t)&v25);
  v10 = 0;
  if (a5 > 10)
  {
    if (a5 == 12)
      goto LABEL_9;
    if (a5 != 11)
      goto LABEL_21;
LABEL_7:
    v12 = v25;
    v11 = cf[0];
    v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v13)
      v10 = v13(v11, v12, a2);
    else
      v10 = 4294954514;
    v18 = v25;
    v17 = cf[0];
    v19 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v19)
      v19(v17, v18, a6);
    if (dword_1EE2B3F38)
      goto LABEL_20;
    goto LABEL_21;
  }
  if (a5 == 1)
    goto LABEL_7;
  if (a5 != 2)
    goto LABEL_21;
LABEL_9:
  v15 = v25;
  v14 = cf[0];
  v16 = *(uint64_t (**)(CFTypeRef, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v16)
    v10 = v16(v14, v15, a2);
  else
    v10 = 4294954514;
  v21 = v25;
  v20 = cf[0];
  v22 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v22)
    v22(v20, v21, a6);
  if (dword_1EE2B3F38)
  {
LABEL_20:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v25)
    CFRelease(v25);
  return v10;
}

CFTypeRef CMSMUtility_CopySystemMusicRoutingContextUUID()
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EE2B3D08;
  if (qword_1EE2B3D08)
    return CFRetain((CFTypeRef)qword_1EE2B3D08);
  return result;
}

uint64_t CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * i);
        objc_msgSend(v5, "routingContextUUID");
        if (FigCFEqual())
          cmsUpdateAudioBehavior(v5);
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v2);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return 0;
}

void CMSMUtility_UpdateAudioBehaviourForVoiceOverSessions()
{
  __CFArray *v0;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue() || FigCFArrayContainsValue())
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v8;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v8 != v4)
            objc_enumerationMutation(v1);
          v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * i);
          objc_msgSend(v6, "audioCategory");
          if (FigCFEqual())
            cmsUpdateAudioBehavior(v6);
        }
        v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v3);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  }
  if (v0)
    CFRelease(v0);
}

uint64_t CMSMUtility_SetNonLongFormMediaApps(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352BC](gCMSM);
  v3 = (const void *)qword_1EE2B3D28;
  qword_1EE2B3D28 = (uint64_t)a1;
  if (a1)
    CFRetain(a1);
  if (v3)
    CFRelease(v3);
  return MEMORY[0x1940352C8](gCMSM);
}

uint64_t CMSMUtility_InterruptSessionsWithRoutingContextUUID()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(v5, "routingContextUUID", v8, v9);
        if (FigCFEqual()
          && objc_msgSend(v5, "isActive")
          && objc_msgSend(v5, "isPlaying"))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v2);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v8, v9), "mxCoreSessionListEndIteration");
  return 0;
}

uint64_t CMSMUtility_InterruptActiveSiriSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v5, "isTheAssistant") && objc_msgSend(v5, "isActive"))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
          goto LABEL_14;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v8, v9), "mxCoreSessionListEndIteration");
  return 0;
}

uint64_t CMSMUtility_IsAnySessionPlayingToIndependentSystemMusicContext()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && objc_msgSend(v5, "isPlaying")
          && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(v5, "routingContextUUID")))
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_13:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive")
          && (objc_msgSend(v5, "prefersNoInterruptionsByRingtonesAndAlerts") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_IsAnyActiveSessionRoutedToDestination()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive"))
        {
          CMSUtility_GetCurrentAudioDestination(v5);
          if (FigCFEqual())
          {
            v6 = 1;
            goto LABEL_12;
          }
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

CFMutableArrayRef CMSMUtility_CopyActiveClientPIDsThatHideTheSpeechDetectionDevice()
{
  CFMutableArrayRef Mutable;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v9;
  const __CFArray *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActive"))
        {
          VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v6, "audioCategory"));
          VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v6, "audioMode"));
          v9 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)objc_msgSend(v6, "activationContext"), (const void *)objc_msgSend(v6, "allowedPortTypes"), 1, 0x1E30A86C8);
          if (v9)
          {
            v10 = v9;
            if (!CFArrayGetCount(v9))
            {
              objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
              FigCFArrayAppendInt32();
            }
            CFRelease(v10);
          }
          else
          {
            objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
            FigCFArrayAppendInt32();
          }
        }
      }
      v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v3);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return Mutable;
}

uint64_t CMSMUtility_IsIDSSessionActive()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "isActive") && (objc_msgSend(v5, "isIDSMXCoreSession") & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v6;
}

uint64_t CMSMUtility_HandOverInterruptionsToSession(void *a1, void *a2)
{
  NSPointerArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if ((void *)objc_msgSend(v9, "interruptingSession") == a1 && objc_msgSend(v9, "waitingToResume"))
          objc_msgSend(v9, "setInterruptingSession:", a2);
      }
      v6 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if ((objc_msgSend(a2, "triggeredRemoteInterruption") & 1) != 0)
    v10 = 1;
  else
    v10 = objc_msgSend(a1, "triggeredRemoteInterruption");
  objc_msgSend(a2, "setTriggeredRemoteInterruption:", v10);
  return objc_msgSend(a1, "setTriggeredRemoteInterruption:", 0);
}

void CMSMUtility_UpdateSupportedOutputChannelLayouts(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  int *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  os_log_type_t type;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  int v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  CFTypeRef cf[16];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", objc_msgSend(a1, "valueForKey:", CFSTR("SupportedAudioCapabilities_SupportedChannelLayoutTags")));
    v2 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v30;
      v22 = v2;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v30 != v6)
            objc_enumerationMutation(v2);
          v8 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          if (objc_msgSend(v8, "isActive")
            && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v8))
          {
            if (dword_1EE2B3F38)
            {
              v28 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v2 = v22;
            }
            objc_msgSend(v8, "setSupportedOutputChannelLayouts:", v1, v20, v21);
            CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(v8);
            v5 = 1;
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      }
      while (v4);

      if ((v5 & 1) != 0)
        goto LABEL_38;
    }
    else
    {

    }
    if (dword_1EE2B3F38)
    {
      v28 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
    FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts((uint64_t)cf[0], (uint64_t)v1);
    if (cf[0])
      CFRelease(cf[0]);
    goto LABEL_38;
  }
  v1 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v10 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)v24 != v12)
          objc_enumerationMutation(v1);
        v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
        if (objc_msgSend((id)objc_msgSend(v14, "supportedOutputChannelLayouts"), "count"))
        {
          if (dword_1EE2B3F38)
          {
            v28 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v16 = v28;
            if (os_log_type_enabled(v15, type))
              v17 = v16;
            else
              v17 = v16 & 0xFFFFFFFE;
            if (v17)
            {
              v18 = objc_msgSend(v14, "clientName");
              v34 = 136315394;
              v35 = "CMSMUtility_UpdateSupportedOutputChannelLayouts";
              v36 = 2114;
              v37 = v18;
              LODWORD(v21) = 22;
              v20 = &v34;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v14, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E0C99D20], "array", v20, v21));
          CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(v14);
        }
      }
      v11 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v11);
  }
LABEL_38:

}

void CMSMUtility_UpdateBadgeType()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v0 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(v0);
        v6 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActive")
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v6))
        {
          v7 = (void *)objc_msgSend(v6, "copyMXSessionList");
          v13 = 0u;
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v14;
            do
            {
              for (j = 0; j != v9; ++j)
              {
                if (*(_QWORD *)v14 != v10)
                  objc_enumerationMutation(v7);
                objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * j), "updateBadgeType");
              }
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
            }
            while (v9);
          }

          v3 = 1;
        }
      }
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  if ((v3 & 1) == 0)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t CMSMUtility_IsAnyMXSessionPlayingWithEachMutePriority()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19;
  NSPointerArray *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v1)
  {
    v2 = v1;
    v22 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)v28;
    v19 = *(_QWORD *)v28;
    v20 = v0;
    do
    {
      v6 = 0;
      v21 = v2;
      do
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v0);
        v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v6);
        if (objc_msgSend(v7, "isActive")
          && objc_msgSend(v7, "isPlaying")
          && !objc_msgSend(v7, "shadowingAudioSessionID")
          && !CMSUtility_GetOptOutOfMutePriority(v7))
        {
          v8 = (void *)objc_msgSend(v7, "copyMXSessionList");
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v24;
            do
            {
              v12 = 0;
              do
              {
                if (*(_QWORD *)v24 != v11)
                  objc_enumerationMutation(v8);
                v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v12);
                v14 = (void *)objc_msgSend(v13, "getMutePriority");
                v15 = v14;
                if (v4 || (objc_msgSend(v14, "isEqualToString:", CFSTR("MutePriority_One")) & 1) == 0)
                {
                  if (objc_msgSend(v13, "getIsPlaying")
                    && objc_msgSend(v13, "getActuallyPlaysAudio")
                    && (objc_msgSend(v15, "isEqualToString:", CFSTR("MutePriority_One")) & 1) == 0)
                  {
                    if (v3 || (objc_msgSend(v15, "isEqualToString:", CFSTR("MutePriority_Two")) & 1) == 0)
                    {
                      if (HIDWORD(v22) || (objc_msgSend(v15, "isEqualToString:", CFSTR("MutePriority_Three")) & 1) == 0)
                      {
                        if (!(_BYTE)v22)
                          LODWORD(v22) = objc_msgSend(v15, "isEqualToString:", CFSTR("MutePriority_Four"));
                      }
                      else
                      {
                        HIDWORD(v22) = 1;
                      }
                    }
                    else
                    {
                      v3 = 1;
                    }
                  }
                }
                else
                {
                  v4 = 1;
                }
                ++v12;
              }
              while (v10 != v12);
              v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
              v10 = v16;
            }
            while (v16);
          }

          v5 = v19;
          v0 = v20;
          v2 = v21;
        }
        ++v6;
      }
      while (v6 != v2);
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v2);
  }
  else
  {
    v22 = 0;
    v3 = 0;
    v4 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return (HIDWORD(v22) << 16) | ((_DWORD)v22 << 24) | (v3 << 8) | v4;
}

uint64_t CMSMUtility_AudioToolboxHandleInterruptionCommandWithMXSessionID(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ClientPID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  if (off_1EE2B3BB8)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))off_1EE2B3BB8;
    ClientPID = CMSUtility_GetClientPID(a1);
    return v9(ClientPID, objc_msgSend(a1, "audioSessionID"), a2, a3, 0);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t CMSMUtility_AudioToolboxServerRefreshMuteState()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (off_1EE2B3BD8)
    return off_1EE2B3BD8();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294951609;
}

__CFArray *CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID(int a1)
{
  __CFArray *Mutable;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
          if (objc_msgSend(v8, "isActive")
            && objc_msgSend(v8, "shadowingAudioSessionID")
            && objc_msgSend(v8, "shadowingAudioSessionID") == a1)
          {
            CFArrayAppendValue(Mutable, v8);
          }
        }
        v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

void CMSMUtility_PostStopCommandToShadowingSessionsForSession(void *a1, unsigned __int8 a2)
{
  __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v2 = CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID(objc_msgSend(a1, "audioSessionID"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtilityApplier_PostNotification_StopCommand(v7, &v13);
      }
      v4 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
    }
    while (v4);
  }
  if (v2)
    CFRelease(v2);
}

void CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff()
{
  uint64_t v0;

  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff();
    if (gValidFadeOutAppliedForPlaybackHandoffToken)
    {
      if (gFadeOutDurationAppliedForPlaybackHandoff)
        v0 = 1000;
      else
        v0 = 0;
      notify_set_state(gFadeOutAppliedForPlaybackHandoffToken, v0);
      notify_post("com.apple.mediaexperience.fadeoutappliedforplaybackhandoff");
    }
  }
}

void cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff()
{
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    if (cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff_onceToken != -1)
      dispatch_once(&cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff_onceToken, &__block_literal_global_314);
  }
}

void CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff()
{
  uint64_t v0;

  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff();
    if (gValidFadeInAppliedForPlaybackHandoffToken)
    {
      if (gFadeInDurationAppliedForPlaybackHandoff)
        v0 = 500;
      else
        v0 = 0;
      notify_set_state(gFadeInAppliedForPlaybackHandoffToken, v0);
      notify_post("com.apple.mediaexperience.fadeinappliedforplaybackhandoff");
    }
  }
}

float CMSMUtility_GetFadeOutDurationForPlaybackHandoff()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!MX_FeatureFlags_IsHandoffEnabled())
    return 0.0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  gFadeOutDurationAppliedForPlaybackHandoff = 1;
  return 1.0;
}

void CMSMUtility_ApplyPIDToInheritAppStateFrom(int a1, uint64_t a2)
{
  NSPointerArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSPointerArray *v19;
  unsigned int v20;
  _QWORD v21[6];
  os_log_type_t type;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  _DWORD valuePtr[32];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v28 = a1;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v25;
    v20 = a2;
    v19 = v4;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v25 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v9, "clientPID", v17, v18), "intValue") == a1
          && objc_msgSend(v9, "pidToInheritAppStateFrom") != (_DWORD)a2)
        {
          v10 = objc_msgSend(v9, "pidToInheritAppStateFrom");
          objc_msgSend(v9, "setPidToInheritAppStateFrom:", a2);
          MX_RunningBoardServices_StartMonitoringForPID(a2);
          if (v10 >= 1)
          {
            v23 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a2 = v20;
            v4 = v19;
          }
        }
      }
      v6 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v6);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v17, v18), "mxCoreSessionListEndIteration");
  valuePtr[0] = MX_RunningBoardServices_GetApplicationStateForPID(a2, 0);
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &v28);
  v15 = v14;
  if (v14)
    CFRetain(v14);
  if (v13)
    CFRetain(v13);
  v16 = MXGetSerialQueue();
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __CMSMUtility_ApplyPIDToInheritAppStateFrom_block_invoke;
  v21[3] = &__block_descriptor_48_e5_v8__0l;
  v21[4] = v15;
  v21[5] = v13;
  MXDispatchAsync((uint64_t)"CMSMUtility_ApplyPIDToInheritAppStateFrom", (uint64_t)"CMSessionManager_Utilities.m", 5792, 0, 0, v16, (uint64_t)v21);
  if (v13)
    CFRelease(v13);
  if (v15)
    CFRelease(v15);
}

uint64_t CMSMUtility_IAPShouldPauseOnHeadphoneDisconnect(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1)
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_315);
  if (IAPLibrary_sLib && dlsym((void *)IAPLibrary_sLib, "IAPAudioShouldPauseAudioOnHeadsetDisconnect"))
    return ((uint64_t (*)(uint64_t))softLinkIAPAudioShouldPauseAudioOnHeadsetDisconnect[0])(a1);
  else
    return 0;
}

uint64_t CMSMUtility_IAPAppProcessIDIsUsingAccessory(uint64_t a1)
{
  if (!a1)
    return 0;
  if (IAPLibrary_sOnce != -1)
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_315);
  if (IAPLibrary_sLib && dlsym((void *)IAPLibrary_sLib, "IAPAppProcessIDIsUsingAccessory"))
    return softLinkIAPAppProcessIDIsUsingAccessory(a1);
  else
    return 0;
}

CFIndex CMSMUtility_VibrationPatternIsActuallyGoingToVibe(CFIndex result)
{
  const __CFDictionary *v1;
  const __CFArray *Value;
  BOOL v3;
  const __CFArray *v4;
  CFRange v5;

  if (result)
  {
    v1 = (const __CFDictionary *)result;
    if (CFDictionaryContainsKey((CFDictionaryRef)result, CFSTR("VibePattern")))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v1, CFSTR("VibePattern"));
      result = CFArrayGetCount(Value);
      if (!result)
        return result;
      v5.length = CFArrayGetCount(Value);
      v5.location = 0;
      v3 = CFArrayContainsValue(Value, v5, (const void *)*MEMORY[0x1E0C9AE50]) == 0;
      return !v3;
    }
    if (CFDictionaryContainsKey(v1, CFSTR("OnDuration")))
      return 1;
    result = CFDictionaryContainsKey(v1, CFSTR("Atoms"));
    if ((_DWORD)result)
    {
      v4 = (const __CFArray *)CFDictionaryGetValue(v1, CFSTR("Atoms"));
      v3 = CFArrayGetCount(v4) == 0;
      return !v3;
    }
  }
  return result;
}

void *CMSMUtility_GetSharePlayMediaSession()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsSharePlayEnabled())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
LABEL_4:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v8 != v3)
        objc_enumerationMutation(v0);
      v5 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v4);
      if ((objc_msgSend(v5, "isSharePlayMediaSession") & 1) != 0)
        break;
      if (v2 == ++v4)
      {
        v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v5 = 0;
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v5;
}

uint64_t CMSMUtility_TransferVolumeControlFlagToSharePlayCapableMediaSession()
{
  uint64_t result;
  void *v1;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = MX_FeatureFlags_IsSharePlayEnabled();
  if ((_DWORD)result)
  {
    result = (uint64_t)CMSMUtility_GetSharePlayCapableActiveMediaSession();
    if (result)
    {
      v1 = (void *)result;
      result = CMSMUtility_IsSharePlayCapableCallSessionActive();
      if ((_DWORD)result)
      {
        -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
        v10 = 0u;
        v11 = 0u;
        v8 = 0u;
        v9 = 0u;
        v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
        v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v3)
        {
          v4 = v3;
          v5 = *(_QWORD *)v9;
          while (2)
          {
            for (i = 0; i != v4; ++i)
            {
              if (*(_QWORD *)v9 != v5)
                objc_enumerationMutation(v2);
              v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
              if (CMSUtility_GetIsActive(v7)
                && ((objc_msgSend(v7, "isSharePlayCallSession") & 1) != 0
                 || objc_msgSend(v7, "isSharePlayCapableCallSession")))
              {
                objc_msgSend(v7, "setCurrentlyControllingFlags:", objc_msgSend(v7, "currentlyControllingFlags") & 0xFFFFFFEFLL);
                objc_msgSend(v7, "setHwControlFlags:", 2);
                goto LABEL_16;
              }
            }
            v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
            if (v4)
              continue;
            break;
          }
        }
LABEL_16:
        -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
        cmsTryToTakeControl(v1);
        vaemConfigurePVMSettings((const __CFString *)objc_msgSend(v1, "audioMode"), 0);
        return objc_msgSend(v1, "setNeedToEndInterruption:", 1);
      }
    }
  }
  return result;
}

uint64_t CMSMUtility_TransferVolumeControlFlagToSharePlayCapableCallSession()
{
  uint64_t result;
  NSPointerArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = CMSMUtility_IsSharePlayCapableCallSessionActive();
  if ((_DWORD)result)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v1 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
    v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v8 != v4)
            objc_enumerationMutation(v1);
          v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * i);
          if (CMSUtility_GetIsActive(v6)
            && objc_msgSend(v6, "isSharePlayCapableCallSession"))
          {
            objc_msgSend(v6, "setHwControlFlags:", 18);
            return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
          }
        }
        v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v3)
          continue;
        break;
      }
    }
    return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  }
  return result;
}

void CMSMUtility_SetMediaPlaybackVolumeToCurrentPhoneCallVolume()
{
  uint64_t CurrentOutputPortAtIndex;
  AudioObjectID v1;
  id v2;
  const __CFString *v3;
  CFTypeRef v4;
  unsigned __int8 v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0.0;
  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    v1 = CurrentOutputPortAtIndex;
    v2 = vaeCopyFigOutputDeviceNameFromVADPort(CurrentOutputPortAtIndex);
    v3 = vaeCopyRouteSubtypeFromVADPort(v1);
    v4 = vaeCopyDeviceIdentifierFromVADPort(v1);
    v5 = getpid();
    v6 = MXSMPerformVolumeOperation(0xDu, CFSTR("PhoneCall"), v2, v4, v3, v5, 0, &v10, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0);
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
    if (v2)
      CFRelease(v2);
    if (!v6)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v8 = v10;
      v9 = getpid();
      MXSMPerformVolumeOperation(0xCu, CFSTR("Audio/Video"), 0, 0, 0, 0, v9, 0, v8, 0.0, 0.0, 0, 0, 0, 1u, 0);
    }
  }
}

void CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume()
{
  pid_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CurrentOutputPortAtIndex;
  AudioObjectID v3;
  id v4;
  CFStringRef v5;
  CFTypeRef v6;
  pid_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    v0 = getpid();
    if (!MXSMPerformVolumeOperation(13, (int)CFSTR("Audio/Video"), 0, 0, 0, 0, v0, (int)&v8, 0, 0, 0, 0, 0))
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
      v3 = CurrentOutputPortAtIndex;
      v4 = vaeCopyFigOutputDeviceNameFromVADPort(CurrentOutputPortAtIndex);
      v5 = vaeCopyRouteSubtypeFromVADPort(v3);
      v6 = vaeCopyDeviceIdentifierFromVADPort(v3);
      v7 = getpid();
      MXSMPerformVolumeOperation(12, (int)CFSTR("PhoneCall"), (int)v4, (int)v6, (int)v5, 0, v7, 0, 0, 0, 0, 1, 0);
      if (v6)
        CFRelease(v6);
      if (v5)
        CFRelease(v5);
      if (v4)
        CFRelease(v4);
    }
  }
}

uint64_t CMSMUtility_SetSharePlayInfoOnVA(void *a1)
{
  uint64_t result;
  int VADModeFromFigModeName;

  result = MX_FeatureFlags_IsSharePlayEnabled();
  if (a1 && (_DWORD)result)
  {
    if (objc_msgSend(a1, "isSharePlayMediaSession")
      && objc_msgSend(a1, "isActive")
      && CMSMUtility_IsSharePlayCallSessionActive())
    {
      VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(a1, "audioMode"));
      return CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(VADModeFromFigModeName, objc_msgSend(a1, "aggregateDeviceClockUID"));
    }
    else
    {
      result = objc_msgSend(a1, "isSharePlayCallSession");
      if ((_DWORD)result)
      {
        result = objc_msgSend(a1, "isActive");
        if ((_DWORD)result)
        {
          CMSMUtility_IsSharePlayMediaSessionActive();
          cmsSetCategoryOnPVMAndAudioDevice(a1);
        }
      }
    }
  }
  return result;
}

BOOL CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(uint64_t a1)
{
  _BOOL8 result;

  result = CMSMUtility_IsPlayAndRecordCategory(a1);
  if (result)
    return FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual() != 0;
  return result;
}

uint64_t CMSMUtility_InterruptAudioSessionIDForHandoff(uint64_t a1)
{
  id v1;
  void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  if (!(_DWORD)a1)
    return FigSignalErrorAt();
  v1 = -[MXSessionManager copySessionWithAudioSessionID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copySessionWithAudioSessionID:", a1);
  if (v1)
  {
    v2 = v1;
    CMSMUtility_PostStopCommandToShadowingSessionsForSession(v1, 1u);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSUtilityApplier_PostNotification_StopCommand(v2, 0);

    return 0;
  }
  else
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951615;
  }
}

const char *CMSMUtility_GetStyleString(int a1)
{
  const char *result;

  result = "NotSet";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "StopEveryone";
      break;
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      result = "StopThoseYouCanAllowingResumption_MixWithOthers";
      break;
    case 8:
      result = "StopThoseYouCan_MixWithOthers";
      break;
    default:
      if (a1 == 16)
      {
        result = "MixWithEveryone";
      }
      else if (a1 == 32)
      {
        result = "MixWithEveryone_DuckTheirVolume";
      }
      else
      {
LABEL_6:
        result = "UNKNOWN STYLE";
      }
      break;
  }
  return result;
}

uint64_t initIAPAudioShouldPauseAudioOnHeadsetDisconnect(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1)
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_315);
  softLinkIAPAudioShouldPauseAudioOnHeadsetDisconnect[0] = (uint64_t (*)())dlsym((void *)IAPLibrary_sLib, "IAPAudioShouldPauseAudioOnHeadsetDisconnect");
  return ((uint64_t (*)(uint64_t))softLinkIAPAudioShouldPauseAudioOnHeadsetDisconnect[0])(a1);
}

uint64_t initIAPAppProcessIDIsUsingAccessory(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1)
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_315);
  softLinkIAPAppProcessIDIsUsingAccessory = (uint64_t (*)())dlsym((void *)IAPLibrary_sLib, "IAPAppProcessIDIsUsingAccessory");
  return ((uint64_t (*)(uint64_t))softLinkIAPAppProcessIDIsUsingAccessory)(a1);
}

void sub_1936EDD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936EDE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936EDFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936EE150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1936EE270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __mxsystemstatus_initialize_block_invoke()
{
  NSObject *v0;
  objc_class *v1;
  objc_class *v2;
  id result;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!SystemStatusLibraryCore_frameworkLibrary)
  {
    v8 = xmmword_1E309CD78;
    v9 = 0;
    SystemStatusLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SystemStatusLibraryCore_frameworkLibrary)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_18:
    v7 = 0;
    goto LABEL_20;
  }
  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  gSerializationQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.MXSystemStatus", v0);
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = &v8;
  v9 = 0x3052000000;
  v10 = __Block_byref_object_copy__5;
  v11 = __Block_byref_object_dispose__5;
  v1 = (objc_class *)getSTMediaStatusDomainPublisherClass_softClass;
  v12 = getSTMediaStatusDomainPublisherClass_softClass;
  if (!getSTMediaStatusDomainPublisherClass_softClass)
  {
    v13 = MEMORY[0x1E0C809B0];
    v14 = 3221225472;
    v15 = __getSTMediaStatusDomainPublisherClass_block_invoke;
    v16 = &unk_1E3099018;
    v17 = &v8;
    __getSTMediaStatusDomainPublisherClass_block_invoke((uint64_t)&v13);
    v1 = *(objc_class **)(*((_QWORD *)&v8 + 1) + 40);
  }
  _Block_object_dispose(&v8, 8);
  stMediaStatusDomainPublisher = (uint64_t)objc_alloc_init(v1);
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = &v8;
  v9 = 0x3052000000;
  v10 = __Block_byref_object_copy__5;
  v11 = __Block_byref_object_dispose__5;
  v2 = (objc_class *)getSTMutableMediaStatusDomainDataClass_softClass;
  v12 = getSTMutableMediaStatusDomainDataClass_softClass;
  if (!getSTMutableMediaStatusDomainDataClass_softClass)
  {
    v13 = MEMORY[0x1E0C809B0];
    v14 = 3221225472;
    v15 = __getSTMutableMediaStatusDomainDataClass_block_invoke;
    v16 = &unk_1E3099018;
    v17 = &v8;
    __getSTMutableMediaStatusDomainDataClass_block_invoke((uint64_t)&v13);
    v2 = *(objc_class **)(*((_QWORD *)&v8 + 1) + 40);
  }
  _Block_object_dispose(&v8, 8);
  stMutableMediaStatusDomainData = (uint64_t)objc_alloc_init(v2);
  sSystemStatusMutex = FigReentrantMutexCreate();
  sRecordingClientsInfo = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E20]);
  result = objc_alloc_init(MEMORY[0x1E0C99E20]);
  sMutedRecordingClientsInfo = (uint64_t)result;
  if (!gSerializationQueue
    || !stMediaStatusDomainPublisher
    || !stMutableMediaStatusDomainData
    || !sSystemStatusMutex
    || !sRecordingClientsInfo
    || !result)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_18;
  }
  if (dword_1EE2B3F38)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = 1;
LABEL_20:
  sIsSystemStatusInitialized = v7;
  return result;
}

void sub_1936EFFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSTMediaStatusDomainPublisherClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_getClass("STMediaStatusDomainPublisher");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTMediaStatusDomainPublisherClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1();
    SystemStatusLibrary();
  }
}

void SystemStatusLibrary()
{
  void *v0;

  if (!SystemStatusLibraryCore_frameworkLibrary)
    SystemStatusLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!SystemStatusLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getSTMutableMediaStatusDomainDataClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  SystemStatusLibrary();
  result = objc_getClass("STMutableMediaStatusDomainData");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTMutableMediaStatusDomainDataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1();
    return (Class)__getBSExecutablePathForAuditTokenSymbolLoc_block_invoke(v3);
  }
  return result;
}

void *__getBSExecutablePathForAuditTokenSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (BaseBoardLibraryCore_frameworkLibrary)
  {
    v2 = (void *)BaseBoardLibraryCore_frameworkLibrary;
  }
  else
  {
    BaseBoardLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)BaseBoardLibraryCore_frameworkLibrary;
    if (!BaseBoardLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "BSExecutablePathForAuditToken");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBSExecutablePathForAuditTokenSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSTAttributedEntityClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  SystemStatusLibrary();
  result = objc_getClass("STAttributedEntity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTAttributedEntityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getSTAttributedEntityClass_block_invoke_cold_1();
    return (Class)__getSTExecutableIdentityClass_block_invoke(v3);
  }
  return result;
}

Class __getSTExecutableIdentityClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  SystemStatusLibrary();
  result = objc_getClass("STExecutableIdentity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTExecutableIdentityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getSTExecutableIdentityClass_block_invoke_cold_1();
    return __getSTActivityAttributionClass_block_invoke(v3);
  }
  return result;
}

Class __getSTActivityAttributionClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  SystemStatusLibrary();
  result = objc_getClass("STActivityAttribution");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTActivityAttributionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = __getSTActivityAttributionClass_block_invoke_cold_1();
    return (Class)__getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke(v3);
  }
  return result;
}

Class __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  SystemStatusLibrary();
  result = objc_getClass("STMediaStatusDomainMicrophoneRecordingAttribution");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 40);
  }
  else
  {
    v3 = __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1();
    return (Class)MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode(v3);
  }
  return result;
}

uint64_t MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  id obj;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  obj = (id)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)v14;
    while (2)
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v14 != v2)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v3);
        v5 = objc_msgSend(v4, "displayType", v9, v10);
        if (objc_msgSend((id)objc_msgSend(v4, "currentMode"), "width"))
          v6 = objc_msgSend((id)objc_msgSend(v4, "currentMode"), "height") != 0;
        else
          v6 = 0;
        if (dword_1EE2B3E28)
        {
          v12 = v6;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v6 = v12;
        }
        v8 = v5 == 2 && v6;
        if (v8 && !objc_msgSend(v4, "isCloning"))
          return 1;
        ++v3;
      }
      while (v1 != v3);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v1 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t CMSMAP_FindAirPlayPortForEndpoint(uint64_t a1)
{
  __CFArray *v1;
  __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0;
  FigEndpointCopyFirstStreamOfType();
  v1 = CMSMVAUtility_CopyConnectedWirelessPorts();
  v2 = v1;
  if (v1 && (Count = CFArrayGetCount(v1), Count >= 1))
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      v11 = 0;
      FigCFArrayGetInt64AtIndex();
      v6 = v11;
      v7 = vaeCopyDeviceIdentifierFromVADPort(v11);
      if (FigCFEqual())
        break;
      if (v7)
        CFRelease(v7);
      if (v4 == ++v5)
        goto LABEL_9;
    }
    if (v7)
      CFRelease(v7);
  }
  else
  {
LABEL_9:
    v6 = 0;
  }
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2)
    CFRelease(v2);
  if (v10)
    CFRelease(v10);
  return v6;
}

uint64_t CMSMAP_MakeAirPlayHandOffPortRoutable(int a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFNumberRef v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __CFArray *v15;
  _OWORD v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = CFNumberCreate(v4, kCFNumberSInt32Type, &dword_1EE2B3C18);
  CFArrayAppendValue(Mutable, v6);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1)
  {
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    memset((char *)v16 + 8, 0, 120);
    v15 = 0;
    *(_QWORD *)&v16[0] = Mutable;
    v8 = cmsmSetVADRouteConfiguration(&v12, 0, a2);
    v10 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 258, 0, 0, v10, (uint64_t)&__block_literal_global_7_0);
LABEL_7:
    if (!Mutable)
      goto LABEL_9;
    goto LABEL_8;
  }
  CMSMAP_StartRouteAwayFromAirPlayHandoffTimer(a2, 60.0);
  v12 = 0u;
  v13 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = Mutable;
  v15 = Mutable;
  v8 = cmsmSetVADRouteConfiguration(&v12, 0, a2);
  if (!(_DWORD)v8)
    goto LABEL_7;
  v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (Mutable)
LABEL_8:
    CFRelease(Mutable);
LABEL_9:
  if (v6)
    CFRelease(v6);
  return v8;
}

void CMSMAP_StartRouteAwayFromAirPlayHandoffTimer(uint64_t a1, float a2)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[5];
  float v7;

  if (qword_1EE2B3CC0)
  {
    v4 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 258, 0, 0, v4, (uint64_t)&__block_literal_global_7_0);
  }
  v5 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CMSMAP_StartRouteAwayFromAirPlayHandoffTimer_block_invoke;
  v6[3] = &__block_descriptor_44_e5_v8__0l;
  v6[4] = a1;
  v7 = a2;
  MXDispatchAsync((uint64_t)"CMSMAP_StartRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 242, 0, 0, v5, (uint64_t)v6);
}

void CMSMAP_DisconnectAllAirPlaySessions(uint64_t a1)
{
  const __CFArray *v2;

  v2 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)CFSTR("Audio/Video"), (uint64_t)CFSTR("Default"), 0);
  cmsmUnpickWirelessRoutes(v2, 1, a1, qword_1EE2B3CF0);
  if (v2)
    CFRelease(v2);
}

void CMSMAP_StartDisconnectAirPlayScreenTimer(float a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[4];
  float v5;

  if (qword_1EE2B3CB8)
  {
    v2 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 225, 0, 0, v2, (uint64_t)&__block_literal_global_4);
  }
  v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMAP_StartDisconnectAirPlayScreenTimer_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  v5 = a1;
  MXDispatchAsync((uint64_t)"CMSMAP_StartDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 211, 0, 0, v3, (uint64_t)v4);
}

void CMSMAP_StopDisconnectAirPlayScreenTimer()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"CMSMAP_StopDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 225, 0, 0, v0, (uint64_t)&__block_literal_global_4);
}

uint64_t cmsmap_DisconnectAirPlayScreenIfIdle()
{
  int IsPlayingToAirPlay;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  int IsTestCodeEnabled;
  NSString *v7;

  IsPlayingToAirPlay = CMSMUtility_SomeClientIsPlayingToAirPlay();
  if (qword_1EE2B3CB8)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EE2B3CB8);
    if (qword_1EE2B3CB8)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B3CB8);
      qword_1EE2B3CB8 = 0;
    }
  }
  CMScreenGetScreenState();
  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    CMScreenGetScreenType();
    result = FigCFEqual();
    if ((_DWORD)result && IsPlayingToAirPlay == 0)
    {
      result = CMSMDeviceState_ScreenIsBlanked();
      if ((_DWORD)result)
      {
        if (MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode())
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v5 = MXGetSerialQueue();
          result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v5, 60.0, (uint64_t)&__block_literal_global_8, 0, 0);
          qword_1EE2B3CB8 = result;
        }
        else
        {
          if (dword_1EE2B3F38)
          {
            v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          IsTestCodeEnabled = MXSystemMirroring_IsTestCodeEnabled();
          v7 = -[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID");
          if (IsTestCodeEnabled)
            return MXSystemMirroring_PickRouteDescriptor(v7, 0, 0, 0);
          else
            return FigRoutingManagerPickRouteDescriptorForContext(v7, 0, 0, 0);
        }
      }
    }
  }
  return result;
}

uint64_t CMSMAP_GetAirPlayDeviceVolume(uint64_t a1, uint64_t a2, float *a3)
{
  OpaqueFigEndpoint *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFNumber *v7;
  uint64_t v8;
  float ValueFloat32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v4 = FigRoutingManagerCopyEndpointWithDeviceID(a1, 1, *MEMORY[0x1E0CA3A58], a2);
  if (v4)
  {
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      v6(CMBaseObject, *MEMORY[0x1E0CA44A0], *MEMORY[0x1E0C9AE00], cf);
      v7 = (const __CFNumber *)cf[0];
    }
    else
    {
      v7 = 0;
    }
    ValueFloat32 = MXCFNumberGetValueFloat32(v7);
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (ValueFloat32 >= 0.0 && ValueFloat32 <= 1.0)
    {
      if (!dword_1EE2B3F38)
        goto LABEL_15;
    }
    else
    {
      ValueFloat32 = 0.3;
      if (!dword_1EE2B3F38)
        goto LABEL_15;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_15:
    v8 = 1;
    if (!a3)
      goto LABEL_17;
    goto LABEL_16;
  }
  v8 = 0;
  ValueFloat32 = 1.0;
  if (a3)
LABEL_16:
    *a3 = ValueFloat32;
LABEL_17:
  if (v4)
    CFRelease(v4);
  return v8;
}

uint64_t FigStarkModeControllerStartServer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  v0 = fig_note_initialize_category_with_default_work();
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v0, v1))
  {
    v2 = FigXPCServerStart();
    if ((_DWORD)v2)
    {
      FigSignalErrorAt();
    }
    else if (dword_1EE2B3B60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return v2;
}

uint64_t HandleStarkModeControllerMessage(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t OpCode;
  uint64_t v5;
  uint64_t v7;
  CFTypeRef cf[2];

  v3 = (void *)MEMORY[0x194035B20]();
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v7 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    cf[0] = 0;
    v5 = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)v5)
      v5 = FigSignalErrorAt();
    v7 = v5;
    if (!(_DWORD)v5)
      v7 = 4294951138;
  }
  objc_autoreleasePoolPop(v3);
  return v7;
}

uint64_t FigSTSServerStart()
{
  return FigXPCServerStart();
}

uint64_t stsServer_HandleMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const void *v4;
  CFTypeRef cf;

  v2 = MXGetSerialQueue();
  dispatch_assert_queue_V2(v2);
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&cf);
  if (a1)
  {
    if (weakCentralEndpoint)
    {
      CFRelease((CFTypeRef)weakCentralEndpoint);
      weakCentralEndpoint = 0;
    }
    weakCentralEndpoint = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
  }
  else
  {
    v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      v4 = (const void *)v3;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      CFRelease(v4);
    }
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0);
  }
  if (cf)
    CFRelease(cf);
}

void FigRoutingManagerNotifyClientsOfCarPlayActivation()
{
  const void *v0;
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&cf);
  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf, v0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v0)
    CFRelease(v0);
}

void FigRoutingManagerSetupEndpointCentralForCarPlay(const void *a1)
{
  uint64_t *v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  _BOOL8 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  _QWORD v11[5];
  os_log_type_t type;
  int v13;
  CFTypeRef v14;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4460], *v2, cf);
    v5 = FigCFEqual() != 0;
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
    v5 = 0;
  }
  v14 = 0;
  if (CMSessionCreate((uint64_t *)&v14) || !v14)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v14)
      CFRelease(v14);
    v8 = 0;
  }
  else
  {
    _CMSessionSetProperty(v14, CFSTR("ClientName"), (uint64_t)CFSTR("CarSession"));
    v6 = v14;
    v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
    _CMSessionSetProperty(v6, CFSTR("ClientPID"), v7);
    _CMSessionSetProperty(v14, CFSTR("AudioCategory"), (uint64_t)CFSTR("MediaPlayback"));
    _CMSessionSetProperty(v14, CFSTR("IAmCar"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1));
    _CMSessionSetProperty(v14, CFSTR("IAmWiredCar"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5));
    _CMSessionSetProperty(v14, CFSTR("AudioHardwareControlFlags"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0));
    v8 = v14;
  }
  cf[0] = 0;
  FigEndpointCreateCentral(*v2, a1, v8, cf);
  _CMSessionSetProperty(v8, CFSTR("CarFigEndpointCentralObject"), (uint64_t)cf[0]);
  FigEndpointServerSetActiveEndpoint();
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
    FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint((uint64_t)cf[0]);
  v10 = MXGetNotificationSenderQueue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerSetupEndpointCentralForCarPlay_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v8;
  MXDispatchAsync((uint64_t)"FigRoutingManagerSetupEndpointCentralForCarPlay", (uint64_t)"FigRoutingManager_iOSCarPlay.m", 171, 0, 0, v10, (uint64_t)v11);
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t FigRoutingManagerSendCarPlayDuckCommand(const void *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  _BOOL4 v9;
  uint64_t v10;
  CFTypeRef v11;
  const void *v12;
  uint64_t (*v13)(const void *, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v16;
  CFTypeRef cf;
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294954296;
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  if (!cf)
    return 4294954296;
  v16 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)cf, &v16);
  if (v16 != a1)
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpoints((uint64_t)cf, (uint64_t)theArray);
    if (!theArray[0])
      goto LABEL_22;
    Count = CFArrayGetCount(theArray[0]);
    if (Count < 1)
    {
      v9 = 0;
    }
    else
    {
      v5 = Count;
      if (CFArrayGetValueAtIndex(theArray[0], 0) == a1)
      {
        v9 = 1;
      }
      else
      {
        v6 = 1;
        do
        {
          v7 = v6;
          if (v5 == v6)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v6);
          v6 = v7 + 1;
        }
        while (ValueAtIndex != a1);
        v9 = v7 < v5;
      }
    }
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      if (!v9)
        goto LABEL_22;
    }
    else if (!v9)
    {
      goto LABEL_22;
    }
  }
  FigEndpointExtendedGetClassID();
  if (CMBaseObjectIsMemberOfClass())
  {
    v11 = CFRetain(a1);
    if (v11)
    {
      v12 = v11;
      v13 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 48);
      if (v13)
        v10 = v13(v12, a2);
      else
        v10 = 4294954514;
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v12);
      goto LABEL_27;
    }
  }
LABEL_22:
  v10 = 4294954296;
LABEL_27:
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t FigRoutingManagerCopyCarBluetoothIDs(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, _QWORD, uint64_t *);
  CFTypeRef cf;
  CFArrayRef theArray;
  uint64_t v13;

  theArray = 0;
  v13 = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
          break;
        if (v3 == ++v4)
          goto LABEL_9;
      }
      CMBaseObject = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v7)
        v7(CMBaseObject, *MEMORY[0x1E0CA4140], *MEMORY[0x1E0C9AE00], &v13);
    }
LABEL_9:
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
  }
  result = v13;
  if (!v13)
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(a1, &cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      v9 = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v10)
        v10(v9, *MEMORY[0x1E0CA4140], *MEMORY[0x1E0C9AE00], &v13);
    }
    if (cf)
      CFRelease(cf);
    return v13;
  }
  return result;
}

void FigRoutingManagerSendCarPlayDisableBluetoothCommand()
{
  const void *v0;
  const void *v1;
  NSObject *v2;
  _QWORD v3[5];

  v0 = (const void *)MGCopyAnswer();
  v1 = v0;
  if (v0)
    CFRetain(v0);
  v2 = *((_QWORD *)FigRoutingManagerGetSharedManager() + 1);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigRoutingManagerSendCarPlayDisableBluetoothCommand_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = v1;
  MXDispatchAsync((uint64_t)"FigRoutingManagerSendCarPlayDisableBluetoothCommand", (uint64_t)"FigRoutingManager_iOSCarPlay.m", 299, 0, 0, v2, (uint64_t)v3);
  if (v1)
    CFRelease(v1);
}

NSObject *FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer(void *cf, uint64_t a2, float a3)
{
  void *SharedManager;
  NSObject *v7;
  NSObject *v8;
  NSObject *result;
  _QWORD v10[5];
  _QWORD v11[6];

  if (cf)
    CFRetain(cf);
  SharedManager = FigRoutingManagerGetSharedManager();
  v7 = *((_QWORD *)SharedManager + 4);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *((_QWORD *)SharedManager + 4);
    if (v8)
    {
      dispatch_release(v8);
      *((_QWORD *)SharedManager + 4) = 0;
    }
  }
  v10[4] = cf;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = cf;
  v11[5] = a2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke_2;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  result = FigRoutingManagerCreateOneShotTimer(*((NSObject **)SharedManager + 1), a3, (uint64_t)v11, cf, (uint64_t)v10);
  *((_QWORD *)SharedManager + 4) = result;
  return result;
}

void FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer()
{
  void *SharedManager;
  NSObject *v1;
  NSObject *v2;

  SharedManager = FigRoutingManagerGetSharedManager();
  v1 = *((_QWORD *)SharedManager + 4);
  if (v1)
  {
    dispatch_source_cancel(v1);
    v2 = *((_QWORD *)SharedManager + 4);
    if (v2)
    {
      dispatch_release(v2);
      *((_QWORD *)SharedManager + 4) = 0;
    }
  }
}

uint64_t FigRoutingManagerFindCarPlayMainAudioPortForEndpoint(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFNumber *ValueAtIndex;
  CFTypeRef v8;
  int PortTypeFromPortID;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v14;

  if (!a1)
    return 0;
  theArray = 0;
  v14 = 0;
  FigEndpointCopyStreamsForTypeAndSubType();
  v2 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  v3 = v2;
  if (v2 && (Count = CFArrayGetCount(v2), Count >= 1))
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      LODWORD(cf) = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &cf);
      v8 = vaeCopyDeviceIdentifierFromVADPort((AudioObjectID)cf);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(cf);
      if (FigCFEqual() && PortTypeFromPortID == 1886614639)
        break;
      if (v8)
        CFRelease(v8);
      if (v5 == ++v6)
        goto LABEL_14;
    }
    v1 = cf;
    if (v8)
      CFRelease(v8);
  }
  else
  {
LABEL_14:
    v1 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v3)
    CFRelease(v3);
  if (v14)
    CFRelease(v14);
  return v1;
}

void FigRoutingManagerProcessCarPlayEndpointDeactivation(int a1)
{
  id v2;
  void *v3;

  v2 = CMSMUtility_CopyCarPlaySession();
  v3 = v2;
  if (v2)
  {
    MXCoreSessionSetProperty((int)v2, CFSTR("CarFigEndpointCentralObject"));
    MXCoreSessionSetProperty((int)v3, CFSTR("IAmCar"));
    CMSMNotificationUtility_PostCarPlayAuxStreamSupportDidChange(0);
    CMSMNotificationUtility_PostCarPlayIsConnectedDidChange(0);
  }

  if (a1)
  {
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
      FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(0);
    FigEndpointServerSetActiveEndpoint();
  }
}

uint64_t FigRoutingManagerFigEndpointCentralCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void MX_FrontBoardServices_Initialize()
{
  id v0;

  v0 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  gFrontboardServicesLib = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 4);
  if (gFrontboardServicesLib)
  {
    gFBSDisplayLayoutMonitorClass = (uint64_t)objc_getClass("FBSDisplayLayoutMonitor");
    if (gFBSDisplayLayoutMonitorClass)
    {
      gFBSDisplayLayoutMonitorConfigurationClass = (uint64_t)objc_getClass("FBSDisplayLayoutMonitorConfiguration");
      if (gFBSDisplayLayoutMonitorConfigurationClass)
      {
        if (MX_FrontBoardServices_Initialize_once_token != -1)
          dispatch_once(&MX_FrontBoardServices_Initialize_once_token, &__block_literal_global_26);
      }
    }
  }

}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForAppleTV(const void *a1, int a2, const void *a3, const void *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  char v11;
  int valuePtr;

  valuePtr = a2;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2)
  {
    v10 = 0;
LABEL_6:
    v11 = 1;
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (!v10)
    goto LABEL_6;
  CFDictionarySetValue(Mutable, CFSTR("AssertionID"), v10);
  v11 = 0;
  if (a3)
LABEL_7:
    CFDictionarySetValue(Mutable, CFSTR("AssertionName"), a3);
LABEL_8:
  if (a4)
    CFDictionarySetValue(Mutable, CFSTR("CreationTime"), a4);
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("Operation"), a1);
  if ((v11 & 1) == 0)
    CFRelease(v10);
  return Mutable;
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForStarkWiFi(const void *a1, int a2, const void *a3, const void *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  char v11;
  id v12;
  void *v13;
  CFNumberRef v14;
  int v16;
  int valuePtr;

  valuePtr = a2;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2)
  {
    v10 = 0;
LABEL_6:
    v11 = 1;
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (!v10)
    goto LABEL_6;
  CFDictionarySetValue(Mutable, CFSTR("AssertionID"), v10);
  v11 = 0;
  if (a3)
LABEL_7:
    CFDictionarySetValue(Mutable, CFSTR("AssertionName"), a3);
LABEL_8:
  if (a4)
    CFDictionarySetValue(Mutable, CFSTR("CreationTime"), a4);
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("Operation"), a1);
  v12 = CMSMUtility_CopyCarPlaySession();
  v13 = v12;
  if (v12)
  {
    if (objc_msgSend(v12, "clientPID"))
    {
      v16 = objc_msgSend((id)objc_msgSend(v13, "clientPID"), "intValue");
      v14 = CFNumberCreate(v8, kCFNumberSInt32Type, &v16);
      FigCFDictionarySetValue();
      if (v14)
        CFRelease(v14);
    }
    CFDictionarySetValue(Mutable, CFSTR("ApplicationName"), CFSTR("CarCMSession"));
  }

  if ((v11 & 1) == 0)
    CFRelease(v10);
  return Mutable;
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForSession(void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  char v5;
  __CFString *v6;
  const void *v7;
  __CFString *v8;
  const __CFString *StringForApplicationState;
  CFNumberRef v10;
  id v11;
  int v13;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (objc_msgSend(a1, "idleSleepPreventor"))
  {
    valuePtr = objc_msgSend(a1, "idleSleepPreventor");
    v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      CFDictionarySetValue(Mutable, CFSTR("AssertionID"), v4);
      v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_6:
  if (objc_msgSend(a1, "idleSleepPreventorName"))
    CFDictionarySetValue(Mutable, CFSTR("AssertionName"), (const void *)objc_msgSend(a1, "idleSleepPreventorName"));
  if (objc_msgSend(a1, "idleSleepPreventorCreationTime"))
    CFDictionarySetValue(Mutable, CFSTR("CreationTime"), (const void *)objc_msgSend(a1, "idleSleepPreventorCreationTime"));
  if (FigCFEqual() || FigCFEqual())
  {
    if (!objc_msgSend(a1, "isPlayingStartTime"))
      goto LABEL_15;
    v6 = CFSTR("PlaybackStartTime");
    v7 = (const void *)objc_msgSend(a1, "isPlayingStartTime");
  }
  else
  {
    if (!FigCFEqual() || !objc_msgSend(a1, "isPlayingStopTime"))
      goto LABEL_15;
    v6 = CFSTR("PlaybackStopTime");
    v7 = (const void *)objc_msgSend(a1, "isPlayingStopTime");
  }
  CFDictionarySetValue(Mutable, v6, v7);
LABEL_15:
  if (FigCFEqual() || FigCFEqual())
  {
    v8 = MX_RunningBoardServices_CopyAssertionReasonsStringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
    StringForApplicationState = CMSMUtility_GetStringForApplicationState(objc_msgSend(a1, "applicationState"));
    CFDictionarySetValue(Mutable, CFSTR("ApplicationState"), StringForApplicationState);
    CFDictionarySetValue(Mutable, CFSTR("AssertionReasonString"), v8);
    if (v8)
      CFRelease(v8);
  }
  if (objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
  {
    v13 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    v10 = CFNumberCreate(v2, kCFNumberSInt32Type, &v13);
  }
  else
  {
    v10 = 0;
  }
  v11 = CMSUtility_CopyCurrentRouteTypeAtIndex(a1, 0);
  if ((objc_msgSend(a1, "isCarSession") & 1) == 0)
    objc_msgSend(a1, "displayID");
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  cmsmpowerlogConvertToExternalRouteNameForPowerLog((uint64_t)v11);
  FigCFDictionarySetValue();
  if (v10)
    CFRelease(v10);
  if ((v5 & 1) == 0)
    CFRelease(v4);
  if (v11)
    CFRelease(v11);
  return Mutable;
}

const __CFString *cmsmpowerlogConvertToExternalRouteNameForPowerLog(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return CFSTR("None");
  v1 = a1;
  if (FigCFEqual() || FigCFEqual())
    return CFSTR("AirPlay");
  return (const __CFString *)v1;
}

void CMSMPowerLogPostPowerLogDataForRouteChange()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"CMSMPowerLogPostPowerLogDataForRouteChange", (uint64_t)"CMSessionManager_PowerLog.m", 269, 0, 0, v0, (uint64_t)&__block_literal_global_27);
}

void CMSMPowerLogPostScreenMirroringPowerLogs(const void *a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("MirroringState"), a1);
    CMSMPowerLogPostPowerLogData(CFSTR("CoreMedia_ScreenMirroring"), v3);
    CFRelease(v3);
  }
}

uint64_t MX_MediaServicesUtilitiesResetMediaServices(int a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, const __CFString *);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  os_log_type_t type;
  int v20;
  _BYTE v21[128];
  _QWORD v22[16];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x194035B20]();
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("audiomxd"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v4, "addObject:", CFSTR("mediaplaybackd"));
  objc_msgSend(v4, "addObject:", CFSTR("mediaparserd"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  objc_msgSend(v4, "addObject:", CFSTR("cameracaptured"));
  if ((a1 & 8) != 0)
  {
LABEL_5:
    objc_msgSend(v4, "addObject:", CFSTR("videocodecd"));
    objc_msgSend(v4, "addObject:", CFSTR("AudioConverterService"));
  }
LABEL_6:
  if (a1 == 0xFFFF)
  {
    objc_msgSend(v4, "addObject:", CFSTR("airplayd"));
    objc_msgSend(v4, "addObject:", CFSTR("cvhwad"));
  }
  if (objc_msgSend(v4, "count"))
  {
    if (dword_1EE2B3F38)
    {
      v20 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v21, 16, v13, v14);
    if (v7)
    {
      v8 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v4);
          v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
          v23 = 0;
          v24 = &v23;
          v25 = 0x2020000000;
          v11 = (void (*)(uint64_t, _QWORD, const __CFString *))getSFTerminateProcessNamedSymbolLoc_ptr;
          v26 = getSFTerminateProcessNamedSymbolLoc_ptr;
          if (!getSFTerminateProcessNamedSymbolLoc_ptr)
          {
            v22[0] = MEMORY[0x1E0C809B0];
            v22[1] = 3221225472;
            v22[2] = __getSFTerminateProcessNamedSymbolLoc_block_invoke;
            v22[3] = &unk_1E3099018;
            v22[4] = &v23;
            __getSFTerminateProcessNamedSymbolLoc_block_invoke((uint64_t)v22);
            v11 = (void (*)(uint64_t, _QWORD, const __CFString *))v24[3];
          }
          _Block_object_dispose(&v23, 8);
          if (!v11)
          {
            __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
            __break(1u);
          }
          v11(v10, 0, CFSTR("Resetting media services"));
        }
        v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      }
      while (v7);
    }
    v6 = 0;
  }
  else
  {
    v6 = 4294954315;
  }
  objc_autoreleasePoolPop(v2);
  return v6;
}

void sub_1936F562C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void *__getSFTerminateProcessNamedSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (SettingsFoundationLibraryCore_frameworkLibrary)
  {
    v2 = (void *)SettingsFoundationLibraryCore_frameworkLibrary;
  }
  else
  {
    SettingsFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)SettingsFoundationLibraryCore_frameworkLibrary;
    if (!SettingsFoundationLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "SFTerminateProcessNamed");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSFTerminateProcessNamedSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t FigSTSCreateRemote(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t uint64;

  if (a2 && a4)
  {
    if (remoteSTS_EnsureClientEstablished_onceToken != -1)
      dispatch_once(&remoteSTS_EnsureClientEstablished_onceToken, &__block_literal_global_28);
    v6 = remoteSTS_EnsureClientEstablished_err;
    if (!remoteSTS_EnsureClientEstablished_err)
    {
      FigSTSGetClassID();
      v7 = CMDerivedObjectCreate();
      if ((_DWORD)v7
        || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
            *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2),
            v7 = FigXPCCreateBasicMessage(),
            (_DWORD)v7)
        || (v7 = FigXPCMessageSetCFObject(), (_DWORD)v7)
        || (v7 = FigXPCMessageSetCFDictionary(), (_DWORD)v7)
        || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
      {
        v6 = v7;
      }
      else
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
        v6 = FigXPCRemoteClientAssociateObject();
        if (!(_DWORD)v6)
          *a4 = 0;
      }
    }
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  if (gSTSRemoteClient)
    FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSTS_DeadConnectionCallback()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t remoteSTS_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendSyncMessage();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteSTS_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  CFIndex v6;
  const char *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v7 = " SERVER DIED";
  else
    v7 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSTSRemote %p (%@) RC: %ld ObjectID: %016llx%s>"), a1, v5, v6, *(_QWORD *)DerivedStorage, v7);
  return Mutable;
}

uint64_t remoteSTS_CopyProperty(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (a2)
  {
    ObjectID = remoteSTS_GetObjectID(a1, &v5);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v3 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSTS_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (a2)
  {
    ObjectID = remoteSTS_GetObjectID(a1, &v5);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v3 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSTS_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteSTS_SetActive(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
LABEL_8:
    v5 = ObjectID;
    goto LABEL_6;
  }
  v5 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v5)
  {
    v5 = FigXPCMessageSetCFString();
    if (!(_DWORD)v5)
    {
      xpc_dictionary_set_BOOL(0, kFigSTSXPCMsgParam_ActiveState[0], a3 != 0);
      v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_GetActive(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v5 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v5)
    *a3 = xpc_dictionary_get_BOOL(0, kFigSTSXPCMsgParam_ActiveState[0]);
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_SetPropertyByLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v5 = ObjectID;
    goto LABEL_9;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4
    || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4)
    || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4)
    || (v4 = FigXPCMessageSetCFObject(), (_DWORD)v4))
  {
    v5 = v4;
  }
  else
  {
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_CopyPropertyByLabel(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!a2 || !a3 || !a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v6 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteSTS_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  v6 = FigXPCMessageCopyCFObject();
  if (!(_DWORD)v6)
    *a4 = 0;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSTS_CopyShmem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2 || !a3)
    goto LABEL_10;
  ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  if (!xpc_dictionary_get_value(0, kFigSTSXPCMsgParam_ShmemObject[0]))
  {
LABEL_10:
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v5 = ObjectID;
    goto LABEL_9;
  }
  v5 = 0;
  *a3 = FigXPCRetain();
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

CFTypeRef FigPredictedRouting_CopySelectedRouteDescriptor(uint64_t a1)
{
  int IsContextSystemMusicAndIndependent;
  int IsSupported;
  CFTypeRef v4;

  IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a1);
  IsSupported = FigPredictedRouting_IsSupported(a1, 0);
  v4 = 0;
  if (IsSupported && !IsContextSystemMusicAndIndependent)
  {
    MEMORY[0x1940352BC](gPRS_0);
    if (gPRS_1)
      v4 = CFRetain((CFTypeRef)gPRS_1);
    else
      v4 = 0;
    MEMORY[0x1940352C8](gPRS_0);
  }
  return v4;
}

void FigPredictedRouting_ResetSelectedRouteDescriptor(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;
  int v5;

  if (FigPredictedRouting_IsSupported(a1, 0))
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2 == 6)
      v4 = 10;
    else
      v4 = 8;
    if (a2 == 1)
      v5 = 9;
    else
      v5 = v4;
    predictedRouting_UpdatePredictedRoute(v5, 0);
  }
}

void FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(int a1)
{
  predictedRouting_UpdatePredictedRoute(6, a1);
}

uint64_t FigPredictedRouting_StartTimer(float a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;

  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  MEMORY[0x1940352BC](gPRS_0);
  if (gPRS_2)
    FigPredictedRouting_StopTimer();
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SharedQueue = FigRoutingManagerGetSharedQueue();
  gPRS_2 = (uint64_t)FigRoutingManagerCreateOneShotTimer(SharedQueue, a1, (uint64_t)&__block_literal_global_29, 0, 0);
  return MEMORY[0x1940352C8](gPRS_0);
}

uint64_t FigPredictedRouting_StopTimer()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (predictedRouting_initialize_onceToken != -1)
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_26);
  MEMORY[0x1940352BC](gPRS_0);
  v0 = gPRS_2;
  if (gPRS_2)
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v0 = gPRS_2;
    }
    dispatch_source_cancel(v0);
    if (gPRS_2)
    {
      dispatch_release((dispatch_object_t)gPRS_2);
      gPRS_2 = 0;
    }
  }
  return MEMORY[0x1940352C8](gPRS_0);
}

uint64_t FigPredictedRouting_IsPreemptivePortChangedTimerActive()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v1;

  if (!FigPredictedRouting_IsPreemptivePortLogicEnabled())
    return 0;
  MEMORY[0x1940352BC](gPRS_0);
  if (gPRS_4)
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v1 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v1 = 1;
    }
  }
  else
  {
    v1 = 0;
  }
  MEMORY[0x1940352C8](gPRS_0);
  return v1;
}

uint64_t FigPredictedRouting_StartPreemptivePortChangedTimer()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;

  result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if ((_DWORD)result)
  {
    MEMORY[0x1940352BC](gPRS_0);
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v2 = MXGetSerialQueue();
    gPRS_4 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 4.0, (uint64_t)&__block_literal_global_24, 0, 0);
    return MEMORY[0x1940352C8](gPRS_0);
  }
  return result;
}

uint64_t FigPredictedRouting_StopPreemptivePortChangedTimer(int a1)
{
  uint64_t result;
  NSObject *v3;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  MXSessionManager *v7;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if ((_DWORD)result)
  {
    MEMORY[0x1940352BC](gPRS_0);
    FigPredictedRouting_SetPreemptivePortChanged(0);
    v3 = gPRS_4;
    if (gPRS_4)
    {
      v4 = (const void *)gPRS_1;
      if (gPRS_1)
      {
        if (!dword_1EE2B3E28
          || (os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
              fig_log_call_emit_and_clean_up_after_send_and_compose(),
              (v4 = (const void *)gPRS_1) != 0))
        {
          CFRelease(v4);
          gPRS_1 = 0;
        }
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], (uint64_t)CFSTR("predictedSelectedRouteDescriptorChanged"), 0);
        if (cf[0])
          CFRelease(cf[0]);
        v3 = gPRS_4;
      }
      dispatch_source_cancel(v3);
      if (gPRS_4)
      {
        dispatch_release((dispatch_object_t)gPRS_4);
        gPRS_4 = 0;
      }
    }
    result = MEMORY[0x1940352C8](gPRS_0);
    if (dword_1EE2B3E28)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
    {
      v7 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      return -[MXSessionManager unduckSessionsForDuckingSource:](v7, "unduckSessionsForDuckingSource:", gPRS_3);
    }
  }
  return result;
}

uint64_t FigPredictedRouting_SetPreemptivePortChanged(int a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if ((_DWORD)result)
  {
    MEMORY[0x1940352BC](gPRS_0);
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    gPRS_5 = a1 != 0;
    return MEMORY[0x1940352C8](gPRS_0);
  }
  return result;
}

uint64_t FigPredictedRouting_UnmuteSessionIfMutedByPreemptivePortChange()
{
  uint64_t result;
  MXSessionManager *v1;

  result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if ((_DWORD)result)
  {
    v1 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    return -[MXSessionManager unduckSessionsForDuckingSource:](v1, "unduckSessionsForDuckingSource:", gPRS_3);
  }
  return result;
}

uint64_t __predictedRouting_initialize_block_invoke()
{
  MXDuckingSource *v0;
  double v1;
  double v2;
  uint64_t result;

  gPRS_0 = FigReentrantMutexCreate();
  v0 = [MXDuckingSource alloc];
  LODWORD(v1) = 1036831949;
  LODWORD(v2) = 0;
  result = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v0, "initWithType:ID:duckVolume:duckFadeDuration:", 4, 0, v2, v1);
  gPRS_3 = result;
  return result;
}

uint64_t FigEndpointAuthRequestHandler_AddRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  v2 = qword_1EE2B23A0;
  if (qword_1EE2B23A0)
    v3 = (uint64_t)&qword_1EE2B23A0;
  else
    v3 = 8;
  MEMORY[0x1940352F8](*(_QWORD *)v3);
  v4 = (char *)malloc_type_malloc(0x38uLL, 0xE004067E18789uLL);
  v5 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
    v5 = CFRetain(v5);
  *((_QWORD *)v4 + 1) = v5;
  v6 = *(CFTypeRef *)(a1 + 8);
  if (v6)
    v6 = CFRetain(v6);
  *((_QWORD *)v4 + 2) = v6;
  v7 = *(CFTypeRef *)(a1 + 24);
  if (v7)
    v7 = CFRetain(v7);
  *((_QWORD *)v4 + 4) = v7;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 32);
  v8 = *(CFTypeRef *)(a1 + 16);
  if (v8)
    v8 = CFRetain(v8);
  *((_QWORD *)v4 + 3) = v8;
  *(_QWORD *)v4 = 0;
  v9 = (uint64_t)&qword_1EE2B23A8;
  if (!v2)
    v9 = 16;
  if (*(_QWORD *)v9)
  {
    v10 = (uint64_t)&unk_1EE2B23B0;
    if (!v2)
      v10 = 24;
    **(_QWORD **)v10 = v4;
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (uint64_t)&unk_1EE2B23B0;
    if (!v2)
      v10 = 24;
  }
  *(_QWORD *)v10 = v4;
  result = MEMORY[0x194035304](*(_QWORD *)v3);
  if (dword_1EE2B3B40)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigEndpointAuthRequestHandler_HasEndpoint(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  if (qword_1EE2B23A0)
    v2 = (uint64_t)&qword_1EE2B23A0;
  else
    v2 = 8;
  if (qword_1EE2B23A0)
    v3 = (uint64_t)&xmmword_1EE2B23A8;
  else
    v3 = 16;
  MEMORY[0x1940352F8](*(_QWORD *)v2);
  while (1)
  {
    v3 = *(_QWORD *)v3;
    if (!v3)
      break;
    if (*(_QWORD *)(v3 + 32) == a1)
    {
      v4 = 1;
      goto LABEL_14;
    }
  }
  v4 = 0;
LABEL_14:
  MEMORY[0x194035304](*(_QWORD *)v2);
  return v4;
}

uint64_t FigEndpointAuthRequestHandler_RemoveRequest()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  v0 = qword_1EE2B23A0;
  if (qword_1EE2B23A0)
    v1 = (uint64_t)&qword_1EE2B23A0;
  else
    v1 = 8;
  if (qword_1EE2B23A0)
    v2 = (uint64_t)&qword_1EE2B23A8;
  else
    v2 = 16;
  MEMORY[0x1940352F8](*(_QWORD *)v1);
  v3 = *(uint64_t **)v2;
  if (*(_QWORD *)v2)
  {
    v4 = *v3;
    *v3 = 0;
    v5 = (const void *)v3[2];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v3[3];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)v3[1];
    if (v7)
      CFRelease(v7);
    v8 = (const void *)v3[4];
    if (v8)
      CFRelease(v8);
    free(v3);
    if (v4)
    {
      *(_QWORD *)v2 = v4;
    }
    else
    {
      *(_QWORD *)v2 = 0;
      v9 = (uint64_t)&unk_1EE2B23B0;
      if (!v0)
        v9 = 24;
      *(_QWORD *)v9 = 0;
    }
  }
  result = MEMORY[0x194035304](*(_QWORD *)v1);
  if (dword_1EE2B3B40)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigEndpointAuthRequestHandler_ProcessRequest(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t CurrentAuthToProcess;
  __int128 *v10;
  NSObject *v11;
  __int128 v12;
  NSObject *v13;
  __int128 v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  CFTypeRef cf;
  CFTypeRef v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  v2 = qword_1EE2B23A0;
  if (qword_1EE2B23A0)
    v3 = (uint64_t)&qword_1EE2B23A0;
  else
    v3 = 8;
  MEMORY[0x1940352F8](*(_QWORD *)v3);
  v4 = FigEndpointAuthRequestHandler_GetAuthRequestList_authListObj;
  MEMORY[0x194035304](*(_QWORD *)v3);
  if (*((_QWORD *)a1 + 3))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v28);
  }
  v7 = (uint64_t)&xmmword_1EE2B23A8;
  if (!v2)
    v7 = 16;
  if (!*(_QWORD *)v7)
  {
    v8 = (uint64_t)&xmmword_1EE2B23A8 + 8;
    if (!v2)
      v8 = 24;
    if (!*(_QWORD *)v8)
    {
      if (!v4)
      {
        v14 = a1[1];
        v29 = *a1;
        v30 = v14;
        v31 = a1[2];
        FigEndpointAuthRequestHandler_AddRequest((uint64_t)&v29);
        if (dword_1EE2B3B40)
        {
          LODWORD(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v25 = a1[1];
        v29 = *a1;
        v30 = v25;
        v31 = a1[2];
        goto LABEL_39;
      }
LABEL_35:
      v23 = 0;
      goto LABEL_40;
    }
  }
  FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
  if (!FigCFEqual())
  {
    if (!v4)
    {
      v12 = a1[1];
      v29 = *a1;
      v30 = v12;
      v31 = a1[2];
      FigEndpointAuthRequestHandler_AddRequest((uint64_t)&v29);
    }
    goto LABEL_35;
  }
  if (v4)
  {
    FigEndpointAuthRequestHandler_RemoveRequest();
    CurrentAuthToProcess = FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
    if (CurrentAuthToProcess)
    {
      v10 = (__int128 *)CurrentAuthToProcess;
      if (dword_1EE2B3B40)
      {
        LODWORD(cf) = 0;
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = *v10;
      v18 = v10[2];
      v30 = v10[1];
      v31 = v18;
      v29 = v17;
LABEL_39:
      v23 = FigEndpointUIAgentHelper_DisplayAuthPrompt((uint64_t)&v29, (uint64_t)FigEndpointAuthRequestHandler_CallbackFromUIAgent);
      goto LABEL_40;
    }
    if (dword_1EE2B3B40)
    {
      LODWORD(cf) = 0;
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_35;
  }
  if (dword_1EE2B3B40)
  {
    LODWORD(cf) = 0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v19 = a1[1];
  v29 = *a1;
  v30 = v19;
  v31 = a1[2];
  FigEndpointAuthRequestHandler_ReplaceRequest((uint64_t)&v29);
  FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
  if (!FigCFEqual())
    goto LABEL_35;
  cf = 0;
  v20 = FigEndpointGetCMBaseObject();
  v21 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v21)
    v21(v20, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
  if (dword_1EE2B3B40)
  {
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v24 = a1[1];
  v29 = *a1;
  v30 = v24;
  v31 = a1[2];
  v23 = FigEndpointUIAgentHelper_DisplayAuthPrompt((uint64_t)&v29, (uint64_t)FigEndpointAuthRequestHandler_CallbackFromUIAgent);
  if (cf)
    CFRelease(cf);
LABEL_40:
  if (v28)
    CFRelease(v28);
  return v23;
}

void FigEndpointAuthRequestHandler_CallbackFromUIAgent(uint64_t a1, int a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;

  if (dword_1EE2B3B40)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigEndpointAuthRequestHandler_IsAuthListEmpty())
  {
    if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce == -1)
    {
      if (!a4)
        return;
    }
    else
    {
      dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
      if (!a4)
        return;
    }
    v10 = (uint64_t)&xmmword_1EE2B23A8;
    if (!qword_1EE2B23A0)
      v10 = 16;
    if (a2)
      v11 = 4294950568;
    else
      v11 = 0;
    a4(*(_QWORD *)(*(_QWORD *)v10 + 32), a1, v11, a5);
  }
}

uint64_t FigEndpointAuthRequestHandler_GetCurrentAuthToProcess()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  if (qword_1EE2B23A0)
    v0 = (uint64_t)&qword_1EE2B23A0;
  else
    v0 = 8;
  if (qword_1EE2B23A0)
    v1 = (uint64_t)&xmmword_1EE2B23A8;
  else
    v1 = 16;
  MEMORY[0x1940352F8](*(_QWORD *)v0);
  v2 = *(_QWORD *)v1;
  MEMORY[0x194035304](*(_QWORD *)v0);
  if (v2)
    return v2 + 8;
  else
    return 0;
}

void FigEndpointAuthRequestHandler_ReplaceRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  v2 = (uint64_t)&xmmword_1EE2B23A8;
  v12 = qword_1EE2B23A0;
  if (!qword_1EE2B23A0)
    v2 = 16;
  v3 = *(uint64_t **)v2;
  if (*(_QWORD *)v2)
  {
    while (!FigCFEqual())
    {
      if (dword_1EE2B3B40)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        return;
    }
    if (v12)
      v5 = (uint64_t)&qword_1EE2B23A0;
    else
      v5 = 8;
    MEMORY[0x1940352F8](*(_QWORD *)v5);
    v6 = (const void *)v3[1];
    v7 = *(const void **)a1;
    v3[1] = *(_QWORD *)a1;
    if (v7)
      CFRetain(v7);
    if (v6)
      CFRelease(v6);
    v8 = (const void *)v3[2];
    v9 = *(const void **)(a1 + 8);
    v3[2] = (uint64_t)v9;
    if (v9)
      CFRetain(v9);
    if (v8)
      CFRelease(v8);
    *(_OWORD *)(v3 + 5) = *(_OWORD *)(a1 + 32);
    v10 = (const void *)v3[3];
    v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v3 + 3) = v11;
    if ((_QWORD)v11)
      CFRetain((CFTypeRef)v11);
    if (v10)
      CFRelease(v10);
    MEMORY[0x194035304](*(_QWORD *)v5);
  }
}

BOOL FigEndpointAuthRequestHandler_IsAuthListEmpty()
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  return !qword_1EE2B23A0 || xmmword_1EE2B23A8 == 0;
}

uint64_t FigEndpointAuthRequestHandler_SetProcessNextRequest(char a1)
{
  uint64_t result;

  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1)
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_30);
  result = qword_1EE2B23A0;
  if (qword_1EE2B23A0)
  {
    MEMORY[0x1940352F8]();
    FigEndpointAuthRequestHandler_GetAuthRequestList_authListObj = a1;
    JUMPOUT(0x194035304);
  }
  return result;
}

void remoteXPCRouteDiscovererClient_DeadConnectionCallback()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD v2[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 1;
  v1 = *(NSObject **)(DerivedStorage + 16);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __remoteXPCRouteDiscoverer_DisposeCaches_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  v2[4] = DerivedStorage;
  MXDispatchSync((uint64_t)"remoteXPCRouteDiscoverer_DisposeCaches", (uint64_t)"FigRouteDiscovererRemoteXPC.m", 79, 0, 0, v1, (uint64_t)v2);
}

uint64_t remoteXPCRouteDiscoverer_CopyAvailableEndpoints(uint64_t a1, _QWORD *a2)
{
  int v4;
  int ObjectID;
  uint64_t DerivedStorage;
  int v7;
  int v8;
  xpc_object_t value;
  xpc_object_t v10;
  NSObject *v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  _QWORD v16[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v4 = FigEndpointXPCRemotePing();
  *((_DWORD *)v25 + 6) = v4;
  if (!v4)
  {
    ObjectID = remoteXPCRouteDiscoverer_GetObjectID(a1, &v23);
    *((_DWORD *)v25 + 6) = ObjectID;
    if (!ObjectID)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = FigXPCCreateBasicMessage();
      *((_DWORD *)v25 + 6) = v7;
      if (!v7)
      {
        v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        *((_DWORD *)v25 + 6) = v8;
        if (!v8)
        {
          value = xpc_dictionary_get_value(v21, (const char *)kFigRouteDiscovererXPCMsgParam_AddedRoutes);
          v10 = xpc_dictionary_get_value(v21, (const char *)kFigRouteDiscovererXPCMsgParam_SubtractedRoutes);
          v11 = *(NSObject **)(DerivedStorage + 16);
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 3221225472;
          v16[2] = __remoteXPCRouteDiscoverer_CopyAvailableEndpoints_block_invoke;
          v16[3] = &unk_1E309D1D0;
          v16[4] = value;
          v16[5] = v10;
          v16[6] = &v24;
          v16[7] = &v17;
          v16[8] = DerivedStorage;
          MXDispatchSync((uint64_t)"remoteXPCRouteDiscoverer_CopyAvailableEndpoints", (uint64_t)"FigRouteDiscovererRemoteXPC.m", 160, 0, 0, v11, (uint64_t)v16);
          v12 = v18;
          *a2 = v18[3];
          v12[3] = 0;
        }
      }
    }
  }
  v13 = (const void *)v18[3];
  if (v13)
    CFRelease(v13);
  FigXPCRelease();
  FigXPCRelease();
  v14 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v24, 8);
  return v14;
}

void sub_1936F854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t figRouteDiscovererRemoteXPCCopyEndpointForRouteDescriptor(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  uint64_t result;
  const __CFString *Value;
  const __CFString *v8;
  int v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v18)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, CFStringRef *);
  CFRange v21;
  const void *v22;
  CFTypeRef v23;
  _QWORD *v24;
  uint64_t v25;
  CFStringRef stringToFind;
  CFTypeRef cf;
  CFArrayRef theArray;

  result = 4294949956;
  if (!theDict || !a3)
    return result;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("RouteUID"));
  if (!Value)
    return 4294949956;
  v8 = Value;
  CFDictionaryGetValue(theDict, CFSTR("AudioRouteName"));
  v9 = FigCFEqual();
  theArray = 0;
  remoteXPCRouteDiscoverer_CopyAvailableEndpoints(a1, &theArray);
  v10 = theArray;
  if (!theArray)
    return 0;
  v24 = a3;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_30;
  v12 = Count;
  v13 = 0;
  v14 = *MEMORY[0x1E0CA4468];
  v15 = *MEMORY[0x1E0C9AE00];
  v25 = *MEMORY[0x1E0CA4258];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v18)
      v18(CMBaseObject, v14, v15, &cf);
    if (v9 && !FigCFEqual())
    {
      v22 = cf;
      if (!cf)
        goto LABEL_20;
LABEL_19:
      CFRelease(v22);
      goto LABEL_20;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    stringToFind = 0;
    v19 = FigEndpointGetCMBaseObject();
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v20)
      v20(v19, v25, v15, &stringToFind);
    if (!stringToFind)
      goto LABEL_20;
    v21 = CFStringFind(v8, stringToFind, 1uLL);
    if (v21.length >= 1 && !v21.location)
      break;
    v22 = stringToFind;
    if (stringToFind)
      goto LABEL_19;
LABEL_20:
    if (v12 == ++v13)
      goto LABEL_30;
  }
  if (ValueAtIndex)
    v23 = CFRetain(ValueAtIndex);
  else
    v23 = 0;
  *v24 = v23;
  if (stringToFind)
    CFRelease(stringToFind);
LABEL_30:
  CFRelease(v10);
  return 0;
}

__CFString *singletonVolumeController_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVolumeController Singleton %p, remoteVolumeController: %@>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t singletonVolumeController_ChangeMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, float a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, float);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_SetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, float a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, float);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_GetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_CanSetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_GetMasterVolumeControlTypeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v5)
LABEL_5:
    CFRelease(v5);
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t singletonVolumeController_ChangeVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, float);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_SetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, float);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_GetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_CanSetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 96);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, float);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 112);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_SetVolumeOfRoomID(uint64_t a1, const void *a2, uint64_t a3, float a4)
{
  const void *v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, const void *, uint64_t, float);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v8 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v9 = cf;
  if ((_DWORD)v8)
  {
LABEL_4:
    v11 = v8;
    if (!v9)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 120);
  if (v10)
  {
    v8 = v10(v9, v7, a3, a4);
    goto LABEL_4;
  }
  v11 = 4294954514;
  if (v9)
LABEL_5:
    CFRelease(v9);
LABEL_6:
  if (v7)
    CFRelease(v7);
  return v11;
}

uint64_t singletonVolumeController_GetVolumeOfRoomID(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  const void *v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, const void *, uint64_t, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v8 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v9 = cf;
  if ((_DWORD)v8)
  {
LABEL_4:
    v11 = v8;
    if (!v9)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 128);
  if (v10)
  {
    v8 = v10(v9, v7, a3, a4);
    goto LABEL_4;
  }
  v11 = 4294954514;
  if (v9)
LABEL_5:
    CFRelease(v9);
LABEL_6:
  if (v7)
    CFRelease(v7);
  return v11;
}

uint64_t singletonVolumeController_SetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v7 = cf;
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v7)
LABEL_5:
    CFRelease(v7);
LABEL_6:
  if (v5)
    CFRelease(v5);
  return v9;
}

uint64_t singletonVolumeController_GetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v7 = cf;
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v7)
LABEL_5:
    CFRelease(v7);
LABEL_6:
  if (v5)
    CFRelease(v5);
  return v9;
}

uint64_t singletonVolumeController_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 168);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 176);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_CanSetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v7 = cf;
  if ((_DWORD)v6)
  {
LABEL_4:
    v9 = v6;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
  if (v8)
  {
    v6 = v8(v7, v5, a3);
    goto LABEL_4;
  }
  v9 = 4294954514;
  if (v7)
LABEL_5:
    CFRelease(v7);
LABEL_6:
  if (v5)
    CFRelease(v5);
  return v9;
}

uint64_t singletonVolumeController_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
    if (!v7)
    {
      v8 = 4294954514;
      if (!v6)
        return v8;
      goto LABEL_5;
    }
    v5 = v7(v6, a2, a3);
  }
  v8 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v8;
}

uint64_t singletonVolumeController_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 200);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, float);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 208);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t singletonVolumeController_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 216);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v8)
        return v10;
      goto LABEL_5;
    }
    v7 = v9(v8, a2, a3, a4);
  }
  v10 = v7;
  if (v8)
LABEL_5:
    CFRelease(v8);
  return v10;
}

uint64_t volumeControllerRemote_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

void singletonVolumeController_forgetRemoteVolumeController()
{
  singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0);
}

uint64_t singletonVolumeController_handleRemoteVolumeControllerNotifications()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t volumeControllerRemote_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  return FigXPCRelease();
}

__CFString *volumeControllerRemote_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = 0;
  if (!volumeControllerRemote_getObjectID(a1, &v4))
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigVolumeControllerRemote %p, objectID = %llu>"), a1, v4);
  return Mutable;
}

uint64_t volumeControllerRemote_ChangeMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;
  uint64_t v10;

  xdict = 0;
  v10 = 0;
  v8 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_VolumeDelta, a3);
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    v6 = ObjectID;
  }
  else
  {
    v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_SetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;
  uint64_t v10;

  xdict = 0;
  v10 = 0;
  v8 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_Volume, a3);
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    v6 = ObjectID;
  }
  else
  {
    v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_GetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  float v7;
  uint64_t value;
  xpc_object_t v10;
  xpc_object_t xdict;
  uint64_t v12;

  xdict = 0;
  v12 = 0;
  value = 0;
  v10 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v12);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
      {
        v7 = xpc_dictionary_get_double(v10, kFigVolumeControllerXPCMsgParam_Volume);
        *a3 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t value;
  xpc_object_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  value = 0;
  v9 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_CanSetMasterVolume);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_GetMasterVolumeControlTypeOfRoutingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t value;
  xpc_object_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  value = 0;
  v9 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_uint64(v9, kFigVolumeControllerXPCMsgParam_GetMasterVolumeControlType);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_ChangeVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID)
    {
      v5 = ObjectID;
    }
    else
    {
      v5 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v5)
      {
        v5 = FigXPCMessageSetCFString();
        if (!(_DWORD)v5)
        {
          xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_VolumeDelta, a3);
          v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_SetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID)
    {
      v5 = ObjectID;
    }
    else
    {
      v5 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v5)
      {
        v5 = FigXPCMessageSetCFString();
        if (!(_DWORD)v5)
        {
          xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a3);
          v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_GetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  float v6;
  uint64_t v8;

  v8 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
      {
        v6 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a3 = v6;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t v7;

  v7 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_CanSetEndpointVolume);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
        *a4 = xpc_dictionary_get_uint64(0, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID)
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v4)
      {
        v4 = FigXPCMessageSetCFString();
        if (!(_DWORD)v4)
        {
          v4 = FigXPCMessageSetCFString();
          if (!(_DWORD)v4)
          {
            xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a4);
            v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  float v7;
  uint64_t v9;

  v9 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v9);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
      {
        v7 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  v4 = 4294949706;
  v9 = 0;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v9);
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v9);
          ObjectID = FigXPCMessageSetCFString();
          if (!(_DWORD)ObjectID)
          {
            xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_Volume, a4);
            ObjectID = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
    v4 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  float v8;
  uint64_t value;
  xpc_object_t v11;
  xpc_object_t xdict;
  uint64_t v13;

  xdict = 0;
  v13 = 0;
  value = 0;
  v11 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v13);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID)
      || (xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value),
          ObjectID = FigXPCMessageSetCFString(),
          (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
      {
        v8 = xpc_dictionary_get_double(v11, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v8;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetMuteOfRoutingContext(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;
  uint64_t v10;

  xdict = 0;
  v10 = 0;
  v8 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_BOOL(xdict, kFigVolumeControllerXPCMsgParam_Mute, a3 != 0);
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    v6 = ObjectID;
  }
  else
  {
    v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_GetMuteOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t value;
  xpc_object_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  value = 0;
  v9 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a2)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID)
    {
      v5 = ObjectID;
    }
    else
    {
      v5 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v5)
      {
        v5 = FigXPCMessageSetCFString();
        if (!(_DWORD)v5)
        {
          xpc_dictionary_set_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute, a3 != 0);
          v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID)
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v4)
      {
        v4 = FigXPCMessageSetCFString();
        if (!(_DWORD)v4)
        {
          v4 = FigXPCMessageSetCFString();
          if (!(_DWORD)v4)
          {
            xpc_dictionary_set_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute, a4 != 0);
            v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
        *a4 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_CanSetMuteOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t value;
  xpc_object_t v9;
  xpc_object_t xdict;
  uint64_t v11;

  xdict = 0;
  v11 = 0;
  value = 0;
  v9 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t v7;

  v7 = 0;
  v3 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v3 = ObjectID;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
        *a4 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v8;

  v8 = 0;
  v4 = 4294949706;
  if (a2 && a3)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if ((_DWORD)ObjectID)
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v4)
      {
        v4 = FigXPCMessageSetCFString();
        if (!(_DWORD)v4)
        {
          v4 = FigXPCMessageSetCFString();
          if (!(_DWORD)v4)
          {
            xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a4);
            v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  float v7;
  uint64_t v9;

  v9 = 0;
  v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    ObjectID = volumeControllerRemote_getObjectID(a1, &v9);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
      {
        v7 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t FigSystemControllerStartServer()
{
  uint64_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = FigXPCServerStart();
  if (dword_1EE2B3ED8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

CFStringRef FigRoutingSessionDestinationCopyDescription(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  __CFString *v4;
  CFStringRef v5;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("routingSessionDestination_RouteDescriptors"));
  v4 = FigRouteDescriptorArrayCopySuccinctDescription(a1, Value);
  FigCFDictionaryGetFloatIfPresent();
  v5 = CFStringCreateWithFormat(a1, 0, CFSTR("<FigRoutingDestination: probability = %f, routeNames = %@>"), 0.0, v4);
  if (v4)
    CFRelease(v4);
  return v5;
}

__CFString *FigRouteDescriptorArrayCopySuccinctDescription(const __CFAllocator *a1, const __CFArray *a2)
{
  __CFString *Mutable;
  CFIndex v4;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFIndex Count;

  Mutable = CFStringCreateMutable(a1, 0);
  v4 = 0;
  if (!a2)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a2); v4 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v4);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteName"));
    CFStringAppendFormat(Mutable, 0, CFSTR("%@"), Value);
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = 0;
    if (v4 < Count - 1)
      CFStringAppend(Mutable, CFSTR(", "));
    ++v4;
    if (a2)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

uint64_t FigRoutingSessionCreate(uint64_t a1, char a2, const void *a3, _QWORD *a4)
{
  return routingSession_createInternal(a1, a2, 0, 0, a3, a4);
}

uint64_t routingSession_createInternal(uint64_t a1, char a2, char a3, char a4, const void *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  CFTypeRef v13;

  if (!a6)
    return FigSignalErrorAt();
  FigRoutingSessionGetClassID();
  v11 = CMDerivedObjectCreate();
  if (!(_DWORD)v11)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a5)
      v13 = CFRetain(a5);
    else
      v13 = 0;
    *(_QWORD *)DerivedStorage = v13;
    *(_BYTE *)(DerivedStorage + 8) = a2;
    *(_BYTE *)(DerivedStorage + 9) = a3;
    *(_BYTE *)(DerivedStorage + 10) = a4;
    *a6 = 0;
  }
  return v11;
}

uint64_t FigRoutingSessionCreateForInEarHeadphones(uint64_t a1, const void *a2, _QWORD *a3)
{
  return routingSession_createInternal(a1, 0, 1, 0, a2, a3);
}

uint64_t FigRoutingSessionCreateForActiveSharePlayCapableCallSession(uint64_t a1, const void *a2, _QWORD *a3)
{
  return routingSession_createInternal(a1, 0, 0, 1, a2, a3);
}

void routingSession_Finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *routingSession_CopyDebugDescription(uint64_t a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  void (*v5)(uint64_t, CFTypeRef *);
  CFStringRef v6;
  const char *v7;
  const char *v8;
  const char *v9;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  v5 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v5 && (v5(a1, &cf), cf))
    v6 = FigRoutingSessionDestinationCopyDescription(v3, (CFDictionaryRef)cf);
  else
    v6 = 0;
  v7 = "Y";
  if (DerivedStorage[8])
    v8 = "Y";
  else
    v8 = "N";
  if (DerivedStorage[9])
    v9 = "Y";
  else
    v9 = "N";
  if (!DerivedStorage[10])
    v7 = "N";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRoutingSession = %p: establishedAutomaticallyFromLikelyDestination %s, establishedBasedOnInEarStatusOfConnectedHeadphones %s, establishedBasedOnActiveSharePlayCapableCallSession %s, chosenDestination = %@>"), a1, v8, v9, v7, v6);
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

uint64_t routingSession_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  _BYTE *v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = (_BYTE *)(DerivedStorage + 8);
  }
  else if (FigCFEqual())
  {
    v6 = (_BYTE *)(DerivedStorage + 9);
  }
  else
  {
    if (!FigCFEqual())
      return 4294954512;
    v6 = (_BYTE *)(DerivedStorage + 10);
  }
  if (*v6)
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v8 = CFRetain(*v7);
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t routingSession_CopyDestination(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = *DerivedStorage;
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

uint64_t MXSessionCreateWithOptions(void *a1, MXSessionSecure **a2)
{
  MXSessionSecure *v4;
  uint64_t result;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a2 || !a1)
    return FigSignalErrorAt();
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKey:", CFSTR("SessionType")), "unsignedCharValue") == 1)
  {
    v4 = -[MXSessionSecure initWithOptions:]([MXSessionSecure alloc], "initWithOptions:", a1);
    if (v4)
    {
      result = 0;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      result = 4294951609;
    }
    *a2 = v4;
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *a2 = 0;
    return 4294954315;
  }
  return result;
}

uint64_t MXSessionCopyProperties(void *a1, void *a2, CFTypeRef *a3)
{
  void *v6;
  OS_dispatch_queue *v7;
  uint64_t UpTimeNanoseconds;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
  {
    v7 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __MXSessionCopyProperties_block_invoke;
    v12[3] = &unk_1E3099668;
    v12[4] = &v13;
    v12[5] = a1;
    v12[6] = a2;
    v12[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionCopyProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 291, 0, 0, v7, (uint64_t)v12);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v9 = objc_msgSend(a1, "copyProperties:outPropertyErrors:", a2, a3);
    v14[3] = v9;
    if (a3 && *a3)
      CFRetain(*a3);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionCopyProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, objc_msgSend(a2, "description"));
  }
  objc_autoreleasePoolPop(v6);
  v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1936FC558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionSetProperties(void *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8;
  void *v9;
  OS_dispatch_queue *v10;
  uint64_t UpTimeNanoseconds;
  int v12;
  uint64_t v13;
  _QWORD v15[8];
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v8 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (a1)
  {
    v9 = (void *)MEMORY[0x194035B20](v8);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v10 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __MXSessionSetProperties_block_invoke;
      v15[3] = &unk_1E309D230;
      v15[4] = &v17;
      v15[5] = a1;
      v16 = a3;
      v15[6] = a2;
      v15[7] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 415, 0, 0, v10, (uint64_t)v15);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v12 = objc_msgSend(a1, "setProperties:usingErrorHandlingStrategy:outPropertiesErrors:", a2, a3, a4);
      *((_DWORD *)v18 + 6) = v12;
      if (a4 && *a4)
        CFRetain(*a4);
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionSetProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, objc_msgSend((id)objc_msgSend(a2, "allKeys"), "description"));
    }
    objc_autoreleasePoolPop(v9);
    v13 = *((unsigned int *)v18 + 6);
  }
  else
  {
    v13 = FigSignalErrorAt();
    *((_DWORD *)v18 + 6) = v13;
  }
  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_1936FC7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionSetOrderedProperties(void *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8;
  void *v9;
  OS_dispatch_queue *v10;
  uint64_t UpTimeNanoseconds;
  int v12;
  uint64_t v13;
  _QWORD v15[8];
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v8 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (a1)
  {
    v9 = (void *)MEMORY[0x194035B20](v8);
    if (objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
    {
      v10 = -[MXSessionManagerSidekick serialQueue](+[MXSessionManagerSidekick sharedInstance](MXSessionManagerSidekick, "sharedInstance"), "serialQueue");
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __MXSessionSetOrderedProperties_block_invoke;
      v15[3] = &unk_1E309D230;
      v15[4] = &v17;
      v15[5] = a1;
      v16 = a3;
      v15[6] = a2;
      v15[7] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetOrderedProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 458, 0, 0, v10, (uint64_t)v15);
    }
    else
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v12 = objc_msgSend(a1, "setOrderedProperties:usingErrorHandlingStrategy:outPropertiesErrors:", a2, a3, a4);
      *((_DWORD *)v18 + 6) = v12;
      if (a4 && *a4)
        CFRetain(*a4);
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionSetOrderedProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, objc_msgSend(a2, "description"));
    }
    objc_autoreleasePoolPop(v9);
    v13 = *((unsigned int *)v18 + 6);
  }
  else
  {
    v13 = FigSignalErrorAt();
    *((_DWORD *)v18 + 6) = v13;
  }
  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_1936FCA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionBeginInterruption(void *a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t UpTimeNanoseconds;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v2 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3052000000;
  v21 = __Block_byref_object_copy__6;
  v22 = __Block_byref_object_dispose__6;
  v23 = a1;
  v14 = 0;
  v15 = (float *)&v14;
  v16 = 0x2020000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (!a1)
  {
    v7 = FigSignalErrorAt();
    *((_DWORD *)v25 + 6) = v7;
    goto LABEL_12;
  }
  v3 = (void *)MEMORY[0x194035B20](v2);
  if (isSessionSidekick(a1))
  {
    v4 = objc_msgSend(a1, "activate");
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend((id)v19[5], "setInterruptionCalledOffAudioControlQueue:", 1);
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v6 = MXGetSerialQueue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __MXSessionBeginInterruption_block_invoke;
    v9[3] = &unk_1E309D258;
    v9[4] = &v24;
    v9[5] = &v18;
    v9[6] = &v10;
    v9[7] = &v14;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption", (uint64_t)"MXSession_CInterfaceCommon.m", 544, 0, 0, v6, (uint64_t)v9);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionBeginInterruption", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      goto LABEL_11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_11;
    objc_msgSend((id)v19[5], "setInterruptionCalledOffAudioControlQueue:", 0);
    if (*((_DWORD *)v25 + 6))
      goto LABEL_11;
    v4 = mxsession_handleAsyncDuckingSleep((void *)v19[5], *((unsigned __int8 *)v11 + 24), v15[6]);
  }
  *((_DWORD *)v25 + 6) = v4;
LABEL_11:
  objc_autoreleasePoolPop(v3);
  v7 = *((unsigned int *)v25 + 6);
LABEL_12:
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);
  return v7;
}

void sub_1936FCD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t mxsession_handleAsyncDuckingSleep(void *a1, int a2, float a3)
{
  MXSessionManager *v6;
  double v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a3 <= 0.0)
    return 0;
  v6 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  *(float *)&v7 = a3;
  -[MXSessionManager sleepForAsyncDucking:duration:](v6, "sleepForAsyncDucking:duration:", a2 != 0, v7);
  if ((objc_msgSend((id)objc_msgSend(a1, "getCoreSession"), "isActive") & 1) != 0)
    return 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294951609;
}

uint64_t _MXSessionBeginInterruption_WithFlags(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t UpTimeNanoseconds;

  v4 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (!a1)
    return FigSignalErrorAt();
  v5 = (void *)MEMORY[0x194035B20](v4);
  if (isSessionSidekick(a1))
  {
    v6 = objc_msgSend(a1, "activate");
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v6 = objc_msgSend(a1, "_beginInterruptionWithSecTask:andFlags:", 0, a2);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionBeginInterruption_WithFlags", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v5);
  return v6;
}

uint64_t MXSessionBeginInterruption_WithFlags(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t UpTimeNanoseconds;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;

  v4 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3052000000;
  v23 = __Block_byref_object_copy__6;
  v24 = __Block_byref_object_dispose__6;
  v25 = a1;
  v16 = 0;
  v17 = (float *)&v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (!a1)
  {
    v9 = FigSignalErrorAt();
    *((_DWORD *)v27 + 6) = v9;
    goto LABEL_12;
  }
  v5 = (void *)MEMORY[0x194035B20](v4);
  if (isSessionSidekick(a1))
  {
    v6 = objc_msgSend(a1, "activate");
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend((id)v21[5], "setInterruptionCalledOffAudioControlQueue:", 1);
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v8 = MXGetSerialQueue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __MXSessionBeginInterruption_WithFlags_block_invoke;
    v11[3] = &unk_1E309D280;
    v11[4] = &v26;
    v11[5] = &v20;
    v11[6] = &v12;
    v11[7] = &v16;
    v11[8] = a2;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption_WithFlags", (uint64_t)"MXSession_CInterfaceCommon.m", 641, 0, 0, v8, (uint64_t)v11);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionBeginInterruption_WithFlags", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      goto LABEL_11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_11;
    objc_msgSend((id)v21[5], "setInterruptionCalledOffAudioControlQueue:", 0);
    if (*((_DWORD *)v27 + 6))
      goto LABEL_11;
    v6 = mxsession_handleAsyncDuckingSleep((void *)v21[5], *((unsigned __int8 *)v13 + 24), v17[6]);
  }
  *((_DWORD *)v27 + 6) = v6;
LABEL_11:
  objc_autoreleasePoolPop(v5);
  v9 = *((unsigned int *)v27 + 6);
LABEL_12:
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v26, 8);
  return v9;
}

void sub_1936FD2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionBeginInterruption_WithSecTaskAndFlags(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t UpTimeNanoseconds;
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3052000000;
  v25 = __Block_byref_object_copy__6;
  v26 = __Block_byref_object_dispose__6;
  v27 = a1;
  v18 = 0;
  v19 = (float *)&v18;
  v20 = 0x2020000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (!a1)
  {
    v11 = FigSignalErrorAt();
    *((_DWORD *)v29 + 6) = v11;
    goto LABEL_12;
  }
  v7 = (void *)MEMORY[0x194035B20](v6);
  if (isSessionSidekick(a1))
  {
    v8 = objc_msgSend(a1, "activate");
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend((id)v23[5], "setInterruptionCalledOffAudioControlQueue:", 1);
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v10 = MXGetSerialQueue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __MXSessionBeginInterruption_WithSecTaskAndFlags_block_invoke;
    v13[3] = &unk_1E3099750;
    v13[4] = &v28;
    v13[5] = &v22;
    v13[8] = a2;
    v13[9] = a3;
    v13[6] = &v14;
    v13[7] = &v18;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption_WithSecTaskAndFlags", (uint64_t)"MXSession_CInterfaceCommon.m", 691, 0, 0, v10, (uint64_t)v13);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionBeginInterruption_WithSecTaskAndFlags", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      goto LABEL_11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_11;
    objc_msgSend((id)v23[5], "setInterruptionCalledOffAudioControlQueue:", 0);
    if (*((_DWORD *)v29 + 6))
      goto LABEL_11;
    v8 = mxsession_handleAsyncDuckingSleep((void *)v23[5], *((unsigned __int8 *)v15 + 24), v19[6]);
  }
  *((_DWORD *)v29 + 6) = v8;
LABEL_11:
  objc_autoreleasePoolPop(v7);
  v11 = *((unsigned int *)v29 + 6);
LABEL_12:
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v11;
}

void sub_1936FD608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionEndInterruption(void *a1, const __CFString *a2)
{
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  uint64_t UpTimeNanoseconds;
  NSObject *v8;
  MXSessionManager *v9;
  double v10;
  int v11;
  uint64_t v12;
  _QWORD v14[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  v4 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x3052000000;
  v26 = __Block_byref_object_copy__6;
  v27 = __Block_byref_object_dispose__6;
  v28 = a1;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (a1)
  {
    v5 = (void *)MEMORY[0x194035B20](v4);
    if (isSessionSidekick(a1))
    {
      if (a2)
        v6 = CFStringHasPrefix(a2, CFSTR("resumable")) != 0;
      else
        v6 = 0;
      v11 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v6, 0);
      *((_DWORD *)v30 + 6) = v11;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend((id)v24[5], "setInterruptionCalledOffAudioControlQueue:", 1);
      }
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v8 = MXGetSerialQueue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __MXSessionEndInterruption_block_invoke;
      v14[3] = &unk_1E309D280;
      v14[4] = &v29;
      v14[5] = &v23;
      v14[6] = &v15;
      v14[7] = &v19;
      v14[8] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption", (uint64_t)"MXSession_CInterfaceCommon.m", 778, 0, 0, v8, (uint64_t)v14);
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionEndInterruption", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend((id)v24[5], "setInterruptionCalledOffAudioControlQueue:", 0);
          v9 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          LODWORD(v10) = *((_DWORD *)v20 + 6);
          -[MXSessionManager sleepForAsyncDucking:duration:](v9, "sleepForAsyncDucking:duration:", *((unsigned __int8 *)v16 + 24), v10);
        }
      }
    }
    objc_autoreleasePoolPop(v5);
    v12 = *((unsigned int *)v30 + 6);
  }
  else
  {
    v12 = FigSignalErrorAt();
    *((_DWORD *)v30 + 6) = v12;
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v29, 8);
  return v12;
}

void sub_1936FD954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionEndInterruption_WithInterruptionNotification(void *a1, const __CFString *a2, int a3)
{
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  uint64_t UpTimeNanoseconds;
  NSObject *v10;
  MXSessionManager *v11;
  double v12;
  int v13;
  uint64_t v14;
  _QWORD v16[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x3052000000;
  v28 = __Block_byref_object_copy__6;
  v29 = __Block_byref_object_dispose__6;
  v30 = a1;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (a1)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (isSessionSidekick(a1))
    {
      if (a2)
        v8 = CFStringHasPrefix(a2, CFSTR("resumable")) != 0;
      else
        v8 = 0;
      v13 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v8, a3 != 0);
      *((_DWORD *)v32 + 6) = v13;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend((id)v26[5], "setInterruptionCalledOffAudioControlQueue:", 1);
      }
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = MXGetSerialQueue();
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __MXSessionEndInterruption_WithInterruptionNotification_block_invoke;
      v16[3] = &unk_1E309D280;
      v16[4] = &v31;
      v16[5] = &v25;
      v16[6] = &v17;
      v16[7] = &v21;
      v16[8] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption_WithInterruptionNotification", (uint64_t)"MXSession_CInterfaceCommon.m", 843, 0, 0, v10, (uint64_t)v16);
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionEndInterruption_WithInterruptionNotification", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend((id)v26[5], "setInterruptionCalledOffAudioControlQueue:", 0);
          v11 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          LODWORD(v12) = *((_DWORD *)v22 + 6);
          -[MXSessionManager sleepForAsyncDucking:duration:](v11, "sleepForAsyncDucking:duration:", *((unsigned __int8 *)v18 + 24), v12);
        }
      }
    }
    objc_autoreleasePoolPop(v7);
    v14 = *((unsigned int *)v32 + 6);
  }
  else
  {
    v14 = FigSignalErrorAt();
    *((_DWORD *)v32 + 6) = v14;
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v31, 8);
  return v14;
}

void sub_1936FDCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionEndInterruption(void *a1, const __CFString *a2)
{
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  uint64_t UpTimeNanoseconds;
  uint64_t v8;

  v4 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (!a1)
    return FigSignalErrorAt();
  v5 = (void *)MEMORY[0x194035B20](v4);
  if (isSessionSidekick(a1))
  {
    if (a2)
      v6 = CFStringHasPrefix(a2, CFSTR("resumable")) != 0;
    else
      v6 = 0;
    v8 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v6, 0);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v8 = objc_msgSend(a1, "_endInterruptionWithSecTask:andStatus:", 0, a2);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionEndInterruption", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v5);
  return v8;
}

uint64_t MXSessionEndInterruption_WithSecTaskAndStatus(void *a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  uint64_t UpTimeNanoseconds;
  NSObject *v10;
  MXSessionManager *v11;
  double v12;
  int v13;
  uint64_t v14;
  _QWORD v16[10];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x3052000000;
  v28 = __Block_byref_object_copy__6;
  v29 = __Block_byref_object_dispose__6;
  v30 = a1;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (a1)
  {
    v7 = (void *)MEMORY[0x194035B20](v6);
    if (isSessionSidekick(a1))
    {
      if (a3)
        v8 = CFStringHasPrefix(a3, CFSTR("resumable")) != 0;
      else
        v8 = 0;
      v13 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v8, 0);
      *((_DWORD *)v32 + 6) = v13;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend((id)v26[5], "setInterruptionCalledOffAudioControlQueue:", 1);
      }
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v10 = MXGetSerialQueue();
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __MXSessionEndInterruption_WithSecTaskAndStatus_block_invoke;
      v16[3] = &unk_1E3099750;
      v16[4] = &v31;
      v16[5] = &v25;
      v16[8] = a2;
      v16[9] = a3;
      v16[6] = &v17;
      v16[7] = &v21;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption_WithSecTaskAndStatus", (uint64_t)"MXSession_CInterfaceCommon.m", 923, 0, 0, v10, (uint64_t)v16);
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionEndInterruption_WithSecTaskAndStatus", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend((id)v26[5], "setInterruptionCalledOffAudioControlQueue:", 0);
          v11 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          LODWORD(v12) = *((_DWORD *)v22 + 6);
          -[MXSessionManager sleepForAsyncDucking:duration:](v11, "sleepForAsyncDucking:duration:", *((unsigned __int8 *)v18 + 24), v12);
        }
      }
    }
    objc_autoreleasePoolPop(v7);
    v14 = *((unsigned int *)v32 + 6);
  }
  else
  {
    v14 = FigSignalErrorAt();
    *((_DWORD *)v32 + 6) = v14;
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v31, 8);
  return v14;
}

void sub_1936FE110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionEndInterruption_WithSecTaskAndStatus(void *a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  uint64_t UpTimeNanoseconds;
  uint64_t v10;

  v6 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (!a1)
    return FigSignalErrorAt();
  v7 = (void *)MEMORY[0x194035B20](v6);
  if (isSessionSidekick(a1))
  {
    if (a3)
      v8 = CFStringHasPrefix(a3, CFSTR("resumable")) != 0;
    else
      v8 = 0;
    v10 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v8, 0);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v10 = objc_msgSend(a1, "_endInterruptionWithSecTask:andStatus:", a2, a3);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_MXSessionEndInterruption_WithSecTaskAndStatus", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v7);
  return v10;
}

unint64_t MXIsTypeOfSession(unint64_t result)
{
  void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = (void *)result;
    v2 = CFGetTypeID((CFTypeRef)result);
    return v2 == CMSessionGetTypeID() || isCoreSessionSidekick(v1) != 0;
  }
  return result;
}

uint64_t MXIsTypeOfMXSession(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    if ((objc_msgSend((id)result, "isMemberOfClass:", objc_opt_class()) & 1) != 0)
      return 1;
    else
      return objc_msgSend(v1, "isMemberOfClass:", objc_opt_class());
  }
  return result;
}

uint64_t MXSessionAddResource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  NSObject *v12;
  _QWORD v14[9];
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
    return 0;
  v9 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3052000000;
  v15[3] = __Block_byref_object_copy__6;
  v15[4] = __Block_byref_object_dispose__6;
  v15[5] = a1;
  if (a1)
  {
    v10 = (void *)MEMORY[0x194035B20](v9);
    v11 = isSessionSidekick(a1);
    if ((v11 & 1) == 0)
    {
      v12 = MXGetSerialQueue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __MXSessionAddResource_block_invoke;
      v14[3] = &unk_1E3099618;
      v14[4] = &v16;
      v14[5] = v15;
      v14[6] = a2;
      v14[7] = a3;
      v14[8] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionAddResource", (uint64_t)"MXSession_CInterfaceCommon.m", 1048, 0, 0, v12, (uint64_t)v14);
    }
    objc_autoreleasePoolPop(v10);
    if ((v11 & 1) != 0)
      v8 = 4294954309;
    else
      v8 = *((unsigned int *)v17 + 6);
  }
  else
  {
    v8 = FigSignalErrorAt();
    *((_DWORD *)v17 + 6) = v8;
  }
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_1936FE504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionRemoveResource(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  NSObject *v8;
  _QWORD v10[7];
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
    return 0;
  v5 = +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3052000000;
  v11[3] = __Block_byref_object_copy__6;
  v11[4] = __Block_byref_object_dispose__6;
  v11[5] = a1;
  if (a1)
  {
    v6 = (void *)MEMORY[0x194035B20](v5);
    v7 = isSessionSidekick(a1);
    if ((v7 & 1) == 0)
    {
      v8 = MXGetSerialQueue();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __MXSessionRemoveResource_block_invoke;
      v10[3] = &unk_1E309C7E0;
      v10[4] = &v12;
      v10[5] = v11;
      v10[6] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionRemoveResource", (uint64_t)"MXSession_CInterfaceCommon.m", 1078, 0, 0, v8, (uint64_t)v10);
    }
    objc_autoreleasePoolPop(v6);
    if ((v7 & 1) != 0)
      v4 = 4294954309;
    else
      v4 = *((unsigned int *)v13 + 6);
  }
  else
  {
    v4 = FigSignalErrorAt();
    *((_DWORD *)v13 + 6) = v4;
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  return v4;
}

void sub_1936FE6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigStarkModeChangeGetActions(_OWORD *a1, _OWORD *a2, int *a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  int FigStarkModeStateEncoding;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  CFIndex Count;
  CFIndex v32;
  CFIndex v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  const __CFDictionary *ValueAtIndex;
  int v39;
  const __CFDictionary *v40;
  CFIndex v41;
  CFIndex v42;
  int v43;
  CFIndex v44;
  const __CFDictionary *v45;
  int v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[48];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = &sCategoryToPriorityMapForTriangle;
  if (a4)
  {
    if (sFigStarkModeActionMap_V1)
      goto LABEL_7;
    v9 = 1;
  }
  else
  {
    if (sFigStarkModeActionMap_V2)
      goto LABEL_7;
    v9 = 2;
  }
  fsm_setupStarkModeActionMap(v9);
LABEL_7:
  v10 = a1[1];
  *(_OWORD *)v54 = *a1;
  *(_OWORD *)&v54[16] = v10;
  FigStarkModeStateEncoding = fsm_getFigStarkModeStateEncoding((int *)v54);
  v12 = a2[1];
  *(_OWORD *)v54 = *a2;
  *(_OWORD *)&v54[16] = v12;
  v13 = fsm_getFigStarkModeStateEncoding((int *)v54);
  v14 = a3[1];
  v15 = *(_OWORD *)(a3 + 6);
  *(_OWORD *)v54 = *(_OWORD *)(a3 + 2);
  *(_OWORD *)&v54[16] = v15;
  *(_OWORD *)&v54[32] = *(_OWORD *)(a3 + 10);
  v16 = a3[14];
  if (v14 > 2)
    v17 = 0;
  else
    v17 = qword_1937A3798[v14];
  v19 = a3[15];
  v18 = a3[16];
  v52 = *(_OWORD *)&v54[24];
  v53 = *(_QWORD *)&v54[40];
  v20 = fsm_getFigStarkModeResourceChangeRequestEncoding((int *)&v52);
  v21 = 0;
  if (v16 > 9)
  {
    if (v16 == 10)
    {
      v21 = 0x200000000000;
    }
    else if (v16 == 11)
    {
      v21 = 0x400000000000;
    }
  }
  else if (v16 == -1)
  {
    v21 = 0x100000000000;
  }
  else if (!v16)
  {
    v21 = 0x80000000000;
  }
  if ((v19 + 1) > 2)
    v22 = 0;
  else
    v22 = qword_1937A37B0[v19 + 1];
  if ((v18 + 1) > 2)
    v23 = 0;
  else
    v23 = qword_1937A37C8[v18 + 1];
  v24 = v23 | v22 | v21 | v17 | ((unint64_t)v20 << 23);
  v25 = *a3;
  *(_OWORD *)v54 = *(_OWORD *)(a3 + 1);
  *(_OWORD *)&v54[12] = *((_OWORD *)a3 + 1);
  if (v25 > 2)
    v26 = 0;
  else
    v26 = dword_1937A37E0[v25];
  v52 = *(_OWORD *)&v54[4];
  v53 = *(_QWORD *)&v54[20];
  v27 = v26 | (8 * fsm_getFigStarkModeResourceChangeRequestEncoding((int *)&v52));
  v28 = a3[8] != 0;
  if (v16)
    v28 |= 4u;
  if (v19)
    v28 |= 8u;
  if (v18)
    v29 = v28 | 0x10;
  else
    v29 = v28;
  v30 = 2 * (a3[2] != 0);
  if (a4)
  {
    if (sFigStarkModeActionMap_V1)
    {
      Count = CFArrayGetCount((CFArrayRef)sFigStarkModeActionMap_V1);
      if (Count >= 1)
      {
        v32 = Count;
        v50 = v24;
        v33 = 0;
        LODWORD(v34) = 0;
        v48 = v30;
        v35 = v27;
        v36 = v29;
        do
        {
          v37 = v8;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v8[236], v33);
          v39 = fsm_getFigStarkModeChangeActionFromDict(ValueAtIndex, FigStarkModeStateEncoding, v13, v50, v36);
          v40 = ValueAtIndex;
          v8 = v37;
          v34 = v39 | v34 | fsm_getFigStarkModeChangeActionFromDict(v40, FigStarkModeStateEncoding, v13, v35, v48);
          ++v33;
        }
        while (v32 != v33);
        return v34;
      }
    }
    return 0;
  }
  if (!sFigStarkModeActionMap_V2)
    return 0;
  v41 = CFArrayGetCount((CFArrayRef)sFigStarkModeActionMap_V2);
  if (v41 < 1)
    return 0;
  v49 = v27;
  v51 = v24;
  v42 = 0;
  LODWORD(v34) = 0;
  v43 = v29;
  do
  {
    v44 = v41;
    v45 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)sFigStarkModeActionMap_V2, v42);
    v46 = fsm_getFigStarkModeChangeActionFromDict(v45, FigStarkModeStateEncoding, v13, v51, v43);
    v34 = v46 | v34 | fsm_getFigStarkModeChangeActionFromDict(v45, FigStarkModeStateEncoding, v13, v49, v30);
    v41 = v44;
    ++v42;
  }
  while (v44 != v42);
  return v34;
}

void fsm_setupStarkModeActionMap(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  CFTypeID TypeID;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;
  const void *Value;
  CFTypeRef v9;
  __CFArray *Mutable;
  __CFArray *ActionMapFromDict;
  const __CFArray *v12;
  __CFArray *v13;
  const __CFArray *v14;
  __CFArray *v15;
  const __CFArray *v16;
  __CFArray *v17;
  const __CFArray *v18;
  __CFArray *v19;
  const __CFArray *v20;
  CFArrayRef Copy;
  uint64_t *v22;
  CFRange v23;
  CFRange v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;

  CelestialGetModelSpecificName();
  v2 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v2)
  {
    v3 = (const void *)v2;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(v3)
      || (v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          (v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Version%u"), a1)) == 0))
    {
      v9 = v3;
LABEL_7:
      CFRelease(v9);
      return;
    }
    v7 = v6;
    Value = CFDictionaryGetValue((CFDictionaryRef)v3, v6);
    if (Value)
      v9 = CFRetain(Value);
    else
      v9 = 0;
    CFRelease(v7);
    CFRelease(v3);
    if (v9)
    {
      Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
      ActionMapFromDict = fsm_createActionMapFromDict((const __CFDictionary *)v9, CFSTR("MainAudioRequest"));
      if (ActionMapFromDict)
      {
        v12 = ActionMapFromDict;
        v23.length = CFArrayGetCount(ActionMapFromDict);
        v23.location = 0;
        CFArrayAppendArray(Mutable, v12, v23);
        CFRelease(v12);
      }
      v13 = fsm_createActionMapFromDict((const __CFDictionary *)v9, CFSTR("SpeechRequest"));
      if (v13)
      {
        v14 = v13;
        v24.length = CFArrayGetCount(v13);
        v24.location = 0;
        CFArrayAppendArray(Mutable, v14, v24);
        CFRelease(v14);
      }
      v15 = fsm_createActionMapFromDict((const __CFDictionary *)v9, CFSTR("PhoneCallRequest"));
      if (v15)
      {
        v16 = v15;
        v25.length = CFArrayGetCount(v15);
        v25.location = 0;
        CFArrayAppendArray(Mutable, v16, v25);
        CFRelease(v16);
      }
      v17 = fsm_createActionMapFromDict((const __CFDictionary *)v9, CFSTR("ScreenRequest"));
      if (v17)
      {
        v18 = v17;
        v26.length = CFArrayGetCount(v17);
        v26.location = 0;
        CFArrayAppendArray(Mutable, v18, v26);
        CFRelease(v18);
      }
      v19 = fsm_createActionMapFromDict((const __CFDictionary *)v9, CFSTR("TurnByTurnRequest"));
      if (v19)
      {
        v20 = v19;
        v27.length = CFArrayGetCount(v19);
        v27.location = 0;
        CFArrayAppendArray(Mutable, v20, v27);
        CFRelease(v20);
      }
      Copy = CFArrayCreateCopy(v5, Mutable);
      v22 = &sFigStarkModeActionMap_V2;
      if ((_DWORD)a1 == 1)
        v22 = &sFigStarkModeActionMap_V1;
      *v22 = (uint64_t)Copy;
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_7;
    }
  }
}

uint64_t fsm_getFigStarkModeStateEncoding(int *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v1 = *a1;
  if (v1 > 2)
    v2 = 0;
  else
    v2 = dword_1937A37E0[v1];
  v3 = a1[2];
  if (v3 > 2)
    v4 = 0;
  else
    v4 = dword_1937A37EC[v3];
  v5 = a1[4];
  if (v5 > 2)
    v6 = 0;
  else
    v6 = dword_1937A37F8[v5];
  v7 = a1[5];
  v8 = a1[6];
  if (v7)
    v9 = 0;
  else
    v9 = 512;
  if (v7 == 10)
    v10 = 1024;
  else
    v10 = v9;
  if (v7 == 11)
    v11 = 2048;
  else
    v11 = v10;
  if (v8 > 2)
    v12 = 0;
  else
    v12 = dword_1937A3804[v8];
  v13 = a1[7];
  if (v13 > 2)
    v14 = 0;
  else
    v14 = dword_1937A3810[v13];
  return v4 | v2 | v12 | v6 | v11 | v14;
}

uint64_t fsm_getFigStarkModeChangeActionFromDict(const __CFDictionary *a1, int a2, int a3, uint64_t a4, int a5)
{
  const __CFNumber *Value;
  int v11;
  _BOOL4 v12;
  int v13;
  const __CFNumber *v14;
  int v15;
  _BOOL4 v16;
  int v17;
  const __CFNumber *v18;
  unint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  int v22;
  const __CFNumber *v23;
  uint64_t result;
  const __CFNumber *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int valuePtr;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("PreviousModeEncoding"));
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  v11 = valuePtr & a2;
  v12 = (valuePtr & a2 & 7) == 0;
  if ((valuePtr & a2 & 0x38) == 0)
    v12 = 1;
  if ((v11 & 0x1C0) == 0)
    v12 = 1;
  if ((v11 & 0xE00) == 0)
    v12 = 1;
  if ((v11 & 0x7000) == 0)
    v12 = 1;
  v13 = (v11 & 0x38000) == 0 || v12;
  v29 = 0;
  v14 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CurrentModeEncoding"));
  CFNumberGetValue(v14, kCFNumberSInt32Type, &v29);
  v15 = v29 & a3;
  v16 = (v29 & a3 & 7) == 0;
  if ((v29 & a3 & 0x38) == 0)
    v16 = 1;
  if ((v15 & 0x1C0) == 0)
    v16 = 1;
  if ((v15 & 0xE00) == 0)
    v16 = 1;
  if ((v15 & 0x7000) == 0)
    v16 = 1;
  v17 = (v15 & 0x38000) == 0 || v16;
  v28 = 0;
  v18 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("ModeRequestEncoding"));
  CFNumberGetValue(v18, kCFNumberSInt64Type, &v28);
  v19 = v28 & a4;
  v20 = v28 & a4 & 7;
  if ((a5 & 2) != 0)
  {
    if (!v20
      || (v19 & 0x780000) == 0
      || (v19 & 0x78000) == 0
      || (v19 & 0x7800) == 0
      || (v19 & 0xF8) == 0
      || (v19 & 0x700) == 0)
    {
      goto LABEL_34;
    }
  }
  else
  {
    v21 = (int8x16_t)vdupq_n_s64(v19);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1937A3750)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1937A3760))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1937A3770)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1937A3780)))))) & 1) != 0|| !v20)
    {
LABEL_34:
      v22 = 0;
      goto LABEL_35;
    }
  }
  v22 = 1;
LABEL_35:
  v27 = 0;
  v23 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("RequestType"));
  CFNumberGetValue(v23, kCFNumberSInt32Type, &v27);
  result = 0;
  if (v22 && !(v13 | v17))
  {
    if ((v27 & a5) != 0)
    {
      v26 = 0;
      v25 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("ModeChangeAction"));
      CFNumberGetValue(v25, kCFNumberSInt64Type, &v26);
      return v26;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *fsm_createActionMapFromDict(const __CFDictionary *a1, const void *a2)
{
  const __CFArray *Value;
  const __CFAllocator *v3;
  CFIndex v4;
  __CFDictionary *Mutable;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  const void *UInt32;
  const __CFDictionary *v9;
  const void *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  const void *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  int v28;
  const __CFArray *v29;
  const __CFArray *v30;
  const void *UInt64;
  const __CFArray *v32;
  const __CFArray *v33;
  CFIndex v34;
  CFIndex v35;
  CFIndex v36;
  int v37;
  const void *v38;
  const void *v39;
  __CFArray *v40;
  const __CFArray *v42;
  __CFArray *theArray;
  CFIndex Count;
  const __CFAllocator *v45;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual())
  {
    FigCFEqual();
  }
  if (!Value)
    return 0;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = 0;
  v42 = Value;
  v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  do
  {
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v4);
    v7 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("PreviousMode"));
    fsm_translatePreviousOrCurrentModeDict(v7);
    UInt32 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, CFSTR("PreviousModeEncoding"), UInt32);
    if (UInt32)
      CFRelease(UInt32);
    v9 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CurrentMode"));
    fsm_translatePreviousOrCurrentModeDict(v9);
    v10 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, CFSTR("CurrentModeEncoding"), v10);
    if (v10)
      CFRelease(v10);
    v11 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ModeChangeRequest"));
    if (v11)
    {
      v12 = v11;
      CFDictionaryGetValue(v11, CFSTR("Requestor"));
      fsm_getFigStarkModeEntityEncodingFromCFString();
      if (FigCFEqual())
      {
        v13 = CFDictionaryGetValue(v12, CFSTR("TransferType"));
        fsm_getFigStarkModeTransferTypeEncodingFromCFString((uint64_t)v13);
        v14 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("TransferPriority"));
        fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(v14);
        v15 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("TakeConstraint"));
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v15);
        v16 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("BorrowConstraint"));
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v16);
        v17 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("UnborrowConstraint"));
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v17);
      }
      else
      {
        if (FigCFEqual())
        {
          v18 = CFDictionaryGetValue(v12, CFSTR("TransferType"));
          fsm_getFigStarkModeTransferTypeEncodingFromCFString((uint64_t)v18);
          v19 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("TransferPriority"));
          fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(v19);
          v20 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("TakeConstraint"));
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v20);
          v21 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("BorrowConstraint"));
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v21);
          v22 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("UnborrowConstraint"));
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v22);
        }
        v23 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("SpeechState"));
        if (v23)
        {
          v24 = v23;
          v25 = CFArrayGetCount(v23);
          if (v25 >= 1)
          {
            v26 = v25;
            v27 = 0;
            v28 = 0;
            do
            {
              CFArrayGetValueAtIndex(v24, v27);
              if (FigCFEqual())
              {
                v28 |= 1u;
              }
              else if (FigCFEqual())
              {
                v28 |= 2u;
              }
              else if (FigCFEqual())
              {
                v28 |= 4u;
              }
              else if (FigCFEqual())
              {
                v28 |= 8u;
              }
              ++v27;
            }
            while (v26 != v27);
          }
        }
        v29 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("PhoneCallState"));
        if (v29)
          fsm_getFigStarkModeTriStateEncodingFromCFArray(v29);
        v30 = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("TurnByTurnState"));
        if (v30)
          fsm_getFigStarkModeTriStateEncodingFromCFArray(v30);
        Value = v42;
      }
    }
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, CFSTR("ModeRequestEncoding"), UInt64);
    if (UInt64)
      CFRelease(UInt64);
    v32 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ModeChangeAction"));
    if (v32)
    {
      v33 = v32;
      v34 = CFArrayGetCount(v32);
      if (v34 >= 1)
      {
        v35 = v34;
        v36 = 0;
        v37 = 0;
        do
        {
          CFArrayGetValueAtIndex(v33, v36);
          if (FigCFEqual())
          {
            v37 |= 1u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x20000u;
          }
          else if (FigCFEqual())
          {
            v37 |= 2u;
          }
          else if (FigCFEqual())
          {
            v37 |= 4u;
          }
          else if (FigCFEqual())
          {
            v37 |= 8u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x10u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x20u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x40u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x80u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x100u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x200u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x400u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x800u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x1000u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x2000u;
          }
          else
          {
            if (FigCFEqual())
            {
              v37 |= 0x4000u;
            }
            else if (FigCFEqual())
            {
              v37 |= 0x8000u;
            }
            else if (FigCFEqual())
            {
              v37 |= 0x10000u;
            }
            Value = v42;
          }
          ++v36;
        }
        while (v35 != v36);
      }
    }
    v3 = v45;
    v38 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, CFSTR("ModeChangeAction"), v38);
    if (v38)
      CFRelease(v38);
    v39 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, CFSTR("RequestType"), v39);
    if (v39)
      CFRelease(v39);
    v40 = theArray;
    CFArrayAppendValue(theArray, Mutable);
    if (Mutable)
      CFRelease(Mutable);
    ++v4;
  }
  while (v4 != Count);
  return v40;
}

const __CFDictionary *fsm_translatePreviousOrCurrentModeDict(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  int FigStarkModeEntityEncodingFromCFString;
  int v3;
  unsigned int v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  int v10;
  unsigned int v11;

  if (result)
  {
    v1 = result;
    CFDictionaryGetValue(result, CFSTR("ScreenEntity"));
    FigStarkModeEntityEncodingFromCFString = fsm_getFigStarkModeEntityEncodingFromCFString();
    CFDictionaryGetValue(v1, CFSTR("MainAudioEntity"));
    v3 = FigStarkModeEntityEncodingFromCFString | (8 * fsm_getFigStarkModeEntityEncodingFromCFString());
    CFDictionaryGetValue(v1, CFSTR("SpeechEntity"));
    v4 = v3 | (fsm_getFigStarkModeEntityEncodingFromCFString() << 6);
    Value = (const __CFArray *)CFDictionaryGetValue(v1, CFSTR("SpeechMode"));
    if (Value && (v6 = Value, Count = CFArrayGetCount(Value), Count >= 1))
    {
      v8 = Count;
      v9 = 0;
      v10 = 0;
      do
      {
        CFArrayGetValueAtIndex(v6, v9);
        if (FigCFEqual())
        {
          v10 |= 1u;
        }
        else if (FigCFEqual())
        {
          v10 |= 2u;
        }
        else if (FigCFEqual())
        {
          v10 |= 4u;
        }
        ++v9;
      }
      while (v8 != v9);
    }
    else
    {
      v10 = 7;
    }
    CFDictionaryGetValue(v1, CFSTR("PhoneCallEntity"));
    v11 = v4 | (v10 << 9) | (fsm_getFigStarkModeEntityEncodingFromCFString() << 12);
    CFDictionaryGetValue(v1, CFSTR("TurnByTurnEntity"));
    return (const __CFDictionary *)(v11 | (fsm_getFigStarkModeEntityEncodingFromCFString() << 15));
  }
  return result;
}

uint64_t fsm_getFigStarkModeEntityEncodingFromCFString()
{
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 2;
  if (FigCFEqual())
    return 4;
  return 7;
}

uint64_t fsm_getFigStarkModeTransferTypeEncodingFromCFString(uint64_t result)
{
  if (result)
  {
    if (FigCFEqual())
    {
      return 1;
    }
    else if (FigCFEqual())
    {
      return 2;
    }
    else if (FigCFEqual())
    {
      return 4;
    }
    else if (FigCFEqual())
    {
      return 8;
    }
    else
    {
      return 16 * (FigCFEqual() != 0);
    }
  }
  return result;
}

uint64_t fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 7;
  v3 = Count;
  v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 4;
    }
    else
    {
      v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeConstraintEncodingFromCFArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 15;
  v3 = Count;
  v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 4;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 8;
    }
    else
    {
      v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeTriStateEncodingFromCFArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 7;
  v3 = Count;
  v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      v5 = v5 | 4;
    }
    else
    {
      v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeResourceChangeRequestEncoding(int *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v2 = a1[4];
  v1 = a1[5];
  v3 = *a1;
  v4 = a1[1];
  switch(*a1)
  {
    case 20:
      v3 = 0;
      v5 = 2;
      goto LABEL_9;
    case 21:
      v3 = 0;
      v1 = 0;
      v2 = 0;
      v5 = 4;
      goto LABEL_9;
    case 22:
      v1 = 0;
      v5 = 8;
      v3 = a1[4];
      v2 = 0;
      goto LABEL_9;
    case 23:
      v3 = 0;
      v1 = 0;
      v2 = 0;
      v5 = 16;
      goto LABEL_9;
    default:
      if (!v3)
      {
        v5 = 1;
        v1 = 0;
        v2 = 0;
LABEL_12:
        v6 = 32;
        goto LABEL_16;
      }
      v5 = 0;
      v3 = a1[4];
LABEL_9:
      switch(v4)
      {
        case 500:
          v6 = 128;
          break;
        case 100:
          v6 = 64;
          break;
        case 0:
          goto LABEL_12;
        default:
          v6 = 0;
          break;
      }
LABEL_16:
      v7 = 0;
      if (v2 == 1000)
        v8 = 2048;
      else
        v8 = 0;
      if (v2 == 500)
        v9 = 1024;
      else
        v9 = v8;
      if (v2 == 100)
        v10 = 512;
      else
        v10 = 0;
      if (v2)
        v11 = v10;
      else
        v11 = 256;
      if (v2 <= 499)
        v12 = v11;
      else
        v12 = v9;
      if (v1 == 1000)
        v13 = 0x8000;
      else
        v13 = 0;
      if (v1 == 500)
        v14 = 0x4000;
      else
        v14 = v13;
      if (v1 == 100)
        v15 = 0x2000;
      else
        v15 = 0;
      if (v1)
        v16 = v15;
      else
        v16 = 4096;
      if (v1 <= 499)
        v17 = v16;
      else
        v17 = v14;
      if (v3 > 499)
      {
        if (v3 == 500)
        {
          v7 = 0x40000;
        }
        else if (v3 == 1000)
        {
          v7 = 0x80000;
        }
      }
      else if (v3)
      {
        if (v3 == 100)
          v7 = 0x20000;
      }
      else
      {
        v7 = 0x10000;
      }
      return v6 | v5 | v12 | v17 | v7;
  }
}

CFStringRef systemController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSystemController %p]"), a1);
}

void systemController_Finalize()
{
  id *DerivedStorage;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  CMSessionGetNotificationCenter(DerivedStorage);
  FigNotificationCenterRemoveWeakListeners();

}

__CFString *systemController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSystemController %p MXSystemController %p figOwnedAudioSessionID %d"), a1, *(_QWORD *)DerivedStorage, *(unsigned int *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t systemController_CopyDeviceRouteForAudioCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CMSessionMgrCopyDeviceRouteForRouteConfiguration(a2, (uint64_t)CFSTR("Default"), a3, a4, 0);
}

uint64_t systemController_HasRouteSharingPolicyLongFormVideo(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return CMSessionMgrHasRouteSharingPolicyLongFormVideo(a2, a3);
}

uint64_t systemController_ShouldHijackAudioRoute(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMSessionMgrShouldHijackAudioRoute(a2, a3, a4, a5);
}

uint64_t systemController_ToggleInputMute()
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "toggleInputMute");
}

uint64_t systemController_SetInputMute(uint64_t a1, _OWORD *a2, int a3)
{
  void *v5;
  __int128 v6;
  _OWORD v8[2];

  v5 = *(void **)CMBaseObjectGetDerivedStorage();
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return objc_msgSend(v5, "setInputMute:muteValue:", v8, a3 != 0);
}

uint64_t systemController_GetInputMute(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  void *v5;
  __int128 v6;
  _OWORD v8[2];

  v5 = *(void **)CMBaseObjectGetDerivedStorage();
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return objc_msgSend(v5, "getInputMute:outMuteValue:", v8, a3);
}

uint64_t systemController_ClearUplinkMutedCache()
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "clearUplinkMutedCache");
}

uint64_t systemController_AllowAppToInitiateRecordingTemporarily(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "setAttributeForKey:andValue:", CFSTR("AllowAppToInitiateRecordingTemporarily"), a2);
}

uint64_t systemController_GrantMediaEndowment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "grantMediaEndowmentWithEnvironmentID:endowmentPayload:", a2, a3);
}

uint64_t systemController_RevokeMediaEndowment(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "revokeMediaEndowmentWithEnvironmentID:", a2);
}

uint64_t systemController_SetSilentMode(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "setSilentMode:untilTime:reason:clientType:", a2 != 0, a3, a4, a5);
}

uint64_t systemController_RemoteDeviceControlIsAllowed(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "remoteDeviceControlIsAllowed:", a2);
}

void __fsc_createPropertyMappingDicts_block_invoke(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  CFMutableDictionaryRef Mutable;
  BOOL v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gFigSystemControllerSetPropertyMapping = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v2, 0, v3, v4);
  gFigSystemControllerCopyPropertyMapping = (uint64_t)Mutable;
  if (gFigSystemControllerSetPropertyMapping)
    v6 = Mutable == 0;
  else
    v6 = 1;
  if (v6)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -17650;
  }
  else
  {
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("PIDToInheritApplicationStateFrom"), CFSTR("PIDToInheritApplicationStateFrom"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("CanBeNowPlayingApp"), CFSTR("CanBeNowPlayingApp"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AppWantsVolumeChanges"), CFSTR("AppWantsVolumeChanges"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("SubscribeToNotifications"), CFSTR("SubscribeToNotifications"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("PickedRoute"), CFSTR("PickedRoute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("RouteAwayFromAirPlay"), CFSTR("RouteAwayFromAirPlay"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("PickedRouteWithPassword"), CFSTR("PickedRouteWithPassword"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AvailableForVoicePrompts"), CFSTR("AvailableForVoicePrompts"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AirPlayScreenSuspended"), CFSTR("AirPlayScreenSuspended"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AllowAppToInitiatePlaybackTemporarily"), CFSTR("AllowAppToInitiatePlaybackTemporarily"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("HeadphoneVolumeLimit"), CFSTR("HeadphoneVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("VibeIntensity"), CFSTR("VibeIntensity"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("FullMute"), CFSTR("FullMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("UplinkMute"), CFSTR("UplinkMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("DownlinkMute"), CFSTR("DownlinkMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("ThermalControlInfo"), CFSTR("ThermalControlInfo"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AppToInterruptCurrentNowPlayingSession"), CFSTR("AppToInterruptCurrentNowPlayingSession"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("AllowAppToFadeInTemporarily"), CFSTR("AllowAppToFadeInTemporarily"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("OverrideToPartnerRoute"), CFSTR("OverrideToPartnerRoute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("InterruptAudioSessionIDForHandoff"), CFSTR("InterruptAudioSessionIDForHandoff"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("PostInterruptionEndedNotification"), CFSTR("PostInterruptionEndedNotification"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("WombatEnabled"), CFSTR("WombatEnabled"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("CallScreeningStatus"), CFSTR("CallScreeningStatus"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("MaximumSpeakerVolumeLimit"), CFSTR("MaximumSpeakerVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("DuckScalarForVoiceOver"), CFSTR("DuckScalarForVoiceOver"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("RemoteDeviceIDs"), CFSTR("RemoteDeviceIDs"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, CFSTR("PopNowPlayingAppStack"), CFSTR("PopNowPlayingAppStack"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ActiveAudioRoute"), CFSTR("ActiveAudioRoute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CanBeNowPlayingApp"), CFSTR("CanBeNowPlayingApp"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("AppWantsVolumeChanges"), CFSTR("AppWantsVolumeChanges"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("PIDToInheritApplicationStateFrom"), CFSTR("PIDToInheritApplicationStateFrom"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("PickableRoutes"), CFSTR("PickableRoutes"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("PickedRoute"), CFSTR("PickedRoute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CurrentExternalScreen"), CFSTR("ExternalScreenType"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("HeadphoneVolumeLimit"), CFSTR("HeadphoneVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("VibeIntensity"), CFSTR("VibeIntensity"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CurrentlyActiveCategory"), CFSTR("CurrentlyActiveCategory"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CurrentlyActiveMode"), CFSTR("CurrentlyActiveMode"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ActiveInputRouteForPlayAndRecordNoBluetooth"), CFSTR("ActiveInputRouteForPlayAndRecordNoBluetooth"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CurrentRouteHasVolumeControl"), CFSTR("CurrentRouteHasVolumeControl"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("AudioIsPlayingSomewhere"), CFSTR("SomeClientIsPlaying"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SomeClientIsPlayingLongFormAudio"), CFSTR("SomeClientIsPlayingLongFormAudio"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ActiveClientPIDsThatHideTheSpeechDetectionDevice"), CFSTR("ActiveClientPIDsThatHideTheSpeechDetectionDevice"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("HeadphoneJackIsConnected"), CFSTR("HeadphoneJackIsConnected"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("HeadphoneJackHasInput"), CFSTR("HeadphoneJackHasInput"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SystemHasAudioInputDevice"), CFSTR("SystemHasAudioInputDevice"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SystemHasAudioInputDeviceExcludingBluetooth"), CFSTR("SystemHasAudioInputDeviceExcludingBluetooth"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("FullMute"), CFSTR("FullMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("IsSomeoneRecording"), CFSTR("IsSomeoneRecording"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("RecordingClientPIDs"), CFSTR("RecordingClientPIDs"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("UplinkMute"), CFSTR("UplinkMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("DownlinkMute"), CFSTR("DownlinkMute"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ThermalControlInfo"), CFSTR("ThermalControlInfo"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("VoicePromptStyle"), CFSTR("VoicePromptStyle"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("NowPlayingAppShouldPlayOnCarPlayConnect"), CFSTR("NowPlayingAppShouldResumeForCarPlay"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CarPlayIsConnected"), CFSTR("CarPlayIsConnected"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CarPlayAuxStreamSupport"), CFSTR("CarPlayAuxStreamSupport"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CarPlaySupportsMixableSiri"), CFSTR("CarPlaySupportsMixableSiri"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CarPlayIsPlayingLongerDurationSession"), CFSTR("CarPlayIsPlayingLongerDurationSession"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("NowPlayingAppPID"), CFSTR("NowPlayingAppPID"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("NowPlayingAppDisplayID"), CFSTR("NowPlayingAppDisplayID"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CallIsActive"), CFSTR("PhoneCallExists"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ActiveCallInfo"), CFSTR("ActivePhoneCallInfo"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ShouldIgnorePlayCommandsFromAccessory"), CFSTR("ShouldIgnorePlayCommandsFromAccessory"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("NowPlayingAppIsPlaying"), CFSTR("NowPlayingAppIsPlaying"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("NowPlayingAppIsInterrupted"), CFSTR("NowPlayingAppIsInterrupted"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CurrentVideoStreams"), CFSTR("CurrentVideoStreams"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("LongFormVideoApps"), CFSTR("LongFormVideoApps"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SpeechDetectionDevicePresent"), CFSTR("SpeechDetectionDevicePresent"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("AvailableVirtualAudioDevices"), CFSTR("AvailableVirtualAudioDevices"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts"), CFSTR("SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("PlayingSessionsDescription"), CFSTR("PlayingSessionsDescription"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("RecordingSessionsDescription"), CFSTR("RecordingSessionsDescription"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("WombatEnabled"), CFSTR("WombatEnabled"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("ActiveNeroVisualStreamInfo"), CFSTR("ActiveNeroVisualStreamInfo"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("HighestArbitrationPriorityForTipi"), CFSTR("HighestArbitrationPriorityForTipi"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("SilentModeEnabled"), CFSTR("SilentModeEnabled"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("CallScreeningStatus"), CFSTR("CallScreeningStatus"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("MaximumSpeakerVolumeLimit"), CFSTR("MaximumSpeakerVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("MinimumAllowedMaximumSpeakerVolumeLimit"), CFSTR("MinimumAllowedMaximumSpeakerVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("RecommendedMaximumSpeakerVolumeLimit"), CFSTR("RecommendedMaximumSpeakerVolumeLimit"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("DuckScalarForVoiceOver"), CFSTR("DuckScalarForVoiceOver"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("RemoteDeviceIDs"), CFSTR("RemoteDeviceIDs"));
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, CFSTR("TopOfNowPlayingAppStackDisplayID"), CFSTR("TopOfNowPlayingAppStackDisplayID"));
  }
}

void figConnection_ServerConnectionDied_Callback(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  BOOL v7;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v3 = (void *)MEMORY[0x194035B20]();
  v4 = (void *)*MEMORY[0x1E0C9AE40];
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", 0);
  v6 = objc_alloc_init(MEMORY[0x1E0C99D20]);
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || v6 == 0)
  {
    v11 = 0;
  }
  else
  {
    v9 = v6;
    v10 = objc_alloc(MEMORY[0x1E0C99D80]);
    v11 = (void *)objc_msgSend(v10, "initWithObjectsAndKeys:", v4, AVSystemController_RecordingStateNotificationParameter, v5, AVSystemController_RecordingClientPIDNotificationParameter, v9, AVSystemController_RecordingClientPIDsNotificationParameter, 0);

  }
  +[AVSystemController postNotificationOnMainQueue:notification:object:](AVSystemController, "postNotificationOnMainQueue:notification:object:", v11, AVSystemController_RecordingStateDidChangeNotification, a2);

  if (v5)
  {
    v12 = objc_alloc(MEMORY[0x1E0C99D80]);
    v13 = (void *)objc_msgSend(v12, "initWithObjectsAndKeys:", v5, AVSystemController_NowPlayingAppPIDNotificationParameter, 0);
  }
  else
  {
    v13 = 0;
  }
  +[AVSystemController postNotificationOnMainQueue:notification:object:](AVSystemController, "postNotificationOnMainQueue:notification:object:", v13, AVSystemController_NowPlayingAppPIDDidChangeNotification, a2);

  +[AVSystemController postNotificationOnMainQueue:notification:object:](AVSystemController, "postNotificationOnMainQueue:notification:object:", 0, AVSystemController_NowPlayingAppDidChangeNotification, a2);
  if (v4)
  {
    v14 = objc_alloc(MEMORY[0x1E0C99D80]);
    v4 = (void *)objc_msgSend(v14, "initWithObjectsAndKeys:", v4, AVSystemController_NowPlayingAppIsPlayingNotificationParameter, 0);
  }
  +[AVSystemController postNotificationOnMainQueue:notification:object:](AVSystemController, "postNotificationOnMainQueue:notification:object:", v4, AVSystemController_NowPlayingAppIsPlayingDidChangeNotification, a2);

  objc_msgSend(a2, "handleServerDied");
  objc_autoreleasePoolPop(v3);
}

void sub_1937065C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getGEOCountryConfigurationCountryCodeDidChangeNotification()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr;
  v7 = getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr;
  if (!getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr)
  {
    v1 = (void *)GeoServicesLibrary();
    v0 = dlsym(v1, "GEOCountryConfigurationCountryCodeDidChangeNotification");
    v5[3] = (uint64_t)v0;
    getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    v3 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

void sub_1937067B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_GEOCountryConfigurationObserver_GetCurrentCountryCode()
{
  uint64_t result;

  if (mx_geoCountryConfigurationObserver_Initialize_onceToken != -1)
    dispatch_once(&mx_geoCountryConfigurationObserver_Initialize_onceToken, &__block_literal_global_37);
  result = gGeoCountryConfigurationObserver;
  if (gGeoCountryConfigurationObserver)
    return objc_msgSend((id)gGeoCountryConfigurationObserver, "getCurrentCountryCode");
  return result;
}

Class __getGEOCountryConfigurationClass_block_invoke(uint64_t a1)
{
  Class result;

  GeoServicesLibrary();
  result = objc_getClass("GEOCountryConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getGEOCountryConfigurationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getGEOCountryConfigurationClass_block_invoke_cold_1();
    return (Class)GeoServicesLibrary();
  }
  return result;
}

uint64_t GeoServicesLibrary()
{
  uint64_t v0;
  void *v2;

  if (!GeoServicesLibraryCore_frameworkLibrary)
    GeoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = GeoServicesLibraryCore_frameworkLibrary;
  if (!GeoServicesLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t FigRoutingManagerCreateAndActivateAggregateEndpointForLocalPlayback()
{
  void *SharedManager;
  uint64_t v1;
  CFTypeRef cf;
  CFTypeRef v4;

  v4 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v4);
  cf = 0;
  SharedManager = FigRoutingManagerGetSharedManager();
  FigRoutingManagerInternal_CreateAirPlayAggregate((uint64_t)SharedManager, v4, 0, (uint64_t)&cf);
  if (cf)
  {
    v1 = FigRoutingManager_iOSActivateEndpoint(cf, v4, 0, 0);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  else
  {
    v1 = 0;
  }
  if (v4)
    CFRelease(v4);
  return v1;
}

uint64_t FigRoutingManager_RouteAwayFromAirPlayEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  CFTypeRef v11;
  uint64_t ArrayOfPortsRoutable;
  AudioObjectID valuePtr;

  v5 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)CFSTR("Audio/Video"), (uint64_t)CFSTR("Default"), 0);
  v6 = v5;
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, i);
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        v11 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
        if (FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID()
          && vaeDoesPortSupportRoutability(valuePtr)
          && vaeIsPortRoutable(valuePtr))
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
        if (v11)
          CFRelease(v11);
      }
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  }
  ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(Mutable, 0, a3, a2, 0);
  if (Mutable)
    CFRelease(Mutable);
  if (v6)
    CFRelease(v6);
  return ArrayOfPortsRoutable;
}

__CFString *FigRoutingManagerGetMirroringModeFromEndpoint(uint64_t a1)
{
  __CFString *v1;
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t *v7;
  CFTypeRef cf;
  uint64_t v10;

  v1 = CFSTR("MirroringMode_None");
  if (a1)
  {
    v10 = 0;
    v2 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v4)
      v4(CMBaseObject, CFSTR("IsPerAppDisplay"), v2, &v10);
    cf = 0;
    v5 = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(v5, *MEMORY[0x1E0CA4388], v2, &cf);
    if (FigCFEqual())
    {
      v7 = &kCMSessionMirroringMode_Default;
      if (v10 == *MEMORY[0x1E0C9AE50])
        v7 = &kCMSessionMirroringMode_SecondScreen;
      v1 = (__CFString *)*v7;
    }
    if (cf)
      CFRelease(cf);
  }
  return v1;
}

void FigRemoteRoutingContextFactorySetForQueue(const void *a1, NSObject *a2)
{
  void *v3;

  if (a1)
    v3 = (void *)CFRetain(a1);
  else
    v3 = 0;
  dispatch_queue_set_specific(a2, CFSTR("kFigRoutingSessionResilientRemoteCurrentRemoteRoutingContextFactoryKey"), v3, (dispatch_function_t)FigRemoteRoutingContextFactoryReleaseObject);
}

void FigRemoteRoutingContextFactoryReleaseObject(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

const void *FigRoutingManagerCopyEndpointToAutoConnect()
{
  const void *v0;
  const __CFArray *v1;
  const __CFArray *v2;
  const void *ValueAtIndex;
  const void *v4;

  v0 = (const void *)FigEndpointManagerCopyMatchingEndpoints();
  v1 = (const __CFArray *)FigEndpointManagerCopyMatchingEndpoints();
  v2 = v1;
  if (v1 && CFArrayGetCount(v1) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
    v4 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  else
  {
    v4 = 0;
  }
  if (v0)
    CFRelease(v0);
  if (v2)
    CFRelease(v2);
  return v4;
}

void FigRoutingManagerProcessEndpointToAutoconnect(const void *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  const __CFString *v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  const void *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  const void *v17;
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFIndex v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  const void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFArrayRef v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v32;
  CFTypeRef v33;
  CFArrayRef v34;
  CFArrayRef theArray;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (FigCFEqual())
  {
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(0, 1))
    {
      theArray = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(1, (uint64_t)&theArray);
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v3 = Count;
          v4 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
            if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
              break;
            if (v3 == ++v4)
              goto LABEL_8;
          }
          if (!dword_1EE2B3E28)
            goto LABEL_18;
          goto LABEL_50;
        }
      }
LABEL_8:
      v6 = CFSTR("to autoconnect for CarPlay, going to autoconnect to it, reset the flag doNotMakeStarkAudioPortRoutable to false");
      goto LABEL_17;
    }
  }
  else if (FigCFEqual())
  {
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(0, 1))
    {
      theArray = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(1, (uint64_t)&theArray);
      if (theArray)
      {
        v7 = CFArrayGetCount(theArray);
        if (v7 >= 1)
        {
          v8 = v7;
          v9 = 0;
          while (1)
          {
            v10 = CFArrayGetValueAtIndex(theArray, v9);
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v10))
              break;
            if (v8 == ++v9)
              goto LABEL_16;
          }
          if (!dword_1EE2B3E28)
            goto LABEL_18;
LABEL_50:
          LODWORD(v34) = 0;
          LOBYTE(v33) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_18;
        }
      }
LABEL_16:
      v6 = CFSTR("to autoconnect for Nero, going to autoconnect to it");
LABEL_17:
      FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Found an endpoint with name="), (uint64_t)a1, (uint64_t)v6, 1);
      routingManager_autoconnectEndpoint(a1);
      goto LABEL_18;
    }
  }
  else if (FigCFEqual())
  {
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(2, (uint64_t)&theArray);
    if (theArray)
    {
      v11 = CFArrayGetCount(theArray);
      if (v11 >= 1)
      {
        v12 = v11;
        v13 = 0;
        v14 = *MEMORY[0x1E0CA4130];
        v15 = *MEMORY[0x1E0C9AE00];
        v16 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
        do
        {
          v17 = CFArrayGetValueAtIndex(theArray, v13);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v17))
          {
            cf[0] = 0;
            CMBaseObject = FigEndpointGetCMBaseObject();
            v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
            if (v19)
              v19(CMBaseObject, v14, v15, cf);
            if (cf[0] == v16)
            {
              if (v16)
              {
                v30 = v16;
                goto LABEL_46;
              }
              goto LABEL_18;
            }
            if (cf[0])
              CFRelease(cf[0]);
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    v34 = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(2, (uint64_t)&v34);
    if (v34 && (v20 = CFArrayGetCount(v34), v20 >= 1))
    {
      v21 = v20;
      v22 = 0;
      v23 = *MEMORY[0x1E0CA4130];
      v24 = *MEMORY[0x1E0C9AE00];
      v25 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      while (1)
      {
        v26 = CFArrayGetValueAtIndex(v34, v22);
        v33 = 0;
        v27 = FigEndpointGetCMBaseObject();
        v28 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v28)
          v28(v27, v23, v24, &v33);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v26) && v33 == v25)
          break;
        if (v33)
          CFRelease(v33);
        if (v21 == ++v22)
          goto LABEL_44;
      }
      if (dword_1EE2B3E28)
      {
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v25 = v33;
      }
      if (v25)
        CFRelease(v25);
    }
    else
    {
LABEL_44:
      FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Found an endpoint with name="), (uint64_t)a1, (uint64_t)CFSTR("to autoconnect for AirPlay, going to autoconnect to it"), 1);
      routingManager_autoconnectEndpoint(a1);
    }
    v30 = v34;
    if (v34)
LABEL_46:
      CFRelease(v30);
LABEL_18:
    if (theArray)
      CFRelease(theArray);
  }
}

void routingManager_autoconnectEndpoint(const void *a1)
{
  CFTypeRef cf;

  cf = 0;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    goto LABEL_2;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    goto LABEL_4;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if ((FigEndpointGetSupportedFeatures() & 1) == 0)
    {
LABEL_2:
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
      goto LABEL_5;
    }
LABEL_4:
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
LABEL_5:
  FigRoutingManagerPickEndpointForContext(cf, a1, 0, 0);
  if (cf)
    CFRelease(cf);
}

void FigRoutingManagerProcessVADRouteChange(int a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, char a10, uint64_t a11)
{
  int v14;
  const void *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v18;
  int IsBluetoothSharingSessionEnabled;
  BOOL v21;
  int ContextType;
  NSObject *v23;
  __CFArray *v24;
  __CFArray *v25;
  int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  CFIndex Count;
  CFIndex v32;
  CFIndex v33;
  const __CFString *ValueAtIndex;
  __CFArray *v35;
  const __CFArray *v36;
  CFIndex v37;
  CFIndex v38;
  CFIndex i;
  uint64_t PortAtIndex;
  __CFArray *v41;
  const __CFArray *v42;
  const void *v43;
  CFTypeRef v44;
  _BOOL4 v45;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  __CFArray *v49;
  CFTypeRef v50;
  const void *v51;
  const void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t CMBaseObject;
  void (*v56)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, _BYTE *);
  const void *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, _QWORD);
  int v63;
  __CFArray *v64;
  _BOOL4 v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  void *SharedManager;
  CFTypeRef v76;
  NSObject *v77;
  CFTypeRef v79;
  CFTypeRef v80;
  os_log_type_t v81[8];
  CFTypeRef v82;
  os_log_type_t v83;
  unsigned int v84;
  os_log_type_t type[8];
  CFTypeRef v86;
  _BYTE v87[12];
  __int16 v88;
  CFTypeRef v89;
  __int16 v90;
  __CFArray *v91;
  __int16 v92;
  __CFArray *v93;
  __int16 v94;
  CFTypeRef v95;
  __int16 v96;
  const __CFArray *v97;
  CFTypeRef cf[18];

  v14 = a1;
  v15 = (const void *)a11;
  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (dword_1EE2B3E28)
  {
    LODWORD(v86) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v14 = a1;
  }
  v18 = FigCFArrayContainsValue();
  FigRoutingManagerUtilities_UpdateIsRoutedToHandoff(v18);
  if (a8)
  {
    IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
    v21 = v14 != 1919842148 && IsBluetoothSharingSessionEnabled != 0;
    if (!a3 || v21)
    {
LABEL_16:
      if (!a5)
        goto LABEL_51;
      goto LABEL_17;
    }
  }
  else if (v14 != 1919842148 || !a3)
  {
    goto LABEL_16;
  }
  if (FigCFEqual())
    goto LABEL_16;
  v30 = v14;
  cf[0] = 0;
  Count = CFArrayGetCount(a3);
  if (Count >= 1)
  {
    v32 = Count;
    v33 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v33);
      CMSMUtility_CreateTokensFromDeviceUID(ValueAtIndex, 0, (CFStringRef *)cf);
      if (FigCFEqual() || FigCFEqual())
        break;
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      if (v32 == ++v33)
        goto LABEL_50;
    }
    v35 = CMSMUtility_CopyCurrentOutputPorts();
    v36 = v35;
    if (v35)
    {
      v37 = CFArrayGetCount(v35);
      if (v37 >= 1)
      {
        v38 = v37;
        for (i = 0; i != v38; ++i)
        {
          PortAtIndex = CMSMVAUtility_GetPortAtIndex(v36, i);
          if (vaeDoesPortSupportMultipleConnections(PortAtIndex)
            && !MXBluetoothServices_IsPortBTManaged(PortAtIndex, 1))
          {
            CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(PortAtIndex, 1, 1);
          }
        }
      }
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v36)
      CFRelease(v36);
  }
LABEL_50:
  v14 = v30;
  if (!a5)
  {
LABEL_51:
    if (!a8)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_17:
  if (CFArrayGetCount(a5) < 1)
    goto LABEL_51;
  CFArrayGetValueAtIndex(a5, 0);
  if (!a8)
  {
LABEL_19:
    ContextType = FigRoutingManagerContextUtilities_GetContextType(a11);
    if (ContextType == 3 && FigCFEqual() && FigCFEqual())
    {
      if (dword_1EE2B3E28)
      {
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return;
    }
    v82 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)&v82);
    v24 = 0;
    v25 = 0;
    if (-[MXSessionManager doesActiveSessionHaveInput](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "doesActiveSessionHaveInput"))
    {
      v25 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a4, (uint64_t)v82);
      v24 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v25, 0);
      v86 = 0;
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v82, &v86);
      if (dword_1EE2B3E28)
      {
        v26 = v14;
        *(_DWORD *)type = 0;
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v28 = *(_DWORD *)type;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if (v29)
        {
          *(_DWORD *)v87 = 136316419;
          *(_QWORD *)&v87[4] = "FigRoutingManagerProcessVADRouteChange";
          v88 = 2114;
          v89 = v82;
          v90 = 2114;
          v91 = v25;
          v92 = 2114;
          v93 = v24;
          v94 = 2113;
          v95 = v86;
          v96 = 2114;
          v97 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v14 = v26;
        v15 = (const void *)a11;
      }
      if (v86)
        CFRelease(v86);
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v82, v25, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, (uint64_t)v24);
    if (v25)
      CFRelease(v25);
    if (v82)
      CFRelease(v82);
    if (v24)
      CFRelease(v24);
    *(_QWORD *)v81 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v81);
    if (ContextType == 3)
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v86) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v47 = v86;
        if (os_log_type_enabled(v46, type[0]))
          v48 = v47;
        else
          v48 = v47 & 0xFFFFFFFE;
        if (v48)
        {
          *(_DWORD *)v87 = 136315138;
          *(_QWORD *)&v87[4] = "FigRoutingManagerProcessVADRouteChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v15 = *(const void **)v81;
    }
    v49 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a3, (uint64_t)v15);
    v80 = 0;
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v15, &v80);
    if (v14 == 1919904885 && FigCFEqual() && !CMSMUtility_IsCarPlayNowPlayingStateSaved())
      CMSMNP_SaveCarPlayNowPlayingState();
    v79 = 0;
    if (v15)
      v50 = CFRetain(v15);
    else
      v50 = 0;
    v79 = v50;
    if (FigCFEqual() && FigCFEqual())
      goto LABEL_162;
    if (a3 && CFArrayGetCount(a3) >= 1)
    {
      v51 = CFArrayGetValueAtIndex(a3, 0);
      if (!v49)
        goto LABEL_109;
    }
    else
    {
      v51 = 0;
      if (!v49)
        goto LABEL_109;
    }
    if (CFArrayGetCount(v49) >= 1)
    {
      v52 = CFArrayGetValueAtIndex(v49, 0);
      if (v52)
      {
        v53 = CFRetain(v52);
LABEL_110:
        if (MX_FeatureFlags_IsMuteEnabled()
          && FigRoutingManagerIsEndpointOfType((uint64_t)v53))
        {
          cf[0] = 0;
          v54 = *MEMORY[0x1E0C9AE00];
          CMBaseObject = FigEndpointGetCMBaseObject();
          v56 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
          if (v56)
            v56(CMBaseObject, CFSTR("VAE_FigOutputDeviceName"), v54, cf);
          if (FigCFEqual() || FigCFEqual() || FigCFEqual())
          {
            *(_QWORD *)v87 = 0;
            v57 = *MEMORY[0x1E0CA42C0];
            v58 = FigEndpointGetCMBaseObject();
            v59 = *(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
            if (v59)
            {
              v59(v58, v57, v54, v87);
              v60 = *(const void **)v87;
            }
            else
            {
              v60 = 0;
            }
            if (v60 == (const void *)*MEMORY[0x1E0C9AE50])
            {
              v61 = FigEndpointGetCMBaseObject();
              v62 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
              if (v62)
                v62(v61, v57, *MEMORY[0x1E0C9AE40]);
              v60 = *(const void **)v87;
            }
            if (v60)
              CFRelease(v60);
          }
          if (cf[0])
            CFRelease(cf[0]);
        }
        if (v14 == 1919970403
          && (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v80)
           || routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v53)))
        {
          routingManager_updateSmartRoutingBackoffTimer((uint64_t)v80, (uint64_t)v53, 0);
        }
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v80)
          && !(FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID() | a9))
        {
          cf[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v15, (uint64_t)v80, (uint64_t)cf);
          if (v79)
          {
            CFRelease(v79);
            v79 = 0;
          }
          FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint((uint64_t)v80, (uint64_t)cf[0], (uint64_t)&v79);
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("ProcessVADRouteChange: Going to deactivate endpoint with name="), (uint64_t)v80, (uint64_t)CFSTR("because new device route does not correspond to the currently picked endpoint"), 1);
          FigRoutingManager_iOSDeactivateEndpoint(v80, (uint64_t)cf[0]);
        }
        v63 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)v79);
        v64 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v49, 0);
        if (v63 != 1)
        {
          FigRoutingManagerContextUtilities_SetPickedEndpoints(v79, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
          FigRoutingManagerContextUtilities_SetPickedEndpoints(*(const void **)v81, v49, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, (uint64_t)v64);
LABEL_150:
          v65 = FigRoutingManagerUtilities_DidRouteChangeToBuiltIn((uint64_t)v53);
          FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(v65);
          if (FigCFEqual()
            || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v80)
            || (routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v53)
             || routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v80))
            && MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
          {
            CMSMUtility_UpdateBadgeType();
          }
          if (v65)
            CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
          if (v53)
            CFRelease(v53);
          if (v64)
            CFRelease(v64);
LABEL_162:
          if (v79)
          {
            CFRelease(v79);
            v79 = 0;
          }
          if (v80)
          {
            CFRelease(v80);
            v80 = 0;
          }
          if (v49)
            CFRelease(v49);
          if (*(_QWORD *)v81)
            CFRelease(*(CFTypeRef *)v81);
          return;
        }
        if (routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v53))
        {
          if (v53)
            CFRelease(v53);
          v53 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v51, 1, *MEMORY[0x1E0CA3A58], (uint64_t)v79);
          FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(v79, v53, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0);
        }
        else
        {
          FigRoutingManagerContextUtilities_SetPickedEndpoints(v79, v49, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, (uint64_t)v64);
        }
        v86 = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v86);
        *(_QWORD *)type = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)type);
        if (v14 == 1919842148 && !FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v86))
        {
          if (routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint())
          {
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v53)
              && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
            {
              if (dword_1EE2B3E28)
              {
                v84 = 0;
                v83 = OS_LOG_TYPE_DEFAULT;
                v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v67 = v84;
                if (os_log_type_enabled(v66, v83))
                  v68 = v67;
                else
                  v68 = v67 & 0xFFFFFFFE;
                if (v68)
                {
                  *(_DWORD *)v87 = 136315138;
                  *(_QWORD *)&v87[4] = "routingManager_handleBottomUpRouteChange";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1EE2B3E28)
              {
                v84 = 0;
                v83 = OS_LOG_TYPE_DEFAULT;
                v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v70 = v84;
                if (os_log_type_enabled(v69, v83))
                  v71 = v70;
                else
                  v71 = v70 & 0xFFFFFFFE;
                if (v71)
                {
                  *(_DWORD *)v87 = 136315138;
                  *(_QWORD *)&v87[4] = "routingManager_handleBottomUpRouteChange";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v86, CFSTR("configUpdateReasonEndedBottomUpRouteChange"));
            }
            goto LABEL_146;
          }
          if (a10)
          {
            if (!FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v53))
            {
              if (FigRoutingManagerIsEndpointOfType((uint64_t)v53)
                && !FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
              {
                if (dword_1EE2B3E28)
                {
                  v84 = 0;
                  v83 = OS_LOG_TYPE_DEFAULT;
                  v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v73 = v84;
                  if (os_log_type_enabled(v72, v83))
                    v74 = v73;
                  else
                    v74 = v73 & 0xFFFFFFFE;
                  if (v74)
                  {
                    *(_DWORD *)v87 = 136315138;
                    *(_QWORD *)&v87[4] = "routingManager_handleBottomUpRouteChange";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint();
              }
              goto LABEL_146;
            }
          }
          else if ((!FigRoutingManagerIsEndpointOfType((uint64_t)v53)
                  || FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
                 && !FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v53))
          {
            goto LABEL_146;
          }
          SharedManager = FigRoutingManagerGetSharedManager();
          if (v86)
          {
            CFRetain(v86);
            v76 = v86;
          }
          else
          {
            v76 = 0;
          }
          v77 = *((_QWORD *)SharedManager + 1);
          cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
          cf[1] = (CFTypeRef)3221225472;
          cf[2] = __routingManager_handleBottomUpRouteChange_block_invoke;
          cf[3] = &__block_descriptor_40_e5_v8__0l;
          cf[4] = v76;
          MXDispatchAsync((uint64_t)"routingManager_handleBottomUpRouteChange", (uint64_t)"FigRoutingManager_iOS.m", 494, 0, 0, v77, (uint64_t)cf);
        }
LABEL_146:
        if (*(_QWORD *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(_QWORD *)type = 0;
        }
        if (v86)
          CFRelease(v86);
        goto LABEL_150;
      }
    }
LABEL_109:
    v53 = 0;
    goto LABEL_110;
  }
LABEL_52:
  v41 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a3, a11);
  v42 = v41;
  if (v41 && CFArrayGetCount(v41) >= 1 && (v43 = CFArrayGetValueAtIndex(v42, 0)) != 0)
    v44 = CFRetain(v43);
  else
    v44 = 0;
  cf[0] = 0;
  FigRoutingManagerCopyPickedEndpointForRoutingContext(a11, cf);
  if (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)cf[0])
    || routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v44))
  {
    routingManager_updateSmartRoutingBackoffTimer((uint64_t)cf[0], (uint64_t)v44, a8);
  }
  v45 = FigRoutingManagerUtilities_DidRouteChangeToBuiltIn((uint64_t)v44);
  FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(v45);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v44)
    CFRelease(v44);
  if (v42)
    CFRelease(v42);
  if (v45)
    CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
  if (FigCFEqual()
    || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)cf[0])
    || routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)cf[0])
    && MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
  {
    CMSMUtility_UpdateBadgeType();
  }
}

uint64_t routingManager_doesEndpointRepresentBluetoothRoute(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  if (FigRoutingManagerIsEndpointOfType(a1))
    return 1;
  if (!FigRoutingManagerIsEndpointOfType(a1))
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v5)
    v5(CMBaseObject, CFSTR("VAE_FigOutputDeviceName"), *MEMORY[0x1E0C9AE00], &cf);
  v2 = FigCFEqual() || FigCFEqual() || FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v2;
}

void routingManager_updateSmartRoutingBackoffTimer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;
  CFTypeRef v21[25];

  v21[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v21[0] = cf;
    v19 = 0;
    v4 = *MEMORY[0x1E0CA4348];
    v5 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
      v7(CMBaseObject, v4, v5, &v19);
    v18 = 0;
    v8 = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(v8, v4, v5, &v18);
    v10 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
    if (v10)
    {
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v12)
        v12(v11, CFSTR("SupportsSmartRouting"), v5, v21);
    }
    v13 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
    if (v13)
    {
      v14 = FigEndpointGetCMBaseObject();
      v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v15)
        v15(v14, CFSTR("SupportsSmartRouting"), v5, &cf);
    }
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCFEqual() && (v17 = FigCFEqual(), a3) && v17)
    {
      FigPredictedRouting_StartTimer(480.0);
    }
    else if (FigCFEqual())
    {
      FigPredictedRouting_StopTimer();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v21[0])
    {
      CFRelease(v21[0]);
      v21[0] = 0;
    }
    if (v13)
      CFRelease(v13);
    if (v10)
      CFRelease(v10);
    if (v18)
    {
      CFRelease(v18);
      v18 = 0;
    }
    if (v19)
      CFRelease(v19);
  }
}

BOOL routingManager_doesVAEndpointRepresentAirPlayDevice(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v3;
  _BOOL8 v4;
  unsigned int PortFromCFNumber;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v2)
  {
    v2(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], &cf);
    v3 = (const __CFNumber *)cf;
  }
  else
  {
    v3 = 0;
  }
  PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v3);
  v4 = PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953;
  if (cf)
    CFRelease(cf);
  return v4;
}

void FigRoutingManagerNewWiredPortsAdded(void *a1)
{
  int CarPlayMainAudioPortForEndpoint;
  CFTypeRef v2;
  int v3;
  NSDictionary *v4;
  NSString *v5;
  CFTypeRef v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t CMBaseObject;
  void (*v17)(uint64_t, __CFString *, uint64_t, id *);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, uint64_t, id *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  NSDictionary *v41;
  NSString *v42;
  CFTypeRef v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  os_log_type_t type;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  id v56;
  CFTypeRef cf;
  CFTypeRef v58;
  CFTypeRef v59;
  _BYTE v60[12];
  __int16 v61;
  int v62;
  _BYTE v63[128];
  uint64_t v64[16];
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v59 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v59);
  v58 = 0;
  if (!v59)
    return;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)v59, &v58);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v58))
  {
    LODWORD(cf) = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)v59, (uint64_t)&cf);
    CarPlayMainAudioPortForEndpoint = FigRoutingManagerFindCarPlayMainAudioPortForEndpoint((uint64_t)v58);
    if ((_DWORD)cf == 4)
    {
      if (!CarPlayMainAudioPortForEndpoint)
        goto LABEL_28;
      FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
      v2 = v59;
      v3 = 6;
    }
    else
    {
      if ((_DWORD)cf != 8 || !CarPlayMainAudioPortForEndpoint)
      {
LABEL_28:
        FigRoutingManagerContextUtilities_GetPickingState((uint64_t)v59, (uint64_t)&cf);
        if ((_DWORD)cf == 9)
        {
          v64[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v59, (uint64_t)v58, (uint64_t)v64);
          *(_QWORD *)v60 = 0;
          FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)v59, (uint64_t)v58, (uint64_t)v60);
          FigRoutingManager_iOSHandleFigEndpointFeaturesActivation((void *)v58, v60[0], v64[0], v59, 0);
        }
        goto LABEL_76;
      }
      FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
      v2 = v59;
      v3 = 9;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v2, v3);
    goto LABEL_28;
  }
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled())
  {
    v56 = 0;
    cf = 0;
    v55 = 0;
    v4 = (NSDictionary *)CMSMUtility_CopyNonNullCurrentlyActiveCategory();
    v5 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
    v6 = CMSMUtility_CopyCurrentAllowedPortTypes();
    v7 = cmsmCopyQuiesceableWiredPortsForRouteConfiguration(v4, (uint64_t)v5, v6);
    v41 = v4;
    v42 = v5;
    v43 = v6;
    v8 = cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration();
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v52 != v12)
            objc_enumerationMutation(v7);
          v14 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
          if ((objc_msgSend(v8, "containsObject:", v14) & 1) == 0)
            objc_msgSend(v9, "addObject:", v14);
        }
        v11 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
      }
      while (v11);
    }
    if (objc_msgSend(v9, "count") && !vaemIsPersistentRouteActive())
      cmsmUnpickQuiesceableWiredPortsRoutes(v9, 0, (uint64_t)v59, 0);
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v59, &cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      v15 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v17 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v17)
        v17(CMBaseObject, CFSTR("VAE_InEarDetectEnabled"), v15, &v56);
      v18 = FigEndpointGetCMBaseObject();
      v19 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v19)
        v19(v18, CFSTR("VAE_IsInEar"), v15, &v55);
    }
    else if (dword_1EE2B3E28)
    {
      v50 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (objc_msgSend(v56, "BOOLValue", v37, v39) && (objc_msgSend(v55, "BOOLValue") & 1) != 0)
    {
      if (dword_1EE2B3E28)
      {
        v50 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_67:
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }

      if (v41)
        CFRelease(v41);
      if (v42)
        CFRelease(v42);
      if (v43)
        CFRelease(v43);

      goto LABEL_76;
    }
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v22 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v45, v63, 16);
    if (!v22)
      goto LABEL_67;
    v23 = v22;
    v24 = *(_QWORD *)v46;
LABEL_38:
    v25 = 0;
    while (1)
    {
      if (*(_QWORD *)v46 != v24)
        objc_enumerationMutation(a1);
      v26 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v25);
      v27 = objc_msgSend(v26, "unsignedIntValue", v38, v40);
      if (!vaeIsQuiesceableWiredPort(v27))
        goto LABEL_65;
      if (objc_msgSend(v8, "containsObject:", v26))
      {
        if (-[MXSessionManager getQuiesceableWiredPortAutoRouteOnConnectPreference:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getQuiesceableWiredPortAutoRouteOnConnectPreference:", v27))
        {
          if (dword_1EE2B3E28)
          {
            v50 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v29 = v50;
            if (os_log_type_enabled(v28, type))
              v30 = v29;
            else
              v30 = v29 & 0xFFFFFFFE;
            if (v30)
            {
              *(_DWORD *)v60 = 136315394;
              *(_QWORD *)&v60[4] = "FigRoutingManagerNewWiredPortsAdded";
              v61 = 1024;
              v62 = v27;
              LODWORD(v40) = 18;
              v38 = v60;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeMakePortRoutable(v27, 1, 0, (uint64_t)v59);
          goto LABEL_65;
        }
        if (dword_1EE2B3E28)
        {
          v50 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v35 = v50;
          if (os_log_type_enabled(v34, type))
            v36 = v35;
          else
            v36 = v35 & 0xFFFFFFFE;
          if (v36)
            goto LABEL_61;
          goto LABEL_62;
        }
      }
      else if (dword_1EE2B3E28)
      {
        v50 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v32 = v50;
        if (os_log_type_enabled(v31, type))
          v33 = v32;
        else
          v33 = v32 & 0xFFFFFFFE;
        if (v33)
        {
LABEL_61:
          *(_DWORD *)v60 = 136315394;
          *(_QWORD *)&v60[4] = "FigRoutingManagerNewWiredPortsAdded";
          v61 = 1024;
          v62 = v27;
          LODWORD(v40) = 18;
          v38 = v60;
          _os_log_send_and_compose_impl();
        }
LABEL_62:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_65:
      if (v23 == ++v25)
      {
        v23 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v45, v63, 16);
        if (!v23)
          goto LABEL_67;
        goto LABEL_38;
      }
    }
  }
LABEL_76:
  if (v58)
  {
    CFRelease(v58);
    v58 = 0;
  }
  if (v59)
    CFRelease(v59);
}

void FigRoutingManagerRouteToBluetoothDevice(const void *a1, uint64_t a2)
{
  const void *Value;
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  const __CFAllocator *v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  int IsContextSystemMusicAndIndependent;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueFigEndpoint *v14;
  OpaqueFigEndpoint *v15;
  CFMutableDictionaryRef EndpointActivateOptions;
  __CFArray *v17;
  __CFArray *v18;
  __CFArray *v19;
  NSObject *v20;
  __CFDictionary *Mutable;
  CFTypeRef v22;
  __CFArray *ArrayFromEndpoint;
  CFMutableDictionaryRef v24;
  CFTypeRef v25;
  const __CFAllocator *allocator;
  _BOOL4 IsSystemAudioRouteAirPlayLowLatency;
  const __CFDictionary *v28;
  CFTypeRef cf;
  CFDictionaryRef theDict[21];

  theDict[19] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
  theDict[0] = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)a1, theDict);
  if (theDict[0])
  {
    Value = CFDictionaryGetValue(theDict[0], CFSTR("CurrentlyActivatingEndpointsInfo_ClientRoutingContextUUID"));
    if (Value)
      v5 = CFRetain(Value);
    else
      v5 = 0;
    v7 = CFDictionaryGetValue(theDict[0], CFSTR("CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions"));
    if (v7)
      v28 = (const __CFDictionary *)CFRetain(v7);
    else
      v28 = 0;
    v8 = CFDictionaryGetValue(theDict[0], CFSTR("CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions"));
    if (v8)
      v6 = CFRetain(v8);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v28 = 0;
    v5 = 0;
  }
  cf = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v11)
    v11(CMBaseObject, *MEMORY[0x1E0CA4258], v9, &cf);
  allocator = v9;
  IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)v5);
  if (IsContextSystemMusicAndIndependent)
  {
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v5, CFSTR("configUpdateReasonEndedSuccess"));
  }
  v14 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)cf, 0, *MEMORY[0x1E0CA3A80], 0);
  v15 = v14;
  if (v14)
  {
    v25 = v6;
    EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)v14, (uint64_t)a1, v28);
    FigRoutingManagerGetFigEndpointFeatures((uint64_t)v15, (uint64_t)a1);
    v24 = EndpointActivateOptions;
    FigEndpointActivate();
    v17 = CMSMUtility_CopyCurrentRouteIdentifiers();
    v18 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v17, (uint64_t)a1);
    v19 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v18, 0);
    if (theDict[0])
    {
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v18, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v28, (uint64_t)v19);
      if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v18, a2))
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a1, a2, (uint64_t)CFSTR("routeChangeEndedSuccess"));
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v18, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v28, (uint64_t)v19);
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a1, 0);
    if (v19)
      CFRelease(v19);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
    v6 = v25;
    if (v24)
      CFRelease(v24);
  }
  if (IsContextSystemMusicAndIndependent)
  {
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("initiator"), CFSTR("SelectRouteInitiator_RouteToBluetoothDevice"));
    if (IsSystemAudioRouteAirPlayLowLatency)
    {
      v22 = FigRoutingManagerCopyLocalAirPlayEndpoint();
      ArrayFromEndpoint = FigRoutingManagerCreateArrayFromEndpoint(v22);
      routingManager_processPickEndpoints(ArrayFromEndpoint, v5, 0, Mutable, 0);
      if (ArrayFromEndpoint)
        CFRelease(ArrayFromEndpoint);
      if (v22)
        CFRelease(v22);
    }
    else if (!FigRoutingManagerContextUtilities_IsContextSystemAudio((uint64_t)v5))
    {
      routingManager_processPickEndpoints(0, v5, 0, Mutable, 0);
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  if (v15)
    CFRelease(v15);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v6)
    CFRelease(v6);
  if (v28)
    CFRelease(v28);
  if (v5)
    CFRelease(v5);
  if (theDict[0])
    CFRelease(theDict[0]);
}

uint64_t routingManager_processPickEndpoints(const __CFArray *a1, const void *a2, const __CFDictionary *a3, const void *a4, int a5)
{
  __CFDictionary *MutableCopy;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  char v14;
  const void *v15;
  uint64_t v16;
  __CFArray *v18;
  __CFArray *v19;
  CFTypeRef v20;
  int v21;
  uint64_t v22;
  __CFArray *v23;
  uint64_t v24;
  __CFArray *v25;
  CFTypeRef v26;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  CFIndex v33;
  uint64_t v34;
  const void *ValueAtIndex;
  void (*v36)(const void *, _QWORD);
  uint64_t v37;
  uint64_t CMBaseObject;
  void (*v39)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, os_log_type_t *);
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  CFIndex v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, os_log_type_t *);
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  __CFString **v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __CFArray *v63;
  const __CFArray *theArray;
  const __CFDictionary *v65;
  uint64_t v66;
  CFIndex v67;
  CFTypeRef v68;
  os_log_type_t v69;
  unsigned int v70;
  os_log_type_t type[8];
  CFTypeRef v72;
  int v73;
  const char *v74;
  __int16 v75;
  CFTypeRef v76;
  __int16 v77;
  CFTypeRef v78;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a5)
  {
    FigRoutingManagerCreateAggregateForContextIfNecessary(a2, (CFIndex)a1);
    v68 = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&v68);
    v18 = FigRoutingManagerUtilities_CopyEndpointsToAdd((uint64_t)a2, a1);
    v19 = FigRoutingManagerUtilities_CopyEndpointsToRemove((uint64_t)a2, a1);
    theArray = v19;
    v65 = a3;
    if (v18)
    {
      if (CFArrayGetCount(v18) >= 1)
        FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints((uint64_t)a2, (uint64_t)v68, v18, (uint64_t)a3, (uint64_t)a4);
      v20 = v68;
      if (!v68)
      {
        v16 = 4294954296;
        goto LABEL_118;
      }
      v16 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
      if (CFArrayGetCount(v18))
      {
        v58 = 0;
        v21 = 1;
        if (!a1)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
    else
    {
      v20 = v68;
      if (!v68)
      {
        v16 = 4294954296;
        goto LABEL_119;
      }
      v16 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
    }
    if (v19 && CFArrayGetCount(v19) >= 1)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonStarted"));
      v21 = 0;
      LODWORD(v58) = 1;
    }
    else
    {
      LODWORD(v58) = 0;
      v21 = 1;
    }
    if (!a1)
    {
      HIDWORD(v58) = 1;
LABEL_44:
      if (dword_1EE2B3E28)
      {
        LODWORD(v72) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v29 = v72;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v30 = v29;
        else
          v30 = v29 & 0xFFFFFFFE;
        if (v30)
        {
          v73 = 136315138;
          v74 = "routingManager_processPickAirPlayEndpoints";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v20, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
      CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)a2);
      FigRoutingManagerPostProcessPickEndpoint(0, (uint64_t)a2);
      LOBYTE(cf[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      v55 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
      if (!LOBYTE(cf[0]))
        v55 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)*v55, (uint64_t)a3, 0);
      goto LABEL_112;
    }
    HIDWORD(v58) = 1;
    if (!v18)
    {
      Count = 0;
      goto LABEL_52;
    }
LABEL_42:
    Count = CFArrayGetCount(v18);
LABEL_52:
    if (theArray)
      v67 = CFArrayGetCount(theArray);
    else
      v67 = 0;
    v57 = v21;
    v31 = (uint64_t *)MEMORY[0x1E0CA4258];
    v32 = (uint64_t *)MEMORY[0x1E0CA4348];
    v63 = v18;
    if (Count >= 1)
    {
      v33 = 0;
      v61 = *MEMORY[0x1E0CA4258];
      v34 = *MEMORY[0x1E0C9AE00];
      v59 = *MEMORY[0x1E0CA4348];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v18, v33);
        if (FigRoutingManagerIsEndpointActivated((uint64_t)ValueAtIndex))
        {
          v36 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v36)
            v36(ValueAtIndex, 0);
          FigEndpointDeactivate();
        }
        FigEndpointAggregateGetClassID();
        if (CMBaseObjectIsMemberOfClass())
          v37 = (uint64_t)v20;
        else
          v37 = 0;
        v16 = FigRoutingManagerAddEndpointToAggregate(v37, (uint64_t)ValueAtIndex, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateAddEndpointCompletionCallback);
        if (!(_DWORD)v16)
        {
          v72 = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v39 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v39)
            v39(CMBaseObject, v61, v34, &v72);
          *(_QWORD *)type = 0;
          v40 = FigEndpointGetCMBaseObject();
          v41 = *(void (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
          if (v41)
            v41(v40, v59, v34, type);
          if (dword_1EE2B3E28)
          {
            v70 = 0;
            v69 = OS_LOG_TYPE_DEFAULT;
            v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v43 = v70;
            if (os_log_type_enabled(v42, v69))
              v44 = v43;
            else
              v44 = v43 & 0xFFFFFFFE;
            if (v44)
            {
              v73 = 136315650;
              v74 = "routingManager_processPickAirPlayEndpoints";
              v75 = 2114;
              v76 = v72;
              v77 = 2114;
              v78 = *(CFTypeRef *)type;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(_QWORD *)type)
          {
            CFRelease(*(CFTypeRef *)type);
            *(_QWORD *)type = 0;
          }
          v18 = v63;
          if (v72)
            CFRelease(v72);
          a3 = v65;
        }
        ++v33;
      }
      while (Count != v33);
      v32 = (uint64_t *)MEMORY[0x1E0CA4348];
      v31 = (uint64_t *)MEMORY[0x1E0CA4258];
    }
    if (v67 < 1)
    {
      v19 = theArray;
    }
    else
    {
      v45 = 0;
      v62 = *v31;
      v66 = *MEMORY[0x1E0C9AE00];
      v60 = *v32;
      v19 = theArray;
      do
      {
        v46 = CFArrayGetValueAtIndex(v19, v45);
        FigEndpointAggregateGetClassID();
        if (CMBaseObjectIsMemberOfClass())
          v47 = (uint64_t)v20;
        else
          v47 = 0;
        v16 = FigRoutingManagerRemoveEndpointFromAggregate(v47, v46, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
        if (!(_DWORD)v16)
        {
          v72 = 0;
          v48 = FigEndpointGetCMBaseObject();
          v49 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v49)
            v49(v48, v62, v66, &v72);
          *(_QWORD *)type = 0;
          v50 = FigEndpointGetCMBaseObject();
          v51 = *(void (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
          if (v51)
            v51(v50, v60, v66, type);
          if (dword_1EE2B3E28)
          {
            v70 = 0;
            v69 = OS_LOG_TYPE_DEFAULT;
            v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v53 = v70;
            if (os_log_type_enabled(v52, v69))
              v54 = v53;
            else
              v54 = v53 & 0xFFFFFFFE;
            if (v54)
            {
              v73 = 136315650;
              v74 = "routingManager_processPickAirPlayEndpoints";
              v75 = 2114;
              v76 = v72;
              v77 = 2114;
              v78 = *(CFTypeRef *)type;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v19 = theArray;
          }
          if (*(_QWORD *)type)
          {
            CFRelease(*(CFTypeRef *)type);
            *(_QWORD *)type = 0;
          }
          if (v72)
            CFRelease(v72);
        }
        ++v45;
      }
      while (v67 != v45);
      v18 = v63;
    }
    v21 = v57;
LABEL_112:
    if (v21 && HIDWORD(v58))
    {
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, (CFDictionaryRef)a4);
    }
    else if ((v58 & HIDWORD(v58)) == 1)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonEndedSuccess"));
    }
    if (!v18)
    {
LABEL_119:
      if (v19)
        CFRelease(v19);
      v26 = v68;
      if (v68)
        goto LABEL_122;
      return v16;
    }
LABEL_118:
    CFRelease(v18);
    goto LABEL_119;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionarySetValue(MutableCopy, CFSTR("RouteChangeOptionKey_IsAddOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  if (a1)
  {
    v10 = CFArrayGetCount(a1);
    v11 = v10 - 1;
    if (v10 >= 1)
    {
      v12 = v10;
      v13 = 0;
      v14 = 1;
      do
      {
        while (1)
        {
          v15 = CFArrayGetValueAtIndex(a1, v13);
          if (!FigRoutingManagerIsEndpointOfType((uint64_t)v15))
            break;
          FigRoutingManager_iOSActivateEndpoint(v15, a2, a3, MutableCopy);
          v14 = 0;
          v16 = 0;
          if (v11 == v13++)
            goto LABEL_31;
        }
        ++v13;
      }
      while (v12 != v13);
      if ((v14 & 1) == 0)
        goto LABEL_30;
    }
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 6);
  v22 = CMSMVAUtility_AggregateEndpoints(a1, 1, (uint64_t)a2);
  if (!(_DWORD)v22)
  {
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0]))
      FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v24, 1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
    v25 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(a1, 0);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, (uint64_t)v25);
    if (v25)
      CFRelease(v25);
    if (cf[0])
      CFRelease(cf[0]);
LABEL_30:
    v16 = 0;
    goto LABEL_31;
  }
  v16 = v22;
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a2, (uint64_t)cf);
  v23 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf[0], 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, (const __CFArray *)cf[0], (uint64_t)CFSTR("configUpdateReasonEndedFailed"), (uint64_t)a3, (uint64_t)v23);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
  if (v23)
    CFRelease(v23);
  if (cf[0])
    CFRelease(cf[0]);
LABEL_31:
  if (MutableCopy)
  {
    v26 = MutableCopy;
LABEL_122:
    CFRelease(v26);
  }
  return v16;
}

void FigRoutingManagerEnableBluetoothSharingSession(const void *a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *SInt64;
  CFIndex v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, __CFString *, uint64_t, void **);
  __CFArray *v13;
  __CFArray *v14;
  void *value;
  CFTypeRef cf;

  if (!theArray)
  {
    v5 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return;
    goto LABEL_11;
  }
  Count = CFArrayGetCount(theArray);
  v5 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      LODWORD(cf) = 0;
      if (CMSMVAUtility_IsA2DPPortAvailableForEndpoint((_BOOL8)ValueAtIndex, &cf))
      {
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        CFArrayAppendValue(Mutable, SInt64);
        if (SInt64)
          CFRelease(SInt64);
      }
    }
  }
  if (Mutable)
  {
LABEL_11:
    v10 = CFArrayGetCount(Mutable);
    if (v10 > 0)
    {
      if (v10 == 1)
      {
        cf = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a1, 0, (uint64_t)&cf);
        if (FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)cf))
        {
          value = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v12 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (v12)
          {
            v12(CMBaseObject, CFSTR("VAE_PortID"), v5, &value);
            if (value)
            {
              CFArrayAppendValue(Mutable, value);
              if (value)
                CFRelease(value);
            }
          }
        }
        if (cf)
          CFRelease(cf);
      }
      CMSMVAUtility_AggregatePorts((uint64_t)Mutable, 1, (uint64_t)a1);
      v13 = routingManager_copyPickedEndpointsFromCurrentRoutesInfo((uint64_t)a1);
      v14 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v13, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v13, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), 0, (uint64_t)v14);
      if (v14)
        CFRelease(v14);
      if (v13)
        CFRelease(v13);
    }
    CFRelease(Mutable);
  }
}

__CFArray *routingManager_copyPickedEndpointsFromCurrentRoutesInfo(uint64_t a1)
{
  __CFArray *v2;
  unsigned int NumberOfCurrentOutputPorts;
  uint64_t v4;
  __CFArray *Mutable;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  unsigned int PortFromCFNumber;
  OpaqueFigEndpoint *v15;
  OpaqueFigEndpoint *v16;
  uint64_t v18;
  CFTypeRef cf;

  v2 = CMSMUtility_CopyCurrentRouteIdentifiers();
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!NumberOfCurrentOutputPorts)
  {
    Mutable = 0;
    if (!v2)
      return Mutable;
    goto LABEL_21;
  }
  v4 = NumberOfCurrentOutputPorts;
  v18 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = 0;
  v7 = *MEMORY[0x1E0CA3A80];
  v8 = *MEMORY[0x1E0CA3A58];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v6);
    v10 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v7, 0);
    cf = 0;
    if (v10)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v12)
        v12(CMBaseObject, CFSTR("VAE_PortType"), v18, &cf);
    }
    PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)cf);
    if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
    {
      v15 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 1, v8, a1);
      if (v15)
      {
        v16 = v15;
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v16);
      }
    }
    else if (v10)
    {
      CFArrayAppendValue(Mutable, v10);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v10)
      CFRelease(v10);
    ++v6;
  }
  while (v4 != v6);
  if (v2)
LABEL_21:
    CFRelease(v2);
  return Mutable;
}

void FigRoutingManagerNewWirelessPortsAdded(const void *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  CFIndex i;
  CFIndex v7;
  const void *v8;
  int v9;
  int v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const void *Value;
  __CFArray *v14;
  __CFArray *v15;
  CFDictionaryRef v16;
  __CFDictionary *Mutable;
  CFDictionaryRef theDict;
  uint64_t v19;
  uint64_t v20;
  int v21;
  CFArrayRef v22;
  CFTypeRef cf;
  CFArrayRef theArray;

  theArray = 0;
  FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs((uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)ValueAtIndex) != 2
          || !MXSystemMirroring_IsTestCodeEnabled())
        {
          break;
        }
        MXSystemMirroring_HandleNewWirelessPorts(a1, ValueAtIndex);
LABEL_33:
        if (++v4 == v3)
          goto LABEL_56;
      }
      cf = 0;
      FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)ValueAtIndex, &cf);
      v22 = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)ValueAtIndex, (uint64_t)&v22);
      v21 = 0;
      FigRoutingManagerContextUtilities_GetPickingState((uint64_t)ValueAtIndex, (uint64_t)&v21);
      if (FigRoutingManagerAreAllEndpointsBluetoothShareable(v22) && v22 && CFArrayGetCount(v22) >= 2)
      {
        for (i = 0; ; ++i)
        {
          v7 = (CFIndex)v22;
          if (v22)
            v7 = CFArrayGetCount(v22);
          if (i >= v7)
          {
            v9 = 1;
            goto LABEL_28;
          }
          v8 = CFArrayGetValueAtIndex(v22, i);
          if (!CMSMVAUtility_IsA2DPPortAvailableForEndpoint((_BOOL8)v8, 0))
            break;
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)ValueAtIndex, 6);
        }
        v9 = 1;
        v10 = 5;
        goto LABEL_27;
      }
      if (v21 == 8)
      {
        if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)cf, a1))
        {
          if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
            FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
          v9 = 0;
          v10 = 9;
LABEL_27:
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)ValueAtIndex, v10);
LABEL_28:
          FigRoutingManagerContextUtilities_GetPickingState((uint64_t)ValueAtIndex, (uint64_t)&v21);
          if ((v21 - 5) < 2)
          {
LABEL_29:
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (v22)
              CFRelease(v22);
            goto LABEL_33;
          }
          if (v21 == 9)
          {
            if (v9)
            {
              FigRoutingManagerEnableBluetoothSharingSession(ValueAtIndex, v22);
              goto LABEL_29;
            }
            if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
            {
              FigRoutingManagerRouteToBluetoothDevice(ValueAtIndex, (uint64_t)cf);
              goto LABEL_29;
            }
            v20 = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)ValueAtIndex, (uint64_t)cf, (uint64_t)&v20);
            v19 = 0;
            FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)ValueAtIndex, (uint64_t)cf, (uint64_t)&v19);
            theDict = 0;
            FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)ValueAtIndex, &theDict);
            if (theDict)
            {
              Value = CFDictionaryGetValue(theDict, CFSTR("CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions"));
              CFDictionaryGetValue(theDict, CFSTR("CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions"));
            }
            else
            {
              Value = 0;
            }
            FigRoutingManager_iOSHandleFigEndpointFeaturesActivation((void *)cf, v19, v20, ValueAtIndex, (uint64_t)Value);
            v16 = theDict;
            if (!theDict)
              goto LABEL_29;
          }
          else
          {
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)ValueAtIndex) != 1)
              goto LABEL_29;
            v11 = CMSMVAUtility_CopyWirelessPortsToEnableBluetoothSharing((const __CFArray *)a1);
            if (v11)
            {
              v12 = v11;
              if (CFArrayGetCount(v11) < 1)
                CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint((const __CFArray *)a1, (uint64_t)cf, (uint64_t)ValueAtIndex);
              else
                CMSMVAUtility_AggregatePorts((uint64_t)v12, 0, (uint64_t)ValueAtIndex);
              CFRelease(v12);
            }
            else
            {
              CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint((const __CFArray *)a1, (uint64_t)cf, (uint64_t)ValueAtIndex);
            }
            v14 = routingManager_copyPickedEndpointsFromCurrentRoutesInfo((uint64_t)ValueAtIndex);
            v15 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v14, 0);
            FigRoutingManagerContextUtilities_SetPickedEndpoints(ValueAtIndex, v14, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), 0, (uint64_t)v15);
            if (v15)
              CFRelease(v15);
            if (!v14)
              goto LABEL_29;
            v16 = v14;
          }
          CFRelease(v16);
          goto LABEL_29;
        }
      }
      else if (v21 == 5)
      {
        v9 = 0;
        if (!CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)cf, a1))
          goto LABEL_28;
        v10 = 6;
        goto LABEL_27;
      }
      v9 = 0;
      goto LABEL_28;
    }
  }
LABEL_56:
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  CMSMVAUtility_CreateMusicVADIfNeeded((const __CFArray *)a1, (uint64_t)cf);
  if (*((_BYTE *)FigRoutingManagerGetSharedManager() + 40))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("crossfadePlayback"), (const void *)*MEMORY[0x1E0C9AE50]);
    FigRoutingManagerCrossfadePlayback();
    if (Mutable)
      CFRelease(Mutable);
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (theArray)
    CFRelease(theArray);
}

void FigRoutingManagerCrossfadePlayback()
{
  FigCFDictionaryGetBooleanIfPresent();
}

void FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(uint64_t a1, CFMutableArrayRef *a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  CFMutableArrayRef *v5;
  CFMutableArrayRef *v7;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  CFMutableArrayRef v13;
  CFMutableArrayRef v14;
  int64_t Count;
  const void **v16;
  uint64_t v17;
  const void *v18;
  const __CFDictionary *Value;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *v26;
  const void *v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex j;
  const __CFDictionary *v33;
  const void *v34;
  const void *v35;
  CFMutableArrayRef *v36;
  CFMutableArrayRef *v37;
  const void **v38;
  __CFArray *v39;
  __CFArray *v40;
  __CFArray *v41;
  __CFArray *theArray;
  CFDictionaryRef theDict;

  v5 = a5;
  v7 = a3;
  if (a2 || a3 || a4 || a5)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v12 = CFArrayCreateMutable(v9, 0, v10);
    v13 = CFArrayCreateMutable(v9, 0, v10);
    v14 = CFArrayCreateMutable(v9, 0, v10);
    theDict = 0;
    FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)&theDict);
    if (theDict)
    {
      v36 = v7;
      v37 = v5;
      v40 = v14;
      v41 = v12;
      theArray = Mutable;
      Count = CFDictionaryGetCount(theDict);
      v16 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict, v16, 0);
      if (Count >= 1)
      {
        v17 = 0;
        v38 = v16;
        v39 = v13;
        do
        {
          v18 = v16[v17];
          Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v18);
          v20 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("CurrentlyActivatingEndpointsInfo"));
          if (v20)
          {
            v21 = v20;
            v22 = CFArrayGetCount(v20);
            if (v22 >= 1)
            {
              v23 = v22;
              for (i = 0; i != v23; ++i)
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
                v26 = CFDictionaryGetValue(ValueAtIndex, CFSTR("CurrentlyActivatingEndpointsInfo_Endpoint"));
                if (v26)
                {
                  v27 = v26;
                  if (FigRoutingManagerIsEndpointOfType((uint64_t)v26))
                  {
                    CFArrayAppendValue(theArray, v27);
                    CFArrayAppendValue(v41, v18);
                  }
                }
              }
            }
          }
          v28 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ActivatedEndpointsInfo"));
          v13 = v39;
          if (v28)
          {
            v29 = v28;
            v30 = CFArrayGetCount(v28);
            if (v30 >= 1)
            {
              v31 = v30;
              for (j = 0; j != v31; ++j)
              {
                v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, j);
                v34 = CFDictionaryGetValue(v33, CFSTR("ActivatedEndpointsInfo_Endpoint"));
                if (v34)
                {
                  v35 = v34;
                  if (FigRoutingManagerIsEndpointOfType((uint64_t)v34))
                  {
                    CFArrayAppendValue(v39, v35);
                    CFArrayAppendValue(v40, v18);
                  }
                }
              }
            }
          }
          ++v17;
          v16 = v38;
        }
        while (v17 != Count);
      }
      v5 = v37;
      v12 = v41;
      Mutable = theArray;
      v14 = v40;
      v7 = v36;
      if (v16)
        free(v16);
    }
    if (a2)
    {
      *a2 = Mutable;
      Mutable = 0;
    }
    if (v7)
    {
      *v7 = v12;
      v12 = 0;
    }
    if (a4)
    {
      *a4 = v13;
      v13 = 0;
    }
    if (v5)
    {
      *v5 = v14;
      v14 = 0;
    }
    if (theDict)
    {
      CFRelease(theDict);
      theDict = 0;
    }
    if (Mutable)
      CFRelease(Mutable);
    if (v12)
      CFRelease(v12);
    if (v13)
      CFRelease(v13);
    if (v14)
      CFRelease(v14);
  }
}

uint64_t FigRoutingManagerPostProcessPickEndpoint(const void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  void *SharedManager;
  NSObject *v8;
  uint64_t v9;
  uint64_t Count;
  uint64_t v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  CFTypeRef cf;
  uint64_t v23;
  CFArrayRef theArray;
  _QWORD v25[5];
  CFTypeRef v26[23];

  v26[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v21 = FigRoutingManagerContextUtilities_SetPickingState(a2, 10);
  v26[0] = 0;
  v4 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4258], *v4, v26);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a1);
      v8 = *((_QWORD *)SharedManager + 1);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __FigRoutingManagerPostProcessPickEndpoint_block_invoke;
      v25[3] = &__block_descriptor_40_e5_v8__0l;
      v25[4] = a1;
      MXDispatchAsync((uint64_t)"FigRoutingManagerPostProcessPickEndpoint", (uint64_t)"FigRoutingManager_iOS.m", 2434, 0, 0, v8, (uint64_t)v25);
    }
  }
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(a2, (uint64_t)&theArray);
  Count = (uint64_t)theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v11 = Count;
      v12 = 0;
      v19 = *v4;
      v20 = *MEMORY[0x1E0CA4348];
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v12);
        Count = (uint64_t)CFDictionaryGetValue(ValueAtIndex, CFSTR("ActivatedEndpointsInfo_Endpoint"));
        if ((const void *)Count != a1)
        {
          v14 = (const void *)Count;
          Count = FigEndpointUtility_EndpointPredicate_ContainsID();
          if (!(_DWORD)Count)
          {
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v14)
              || FigRoutingManagerIsEndpointOfType((uint64_t)v14)
              || (Count = FigRoutingManagerIsEndpointOfType((uint64_t)v14), (_DWORD)Count))
            {
              if (FigRoutingManagerIsEndpointOfType((uint64_t)v14)
                || (FigRoutingManagerIsEndpointOfType((uint64_t)v14)
                 || (Count = FigRoutingManagerIsEndpointOfType((uint64_t)v14), (_DWORD)Count))
                && (Count = FigRoutingManagerIsEndpointOfType((uint64_t)a1), (_DWORD)Count))
              {
                v23 = 0;
                FigCFDictionaryGetInt64IfPresent();
                cf = 0;
                v15 = FigEndpointGetCMBaseObject();
                v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
                if (v16)
                  v16(v15, v20, v19, &cf);
                if (dword_1EE2B3E28)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                FigRoutingManager_iOSDeactivateEndpoint(v14, v23);
                Count = (uint64_t)cf;
                if (cf)
                  CFRelease(cf);
              }
            }
          }
        }
        ++v12;
      }
      while (v11 != v12);
    }
  }
  FigRoutingContextUtilities_LogCurrentState(Count, v9);
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v26[0])
    CFRelease(v26[0]);
  return v21;
}

void FigRoutingManagerDeactivateEndpointFromPickedContexts(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t Count;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  int ContextType;
  const __CFDictionary *Value;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  const __CFDictionary *ValueAtIndex;
  const void *v19;
  uint64_t CMBaseObject;
  void (*v21)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v25;
  int64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  unsigned int v32;
  CFTypeRef cf;
  CFTypeRef v34;
  uint64_t v35;
  CFDictionaryRef theDict[23];

  theDict[21] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    theDict[0] = 0;
    FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)theDict);
    if (FigCFDictionaryGetCount() >= 1)
    {
      Count = CFDictionaryGetCount(theDict[0]);
      v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict[0], v6, 0);
      v26 = Count;
      if (Count >= 1)
      {
        v7 = 0;
        v8 = *MEMORY[0x1E0CA4468];
        v9 = *MEMORY[0x1E0C9AE00];
        v29 = *MEMORY[0x1E0CA4348];
        v25 = v6;
        v28 = *MEMORY[0x1E0C9AE00];
        do
        {
          v30 = v7;
          v10 = v6[v7];
          ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)v10);
          v31 = v10;
          Value = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], v10);
          v13 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ActivatedEndpointsInfo"));
          if (v13)
          {
            v14 = v13;
            v15 = CFArrayGetCount(v13);
            if (v15 >= 1)
            {
              v16 = v15;
              v17 = 0;
              v32 = ContextType & 0xFFFFFFFB;
              do
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v17);
                v19 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ActivatedEndpointsInfo_Endpoint"));
                v35 = 0;
                FigCFDictionaryGetInt64IfPresent();
                v34 = 0;
                CMBaseObject = FigEndpointGetCMBaseObject();
                v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
                if (v21)
                  v21(CMBaseObject, v8, v9, &v34);
                if (FigCFEqual()
                  && v19 == a1
                  && !MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed())
                {
                  cf = 0;
                  v22 = FigEndpointGetCMBaseObject();
                  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
                  if (v23)
                    v23(v22, v29, v9, &cf);
                  if (dword_1EE2B3E28)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v9 = v28;
                  }
                  FigRoutingManager_iOSDeactivateEndpoint(a1, v35);
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  if (v32 == 2)
                    FigRoutingManagerContextUtilities_SetPickedEndpoints(v31, 0, a4, 0, 0);
                }
                if (v34)
                  CFRelease(v34);
                ++v17;
              }
              while (v16 != v17);
            }
          }
          v7 = v30 + 1;
          v6 = v25;
        }
        while (v30 + 1 != v26);
      }
      if (v6)
        free(v6);
    }
    if (theDict[0])
      CFRelease(theDict[0]);
  }
}

uint64_t FigRoutingManagerPickEndpointForContext(const void *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v11;
  NSObject *v13;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    if (dword_1EE2B3E28)
    {
      LODWORD(cf[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
  }
  else if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    cf[0] = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v10 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v10)
    {
      v10(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], cf);
      v11 = (const __CFNumber *)cf[0];
    }
    else
    {
      v11 = 0;
    }
    if (CMSMVAUtility_GetPortFromCFNumber(v11) == 1886614639)
    {
      if (dword_1EE2B3E28)
      {
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
  return routingManager_preprocessPickEndpoint(a2, (uint64_t)a1, a1, a3, a4);
}

uint64_t routingManager_preprocessPickEndpoint(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, const __CFDictionary *a5)
{
  uint64_t v8;
  CFAllocatorRef *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  __CFDictionary *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  const void *ValueAtIndex;
  uint64_t v19;
  __CFArray *Mutable;
  __CFArray *v21;
  int v22;
  __CFArray *v23;
  unsigned int NumberOfCurrentOutputPorts;
  CFIndex v25;
  __CFArray *v26;
  const void *v27;
  const __CFDictionary *v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, const __CFAllocator *, void **);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v34;
  __CFArray *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *);
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *v43;
  unsigned int v44;
  uint64_t ContextType;
  CFTypeRef v46;
  CFTypeRef v47;
  const void *v48;
  uint64_t v49;
  CFIndex v50;
  uint64_t v51;
  const void *v52;
  OpaqueFigEndpoint *v53;
  OpaqueFigEndpoint *v54;
  __CFArray *v55;
  uint64_t v56;
  void (*v57)(uint64_t, __CFString *, const __CFAllocator *, void **);
  unsigned int PortFromCFNumber;
  const void *v59;
  CFIndex v60;
  CFIndex v61;
  CFIndex i;
  const void *v63;
  const void *v64;
  const void *v66;
  uint64_t FigEndpointFeatures;
  CFMutableDictionaryRef v68;
  CFArrayRef v69;
  NSObject *v70;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  const __CFDictionary *v75;
  const __CFDictionary *v76;
  __CFDictionary *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  CFMutableArrayRef v81;
  __CFArray *v82;
  const __CFAllocator *allocator;
  CFTypeRef v84;
  const void *v85;
  CFTypeRef v86;
  os_log_type_t type[8];
  CFArrayRef v88;
  CFArrayRef theArray;
  CFTypeRef v90;
  CFTypeRef cf;
  void *value[18];

  v8 = a2;
  value[16] = *(void **)MEMORY[0x1E0C80C00];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  v90 = 0;
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v12)
      v12(CMBaseObject, *MEMORY[0x1E0CA4348], *v10, &v90);
  }
  v13 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a4);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("preprocessPickEndpoint - "), (uint64_t)a1, 0, 0, (uint64_t)a3, v13);
  theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)a3, (uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v15 = Count;
      if (CFArrayGetValueAtIndex(theArray, 0) == a1)
      {
        v19 = 0;
LABEL_30:
        if (dword_1EE2B3E28)
        {
          LODWORD(v88) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        value[0] = 0;
        FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a3, v19, (uint64_t)value);
        FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a3, v19);
        FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)value[0]);
        FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v13, a5);
        v69 = (CFArrayRef)value[0];
        if (value[0])
          CFRelease(value[0]);
        v38 = 0;
        goto LABEL_124;
      }
      v16 = 1;
      while (1)
      {
        v17 = v16;
        if (v15 == v16)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
        v16 = v17 + 1;
        if (ValueAtIndex == a1)
        {
          v19 = v17;
          goto LABEL_29;
        }
      }
      v19 = 0;
LABEL_29:
      if (v17 < v15)
        goto LABEL_30;
    }
  }
  v88 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&v88);
  allocator = *v10;
  Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E0C9B378]);
  v21 = Mutable;
  if (a1)
    CFArrayAppendValue(Mutable, a1);
  v22 = FigCFEqual();
  if (v21)
    CFRelease(v21);
  if (v22)
  {
    if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) != 1)
      goto LABEL_42;
    v23 = CMSMUtility_CopyCurrentRouteIdentifiers();
    NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
    if (v88)
    {
      v25 = CFArrayGetCount(v88);
      v26 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      if (v25 >= 1)
      {
        v81 = v23;
        v78 = v8;
        v27 = a3;
        v28 = a5;
        v29 = 0;
        v30 = *MEMORY[0x1E0CA4258];
        do
        {
          CFArrayGetValueAtIndex(v88, v29);
          value[0] = 0;
          v31 = FigEndpointGetCMBaseObject();
          v32 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v32)
            v32(v31, v30, allocator, value);
          if (value[0])
          {
            CFArrayAppendValue(v26, value[0]);
            if (value[0])
              CFRelease(value[0]);
          }
          ++v29;
        }
        while (v25 != v29);
        a5 = v28;
        a3 = v27;
        v8 = v78;
        v23 = v81;
      }
    }
    else
    {
      v26 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    }
    if (FigCFEqual())
    {
      v34 = 0;
      LODWORD(v35) = 0;
      v36 = 1;
    }
    else
    {
      v77 = v13;
      v79 = v8;
      v48 = a3;
      v75 = a5;
      v49 = NumberOfCurrentOutputPorts;
      v82 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      if (NumberOfCurrentOutputPorts)
      {
        v50 = 0;
        v51 = *MEMORY[0x1E0CA3A80];
        v80 = *MEMORY[0x1E0CA3A58];
        do
        {
          v52 = CFArrayGetValueAtIndex(v23, v50);
          v53 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v52, 0, v51, (uint64_t)v48);
          if (v53)
          {
            v54 = v53;
            v55 = v23;
            value[0] = 0;
            v56 = FigEndpointGetCMBaseObject();
            v57 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
            if (v57)
              v57(v56, CFSTR("VAE_PortType"), allocator, value);
            PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)value[0]);
            if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
            {
              CFRelease(v54);
              v54 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v52, 1, v80, (uint64_t)v48);
            }
            v23 = v55;
            if (value[0])
              CFRelease(value[0]);
            if (v54)
            {
              CFArrayAppendValue(v82, v54);
              CFRelease(v54);
            }
          }
          ++v50;
        }
        while (v49 != v50);
      }
      if (v82)
      {
        v13 = v77;
        a3 = v48;
        if (FigCFEqual())
        {
          v36 = 0;
          LODWORD(v35) = 1;
          v8 = v79;
          v34 = v82;
          a5 = v75;
        }
        else
        {
          v35 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v82, 0);
          FigRoutingManagerContextUtilities_SetPickedEndpoints(v48, v82, 0, 0, (uint64_t)v35);
          v34 = v82;
          if (dword_1EE2B3E28)
          {
            *(_DWORD *)type = 0;
            LOBYTE(v86) = 0;
            v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v34 = v82;
          }
          a5 = v75;
          v8 = v79;
          if (v35)
          {
            CFRelease(v35);
            v36 = 0;
            LODWORD(v35) = 0;
          }
          else
          {
            v36 = 0;
          }
        }
      }
      else
      {
        LODWORD(v35) = 0;
        v36 = 1;
        a5 = v75;
        v13 = v77;
        a3 = v48;
        v34 = 0;
        v8 = v79;
      }
    }
    if (v26)
      CFRelease(v26);
    if (v23)
      CFRelease(v23);
    if ((v36 & 1) == 0)
      CFRelease(v34);
    if ((_DWORD)v35)
    {
LABEL_42:
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v13, a5);
      v38 = 0;
      goto LABEL_122;
    }
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 1);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(v8, (uint64_t)a3, (uint64_t)a1, (uint64_t)v13, (uint64_t)a5);
  if (a1)
  {
    *(_QWORD *)type = 0;
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      v39 = FigEndpointGetCMBaseObject();
      v40 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
      if (v40)
        v40(v39, CFSTR("VAE_FigOutputDeviceName"), allocator, type);
    }
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1)
      && (!FigRoutingManagerIsEndpointOfType((uint64_t)a1) || !FigCFEqual()))
    {
      if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1)
        && !FigRoutingManagerIsEndpointOfType((uint64_t)a1))
      {
        if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
          || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
        {
          v38 = routingManager_processPickEndpoint(a1, a3, v13, a5);
        }
        else
        {
          v38 = 0;
        }
LABEL_120:
        if (*(_QWORD *)type)
          CFRelease(*(CFTypeRef *)type);
        goto LABEL_122;
      }
      value[0] = 0;
      cf = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)cf, (CFTypeRef *)value);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)value[0]))
      {
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("PreprocessPickEndpoint - Calling to remove all sub-endpoints from the aggregate"), (uint64_t)value[0], (uint64_t)CFSTR("before calling to activate CarPlay/Nero"), 1);
        FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)value[0], cf, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
        CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v13, 0);
      }
      v38 = routingManager_processPickEndpoint(a1, a3, v13, a5);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v47 = value[0];
      if (!value[0])
        goto LABEL_120;
LABEL_119:
      CFRelease(v47);
      goto LABEL_120;
    }
    v85 = 0;
    v86 = 0;
    FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v85, &v86, 0);
    if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) == 5 && v85)
    {
      v84 = 0;
      v41 = FigEndpointGetCMBaseObject();
      v42 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v42)
        v42(v41, *MEMORY[0x1E0CA4348], allocator, &v84);
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 2);
      if (CMSMVAUtility_CreatePerAppAirPlayVADWithHandOffPort((uint64_t)a3))
      {
        v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (dword_1EE2B3E28)
      {
        v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      value[0] = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v86, (uint64_t)v85, (uint64_t)value);
      FigRoutingManager_iOSDeactivateEndpoint(v85, (uint64_t)value[0]);
LABEL_115:
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v86, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
      goto LABEL_116;
    }
    ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3);
    if ((_DWORD)ContextType == 7)
    {
      value[0] = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a3, 0, (uint64_t)value);
      if (value[0])
      {
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Preprocess - Calling to deactivate endpoint with name="), (uint64_t)value[0], (uint64_t)CFSTR("because current picked endpoint is AirPlay"), 1);
        cf = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a3, (uint64_t)value[0], (uint64_t)&cf);
        FigRoutingManager_iOSDeactivateEndpoint(value[0], (uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
      }
      if (FigRoutingManagerIsEndpointActivated((uint64_t)a1))
      {
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Preprocess - Calling to deactivate/remove endpoint with name="), (uint64_t)value[0], (uint64_t)CFSTR("because is activated for another routing context"), 1);
        if (MXSystemRemotePool_RemoveEndpoint(a1) == -13002)
        {
          cf = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a3, (uint64_t)a1, (uint64_t)&cf);
          FigRoutingManager_iOSDeactivateEndpoint(a1, (uint64_t)cf);
        }
      }
      v38 = routingManager_processPickEndpoint(a1, a3, v13, a5);
      v46 = value[0];
      if (!value[0])
        goto LABEL_118;
    }
    else
    {
      if (v85)
      {
        ContextType = FigRoutingManagerUtilities_IsCurrentRouteHandoff();
        if (!(_DWORD)ContextType)
        {
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 2);
          CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a3);
          v84 = 0;
          FigEndpointCopyProperty((uint64_t)v85, *MEMORY[0x1E0CA4348], (uint64_t)allocator, (uint64_t)&v84);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v85))
          {
            if (dword_1EE2B3E28)
            {
              v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            value[0] = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v86, (uint64_t)v85, (uint64_t)value);
            FigRoutingManager_iOSDeactivateEndpoint(v85, (uint64_t)value[0]);
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v86) != 1)
              goto LABEL_115;
          }
          else if (FigRoutingManagerIsEndpointOfType((uint64_t)v85))
          {
            if (dword_1EE2B3E28)
            {
              v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v85, v86, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
            CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)v86);
            goto LABEL_115;
          }
LABEL_116:
          v38 = routingManager_processPickEndpoint(a1, a3, v13, a5);
          v46 = v84;
          if (!v84)
            goto LABEL_118;
          goto LABEL_117;
        }
      }
      v59 = a3;
      v76 = a5;
      value[0] = 0;
      cf = 0;
      FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(ContextType, (CFMutableArrayRef *)value, (CFMutableArrayRef *)&cf, 0, 0);
      if (value[0])
      {
        v60 = CFArrayGetCount((CFArrayRef)value[0]);
        if (v60 >= 1)
        {
          v61 = v60;
          for (i = 0; i != v61; ++i)
          {
            v63 = CFArrayGetValueAtIndex((CFArrayRef)value[0], i);
            v64 = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
            if (v63 != a1 || v64 != v59)
            {
              v66 = v64;
              FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v63, (uint64_t)v64);
              v68 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              FigCFDictionarySetValue();
              v84 = 0;
              FigRoutingManagerCreateEndpointDeactivateCompletionContext(v66, &v84);
              FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Preprocess - Calling to deactivate endpoint with name="), (uint64_t)v63, 0, 1);
              FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v66, (uint64_t)v63, (uint64_t)CFSTR("configUpdateReasonEndedUserCancelled"));
              FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)v63, FigEndpointFeatures, (uint64_t)v68, (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, (uint64_t)v84);
              if (v68)
                CFRelease(v68);
            }
          }
        }
      }
      v38 = routingManager_processPickEndpoint(a1, v59, v13, v76);
      if (value[0])
      {
        CFRelease(value[0]);
        value[0] = 0;
      }
      v46 = cf;
      if (!cf)
      {
LABEL_118:
        v47 = v86;
        if (!v86)
          goto LABEL_120;
        goto LABEL_119;
      }
    }
LABEL_117:
    CFRelease(v46);
    goto LABEL_118;
  }
  v44 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3);
  if (v44 <= 0xD && ((1 << v44) & 0x2012) != 0)
    v38 = 4294954296;
  else
    v38 = routingManager_processPickEndpoint(0, a3, v13, a5);
LABEL_122:
  v69 = v88;
  if (v88)
    CFRelease(v88);
LABEL_124:
  FigRoutingContextUtilities_LogCurrentState(v69, v37);
  if (v13)
    CFRelease(v13);
  if (v90)
  {
    CFRelease(v90);
    v90 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return v38;
}

uint64_t FigRoutingManagerPickRouteDescriptorForContext(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  __CFDictionary *v10;
  uint64_t v11;
  OpaqueFigEndpoint *v13;
  OpaqueFigEndpoint *v14;
  OpaqueFigEndpoint *v15;
  __CFDictionary *v16;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("RouteName"));
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 3
    || FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 9)
  {
    goto LABEL_7;
  }
  if (theDict && FigCFDictionaryGetCount())
  {
    v13 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
    if (!v13)
    {
LABEL_7:
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v10, CFSTR("configUpdateReasonEndedFailed"));
      if (v10)
        CFRelease(v10);
      return 4294954296;
    }
    v14 = v13;
    cf[0] = 0;
    routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(a1, theDict, cf);
    if (cf[0])
    {
      v11 = routingManager_preprocessPickEndpoint(v14, (uint64_t)a1, cf[0], a3, a4);
      if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 5
        && !FigCFEqual())
      {
        v11 = routingManager_preprocessPickEndpoint(0, (uint64_t)a1, a1, a3, a4);
      }
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    else
    {
      v11 = 0;
    }
    v15 = v14;
LABEL_27:
    CFRelease(v15);
    goto LABEL_28;
  }
  cf[0] = 0;
  routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(a1, theDict, cf);
  if (cf[0])
  {
    v11 = routingManager_preprocessPickEndpoint(0, (uint64_t)a1, cf[0], a3, a4);
    v15 = (OpaqueFigEndpoint *)cf[0];
    if (!cf[0])
      goto LABEL_28;
    goto LABEL_27;
  }
  v11 = 0;
LABEL_28:
  if ((_DWORD)v11 != -13000)
    return v11;
  v16 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v16, CFSTR("configUpdateReasonEndedFailed"));
  return 4294954296;
}

CFTypeRef routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(CFTypeRef result, const __CFDictionary *a2, CFTypeRef *a3)
{
  const void *v5;
  const void *Value;
  const void *v7;
  int IsFollowingAnotherContext;

  if (!a3)
    return result;
  v5 = result;
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)result) != 5)
    goto LABEL_15;
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("RouteSupportsAirPlayVideo"));
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
    IsFollowingAnotherContext = FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v5);
    if (Value != v7)
    {
      if (IsFollowingAnotherContext)
      {
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)v5, (uint64_t)a3);
      }
      else
      {
        FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v5, 0);
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)a3);
      }
LABEL_15:
      result = *a3;
      if (*a3)
        return result;
      goto LABEL_16;
    }
    if (!IsFollowingAnotherContext)
      goto LABEL_15;
    FigRoutingContextUtilities_UnfollowUUIDFromLeader(v5, 0);
  }
  if (v5)
    result = CFRetain(v5);
  else
    result = 0;
  *a3 = result;
  if (!result)
  {
LABEL_16:
    if (v5)
      result = CFRetain(v5);
    else
      result = 0;
    *a3 = result;
  }
  return result;
}

uint64_t FigRoutingManagerPickEndpointsForContext(const void *a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  __CFArray *Mutable;
  CFIndex v9;
  const void *ValueAtIndex;
  CFIndex i;
  BOOL v12;
  CFIndex Count;
  BOOL v14;
  CFIndex v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int ContextType;
  CFIndex v18;
  unint64_t v19;
  _BOOL4 shouldSystemMusicFollowSystemAudio;
  NSObject *v21;
  NSObject *v22;
  const void *v23;
  const __CFDictionary *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  BOOL v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  CFTypeRef v34;
  NSObject *v36;
  CFIndex v37;
  int v38;
  _BOOL4 IsSystemAudioRouteAirPlayLowLatency;
  unsigned int v40;
  NSObject *v41;
  uint64_t v42;
  const __CFArray *v43;
  char v44;
  CFTypeRef v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  int v48;
  NSObject *v49;
  const void *v50;
  NSObject *v51;
  CFTypeRef v52;
  os_log_type_t v53[8];
  os_log_type_t type[8];
  CFTypeRef v55;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("Picking routes with IDs: "), a2, 0, 1);
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 4)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v9 = 0;
    if (a2)
      goto LABEL_10;
LABEL_11:
    for (i = 0; v9 < i; i = CFArrayGetCount(a2))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
      if ((!CMSMDeviceState_IsHomePodHub()
         || !FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)
         || !FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex))
        && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
      ++v9;
      if (!a2)
        goto LABEL_11;
LABEL_10:
      ;
    }
  }
  else
  {
    if (!a2)
    {
      Mutable = 0;
      v12 = 1;
      v14 = 1;
      goto LABEL_30;
    }
    Mutable = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  }
  v12 = Mutable == 0;
  if (Mutable)
    Count = CFArrayGetCount(Mutable);
  else
    Count = 0;
  v14 = a2 == 0;
  if (a2)
    v15 = CFArrayGetCount(a2);
  else
    v15 = 0;
  if (Count != v15)
  {
    if (Mutable && CFArrayGetCount(Mutable))
    {
      FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("Picking filtered routes with ID: "), a2, 0, 1);
      v12 = 0;
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, CFSTR("configUpdateReasonStarted"));
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, CFSTR("configUpdateReasonEndedFailed"));
    }
  }
LABEL_30:
  v55 = 0;
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType != 3)
  {
    if (ContextType == 1
      && !v14
      && (unint64_t)CFArrayGetCount(a2) >= 2
      && !FigRoutingManagerAreAllEndpointsBluetoothShareable(a2))
    {
LABEL_61:
      *(_DWORD *)type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v33 = 4294954296;
      goto LABEL_67;
    }
LABEL_66:
    v33 = 0;
LABEL_67:
    v34 = v55;
    if (v55)
      goto LABEL_68;
    goto LABEL_81;
  }
  if (v14 || (v18 = CFArrayGetCount(a2), v18 < 1))
  {
    FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
    if (dword_1EE2B3E28)
    {
      *(_DWORD *)type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_66;
  }
  v19 = v18;
  if (!FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a2))
  {
    if (v19 >= 2 && !FigRoutingManagerAreAllEndpointsBluetoothShareable(a2))
      goto LABEL_61;
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
      goto LABEL_62;
    v23 = CFArrayGetValueAtIndex(a2, 0);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v23))
    {
      v24 = a4;
      v25 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
      cf[0] = *(CFTypeRef *)MEMORY[0x1E0C9AE40];
      FigEndpointCopyProperty((uint64_t)v23, *MEMORY[0x1E0CA4280], *MEMORY[0x1E0C9AE00], (uint64_t)cf);
      v26 = cf[0];
      if (cf[0])
        CFRelease(cf[0]);
      v27 = v26 == v25;
      a4 = v24;
      if (v27)
      {
        if (dword_1EE2B3E28)
        {
          *(_DWORD *)type = 0;
          v53[0] = OS_LOG_TYPE_DEFAULT;
          v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v24;
        }
        goto LABEL_65;
      }
    }
    if (!dword_1EE2B3E28)
    {
LABEL_64:
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
LABEL_65:
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v55);
      goto LABEL_66;
    }
    *(_DWORD *)type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
LABEL_63:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_64;
  }
  shouldSystemMusicFollowSystemAudio = routingManager_shouldSystemMusicFollowSystemAudio(a2, 0);
  if (!FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
  {
    if (!shouldSystemMusicFollowSystemAudio)
    {
      if (dword_1EE2B3E28)
      {
        *(_DWORD *)type = 0;
        v53[0] = OS_LOG_TYPE_DEFAULT;
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_77;
    }
    if (!dword_1EE2B3E28)
      goto LABEL_64;
    *(_DWORD *)type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    goto LABEL_63;
  }
  if (shouldSystemMusicFollowSystemAudio)
  {
    if (dword_1EE2B3E28)
    {
      *(_DWORD *)type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_62:
    FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v55);
    goto LABEL_66;
  }
  if (dword_1EE2B3E28)
  {
    *(_DWORD *)type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, 0);
LABEL_77:
  if (a1)
    v34 = CFRetain(a1);
  else
    v34 = 0;
  v33 = 0;
  v55 = v34;
  if (v34)
  {
LABEL_68:
    if ((_DWORD)v33)
      goto LABEL_69;
    goto LABEL_85;
  }
LABEL_81:
  if (a1)
    v34 = CFRetain(a1);
  else
    v34 = 0;
  v55 = v34;
  if ((_DWORD)v33)
  {
LABEL_69:
    if (!v34)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_85:
  if (v12)
    v37 = 0;
  else
    v37 = CFArrayGetCount(Mutable);
  v38 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (v38 == 1)
    goto LABEL_91;
  if (v38 == 4)
  {
    if (CMSMDeviceState_IsHomePodHub())
    {
      v42 = MXAudioContext_HandlePickEndpoints(Mutable, a1, a3, a4);
      goto LABEL_130;
    }
    if (dword_1EE2B3E28)
    {
      *(_DWORD *)type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_114:
    v33 = 0;
    goto LABEL_131;
  }
  if (v38 != 3)
    goto LABEL_114;
LABEL_91:
  if (v37 < 1)
  {
    v43 = 0;
LABEL_128:
    v45 = a1;
    v46 = a3;
    v47 = a4;
    v48 = 0;
    goto LABEL_129;
  }
  if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)Mutable))
  {
    if (FigRoutingManagerDoEndpointsContainLocalAirPlayEndpoint(Mutable))
    {
      *(_QWORD *)type = 0;
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)type);
      *(_QWORD *)v53 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(*(uint64_t *)type, 0, (uint64_t)v53);
      if (!FigRoutingManagerIsEndpointWHAGroupable(*(uint64_t *)v53)
        && !FigRoutingManagerUtilities_IsSystemAudioRouteNull()
        && !FigRoutingManagerIsEndpointLowLatencyAirPlay(*(uint64_t *)v53))
      {
        IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
        v40 = FigRoutingManagerDoEndpointsContainOdeonEndpoint(Mutable);
        if (!IsSystemAudioRouteAirPlayLowLatency && v40 && CMSMDeviceState_ItsAnAppleTV())
        {
          if (dword_1EE2B3E28)
          {
            v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          routingManager_routeToLowLatencyAirPlay((uint64_t)a3);
        }
        else
        {
          if (dword_1EE2B3E28)
          {
            v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!v12 && CFArrayGetCount(Mutable) == 1)
            FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, CFSTR("configUpdateReasonEndedSuccess"));
          v52 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
          FigRoutingManagerPickEndpointForContext(*(const void **)type, v52, 0, 0);
          if (v52)
            CFRelease(v52);
        }
      }
      if (*(_QWORD *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(_QWORD *)type = 0;
      }
      if (*(_QWORD *)v53)
        CFRelease(*(CFTypeRef *)v53);
    }
    v43 = Mutable;
    goto LABEL_128;
  }
  v44 = !FigRoutingManagerAreAllEndpointsBluetoothShareable(Mutable) || v12;
  if ((v44 & 1) == 0 && CFArrayGetCount(Mutable) >= 2)
  {
    v45 = v55;
    v43 = Mutable;
    v46 = a3;
    v47 = a4;
    v48 = 1;
LABEL_129:
    v42 = routingManager_preprocessPickEndpoints(v43, v45, v46, v47, v48);
    goto LABEL_130;
  }
  v50 = CFArrayGetValueAtIndex(Mutable, 0);
  routingManager_emptyAggregateEndpointIfNecessary((uint64_t)v50, a1);
  v42 = routingManager_preprocessPickEndpoint(v50, (uint64_t)a1, v55, a3, a4);
LABEL_130:
  v33 = v42;
LABEL_131:
  v34 = v55;
  if (v55)
  {
LABEL_70:
    CFRelease(v34);
    v55 = 0;
  }
LABEL_71:
  if (!v12)
    CFRelease(Mutable);
  return v33;
}

void routingManager_routeToLowLatencyAirPlay(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v3;
  __CFArray *v4;
  __CFArray *v5;
  NSObject *v6;
  CFTypeRef cf;
  os_log_type_t type[8];
  CFTypeRef v9[21];

  v9[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (dword_1EE2B3E28)
  {
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v9);
  if (CMSMVAUtility_MakeLowLatencyAirPlayPortRoutable((uint64_t)v9[0]))
  {
    v3 = CMSMUtility_CopyCurrentRouteIdentifiers();
    v4 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v3, (uint64_t)v9[0]);
    v5 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v4, 0);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v9[0], v4, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a1, (uint64_t)v5);
    *(_QWORD *)type = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)type);
    cf = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(*(uint64_t *)type, (uint64_t)&cf);
    FigRoutingManagerAggregateAddLocalAirPlayEndpoint(*(const void **)type, (void *)cf);
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)type, cf, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0);
    if (dword_1EE2B3E28)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_UnfollowUUIDFromLeader(*(const void **)type, CFSTR("configUpdateReasonEndedBottomUpRouteChange"));
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (*(_QWORD *)type)
      CFRelease(*(CFTypeRef *)type);
  }
  if (v9[0])
    CFRelease(v9[0]);
}

uint64_t routingManager_preprocessPickEndpoints(const __CFArray *a1, const void *a2, const __CFDictionary *a3, const void *a4, int a5)
{
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("preprocessPickEndpoints - "), 0, a1, 0, (uint64_t)a2, v10);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  if (a5)
  {
    v11 = routingManager_processPickEndpoints(a1, a2, v10, a4, 1);
    v13 = 0;
  }
  else
  {
    v20 = 0;
    cf[0] = 0;
    FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(cf, &v20, 0);
    if (cf[0] && v20 && !FigCFEqual())
    {
      v19 = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v16 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v16)
        v16(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v19);
      if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
      {
        v13 = 0;
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 2);
        CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a2);
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v17, 1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
        v13 = routingManager_processPickEndpoints(a1, a2, v10, a4, 0);
      }
      if (v19)
        CFRelease(v19);
    }
    else
    {
      v13 = routingManager_processPickEndpoints(a1, a2, v10, a4, 0);
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    v11 = (uint64_t)v20;
    if (v20)
      CFRelease(v20);
  }
  FigRoutingContextUtilities_LogCurrentState(v11, v12);
  if (v10)
    CFRelease(v10);
  return v13;
}

void routingManager_emptyAggregateEndpointIfNecessary(uint64_t a1, const void *a2)
{
  CFAllocatorRef *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *);
  const void *ValueAtIndex;
  _BOOL4 v8;
  CFTypeRef v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v12;
  __CFDictionary *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v15;
  CFArrayRef theArray;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v15 = 0;
    theArray = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&v15);
    v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v15
      && (CMBaseObject = FigEndpointGetCMBaseObject(),
          (v6 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48)) != 0)
      && (v6(CMBaseObject, *MEMORY[0x1E0CA43D0], *v4, &theArray), theArray))
    {
      v8 = CFArrayGetCount(theArray) == 1
        && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
            FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex))
        && CMSMDeviceState_ItsAnAppleTV() != 0;
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      v8 = 0;
    }
    if (!FigRoutingManagerIsEndpointOfType(a1))
      goto LABEL_14;
    v9 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    cf[0] = *(CFTypeRef *)MEMORY[0x1E0C9AE40];
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v11)
    {
      v11(v10, *MEMORY[0x1E0CA4280], *v4, cf);
      v12 = cf[0];
      if (!cf[0])
        goto LABEL_13;
    }
    else
    {
      v12 = v9;
      if (!v9)
      {
LABEL_13:
        if (v12 == v9)
        {
          if (dword_1EE2B3E28)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_24;
        }
LABEL_14:
        if (!v8)
        {
          Mutable = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(Mutable, CFSTR("initiator"), CFSTR("SelectRouteInitiator_EmptyAggregateEndpoint"));
          routingManager_processPickEndpoints(0, a2, 0, Mutable, 0);
          if (Mutable)
            CFRelease(Mutable);
        }
LABEL_24:
        if (v15)
          CFRelease(v15);
        return;
      }
    }
    CFRelease(v12);
    goto LABEL_13;
  }
}

uint64_t FigRoutingManagerPickRouteDescriptorsForContext(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, uint64_t a4)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  const void *v19;
  OpaqueFigEndpoint *v20;
  OpaqueFigEndpoint *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t CMBaseObject;
  void (*v29)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  NSObject *v30;
  CFTypeRef v31;
  NSObject *v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  __CFArray *v43;
  __CFArray *v44;
  const __CFAllocator *allocator;
  CFTypeRef cf;
  int v47;
  const char *v48;
  __int16 v49;
  __CFArray *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteName"));
        if (Value)
          CFArrayAppendValue(Mutable, Value);
      }
    }
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(cf) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
  {
    FigRoutingManagerPickEndpointsForContext(a1, 0, a3, a4);
    goto LABEL_70;
  }
  v15 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  v16 = CFArrayGetCount(a2);
  if (v16 < 1)
    goto LABEL_60;
  v17 = v16;
  v42 = a4;
  v43 = Mutable;
  v18 = 0;
  v44 = v15;
  do
  {
    v19 = CFArrayGetValueAtIndex(a2, v18);
    v20 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)v19, a1);
    if (v20)
    {
      v21 = v20;
      if (FigRoutingManagerIsEndpointOfType((uint64_t)v20))
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(cf) = 0;
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v23 = cf;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if (v24)
          {
            v47 = 136315138;
            v48 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
      }
      else if (FigRoutingManagerIsEndpointOfType((uint64_t)v21))
      {
        cf = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v29 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (v29)
          v29(CMBaseObject, CFSTR("VAE_PortType"), allocator, &cf);
        if (CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)cf) == 1886614639)
        {
          if (dword_1EE2B3E28)
          {
            v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
        }
        if (cf)
          CFRelease(cf);
      }
      if (FigRoutingManagerIsEndpointOfType((uint64_t)v21)
        && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v21))
      {
        v31 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (dword_1EE2B3E28)
        {
          LODWORD(cf) = 0;
          v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v33 = cf;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            v34 = v33;
          else
            v34 = v33 & 0xFFFFFFFE;
          if (v34)
          {
            v47 = 136315138;
            v48 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v15 = v44;
        }
        if (v31)
        {
          CFArrayAppendValue(v15, v31);
          CFRelease(v31);
        }
        else
        {
          LODWORD(cf) = 0;
          v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v36 = cf;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            v37 = v36;
          else
            v37 = v36 & 0xFFFFFFFE;
          if (v37)
          {
            v47 = 136315138;
            v48 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        CFArrayAppendValue(v15, v21);
      }
      CFRelease(v21);
    }
    else
    {
      LODWORD(cf) = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v26 = cf;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if (v27)
      {
        v47 = 136315138;
        v48 = "FigRoutingManagerPickRouteDescriptorsForContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ++v18;
  }
  while (v17 != v18);
  Mutable = v43;
  a4 = v42;
  if (v15)
  {
    if (CFArrayGetCount(v15))
    {
LABEL_60:
      FigRoutingManagerPickEndpointsForContext(a1, v15, a3, a4);
      if (!v15)
        goto LABEL_70;
LABEL_69:
      CFRelease(v15);
      goto LABEL_70;
    }
  }
  LODWORD(cf) = 0;
  v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v39 = cf;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    v40 = v39;
  else
    v40 = v39 & 0xFFFFFFFE;
  if (v40)
  {
    v47 = 136315394;
    v48 = "FigRoutingManagerPickRouteDescriptorsForContext";
    v49 = 2114;
    v50 = v43;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a1, a3, CFSTR("configUpdateReasonStarted"));
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a1, a3, CFSTR("configUpdateReasonEndedFailed"));
  v15 = v44;
  if (v44)
    goto LABEL_69;
LABEL_70:
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t FigRoutingManager_iOSAddEndpointToContext(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  uint64_t v3;
  __CFDictionary *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  CFTypeRef v9;
  uint64_t Value;
  CFTypeRef v11;
  const void *v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int ContextType;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  _BOOL4 shouldSystemMusicFollowSystemAudio;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  CFTypeRef v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  const __CFArray *v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  CFTypeRef v48;
  CFTypeRef v49;
  uint64_t v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  CFTypeRef v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  __CFDictionary *v58;
  const __CFArray *v59;
  _BOOL4 IsSystemAudioRouteAirPlayLowLatency;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  NSObject *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v70;
  NSObject *v71;
  unsigned int v72;
  unsigned int v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  os_log_type_t v77;
  unsigned int v78;
  CFTypeRef v79;
  os_log_type_t type[8];
  CFTypeRef v81;
  os_log_type_t v82[8];
  CFTypeRef v83;
  int v84;
  const char *v85;
  __int16 v86;
  CFTypeRef v87;
  __int16 v88;
  CFTypeRef v89;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v3 = 4294954296;
  if (!a1 || !a2)
    return v3;
  v6 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_IsAddOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_UserPickedRoute"), v9);
  if (MX_FeatureFlags_IsMandrakeEverywhereEnabled())
  {
    Value = FigCFDictionaryGetValue();
    v11 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    if (Value)
      v12 = (const void *)Value;
    else
      v12 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_IsPredictedRouteOperation"), v12);
  }
  else
  {
    v11 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  }
  FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Adding endpoint="), (uint64_t)a2, 0, 1);
  v76 = v11;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(CMBaseObject, *MEMORY[0x1E0CA42E8], v7, &v76);
  v75 = v11;
  v15 = FigEndpointGetCMBaseObject();
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v16)
    v16(v15, *MEMORY[0x1E0CA4270], v7, &v75);
  v74 = 0;
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 1)
  {
    if (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)a2)
      && routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint())
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v83) = 0;
        v82[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v25 = v83;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v82[0]))
          v26 = v25;
        else
          v26 = v25 & 0xFFFFFFFE;
        if (v26)
        {
          v84 = 136315395;
          v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          v86 = 2113;
          v87 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(cf[0], 0);
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v74);
      v40 = (const __CFArray *)cf[0];
      if (cf[0])
        goto LABEL_98;
    }
    goto LABEL_99;
  }
  if (ContextType != 4)
  {
    if (ContextType != 3)
      goto LABEL_99;
    if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a2))
    {
      if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v83) = 0;
          v82[0] = OS_LOG_TYPE_DEFAULT;
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v28 = v83;
          if (os_log_type_enabled(v27, v82[0]))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if (v29)
          {
            v84 = 136315395;
            v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            v86 = 2113;
            v87 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v74);
      }
      else
      {
        if (!FigRoutingManagerIsEndpointOfType((uint64_t)a2))
          goto LABEL_61;
        cf[0] = v11;
        FigEndpointCopyProperty((uint64_t)a2, *MEMORY[0x1E0CA4280], v7, (uint64_t)cf);
        v36 = cf[0];
        if (cf[0])
          CFRelease(cf[0]);
        if (v36 == v11)
        {
          if (dword_1EE2B3E28)
          {
            LODWORD(v83) = 0;
            v82[0] = OS_LOG_TYPE_DEFAULT;
            v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v45 = v83;
            if (os_log_type_enabled(v44, v82[0]))
              v46 = v45;
            else
              v46 = v45 & 0xFFFFFFFE;
            if (v46)
            {
              v84 = 136315138;
              v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
LABEL_61:
          if (dword_1EE2B3E28)
          {
            LODWORD(v83) = 0;
            v82[0] = OS_LOG_TYPE_DEFAULT;
            v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v38 = v83;
            if (os_log_type_enabled(v37, v82[0]))
              v39 = v38;
            else
              v39 = v38 & 0xFFFFFFFE;
            if (v39)
            {
              v84 = 136315395;
              v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
              v86 = 2113;
              v87 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
        }
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v74);
      }
      goto LABEL_99;
    }
    v83 = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)&v83);
    *(_QWORD *)v82 = 0;
    v18 = FigEndpointGetCMBaseObject();
    v19 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v19)
      v19(v18, *MEMORY[0x1E0CA43D0], v7, v82);
    shouldSystemMusicFollowSystemAudio = routingManager_shouldSystemMusicFollowSystemAudio(*(const __CFArray **)v82, (uint64_t)a2);
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      if (shouldSystemMusicFollowSystemAudio)
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v81) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v22 = v81;
          if (os_log_type_enabled(v21, type[0]))
            v23 = v22;
          else
            v23 = v22 & 0xFFFFFFFE;
          if (v23)
          {
            v84 = 136315395;
            v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            v86 = 2113;
            v87 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v74);
        goto LABEL_95;
      }
      if (dword_1EE2B3E28)
      {
        LODWORD(v81) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v34 = v81;
        if (os_log_type_enabled(v33, type[0]))
          v35 = v34;
        else
          v35 = v34 & 0xFFFFFFFE;
        if (v35)
        {
          v84 = 136315395;
          v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          v86 = 2113;
          v87 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, 0);
    }
    else
    {
      if (shouldSystemMusicFollowSystemAudio)
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v81) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v31 = v81;
          if (os_log_type_enabled(v30, type[0]))
            v32 = v31;
          else
            v32 = v31 & 0xFFFFFFFE;
          if (v32)
          {
            v84 = 136315395;
            v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            v86 = 2113;
            v87 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v74);
LABEL_95:
        if (v83)
        {
          CFRelease(v83);
          v83 = 0;
        }
        v40 = *(const __CFArray **)v82;
        if (*(_QWORD *)v82)
LABEL_98:
          CFRelease(v40);
LABEL_99:
        if (v74)
          goto LABEL_101;
        goto LABEL_100;
      }
      if (dword_1EE2B3E28)
      {
        LODWORD(v81) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v42 = v81;
        if (os_log_type_enabled(v41, type[0]))
          v43 = v42;
        else
          v43 = v42 & 0xFFFFFFFE;
        if (v43)
        {
          v84 = 136315138;
          v85 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v74 = CFRetain(a1);
    goto LABEL_95;
  }
  v74 = CFRetain(a1);
  if (v74)
    goto LABEL_101;
LABEL_100:
  v74 = CFRetain(a1);
LABEL_101:
  v47 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (v47 == 1)
  {
    v49 = v74;
    if (v75 == v9)
      goto LABEL_106;
LABEL_111:
    v50 = routingManager_preprocessPickEndpoint(a2, (uint64_t)a1, v49, v6, Mutable);
    goto LABEL_112;
  }
  if (v47 != 4)
  {
    if (v47 != 3)
    {
LABEL_143:
      v3 = 0;
      goto LABEL_144;
    }
    if (v76 == v9)
    {
      v54 = v74;
      v83 = 0;
      v55 = *MEMORY[0x1E0CA4348];
      v56 = FigEndpointGetCMBaseObject();
      v57 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (v57)
        v57(v56, v55, v7, &v83);
      v58 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(v6);
      FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("preprocessAddAirPlayEndpoint - "), (uint64_t)a2, 0, 0, (uint64_t)v54, v58);
      *(_QWORD *)v82 = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)v82);
      v59 = *(const __CFArray **)v82;
      if (!*(_QWORD *)v82 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v59 = 0;
      if (FigRoutingManagerIsEndpointPresentInAggregate(a2, (uint64_t)v59))
      {
        IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
        if (!FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal())
        {
          if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)a2))
          {
            if (dword_1EE2B3E28)
            {
              LODWORD(v81) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v62 = v81;
              if (os_log_type_enabled(v61, type[0]))
                v63 = v62;
              else
                v63 = v62 & 0xFFFFFFFE;
              if (v63)
              {
                v84 = 136315138;
                v85 = "routingManager_preprocessAddAirPlayEndpoint";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            routingManager_routeToWHAGroupableVAEndpoint(v6);
          }
          else if (FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a2) && !IsSystemAudioRouteAirPlayLowLatency)
          {
            if (dword_1EE2B3E28)
            {
              LODWORD(v81) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v66 = v81;
              if (os_log_type_enabled(v65, type[0]))
                v67 = v66;
              else
                v67 = v66 & 0xFFFFFFFE;
              if (v67)
              {
                v84 = 136315138;
                v85 = "routingManager_preprocessAddAirPlayEndpoint";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            routingManager_routeToLowLatencyAirPlay((uint64_t)v6);
          }
        }
        FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v54, v58, CFSTR("configUpdateReasonEndedSuccess"));
        v3 = 0;
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v54, 1);
        *(_QWORD *)type = 0;
        v81 = 0;
        FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v81, type, 0);
        if (v81 && *(_QWORD *)type && !FigCFEqual())
        {
          v79 = 0;
          v68 = FigEndpointGetCMBaseObject();
          v69 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v69)
            v69(v68, v55, v7, &v79);
          if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
          {
            v3 = 0;
          }
          else
          {
            FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v54, 2);
            CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)v54);
            if (dword_1EE2B3E28)
            {
              v78 = 0;
              v77 = OS_LOG_TYPE_DEFAULT;
              v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v72 = v78;
              if (os_log_type_enabled(v71, v77))
                v73 = v72;
              else
                v73 = v72 & 0xFFFFFFFE;
              if (v73)
              {
                v84 = 136315650;
                v85 = "routingManager_preprocessAddAirPlayEndpoint";
                v86 = 2114;
                v87 = v79;
                v88 = 2114;
                v89 = v83;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManagerDeactivateEndpointFromPickedContexts(v81, v70, 1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
            v3 = routingManager_processAddAirPlayEndpoint(a2, a1, v54, v58, Mutable);
          }
          if (v79)
            CFRelease(v79);
        }
        else
        {
          v3 = routingManager_processAddAirPlayEndpoint(a2, a1, v54, v58, Mutable);
        }
        if (v81)
        {
          CFRelease(v81);
          v81 = 0;
        }
        if (*(_QWORD *)type)
          CFRelease(*(CFTypeRef *)type);
      }
      if (*(_QWORD *)v82)
      {
        CFRelease(*(CFTypeRef *)v82);
        *(_QWORD *)v82 = 0;
      }
      if (v58)
        CFRelease(v58);
      if (v83)
        CFRelease(v83);
      goto LABEL_144;
    }
    v48 = v75;
    routingManager_emptyAggregateEndpointIfNecessary((uint64_t)a2, a1);
    v49 = v74;
    if (v48 == v9)
    {
LABEL_106:
      routingManager_preprocessAddBluetoothEndpoint(a2, (uint64_t)a1, v49, v6, Mutable);
      goto LABEL_143;
    }
    goto LABEL_111;
  }
  if (!CMSMDeviceState_IsHomePodHub())
  {
    if (dword_1EE2B3E28)
    {
      LODWORD(v83) = 0;
      v82[0] = OS_LOG_TYPE_DEFAULT;
      v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v52 = v83;
      if (os_log_type_enabled(v51, v82[0]))
        v53 = v52;
      else
        v53 = v52 & 0xFFFFFFFE;
      if (v53)
      {
        v84 = 136315138;
        v85 = "FigRoutingManager_iOSAddEndpointToContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_143;
  }
  if (v76 != v9)
  {
    FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Notifying clients of failure because the following endpoint is not WHA groupable "), (uint64_t)a2, 0, 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v6, CFSTR("configUpdateReasonStarted"));
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v6, CFSTR("configUpdateReasonEndedFailed"));
    goto LABEL_143;
  }
  v50 = MXAudioContext_HandleAddEndpoint(a2, a1, v6, Mutable);
LABEL_112:
  v3 = v50;
LABEL_144:
  if (v74)
  {
    CFRelease(v74);
    v74 = 0;
  }
  if (v75)
  {
    CFRelease(v75);
    v75 = 0;
  }
  if (v76)
  {
    CFRelease(v76);
    v76 = 0;
  }
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void routingManager_preprocessAddBluetoothEndpoint(const void *a1, uint64_t a2, const void *a3, CFDictionaryRef theDict, const __CFDictionary *a5)
{
  __CFDictionary *v9;
  CFMutableDictionaryRef EndpointActivateOptions;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  OpaqueFigEndpoint *v18;
  OpaqueFigEndpoint *v19;
  uint64_t v20;
  __CFArray *v21;
  __CFArray *v22;
  __CFArray *v23;
  CFTypeRef v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v26;
  unsigned int v27;
  __CFArray *v28;
  __CFArray *v29;
  __CFArray *v30;
  int v31;
  CFTypeRef v32;
  os_log_type_t type;
  unsigned int v34;
  CFTypeRef v35;
  CFTypeRef v36;
  int v37;
  const char *v38;
  __int16 v39;
  CFTypeRef v40;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v9 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("preprocessAddBluetoothEndpoint - "), (uint64_t)a1, 0, 0, (uint64_t)a3, v9);
  v32 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&v32);
  if (FigCFArrayContainsValue())
  {
    FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v9, a5);
    goto LABEL_55;
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 1);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(a2, (uint64_t)a3, (uint64_t)a1, (uint64_t)v9, (uint64_t)a5);
  FigEndpointDescriptorUtilitySetUserManualRoute((uint64_t)a1, v9 != 0);
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a3, v9);
  FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a3);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 4);
    FigRoutingManager_iOSActivateEndpoint(a1, a3, v9, a5);
    v11 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v36 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v12 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
    {
      v14(CMBaseObject, *MEMORY[0x1E0CA4280], v12, &v36);
      v11 = v36;
    }
    if (v11 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
    {
      v35 = 0;
      v16 = FigEndpointGetCMBaseObject();
      v17 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v17)
        v17(v16, *MEMORY[0x1E0CA4258], v12, &v35);
      v18 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v35, 0, *MEMORY[0x1E0CA3A80], 0);
      if (v18)
      {
        v19 = v18;
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 6);
        if (FigEndpointActivate())
        {
          FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, (uint64_t)CFSTR("routeChangeEndedFailed"));
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
        }
        else
        {
          v28 = CMSMUtility_CopyCurrentRouteIdentifiers();
          v29 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v28, (uint64_t)a3);
          v30 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v29, 0);
          FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, v29, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v9, (uint64_t)v30);
          if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v29, (uint64_t)a1))
            FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, (uint64_t)CFSTR("routeChangeEndedSuccess"));
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)a3, cf);
          if (FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)cf[0]))
            v31 = 5;
          else
            v31 = 0;
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, v31);
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          if (v30)
            CFRelease(v30);
          if (v29)
            CFRelease(v29);
          if (v28)
            CFRelease(v28);
        }
        CFRelease(v19);
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 5);
        if (dword_1EE2B3E28)
        {
          v34 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v26 = v34;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v27 = v26;
          else
            v27 = v26 & 0xFFFFFFFE;
          if (v27)
          {
            v37 = 136315395;
            v38 = "routingManager_processAddBluetoothEndpoint";
            v39 = 2113;
            v40 = v35;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      if (v35)
        CFRelease(v35);
    }
    else
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 5);
    }
    v24 = v36;
    if (!v36)
      goto LABEL_53;
  }
  else
  {
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1))
      goto LABEL_53;
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 6);
    v15 = FigEndpointActivate();
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a3, 0, (uint64_t)cf);
    if (v15)
    {
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, (uint64_t)CFSTR("routeChangeEndedFailed"));
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
    }
    else
    {
      if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0]))
        FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v20, 1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"));
      v21 = CMSMUtility_CopyCurrentRouteIdentifiers();
      v22 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v21, (uint64_t)a3);
      v23 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v22, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, v22, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v9, (uint64_t)v23);
      if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v22, (uint64_t)a1))
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, (uint64_t)CFSTR("routeChangeEndedSuccess"));
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
      if (v23)
        CFRelease(v23);
      if (v22)
        CFRelease(v22);
      if (v21)
        CFRelease(v21);
    }
    v24 = cf[0];
    if (!cf[0])
      goto LABEL_53;
  }
  CFRelease(v24);
LABEL_53:
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
LABEL_55:
  if (v32)
  {
    CFRelease(v32);
    v32 = 0;
  }
  if (v9)
    CFRelease(v9);
}

uint64_t FigRoutingManager_iOSRemoveEndpointFromContext(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  uint64_t v3;
  __CFDictionary *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int ContextType;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const void *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  CFIndex Count;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v34;
  unsigned int v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  const void *ValueAtIndex;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  CFArrayRef v54;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  os_log_type_t v59;
  unsigned int v60;
  CFTypeRef v61;
  os_log_type_t v62[8];
  os_log_type_t type[8];
  uint64_t v64;
  _BYTE cf[12];
  __int16 v66;
  CFTypeRef v67;
  __int16 v68;
  CFTypeRef v69;
  uint64_t v70[18];

  v70[16] = *MEMORY[0x1E0C80C00];
  v3 = 4294954296;
  if (!a1 || !a2)
    return v3;
  v6 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_IsRemoveOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_UserPickedRoute"), v9);
  FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Removing endpoint="), (uint64_t)a2, 0, 1);
  v10 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v58 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(CMBaseObject, *MEMORY[0x1E0CA42E8], v7, &v58);
  v57 = v10;
  v13 = FigEndpointGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(v13, *MEMORY[0x1E0CA4270], v7, &v57);
  v56 = 0;
  ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 4)
  {
LABEL_10:
    v56 = CFRetain(a1);
    if (v56)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (ContextType == 3)
  {
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a2))
      goto LABEL_10;
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v56);
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v64) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v34 = v64;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v35 = v34;
        else
          v35 = v34 & 0xFFFFFFFE;
        if (v35)
        {
          *(_DWORD *)cf = 136315395;
          *(_QWORD *)&cf[4] = "routingManager_validateAndCopyLeaderContextForRemovingEndpoint";
          v66 = 2113;
          v67 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v56);
    }
  }
  if (!v56)
LABEL_11:
    v56 = CFRetain(a1);
LABEL_12:
  v16 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  v3 = 0;
  if (v16 > 3)
  {
    if (v16 == 4)
    {
      if (!CMSMDeviceState_IsHomePodHub())
      {
        if (dword_1EE2B3E28)
        {
          LODWORD(v64) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v31 = v64;
          if (os_log_type_enabled(v30, type[0]))
            v32 = v31;
          else
            v32 = v31 & 0xFFFFFFFE;
          if (v32)
          {
            *(_DWORD *)cf = 136315138;
            *(_QWORD *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_116;
      }
      v20 = MXAudioContext_HandleRemoveEndpoint(a2, a1, v6, Mutable);
    }
    else
    {
      if (v16 != 13)
        goto LABEL_128;
      v20 = routingManager_processRemoveVirtualAudioEndpoint((uint64_t)a2, (uint64_t)a1, v56, v6);
    }
    v3 = v20;
    goto LABEL_128;
  }
  if (v16 == 1)
  {
    if (v57 != v9)
    {
      if (!FigRoutingManagerIsEndpointOfType((uint64_t)a2))
      {
        LODWORD(v64) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v37 = v64;
        if (os_log_type_enabled(v36, type[0]))
          v38 = v37;
        else
          v38 = v37 & 0xFFFFFFFE;
        if (!v38)
          goto LABEL_67;
        *(_DWORD *)cf = 136315138;
        *(_QWORD *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
        goto LABEL_66;
      }
      v21 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)a2);
      if (FigCFEqual())
      {
        v64 = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v21, (uint64_t)a2, (uint64_t)&v64);
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("FigRoutingManager_iOSRemoveEndpointFromContext deactivate endpoint with name="), (uint64_t)a2, 0, 1);
        v3 = FigRoutingManager_iOSDeactivateEndpoint(a2, v64);
        if ((_DWORD)v3)
        {
          *(_DWORD *)type = 0;
          v62[0] = OS_LOG_TYPE_DEFAULT;
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v23 = *(_DWORD *)type;
          if (os_log_type_enabled(v22, v62[0]))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if (v24)
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
            v66 = 1024;
            LODWORD(v67) = v3;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v21, v6, CFSTR("configUpdateReasonEndedSuccess"));
        }
        goto LABEL_112;
      }
      LODWORD(v64) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v40 = v64;
      if (os_log_type_enabled(v39, type[0]))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if (v41)
      {
        *(_DWORD *)cf = 136315138;
        *(_QWORD *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_111;
    }
    goto LABEL_40;
  }
  if (v16 == 3)
  {
    if (v58 != v9)
    {
      if (v57 != v9)
      {
        if (v58 != v10)
        {
          LODWORD(v64) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v18 = v64;
          if (os_log_type_enabled(v17, type[0]))
            v19 = v18;
          else
            v19 = v18 & 0xFFFFFFFE;
          if (!v19)
            goto LABEL_67;
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
LABEL_66:
          _os_log_send_and_compose_impl();
LABEL_67:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v3 = 4294954296;
          goto LABEL_128;
        }
        v21 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)a2);
        if (!FigCFEqual())
        {
          v70[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v21, (uint64_t)a2, (uint64_t)v70);
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("FigRoutingManager_iOSRemoveEndpointFromContext deactivate endpoint with name="), (uint64_t)a2, 0, 1);
          v3 = FigRoutingManager_iOSDeactivateEndpoint(a2, v70[0]);
          *(_QWORD *)cf = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v21, 0, (uint64_t)cf);
          if (!(_DWORD)v3 && FigCFEqual())
          {
            if (FigRoutingManagerIsEndpointOfType(*(uint64_t *)cf))
              FigRoutingManagerContextUtilities_SetPickedEndpoints(v21, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)v6, 0);
            else
              FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v21, v6, CFSTR("configUpdateReasonEndedSuccess"));
          }
          if (*(_QWORD *)cf)
            CFRelease(*(CFTypeRef *)cf);
          goto LABEL_112;
        }
LABEL_111:
        v3 = 0;
LABEL_112:
        if (!v21)
          goto LABEL_128;
        v54 = (CFArrayRef)v21;
LABEL_127:
        CFRelease(v54);
        goto LABEL_128;
      }
LABEL_40:
      routingManager_processRemoveBluetoothAndVAEndpoint((uint64_t)a2, (uint64_t)a1, v56, v6);
LABEL_116:
      v3 = 0;
      goto LABEL_128;
    }
    v25 = v56;
    FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("processRemoveAirPlayEndpoint - "), (uint64_t)a2, 0, 0, (uint64_t)v56, v6);
    v64 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v25, 0, (uint64_t)&v64);
    if (FigRoutingManagerIsEndpointOfType(v64))
    {
      v26 = v64;
      if (!v64 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v26 = 0;
      if (FigRoutingManagerIsEndpointPresentInAggregate(a2, v26))
      {
        *(_QWORD *)type = 0;
        v27 = FigEndpointGetCMBaseObject();
        v28 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
        if (v28 && (v28(v27, *MEMORY[0x1E0CA43D0], v7, type), *(_QWORD *)type))
          Count = CFArrayGetCount(*(CFArrayRef *)type);
        else
          Count = 0;
        if (FigRoutingManagerIsEndpointLocal((uint64_t)a2)
          && FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback()
          && Count == 1
          && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)type, 0),
              FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)))
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v25, v6, CFSTR("configUpdateReasonEndedFailed"));
        }
        else
        {
          FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint((uint64_t)a1, (uint64_t)v25, (uint64_t)a2, (uint64_t)v6);
          v46 = v64;
          if (!v64 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
            v46 = 0;
          v3 = FigRoutingManagerRemoveEndpointFromAggregate(v46, a2, v25, v6, Mutable, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
          if ((_DWORD)v3)
          {
LABEL_126:
            v54 = *(CFArrayRef *)type;
            if (!*(_QWORD *)type)
              goto LABEL_128;
            goto LABEL_127;
          }
          *(_QWORD *)v62 = 0;
          v47 = FigEndpointGetCMBaseObject();
          v48 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
          if (v48)
            v48(v47, *MEMORY[0x1E0CA4258], v7, v62);
          v61 = 0;
          v49 = FigEndpointGetCMBaseObject();
          v50 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v50)
            v50(v49, *MEMORY[0x1E0CA4348], v7, &v61);
          if (dword_1EE2B3E28)
          {
            v60 = 0;
            v59 = OS_LOG_TYPE_DEFAULT;
            v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v52 = v60;
            if (os_log_type_enabled(v51, v59))
              v53 = v52;
            else
              v53 = v52 & 0xFFFFFFFE;
            if (v53)
            {
              *(_DWORD *)cf = 136315650;
              *(_QWORD *)&cf[4] = "routingManager_processRemoveAirPlayEndpoint";
              v66 = 2114;
              v67 = *(CFTypeRef *)v62;
              v68 = 2114;
              v69 = v61;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (v61)
          {
            CFRelease(v61);
            v61 = 0;
          }
          if (*(_QWORD *)v62)
            CFRelease(*(CFTypeRef *)v62);
        }
        v3 = 0;
        goto LABEL_126;
      }
      FigRoutingManagerLogEndpointID((uint64_t)CFSTR("endpoint="), (uint64_t)a2, (uint64_t)CFSTR(" is already removed"), 1);
    }
    else
    {
      *(_DWORD *)type = 0;
      v62[0] = OS_LOG_TYPE_DEFAULT;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v43 = *(_DWORD *)type;
      if (os_log_type_enabled(v42, v62[0]))
        v44 = v43;
      else
        v44 = v43 & 0xFFFFFFFE;
      if (v44)
      {
        *(_DWORD *)cf = 136315138;
        *(_QWORD *)&cf[4] = "routingManager_processRemoveAirPlayEndpoint";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v25, v6, CFSTR("configUpdateReasonEndedNoop"));
    goto LABEL_116;
  }
LABEL_128:
  if (v56)
  {
    CFRelease(v56);
    v56 = 0;
  }
  if (v57)
  {
    CFRelease(v57);
    v57 = 0;
  }
  if (v58)
  {
    CFRelease(v58);
    v58 = 0;
  }
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void routingManager_processRemoveBluetoothAndVAEndpoint(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  CFTypeRef v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFArray *v12;
  __CFArray *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v16;
  OpaqueFigEndpoint *v17;
  OpaqueFigEndpoint *v18;
  __CFDictionary *EndpointDeactivateOptions;
  CFTypeRef cf;
  CFTypeRef v21;

  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("processRemoveBluetoothEndpoint - "), a1, 0, 0, (uint64_t)a3, a4);
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(a2, (uint64_t)a3, a1, (uint64_t)a4);
    v8 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v21 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v9 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
    {
      v11(CMBaseObject, *MEMORY[0x1E0CA4280], v9, &v21);
      v8 = v21;
    }
    if (v8 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
    {
      cf = 0;
      v14 = FigEndpointGetCMBaseObject();
      v15 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v15)
      {
        v15(v14, *MEMORY[0x1E0CA4258], v9, &cf);
        v16 = cf;
      }
      else
      {
        v16 = 0;
      }
      v17 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v16, 0, *MEMORY[0x1E0CA3A80], 0);
      if (v17)
      {
        v18 = v17;
        EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions(a1, (uint64_t)a3);
        FigEndpointDeactivate();
        routingManager_updatePickedEndpoints(a3, (uint64_t)a4);
        if (EndpointDeactivateOptions)
          CFRelease(EndpointDeactivateOptions);
        v13 = (__CFArray *)v18;
        goto LABEL_16;
      }
    }
    else
    {
      cf = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&cf);
      v12 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, (const __CFArray *)cf, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a4, (uint64_t)v12);
      if (v12)
      {
        v13 = v12;
LABEL_16:
        CFRelease(v13);
      }
    }
    if (cf)
      CFRelease(cf);
    if (v21)
      CFRelease(v21);
    return;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
    routingManager_processRemoveVirtualAudioEndpoint(a1, a2, a3, a4);
}

uint64_t routingManager_processRemoveVirtualAudioEndpoint(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  __CFDictionary *EndpointDeactivateOptions;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("processRemoveVirtualAudioEndpoint - "), a1, 0, 0, (uint64_t)a3, a4);
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(a2, (uint64_t)a3, a1, (uint64_t)a4);
    EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions(a1, (uint64_t)a3);
    FigEndpointDeactivate();
    routingManager_updatePickedEndpoints(a3, (uint64_t)a4);
    if (EndpointDeactivateOptions)
      CFRelease(EndpointDeactivateOptions);
    return 0;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954296;
  }
}

_BYTE *FigRoutingManagerUpdateFadeInUponMusicVADCreation(char a1)
{
  _BYTE *result;

  result = FigRoutingManagerGetSharedManager();
  result[40] = a1;
  return result;
}

uint64_t FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty(CFTypeRef a1, uint64_t a2, char a3)
{
  const void *v4;
  _QWORD *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  void *SharedManager;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFTypeRef v13;
  NSObject *v14;
  NSObject *v15;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  NSObject *v24;
  const void *v25;
  os_log_type_t v26[8];
  os_log_type_t type[8];
  _QWORD v28[6];
  char v29;
  CFArrayRef theArray;
  CFTypeRef cf[23];

  v4 = a1;
  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v5 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA4398], *v5, cf);
      a1 = cf[0];
    }
    else
    {
      a1 = 0;
    }
  }
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    theArray = 0;
    v9 = *v5;
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(v10, *MEMORY[0x1E0CA43D0], v9, &theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
        {
          *(_QWORD *)type = 0;
          FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)type);
          if (dword_1EE2B3E28)
          {
            *(_DWORD *)v26 = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingContextUtilities_SetLeaderToSystemAudioContext(*(const void **)type, CFSTR("configUpdateReasonEndedSuccess"));
          v25 = *(const void **)type;
          if (!*(_QWORD *)type)
            goto LABEL_19;
        }
        else
        {
          *(_QWORD *)type = 0;
          v20 = FigEndpointGetCMBaseObject();
          v21 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
          if (v21)
            v21(v20, *MEMORY[0x1E0CA4348], v9, type);
          *(_QWORD *)v26 = 0;
          v22 = FigEndpointGetCMBaseObject();
          v23 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
          if (v23)
            v23(v22, *MEMORY[0x1E0CA4468], v9, v26);
          if (dword_1EE2B3E28)
          {
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(_QWORD *)type)
          {
            CFRelease(*(CFTypeRef *)type);
            *(_QWORD *)type = 0;
          }
          v25 = *(const void **)v26;
          if (!*(_QWORD *)v26)
            goto LABEL_19;
        }
        CFRelease(v25);
LABEL_19:
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
        goto LABEL_21;
      }
      if (Count)
      {
        if (dword_1EE2B3E28)
        {
          *(_DWORD *)type = 0;
          v26[0] = OS_LOG_TYPE_DEFAULT;
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_19;
      }
    }
    if (v4)
      CFRetain(v4);
    if (cf[0])
    {
      CFRetain(cf[0]);
      v13 = cf[0];
    }
    else
    {
      v13 = 0;
    }
    v15 = *((_QWORD *)SharedManager + 1);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty_block_invoke;
    v28[3] = &__block_descriptor_49_e5_v8__0l;
    v29 = a3;
    v28[4] = v13;
    v28[5] = v4;
    MXDispatchAsync((uint64_t)"FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty", (uint64_t)"FigRoutingManager_iOS.m", 4406, 0, 0, v15, (uint64_t)v28);
    goto LABEL_19;
  }
  if (dword_1EE2B3E28)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  if (cf[0])
    CFRelease(cf[0]);
  return 0;
}

uint64_t FigRoutingManagerIsCrossfadePlaybackSupported()
{
  FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

void FigRoutingManagerPrintPickedRoutesForAllRoutingContexts()
{
  CFIndex v0;
  const __CFAllocator *v1;
  CFIndex v2;
  CFArrayRef v3;
  const void *ValueAtIndex;
  CFStringRef v5;
  CFTypeRef v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFArray *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;
  CFTypeRef v18;
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  v16 = 0;
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v16);
  FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)v16, &cf);
  FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("System audio routes:"), (const __CFArray *)cf, 0, 1);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (CMSMDeviceState_IsHomePodHub())
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyAudioContextUUIDs((uint64_t)theArray);
    v0 = 0;
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v2 = theArray[0] ? CFArrayGetCount(theArray[0]) : 0;
      v3 = theArray[0];
      if (v0 >= v2)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v0);
      FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)ValueAtIndex, &cf);
      v5 = CFStringCreateWithFormat(v1, 0, CFSTR("Audio context routes for UUID=%@"), ValueAtIndex);
      FigRoutingManagerLogEndpointIDs((uint64_t)v5, (const __CFArray *)cf, 0, 1);
      if (v5)
        CFRelease(v5);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      ++v0;
    }
  }
  else
  {
    v15 = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v15);
    FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)v15, &cf);
    FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("System music routes:"), (const __CFArray *)cf, 0, 1);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v6 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (v6)
    {
      v14 = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v8)
        v8(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v14);
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v14)
        CFRelease(v14);
    }
    else
    {
      LODWORD(v14) = 0;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v15, (uint64_t)theArray);
    v18 = 0;
    if (theArray[0]
      && (v11 = FigEndpointGetCMBaseObject(),
          (v12 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48)) != 0))
    {
      v12(v11, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v18);
      v13 = (const __CFArray *)v18;
    }
    else
    {
      v13 = 0;
    }
    FigRoutingManagerLogEndpointIDs((uint64_t)CFSTR("SubEndpoints in the system music aggregate:"), v13, 0, 1);
    if (v18)
    {
      CFRelease(v18);
      v18 = 0;
    }
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    if (v6)
      CFRelease(v6);
    v3 = (CFArrayRef)v15;
  }
  if (v3)
    CFRelease(v3);
  if (v16)
    CFRelease(v16);
}

BOOL routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  const void *ValueAtIndex;
  _BOOL8 IsLocalHomeTheaterEndpoint;
  CFArrayRef theArray;
  CFTypeRef cf;
  CFTypeRef v7;

  v7 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v7);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v7, (uint64_t)&cf);
  theArray = 0;
  if (cf)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v1 && (v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray), theArray))
    {
      if (CFArrayGetCount(theArray) == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        IsLocalHomeTheaterEndpoint = FigRoutingManagerIsLocalHomeTheaterEndpoint((uint64_t)ValueAtIndex);
      }
      else
      {
        IsLocalHomeTheaterEndpoint = 0;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    else
    {
      IsLocalHomeTheaterEndpoint = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  else
  {
    IsLocalHomeTheaterEndpoint = 0;
  }
  if (v7)
    CFRelease(v7);
  return IsLocalHomeTheaterEndpoint;
}

void __routingManager_handleBottomUpRouteChange_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *Mutable;
  const void *v4;

  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_UserPickedRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
  FigRoutingManagerPickRouteDescriptorsForContext(*(_QWORD *)(a1 + 32), 0, 0, (uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

uint64_t routingManager_processPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  const void *ContextType;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v17;
  unsigned int NumberOfCurrentOutputPorts;
  uint64_t v19;
  __CFArray *Mutable;
  CFIndex v21;
  uint64_t v22;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v24;
  OpaqueFigEndpoint *v25;
  __CFArray *v26;
  NSObject *v27;
  uint64_t v28;
  CFTypeRef cf;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;
  const void *v34[18];

  v34[16] = *(const void **)MEMORY[0x1E0C80C00];
  ContextType = (const void *)FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 3);
  v10 = (uint64_t)ContextType;
  if (a1)
  {
    if (!(_DWORD)ContextType)
    {
      ContextType = (const void *)FigRoutingManager_iOSActivateEndpoint(a1, a2, a3, a4);
      v10 = (uint64_t)ContextType;
    }
    goto LABEL_32;
  }
  ContextType = (const void *)FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
  v11 = (int)ContextType;
  if (((_DWORD)ContextType - 5) < 2)
    goto LABEL_7;
  if (!(_DWORD)ContextType)
    goto LABEL_32;
  if ((_DWORD)ContextType == 2)
  {
LABEL_7:
    v32 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v32);
    v31 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&v31);
    v30 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v32, 0, (uint64_t)&v30);
    cf = 0;
    if (v31)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v13)
        v13(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
    }
    if (v30 == v31 && FigRoutingManagerIsEndpointOfType((uint64_t)v30))
    {
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v10 = FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v31, (uint64_t)a2, 1);
      v28 = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v31, (uint64_t)&v28);
      FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Going to deactivate endpoint with name="), (uint64_t)v31, (uint64_t)CFSTR("because most recent currently activating endpoint is NULL"), 1);
      FigRoutingManager_iOSDeactivateEndpoint(v31, v28);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, 0);
      v17 = CMSMUtility_CopyCurrentRouteIdentifiers();
      NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
      if (NumberOfCurrentOutputPorts)
      {
        v19 = NumberOfCurrentOutputPorts;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        v21 = 0;
        v22 = *MEMORY[0x1E0CA3A80];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v17, v21);
          v24 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v22, (uint64_t)v32);
          if (v24)
          {
            v25 = v24;
            CFArrayAppendValue(Mutable, v24);
            CFRelease(v25);
          }
          ++v21;
        }
        while (v19 != v21);
      }
      else
      {
        Mutable = 0;
      }
      v26 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v32, Mutable, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, (uint64_t)v26);
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
      if (v26)
        CFRelease(v26);
      if (v17)
        CFRelease(v17);
      if (Mutable)
        CFRelease(Mutable);
      if (v32)
      {
        CFRelease(v32);
        v32 = 0;
      }
      if ((_DWORD)v10)
      {
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        LODWORD(v28) = 0;
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v11 == 5)
        CMSMVAUtility_DestroyPerAppAirPlayVAD((uint64_t)a2);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, 0);
      v34[0] = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v31, (uint64_t)v34);
      FigRoutingManager_iOSDeactivateEndpoint(v31, (uint64_t)v34[0]);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v30)
    {
      CFRelease(v30);
      v30 = 0;
    }
    if (v31)
    {
      CFRelease(v31);
      v31 = 0;
    }
    ContextType = v32;
    if (v32)
LABEL_31:
      CFRelease(ContextType);
  }
  else
  {
    v34[0] = 0;
    ContextType = (const void *)FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)v34);
    if (v34[0])
    {
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a3, 0);
      v33 = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v34[0], (uint64_t)&v33);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)v34[0]))
      {
        FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Going to deactivate endpoint with name="), (uint64_t)v34[0], (uint64_t)CFSTR("because user selected NULL"), 1);
        FigRoutingManager_iOSDeactivateEndpoint(v34[0], v33);
      }
      ContextType = v34[0];
      if (v34[0])
        goto LABEL_31;
    }
  }
LABEL_32:
  FigRoutingContextUtilities_LogCurrentState(ContextType, v9);
  return v10;
}

BOOL routingManager_shouldSystemMusicFollowSystemAudio(const __CFArray *a1, uint64_t a2)
{
  const void *ValueAtIndex;
  _BOOL8 result;

  if (a1 && CFArrayGetCount(a1))
  {
    if (CFArrayGetCount(a1) != 1)
      return 0;
    ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
    result = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex);
    if (!result)
      return result;
  }
  if (!a2)
    return 1;
  result = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a2);
  if (result)
    return 1;
  return result;
}

void routingManager_routeToWHAGroupableVAEndpoint(const __CFDictionary *a1)
{
  CFTypeRef v2;
  CFMutableDictionaryRef EndpointActivateOptions;
  __CFArray *v4;
  __CFArray *v5;
  __CFArray *v6;
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  v2 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)v2, (uint64_t)cf, a1);
  FigRoutingManagerGetFigEndpointFeatures((uint64_t)v2, (uint64_t)cf);
  FigEndpointActivate();
  v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  v5 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v4, (uint64_t)cf);
  v6 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v5, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, v5, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a1, (uint64_t)v6);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
  if (v2)
    CFRelease(v2);
  if (cf)
    CFRelease(cf);
}

uint64_t routingManager_processAddAirPlayEndpoint(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, const void *a5)
{
  void (*v10)(const void *, _QWORD);
  _BOOL4 IsSystemAudioRouteAirPlayLowLatency;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  NSObject *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  NSObject *v24;
  os_log_type_t v26[8];
  CFArrayRef theArray;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 4);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)cf);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a3, (uint64_t)cf[0], a1, (uint64_t)a4, (uint64_t)a5);
  if (FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    v10 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v10)
      v10(a1, 0);
    FigEndpointDeactivate();
  }
  IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
  if (FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal())
  {
    theArray = 0;
    if (!cf[0])
      goto LABEL_45;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
    if (!theArray || !CFArrayGetCount(theArray))
    {
LABEL_45:
      if (!FigRoutingManagerIsEndpointLocal((uint64_t)a1) && !CMSMDeviceState_IsHomePodHub())
      {
        if (dword_1EE2B3E28)
        {
          *(_DWORD *)v26 = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerAggregateAddLocalAirPlayEndpoint(a2, (void *)cf[0]);
      }
    }
    if (theArray)
      CFRelease(theArray);
  }
  else if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)a1))
  {
    if (dword_1EE2B3E28)
    {
      LODWORD(theArray) = 0;
      v26[0] = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    routingManager_routeToWHAGroupableVAEndpoint(a4);
  }
  else if (!FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1) && !IsSystemAudioRouteAirPlayLowLatency)
  {
    if (dword_1EE2B3E28)
    {
      LODWORD(theArray) = 0;
      v26[0] = OS_LOG_TYPE_DEFAULT;
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint();
  }
  v17 = cf[0];
  if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v17 = 0;
  v18 = FigRoutingManagerAddEndpointToAggregate((uint64_t)v17, (uint64_t)a1, a3, a4, a5, (uint64_t)FigRoutingManagerAggregateAddEndpointCompletionCallback);
  if (!(_DWORD)v18)
  {
    theArray = 0;
    v19 = *MEMORY[0x1E0C9AE00];
    v20 = FigEndpointGetCMBaseObject();
    v21 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v21)
      v21(v20, *MEMORY[0x1E0CA4258], v19, &theArray);
    *(_QWORD *)v26 = 0;
    v22 = FigEndpointGetCMBaseObject();
    v23 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v23)
      v23(v22, *MEMORY[0x1E0CA4348], v19, v26);
    if (dword_1EE2B3E28)
    {
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)v26)
    {
      CFRelease(*(CFTypeRef *)v26);
      *(_QWORD *)v26 = 0;
    }
    if (theArray)
      CFRelease(theArray);
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v18;
}

void routingManager_updatePickedEndpoints(const void *a1, uint64_t a2)
{
  __CFArray *v4;
  __CFArray *v5;
  __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v12;
  CFTypeRef cf;
  CFTypeRef v14[21];

  v14[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v14[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)v14);
  if (FigCFEqual())
    v4 = CMSMUtility_CopyCurrentInputRouteIdentifiers();
  else
    v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  v5 = v4;
  v6 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v4, (uint64_t)a1);
  v7 = v6;
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
    if (Count >= 1)
    {
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, v9);
        if (FigRoutingManagerIsEndpointLowLatencyAirPlay((uint64_t)ValueAtIndex))
        {
          if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)cf))
            break;
        }
        if (Count == ++v9)
          goto LABEL_15;
      }
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_UnfollowUUIDFromLeader(cf, CFSTR("configUpdateReasonEndedSuccess"));
    }
  }
  else
  {
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  }
LABEL_15:
  v12 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v7, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v7, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a2, (uint64_t)v12);
  if (v12)
    CFRelease(v12);
  if (v7)
    CFRelease(v7);
  if (v5)
    CFRelease(v5);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v14[0])
    CFRelease(v14[0]);
}

uint64_t FigVolumeControllerStartServer()
{
  uint64_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1EE2B3E68 >= 0x100)
    dword_1EE2B3E68 = 0;
  v0 = FigXPCServerStart();
  if ((_DWORD)v0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

uint64_t volumeControllerServer_handleChangeMasterVolumeMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v6;
  float v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, float);
  uint64_t v11;
  int v13;
  CFTypeRef cf;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v6 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v6)
    goto LABEL_6;
  v13 = 0;
  v7 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_VolumeDelta);
  memset(v15, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v13, v15);
  if (dword_1EE2B3E68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = cf;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v10)
  {
    v6 = v10(a2, v9, v7);
LABEL_6:
    v11 = v6;
    goto LABEL_8;
  }
  v11 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t volumeControllerServer_handleSetMasterVolumeMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v6;
  float v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, float);
  uint64_t v11;
  int v13;
  CFTypeRef cf;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v6 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v6)
    goto LABEL_6;
  v13 = 0;
  v7 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_Volume);
  memset(v15, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v13, v15);
  if (dword_1EE2B3E68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = cf;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v10)
  {
    v6 = v10(a2, v9, v7);
LABEL_6:
    v11 = v6;
    goto LABEL_8;
  }
  v11 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t volumeControllerServer_handleGetMasterVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, float *);
  uint64_t v7;
  float v9;

  v9 = 0.0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v9);
  return v7;
}

uint64_t volumeControllerServer_handleCanSetMasterVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanSetMasterVolume, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleGetMasterVolumeControlTypeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t *);
  uint64_t v7;
  uint64_t value;

  value = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &value);
  if (!(_DWORD)v7)
    xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetMasterVolumeControlType, value);
  return v7;
}

uint64_t volumeControllerServer_handleChangeEndpointVolumeMessage(_xpc_connection_s *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  float v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, float);
  uint64_t v11;
  int v13;
  CFTypeRef cf;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_6;
  v13 = 0;
  v7 = xpc_dictionary_get_double(a3, kFigVolumeControllerXPCMsgParam_VolumeDelta);
  memset(v15, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v13, v15);
  if (dword_1EE2B3E68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = cf;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v10)
  {
    v6 = v10(a2, v9, v7);
LABEL_6:
    v11 = v6;
    goto LABEL_8;
  }
  v11 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t volumeControllerServer_handleSetEndpointVolumeMessage(_xpc_connection_s *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  float v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, float);
  uint64_t v11;
  int v13;
  CFTypeRef cf;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_6;
  v13 = 0;
  v7 = xpc_dictionary_get_double(a3, kFigVolumeControllerXPCMsgParam_Volume);
  memset(v15, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v13, v15);
  if (dword_1EE2B3E68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = cf;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v10)
  {
    v6 = v10(a2, v9, v7);
LABEL_6:
    v11 = v6;
    goto LABEL_8;
  }
  v11 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t volumeControllerServer_handleGetEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, float *);
  uint64_t v7;
  float v9;

  v9 = 0.0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v9);
  return v7;
}

uint64_t volumeControllerServer_handleCanSetEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanSetEndpointVolume, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleGetSubEndpointVolumeControlTypeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v7;
  uint64_t value;

  value = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &value);
  if (!(_DWORD)v7)
    xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType, value);
  return v7;
}

uint64_t volumeControllerServer_handleSetSubEndpointVolumeMessage(uint64_t a1, void *a2)
{
  uint64_t v4;
  float v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, float);

  v4 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
    {
      v5 = xpc_dictionary_get_double(a2, kFigVolumeControllerXPCMsgParam_Volume);
      if (dword_1EE2B3E68)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (!v7)
        return 4294954514;
      return v7(a1, 0, 0, v5);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetSubEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, float *);
  uint64_t v7;
  float v9;

  v9 = 0.0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v9);
  return v7;
}

uint64_t volumeControllerServer_handleSetRoomVolumeMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v4;
  float v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, float);

  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v4 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
    {
      v5 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_Volume);
      if (dword_1EE2B3E68)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (!v7)
        return 4294954514;
      return v7(a1, 0, 0, v5);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetRoomVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, float *);
  uint64_t v7;
  float v9;

  v9 = 0.0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v9);
  return v7;
}

uint64_t volumeControllerServer_handleSetEndpointWithRoomIDVolumeMessage(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, float);
  float v7;

  v4 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
    {
      v5 = xpc_dictionary_get_double(a2, kFigVolumeControllerXPCMsgParam_Volume);
      v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 208);
      if (!v6)
        return 4294954514;
      v7 = v5;
      return v6(a1, 0, 0, v7);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetEndpointWithRoomIDVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, float *);
  uint64_t v7;
  float v9;

  v9 = 0.0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 216);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v9);
  return v7;
}

uint64_t volumeControllerServer_handleSetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t (*v6)(uint64_t, _QWORD, _BOOL8);

  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v4 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if (!(_DWORD)v4)
  {
    v5 = xpc_dictionary_get_BOOL(xdict, kFigVolumeControllerXPCMsgParam_Mute);
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
    if (!v6)
      return 4294954514;
    return v6(a1, 0, v5);
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleSetMuteOfEndpointWithIDMessage(uint64_t a1, void *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t (*v6)(uint64_t, _QWORD, _BOOL8);

  v4 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v4)
  {
    v5 = xpc_dictionary_get_BOOL(a2, kFigVolumeControllerXPCMsgParam_Mute);
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (!v6)
      return 4294954514;
    return v6(a1, 0, v5);
  }
  return v4;
}

uint64_t volumeControllerServer_handleSetMuteOfSubEndpointWithIDMessage(uint64_t a1, void *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, _BOOL8);

  v4 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
    {
      v5 = xpc_dictionary_get_BOOL(a2, kFigVolumeControllerXPCMsgParam_Mute);
      v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v6)
        return 4294954514;
      return v6(a1, 0, 0, v5);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetMuteOfSubEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleCanSetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  v5 = FigRoutingContextXPCServerCopyRoutingContextForID();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleCanSetMuteOfEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

uint64_t volumeControllerServer_handleCanSetMuteOfSubEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, char *);
  uint64_t v7;
  char v9;

  v9 = 0;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
    return v5;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, 0, 0, &v9);
  if (!(_DWORD)v7)
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v9 != 0);
  return v7;
}

_xpc_connection_s *volumeControllerServer_getClientInfo(_xpc_connection_s *result, _DWORD *a2, void *a3)
{
  int v5;

  if (a2 && a3)
  {
    result = (_xpc_connection_s *)xpc_connection_get_pid(result);
    v5 = (int)result;
    if ((int)result >= 1)
    {
      result = (_xpc_connection_s *)proc_name((int)result, a3, 0x80u);
      if ((result & 0x80000000) == 0)
        *((_BYTE *)a3 + result) = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t FigVibratorIsVibratorAvailable()
{
  uint64_t result;
  mach_port_t v1;
  const __CFDictionary *v2;

  if (fvGetVibeSynthIsAvailableOnce != -1)
    dispatch_once_f(&fvGetVibeSynthIsAvailableOnce, 0, (dispatch_function_t)fvGetVibeSynthIsAvailable);
  result = gvVibeSynthIsAvailable;
  if (!gvVibeSynthIsAvailable)
  {
    v1 = *MEMORY[0x1E0CBBAA8];
    v2 = IOServiceNameMatching("vibrator");
    result = IOServiceGetMatchingService(v1, v2);
    if ((_DWORD)result)
    {
      IOObjectRelease(result);
      return 1;
    }
  }
  return result;
}

uint64_t FigVibratorIsVibeSynthEngineAvailable()
{
  return gvVibeSynthIsAvailable;
}

uint64_t FigVibratorInitialize()
{
  char *v0;
  unint64_t v1;
  int *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  mach_port_t v6;
  const __CFDictionary *v7;
  io_service_t MatchingService;
  uint64_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  uint32_t v12;
  NSObject *v13;
  void *DispatchSourceBlock;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  __CFArray *Default;
  __CFArray *v18;
  CFNumberRef v19;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v22;
  NSObject *v23;
  const void *v25;
  const void *v26;
  NSObject *v27;
  NSObject *v28;
  CMTime valuePtr;

  if (gFVInfo)
    return 0;
  v0 = (char *)malloc_type_calloc(1uLL, 0xE8uLL, 0x10E2040012A5A8EuLL);
  if (v0)
  {
    v1 = (unint64_t)v0;
    v0[112] = 0;
    *((_QWORD *)v0 + 15) = 0;
    v0[192] = 0;
    *((_QWORD *)v0 + 25) = 0;
    *((_DWORD *)v0 + 52) = 0;
    *((_QWORD *)v0 + 27) = 0;
    v0[224] = 0;
    *((_DWORD *)v0 + 17) = 0;
    *(_QWORD *)v0 = 0;
    *((_QWORD *)v0 + 1) = 0;
    *(_QWORD *)(v0 + 13) = 0;
    if (fvGetVibeSynthIsAvailableOnce != -1)
      dispatch_once_f(&fvGetVibeSynthIsAvailableOnce, 0, (dispatch_function_t)fvGetVibeSynthIsAvailable);
    v2 = (int *)(v1 + 16);
    if (gvVibeSynthIsAvailable)
    {
      *(_QWORD *)(v1 + 24) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineInitialize");
      *(_QWORD *)(v1 + 32) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineStartPrewarm");
      *(_QWORD *)(v1 + 40) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineStopPrewarm");
      *(_QWORD *)(v1 + 48) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEnginePlay");
      v3 = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineCancelWithOptions");
      *(_QWORD *)(v1 + 56) = v3;
      v4 = *(uint64_t (**)(void))(v1 + 24);
      if (!v4 || !*(_QWORD *)(v1 + 32) || !*(_QWORD *)(v1 + 40) || !*(_QWORD *)(v1 + 48) || !v3)
      {
LABEL_45:
        v5 = FigSignalErrorAt();
        goto LABEL_46;
      }
      v5 = v4();
      if ((_DWORD)v5)
      {
LABEL_46:
        v22 = v5;
LABEL_29:
        if (*(_QWORD *)v1)
        {
          FigSimpleMutexDestroy();
          *(_QWORD *)v1 = 0;
        }
        if (!gvVibeSynthIsAvailable)
        {
          v25 = *(const void **)(v1 + 32);
          if (v25)
          {
            CFRelease(v25);
            *(_QWORD *)(v1 + 32) = 0;
          }
          v26 = *(const void **)(v1 + 40);
          if (v26)
          {
            CFRelease(v26);
            *(_QWORD *)(v1 + 40) = 0;
          }
          v27 = *(NSObject **)(v1 + 96);
          if (v27)
          {
            dispatch_source_cancel(v27);
            v28 = *(NSObject **)(v1 + 96);
            if (v28)
            {
              dispatch_release(v28);
              *(_QWORD *)(v1 + 96) = 0;
            }
          }
        }
        v23 = *(NSObject **)(v1 + 8);
        if (v23)
        {
          dispatch_release(v23);
          *(_QWORD *)(v1 + 8) = 0;
        }
        if (*(_BYTE *)(v1 + 20))
          notify_cancel(*v2);
        free((void *)v1);
        return v22;
      }
      *(_WORD *)(v1 + 64) = 0;
    }
    else
    {
      *(_DWORD *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 32) = 0;
      *(_QWORD *)(v1 + 40) = 0;
      CMTimeMake(&valuePtr, 0, 1);
      *(CMTime *)(v1 + 48) = valuePtr;
      CMTimeMake(&valuePtr, 0, 1);
      *(CMTime *)(v1 + 72) = valuePtr;
      *(_QWORD *)(v1 + 96) = 0;
      *(_BYTE *)(v1 + 104) = 0;
      *(_DWORD *)(v1 + 108) = 0;
      *(_QWORD *)(v1 + 136) = 0;
      CMTimeMake(&valuePtr, 0, 1);
      *(CMTime *)(v1 + 144) = valuePtr;
      CMTimeMake(&valuePtr, 0, 1);
      *(CMTime *)(v1 + 168) = valuePtr;
      *(_QWORD *)(v1 + 128) = 0;
      v6 = *MEMORY[0x1E0CBBAA8];
      v7 = IOServiceNameMatching("vibrator");
      MatchingService = IOServiceGetMatchingService(v6, v7);
      *(_DWORD *)(v1 + 24) = MatchingService;
      if (!MatchingService)
      {
        v22 = 4294950803;
        goto LABEL_29;
      }
    }
    v9 = FigSimpleMutexCreate();
    *(_QWORD *)v1 = v9;
    if (v9)
    {
      v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v11 = dispatch_queue_create("com.apple.coremedia.vibrator", v10);
      *(_QWORD *)(v1 + 8) = v11;
      if (v11)
      {
        v12 = notify_register_check("com.apple.coremedia.vibration", (int *)(v1 + 16));
        *(_BYTE *)(v1 + 20) = v12 == 0;
        if (!v12)
        {
          notify_set_state(*v2, 0);
          notify_post("com.apple.coremedia.vibration");
        }
        if (gvVibeSynthIsAvailable)
        {
LABEL_24:
          while (!__ldxr((unint64_t *)&gFVInfo))
          {
            if (!__stxr(v1, (unint64_t *)&gFVInfo))
            {
              FigVibratorStopWithOptions(0);
              return 0;
            }
          }
          v22 = 0;
          __clrex();
          goto LABEL_29;
        }
        v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v1 + 8));
        *(_QWORD *)(v1 + 96) = v13;
        if (!v13)
        {
          v22 = 4294950804;
          goto LABEL_29;
        }
        dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
        dispatch_source_set_event_handler(*(dispatch_source_t *)(v1 + 96), DispatchSourceBlock);
        _Block_release(DispatchSourceBlock);
        dispatch_resume(*(dispatch_object_t *)(v1 + 96));
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(v1 + 32) = Mutable;
        if (Mutable)
        {
          Default = FVIOKit_VibePatternArrayCreateDefault(1.0);
          if (Default)
          {
            v18 = Default;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 32), CFSTR("hertz_millisecs"), Default);
            CFRelease(v18);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 32), CFSTR("repeat"), (const void *)*MEMORY[0x1E0C9AE40]);
            LODWORD(valuePtr.value) = 0;
            v19 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
            *(_QWORD *)(v1 + 40) = v19;
            if (v19)
            {
              CMTimeMake(&valuePtr, 20, 1000);
              *(CMTime *)(v1 + 48) = valuePtr;
              CMTimeMake(&valuePtr, 5000, 1000);
              *(CMTime *)(v1 + 72) = valuePtr;
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("VibeWillStop"), 0, 0, 1u);
              goto LABEL_24;
            }
          }
        }
      }
    }
    goto LABEL_45;
  }
  return FigSignalErrorAt();
}

uint64_t fvGetVibeSynthIsAvailable()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/AudioToolbox.framework/libVibeSynthEngine.dylib", 4);
  gVibeSynthDylibHandle = result;
  if (result)
  {
    result = (uint64_t)dlsym((void *)result, "VibeSynthEngineHasHardwareSupport");
    if (result)
    {
      result = ((uint64_t (*)(void))result)();
      gvVibeSynthIsAvailable = result;
      if ((_BYTE)result)
        return result;
      goto LABEL_4;
    }
    if (!gvVibeSynthIsAvailable)
    {
LABEL_4:
      result = dlclose((void *)gVibeSynthDylibHandle);
      gVibeSynthDylibHandle = 0;
    }
  }
  return result;
}

void FigVibratorPostNotification(const __CFString *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, a1, 0, 0, 1u);
}

uint64_t FigVibratorStopWithOptions(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!gFVInfo)
    return 4294950806;
  v2 = MEMORY[0x1940352F8](*(_QWORD *)gFVInfo);
  if ((_DWORD)v2)
    return v2;
  v3 = gFVInfo;
  if (!gvVibeSynthIsAvailable)
  {
    v4 = FVIOKit_StopVibrator(gFVInfo);
    v3 = gFVInfo;
    if ((_DWORD)v4)
      goto LABEL_15;
    if (*(_BYTE *)(gFVInfo + 112))
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v3 = gFVInfo;
      *(_BYTE *)(gFVInfo + 112) = 0;
      *(_BYTE *)(v3 + 192) = 0;
      if (*(_QWORD *)(v3 + 128))
      {
        CFRelease(*(CFTypeRef *)(v3 + 128));
        v3 = gFVInfo;
        *(_QWORD *)(gFVInfo + 128) = 0;
      }
      *(_QWORD *)(v3 + 216) = 0;
      *(_BYTE *)(v3 + 224) = 0;
      if (*(_QWORD *)(v3 + 200))
      {
        CFRelease(*(CFTypeRef *)(v3 + 200));
        v3 = gFVInfo;
        *(_QWORD *)(gFVInfo + 200) = 0;
      }
    }
    if (*(_BYTE *)(v3 + 104))
    {
      IOPMAssertionRelease(*(_DWORD *)(v3 + 108));
      v4 = 0;
      v3 = gFVInfo;
      *(_BYTE *)(gFVInfo + 104) = 0;
      *(_DWORD *)(v3 + 108) = 0;
      goto LABEL_15;
    }
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  if (!*(_DWORD *)(gFVInfo + 68))
    goto LABEL_14;
  v4 = (*(uint64_t (**)(uint64_t))(gFVInfo + 56))(a1);
  v3 = gFVInfo;
LABEL_15:
  MEMORY[0x194035304](*(_QWORD *)v3);
  return v4;
}

uint64_t FigVibratorStartPrewarm(int a1)
{
  _QWORD *v1;
  _BOOL4 v2;
  uint64_t result;
  uint64_t v4;

  if (!gvVibeSynthIsAvailable)
    return 0;
  v1 = (_QWORD *)gFVInfo;
  if (!gFVInfo)
    return 4294950806;
  v2 = !*(_BYTE *)(gFVInfo + 64) && !*(_BYTE *)(gFVInfo + 65);
  if (a1 != 1)
  {
    if (!a1)
      *(_BYTE *)(gFVInfo + 64) = 1;
    if (v2)
      goto LABEL_10;
    return 0;
  }
  *(_BYTE *)(gFVInfo + 65) = 1;
  if (!v2)
    return 0;
LABEL_10:
  result = MEMORY[0x1940352F8](*v1);
  if (!(_DWORD)result)
  {
    v4 = (*(uint64_t (**)(void))(gFVInfo + 32))();
    MEMORY[0x194035304](*(_QWORD *)gFVInfo);
    return v4;
  }
  return result;
}

uint64_t FigVibratorStopPrewarm(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (!gvVibeSynthIsAvailable)
    return 0;
  v1 = gFVInfo;
  if (!gFVInfo)
    return 4294950806;
  v2 = *(unsigned __int8 *)(gFVInfo + 64);
  if (!*(_BYTE *)(gFVInfo + 64) && !*(_BYTE *)(gFVInfo + 65))
    return 0;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      *(_BYTE *)(gFVInfo + 65) = 0;
    if (*(unsigned __int8 *)(v1 + 65) | v2)
      return 0;
  }
  else
  {
    *(_BYTE *)(gFVInfo + 64) = 0;
    if (*(_BYTE *)(v1 + 65))
      return result;
  }
  result = MEMORY[0x1940352F8](*(_QWORD *)v1);
  if (!(_DWORD)result)
  {
    v3 = (*(uint64_t (**)(void))(gFVInfo + 40))();
    MEMORY[0x194035304](*(_QWORD *)gFVInfo);
    return v3;
  }
  return result;
}

uint64_t FigVibratorPlayVibrationWithDictionary(CFDictionaryRef theDict, int a2, uint64_t a3, int a4, const void *a5, int a6, int a7, float a8)
{
  const __CFNumber *Value;
  float v17;
  uint64_t result;
  float v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  const __CFDictionary *v23;
  __int16 v24;
  float v25;
  uint64_t v26;
  float valuePtr;

  valuePtr = 1.0;
  if (!gFVInfo)
    return 4294950806;
  if (gvVibeSynthIsAvailable)
  {
    if (!theDict)
      return FigSignalErrorAt();
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Intensity"));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
      v17 = valuePtr;
      if (valuePtr <= 1.0)
      {
        if (valuePtr < 0.0)
        {
          valuePtr = 0.0;
          v17 = 0.0;
        }
        goto LABEL_8;
      }
      valuePtr = 1.0;
    }
    v17 = 1.0;
LABEL_8:
    if (a2)
    {
      v17 = v17 * a8;
      valuePtr = v17;
    }
    return FVSynthEngine_PlayVibrationWithPatternDictionary((uint64_t)theDict, a3, a4, a5, a6, a7, v17);
  }
  v26 = 0;
  v25 = 0.0;
  v24 = 0;
  v23 = 0;
  FVIOKit_GetVibrationPatternFromDictionary(theDict, (int *)&v26 + 1, (float *)&v26, &v25, &valuePtr, &v23, (char *)&v24 + 1, (char *)&v24);
  if (!(_BYTE)v24)
    v25 = 2678400.0;
  if (a2)
    valuePtr = valuePtr * a8;
  v19 = valuePtr;
  if (v23)
  {
    result = FVIOKit_PlayVibrationWithPattern(v23, a5, valuePtr);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    CMTimeMakeWithSeconds(&v22, v25, 1000);
    CMTimeMakeWithSeconds(&v21, *(float *)&v26, 1000);
    CMTimeMakeWithSeconds(&v20, *((float *)&v26 + 1), 1000);
    result = FVIOKit_PlayVibration(&v22, &v21, &v20, a5, v19);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

CFArrayRef vaeCreatePortListArrayFromPortID(int a1)
{
  const __CFAllocator *v1;
  CFArrayRef v2;
  int valuePtr;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v2 = CFArrayCreate(v1, (const void **)values, 1, MEMORY[0x1E0C9B378]);
  if (values[0])
    CFRelease(values[0]);
  return v2;
}

uint64_t vaeIsPortBluetoothShareable(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"usswbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      outData = 0;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData != 0;
      }
    }
  }
  return result;
}

CFTypeRef vaeCopyBluetoothShareablePortsForPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  CFTypeRef outData[23];

  outData[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  outData[0] = 0;
  if (!a1)
    return 0;
  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"gaswbolg";
  if (!AudioObjectHasProperty(a1, &inAddress))
    return 0;
  ioDataSize = 8;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (outData[0])
    {
      CFRelease(outData[0]);
      outData[0] = 0;
    }
  }
  if (dword_1EE2B3F38)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return outData[0];
}

CFTypeRef vaeCopyPersistentUID(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef result;
  UInt32 ioDataSize;
  CFTypeRef outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dippbolg";
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    return outData;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  result = outData;
  if (outData)
  {
    CFRelease(outData);
    return 0;
  }
  return result;
}

CFTypeRef vaeCopyModelUIDForPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef result;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  CFTypeRef outData[25];

  outData[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  outData[0] = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dimpbolg";
  inAddress.mElement = 0;
  ioDataSize = 8;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
    return outData[0];
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  result = outData[0];
  if (outData[0])
  {
    CFRelease(outData[0]);
    return 0;
  }
  return result;
}

BOOL vaeIsAvailableForVoicePrompts(_BOOL8 result)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (result)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6274627461;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortSupportRoutability(AudioObjectID a1)
{
  AudioObjectPropertyAddress v2;

  v2.mElement = 0;
  *(_QWORD *)&v2.mSelector = *(_QWORD *)"rsipbolg";
  return AudioObjectHasProperty(a1, &v2);
}

uint64_t vaeIsPortRoutable(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (!a1)
    return 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"rsipbolg";
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

uint64_t vaeGetPartnersForPort(AudioObjectID inObjectID, void *outData)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v7;

  result = 0;
  v7 = *MEMORY[0x1E0C80C00];
  if (inObjectID && outData)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"trppbolg";
    ioDataSize = 32;
    if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return ioDataSize >> 2;
    }
  }
  return result;
}

uint64_t vaePartnerRouteRoutable(uint64_t a1)
{
  uint64_t result;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  result = vaeGetPartnersForPort(a1, v3);
  if ((_DWORD)result)
    return vaeDoesBluetoothSupportFeature(a1) == 0;
  return result;
}

uint64_t vaeDoesPortSupportHighQualityBiDirectionalAudio(uint64_t result)
{
  return vaeDoesBluetoothSupportFeature(result);
}

uint64_t vaeGetSiblingsForPort(AudioObjectID inObjectID, void *outData)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v7;

  result = 0;
  v7 = *MEMORY[0x1E0C80C00];
  if (inObjectID && outData)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"bispbolg";
    ioDataSize = 32;
    if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return ioDataSize >> 2;
    }
  }
  return result;
}

uint64_t vaeSignalOwnershipIsTaken()
{
  if (getOwnershipCondition_onceToken != -1)
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
  objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "lock");
  if (getOwnershipCondition_onceToken != -1)
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
  objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "broadcast");
  if (getOwnershipCondition_onceToken != -1)
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
  return objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "unlock");
}

uint64_t vaeRequestOwnershipOnBTPort(uint64_t a1)
{
  const __CFAllocator *v2;
  const void *SInt64;
  int IsPortPresentInConnectedOutputPorts;
  NSObject *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectID A2DPPort;
  uint64_t result;
  NSObject *v9;
  unsigned int PartnersForPort;
  __CFArray *Mutable;
  uint64_t v12;
  AudioObjectPropertyAddress *p_valuePtr;
  CFNumberRef v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26[4];
  AudioObjectPropertyAddress valuePtr;
  AudioObjectPropertyAddress inAddress;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  IsPortPresentInConnectedOutputPorts = vaemIsPortPresentInConnectedOutputPorts((uint64_t)SInt64);
  if (SInt64)
    CFRelease(SInt64);
  if (!(_DWORD)a1)
  {
    valuePtr.mSelector = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_13:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954310;
  }
  *(_QWORD *)&inAddress.mSelector = 0x676C6F626F736163;
  inAddress.mElement = 0;
  if (!AudioObjectHasProperty(a1, &inAddress))
    goto LABEL_7;
  if (vaeGetBTPortOwnsSharedAudioConnection(a1))
  {
    if (!dword_1EE2B3F38)
      return 0;
LABEL_7:
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (!IsPortPresentInConnectedOutputPorts)
  {
    if (!dword_1EE2B3F38)
      return 4294954310;
    valuePtr.mSelector = 0;
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    goto LABEL_13;
  }
  if (vaeGetPortTypeFromPortID(a1) != 1885892674)
  {
    memset(&valuePtr, 0, 32);
    PartnersForPort = vaeGetPartnersForPort(a1, &valuePtr);
    Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
    if (PartnersForPort)
    {
      v12 = PartnersForPort;
      p_valuePtr = &valuePtr;
      do
      {
        if (p_valuePtr->mSelector)
        {
          v14 = CFNumberCreate(v2, kCFNumberSInt32Type, p_valuePtr);
          CFArrayAppendValue(Mutable, v14);
          if (v14)
            CFRelease(v14);
        }
        p_valuePtr = (AudioObjectPropertyAddress *)((char *)p_valuePtr + 4);
        --v12;
      }
      while (v12);
    }
    A2DPPort = cmsmGetA2DPPort(Mutable);
    if (dword_1EE2B3F38)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Mutable)
      CFRelease(Mutable);
    if (A2DPPort)
      goto LABEL_30;
    return 4294954310;
  }
  A2DPPort = a1;
LABEL_30:
  *(_QWORD *)&valuePtr.mSelector = 0x676C6F626F736163;
  valuePtr.mElement = 0;
  result = AudioObjectHasProperty(A2DPPort, &valuePtr);
  if ((_DWORD)result)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    if (getOwnershipCondition_onceToken != -1)
      dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
    objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "lock", v20, v23);
    *(_DWORD *)v26 = CMSMVAUtility_AudioObjectSetPropertyData();
    if (*(_DWORD *)v26)
    {
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (getOwnershipCondition_onceToken != -1)
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
      objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "unlock", v21, v24);
      return *(unsigned int *)v26;
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (getOwnershipCondition_onceToken != -1)
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
      v18 = objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "waitUntilDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", 6.0, v21, v24));
      if (dword_1EE2B3F38)
      {
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (getOwnershipCondition_onceToken != -1)
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_40);
      objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "unlock", v22, v25);
      if (v18)
        return 0;
      else
        return 4294954310;
    }
  }
  return result;
}

const __CFString *vaeGetOwnershipRequestReasonString(int a1)
{
  if ((a1 - 1) > 0x11)
    return CFSTR("Not defined yet");
  else
    return off_1E309D450[a1 - 1];
}

uint64_t vaeDoesBTPortSupportInEarDetection(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (!a1)
    return 0;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270696564;
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

uint64_t vaeHasUserEnabledInEarDetectionForBTPort(AudioObjectID a1)
{
  uint64_t result;
  AudioObjectPropertyAddress v3;

  result = vaeDoesBTPortSupportInEarDetection(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v3.mSelector = 0x676C6F6262746965;
    v3.mElement = 0;
    return AudioObjectHasProperty(a1, &v3) != 0;
  }
  return result;
}

BOOL vaeIsInEarStatusTrueForBTPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (!vaeDoesBTPortSupportInEarDetection(a1) || !a1)
    goto LABEL_6;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746965;
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    v3 = 0;
    return v3 != 0;
  }
  v3 = outData;
  return v3 != 0;
}

uint64_t vaeGetBTPortPrimaryBudInEarStatus(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  outData = 0;
  result = vaeDoesBTPortSupportInEarDetection(a1);
  if ((_DWORD)result)
  {
    if (a1)
    {
      *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746970;
      inAddress.mElement = 0;
      ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
        return outData;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t vaeGetBTPortSecondaryBudInEarStatus(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  outData = 0;
  result = vaeDoesBTPortSupportInEarDetection(a1);
  if ((_DWORD)result)
  {
    if (a1)
    {
      *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746973;
      inAddress.mElement = 0;
      ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
        return outData;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

__CFString *vaeGetBluetoothListeningModeString(unsigned int a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E309D4E0[a1];
}

__CFString *vaeGetBluetoothSpatialAudioModeString(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E309D508[a1];
}

uint64_t vaeGetBluetoothListeningMode(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"mtslbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

uint64_t vaeGetBluetoothSpatialAudioMode(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dmpsbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

BOOL vaeDoesPortSupportStereoHFP(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (!a1)
    goto LABEL_6;
  inAddress.mElement = 0;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"pshsbolg";
  if (!AudioObjectHasProperty(a1, &inAddress))
    goto LABEL_6;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    v3 = 0;
    return v3 != 0;
  }
  v3 = outData;
  return v3 != 0;
}

uint64_t vaeGetSupportedBluetoothListeningModes(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"smslbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

CFStringRef vaeCopyLocalizedString(CFStringRef key)
{
  if (vaeCopyLocalizedString_kCMSession_LoadVirtualAudioBundleOnce != -1)
    dispatch_once(&vaeCopyLocalizedString_kCMSession_LoadVirtualAudioBundleOnce, &__block_literal_global_72_0);
  return CFBundleCopyLocalizedString((CFBundleRef)vaeCopyLocalizedString_bundleRef, key, key, CFSTR("Localizable"));
}

BOOL vaeDoesPortSupportHeadTrackedSpatialAudio(AudioObjectID a1)
{
  AudioObjectPropertyAddress v2;

  v2.mElement = 0;
  *(_QWORD *)&v2.mSelector = *(_QWORD *)"nepsbolg";
  return AudioObjectHasProperty(a1, &v2) != 0;
}

uint64_t vaeIsHeadTrackedSpatialAudioActive(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"nepsbolg";
  inAddress.mElement = 0;
  result = AudioObjectHasProperty(a1, &inAddress);
  if ((_DWORD)result)
  {
    ioDataSize = 4;
    outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortAllowHeadTrackedSpatialAudio(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"shpsbolg";
  inAddress.mElement = 0;
  result = AudioObjectHasProperty(a1, &inAddress);
  if ((_DWORD)result)
  {
    ioDataSize = 4;
    outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortSupportSecureMicrophone(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  int outData;
  AudioObjectPropertyAddress inAddress;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"smcsbolg";
  inAddress.mElement = 0;
  result = AudioObjectHasProperty(a1, &inAddress);
  if ((_DWORD)result)
  {
    ioDataSize = 4;
    outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeIsPortAnInputPort(uint64_t a1)
{
  int PortTypeFromPortID;
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  result = 1;
  if (PortTypeFromPortID > 1886614632)
  {
    if (PortTypeFromPortID > 1886680168)
    {
      if (PortTypeFromPortID == 1886680169)
        return result;
      v4 = 1886745449;
    }
    else
    {
      if (PortTypeFromPortID == 1886614633)
        return result;
      v4 = 1886675561;
    }
  }
  else
  {
    if (PortTypeFromPortID > 1886216819)
    {
      if (PortTypeFromPortID == 1886216820)
        return result;
      v3 = 30569;
    }
    else
    {
      if (PortTypeFromPortID == 1885564781)
        return result;
      v3 = 25193;
    }
    v4 = v3 | 0x706D0000;
  }
  if (PortTypeFromPortID != v4)
    return 0;
  return result;
}

uint64_t vaeSetPortAvailableForVoicePrompts(uint64_t result, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  Boolean outIsSettable;
  unsigned int v4;
  AudioObjectPropertyAddress inAddress;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  outIsSettable = 1;
  if ((_DWORD)result)
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6274627461;
    inAddress.mElement = 0;
    AudioObjectIsPropertySettable(result, &inAddress, &outIsSettable);
    if (outIsSettable)
    {
      result = CMSMVAUtility_AudioObjectSetPropertyData();
      v4 = result;
      if ((_DWORD)result)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v4;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t vaeSetBTLowLatencyMode(AudioObjectID a1, int a2)
{
  uint64_t result;
  AudioObjectPropertyAddress v3;
  int v4;

  v3.mElement = 0;
  v4 = a2;
  *(_QWORD *)&v3.mSelector = *(_QWORD *)"lltbbolg";
  result = AudioObjectHasProperty(a1, &v3);
  if ((_DWORD)result)
    return CMSMVAUtility_AudioObjectSetPropertyData();
  return result;
}

float vaeGetDestinationVolumeScalarFactor(double a1, float a2)
{
  double v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  double outData;
  _QWORD inQualifierData[23];

  inQualifierData[22] = *MEMORY[0x1E0C80C00];
  *(double *)inQualifierData = a1;
  v2 = a2;
  outData = a2;
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"fsvdbolg";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress))
  {
    ioDataSize = 8;
    if (AudioObjectGetPropertyData(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), &inAddress, 8u, inQualifierData, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      return outData;
    }
  }
  return v2;
}

uint64_t vaeMakePortRoutable(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef PortListArrayFromPortID;
  uint64_t ArrayOfPortsRoutable;

  PortListArrayFromPortID = vaeCreatePortListArrayFromPortID(a1);
  ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(PortListArrayFromPortID, a2, a3, a4, 0);
  if (PortListArrayFromPortID)
    CFRelease(PortListArrayFromPortID);
  return ArrayOfPortsRoutable;
}

BOOL vaeCopyIfBluetoothEndpointSupportsConversationDetect(AudioObjectID a1)
{
  CFTypeRef v2;
  const void *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  _BOOL8 v6;
  int v7;
  CFTypeRef cf;

  cf = 0;
  if (!MX_FeatureFlags_IsConversationDetectSupported())
    return 0;
  vaeCopyDeviceIdentifierFromVADPort(a1);
  v2 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
  if (v2)
  {
    v3 = v2;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v5)
      v5(CMBaseObject, CFSTR("SupportsConversationDetect"), *MEMORY[0x1E0C9AE00], &cf);
    v7 = FigCFEqual();
    CFRelease(v3);
  }
  else
  {
    v7 = FigCFEqual();
  }
  v6 = v7 != 0;
  if (cf)
    CFRelease(cf);
  return v6;
}

BOOL vaeCopyIfBluetoothEndpointHasConversationDetectEnabled(AudioObjectID a1)
{
  CFTypeRef v2;
  const void *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  _BOOL8 v6;
  int v7;
  CFTypeRef cf;

  cf = 0;
  if (!MX_FeatureFlags_IsConversationDetectSupported())
    return 0;
  vaeCopyDeviceIdentifierFromVADPort(a1);
  v2 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
  if (v2)
  {
    v3 = v2;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v5)
      v5(CMBaseObject, CFSTR("ConversationDetectEnable"), *MEMORY[0x1E0C9AE00], &cf);
    v7 = FigCFEqual();
    CFRelease(v3);
  }
  else
  {
    v7 = FigCFEqual();
  }
  v6 = v7 != 0;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t vaeGetBluetoothCallScreeningStatus(uint64_t result)
{
  AudioObjectID v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if ((_DWORD)result)
  {
    v1 = result;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"sslcbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

uint64_t vaeUpdateBluetoothCallScreeningStatus(uint64_t result, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  AudioObjectPropertyAddress inAddress;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if ((_DWORD)result)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"sslcbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      v5 = CMSMVAUtility_AudioObjectSetPropertyData();
      if (v5)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v5;
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t vaeAddInEarBluetoothStatusListenerForPort(AudioObjectID a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t result;
  NSObject *v5;
  AudioObjectPropertyAddress inAddress;
  OSStatus v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746965;
  inAddress.mElement = 0;
  v7 = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmInEarBluetoothStatusListener, 0);
  if (v7)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746970;
  inAddress.mElement = 0;
  v7 = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmPrimaryBudInEarBluetoothStatusListener, 0);
  if (v7)
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6262746973;
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmSecondaryBudInEarBluetoothStatusListener, 0);
  v7 = result;
  if ((_DWORD)result)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddOwnsSharedAudioConnectionListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"casobolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmOwnsSharedAudioConnectionListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddSharedAudioConnectionFailedListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"fcasbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmSharedAudioConnectionFailedListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothListeningModeListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"mtslbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothListeningModeListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSharingAggregationListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"gaswbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSharingAggregationListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioEnabledListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"nepsbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioEnabledListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioUserEnableFeatureListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"shpsbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioUserEnableFeatureListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioModeListenerForPort(AudioObjectID a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  AudioObjectPropertyAddress inAddress;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dmpsbolg";
  inAddress.mElement = 0;
  result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioModeListener, 0);
  v3 = result;
  if ((_DWORD)result)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigVAEndpointCreate(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;

  if (!a3)
    return FigSignalErrorAt();
  FigVAEndpointGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
    *a3 = 0;
  }
  return v5;
}

_DWORD *FigVAEndpointDisassociatePort()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  *result = 0;
  return result;
}

id __getOwnershipCondition_block_invoke()
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CB3530]);
  getOwnershipCondition_sOwnershipCondition = (uint64_t)result;
  return result;
}

void __vaeCopyLocalizedString_block_invoke()
{
  const __CFAllocator *v0;
  CFBundleRef v1;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  vaeCopyLocalizedString_bundleUrl = (uint64_t)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("/Library/Audio/Plug-Ins/HAL/VirtualAudio.plugin"), kCFURLPOSIXPathStyle, 1u);
  v1 = CFBundleCreate(v0, (CFURLRef)vaeCopyLocalizedString_bundleUrl);
  vaeCopyLocalizedString_bundleRef = (uint64_t)v1;
  if (v1)
    CFRetain(v1);
  if (vaeCopyLocalizedString_bundleUrl)
    CFRelease((CFTypeRef)vaeCopyLocalizedString_bundleUrl);
}

void _VAEndpoint_Finalize()
{
  const void *v0;

  v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0)
    CFRelease(v0);
}

__CFString *_VAEndpoint_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  unsigned int *DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVAEndpoint %p %d>"), a1, *DerivedStorage);
  return Mutable;
}

uint64_t _VAEndpoint_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t result;
  uint64_t v6;
  CFTypeID v7;
  CFMutableStringRef v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v10;
  CFTypeID v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  CFMutableStringRef v18;
  int IsPortActiveForCurrentRouteConfiguration;
  unsigned int PortTypeFromPortID;
  id v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  __CFString *VADNameForVADID;
  CFTypeID v26;
  CFTypeID v27;
  _BOOL4 v28;
  CFTypeID v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  __CFString *v33;
  CFTypeID v34;
  int Value;
  CFTypeRef v36;
  const void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  unsigned int v44;
  AudioObjectPropertyAddress valuePtr;
  os_log_type_t v46[4];
  os_log_type_t type[4];
  int v48;
  const char *v49;
  __int16 v50;
  _BYTE v51[10];
  _BYTE v52[10];
  uint64_t v53;
  _QWORD v54[17];

  v54[16] = *MEMORY[0x1E0C80C00];
  result = 4294950586;
  if (a2 && a3)
  {
    v6 = *(unsigned int *)CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4320]))
    {
      v7 = CFGetTypeID(a3);
      if (v7 != CFNumberGetTypeID())
        return 4294950586;
      valuePtr.mSelector = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
      v8 = CMSMUtility_CopyCurrentRouteTypesAsCFString();
      if (dword_1EE2B3F38)
      {
        LODWORD(v42) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v40, v41), "defaultVADID");
      vaemSetDeviceVolumeIfNotSet(v17, 0, v8, 0, *(float *)&valuePtr.mSelector, 0.0, 0.0);
      if (!v8)
        return 0;
      v18 = v8;
LABEL_25:
      CFRelease(v18);
      return 0;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
    {
      v10 = CFGetTypeID(a3);
      if (v10 != CFNumberGetTypeID())
        return 0;
      LODWORD(v42) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v42);
      if (vaeIsPortBluetoothShareable(v6)
        && CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
      {
        CMSMVAUtility_SetVolumePreferenceForPort((uint64_t)CFSTR("Audio/Video"), CFSTR("Default"), v6, *(float *)&v42);
      }
      if (!vaeIsPortWHAGroupable(v6))
        return 0;
      IsPortActiveForCurrentRouteConfiguration = vaeIsPortActiveForCurrentRouteConfiguration(v6);
      *(_QWORD *)&valuePtr.mSelector = 0;
      MEMORY[0x1940352BC](gCMSM);
      PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory")), 0, &valuePtr, 0);
      MEMORY[0x1940352C8](gCMSM);
      if (!IsPortActiveForCurrentRouteConfiguration || !FigCFEqual())
        CMSMVAUtility_SetVolumePreferenceForPort((uint64_t)CFSTR("Audio/Video"), CFSTR("Default"), v6, *(float *)&v42);
      CMSMVAUtility_SetCurrentPreferredVolume(*(float *)&v42);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(v6);
      v21 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
      if (dword_1EE2B3F38)
      {
        *(_DWORD *)type = 0;
        v46[0] = OS_LOG_TYPE_DEFAULT;
        v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v23 = *(_DWORD *)type;
        if (os_log_type_enabled(v22, v46[0]))
          v24 = v23;
        else
          v24 = v23 & 0xFFFFFFFE;
        if (v24)
        {
          VADNameForVADID = CMSMUtility_GetVADNameForVADID(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
          v48 = 136315906;
          v49 = "_VAEndpoint_SetProperty";
          v50 = 2114;
          *(_QWORD *)v51 = VADNameForVADID;
          *(_WORD *)&v51[8] = 2114;
          *(_QWORD *)v52 = v21;
          *(_WORD *)&v52[8] = 2114;
          v53 = *(_QWORD *)&valuePtr.mSelector;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v21)
        CFRelease(v21);
      v18 = *(CFMutableStringRef *)&valuePtr.mSelector;
      if (!*(_QWORD *)&valuePtr.mSelector)
        return 0;
      goto LABEL_25;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4308]))
    {
      v11 = CFGetTypeID(a3);
      if (v11 != CFNumberGetTypeID())
        return 0;
      v42 = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v42);
      *(_DWORD *)type = v42;
      if (!(_DWORD)v6)
        return 0;
      valuePtr.mElement = 0;
      *(_QWORD *)&valuePtr.mSelector = *(_QWORD *)"mtslbolg";
      result = AudioObjectHasProperty(v6, &valuePtr);
      if (!(_DWORD)result)
        return result;
      v12 = CMSMVAUtility_AudioObjectSetPropertyData();
      *(_DWORD *)v46 = v12;
      if (!v12)
      {
        if (dword_1EE2B3F38)
        {
          v44 = 0;
          v43 = OS_LOG_TYPE_DEFAULT;
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v31 = v44;
          if (os_log_type_enabled(v30, v43))
            v32 = v31;
          else
            v32 = v31 & 0xFFFFFFFE;
          if (v32)
          {
            if (*(_DWORD *)type > 4u)
              v33 = 0;
            else
              v33 = off_1E309D4E0[*(int *)type];
            v48 = 136315394;
            v49 = "vaeSetBluetoothListeningMode";
            v50 = 2114;
            *(_QWORD *)v51 = v33;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      v13 = v12;
      v44 = 0;
      v43 = OS_LOG_TYPE_DEFAULT;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v15 = v44;
      if (os_log_type_enabled(v14, v43))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if (v16)
      {
        v48 = 136315906;
        v49 = "vaeSetBluetoothListeningMode";
        v50 = 1024;
        *(_DWORD *)v51 = v13;
        *(_WORD *)&v51[4] = 1042;
        *(_DWORD *)&v51[6] = 4;
        *(_WORD *)v52 = 2082;
        *(_QWORD *)&v52[2] = v46;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return *(unsigned int *)v46;
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]))
      {
        v26 = CFGetTypeID(a3);
        if (v26 == CFBooleanGetTypeID())
        {
          CFBooleanGetValue((CFBooleanRef)a3);
          vaemSetFullMute();
        }
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4100]))
      {
        v27 = CFGetTypeID(a3);
        if (v27 == CFBooleanGetTypeID())
        {
          v28 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
          vaeSetBluetoothSpatialAudioUserEnableFeature(v6, v28);
        }
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4248]))
      {
        v29 = CFGetTypeID(a3);
        if (v29 == CFNumberGetTypeID())
        {
          v54[0] = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, v54);
          return vaeSetBluetoothSpatialAudioMode(v6, v54[0]);
        }
        return 0;
      }
      result = CFEqual(a2, CFSTR("ConversationDetectEnable"));
      if ((_DWORD)result)
      {
        v34 = CFGetTypeID(a3);
        if (v34 != CFBooleanGetTypeID())
          return 0;
        if (MX_FeatureFlags_IsConversationDetectSupported()
          && (Value = CFBooleanGetValue((CFBooleanRef)a3),
              vaeCopyDeviceIdentifierFromVADPort(v6),
              (v36 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager()) != 0))
        {
          v37 = v36;
          v38 = (uint64_t *)MEMORY[0x1E0C9AE50];
          if (!Value)
            v38 = (uint64_t *)MEMORY[0x1E0C9AE40];
          v39 = FigEndpointSetProperty((uint64_t)v36, (uint64_t)CFSTR("ConversationDetectEnable"), *v38);
          CFRelease(v37);
          return v39;
        }
        else
        {
          return 4294954311;
        }
      }
    }
  }
  return result;
}

uint64_t vaeIsPortActiveForCurrentRouteConfiguration(int a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;

  v2 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1E30A4C28);
  if (!v2)
    return 0;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_6:
    v7 = 0;
  }
  else
  {
    v5 = Count;
    v6 = 0;
    while (CMSMVAUtility_GetPortAtIndex(v3, v6) != a1)
    {
      if (v5 == ++v6)
        goto LABEL_6;
    }
    v7 = 1;
  }
  CFRelease(v3);
  return v7;
}

uint64_t vaeSetBluetoothSpatialAudioUserEnableFeature(uint64_t result, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioObjectPropertyAddress inAddress;
  int v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if ((_DWORD)result)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"shpsbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      result = CMSMVAUtility_AudioObjectSetPropertyData();
      v4 = result;
      if ((_DWORD)result || dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return result;
}

uint64_t vaeSetBluetoothSpatialAudioMode(uint64_t result, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  AudioObjectPropertyAddress inAddress;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if ((_DWORD)result)
  {
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"dmpsbolg";
    result = AudioObjectHasProperty(result, &inAddress);
    if ((_DWORD)result)
    {
      v5 = CMSMVAUtility_AudioObjectSetPropertyData();
      if (v5)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v5;
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigEndpointSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t _VAEndpoint_ActivateWithCompletionCallback(uint64_t a1, uint64_t a2, const void *a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a5)
{
  unsigned int *DerivedStorage;
  uint64_t v11;
  unsigned int *v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t NumberOfCurrentOutputPorts;
  uint64_t CurrentOutputPortAtIndex;
  void *ControllingRoutingSession;
  const __CFAllocator *v22;
  const void *v23;
  __CFArray *v24;
  __CFArray *v25;
  __CFArray *v26;
  NSObject *v27;
  NSObject *v28;
  __CFArray *Mutable;
  const void *SInt64;
  const void *v31;
  NSObject *v32;
  NSObject *valuea;
  void *value;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v11 = *DerivedStorage;
  if (!(_DWORD)v11)
    return 4294950573;
  v12 = DerivedStorage;
  v13 = (const void *)*((_QWORD *)DerivedStorage + 1);
  *((_QWORD *)DerivedStorage + 1) = a3;
  if (a3)
    CFRetain(a3);
  if (v13)
    CFRelease(v13);
  v14 = *((_QWORD *)v12 + 3) + 1;
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = v14;
  if (a3)
  {
    v15 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA3770]);
    CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA3750]);
  }
  else
  {
    v15 = 0;
  }
  if (!FigCFEqual() || !vaeIsPortBluetoothShareable(v11))
    goto LABEL_19;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  v16 = NumberOfCurrentOutputPorts;
  if (!(_DWORD)NumberOfCurrentOutputPorts)
    goto LABEL_20;
  if ((_DWORD)NumberOfCurrentOutputPorts == 1)
  {
    CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    if (vaeIsPortBluetoothShareable(CurrentOutputPortAtIndex))
    {
      if (dword_1EE2B3F38)
      {
        valuea = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(valuea, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      SInt64 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, SInt64);
      if (SInt64)
        CFRelease(SInt64);
      v31 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, v31);
      if (v31)
        CFRelease(v31);
      v16 = vaeRequestOwnershipOnBTPort(v11);
      if ((_DWORD)v16)
      {
        if (dword_1EE2B3F38)
        {
          v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        vaemAggregatePorts((uint64_t)Mutable, 1, 0, (uint64_t)v15);
      }
      if (!Mutable)
        goto LABEL_20;
      v26 = Mutable;
      goto LABEL_53;
    }
LABEL_19:
    ControllingRoutingSession = CMSMUtility_GetControllingRoutingSession();
    v16 = vaeRouteToSelectedPort(v11, ControllingRoutingSession, v15);
    goto LABEL_20;
  }
  if (!CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    if (dword_1EE2B3F38)
    {
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = 0;
    goto LABEL_20;
  }
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMSMUtility_GetCurrentOutputPortAtIndex(1);
  v23 = (const void *)FigCFNumberCreateSInt64();
  value = (void *)FigCFNumberCreateSInt64();
  v24 = CFArrayCreateMutable(v22, 0, MEMORY[0x1E0C9B378]);
  v25 = v24;
  if (v23)
    CFArrayAppendValue(v24, v23);
  if (value)
    CFArrayAppendValue(v25, value);
  if (vaeGetBTPortOwnsSharedAudioConnection(v11))
  {
    vaemAggregatePorts((uint64_t)v25, 1, 1, (uint64_t)v15);
    v16 = 0;
  }
  else
  {
    v16 = vaeRequestOwnershipOnBTPort(v11);
    if ((_DWORD)v16)
    {
      if (dword_1EE2B3F38)
      {
        v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      vaemAggregatePorts((uint64_t)v25, 1, 0, (uint64_t)v15);
    }
  }
  if (value)
    CFRelease(value);
  if (v23)
    CFRelease(v23);
  if (v25)
  {
    v26 = v25;
LABEL_53:
    CFRelease(v26);
  }
LABEL_20:
  if (a4)
    a4(a1, a2, *((_QWORD *)v12 + 3), v16, a5);
  return v16;
}

uint64_t _VAEndpoint_DeactivateWithCompletionCallback(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t), uint64_t a4)
{
  unsigned int *DerivedStorage;
  uint64_t v9;
  const void *Value;
  const void *v11;
  uint64_t v12;
  uint64_t PortRoutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t NumberOfCurrentOutputPorts;
  const __CFAllocator *v17;
  __CFArray *MutableCopy;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const void *SInt64;
  CFTypeRef cf;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v9 = *DerivedStorage;
  if (a2)
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3958]);
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3960]);
    v11 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3950]);
  }
  else
  {
    Value = 0;
    v11 = (const void *)*MEMORY[0x1E0C9AE40];
  }
  v12 = FigCFEqual();
  if (v11 != (const void *)*MEMORY[0x1E0C9AE50] || !vaeIsPortBluetoothShareable(v9))
    goto LABEL_5;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  PortRoutable = NumberOfCurrentOutputPorts;
  if ((_DWORD)NumberOfCurrentOutputPorts)
  {
    if ((_DWORD)NumberOfCurrentOutputPorts == 1)
    {
      if (CMSMUtility_GetCurrentOutputPortAtIndex(0) != (_DWORD)v9)
        goto LABEL_35;
LABEL_5:
      PortRoutable = vaeMakePortRoutable(v9, 0, v12, (uint64_t)Value);
      goto LABEL_6;
    }
    if (!CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
    {
      if (dword_1EE2B3F38)
      {
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_35;
    }
    if ((_DWORD)PortRoutable != 2
      || CMSMUtility_GetCurrentOutputPortAtIndex(0) != (_DWORD)v9
      && CMSMUtility_GetCurrentOutputPortAtIndex(1) != (_DWORD)v9)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      PortRoutable = 4294954315;
      goto LABEL_6;
    }
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    PortRoutable = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    cf = (CFTypeRef)FigCFNumberCreateSInt64();
    CFArrayAppendValue((CFMutableArrayRef)PortRoutable, cf);
    MutableCopy = CFArrayCreateMutableCopy(v17, 0, (CFArrayRef)PortRoutable);
    if (CMSMUtility_GetCurrentOutputPortAtIndex(0) == (_DWORD)v9)
    {
      if (CMSMUtility_GetCurrentOutputPortAtIndex(1) == (_DWORD)v9)
        goto LABEL_29;
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
    CMSMUtility_GetCurrentOutputPortAtIndex(v19);
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(MutableCopy, SInt64);
    if (SInt64)
      CFRelease(SInt64);
LABEL_29:
    vaemDeaggregatePorts((uint64_t)MutableCopy, PortRoutable, v12, (uint64_t)Value);
    if (cf)
      CFRelease(cf);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (PortRoutable)
    {
      CFRelease((CFTypeRef)PortRoutable);
LABEL_35:
      PortRoutable = 0;
    }
  }
LABEL_6:
  if (a3)
    a3(a1, *((_QWORD *)DerivedStorage + 2), *((_QWORD *)DerivedStorage + 3), PortRoutable, a4);
  return PortRoutable;
}

uint64_t vaeRouteToSelectedPort(uint64_t a1, void *a2, const void *a3)
{
  NSDictionary *v6;
  NSString *v7;
  CFTypeRef v8;
  int PortTypeFromPortID;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const void *v12;
  void *v13;
  void *v14;
  const void *v15;
  __CFArray *v16;
  uint64_t v17;
  NSDictionary *v18;
  NSString *v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t CurrentInputPortAtIndex;
  NSObject *v25;
  const __CFArray *Count;
  const __CFArray *v28;
  id v29;
  const __CFArray *v30;
  int IsOnenessEnabled;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v33;
  NSDictionary *v34;
  NSDictionary *v35;
  uint64_t PortRoutable;
  const __CFArray *v37;
  int v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  __CFArray *ArrayFromPortID;
  __CFArray *Routable;
  __CFArray *Mutable;
  CFTypeRef v46;
  const void *v47;
  NSString *v48;
  BOOL v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  const __CFArray *v54;
  void *v55;
  void *v56;
  int ConnectionTypeForPort;
  NSDictionary *v58;
  id v59;
  CFTypeRef cf;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  AudioObjectPropertyAddress inAddress;
  _BYTE v66[128];
  uint64_t v67;
  CFRange v68;
  CFRange v69;

  v67 = *MEMORY[0x1E0C80C00];
  v6 = (NSDictionary *)CMSMUtility_CopyNonNullCurrentlyActiveCategory();
  v7 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
  v8 = CMSMUtility_CopyCurrentAllowedPortTypes();
  ConnectionTypeForPort = vaeGetConnectionTypeForPort(a1);
  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  if (v8)
  {
    VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v6);
    VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v7);
    if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
    {
      if (a2)
        v15 = (const void *)objc_msgSend(a2, "activationContext");
      else
        v15 = 0;
      v14 = (void *)cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v15, v8, 0, 0x1E30A4C28);
    }
    else
    {
      if (a2)
        v12 = (const void *)objc_msgSend(a2, "activationContext");
      else
        v12 = 0;
      v14 = (void *)cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, v8, 0, 0x1E30A4C28);
    }
    v23 = v14;
    if (objc_msgSend(v14, "count"))
      LODWORD(v17) = objc_msgSend((id)objc_msgSend(v23, "firstObject"), "unsignedIntValue");
    else
      LODWORD(v17) = 0;

    v16 = 0;
  }
  else
  {
    if (a2)
      v13 = (void *)objc_msgSend(a2, "activationContext");
    else
      v13 = 0;
    v16 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v6, (uint64_t)v7, v13, 0);
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v17 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v61, v66, 16);
    if (v17)
    {
      v55 = a2;
      v18 = v6;
      v19 = v7;
      v20 = *(_QWORD *)v62;
      while (2)
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v62 != v20)
            objc_enumerationMutation(v16);
          v22 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend(v22, "objectForKey:", CFSTR("PortNumber")), "unsignedIntValue") == (_DWORD)a1)
          {
            if (objc_msgSend((id)objc_msgSend(v22, "objectForKey:", CFSTR("RouteType")), "isEqualToString:", CFSTR("Default")))LODWORD(v17) = a1;
            else
              LODWORD(v17) = 0;
            goto LABEL_25;
          }
        }
        v17 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v61, v66, 16);
        if (v17)
          continue;
        break;
      }
LABEL_25:
      v7 = v19;
      v6 = v18;
      v8 = 0;
      a2 = v55;
    }
  }
  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)&cf);
  if (!FigCFEqual())
  {
    if ((_DWORD)v17 != (_DWORD)a1 && ConnectionTypeForPort == 1885561449)
    {
      if (!a2
        || (v33 = vaeGetPortTypeFromPortID(a1),
            (v34 = (NSDictionary *)CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v33)) == 0))
      {
LABEL_61:
        PortRoutable = 0;
        goto LABEL_114;
      }
      v35 = v34;
      PortRoutable = MXCoreSessionSetProperty(a2, CFSTR("OverrideRoute"), v34, 0);
      v37 = (const __CFArray *)v35;
      goto LABEL_113;
    }
    Count = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsActive, 0);
    v28 = Count;
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (!Count && v8)
    {
      CFRelease(v8);
      v8 = 0;
    }
    if (v28)
      CFRelease(v28);
    v29 = cmsmCopyQuiesceableWiredPortsForRouteConfiguration(v6, (uint64_t)v7, v8);
    v30 = cmsmCopyWirelessPortsArrayForRouteConfiguration(v6, (uint64_t)v7, v8);
    IsOnenessEnabled = MX_FeatureFlags_IsOnenessEnabled();
    if (ConnectionTypeForPort != 1885544823 || IsOnenessEnabled && PortTypeFromPortID == 1885565807)
    {
      if (vaeIsQuiesceableWiredPort(a1))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        -[MXSessionManager setQuiesceableWiredPortPreference:autoRouteOnConnect:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v52, v53), "setQuiesceableWiredPortPreference:autoRouteOnConnect:", a1, 1);
        PortRoutable = vaeMakePortRoutable(a1, 1, 1, (uint64_t)a3);
        if ((_DWORD)PortRoutable)
        {
          v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (v30 && CFArrayGetCount(v30))
          PortRoutable = cmsmUnpickWirelessRoutes(v30, 0, 1, (uint64_t)a3);
        else
          PortRoutable = 0;
        if (objc_msgSend(v29, "count"))
          cmsmUnpickQuiesceableWiredPortsRoutes(v29, 1, (uint64_t)a3, 1);
      }
      goto LABEL_109;
    }
    if (dword_1EE2B3F38)
    {
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if ((_DWORD)a1
      && (*(_QWORD *)&inAddress.mSelector = 0x676C6F626F736163,
          inAddress.mElement = 0,
          AudioObjectHasProperty(a1, &inAddress)))
    {
      PortRoutable = vaeRequestOwnershipOnBTPort(a1);
      if ((_DWORD)PortRoutable)
      {
LABEL_109:
        if (objc_msgSend((id)objc_msgSend(a2, "overridePortsList", v52, v53), "count"))
          PortRoutable = MXCoreSessionSetProperty(a2, CFSTR("OverrideRoute"), 0, 0);

        if (!v30)
          goto LABEL_114;
        v37 = v30;
LABEL_113:
        CFRelease(v37);
        goto LABEL_114;
      }
      v54 = v30;
      v58 = v6;
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(a1);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Routable && CFArrayGetCount(Routable) >= 1)
      {
        v68.length = CFArrayGetCount(Routable);
        v68.location = 0;
        CFArrayAppendArray(Mutable, Routable, v68);
      }
      if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
      {
        v69.length = CFArrayGetCount(ArrayFromPortID);
        v69.location = 0;
        CFArrayAppendArray(Mutable, ArrayFromPortID, v69);
      }
      PortRoutable = (uint64_t)vaemMakeArrayOfPortsRoutable(Mutable, 1, 1, a3, 0);
      if (Mutable)
        CFRelease(Mutable);
      if (Routable)
        CFRelease(Routable);
      v6 = v58;
      if (ArrayFromPortID)
        CFRelease(ArrayFromPortID);
      v30 = v54;
    }
    else
    {
      PortRoutable = vaeMakePortRoutable(a1, 1, 1, (uint64_t)a3);
    }
    if (!(_DWORD)PortRoutable)
    {
      if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
      {
        v59 = v29;
        v46 = FigRoutingManagerCopyActivatedCarPlayEndpoint(qword_1EE2B3CF0);
        *(_QWORD *)&inAddress.mSelector = 0;
        if (v46)
        {
          v47 = v46;
          v56 = a2;
          v48 = v7;
          FigEndpointCopyProperty((uint64_t)v46, *MEMORY[0x1E0CA4460], *MEMORY[0x1E0C9AE00], (uint64_t)&inAddress);
          if (FigCFEqual())
            v49 = dword_1EE2B3CC8 == 0;
          else
            v49 = 1;
          v50 = v49;
          if (*(_QWORD *)&inAddress.mSelector)
          {
            CFRelease(*(CFTypeRef *)&inAddress.mSelector);
            *(_QWORD *)&inAddress.mSelector = 0;
          }
          CFRelease(v47);
          if ((v50 & 1) != 0)
            PortRoutable = 0;
          else
            PortRoutable = vaeMakePortRoutable(dword_1EE2B3CC8, 0, 1, (uint64_t)a3);
          v7 = v48;
          a2 = v56;
        }
        else
        {
          PortRoutable = 0;
        }
        v29 = v59;
      }
      else
      {
        PortRoutable = 0;
      }
    }
    goto LABEL_109;
  }
  CurrentInputPortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  if (dword_1EE2B3F38)
  {
    v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((objc_msgSend(a2, "hasInput", v52, v53) & 1) != 0)
  {
    v38 = vaeGetConnectionTypeForPort(CurrentInputPortAtIndex);
    v39 = vaeGetConnectionTypeForPort(a1);
    if ((_DWORD)CurrentInputPortAtIndex != (_DWORD)a1 && (v38 == 1885544823 || v39 == 1885561449))
      vaeMakeSiblingPortsRoutable(CurrentInputPortAtIndex, 0, a3);
    vaeMakeSiblingPortsRoutable(a1, 1, a3);
    vaemUpdateSystemHasAudioInputDeviceState();
    goto LABEL_61;
  }
  v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  PortRoutable = 4294954296;
LABEL_114:
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  return PortRoutable;
}

void vaeMakeSiblingPortsRoutable(uint64_t a1, int a2, const void *a3)
{
  int SiblingsForPort;
  id v7;
  uint64_t i;
  int HasProperty;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  AudioObjectPropertyAddress inAddress;
  _DWORD outData[10];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(outData, 0, 32);
  SiblingsForPort = vaeGetSiblingsForPort(a1, outData);
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1));
  if (SiblingsForPort)
  {
    for (i = 0; i != SiblingsForPort; ++i)
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", outData[i]));
    if ((_DWORD)a1)
    {
      *(_QWORD *)&inAddress.mSelector = 0x676C6F626F736163;
      inAddress.mElement = 0;
      HasProperty = AudioObjectHasProperty(a1, &inAddress);
      if (a2)
      {
        if (HasProperty)
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeRequestOwnershipOnBTPort(outData[0]);
        }
      }
    }
  }
  if (dword_1EE2B3F38)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemMakeArrayOfPortsRoutable((const __CFArray *)v7, a2, 1, a3, 0);

}

uint64_t CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer()
{
  uint64_t result;
  NSObject *v1;

  result = CMSMDeviceState_ItsAniPhone();
  if ((_DWORD)result)
  {
    result = CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected();
    if ((_DWORD)result)
    {
      result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
      if (!(_DWORD)result)
      {
        CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer();
        v1 = MXGetSerialQueue();
        result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v1, 15.0, (uint64_t)&__block_literal_global_41, 0, 0);
        sAutomaticOwnershipTransferToPhoneTimer = result;
      }
    }
  }
  return result;
}

void CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer()
{
  if (sAutomaticOwnershipTransferToPhoneTimer)
  {
    dispatch_source_cancel((dispatch_source_t)sAutomaticOwnershipTransferToPhoneTimer);
    if (sAutomaticOwnershipTransferToPhoneTimer)
    {
      dispatch_release((dispatch_object_t)sAutomaticOwnershipTransferToPhoneTimer);
      sAutomaticOwnershipTransferToPhoneTimer = 0;
    }
  }
}

BOOL CMSM_IDSServer_IsAutomaticOwnershipTransferToPhoneTimerCreated()
{
  return sAutomaticOwnershipTransferToPhoneTimer != 0;
}

void CMSM_IDSServer_Initialize()
{
  if (!gIDSServer)
    gIDSServer = objc_alloc_init(CMSM_IDSServer);
  sAutomaticOwnershipTransferToPhoneTimer = 0;
}

uint64_t cmsm_IDSServer_ProcessBTDeviceConnectionStatusChangedMessage(const __CFDictionary *a1)
{
  _BOOL8 v1;

  v1 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey) == (const void *)*MEMORY[0x1E0C9AE50];
  return CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToRemote(v1);
}

void cmsm_IDSServer_ProcessRemotePlayingInfoQueryMessage()
{
  __CFArray *v0;

  v0 = CMSMUtility_CopyPlayingSessionsInfo();
  CMSM_IDSClient_ReplyToRemote_PlayingInfo(v0);
  if (v0)
    CFRelease(v0);
}

void cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage(const __CFDictionary *a1)
{
  const void *Value;
  const void *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  _QWORD v7[5];

  CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer();
  Value = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_AllPlayingSessionsKey);
  v3 = Value;
  if (Value)
    CFRetain(Value);
  v4 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v3;
  MXDispatchAsync((uint64_t)"cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage", (uint64_t)"CMSessionManager_IDSServer.m", 140, 0, 0, v4, (uint64_t)v7);
  v5 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey);
  CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(v5 == (const void *)*MEMORY[0x1E0C9AE50]);
  CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(1);
  CMSM_IDSConnection_ResetWaitingForGizmoPlayingInfo();
  v6 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey);
  CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(v6);
  if (v5 == (const void *)*MEMORY[0x1E0C9AE40] || !v3 && CMSMDeviceState_ItsAniPhone())
    CMSM_IDSConnection_RouteToSharedAudioRouteUponReceivingOwnership();
}

void cmsm_IDSServer_ProcessLocalIsPlayingStartMessage(const __CFDictionary *a1)
{
  const __CFDictionary *Value;
  const __CFDictionary *v3;
  const __CFNumber *v4;
  const __CFArray *RemotePlayingInfo;
  const __CFArray *v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v9;
  _BOOL8 v10;
  const void *v11;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_PlayingSessionKey);
  if (Value)
  {
    v3 = Value;
    v4 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("CMSessionID"));
    RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
    if (RemotePlayingInfo && (v6 = RemotePlayingInfo, CFArrayGetCount(RemotePlayingInfo) >= 1))
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
        if (ValueAtIndex)
        {
          v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CMSessionID"));
          if (CFNumberCompare(v4, v9, 0) == kCFCompareEqualTo)
            break;
        }
        if (++v7 >= CFArrayGetCount(v6))
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      CMSM_IDSConnection_AddRemotePlayingInfo(v3);
    }
    v10 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey) == (const void *)*MEMORY[0x1E0C9AE50];
    CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(v10);
    v11 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey);
    CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(v11);
  }
  if (CMSMDeviceState_ItsAniPhone())
    CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer();
}

uint64_t cmsm_IDSServer_ProcessLocalIsPlayingDoneMessage(const __CFDictionary *a1)
{
  const __CFDictionary *Value;
  const __CFNumber *v2;
  const __CFArray *RemotePlayingInfo;
  const __CFArray *v4;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v7;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_PlayingSessionKey);
  if (Value)
  {
    v2 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("CMSessionID"));
    RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
    if (RemotePlayingInfo)
    {
      v4 = RemotePlayingInfo;
      if (CFArrayGetCount(RemotePlayingInfo) >= 1)
      {
        v5 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v5);
          if (ValueAtIndex)
          {
            v7 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CMSessionID"));
            if (CFNumberCompare(v2, v7, 0) == kCFCompareEqualTo)
              break;
          }
          if (++v5 >= CFArrayGetCount(v4))
            return CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
        }
        CMSM_IDSConnection_RemoveRemotePlayingInfo(v5);
      }
    }
  }
  return CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
}

uint64_t cmsm_IDSServer_ProcessLocalIsDoingEndInterruption(const __CFDictionary *a1)
{
  const __CFString *Value;

  Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_LocalEndInterruptionStatusKey);
  return CMSM_IDSConnection_DeactivateIDSMXCoreSession(Value);
}

void cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress(const __CFDictionary *a1)
{
  const void *Value;
  const void *v3;
  NSObject *v4;
  _QWORD v5[6];

  Value = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_SharedAudioRouteMacAddress);
  v3 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_ClearSharedAudioRoute);
  if (Value)
    CFRetain(Value);
  v4 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = Value;
  v5[5] = v3;
  MXDispatchAsync((uint64_t)"cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress", (uint64_t)"CMSessionManager_IDSServer.m", 530, 0, 0, v4, (uint64_t)v5);
}

uint64_t PowerManager_SetCPMSSupportedForHaptics(uint64_t result)
{
  sCMSMPowerManagerForHaptics_0 = result;
  return result;
}

uint64_t PowerManager_InitializeCPMSForHaptics()
{
  uint64_t v0;
  void *v1;
  void *v2;
  int v3;
  void *v4;
  CFMutableDictionaryRef PowerBudgetRequestDict;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  os_log_type_t v28[8];
  os_log_type_t type;
  os_log_type_t v30[4];
  id v31;
  int v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((sCMSMPowerManagerForHaptics_1 & 1) != 0)
    return 0;
  sCMSMPowerManagerForHaptics_2 = objc_msgSend(MEMORY[0x1E0D09930], "sharedCPMSAgent");
  if (!sCMSMPowerManagerForHaptics_2)
    return 4294954510;
  sCMSMPowerManagerForHaptics_5 = vaemCopyCPMSPowerBudgetRangeInMilliWatts(6);
  if (sCMSMPowerManagerForHaptics_5)
  {
    *(_QWORD *)v28 = 0;
    v1 = (void *)sCMSMPowerManagerForHaptics_2;
    v2 = (void *)objc_opt_new();
    objc_msgSend(v2, "setClientId:", 6);
    objc_msgSend(v2, "setPowerLevels:", sCMSMPowerManagerForHaptics_5);
    objc_msgSend(v2, "setIsContinuous:", 1);
    objc_msgSend(v2, "setNotificationCallback:", &__block_literal_global_4_1);
    objc_msgSend(v2, "setGetCurrentPower:", &__block_literal_global_42);
    objc_msgSend(v2, "setPowerBudgetUpdateMinimumPeriod:", 10);
    objc_msgSend(v2, "setPowerBudgetUpdateMinimumPeriod:", 1000);
    v3 = sCMSMPowerManagerForHaptics_1;
    if ((sCMSMPowerManagerForHaptics_1 & 1) == 0)
    {
      if (!objc_msgSend(v1, "registerClientWithDescription:error:", v2, v28))
      {
        v0 = 4294954513;
        goto LABEL_33;
      }
      sCMSMPowerManagerForHaptics_1 = 1;
    }
    v31 = 0;
    v4 = (void *)sCMSMPowerManagerForHaptics_2;
    PowerBudgetRequestDict = PowerManager_CreatePowerBudgetRequestDict((const __CFDictionary *)sCMSMPowerManagerForHaptics_5, 1);
    if (PowerBudgetRequestDict)
    {
      v6 = PowerBudgetRequestDict;
      v7 = objc_msgSend(v4, "copyPowerBudgetForRequest:forClient:error:", PowerBudgetRequestDict, 6, &v31);
      if (v7)
      {
        v8 = v7;
        if (sCMSMPowerManagerForHaptics_6)
          CFRelease((CFTypeRef)sCMSMPowerManagerForHaptics_6);
        sCMSMPowerManagerForHaptics_6 = v8;
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)v30 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v10 = *(_DWORD *)v30;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v11 = v10;
          else
            v11 = v10 & 0xFFFFFFFE;
          if (v11)
          {
            v32 = 136315394;
            v33 = "powerManager_RequestPowerBudgetFromCPMSForHapticsResource";
            v34 = 2114;
            v35 = sCMSMPowerManagerForHaptics_6;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRelease(v6);
        v0 = PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(6, (void *)sCMSMPowerManagerForHaptics_2, sCMSMPowerManagerForHaptics_6);
        if ((v3 & 1) == 0)
          goto LABEL_39;
        goto LABEL_33;
      }
      *(_DWORD *)v30 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v13 = *(_DWORD *)v30;
      if (os_log_type_enabled(v12, type))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if (v14)
      {
        v15 = objc_msgSend(v31, "description");
        v32 = 136315394;
        v33 = "powerManager_RequestPowerBudgetFromCPMSForHapticsResource";
        v34 = 2114;
        v35 = v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v6);
    }
    LODWORD(v31) = 0;
    v30[0] = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v17 = v31;
    if (os_log_type_enabled(v16, v30[0]))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if (v18)
    {
      v32 = 136315138;
      v33 = "powerManager_RequestInitialBudgetFromCPMSForHapticsResource";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v0 = 4294954510;
    if (!v3)
    {
LABEL_39:

      if (sCMSMPowerManagerForHaptics_6)
      {
        if ((_DWORD)v0 != -12783)
          return v0;
        goto LABEL_41;
      }
      return 4294954510;
    }
LABEL_33:
    LODWORD(v31) = 0;
    v30[0] = OS_LOG_TYPE_DEFAULT;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v20 = v31;
    if (os_log_type_enabled(v19, v30[0]))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if (v21)
    {
      v22 = objc_msgSend(*(id *)v28, "description");
      v32 = 136315394;
      v33 = "powerManager_RequestInitialBudgetFromCPMSForHapticsResource";
      v34 = 2114;
      v35 = v22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
LABEL_41:
  LODWORD(v31) = 0;
  v28[0] = OS_LOG_TYPE_DEFAULT;
  v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v24 = v31;
  if (os_log_type_enabled(v23, v28[0]))
    v25 = v24;
  else
    v25 = v24 & 0xFFFFFFFE;
  if (v25)
  {
    v26 = objc_msgSend(0, "description");
    v32 = 136315394;
    v33 = "PowerManager_InitializeCPMSForHaptics";
    v34 = 2114;
    v35 = v26;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954513;
}

void sub_19371FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FVSynthEngine_PlayVibrationWithPatternDictionary(uint64_t a1, uint64_t a2, int a3, const void *a4, int a5, int a6, float a7)
{
  BOOL v8;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, _QWORD *, float);
  uint64_t v21;
  _QWORD v23[18];

  v23[16] = *MEMORY[0x1E0C80C00];
  if (!gFVInfo)
    return 4294950806;
  v8 = a7 < 0.0 || a7 > 1.0;
  if (!v8 && a1)
  {
    v15 = MEMORY[0x1940352F8](*(_QWORD *)gFVInfo);
    if ((_DWORD)v15)
      return v15;
    v16 = gFVInfo;
    v17 = (a3 != 0) | (2 * (a5 != 0));
    if (a6)
      v18 = v17 | 4;
    else
      v18 = v17;
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
      CFRetain(a4);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, float))(v16 + 48);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = __FVSynthEngine_StartVibrationWithPattern_block_invoke;
    v23[3] = &__block_descriptor_tmp_3;
    v23[4] = a4;
    v21 = v20(a1, a2, v18, v23, a7);
    if ((_DWORD)v21)
    {
      if (a4)
        CFRelease(a4);
    }
    else
    {
      ++*(_DWORD *)(gFVInfo + 68);
      if (*(_BYTE *)(v16 + 20))
      {
        notify_set_state(*(_DWORD *)(v16 + 16), 1uLL);
        notify_post("com.apple.coremedia.vibration");
      }
      FigVibratorPostNotification(CFSTR("VibeWillStart"));
    }
    MEMORY[0x194035304](*(_QWORD *)gFVInfo);
    return v21;
  }
  return FigSignalErrorAt();
}

void FVSynthEngine_SendVibeStoppedNotification(uint64_t a1, void *a2)
{
  CFDictionaryRef v3;
  NSObject *v4;
  _QWORD v5[6];
  void *values;

  values = a2;
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigVibratorNotificationKey_VibeStopped_Context, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = *(NSObject **)(a1 + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __FVSynthEngine_SendVibeStoppedNotification_block_invoke;
  v5[3] = &__block_descriptor_tmp_9;
  v5[4] = a1;
  v5[5] = v3;
  MXDispatchAsync((uint64_t)"FVSynthEngine_SendVibeStoppedNotification", (uint64_t)"FigVibrator_VibeSynthEngine.c", 135, 0, 0, v4, (uint64_t)v5);
}

void sub_193722028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFDictionary *copyMeasuredHDMILatencyFromDisk()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;

  v0 = (const __CFDictionary *)CFPreferencesCopyValue(CFSTR("measuredHDMILatency"), CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  v1 = v0;
  if (v0
    && (!CFDictionaryContainsKey(v0, CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz"))
     || !CFDictionaryContainsKey(v1, CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz"))
     || !CFDictionaryContainsKey(v1, CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz"))
     || !CFDictionaryContainsKey(v1, CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz"))))
  {
    CFRelease(v1);
    return 0;
  }
  return v1;
}

uint64_t HDMILatencyMgr_UpdateMeasuredHDMILatency(CFDictionaryRef theDict)
{
  _QWORD v3[5];

  if (!MXHDMILatencyManagerState)
    return 4294954510;
  if (!theDict
    || !CFDictionaryContainsKey(theDict, CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz"))
    || !CFDictionaryContainsKey(theDict, CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz"))
    || !CFDictionaryContainsKey(theDict, CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz"))
    || !CFDictionaryContainsKey(theDict, CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz")))
  {
    return 4294954516;
  }
  CFRetain(theDict);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __HDMILatencyMgr_UpdateMeasuredHDMILatency_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = theDict;
  MXDispatchAsync((uint64_t)"HDMILatencyMgr_UpdateMeasuredHDMILatency", (uint64_t)"HDMILatencyManager.m", 248, 0, 0, MXHDMILatencyManagerState, (uint64_t)v3);
  return 0;
}

uint64_t updateMeasuredHDMILatencyOnCoreAnimationAndHAL()
{
  double HDMILatencyForCurrentRefreshRate;
  double v1;
  uint64_t result;

  HDMILatencyForCurrentRefreshRate = getHDMILatencyForCurrentRefreshRate(0, *(double *)&qword_1EE2B3FE8);
  FigCFDictionarySetDouble();
  if (!DisplayModeRefreshRateObserver_UpdateHDMILatencyOnCoreAnimation())
    qword_1EE2B3FF8 = *(_QWORD *)&HDMILatencyForCurrentRefreshRate;
  v1 = getHDMILatencyForCurrentRefreshRate(1, *(double *)&qword_1EE2B3FE8);
  FigCFDictionarySetDouble();
  result = vaemSetHDMILatencyOverride((v1 * 1000000.0));
  if (!(_DWORD)result)
    qword_1EE2B3FF0 = *(_QWORD *)&v1;
  return result;
}

uint64_t writeMeasuredHDMILatencyToDisk(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3FC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("measuredHDMILatency"), a1);
  MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("measuredHDMILatencyForCurrentRefreshRate"), (const void *)qword_1EE2B3FE0);
  return notify_post("com.apple.mediaexperience.measuredhdmilatencychanged");
}

uint64_t HDMILatencyMgr_UpdateCurrentRefreshRate(double a1)
{
  _QWORD v2[5];

  if (!MXHDMILatencyManagerState)
    return 4294954510;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __HDMILatencyMgr_UpdateCurrentRefreshRate_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  *(double *)&v2[4] = a1;
  MXDispatchAsync((uint64_t)"HDMILatencyMgr_UpdateCurrentRefreshRate", (uint64_t)"HDMILatencyManager.m", 268, 0, 0, MXHDMILatencyManagerState, (uint64_t)v2);
  return 0;
}

uint64_t HDMILatencyMgr_CopyMeasuredHDMILatency()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  if (MXHDMILatencyManagerState)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __HDMILatencyMgr_CopyMeasuredHDMILatency_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    MXDispatchSync((uint64_t)"HDMILatencyMgr_CopyMeasuredHDMILatency", (uint64_t)"HDMILatencyManager.m", 297, 0, 0, MXHDMILatencyManagerState, (uint64_t)v2);
    v0 = v4[3];
  }
  else
  {
    v0 = 0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1937230F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double getHDMILatencyForCurrentRefreshRate(int a1, double a2)
{
  unsigned int v3;
  double ValueDouble;
  const __CFDictionary *v7;
  const __CFString *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = llround(a2);
  if (v3 - 24 > 6 || qword_1EE2B3FD8 == 0)
  {
    ValueDouble = 0.0;
    if (v3 - 50 > 0xA || qword_1EE2B3FD8 == 0)
      goto LABEL_17;
    FigCFDictionarySetDouble();
    v7 = (const __CFDictionary *)qword_1EE2B3FD8;
    if (a1)
      v8 = CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz");
    else
      v8 = CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz");
  }
  else
  {
    FigCFDictionarySetDouble();
    v7 = (const __CFDictionary *)qword_1EE2B3FD8;
    if (a1)
      v8 = CFSTR("MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz");
    else
      v8 = CFSTR("MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz");
  }
  ValueDouble = MXCFDictionaryGetValueDouble(v7, v8);
LABEL_17:
  if (dword_1EE2B3FC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return ValueDouble;
}

uint64_t FigRoutingContextRemoteCreateAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(4uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCreateVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v4;
  _QWORD v6[5];

  v4 = routingContext_create(5uLL, a2, 0, a3);
  if (!(_DWORD)v4)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingContextRemoteCreateVideoContext_block_invoke;
    v6[3] = &__block_descriptor_40_e5_v8__0l;
    v6[4] = a3;
    MXDispatchSync((uint64_t)"FigRoutingContextRemoteCreateVideoContext", (uint64_t)"FigRoutingContextRemoteXPC.m", 1846, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v6);
  }
  return v4;
}

uint64_t FigRoutingContextRemoteCreatePerAppSecondDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(6uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCopySystemRemoteDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xDuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySystemMirroringContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(2uLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySidePlayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xBuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCreateRemoteMusicControllerContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(8uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCopySystemRemotePoolContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(9uLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySystemAudioInputContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xCuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCreateControlChannelOnlyContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(7uLL, a2, 0, a3);
}

uint64_t FigRoutingRemoteCopyDisplayMenuVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xAuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopyAllAudioContexts(CFArrayRef *a1)
{
  const __CFAllocator *v2;
  const __CFArray *Mutable;
  uint64_t v4;
  uint64_t v5;
  CFArrayRef v6;
  uint64_t v8;
  uint64_t v9;
  CFArrayRef theArray;

  if (!a1)
    return 4294955276;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = 0;
  theArray = 0;
  v8 = 0;
  v4 = routingContextRemoteXPC_EnsureClientEstablished();
  if ((_DWORD)v4
    || (v4 = FigXPCCreateBasicMessage(), (_DWORD)v4)
    || (v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v4))
  {
    v5 = v4;
    if (!Mutable)
      goto LABEL_11;
  }
  else
  {
    v5 = FigXPCMessageCopyCFArray();
    v6 = theArray;
    if (!(_DWORD)v5)
    {
      v5 = 0;
      *a1 = CFArrayCreateCopy(v2, Mutable);
      v6 = theArray;
    }
    if (v6)
    {
      CFRelease(v6);
      theArray = 0;
    }
    if (!Mutable)
      goto LABEL_11;
  }
  CFRelease(Mutable);
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void remoteXPCRoutingContext_DeadConnectionCallback(void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  NSObject *v9;
  const __CFArray *v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t context;
  uint64_t *p_context;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  CFRange v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 72);
  *(_BYTE *)DerivedStorage = 1;
  v4 = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  LODWORD(context) = -16722;
  v5 = *(NSObject **)(v4 + 16);
  v6 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = __remoteXPCRoutingContext_runAllCallbacks_block_invoke;
  v15 = &unk_1E3098D88;
  v16 = &v23;
  v17 = (uint64_t *)v4;
  MXDispatchSync((uint64_t)"remoteXPCRoutingContext_runAllCallbacks", (uint64_t)"FigRoutingContextRemoteXPC.m", 230, 0, 0, v5, (uint64_t)&v12);
  CFDictionaryApplyFunction((CFDictionaryRef)v24[3], (CFDictionaryApplierFunction)remoteXPCRoutingContext_runOneCallback, &context);
  v7 = (const void *)v24[3];
  if (v7)
    CFRelease(v7);
  _Block_object_dispose(&v23, 8);
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  context = 0;
  p_context = &context;
  v21 = 0x2020000000;
  v22 = 0;
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(NSObject **)(v8 + 40);
  v12 = v6;
  v13 = 3221225472;
  v14 = __remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures_block_invoke;
  v15 = &unk_1E309C7E0;
  v17 = &context;
  v18 = v8;
  v16 = &v23;
  MXDispatchSync((uint64_t)"remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures", (uint64_t)"FigRoutingContextRemoteXPC.m", 155, 0, 0, v9, (uint64_t)&v12);
  v10 = (const __CFArray *)v24[3];
  v27.length = CFArrayGetCount(v10);
  v27.location = 0;
  CFArrayApplyFunction(v10, v27, (CFArrayApplierFunction)remoteXPCRoutingContext_notifyAboutCommChannelClosure, a1);
  CFDictionaryApplyFunction((CFDictionaryRef)p_context[3], (CFDictionaryApplierFunction)remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID, a1);
  CFRelease((CFTypeRef)v24[3]);
  CFRelease((CFTypeRef)p_context[3]);
  _Block_object_dispose(&context, 8);
  _Block_object_dispose(&v23, 8);
  if (v3)
  {
    CFRetain(v3);
    v11[0] = v6;
    v11[1] = 3221225472;
    v11[2] = __remoteXPCRoutingContext_DeadConnectionCallback_block_invoke;
    v11[3] = &__block_descriptor_40_e5_v8__0l;
    v11[4] = v3;
    MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_DeadConnectionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 507, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v11);
  }
}

void sub_1937239D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t remoteXPCFigRoutingContext_NotificationFilter(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v8;
  BOOL v9;
  int v10;
  const void *v11;
  BOOL v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("didReceiveData")))
  {
    if (a4)
    {
      Value = CFDictionaryGetValue(a4, CFSTR("commChannelUUID"));
      v8 = CFDictionaryGetValue(a4, CFSTR("deviceID"));
      if (Value)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
      {
        v13 = *(NSObject **)(DerivedStorage + 40);
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke;
        v20[3] = &__block_descriptor_56_e5_v8__0l;
        v20[4] = DerivedStorage;
        v20[5] = Value;
        v20[6] = v8;
        v14 = v20;
        v15 = 416;
LABEL_19:
        MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_NotificationFilter", (uint64_t)"FigRoutingContextRemoteXPC.m", v15, 0, 0, v13, (uint64_t)v14);
        return 0;
      }
      if (Value)
      {
        v13 = *(NSObject **)(DerivedStorage + 40);
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_2;
        v19[3] = &__block_descriptor_48_e5_v8__0l;
        v19[4] = DerivedStorage;
        v19[5] = Value;
        v14 = v19;
        v15 = 427;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v10 = CFEqual(a2, CFSTR("commChannelDidClose"));
    if (a4 && v10)
    {
      v11 = CFDictionaryGetValue(a4, CFSTR("commChannelUUID"));
      if (CFDictionaryGetValue(a4, CFSTR("deviceID")))
        v12 = v11 == 0;
      else
        v12 = 1;
      if (!v12)
      {
        v13 = *(NSObject **)(DerivedStorage + 40);
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 3221225472;
        v18[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_3;
        v18[3] = &__block_descriptor_48_e5_v8__0l;
        v18[4] = DerivedStorage;
        v18[5] = v11;
        v14 = v18;
        v15 = 443;
        goto LABEL_19;
      }
      if (v11)
      {
        v13 = *(NSObject **)(DerivedStorage + 40);
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_4;
        v17[3] = &__block_descriptor_48_e5_v8__0l;
        v17[4] = DerivedStorage;
        v17[5] = v11;
        v14 = v17;
        v15 = 450;
        goto LABEL_19;
      }
    }
  }
  return 0;
}

uint64_t remoteXPCFigRoutingContext_HandleClientMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void sub_193723E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __remoteXPCRoutingContext_runAllCallbacks_block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24));
}

uint64_t remoteXPCRoutingContext_runOneCallback(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t result;

  if (a2)
  {
    v3 = *a2;
    if (*a2 == 1668246893 || (v3 != 1935959652 ? (v4 = v3 == 1684108385) : (v4 = 1), v4))
    {
      v5 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))a2[2];
      if (v5)
        return v5(a2[1], a2[3], *a3, a2[4]);
    }
  }
  return result;
}

void __remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures_block_invoke(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(a1[6] + 56));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1[6] + 56));
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = CFDictionaryCreateCopy(v2, *(CFDictionaryRef *)(a1[6] + 64));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1[6] + 64));
}

void remoteXPCRoutingContext_notifyAboutCommChannelClosure(void *a1, uint64_t a2)
{
  CFDictionaryRef v3;
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD v6[6];
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("commChannelUUID");
  values = a1;
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3)
    CFRetain(v3);
  v5 = *(NSObject **)(DerivedStorage + 48);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __remoteXPCRoutingContext_notifyAboutCommChannelClosure_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = a2;
  v6[5] = v3;
  MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_notifyAboutCommChannelClosure", (uint64_t)"FigRoutingContextRemoteXPC.m", 123, 0, 0, v5, (uint64_t)v6);
  CFRelease(v3);
}

void remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID(void *a1, void *a2, uint64_t a3)
{
  CFDictionaryRef v4;
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD v7[6];
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("deviceID");
  keys[1] = CFSTR("commChannelUUID");
  values[0] = a2;
  values[1] = a1;
  v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v4)
    CFRetain(v4);
  v6 = *(NSObject **)(DerivedStorage + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a3;
  v7[5] = v4;
  MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 142, 0, 0, v6, (uint64_t)v7);
  if (v4)
    CFRelease(v4);
}

void __remoteXPCRoutingContext_notifyAboutCommChannelClosure_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __remoteXPCRoutingContext_handleCompletionCallback_block_invoke(uint64_t a1)
{
  _OWORD *Value;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  const void *v8;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24), *(const void **)(a1 + 48));
  if (Value)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = *Value;
    v5 = Value[1];
    *(_QWORD *)(v3 + 64) = *((_QWORD *)Value + 4);
    *(_OWORD *)(v3 + 32) = v4;
    *(_OWORD *)(v3 + 48) = v5;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(const void **)(v6 + 40);
    if (v7)
    {
      CFRetain(v7);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    v8 = *(const void **)(v6 + 56);
    if (v8)
      CFRetain(v8);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24), *(const void **)(a1 + 48));
}

_OWORD *remoteXPCRoutingContext_cloneCompletionCallback(const __CFAllocator *a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  const void *v6;
  const void *v7;

  v3 = CFAllocatorAllocate(a1, 40, 0);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  *v3 = *(_OWORD *)a2;
  v3[1] = v5;
  *((_QWORD *)v3 + 4) = v4;
  v6 = (const void *)*((_QWORD *)v3 + 1);
  if (v6)
    CFRetain(v6);
  v7 = (const void *)*((_QWORD *)v3 + 3);
  if (v7)
    CFRetain(v7);
  return v3;
}

void remoteXPCRoutingContext_freeCompletionCallback(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)ptr[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)ptr[3];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t routingContextRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  result = remoteXPCRoutingContext_GetObjectID(a1, &v2);
  if (!(_DWORD)result)
    return FigXPCSendStdSetPropertyMessage();
  return result;
}

uint64_t routingContextRemoteXPC_SelectRoute(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      if (!a2)
      {
LABEL_6:
        FigXPCMessageSetCFDictionary();
        ObjectID = FigXPCRemoteClientSendSyncMessage();
        goto LABEL_7;
      }
      ObjectID = FigEndpointXPCRemoteGetObjectID();
      if (!(_DWORD)ObjectID)
      {
        xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  v4 = ObjectID;
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptor(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetCFDictionary();
      FigXPCMessageSetCFDictionary();
      v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_CopyRoute(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
        ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
    }
  }
  v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_CopySelectedRouteDescriptor(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCMessageCopyCFDictionary();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_SelectRoutes(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFTypeID v10;
  uint64_t ObjectID;
  CFIndex v12;
  xpc_object_t v13;
  CFIndex i;
  uint64_t v15;
  uint64_t v17;
  uint64_t value;

  v17 = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        if (!ValueAtIndex)
          break;
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != FigEndpointGetTypeID())
          break;
        if (v7 == ++v8)
          goto LABEL_7;
      }
      ObjectID = FigSignalErrorAt();
      goto LABEL_20;
    }
  }
LABEL_7:
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v17);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
LABEL_20:
    v15 = ObjectID;
    goto LABEL_24;
  }
  routes_logEndpoints(theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    value = 0;
    v12 = CFArrayGetCount(theArray);
    v13 = xpc_array_create(0, 0);
    if (v13 && v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        if (!CFArrayGetValueAtIndex(theArray, i))
          break;
        if (FigEndpointXPCRemoteGetObjectID())
          break;
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, value);
      }
    }
    if (v13)
      xpc_dictionary_set_value(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList, v13);
  }
  if (a3)
    FigXPCMessageSetCFDictionary();
  v15 = FigXPCRemoteClientSendSyncMessage();
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptors(uint64_t a1, const __CFArray *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      if (a2 && CFArrayGetCount(a2))
        FigXPCMessageSetCFArray();
      FigXPCMessageSetCFDictionary();
      ObjectID = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v4 = ObjectID;
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_CopyRoutes(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;
  xpc_object_t xdict;
  uint64_t v8;

  xdict = 0;
  v8 = 0;
  v6 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    xpc_dictionary_get_value(xdict, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList);
    v4 = FigEndpointXPCRemoteRetainCopiedEndpointsFromArrayToCFArray();
    if (!(_DWORD)v4)
    {
      routes_logEndpoints(0);
      *a2 = 0;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_CopySelectedRouteForRemoteControl(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
        ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
    }
  }
  v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_AddToSelectedRoutes(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (a2)
  {
    ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigEndpointXPCRemoteGetObjectID();
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
          FigXPCMessageSetCFDictionary();
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v3 = ObjectID;
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_AddToSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
LABEL_7:
    v3 = ObjectID;
    goto LABEL_5;
  }
  v3 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v3)
  {
    FigXPCMessageSetCFDictionary();
    FigXPCMessageSetCFDictionary();
    v3 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_RemoveFromSelectedRoutes(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (a2)
  {
    ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigEndpointXPCRemoteGetObjectID();
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
          FigXPCMessageSetCFDictionary();
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v3 = ObjectID;
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_RemoveFromSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
LABEL_7:
    v3 = ObjectID;
    goto LABEL_5;
  }
  v3 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v3)
  {
    FigXPCMessageSetCFDictionary();
    FigXPCMessageSetCFDictionary();
    v3 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_CreateCommChannel(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  CMBaseObjectGetDerivedStorage();
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (FigXPCMessageSetCFDictionary(), ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageCopyCFString(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = 0;
    *a3 = v10;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t routingContextRemoteXPC_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v13 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v13);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v10 = ObjectID;
    goto LABEL_13;
  }
  v10 = FigXPCCreateBasicMessage();
  if ((_DWORD)v10)
  {
LABEL_13:
    FigXPCRelease();
    return v10;
  }
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFData();
  if (a4)
  {
    v11 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v11[2] = a4;
    v11[3] = a2;
    v11[4] = a5;
    *v11 = 1684108385;
    v11[1] = a1;
  }
  else
  {
    v11 = 0;
  }
  v10 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v11);
  FigXPCRelease();
  if (v11)
    free(v11);
  return v10;
}

uint64_t routingContextRemoteXPC_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t ObjectID;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[7];
  uint64_t v11;

  v11 = 0;
  v10[6] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_8:
    v7 = ObjectID;
    goto LABEL_6;
  }
  v5 = DerivedStorage;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  v7 = FigXPCRemoteClientSendSyncMessage();
  if (!(_DWORD)v7)
  {
    v8 = *(NSObject **)(v5 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __routingContextRemoteXPC_CloseCommChannel_block_invoke;
    v10[3] = &__block_descriptor_48_e5_v8__0l;
    v10[4] = v5;
    v10[5] = a2;
    MXDispatchSync((uint64_t)"routingContextRemoteXPC_CloseCommChannel", (uint64_t)"FigRoutingContextRemoteXPC.m", 813, 0, 0, v8, (uint64_t)v10);
  }
LABEL_6:
  FigXPCRelease();
  return v7;
}

uint64_t routingContextRemoteXPC_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  if (a2)
  {
    if (!remoteXPCRoutingContext_GetObjectID(a1, &v13) && !FigXPCCreateBasicMessage())
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFDictionary();
      if (a4)
      {
        v10 = a4;
        v11 = a5;
        *(_QWORD *)&v9 = 1668246893;
        *((_QWORD *)&v9 + 1) = a1;
      }
      remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, v12, (uint64_t *)&v9);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigXPCRelease();
  return 0;
}

uint64_t routingContextRemoteXPC_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t ObjectID;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v20 = 0;
  if (*(_DWORD *)(DerivedStorage + 80) != 9)
    return 4294955271;
  if (a2)
  {
    v8 = DerivedStorage;
    v17 = 0;
    v18 = 0;
    ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v17);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || (FigXPCMessageSetCFDictionary(),
          FigXPCMessageSetCFString(),
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          (_DWORD)ObjectID)
      || (ObjectID = FigXPCMessageCopyCFString(), (_DWORD)ObjectID))
    {
      v12 = ObjectID;
    }
    else
    {
      v10 = v18;
      if (v18)
      {
        v11 = *(NSObject **)(v8 + 40);
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __routingContextRemoteXPC_CreateCommChannelForDeviceID_block_invoke;
        v16[3] = &__block_descriptor_56_e5_v8__0l;
        v16[4] = v8;
        v16[5] = v18;
        v16[6] = a2;
        MXDispatchSync((uint64_t)"routingContextRemoteXPC_CreateCommChannelForDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 682, 0, 0, v11, (uint64_t)v16);
        v10 = v18;
      }
      v12 = 0;
      *a4 = v10;
    }
    v13 = v20;
    if (v20)
    {
      v20 = 0;
      xpc_release(v13);
    }
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  v14 = v19;
  if (v19)
  {
    v19 = 0;
    xpc_release(v14);
  }
  return v12;
}

uint64_t routingContextRemoteXPC_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectID;
  uint64_t v13;
  xpc_object_t v14;
  uint64_t v16;
  xpc_object_t object;

  object = 0;
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) != 9)
  {
    a4 = 0;
    v13 = 4294955271;
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_14;
  if (!a4)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_14:
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  v16 = 0;
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v16);
  if ((_DWORD)ObjectID)
  {
LABEL_15:
    v13 = ObjectID;
    a4 = 0;
    goto LABEL_13;
  }
  v13 = FigXPCCreateBasicMessage();
  v14 = object;
  if ((_DWORD)v13)
  {
    a4 = 0;
    if (!object)
      goto LABEL_13;
    goto LABEL_12;
  }
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFData();
  if (a5)
  {
    a4 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    a4[2] = a5;
    a4[3] = a3;
    a4[4] = a6;
    *a4 = 1935959652;
    a4[1] = a1;
  }
  else
  {
    a4 = 0;
  }
  v13 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, object, a4);
  v14 = object;
  if (object)
  {
LABEL_12:
    object = 0;
    xpc_release(v14);
  }
LABEL_13:
  free(a4);
  return v13;
}

uint64_t routingContextRemoteXPC_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t ObjectID;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _QWORD v13[6];
  uint64_t v14;
  void *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  if (*(_DWORD *)(DerivedStorage + 80) != 9)
    return 4294955271;
  if (a3 && a2)
  {
    v7 = DerivedStorage;
    v14 = 0;
    ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v14);
    if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
    {
      v9 = ObjectID;
    }
    else
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFString();
      v9 = FigXPCRemoteClientSendSyncMessage();
      if (!(_DWORD)v9)
      {
        v10 = *(NSObject **)(v7 + 40);
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __routingContextRemoteXPC_CloseCommChannelForDeviceID_block_invoke;
        v13[3] = &__block_descriptor_48_e5_v8__0l;
        v13[4] = v7;
        v13[5] = a3;
        MXDispatchSync((uint64_t)"routingContextRemoteXPC_CloseCommChannelForDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 851, 0, 0, v10, (uint64_t)v13);
      }
    }
    v11 = v15;
    if (v15)
    {
      v15 = 0;
      xpc_release(v11);
    }
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t routingContextRemoteXPC_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_CopySelectedBufferedEndpointForTesting(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v4);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      FigXPCMessageSetCFString();
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
        ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
    }
  }
  v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

void routes_logEndpoints(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      v5 = *MEMORY[0x1E0CA4348];
      v6 = *MEMORY[0x1E0C9AE00];
      while (1)
      {
        CFArrayGetValueAtIndex(a1, v4);
        CMBaseObject = FigEndpointGetCMBaseObject();
        v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
        if (!v8)
          break;
        v9 = v8(CMBaseObject, v5, v6, &cf);
        v10 = cf;
        if (v9)
          goto LABEL_11;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v3 == ++v4)
          return;
      }
      v10 = cf;
LABEL_11:
      if (v10)
        CFRelease(v10);
    }
  }
}

uint64_t remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  unsigned int v17;
  _QWORD v18[8];
  _QWORD v19[8];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v8 = MEMORY[0x1E0C809B0];
  if (a3)
  {
    v9 = *(NSObject **)(DerivedStorage + 16);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
    v19[3] = &unk_1E3099668;
    v19[4] = &v24;
    v19[5] = a1;
    v19[6] = DerivedStorage;
    v19[7] = a3;
    MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 359, 0, 0, v9, (uint64_t)v19);
    xpc_dictionary_set_uint64(a2, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, v25[3]);
  }
  v10 = FigXPCRemoteClientSendSyncMessage();
  v11 = v10;
  if (a3)
  {
    if ((_DWORD)v10)
    {
      v12 = *(NSObject **)(v7 + 16);
      v18[0] = v8;
      v18[1] = 3221225472;
      v18[2] = __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2;
      v18[3] = &unk_1E3099640;
      v18[6] = v7;
      v18[7] = a3;
      v18[4] = &v24;
      v18[5] = &v20;
      MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 375, 0, 0, v12, (uint64_t)v18);
      if (*((_BYTE *)v21 + 24))
      {
        v17 = v11;
        remoteXPCRoutingContext_runOneCallback(v13, a3, &v17);
        v14 = (const void *)a3[1];
        if (v14)
          CFRelease(v14);
        v15 = (const void *)a3[3];
        if (v15)
          CFRelease(v15);
      }
    }
  }
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  return v11;
}

void sub_193725C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 32);
  v4 = 1;
  if ((unint64_t)(v3 + 1) > 1)
    v4 = v3 + 1;
  *(_QWORD *)(DerivedStorage + 32) = v4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 24), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(const void **)(a1 + 56));
}

void __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2(_QWORD *a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  v2 = *(const __CFDictionary **)(a1[6] + 24);
  if (v2)
  {
    if (CFDictionaryGetValueIfPresent(v2, *(const void **)(*(_QWORD *)(a1[4] + 8) + 24), 0))
    {
      v3 = a1[7];
      v4 = *(const void **)(v3 + 8);
      if (v4)
      {
        CFRetain(v4);
        v3 = a1[7];
      }
      v5 = *(const void **)(v3 + 24);
      if (v5)
        CFRetain(v5);
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1[6] + 24), *(const void **)(*(_QWORD *)(a1[4] + 8) + 24));
  }
}

uint64_t FigRoutingContextResilientRemoteCreateAudioContext(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  __CFDictionary *v6;
  uint64_t v7;
  void (*v9[6])(_QWORD);
  _QWORD v10[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1)
    CFRetain(a1);
  if (v6)
    CFRetain(v6);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke;
  v10[3] = &unk_1E309D7B8;
  v10[4] = Current;
  v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v9[1] = (void (*)(_QWORD))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke_2;
  v9[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(_QWORD))a1;
  v9[5] = (void (*)(_QWORD))v6;
  v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6)
    CFRelease(v6);
  return v7;
}

__CFDictionary *routingContextResilientRemote_copyCreationOptionsEnsuringContextID(const __CFAllocator *a1)
{
  __CFDictionary *MutableCopy;
  const __CFUUID *v3;
  CFStringRef v4;

  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!CFDictionaryContainsKey(MutableCopy, CFSTR("contextUUID")))
  {
    v3 = CFUUIDCreate(a1);
    v4 = CFUUIDCreateString(a1, v3);
    CFDictionarySetValue(MutableCopy, CFSTR("contextUUID"), v4);
    if (v3)
      CFRelease(v3);
    if (v4)
      CFRelease(v4);
  }
  return MutableCopy;
}

uint64_t FigRoutingContextResilientRemoteCopyAllAudioContexts(uint64_t a1)
{
  return -[FigRemoteRoutingContextFactory copyAllAudioContexts:](FigRemoteRoutingContextFactoryGetCurrent(), "copyAllAudioContexts:", a1);
}

uint64_t FigRoutingContextResilientRemoteCreateVideoContext(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  __CFDictionary *v6;
  uint64_t v7;
  void (*v9[6])(_QWORD);
  _QWORD v10[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1)
    CFRetain(a1);
  if (v6)
    CFRetain(v6);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke;
  v10[3] = &unk_1E309D7B8;
  v10[4] = Current;
  v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v9[1] = (void (*)(_QWORD))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke_2;
  v9[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(_QWORD))a1;
  v9[5] = (void (*)(_QWORD))v6;
  v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6)
    CFRelease(v6);
  return v7;
}

uint64_t FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  __CFDictionary *v6;
  uint64_t v7;
  void (*v9[6])(_QWORD);
  _QWORD v10[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1)
    CFRetain(a1);
  if (v6)
    CFRetain(v6);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke;
  v10[3] = &unk_1E309D7B8;
  v10[4] = Current;
  v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v9[1] = (void (*)(_QWORD))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke_2;
  v9[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(_QWORD))a1;
  v9[5] = (void (*)(_QWORD))v6;
  v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6)
    CFRelease(v6);
  return v7;
}

uint64_t FigRoutingContextResilientRemoteCopySystemAudioContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopySystemRemoteDisplay(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopySystemMirroringContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopySidePlayContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopySystemRemotePoolContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCreateControlChannelOnlyContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext(const void *a1, const void *a2, _QWORD *a3)
{
  FigRemoteRoutingContextFactory *Current;
  void (*v8[6])(_QWORD);
  _QWORD v9[7];

  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke;
  v9[3] = &unk_1E309D7B8;
  v9[4] = Current;
  v9[5] = a1;
  v9[6] = a2;
  v8[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke_2;
  v8[3] = (void (*)(_QWORD))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(_QWORD))a1;
  v8[5] = (void (*)(_QWORD))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopyDefaultContext(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  _QWORD block[5];

  if (!_CFMZEnabled())
    goto LABEL_8;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __routingContextResilientRemote_copySharedAudioContext_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextOnce != -1)
    dispatch_once(&routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextOnce, block);
  v5 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr)
    return v5;
  if (!routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v6 = CFRetain((CFTypeRef)routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext);
  v5 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr;
  if (!routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr)
  {
LABEL_9:
    if (!a3)
    {
      v5 = FigSignalErrorAt();
      if (!v6)
        return v5;
      goto LABEL_15;
    }
    if (v6)
      v7 = CFRetain(v6);
    else
      v7 = 0;
    v5 = 0;
    *a3 = v7;
  }
  if (v6)
LABEL_15:
    CFRelease(v6);
  return v5;
}

void routingContextResilientRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 24))
    routingContextResilientRemote_stopObservingRemoteContext();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
    v2 = *(void **)(DerivedStorage + 8);
  }
  else
  {
    v2 = 0;
  }

  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
    CFRelease(v3);
  FigSimpleMutexDestroy();
  v4 = *(NSObject **)(DerivedStorage + 32);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5)
    dispatch_release(v5);
}

uint64_t routingContextResilientRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SetProperty_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_stopObservingRemoteContext()
{
  uint64_t i;
  uint64_t j;

  CMNotificationCenterGetDefaultLocalCenter();
  for (i = 0; i != 24; i += 8)
    FigNotificationCenterRemoveWeakListener();
  for (j = 0; j != 48; j += 8)
    FigNotificationCenterRemoveWeakListener();
  return FigNotificationCenterRemoveWeakListener();
}

void routingContextResilientRemote_forwardNotificationFromRemoteContext(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef a4)
{
  CFTypeRef v5;
  const void *v6;

  v5 = FigRoutingContextResilientRemoteCopyRemoteContext();
  v6 = v5;
  if (v5 != a4)
  {
    if (!v5)
      return;
    goto LABEL_3;
  }
  CMNotificationCenterPostNotification();
  if (v6)
LABEL_3:
    CFRelease(v6);
}

void routingContextResilientRemote_serverConnectionDied(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD v8[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v7 = *(NSObject **)(DerivedStorage + 40);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __routingContextResilientRemote_serverConnectionDied_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  v8[4] = DerivedStorage;
  v8[5] = a2;
  v8[6] = a4;
  MXDispatchAsync((uint64_t)"routingContextResilientRemote_serverConnectionDied", (uint64_t)"FigRoutingContextResilientRemote.m", 146, 0, 0, v7, (uint64_t)v8);
}

void __routingContextResilientRemote_serverConnectionDied_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  const void *v5;

  v2 = a1[4];
  v3 = *(_DWORD *)(v2 + 48);
  if (v3 <= 4)
  {
    *(_DWORD *)(v2 + 48) = v3 + 1;
    if (!routingContextResilientRemote_replaceRemoteContext(a1[5], a1[6], 0))
      *(_DWORD *)(a1[4] + 48) = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
}

uint64_t routingContextResilientRemote_replaceRemoteContext()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (*(uint64_t (**)(void))(*(_QWORD *)DerivedStorage + 16))();
  if (!(_DWORD)result)
  {
    CMBaseObjectGetDerivedStorage();
    return FigSignalErrorAt();
  }
  return result;
}

void __routingContextResilientRemote_compareAndSwapRemoteContext_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  uint64_t i;
  const void *v4;

  CMNotificationCenterGetDefaultLocalCenter();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 24; i += 8)
    CMNotificationCenterPostNotification();
  CFDictionarySetValue(Mutable, CFSTR("routeConfigUpdateReason"), CFSTR("configUpdateReasonEndedFailed"));
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

uint64_t routingContextResilientRemote_SelectRoute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRoute_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRouteDescriptor_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CopyRoute(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopyRoute_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_CopySelectedRouteDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopySelectedRouteDescriptor_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_SelectRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRoutes_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRouteDescriptors_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CopyRoutes(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopyRoutes_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_CopySelectedRouteForRemoteControl(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopySelectedRouteForRemoteControl_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_AddToSelectedRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_AddToSelectedRoutes_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_AddToSelectedRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_AddToSelectedRouteDescriptors_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_RemoveFromSelectedRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_RemoveFromSelectedRoutes_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_RemoveFromSelectedRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_RemoveFromSelectedRouteDescriptors_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CreateCommChannel_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v9 = FigRoutingContextResilientRemoteCopyRemoteContext();
  v10 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 120);
  if (!v10)
  {
    v11 = 4294954514;
    if (!v9)
      return v11;
    goto LABEL_3;
  }
  v11 = v10(v9, a2, a3, a4, a5);
  if (v9)
LABEL_3:
    CFRelease(v9);
  return v11;
}

uint64_t routingContextResilientRemote_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CloseCommChannel_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_SendCommand_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

uint64_t routingContextResilientRemote_CopySelectedBufferedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CopySelectedBufferedEndpoint_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[7];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __routingContextResilientRemote_CreateCommChannelForDeviceID_block_invoke;
  v5[3] = &__block_descriptor_56_e34_i16__0__OpaqueFigRoutingContext__8l;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v5);
}

uint64_t routingContextResilientRemote_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v11 = FigRoutingContextResilientRemoteCopyRemoteContext();
  v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 160);
  if (!v12)
  {
    v13 = 4294954514;
    if (!v11)
      return v13;
    goto LABEL_3;
  }
  v13 = v12(v11, a2, a3, a4, a5, a6);
  if (v11)
LABEL_3:
    CFRelease(v11);
  return v13;
}

uint64_t routingContextResilientRemote_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CloseCommChannelForDeviceID_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)&__block_literal_global_44);
}

uint64_t routingContextResilientRemote_CopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CopySelectedBufferedEndpointForTesting_block_invoke;
  v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

void __routingContextResilientRemote_copySharedAudioContext_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr = FigRoutingContextResilientRemoteCreateAudioContext(*(const __CFAllocator **)(a1 + 32), 0, &routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext);
  v1 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext)
  {
    cf = 0;
    v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v2)
    {
      v2(v1, CFSTR("contextUUID"), *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
        CFRelease(cf);
    }
  }
}

__CFDictionary *CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(int a1, int a2, int a3, const void *a4, const void *a5)
{
  void *v6;
  CFAllocatorRef *v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, CFAllocatorRef, int *, CFTypeRef *);
  CFAllocatorRef v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, __CFString *, CFAllocatorRef, __CFDictionary **);
  __CFString *v13;
  CFTypeRef v18;
  __CFDictionary *Mutable;
  const __CFAllocator *v20;
  const void *v21;
  CFStringRef v22;
  CFStringRef v23;
  CFTypeRef cf;
  __CFDictionary *v26;
  int v27;

  v6 = 0;
  v27 = a1;
  v26 = 0;
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a1)
  {
    if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
    {
      v18 = cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(a2, a3, a4, a5, 0, 0x1E30A4C28);
      if (!v18)
        goto LABEL_20;
    }
    else
    {
      v18 = cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(a2, a3, a4, a5, 0, 0x1E30A4C28);
      if (!v18)
        goto LABEL_20;
    }
    v6 = (void *)v18;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_19;
    if (!objc_msgSend(v6, "count"))
      goto LABEL_19;
    v27 = objc_msgSend((id)objc_msgSend(v6, "firstObject"), "unsignedIntValue");
    if (!v27)
      goto LABEL_19;
  }
  cf = 0;
  v8 = qword_1EE2B3BE0;
  v9 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, int *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                        + 8);
  if (v9)
  {
    v10 = *v7;
    v9(v8, CFSTR("VAEM_EndpointForPort"), *v7, &v27, &cf);
    if (cf)
    {
      if (a1)
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v12 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v12)
        {
          v13 = CFSTR("VAE_RouteDescription");
LABEL_16:
          v12(CMBaseObject, v13, v10, &v26);
        }
      }
      else
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v12 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v12)
        {
          v13 = CFSTR("VAE_DefaultRouteDescription");
          goto LABEL_16;
        }
      }
      CFRelease(cf);
    }
  }
  if (v6)
LABEL_19:
    CFRelease(v6);
LABEL_20:
  Mutable = v26;
  if (!v26)
  {
    v20 = *v7;
    Mutable = CFDictionaryCreateMutable(*v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v21 = (const void *)MGCopyAnswer();
      v22 = CFStringCreateWithFormat(v20, 0, CFSTR("%@..."), v21);
      if (!v22)
      {
        CFDictionarySetValue(Mutable, CFSTR("RouteType"), CFSTR("Default"));
        if (!v21)
          return Mutable;
        goto LABEL_24;
      }
      v23 = v22;
      CFDictionarySetValue(Mutable, CFSTR("RouteName"), v22);
      CFDictionarySetValue(Mutable, CFSTR("RouteType"), CFSTR("Default"));
      CFRelease(v23);
      if (v21)
LABEL_24:
        CFRelease(v21);
    }
  }
  return Mutable;
}

uint64_t cmsmDoesPortMatchCurrentEndpointID(AudioObjectID a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFString *v4;
  uint64_t v5;
  CFTypeRef cf;
  CFTypeRef v8;
  CFTypeRef v9;

  v9 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(qword_1EE2B3CF0, 0, (uint64_t)&v9);
  v8 = 0;
  if (v9)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &v8);
  }
  v4 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
  cf = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v4, (CFStringRef *)&cf, 0);
  v5 = FigCFEqual();
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v4)
    CFRelease(v4);
  if (v9)
  {
    CFRelease(v9);
    v9 = 0;
  }
  if (v8)
    CFRelease(v8);
  return v5;
}

id cmsmCopyQuiesceableWiredPortsForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  CFTypeRef v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled())
    return 0;
  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  v8 = vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  if (!v8)
    return 0;
  v9 = (void *)v8;
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v18 != v13)
          objc_enumerationMutation(v9);
        v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (vaeIsQuiesceableWiredPort(objc_msgSend(v15, "unsignedIntValue")))
          objc_msgSend(v10, "addObject:", v15);
      }
      v12 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v12);
  }
  if (!objc_msgSend(v10, "count"))
  {

    v10 = 0;
  }

  return v10;
}

void *cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration()
{
  void *v0;

  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled())
    return 0;
  v0 = (void *)vaemCopyPickableQuiesceableWiredPortsList(0);
  if (!objc_msgSend(v0, "count"))
  {

    return 0;
  }
  return v0;
}

uint64_t cmsmCreateRouteDescriptionForFigAirPlayEndpoints(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t result;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void **v11;
  const __CFString *v12;
  const __CFString *v13;
  CFStringRef Copy;
  __CFString *v15;
  __CFString **v16;
  __CFString *v17;
  __CFDictionary *v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, const __CFAllocator *, void **);
  const void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *v25;
  const void *v26;
  int v27;
  const void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, const __CFAllocator *, void **);
  _BOOL4 IsEndpointSelfOnlyLocalAirPlay;
  __CFString **v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFNumberRef v43;
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, const __CFAllocator *, const void **);
  const void *valuePtr;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  void *v51;
  CFTypeRef cf;
  CFTypeRef v53;
  void *value;

  result = 4294954315;
  if (!a1 || !a3)
    return result;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954314;
  v8 = Mutable;
  v53 = 0;
  value = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  v11 = (const void **)MEMORY[0x1E0C9AE50];
  if (!v10 || (v10(CMBaseObject, *MEMORY[0x1E0CA4258], v6, &v53), !v53))
  {
    Copy = 0;
    goto LABEL_19;
  }
  v12 = CFStringCreateWithFormat(v6, 0, CFSTR("%@-%@"), v53, 0x1E30A89A8);
  v13 = CFStringCreateWithFormat(v6, 0, CFSTR("%@-%@"), v53, 0x1E30A89C8);
  if (FigCFEqual())
  {
    Copy = CFStringCreateCopy(v6, v12);
    CFDictionarySetValue(v8, CFSTR("RouteUID"), v12);
    v15 = CFSTR("MirroringMode_None");
    v16 = kMXSession_RouteDescriptionKey_MirroringMode;
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    Copy = CFStringCreateCopy(v6, v13);
    CFDictionarySetValue(v8, CFSTR("RouteUID"), v13);
    v17 = CFSTR("MirroringMode_Default");
    v18 = v8;
LABEL_14:
    CFDictionarySetValue(v18, CFSTR("MirroringMode"), v17);
    v15 = (__CFString *)*v11;
    CFDictionarySetValue(v8, CFSTR("RouteSupportsAirPlayScreen"), *v11);
    CFDictionarySetValue(v8, CFSTR("RouteSupportsAirPlaySlideshow"), v15);
    v16 = kMXSession_RouteDescriptionKey_RouteSupportsAirPlayPhoto;
LABEL_15:
    CFDictionarySetValue(v8, *v16, v15);
    if (!v12)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (FigCFEqual())
  {
    Copy = CFStringCreateCopy(v6, v13);
    CFDictionarySetValue(v8, CFSTR("RouteUID"), v13);
    v18 = v8;
    v17 = CFSTR("MirroringMode_SecondScreen");
    goto LABEL_14;
  }
  Copy = 0;
  if (v12)
LABEL_16:
    CFRelease(v12);
LABEL_17:
  if (v13)
    CFRelease(v13);
LABEL_19:
  v19 = FigEndpointGetCMBaseObject();
  v20 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v20)
    v20(v19, *MEMORY[0x1E0CA4348], v6, &value);
  if (value)
    CFDictionarySetValue(v8, CFSTR("RouteName"), value);
  CFDictionarySetValue(v8, CFSTR("AVAudioRouteName"), CFSTR("AirTunes"));
  v21 = *v11;
  CFDictionarySetValue(v8, CFSTR("RouteSupportsAudio"), *v11);
  v22 = (void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v8, CFSTR("IsBTRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(v8, CFSTR("RouteSupportsAirPlayAudio"), v21);
  CFDictionarySetValue(v8, CFSTR("IsPreferredExternalRoute"), v22);
  CFDictionarySetValue(v8, CFSTR("PreferredExternalRouteDetails_IsActive"), v22);
  CFDictionarySetValue(v8, CFSTR("PreferredExternalRouteDetails_InEarDetectSupported"), v22);
  cf = 0;
  v23 = FigEndpointGetCMBaseObject();
  v24 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v24)
    v24(v23, *MEMORY[0x1E0CA4128], v6, &cf);
  if (FigCFEqual())
  {
    CFDictionarySetValue(v8, CFSTR("PortHasPassword"), v21);
  }
  else
  {
    v27 = FigCFEqual();
    CFDictionarySetValue(v8, CFSTR("PortHasPassword"), v22);
    if (v27)
    {
      v25 = v8;
      v26 = v21;
      goto LABEL_30;
    }
  }
  v25 = v8;
  v26 = v22;
LABEL_30:
  CFDictionarySetValue(v25, CFSTR("RouteRequiresAirPlayPIN"), v26);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if ((FigEndpointGetSupportedFeatures() & 4) != 0)
    v28 = v21;
  else
    v28 = v22;
  CFDictionarySetValue(v8, CFSTR("RouteSupportsAirPlayVideo"), v28);
  v51 = v22;
  v29 = FigEndpointGetCMBaseObject();
  v30 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v30)
    v30(v29, *MEMORY[0x1E0CA40C8], v6, &v51);
  if (v51)
    CFDictionarySetValue(v8, CFSTR("AirPlayRouteHasCloudConnectivity"), v51);
  IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
  v32 = kMXSessionPickableRouteType_Default;
  if (!IsEndpointSelfOnlyLocalAirPlay)
    v32 = kMXSessionPickableRouteType_Wireless;
  CFDictionarySetValue(v8, CFSTR("RouteType"), *v32);
  v33 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v33)
  {
    v34 = v33;
    if (value)
      CFDictionarySetValue(v33, CFSTR("name"), value);
    if (Copy)
      CFDictionarySetValue(v34, CFSTR("uid"), Copy);
    if (v53)
      CFDictionarySetValue(v34, CFSTR("deviceID"), v53);
    v50 = 0;
    v35 = FigEndpointGetCMBaseObject();
    v36 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v36)
      v36(v35, *MEMORY[0x1E0CA4338], v6, &v50);
    if (v50)
    {
      CFDictionarySetValue(v34, CFSTR("model"), v50);
      if (v50)
      {
        CFRelease(v50);
        v50 = 0;
      }
    }
    v49 = 0;
    v37 = FigEndpointGetCMBaseObject();
    v38 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v38)
    {
      v38(v37, *MEMORY[0x1E0CA4438], v6, &v49);
      if (v49)
      {
        CFDictionarySetValue(v34, CFSTR("systemFlags"), v49);
        if (v49)
        {
          CFRelease(v49);
          v49 = 0;
        }
      }
    }
    v48 = 0;
    v39 = FigEndpointGetCMBaseObject();
    v40 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v40)
    {
      v40(v39, *MEMORY[0x1E0CA40F0], v6, &v48);
      if (v48)
      {
        CFDictionarySetValue(v34, CFSTR("AirPlayVodkaVersion"), v48);
        if (v48)
        {
          CFRelease(v48);
          v48 = 0;
        }
      }
    }
    v47 = 0;
    v41 = FigEndpointGetCMBaseObject();
    v42 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v42)
      v42(v41, *MEMORY[0x1E0CA4460], v6, &v47);
    if (FigCFEqual())
    {
      LOBYTE(valuePtr) = 2;
      v43 = CFNumberCreate(v6, kCFNumberSInt8Type, &valuePtr);
      CFDictionarySetValue(v34, CFSTR("transportType"), v43);
      if (v43)
        CFRelease(v43);
    }
    if (v47)
    {
      CFRelease(v47);
      v47 = 0;
    }
    valuePtr = 0;
    v44 = FigEndpointGetCMBaseObject();
    v45 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v45)
    {
      v45(v44, *MEMORY[0x1E0CA4310], v6, &valuePtr);
      if (valuePtr)
      {
        CFDictionarySetValue(v34, CFSTR("MACAddress"), valuePtr);
        if (valuePtr)
        {
          CFRelease(valuePtr);
          valuePtr = 0;
        }
      }
    }
    CFDictionarySetValue(v8, CFSTR("AirPlayPortExtendedInfo"), v34);
    CFRelease(v34);
  }
  *a3 = v8;
  if (v53)
  {
    CFRelease(v53);
    v53 = 0;
  }
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if (Copy)
    CFRelease(Copy);
  return 0;
}

void cmsmAddBTDetailsFromBTEndpointToRouteDescription(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, void **);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  void *value;
  CFDictionaryRef theDicta;

  if (theDict)
  {
    CFDictionaryGetValue(theDict, CFSTR("RouteUID"));
    if (a1)
    {
      theDicta = 0;
      v4 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (v6)
      {
        v6(CMBaseObject, *MEMORY[0x1E0CA4138], v4, &theDicta);
        if (theDicta)
        {
          v7 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3808]);
          if (v7)
            CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelLeft"), v7);
          v8 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3810]);
          if (v8)
            CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelRight"), v8);
          v9 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3800]);
          if (v9)
            CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelCase"), v9);
          v10 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3818]);
          if (v10)
            CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelSingle"), v10);
          if (theDicta)
          {
            CFRelease(theDicta);
            theDicta = 0;
          }
        }
      }
      value = 0;
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v12)
      {
        v12(v11, *MEMORY[0x1E0CA4338], v4, &value);
        if (value)
        {
          CFDictionarySetValue(theDict, CFSTR("BTDetails_ProductID"), value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
      }
      cf = 0;
      v13 = FigEndpointGetCMBaseObject();
      v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v14)
      {
        v14(v13, *MEMORY[0x1E0CA4288], v4, &cf);
        if (cf)
        {
          CFDictionarySetValue(theDict, CFSTR("IsGenuineAppleAccessory"), cf);
          if (cf)
            CFRelease(cf);
        }
      }
    }
  }
}

__CFDictionary *cmsmCreateNonConnectedBTRouteDescription(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  const void *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, uint64_t, void **);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  void *value;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("RouteType"), CFSTR("Wireless"));
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("RouteSupportsAudio"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, CFSTR("IsBTRoute"), v4);
  value = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E0CA4258], v2, &value);
    if (value)
    {
      CFDictionarySetValue(Mutable, CFSTR("RouteUID"), value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
    }
  }
  cf = 0;
  v7 = FigEndpointGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
  {
    v8(v7, *MEMORY[0x1E0CA4348], v2, &cf);
    if (cf)
    {
      CFDictionarySetValue(Mutable, CFSTR("RouteName"), cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  CFDictionarySetValue(Mutable, CFSTR("AVAudioRouteName"), CFSTR("HeadphonesBT"));
  cmsmAddBTDetailsFromBTEndpointToRouteDescription(a1, Mutable);
  return Mutable;
}

CFTypeRef cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  __CFDictionary *RouteConfigurationDictionary;
  AudioObjectPropertyScope v9;
  CFTypeID v10;
  const void **p_cf;
  uint64_t v12;
  const void **v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  const __CFArray *outData;
  OSStatus PropertyData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  outData = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
  if (a5 == 1)
    v9 = 1768845428;
  else
    v9 = 1869968496;
  inAddress.mSelector = 1634627954;
  inAddress.mScope = v9;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (!PropertyData && outData && (v10 = CFGetTypeID(outData), v10 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_cf = &cf;
        v12 = a6;
        v13 = 0;
      }
      else
      {
        v13 = &cf;
        v12 = a6;
        p_cf = 0;
      }
      vaemGetPortListForDevice(outData, v12, p_cf, v13);
      if (cf)
        CFRetain(cf);
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (outData)
    CFRelease(outData);
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  return cf;
}

void cmsmUnpickQuiesceableWiredPortsRoutes(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() || vaemIsPersistentRouteActive())
    && objc_msgSend(a1, "count"))
  {
    v14 = a3;
    v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(a1);
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v12), "unsignedIntValue");
          if (vaeIsPortRoutable(v13))
          {
            if (a4)
              -[MXSessionManager setQuiesceableWiredPortPreference:autoRouteOnConnect:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setQuiesceableWiredPortPreference:autoRouteOnConnect:", v13, 0);
            objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v13));
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }
    vaemMakeArrayOfPortsRoutable(v8, 0, a2, v14, 0);

  }
}

uint64_t cmsmUnpickWirelessRoutes(const __CFArray *a1, int a2, uint64_t a3, uint64_t a4)
{
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t ArrayOfPortsRoutable;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Count = CFArrayGetCount(a1);
  v10 = Count;
  if (a2)
  {
    if (Count >= 1)
    {
      v11 = 0;
      do
      {
        FigCFArrayGetInt64AtIndex();
        vaeGetPortTypeFromPortID(0);
        ++v11;
      }
      while (v10 != v11);
    }
  }
  else if (Count >= 1)
  {
    v13 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      ++v13;
    }
    while (v10 != v13);
  }
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(Mutable))
    ArrayOfPortsRoutable = vaemDeaggregatePorts((uint64_t)Mutable, (uint64_t)Mutable, a3, a4);
  else
    ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(Mutable, 0, a3, a4, 0);
  v12 = ArrayOfPortsRoutable;
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

void cmsmCopyCurrentActiveRoutesInfoForVADUID(uint64_t a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  const __CFArray *v7;
  const __CFArray *v8;
  CFTypeID v9;

  if (a2 || a3 || a4)
  {
    v7 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, a1);
    if (v7)
    {
      v8 = v7;
      if (CFArrayGetCount(v7))
      {
        v9 = CFGetTypeID(v8);
        if (v9 == CFArrayGetTypeID())
          CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v8, 0, a2, a3, 0, a4);
      }
      CFRelease(v8);
    }
  }
}

__CFArray *cmsmCopyCurrentActiveRouteTypes()
{
  __CFArray *v1;

  v1 = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1E30A4C28, &v1, 0, 0);
  return v1;
}

CFTypeRef cmsmCopyCurrentActiveRouteTypeAtIndex(CFIndex a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v5;
  CFArrayRef theArray;

  theArray = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1E30A4C28, &theArray, 0, 0);
  v2 = theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  if (Count > a1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, a1);
    if (ValueAtIndex)
    {
      v5 = CFRetain(ValueAtIndex);
      if (!v2)
        return v5;
      goto LABEL_9;
    }
  }
  v5 = 0;
  if (v2)
LABEL_9:
    CFRelease(v2);
  return v5;
}

void cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef v11;
  CFIndex v12;
  const void *v13;
  CFTypeRef v14;
  CFIndex v15;
  const void *v16;
  CFTypeRef v17;
  CFArrayRef v18;
  CFArrayRef v19;
  CFArrayRef theArray;

  v19 = 0;
  theArray = 0;
  v18 = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(a1, &theArray, &v19, &v18);
  Count = (CFIndex)theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  if (a3)
  {
    if (Count > a2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, a2);
      v11 = CFRetain(ValueAtIndex);
      *a3 = v11;
      if (CFEqual(v11, &stru_1E30A1A48))
        *a3 = 0;
    }
  }
  v12 = (CFIndex)v19;
  if (v19)
    v12 = CFArrayGetCount(v19);
  if (a4)
  {
    if (v12 > a2)
    {
      v13 = CFArrayGetValueAtIndex(v19, a2);
      v14 = CFRetain(v13);
      *a4 = v14;
      if (CFEqual(v14, &stru_1E30A1A48))
        *a4 = 0;
    }
  }
  v15 = (CFIndex)v18;
  if (v18)
    v15 = CFArrayGetCount(v18);
  if (a5)
  {
    if (v15 > a2)
    {
      v16 = CFArrayGetValueAtIndex(v18, a2);
      v17 = CFRetain(v16);
      *a5 = v17;
      if (CFEqual(v17, &stru_1E30A1A48))
        *a5 = 0;
    }
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    v19 = 0;
  }
  if (v18)
    CFRelease(v18);
}

uint64_t cmsmInputPortIsConnectedForRouteConfiguration(int a1, int a2, int a3, const void *a4)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFNumber *ValueAtIndex;
  uint64_t v11;
  int valuePtr;

  v5 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(a2, a3, a4, 1);
  if (!v5)
    return 0;
  v6 = v5;
  Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
LABEL_6:
    v11 = 0;
  }
  else
  {
    v8 = Count;
    v9 = 0;
    while (1)
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v9);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == a1)
        break;
      if (v8 == ++v9)
        goto LABEL_6;
    }
    v11 = 1;
  }
  CFRelease(v6);
  return v11;
}

uint64_t cmsmIsDeviceIDIncludedInCarBluetoothIDs(const __CFString *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const __CFString *ValueAtIndex;
  unsigned int v7;
  CFTypeRef cf;
  CFTypeRef v10;

  v10 = 0;
  CMSMUtility_CreateTokensFromDeviceUID(a1, (CFStringRef *)&v10, 0);
  if (a2)
  {
    Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count < 1)
    {
LABEL_8:
      a2 = 0;
    }
    else
    {
      v4 = Count;
      v5 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v5);
        cf = 0;
        CMSMUtility_CreateTokensFromDeviceUID(ValueAtIndex, (CFStringRef *)&cf, 0);
        v7 = CMSMUtility_CFStringEqualCaseInsensitive((const __CFString *)cf, (const __CFString *)v10);
        if (cf)
          CFRelease(cf);
        if (v7)
          break;
        if (v4 == ++v5)
          goto LABEL_8;
      }
      a2 = 1;
    }
  }
  if (v10)
    CFRelease(v10);
  return a2;
}

CFArrayRef cmsCopySubPortPreferencesAndInputOverride(void *a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  int v7;
  void *Value;
  void *v9;
  void *v10;
  CFIndex v11;
  CFDictionaryRef v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFDictionaryRef v20;
  CFArrayRef Copy;
  const __CFAllocator *allocator;
  void *v24;
  unsigned int valuePtr;
  void *values;
  uint64_t v27;
  uint64_t v28;
  void *keys;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v24 = a1;
  v3 = objc_msgSend((id)objc_msgSend(a1, "subPortPreferences"), "count");
  if (v3 >= 1)
  {
    v4 = v3;
    for (i = 0; v4 != i; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(v24, "subPortPreferences"), i);
      keys = 0;
      v30 = 0;
      v31 = 0;
      values = 0;
      v27 = 0;
      v28 = 0;
      v7 = CFDictionaryContainsKey(ValueAtIndex, CFSTR("polar pattern"));
      Value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("sub-port id"));
      v9 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("port id"));
      if (v7)
      {
        v10 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("polar pattern"));
        if (v9)
          goto LABEL_5;
      }
      else
      {
        v10 = 0;
        if (v9)
        {
LABEL_5:
          keys = CFSTR("SelectedRouteDescription_RouteID");
          values = v9;
          v11 = 1;
          if (!Value)
            goto LABEL_7;
LABEL_6:
          *(&keys + v11) = CFSTR("SelectedRouteDescription_DataSourceID");
          *(&values + v11++) = Value;
          goto LABEL_7;
        }
      }
      v11 = 0;
      if (Value)
        goto LABEL_6;
LABEL_7:
      if (v10)
      {
        *(&keys + v11) = CFSTR("SelectedRouteDescription_MicrophonePolarPattern");
        *(&values + v11++) = v10;
LABEL_13:
        v12 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFArrayAppendValue(Mutable, v12);
        if (v12)
          CFRelease(v12);
        continue;
      }
      if (v11)
        goto LABEL_13;
      CFArrayAppendValue(Mutable, 0);
    }
  }
  if (objc_msgSend(v24, "overridePortsList"))
  {
    v13 = objc_msgSend((id)objc_msgSend(v24, "overridePortsList"), "count");
    if (v13 >= 1)
    {
      v14 = v13;
      v15 = 0;
      v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v18 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(v24, "overridePortsList"), v15);
        valuePtr = 0;
        keys = 0;
        v30 = 0;
        v31 = 0;
        values = 0;
        v27 = 0;
        v28 = 0;
        if (v18)
        {
          v19 = v18;
          CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
          if (vaeIsPortAnInputPort(valuePtr))
          {
            keys = CFSTR("SelectedRouteDescription_RouteID");
            values = v19;
            v20 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, v16, v17);
            CFArrayAppendValue(Mutable, v20);
            if (v20)
              CFRelease(v20);
          }
        }
        else if (vaeIsPortAnInputPort(0))
        {
          CFArrayAppendValue(Mutable, 0);
        }
        ++v15;
      }
      while (v14 != v15);
    }
  }
  if (!Mutable)
    return 0;
  Copy = CFArrayCreateCopy(allocator, Mutable);
  CFRelease(Mutable);
  return Copy;
}

CFIndex cmsDeselectSubPortPreferences(CFIndex result, CFArrayRef theArray)
{
  void *v3;
  CFIndex v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v9;
  const void *v10;
  CFIndex v11;
  const void *v12;
  const void *v13;
  const __CFDictionary *v14;
  void *v15;
  const __CFNumber *v16;
  CFIndex v17;
  const __CFNumber *v18;

  if (theArray)
  {
    v3 = (void *)result;
    result = CFArrayGetCount(theArray);
    if (result >= 1)
    {
      result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        v4 = 0;
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
          if (CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_MicrophonePolarPattern")))
          {
            Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_MicrophonePolarPattern"));
            CFDictionarySetValue(Mutable, CFSTR("polar pattern"), Value);
            v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_DataSourceID"));
            CFDictionarySetValue(Mutable, CFSTR("sub-port id"), v9);
            v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_RouteID"));
            CFDictionarySetValue(Mutable, CFSTR("port id"), v10);
            if (objc_msgSend(v3, "subPortPreferences")
              && objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count"))
            {
              v11 = 0;
              while (!cmsmSubPortPreferenceMatches((const __CFDictionary *)objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "objectAtIndex:", v11), Mutable))
              {
                if (objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count") <= (unint64_t)++v11)
                  goto LABEL_26;
              }
              goto LABEL_19;
            }
          }
          else if (CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_DataSourceID")))
          {
            v12 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_DataSourceID"));
            CFDictionarySetValue(Mutable, CFSTR("sub-port id"), v12);
            v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_RouteID"));
            CFDictionarySetValue(Mutable, CFSTR("port id"), v13);
            if (objc_msgSend(v3, "subPortPreferences")
              && objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count"))
            {
              v11 = 0;
              while (1)
              {
                v14 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(v3, "subPortPreferences"), v11);
                if (cmsmSubPortPreferenceMatches(v14, Mutable))
                  break;
                if (objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count") <= (unint64_t)++v11)
                  goto LABEL_26;
              }
LABEL_19:
              v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
              objc_msgSend(v15, "removeObjectAtIndex:", v11);
              objc_msgSend(v3, "setSubPortPreferences:", v15);

              if (!Mutable)
                goto LABEL_28;
              goto LABEL_27;
            }
          }
          else if (objc_msgSend(v3, "overridePortsList"))
          {
            v16 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SelectedRouteDescription_RouteID"));
            if (objc_msgSend((id)objc_msgSend(v3, "overridePortsList"), "count"))
            {
              v17 = 0;
              while (1)
              {
                v18 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(v3, "overridePortsList"), v17);
                if (CFNumberCompare(v18, v16, 0) == kCFCompareEqualTo)
                  break;
                if (objc_msgSend((id)objc_msgSend(v3, "overridePortsList"), "count") <= (unint64_t)++v17)
                  goto LABEL_26;
              }
              objc_msgSend(v3, "setOverridePortsList:", 0);
              if (!Mutable)
                goto LABEL_28;
LABEL_27:
              CFRelease(Mutable);
              goto LABEL_28;
            }
          }
LABEL_26:
          if (Mutable)
            goto LABEL_27;
LABEL_28:
          ++v4;
          result = CFArrayGetCount(theArray);
        }
        while (result > v4);
      }
    }
  }
  return result;
}

CFComparisonResult routeDescriptionComparator(const __CFDictionary *a1, const __CFDictionary *a2, CFStringCompareFlags a3)
{
  const __CFString *Value;
  const __CFString *v7;
  const __CFString *v8;
  BOOL v9;
  CFComparisonResult result;
  const __CFString *v11;
  const __CFString *v12;
  BOOL v13;
  uint64_t v14;
  CFRange v15;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("RouteName"));
  v7 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("RouteName"));
  v8 = v7;
  if (Value)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (v7)
      result = kCFCompareLessThan;
    else
      result = kCFCompareEqualTo;
    if (Value)
      return 1;
  }
  else
  {
    v15.length = CFStringGetLength(Value);
    v15.location = 0;
    result = CFStringCompareWithOptionsAndLocale(Value, v8, v15, a3, 0);
  }
  if (result == kCFCompareEqualTo)
  {
    v11 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("RouteUID"));
    v12 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("RouteUID"));
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
    {
      if (v12)
        v14 = -1;
      else
        v14 = 0;
      if (v11)
        return 1;
      else
        return v14;
    }
    else
    {
      return CFStringCompare(v11, v12, 0);
    }
  }
  return result;
}

void cmsmCopyHFPOrA2DPBTDeviceDetails(const __CFDictionary *a1, const __CFString **a2, __CFString **a3, CFTypeRef *a4)
{
  const __CFString *Value;
  __CFString **v8;
  __CFString *v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef cf2;

  cf = 0;
  cf2 = 0;
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (!a1)
    goto LABEL_22;
  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("RouteUID"));
  CMSMUtility_CreateTokensFromDeviceUID(Value, (CFStringRef *)&cf, (CFStringRef *)&cf2);
  if (!cf2)
    goto LABEL_22;
  if (CFEqual(CFSTR("tsco"), cf2))
  {
    v8 = kCMSessionBTDeviceType_HFP;
  }
  else
  {
    if (!CFEqual(CFSTR("tacl"), cf2))
      goto LABEL_22;
    v8 = kCMSessionBTDeviceType_A2DP;
  }
  v9 = *v8;
  if (*v8)
  {
    if (a2)
    {
      *a2 = Value;
      if (Value)
        CFRetain(Value);
    }
    if (a3)
    {
      *a3 = v9;
      CFRetain(v9);
    }
    if (a4)
    {
      v10 = cf;
      *a4 = cf;
      if (!v10)
        goto LABEL_24;
      CFRetain(v10);
    }
  }
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_24:
  if (cf2)
    CFRelease(cf2);
}

void cmsmCreateAndInsertAirPlayRouteDescription(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  CFIndex Count;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  cmsmCreateRouteDescriptionForFigAirPlayEndpoints(a1, a2, &theDict);
  if (theDict)
  {
    Count = CFArrayGetCount(a3);
    CFDictionaryGetValue(theDict, CFSTR("RouteUID"));
    if (Count >= 1)
    {
      v5 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v5);
        CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteUID"));
        if (FigCFEqual())
          break;
        if (Count == ++v5)
          goto LABEL_12;
      }
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("PortNumber"));
      if (Value)
        CFDictionarySetValue(theDict, CFSTR("PortNumber"), Value);
      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteCurrentlyPicked")))
        CFDictionarySetValue(theDict, CFSTR("RouteCurrentlyPicked"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFArrayRemoveValueAtIndex(a3, v5);
    }
LABEL_12:
    CFArrayAppendValue(a3, theDict);
    if (theDict)
      CFRelease(theDict);
  }
}

void CMSMDebugUtility_DumpDebugInfo()
{
  CMSMDebugUtility_PrintBuildInfo();
  CMSMStrings_Check();
  CMSMDebugUtility_DumpSessionListOneTime();
  -[NSRecursiveLock lock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "lock");
  if (-[NSMutableDictionary count](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "count"))
  {
    CFDictionaryApplyFunction((CFDictionaryRef)-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), (CFDictionaryApplierFunction)CMSMUtility_PrintRouteDescriptions, 0);
  }
  -[NSRecursiveLock unlock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "unlock");
  -[MXExclaves logDebugInfo](+[MXExclaves sharedInstance](MXExclaves, "sharedInstance"), "logDebugInfo");
  CMSMDebugUtility_DumpDeviceState();
  CMSMDebugUtility_DumpTriangleInfo();
  CMSMDebugUtility_DumpDetailedRouteDescriptions();
  CMSMDebugUtility_DumpDevicesSampleRates();
  CMSMDebugUtility_DumpMutedSessionBundleIDsList();
  MX_RunningBoardServices_DumpAssertionInfo();
  CMSMDebugUtility_DumpDeviceInfo();
  MX_RunningBoardServices_DumpMonitoredProcessPredicates();
}

void CMSMDebugUtility_PrintBuildInfo()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CMSMDebugUtility_DumpSessionListOneTime()
{
  uint64_t *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  const __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  void *v31;
  const __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  void *v41;
  float v42;
  void *v43;
  float v44;
  void *v45;
  float v46;
  void *v47;
  float v48;
  void *v49;
  float v50;
  void *v51;
  float v52;
  void *v53;
  const __CFString *v54;
  void *v55;
  const __CFString *v56;
  void *v57;
  const __CFString *v58;
  void *v59;
  const __CFString *v60;
  void *v61;
  const __CFString *v62;
  void *v63;
  const __CFString *v64;
  void *v65;
  float v66;
  void *v67;
  const __CFString *v68;
  void *v69;
  const __CFString *v70;
  void *v71;
  void *v72;
  int v73;
  const char *v74;
  void *v75;
  int v76;
  const char *v77;
  void *v78;
  int v79;
  const char *v80;
  __CFString *v81;
  __CFString *v82;
  void *v83;
  int v84;
  const char *v85;
  __CFString *StringForApplicationState;
  __CFString *v87;
  __CFString *v88;
  void *v89;
  int v90;
  const char *v91;
  void *v92;
  const char *v93;
  void *v94;
  const char *v95;
  void *v96;
  const char *v97;
  __CFString *v98;
  void *v99;
  const __CFString *v100;
  void *v101;
  int IsPAAccessLoggingEnabled;
  const char *v103;
  void *v104;
  float v105;
  void *v106;
  float v107;
  void *v108;
  float v109;
  void *v110;
  const char *v111;
  void *v112;
  const char *v113;
  void *v114;
  const char *v115;
  void *v116;
  const char *v117;
  void *v118;
  const __CFString *v119;
  void *v120;
  const char *v121;
  void *v122;
  const char *v123;
  void *v124;
  const char *v125;
  void *v126;
  const __CFString *v127;
  void *v128;
  const char *v129;
  void *v130;
  void *v131;
  int v132;
  const __CFString *v133;
  void *v134;
  __CFString *CurrentInputVADUID;
  void *v136;
  const __CFString *v137;
  void *v138;
  const __CFString *v139;
  void *v140;
  const __CFString *v141;
  void *v142;
  const __CFString *v143;
  void *v144;
  const __CFString *v145;
  void *v146;
  const __CFString *v147;
  void *v148;
  const __CFString *v149;
  void *v150;
  const __CFString *v151;
  void *v152;
  const __CFString *v153;
  void *v154;
  const __CFString *v155;
  void *v156;
  const __CFString *v157;
  void *v158;
  const __CFString *v159;
  void *v160;
  const __CFString *v161;
  void *v162;
  const __CFString *v163;
  NSObject *v164;
  unsigned int v165;
  unsigned int v166;
  NSObject *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  unsigned int v178;
  unsigned int v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t i;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t *v188;
  NSObject *v189;
  unsigned int v190;
  unsigned int v191;
  NSObject *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  NSObject *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t j;
  uint64_t v203;
  int *v204;
  os_log_type_t *v205;
  int *v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  void *context;
  NSPointerArray *obj;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  void *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  os_log_type_t v225;
  unsigned int v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _BYTE v231[128];
  os_log_type_t v232[128];
  os_log_type_t type[4];
  const char *v234;
  __int16 v235;
  void *v236;
  __int16 v237;
  uint64_t v238;
  int v239;
  const char *v240;
  __int16 v241;
  uint64_t v242;
  __int16 v243;
  uint64_t v244;
  _BYTE v245[128];
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x194035B20]();
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  obj = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v0 = &sCategoryToPriorityMapForTriangle;
  if (dword_1EE2B3F38)
  {
    LODWORD(v227) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v213 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v221, v232, 16, v203, v208);
  if (v213)
  {
    v212 = *(_QWORD *)v222;
    do
    {
      v2 = 0;
      do
      {
        if (*(_QWORD *)v222 != v212)
          objc_enumerationMutation(obj);
        v215 = v2;
        v3 = *(void **)(*((_QWORD *)&v221 + 1) + 8 * v2);
        v214 = (void *)objc_msgSend(v3, "copyMXSessionList");
        v4 = objc_msgSend(v214, "count");
        v216 = v3;
        if (dword_1EE2B3F38)
        {
          v5 = v4;
          LODWORD(v227) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v7 = v227;
          if (os_log_type_enabled(v6, type[0]))
            v8 = v7;
          else
            v8 = v7 & 0xFFFFFFFE;
          if (v8)
          {
            v9 = objc_msgSend(v3, "displayID");
            v239 = 136315650;
            v240 = "CMSMDebugUtility_DumpSessionListOneTime";
            v241 = 2114;
            v242 = v9;
            v243 = 2048;
            v244 = v5;
            LODWORD(v209) = 32;
            v204 = &v239;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E30A1A48, v204, v209);
        objc_msgSend(v10, "appendString:", CFSTR("\nClient Configuration Info :\n"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("DisplayID ="), (__CFString *)objc_msgSend(v3, "displayID"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("clientName ="), (__CFString *)objc_msgSend(v3, "clientName"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("ptr ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p"), v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("PID ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend((id)objc_msgSend(v3, "clientPID"), "intValue")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("category ="), (__CFString *)objc_msgSend(v3, "audioCategory"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("mode ="), (__CFString *)objc_msgSend(v3, "audioMode"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("audioSessionID ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "audioSessionID")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("CoreSessionID ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lld"), objc_msgSend((id)objc_msgSend(v3, "ID"), "longLongValue")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("reporterIDs ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "reporterIDs")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("originalReporterIDs ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "originalReporterIDs")));
        v11 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isSharedAVAudioSessionInstance"))
          v12 = CFSTR("YES");
        else
          v12 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isSharedAVAudioSessionInstance ="), (__CFString *)objc_msgSend(v11, "stringWithFormat:", CFSTR("%@"), v12));
        v13 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isAirPlayReceiverSession"))
          v14 = CFSTR("YES");
        else
          v14 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isAirPlayReceiverSession ="), (__CFString *)objc_msgSend(v13, "stringWithFormat:", CFSTR("%@"), v14));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("clientPriority ="), (__CFString *)-[MXSessionManager getClientPriorityAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getClientPriorityAsString:", objc_msgSend(v3, "clientPriority")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("canBeNowPlayingApp ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), +[MXSystemController getCanBeNowPlayingAppForPID:](MXSystemController, "getCanBeNowPlayingAppForPID:", objc_msgSend((id)objc_msgSend(v3, "clientPID"), "intValue"))));
        v15 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CMSMUtility_GetStyleString(objc_msgSend(v3, "interruptionStyle")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("interruptionStyle ="), v15);
        v16 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), FigRoutingManagerContextUtilities_GetContextString(objc_msgSend(v3, "routingContextUUID")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("context ="), v16);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("routeSharingPolicy ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), -[MXSessionManager getRouteSharingPolicyAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getRouteSharingPolicyAsString:", objc_msgSend(v3, "routeSharingPolicy"))));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("PIDInheritingFrom ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "pidToInheritAppStateFrom")));
        v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), CMSMUtility_GetFlagsString(objc_msgSend(v3, "hwControlFlags")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("requires flags ="), v17);
        v18 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), CMSMUtility_GetFlagsString(objc_msgSend(v3, "hwControlFlags") >> 16));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("desires flags ="), v18);
        v19 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetIsEligibleForNowPlayingAppConsideration(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("eligibleForNPA ="), v19);
        v20 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetPrefersNoDucking(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersNoDucking ="), v20);
        v21 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetPrefersSuppressingRecordingState(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersSuppressingRecordingState ="), v21);
        v22 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetIsActuallyPlayingAudio(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("actuallyPlaysAudio ="), v22);
        v23 = (void *)MEMORY[0x1E0CB3940];
        if (CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(v3))
          v24 = CFSTR("YES");
        else
          v24 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isEligibleForBTSmartRoutingConsideration ="), (__CFString *)objc_msgSend(v23, "stringWithFormat:", CFSTR("%@"), v24));
        v25 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isEligibleForBTTriangleConsideration"))
          v26 = CFSTR("YES");
        else
          v26 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isEligibleForBTTriangleConsideration ="), (__CFString *)objc_msgSend(v25, "stringWithFormat:", CFSTR("%@"), v26));
        v27 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetWantsToBeVolumeButtonClient(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("wantsToBeVolumeButtonClient ="), v27);
        v28 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetOptOutOfMutePriority(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("optOutOfMutePriority ="), v28);
        v29 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetAllowSystemSoundsWhileRecording(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("allowSystemSoundsWhileRecording ="), v29);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("microphoneAttribution ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "wantsToShowMicrophoneIndicatorWhenNotRecording")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("needsAudioBudget ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "needsAudioBudget")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("shadowingAudioSessionID ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "shadowingAudioSessionID")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isSharePlayMediaSession ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "isSharePlayMediaSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isSharePlayCallSession ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "isSharePlayCallSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isSharePlayCapableCallSession ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "isSharePlayCapableCallSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isHardwareSafetySession ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "isHardwareSafetySession")));
        v30 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersToTakeHWControlFlagsFromAnotherSession ="), v30);
        v31 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "dontTakeOverHardware"))
          v32 = CFSTR("YES");
        else
          v32 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("dontTakeOverHardware ="), (__CFString *)objc_msgSend(v31, "stringWithFormat:", CFSTR("%@"), v32));
        v33 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersNoInterruptionWhenSecureMicrophoneIsEngaged ="), v33);
        v34 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_GetPrefersMultichannelAudio(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersMultichannelAudio ="), v34);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredNumberOfInputChannels ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "preferredNumberOfInputChannels")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredNumberOfOutputChannels ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "preferredNumberOfOutputChannels")));
        v35 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "preferredInputSampleRate");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredInputSampleRate ="), (__CFString *)objc_msgSend(v35, "stringWithFormat:", CFSTR("%f"), v36));
        v37 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "preferredOutputSampleRate");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredOutputSampleRate ="), (__CFString *)objc_msgSend(v37, "stringWithFormat:", CFSTR("%f"), v38));
        v39 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "preferredOutputSampleRateSetByClient"))
          v40 = CFSTR("YES");
        else
          v40 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredOutputSampleRateSetByClient ="), (__CFString *)objc_msgSend(v39, "stringWithFormat:", CFSTR("%@"), v40));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersToVibeWhenVibrationsAreDisabled ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "prefersToVibeWhenVibrationsAreDisabled")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersNoInterruptionsByMixableSessions ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "prefersNoInterruptionsByMixableSessions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersNoInterruptionsDuringRemoteDeviceControl ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "prefersNoInterruptionsDuringRemoteDeviceControl")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersBluetoothAccessoryMuting ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "prefersBluetoothAccessoryMuting")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("Entitlements : hasEntitlementToRecordAudioInAnExtension ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToRecordAudioInAnExtension")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToStartRecordingInTheBackground ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToStartRecordingInTheBackground")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToSuppressRecordingStateToSystemStatus ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToSuppressRecordingStateToSystemStatus")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToShowMicrophoneIndicatorWhileNotRecording ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToSupportProcessAssertionAuditTokens ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToSupportProcessAssertionAuditTokens")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToRecordDuringCall ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToRecordDuringCall")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("hasEntitlementToSetEmergencyAlertPriority ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "hasEntitlementToSetEmergencyAlertPriority")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("wombatEnabled ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), -[MXSessionManager wombatEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "wombatEnabled")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersToPlayDuringWombat ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), objc_msgSend(v3, "prefersToPlayDuringWombat")));
        v41 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "interruptionFadeDuration");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("interruptionFadeDuration ="), (__CFString *)objc_msgSend(v41, "stringWithFormat:", CFSTR("%f"), v42));
        v43 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "duckFadeDuration");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("duckFadeDuration ="), (__CFString *)objc_msgSend(v43, "stringWithFormat:", CFSTR("%f"), v44));
        v45 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "unduckFadeDuration");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("unduckFadeDuration ="), (__CFString *)objc_msgSend(v45, "stringWithFormat:", CFSTR("%f"), v46));
        v47 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "duckToLevelScalar");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("duckToLevelScalar ="), (__CFString *)objc_msgSend(v47, "stringWithFormat:", CFSTR("%f"), v48));
        v49 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "unduckToLevelScalar");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("unduckToLevelScalar = "), (__CFString *)objc_msgSend(v49, "stringWithFormat:", CFSTR("%f"), v50));
        v51 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "duckToLevelDB");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("duckToLevelDB ="), (__CFString *)objc_msgSend(v51, "stringWithFormat:", CFSTR("%f"), v52));
        v53 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isInterruptionCalledOffAudioControlQueue"))
          v54 = CFSTR("YES");
        else
          v54 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isInterruptionCalledOffAudioControlQueue = "), (__CFString *)objc_msgSend(v53, "stringWithFormat:", CFSTR("%@"), v54));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("allowedRouteTypes ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "allowedRouteTypes")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("powerProfile ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "powerProfile")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("notificationsSubscribedTo ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "notificationsSubscribedTo")));
        v55 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "wantsToPauseSpokenAudio"))
          v56 = CFSTR("YES");
        else
          v56 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("wantsToPauseSpokenAudio ="), (__CFString *)objc_msgSend(v55, "stringWithFormat:", CFSTR("%@"), v56));
        v57 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isTheAssistant"))
          v58 = CFSTR("YES");
        else
          v58 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isTheAssistant ="), (__CFString *)objc_msgSend(v57, "stringWithFormat:", CFSTR("%@"), v58));
        v59 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "mutesAudioBasedOnRingerSwitchState"))
          v60 = CFSTR("YES");
        else
          v60 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("mutesAudioBasedOnRingerSwitchState"), (__CFString *)objc_msgSend(v59, "stringWithFormat:", CFSTR("%@"), v60));
        v61 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isTemporaryAssertionEnabled"))
          v62 = CFSTR("YES");
        else
          v62 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isTemporaryAssertionEnabled"), (__CFString *)objc_msgSend(v61, "stringWithFormat:", CFSTR("%@"), v62));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("assertionAuditTimeInterval ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), objc_msgSend(v3, "assertionAuditTimerDelay")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredRouteControlFeatures ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "preferredRouteControlFeatures")));
        v63 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersEchoCancelledInput"))
          v64 = CFSTR("YES");
        else
          v64 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersEchoCancelledInput ="), (__CFString *)objc_msgSend(v63, "stringWithFormat:", CFSTR("%@"), v64));
        v65 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "constantOutputVolumeLeveldB");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("constantOutputVolumeLeveldB ="), (__CFString *)objc_msgSend(v65, "stringWithFormat:", CFSTR("%f"), v66));
        v67 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersBeingInterruptedByNextActiveRecordingClient"))
          v68 = CFSTR("YES");
        else
          v68 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("prefersBeingInterruptedByNextActiveRecordingClient ="), (__CFString *)objc_msgSend(v67, "stringWithFormat:", CFSTR("%@"), v68));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredPersistentRoute ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "preferredPersistentRoute")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("activeOSTransaction ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "activeOSTransaction")));
        v69 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isCameraRecordingExtension"))
          v70 = CFSTR("YES");
        else
          v70 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("isCameraRecordingExtension ="), (__CFString *)objc_msgSend(v69, "stringWithFormat:", CFSTR("%@"), v70));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("preferredMinimumMicrophoneIndicatorLightOnTime ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "preferredMinimumMicrophoneIndicatorLightOnTime")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, CFSTR("vibrationData ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "vibrationData")));
        CMSMDebugUtility_DumpOneLineAndResetString(v10);
        v71 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E30A1A48);
        objc_msgSend(v71, "appendString:", CFSTR("\nClient State Info :\n"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("DisplayID ="), (__CFString *)objc_msgSend(v3, "displayID"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("clientName ="), (__CFString *)objc_msgSend(v3, "clientName"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("ptr ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p"), v3));
        v72 = (void *)MEMORY[0x1E0CB3940];
        v73 = objc_msgSend(v3, "isActive");
        v74 = "inactive";
        if (v73)
          v74 = "ACTIVE";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("active state ="), (__CFString *)objc_msgSend(v72, "stringWithFormat:", CFSTR("%s"), v74));
        v75 = (void *)MEMORY[0x1E0CB3940];
        v76 = objc_msgSend(v3, "isPlaying");
        v77 = "not playing";
        if (v76)
          v77 = "PLAYING";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("play state ="), (__CFString *)objc_msgSend(v75, "stringWithFormat:", CFSTR("%s"), v77));
        v78 = (void *)MEMORY[0x1E0CB3940];
        v79 = objc_msgSend(v3, "isRecording");
        v80 = "not recording";
        if (v79)
          v80 = "RECORDING";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("recording State ="), (__CFString *)objc_msgSend(v78, "stringWithFormat:", CFSTR("%s"), v80));
        if (objc_msgSend(v3, "isUsingBuiltInMicForRecording"))
          v81 = CFSTR("YES");
        else
          v81 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isUsingBuiltInMicForRecording ="), v81);
        if (objc_msgSend(v3, "isUsingExclaveSensor"))
          v82 = CFSTR("YES");
        else
          v82 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isUsingExclaveSensor ="), v82);
        v83 = (void *)MEMORY[0x1E0CB3940];
        v84 = objc_msgSend(v3, "isPlayingOutput");
        v85 = "NO";
        if (v84)
          v85 = "YES";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isPlayingOutput ="), (__CFString *)objc_msgSend(v83, "stringWithFormat:", CFSTR("%s"), v85));
        StringForApplicationState = (__CFString *)CMSMUtility_GetStringForApplicationState(objc_msgSend(v3, "applicationState"));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("appState ="), StringForApplicationState);
        v87 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), CMSMUtility_GetFlagsString(objc_msgSend(v3, "currentlyControllingFlags")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("controlling flags ="), v87);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("usingCamera ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), objc_msgSend(v3, "isUsingCamera")));
        v88 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isNowPlayingEligible ="), v88);
        v89 = (void *)MEMORY[0x1E0CB3940];
        v90 = objc_msgSend(v3, "isDucked");
        v91 = "not ducked";
        if (v90)
          v91 = "DUCKED";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("ducking state ="), (__CFString *)objc_msgSend(v89, "stringWithFormat:", CFSTR("%s"), v91));
        v92 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "silentMuted"))
          v93 = "Yes";
        else
          v93 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("silentMuted ="), (__CFString *)objc_msgSend(v92, "stringWithFormat:", CFSTR("%s"), v93));
        v94 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "duckedOnVAD"))
          v95 = "Yes";
        else
          v95 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("duckedOnVAD ="), (__CFString *)objc_msgSend(v94, "stringWithFormat:", CFSTR("%s"), v95));
        v96 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "auditTokenSetByClient"))
          v97 = "Yes";
        else
          v97 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("auditTokenSetByClient ="), (__CFString *)objc_msgSend(v96, "stringWithFormat:", CFSTR("%s"), v97));
        v98 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), CMSUtility_GetCurrentAudioDestination(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("Current Audio Destination ="), v98);
        v99 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersConcurrentAirPlayAudio"))
          v100 = CFSTR("YES");
        else
          v100 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("prefersConcurrentAirPlayAudio ="), (__CFString *)objc_msgSend(v99, "stringWithFormat:", CFSTR("%@"), v100));
        v101 = (void *)MEMORY[0x1E0CB3940];
        IsPAAccessLoggingEnabled = MX_PrivacyAccounting_IsPAAccessLoggingEnabled();
        v103 = "Enabled";
        if (!IsPAAccessLoggingEnabled)
          v103 = "Disabled";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("PAAccessLoggingEnabled(lazy init) ="), (__CFString *)objc_msgSend(v101, "stringWithFormat:", CFSTR("%s"), v103));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("Ducker sources = "), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "duckingSourceList")));
        v104 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "audioQueueDuckVolume");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("audioQueueDuckVolume = "), (__CFString *)objc_msgSend(v104, "stringWithFormat:", CFSTR("%f"), v105));
        v106 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "audioQueueFadeDuration");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("audioQueueFadeDuration = "), (__CFString *)objc_msgSend(v106, "stringWithFormat:", CFSTR("%f"), v107));
        v108 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "lastDuckVolumeApplied");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("lastDuckVolumeApplied = "), (__CFString *)objc_msgSend(v108, "stringWithFormat:", CFSTR("%f"), v109));
        v110 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "interruptionFadeDurationSetByClient"))
          v111 = "Yes";
        else
          v111 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("interruptionFadeDurationSetByClient ="), (__CFString *)objc_msgSend(v110, "stringWithFormat:", CFSTR("%s"), v111));
        v112 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "duckFadeDurationSetByClient"))
          v113 = "Yes";
        else
          v113 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("duckFadeDurationSetByClient ="), (__CFString *)objc_msgSend(v112, "stringWithFormat:", CFSTR("%s"), v113));
        v114 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "unduckFadeDurationSetByClient"))
          v115 = "Yes";
        else
          v115 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("unduckFadeDurationSetByClient ="), (__CFString *)objc_msgSend(v114, "stringWithFormat:", CFSTR("%s"), v115));
        v116 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "duckToLevelScalarSetByClient"))
          v117 = "Yes";
        else
          v117 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("duckToLevelScalarSetByClient ="), (__CFString *)objc_msgSend(v116, "stringWithFormat:", CFSTR("%s"), v117));
        v118 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "unduckToLevelScalarSetByClient"))
          v119 = CFSTR("Yes");
        else
          v119 = CFSTR("No");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("unduckToLevelScalarSetByClient = "), (__CFString *)objc_msgSend(v118, "stringWithFormat:", CFSTR("%@"), v119));
        v120 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "duckToLevelDBSetByClient"))
          v121 = "Yes";
        else
          v121 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("duckToLevelDBSetByClient ="), (__CFString *)objc_msgSend(v120, "stringWithFormat:", CFSTR("%s"), v121));
        v122 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "addSharedAudioRouteToRoutablePorts"))
          v123 = "Yes";
        else
          v123 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("addSharedAudioRouteToRoutablePorts ="), (__CFString *)objc_msgSend(v122, "stringWithFormat:", CFSTR("%s"), v123));
        v124 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "needToEndInterruption"))
          v125 = "Yes";
        else
          v125 = "No";
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("needToEndInterruption ="), (__CFString *)objc_msgSend(v124, "stringWithFormat:", CFSTR("%s"), v125));
        v126 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "areBothBudsInEarForA2DPPortBeforeInterrupting"))
          v127 = CFSTR("Yes");
        else
          v127 = CFSTR("No");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("areBothBudsInEarForA2DPPortBeforeInterrupting ="), (__CFString *)objc_msgSend(v126, "stringWithFormat:", CFSTR("%@"), v127));
        v128 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "triggeredRemoteInterruption"))
          v129 = "Yes";
        else
          v129 = "No";
        v130 = v3;
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("triggeredRemoteInterruption ="), (__CFString *)objc_msgSend(v128, "stringWithFormat:", CFSTR("%s"), v129));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isPlayingStartTime ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "isPlayingStartTime")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isPlayingStopTime ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "isPlayingStopTime")));
        v131 = (void *)MEMORY[0x1E0CB3940];
        v132 = objc_msgSend(v3, "mixesWithEveryone");
        v133 = CFSTR("NO");
        if (v132)
          v133 = CFSTR("YES");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("mixesWithEveryone ="), (__CFString *)objc_msgSend(v131, "stringWithFormat:", CFSTR("%@"), v133));
        v134 = (void *)MEMORY[0x1E0CB3940];
        if (CMSMUtility_IsInputAllowedForCategory((const void *)objc_msgSend(v3, "audioCategory")))
          CurrentInputVADUID = CMSUtility_GetCurrentInputVADUID(v3);
        else
          CurrentInputVADUID = 0;
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("input VAD ="), (__CFString *)objc_msgSend(v134, "stringWithFormat:", CFSTR("%@"), CurrentInputVADUID));
        v136 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "hasPhoneCallBehavior"))
          v137 = CFSTR("YES");
        else
          v137 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("hasPhoneCallBehavior ="), (__CFString *)objc_msgSend(v136, "stringWithFormat:", CFSTR("%@"), v137));
        v138 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "hasFetchedBackgroundPrivileges"))
          v139 = CFSTR("YES");
        else
          v139 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("hasFetchedBackgroundPrivileges ="), (__CFString *)objc_msgSend(v138, "stringWithFormat:", CFSTR("%@"), v139));
        v140 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "enableBluetoothRecordingPreference"))
          v141 = CFSTR("YES");
        else
          v141 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("enableBluetoothRecordingPreference ="), (__CFString *)objc_msgSend(v140, "stringWithFormat:", CFSTR("%@"), v141));
        v142 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "enableBluetoothRecordingPreferenceSetByClient"))
          v143 = CFSTR("YES");
        else
          v143 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("enableBluetoothRecordingPreferenceSetByClient ="), (__CFString *)objc_msgSend(v142, "stringWithFormat:", CFSTR("%@"), v143));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("defaultBuiltInRoutePreference ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "defaultBuiltInRoutePreference")));
        v144 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "defaultBuiltInRoutePreferenceSetByClient"))
          v145 = CFSTR("YES");
        else
          v145 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("defaultBuiltInRoutePreferenceSetByClient ="), (__CFString *)objc_msgSend(v144, "stringWithFormat:", CFSTR("%@"), v145));
        v146 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersSpeechDetectEnabled"))
          v147 = CFSTR("YES");
        else
          v147 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("prefersSpeechDetectEnabled = "), (__CFString *)objc_msgSend(v146, "stringWithFormat:", CFSTR("%@"), v147));
        v148 = (void *)MEMORY[0x1E0CB3940];
        if (-[MXSessionManager doesSessionPreferInterruptionOnRouteDisconnect:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "doesSessionPreferInterruptionOnRouteDisconnect:", v3))
        {
          v149 = CFSTR("YES");
        }
        else
        {
          v149 = CFSTR("NO");
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("prefersInterruptionOnRouteDisconnect (actual) = "), (__CFString *)objc_msgSend(v148, "stringWithFormat:", CFSTR("%@"), v149));
        v150 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersInterruptionOnRouteDisconnect"))
          v151 = CFSTR("YES");
        else
          v151 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("prefersInterruptionOnRouteDisconnect = "), (__CFString *)objc_msgSend(v150, "stringWithFormat:", CFSTR("%@"), v151));
        v152 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "prefersInterruptionOnRouteDisconnectSetByClient"))
          v153 = CFSTR("YES");
        else
          v153 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("prefersInterruptionOnRouteDisconnectSetByClient = "), (__CFString *)objc_msgSend(v152, "stringWithFormat:", CFSTR("%@"), v153));
        v154 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "wasActiveWhenDeviceOwnershipRelinquished"))
          v155 = CFSTR("YES");
        else
          v155 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("wasActiveWhenDeviceOwnershipRelinquished ="), (__CFString *)objc_msgSend(v154, "stringWithFormat:", CFSTR("%@"), v155));
        v156 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "isRecordingMutedForRemoteDevice"))
          v157 = CFSTR("YES");
        else
          v157 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("isRecordingMutedForRemoteDevice ="), (__CFString *)objc_msgSend(v156, "stringWithFormat:", CFSTR("%@"), v157));
        v158 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "shouldMuteBeAppliedToRemoteDevice"))
          v159 = CFSTR("YES");
        else
          v159 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("shouldMuteBeAppliedToRemoteDevice ="), (__CFString *)objc_msgSend(v158, "stringWithFormat:", CFSTR("%@"), v159));
        v160 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "doesGameAudioNeedToBeSpatialized"))
          v161 = CFSTR("YES");
        else
          v161 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("doesGameAudioNeedToBeSpatialized ="), (__CFString *)objc_msgSend(v160, "stringWithFormat:", CFSTR("%@"), v161));
        v162 = (void *)MEMORY[0x1E0CB3940];
        if (objc_msgSend(v3, "bypassSystemSpatialAudioForGame"))
          v163 = CFSTR("YES");
        else
          v163 = CFSTR("NO");
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("bypassSystemSpatialAudioForGame ="), (__CFString *)objc_msgSend(v162, "stringWithFormat:", CFSTR("%@"), v163));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, CFSTR("timestampWhenMostRecentlyActivated ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend(v3, "timestampWhenMostRecentlyActivated")));
        CMSMDebugUtility_DumpOneLineAndResetString(v71);
        if (objc_msgSend(v3, "playbackAssertionRef")
          || objc_msgSend(v3, "resumeAssertionRef")
          || objc_msgSend((id)objc_msgSend(v3, "hostProcessPlaybackAssertions"), "count"))
        {
          if (dword_1EE2B3F38)
          {
            LODWORD(v227) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v164 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v165 = v227;
            if (os_log_type_enabled(v164, type[0]))
              v166 = v165;
            else
              v166 = v165 & 0xFFFFFFFE;
            if (v166)
            {
              v239 = 136315138;
              v240 = "CMSMDebugUtility_DumpSessionStateInfo";
              LODWORD(v209) = 12;
              v205 = (os_log_type_t *)&v239;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(v3, "playbackAssertionRef", v205) && dword_1EE2B3F38)
          {
            LODWORD(v227) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v167 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v168 = v227;
            if (os_log_type_enabled(v167, type[0]))
              v169 = v168;
            else
              v169 = v168 & 0xFFFFFFFE;
            if (v169)
            {
              v170 = objc_msgSend(v3, "playbackAssertionRef");
              v171 = objc_msgSend((id)objc_msgSend(v3, "playbackAssertionRef"), "explanation");
              v239 = 136315650;
              v240 = "CMSMDebugUtility_DumpSessionStateInfo";
              v241 = 2048;
              v242 = v170;
              v243 = 2114;
              v244 = v171;
              LODWORD(v209) = 32;
              v206 = &v239;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(v3, "resumeAssertionRef", v206) && dword_1EE2B3F38)
          {
            LODWORD(v227) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v172 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v173 = v227;
            if (os_log_type_enabled(v172, type[0]))
              v174 = v173;
            else
              v174 = v173 & 0xFFFFFFFE;
            if (v174)
            {
              v175 = objc_msgSend(v3, "resumeAssertionRef");
              v176 = objc_msgSend((id)objc_msgSend(v3, "resumeAssertionRef"), "explanation");
              v239 = 136315650;
              v240 = "CMSMDebugUtility_DumpSessionStateInfo";
              v241 = 2048;
              v242 = v175;
              v243 = 2114;
              v244 = v176;
              LODWORD(v209) = 32;
              v207 = &v239;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend((id)objc_msgSend(v3, "hostProcessPlaybackAssertions", v207), "count"))
          {
            if (dword_1EE2B3F38)
            {
              LODWORD(v227) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v177 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v178 = v227;
              if (os_log_type_enabled(v177, type[0]))
                v179 = v178;
              else
                v179 = v178 & 0xFFFFFFFE;
              if (v179)
              {
                v239 = 136315138;
                v240 = "CMSMDebugUtility_DumpSessionStateInfo";
                LODWORD(v209) = 12;
                v205 = (os_log_type_t *)&v239;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v180 = (void *)objc_msgSend(v3, "hostProcessPlaybackAssertions", v205);
            v181 = objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", &v227, v245, 16);
            if (v181)
            {
              v182 = v181;
              v183 = *(_QWORD *)v228;
              do
              {
                for (i = 0; i != v182; ++i)
                {
                  if (*(_QWORD *)v228 != v183)
                    objc_enumerationMutation(v180);
                  v185 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * i);
                  v186 = objc_msgSend((id)objc_msgSend(v130, "hostProcessPlaybackAssertions", v205), "objectForKey:", v185);
                  if (dword_1EE2B3F38)
                  {
                    v187 = (void *)v186;
                    v226 = 0;
                    v225 = OS_LOG_TYPE_DEFAULT;
                    v188 = v0;
                    v189 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v190 = v226;
                    if (os_log_type_enabled(v189, v225))
                      v191 = v190;
                    else
                      v191 = v190 & 0xFFFFFFFE;
                    if (v191)
                    {
                      *(_DWORD *)type = 136315394;
                      v234 = "CMSMDebugUtility_DumpSessionStateInfo";
                      v235 = 2114;
                      v236 = v185;
                      LODWORD(v209) = 22;
                      v205 = type;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    if (dword_1EE2B3F38)
                    {
                      v226 = 0;
                      v225 = OS_LOG_TYPE_DEFAULT;
                      v192 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v193 = v226;
                      if (os_log_type_enabled(v192, v225))
                        v194 = v193;
                      else
                        v194 = v193 & 0xFFFFFFFE;
                      if (v194)
                      {
                        v195 = objc_msgSend(v187, "explanation");
                        *(_DWORD *)type = 136315650;
                        v234 = "CMSMDebugUtility_DumpSessionStateInfo";
                        v235 = 2048;
                        v236 = v187;
                        v237 = 2114;
                        v238 = v195;
                        LODWORD(v209) = 32;
                        v205 = type;
                        _os_log_send_and_compose_impl();
                      }
                      v0 = v188;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                  v130 = v216;
                }
                v182 = objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", &v227, v245, 16);
              }
              while (v182);
            }
          }
        }
        if (dword_1EE2B3F38)
        {
          LODWORD(v227) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v196 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v197 = v227;
          if (os_log_type_enabled(v196, type[0]))
            v198 = v197;
          else
            v198 = v197 & 0xFFFFFFFE;
          if (v198)
          {
            v239 = 136315138;
            v240 = "CMSMDebugUtility_DumpSessionListOneTime";
            LODWORD(v209) = 12;
            v205 = (os_log_type_t *)&v239;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v199 = objc_msgSend(v214, "countByEnumeratingWithState:objects:count:", &v217, v231, 16, v205);
        if (v199)
        {
          v200 = v199;
          v201 = *(_QWORD *)v218;
          do
          {
            for (j = 0; j != v200; ++j)
            {
              if (*(_QWORD *)v218 != v201)
                objc_enumerationMutation(v214);
              objc_msgSend(*(id *)(*((_QWORD *)&v217 + 1) + 8 * j), "dumpInfo");
            }
            v200 = objc_msgSend(v214, "countByEnumeratingWithState:objects:count:", &v217, v231, 16);
          }
          while (v200);
        }

        v2 = v215 + 1;
      }
      while (v215 + 1 != v213);
      v213 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v221, v232, 16);
    }
    while (v213);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  -[MXSessionManagerSecure logDebugInfo](+[MXSessionManagerSecure sharedInstance](MXSessionManagerSecure, "sharedInstance"), "logDebugInfo");
  -[MXMediaEndowmentManager dumpDebugInfo](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "dumpDebugInfo");
  +[MXSystemController dumpInfoOfMXSystemControllers](MXSystemController, "dumpInfoOfMXSystemControllers");
  -[MXNowPlayingAppManager dumpNowPlayingAppInfo](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "dumpNowPlayingAppInfo");
  -[MXAppProtectionManager dumpDebugInfo](+[MXAppProtectionManager sharedInstance](MXAppProtectionManager, "sharedInstance"), "dumpDebugInfo");
  objc_autoreleasePoolPop(context);
}

uint64_t CMSMDebugUtility_DumpDeviceState()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3F38)
    {
      v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  PVMGetVibeIntensityPreference();
  if (dword_1EE2B3F38)
  {
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFPreferencesGetAppBooleanValue(CFSTR("celestialToMediaExperienceDomainMigrationFullyCompleted"), CFSTR("com.apple.mediaexperience"), 0);
  if (dword_1EE2B3F38)
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = CFPreferencesGetAppBooleanValue(CFSTR("celestialToMediaExperienceDomainMigrationCompleted"), CFSTR("com.apple.mediaexperience"), 0);
  if (dword_1EE2B3F38)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3F38)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1EE2B3F38)
      {
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1EE2B3F38)
        {
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          return fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

void CMSMDebugUtility_DumpTriangleInfo()
{
  void *v0;
  CFArrayRef v1;
  id v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v4;
  const __CFString *v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  const __CFString *v9;
  __CFString *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  const __CFString *v26;
  uint64_t v27;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E30A1A48);
  v1 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
  v2 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("\nSharedAudioRoutePortIds = "), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v1, v27));
  v4 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsSomeClientPlayingOverSharedAudioRouteOnRemote ="), (__CFString *)objc_msgSend(v4, "stringWithFormat:", CFSTR("%@"), v5));
  v6 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo())
    v7 = CFSTR("YES");
  else
    v7 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsWaitingForGizmoPlayingInfo ="), (__CFString *)objc_msgSend(v6, "stringWithFormat:", CFSTR("%@"), v7));
  v8 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
    v9 = CFSTR("YES");
  else
    v9 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("DidRemoteReplyWithInitialPlayingInfo ="), (__CFString *)objc_msgSend(v8, "stringWithFormat:", CFSTR("%@"), v9));
  v10 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), CMSM_IDSConnection_GetRemotePlayingInfo());
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("RemotePlayingInfo ="), v10);
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("nearbyDeviceInfo ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v2));
  v11 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
    v12 = CFSTR("YES");
  else
    v12 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsSharedAudioRouteConnectedToLocalAndRemote ="), (__CFString *)objc_msgSend(v11, "stringWithFormat:", CFSTR("%@"), v12));
  v13 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal())
    v14 = CFSTR("YES");
  else
    v14 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsSharedAudioRouteConnectedToLocal ="), (__CFString *)objc_msgSend(v13, "stringWithFormat:", CFSTR("%@"), v14));
  v15 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
    v16 = CFSTR("YES");
  else
    v16 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsSharedAudioRouteConnectedToRemote ="), (__CFString *)objc_msgSend(v15, "stringWithFormat:", CFSTR("%@"), v16));
  v17 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsRemoteUsingSharedAudioRoute())
    v18 = CFSTR("YES");
  else
    v18 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsRemoteUsingSharedAudioRoute ="), (__CFString *)objc_msgSend(v17, "stringWithFormat:", CFSTR("%@"), v18));
  v19 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
    v20 = CFSTR("YES");
  else
    v20 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsNearbyPairedDevicePresent ="), (__CFString *)objc_msgSend(v19, "stringWithFormat:", CFSTR("%@"), v20));
  v21 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected())
    v22 = CFSTR("YES");
  else
    v22 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsNearbyPairedDevicePresentAndConnected ="), (__CFString *)objc_msgSend(v21, "stringWithFormat:", CFSTR("%@"), v22));
  v23 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired())
    v24 = CFSTR("YES");
  else
    v24 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsTimerForRemotePlayingInfoReplyExpired ="), (__CFString *)objc_msgSend(v23, "stringWithFormat:", CFSTR("%@"), v24));
  v25 = (void *)MEMORY[0x1E0CB3940];
  if (CMSM_IDSConnection_IsPairedToAnotherDevice())
    v26 = CFSTR("YES");
  else
    v26 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsPairedToAnotherDevice ="), (__CFString *)objc_msgSend(v25, "stringWithFormat:", CFSTR("%@"), v26));
  CMSMDebugUtility_DumpOneLineAndResetString(v0);

}

uint64_t CMSMDebugUtility_DumpDetailedRouteDescriptions()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  __CFString *VADNameForVADID;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  NSDictionary *obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  os_log_type_t type;
  unsigned int v24;
  int v25;
  const char *v26;
  __int16 v27;
  __CFString *v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    v24 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = -[MXAdditiveRoutingManager detailedRoutesDescription](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance", v14, v16), "detailedRoutesDescription");
  result = -[NSDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)v20;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v20 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v4);
        v6 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance", v15, v17), "copyDetailedRouteDescription:", objc_msgSend(v5, "unsignedIntValue"));
        if (dword_1EE2B3F38)
        {
          v24 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v8 = v24;
          if (os_log_type_enabled(v7, type))
            v9 = v8;
          else
            v9 = v8 & 0xFFFFFFFE;
          if (v9)
          {
            VADNameForVADID = CMSMUtility_GetVADNameForVADID(objc_msgSend(v5, "unsignedIntValue"));
            v25 = 136315394;
            v26 = "CMSMDebugUtility_DumpDetailedRouteDescriptions";
            v27 = 2114;
            v28 = VADNameForVADID;
            LODWORD(v17) = 22;
            v15 = &v25;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMDebugUtility_PrintDictionary(v6);
        if (dword_1EE2B3F38)
        {
          v24 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v12 = v24;
          if (os_log_type_enabled(v11, type))
            v13 = v12;
          else
            v13 = v12 & 0xFFFFFFFE;
          if (v13)
          {
            v25 = 136315138;
            v26 = "CMSMDebugUtility_DumpDetailedRouteDescriptions";
            LODWORD(v17) = 12;
            v15 = &v25;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }

        ++v4;
      }
      while (v2 != v4);
      result = -[NSDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
      v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t CMSMDebugUtility_DumpDevicesSampleRates()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSDictionary *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  __CFString *VADNameForVADID;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  os_log_type_t type;
  unsigned int v25;
  int v26;
  const char *v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  uint64_t v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    v25 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v1 = -[MXSessionManager devicesSampleRates](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v15, v17), "devicesSampleRates");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  result = -[NSDictionary countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (result)
  {
    v3 = result;
    v19 = *(_QWORD *)v21;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v21 != v19)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v4);
        v6 = -[NSDictionary objectForKey:](v1, "objectForKey:", v5, v16, v18);
        if (dword_1EE2B3F38)
        {
          v7 = v6;
          v25 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v9 = v25;
          if (os_log_type_enabled(v8, type))
            v10 = v9;
          else
            v10 = v9 & 0xFFFFFFFE;
          if (v10)
          {
            VADNameForVADID = CMSMUtility_GetVADNameForVADID(objc_msgSend(v5, "unsignedIntValue"));
            v26 = 136315650;
            v27 = "CMSMDebugUtility_DumpDevicesSampleRates";
            v28 = 2114;
            v29 = VADNameForVADID;
            v30 = 2114;
            v31 = v7;
            LODWORD(v18) = 32;
            v16 = &v26;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        ++v4;
      }
      while (v3 != v4);
      result = -[NSDictionary countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
      v3 = result;
    }
    while (result);
  }
  if (dword_1EE2B3F38)
  {
    v25 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v13 = v25;
    if (os_log_type_enabled(v12, type))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if (v14)
    {
      v26 = 136315138;
      v27 = "CMSMDebugUtility_DumpDevicesSampleRates";
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void CMSMDebugUtility_DumpMutedSessionBundleIDsList()
{
  NSSet *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled())
  {
    if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
    {
      v0 = -[MXSessionManager mutedSessionBundleIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mutedSessionBundleIDs");
      if (-[NSSet count](v0, "count"))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMDebugUtility_PrintCollection(v0);
      }
    }
  }
}

uint64_t CMSMDebugUtility_DumpDeviceInfo()
{
  void *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  const __CFString *v22;
  uint64_t v24;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E30A1A48);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("Device class ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v2));

  v3 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("Device Name ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v3));

  v4 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("Region Code ="), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v4));

  v5 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_IsMediaserverd())
    v6 = CFSTR("YES");
  else
    v6 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsMediaserverd ="), (__CFString *)objc_msgSend(v5, "stringWithFormat:", CFSTR("%@"), v6, v24));
  v7 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_IsAudiomxd())
    v8 = CFSTR("YES");
  else
    v8 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsAudiomxd ="), (__CFString *)objc_msgSend(v7, "stringWithFormat:", CFSTR("%@"), v8));
  v9 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAniPhone())
    v10 = CFSTR("YES");
  else
    v10 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAniPhone ="), (__CFString *)objc_msgSend(v9, "stringWithFormat:", CFSTR("%@"), v10));
  v11 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAniPad())
    v12 = CFSTR("YES");
  else
    v12 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAniPad ="), (__CFString *)objc_msgSend(v11, "stringWithFormat:", CFSTR("%@"), v12));
  v13 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAnAppleTV())
    v14 = CFSTR("YES");
  else
    v14 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAnAppleTV ="), (__CFString *)objc_msgSend(v13, "stringWithFormat:", CFSTR("%@"), v14));
  v15 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAnAppleWatch())
    v16 = CFSTR("YES");
  else
    v16 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAnAppleWatch ="), (__CFString *)objc_msgSend(v15, "stringWithFormat:", CFSTR("%@"), v16));
  v17 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAnInternalBuild())
    v18 = CFSTR("YES");
  else
    v18 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAnInternalBuild ="), (__CFString *)objc_msgSend(v17, "stringWithFormat:", CFSTR("%@"), v18));
  v19 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_ItsAHomePod())
    v20 = CFSTR("YES");
  else
    v20 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("ItsAHomePod ="), (__CFString *)objc_msgSend(v19, "stringWithFormat:", CFSTR("%@"), v20));
  v21 = (void *)MEMORY[0x1E0CB3940];
  if (CMSMDeviceState_IsAVirtualDevice())
    v22 = CFSTR("YES");
  else
    v22 = CFSTR("NO");
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, CFSTR("IsVirtualDevice ="), (__CFString *)objc_msgSend(v21, "stringWithFormat:", CFSTR("%@"), v22));
  return CMSMDebugUtility_DumpOneLineAndResetString(v0);
}

uint64_t CMSMDebugUtility_AppendFieldAndValue(uint64_t result, void *a2, __CFString *a3)
{
  void *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = (void *)result;
    if (a3)
      v5 = a3;
    else
      v5 = CFSTR("null");
    v6 = -[__CFString length](v5, "length");
    v7 = objc_msgSend(v4, "length");
    if ((unint64_t)(v7 + objc_msgSend(a2, "length") + v6) >= 0x321)
    {
      CMSMDebugUtility_DumpOneLineAndResetString(v4);
      objc_msgSend(v4, "appendString:", CFSTR("\ncontinued...\n"));
    }
    objc_msgSend(v4, "appendString:", a2);
    objc_msgSend(v4, "appendString:", CFSTR(" "));
    objc_msgSend(v4, "appendString:", v5);
    return objc_msgSend(v4, "appendString:", CFSTR(", "));
  }
  return result;
}

uint64_t CMSMDebugUtility_DumpOneLineAndResetString(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "length") && dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return objc_msgSend(a1, "setString:", &stru_1E30A1A48, v4, v5);
}

const __CFString *CMSMDebugUtility_GetSpeechDetechStyleString(unsigned int a1)
{
  if (a1 > 6)
    return CFSTR("Invalid");
  else
    return (const __CFString *)*((_QWORD *)&off_1E309D908 + (int)a1);
}

void CMSMDebugUtility_RegisterForCACentralStateDumping()
{
  if (kCMSession_LoadAudioToolboxRoutinesOnce != -1)
    dispatch_once_f(&kCMSession_LoadAudioToolboxRoutinesOnce, 0, (dispatch_function_t)cmsmLoadAudioToolboxRoutinesOnce);
  if (CACentralStateDumpRegisterSubsystem)
    CACentralStateDumpRegisterSubsystem(20, CFSTR("CMSession"), &__block_literal_global_45);
}

void *cmsmLoadAudioToolboxRoutinesOnce()
{
  void *result;

  result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 4);
  if (result)
  {
    result = dlsym(result, "CACentralStateDumpRegisterSubsystem");
    CACentralStateDumpRegisterSubsystem = result;
  }
  return result;
}

uint64_t FigRoutingContextCreateAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 4, a2, a3);
}

uint64_t FigRoutingContextCreateVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 5, a2, a3);
}

uint64_t FigRoutingContextCreatePerAppSecondDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 6, a2, a3);
}

uint64_t FigRoutingContextCopySystemMirroringContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(2u, a3);
}

uint64_t FigRoutingContextCopySidePlayContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xCu, a3);
}

uint64_t FigRoutingContextCopySystemRemotePoolContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(9u, a3);
}

uint64_t FigRoutingContextCopySystemAudioInputContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xDu, a3);
}

uint64_t FigRoutingContextCopySystemRemoteDisplayContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xEu, a3);
}

uint64_t FigRoutingContextCreateControlChannelOnlyContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 7, a2, a3);
}

uint64_t FigRoutingCopyDisplayMenuVideoContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xAu, a3);
}

uint64_t FigRoutingContextCreateSystemAudioContextInternal(const void *a1)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v4;

  if (FigRoutingContextCreateSystemAudioContextInternal_loggingToken == -1)
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  dispatch_once(&FigRoutingContextCreateSystemAudioContextInternal_loggingToken, &__block_literal_global_46);
  if (!a1)
    return 0;
LABEL_3:
  FigRoutingContextGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = CFRetain(a1);
    result = 0;
    *(_QWORD *)(DerivedStorage + 8) = v4;
    *(_DWORD *)DerivedStorage = 1;
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemMirroringContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 2;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemMusicContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 3;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSidePlayContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 12;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemVideoContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 11;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemRemotePoolContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 9;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemVideoDisplayMenu(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 10;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemInputContextInternal(uint64_t result)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef v3;

  if (result)
  {
    v1 = (const void *)result;
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v3 = CFRetain(v1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v3;
      *(_DWORD *)DerivedStorage = 13;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemRemoteDisplayInternal(const void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v5;

  result = 0;
  if (a1 && a2)
  {
    FigRoutingContextGetClassID();
    result = CMDerivedObjectCreate();
    if (!(_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v5 = CFRetain(a1);
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v5;
      *(_DWORD *)DerivedStorage = 14;
    }
  }
  return result;
}

void routingContext_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  NSObject *SharedQueue;
  const void *v4;
  _QWORD v5[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __routingContext_Finalize_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = v2;
  MXDispatchAsync((uint64_t)"routingContext_Finalize", (uint64_t)"FigRoutingContext.m", 184, 0, 0, SharedQueue, (uint64_t)v5);
  v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *routingContext_CopyDebugDescription(uint64_t a1)
{
  int *DerivedStorage;
  __CFString *Mutable;
  __CFString *v4;
  uint64_t v5;
  const char *v6;

  DerivedStorage = (int *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  v5 = *DerivedStorage;
  if (v5 > 0xE)
    v6 = "UNKNOWN";
  else
    v6 = off_1E309D940[v5];
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRoutingContext %p> %s uuid %@"), a1, v6, *((_QWORD *)DerivedStorage + 1));
  return v4;
}

uint64_t routingContext_SetProperty()
{
  return 4294954512;
}

void routingContext_collectPickedEndpoints(int a1, CFDictionaryRef theDict, __CFArray *a3)
{
  const __CFArray *Value;
  const __CFArray *v5;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  int v9;
  CFArrayRef v10;
  CFIndex v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  CFArrayRef theArray;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!theDict)
    goto LABEL_6;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("CurrentEndpoints"));
  v5 = Value;
  if (!Value)
    goto LABEL_7;
  if (CFArrayGetCount(Value) >= 1 && (ValueAtIndex = CFArrayGetValueAtIndex(v5, 0)) != 0)
    v5 = (const __CFArray *)CFRetain(ValueAtIndex);
  else
LABEL_6:
    v5 = 0;
LABEL_7:
  theArray = 0;
  if (!a3)
  {
    if (dword_1EE2B3E08)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_27:
    if (!v5)
      return;
    goto LABEL_28;
  }
  if (v5)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v5))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v8)
      {
        v9 = v8(CMBaseObject, *MEMORY[0x1E0CA43D0], 0, &theArray);
        v10 = theArray;
        if (v9)
        {
LABEL_25:
          if (v10)
            CFRelease(v10);
          goto LABEL_27;
        }
        if (theArray)
        {
          v11 = 0;
          v12 = *MEMORY[0x1E0CA4468];
          while (CFArrayGetCount(v10) > v11)
          {
            cf[0] = 0;
            v13 = CFArrayGetValueAtIndex(theArray, v11);
            v14 = FigEndpointGetCMBaseObject();
            v15 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v15 && !v15(v14, v12, 0, cf))
              CFArrayAppendValue(a3, v13);
            if (cf[0])
              CFRelease(cf[0]);
            ++v11;
            v10 = theArray;
            if (!theArray)
              goto LABEL_27;
          }
          v10 = theArray;
          goto LABEL_25;
        }
      }
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)v5))
    {
      CFArrayAppendValue(a3, v5);
    }
LABEL_28:
    CFRelease(v5);
    return;
  }
  if (dword_1EE2B3E08)
  {
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t routingContext_SelectRoute(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  NSObject *SharedQueue;
  void *v9;
  _QWORD v11[7];

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __routingContext_SelectRoute_block_invoke;
    v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = a1;
    v11[5] = a2;
    v11[6] = a3;
    MXDispatchAsync((uint64_t)"routingContext_SelectRoute", (uint64_t)"FigRoutingContext.m", 581, 0, 0, SharedQueue, (uint64_t)v11);
    v9 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_SelectRoute", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v9);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRouteDescriptor(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  NSObject *SharedQueue;
  void *v9;
  _QWORD v11[7];

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 1);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __routingContext_SelectRouteDescriptor_block_invoke;
    v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = a1;
    v11[5] = a2;
    v11[6] = a3;
    MXDispatchAsync((uint64_t)"routingContext_SelectRouteDescriptor", (uint64_t)"FigRoutingContext.m", 652, 0, 0, SharedQueue, (uint64_t)v11);
    v9 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_SelectRouteDescriptor", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v9);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopyRoute(uint64_t a1, uint64_t a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  NSObject *SharedQueue;
  void *v7;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v11 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __routingContext_CopyRoute_block_invoke;
    v9[3] = &unk_1E3098D60;
    v9[4] = &v10;
    v9[5] = a1;
    v9[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyRoute", (uint64_t)"FigRoutingContext.m", 762, 0, 0, SharedQueue, (uint64_t)v9);
    v7 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_CopyRoute", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v7);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193730258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CopySelectedRouteDescriptor(uint64_t a1, _QWORD *a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;
  const void *ValueAtIndex;
  void *v7;
  CFArrayRef theArray;

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 1);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    theArray = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    IsOperationOnSystemInputContextAllowedInternal = FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors(*(_QWORD *)(DerivedStorage + 8), (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        *a2 = ValueAtIndex;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    v7 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_CopySelectedRouteDescriptor", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v7);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRoutes(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  NSObject *SharedQueue;
  void *v10;
  _QWORD v12[8];

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __routingContext_SelectRoutes_block_invoke;
    v12[3] = &__block_descriptor_64_e5_v8__0l;
    v12[4] = a2;
    v12[5] = DerivedStorage;
    v12[6] = a3;
    v12[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_SelectRoutes", (uint64_t)"FigRoutingContext.m", 1203, 0, 0, SharedQueue, (uint64_t)v12);
    v10 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_SelectRoutes", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v10);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRouteDescriptors(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  void *v10;
  _QWORD v12[8];

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __routingContext_SelectRouteDescriptors_block_invoke;
    v12[3] = &__block_descriptor_64_e5_v8__0l;
    v12[4] = a2;
    v12[5] = DerivedStorage;
    v12[6] = a3;
    v12[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_SelectRouteDescriptors", (uint64_t)"FigRoutingContext.m", 1294, 0, 0, SharedQueue, (uint64_t)v12);
    v10 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_SelectRouteDescriptors", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v10);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopySelectedRoutes(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t UpTimeNanoseconds;
  NSObject *SharedQueue;
  uint64_t *v8;
  void *v9;
  const void *v10;
  _QWORD v12[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v14 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __routingContext_CopySelectedRoutes_block_invoke;
    v12[3] = &unk_1E309C7E0;
    v12[4] = &v13;
    v12[5] = &v17;
    v12[6] = DerivedStorage;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedRoutes", (uint64_t)"FigRoutingContext.m", 1363, 0, 0, SharedQueue, (uint64_t)v12);
    if (!*((_DWORD *)v14 + 6))
    {
      v8 = v18;
      *a2 = v18[3];
      v8[3] = 0;
    }
    v9 = (void *)MEMORY[0x194035B20]();
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "routingContext_CopySelectedRoutes", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
    objc_autoreleasePoolPop(v9);
    v10 = (const void *)v18[3];
    if (v10)
    {
      CFRelease(v10);
      v18[3] = 0;
    }
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v14 + 6);
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_19373071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CopySelectedRouteForRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v9 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __routingContext_CopySelectedRouteForRemoteControl_block_invoke;
    v7[3] = &unk_1E3098D60;
    v7[4] = &v8;
    v7[5] = DerivedStorage;
    v7[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedRouteForRemoteControl", (uint64_t)"FigRoutingContext.m", 1600, 0, 0, SharedQueue, (uint64_t)v7);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_19373082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_AddToSelectedRoutes(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v16[8];
  os_log_type_t type;
  int v18;
  CFTypeRef v19;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v19 = 0;
    cf[0] = 0;
    if (a2)
    {
      v8 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v10)
        v10(CMBaseObject, *MEMORY[0x1E0CA4348], v8, cf);
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v12)
        v12(v11, *MEMORY[0x1E0CA4258], v8, &v19);
    }
    if (dword_1EE2B3E08)
    {
      v18 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __routingContext_AddToSelectedRoutes_block_invoke;
    v16[3] = &__block_descriptor_64_e5_v8__0l;
    v16[4] = a2;
    v16[5] = DerivedStorage;
    v16[6] = a3;
    v16[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_AddToSelectedRoutes", (uint64_t)"FigRoutingContext.m", 1636, 0, 0, SharedQueue, (uint64_t)v16);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_AddToSelectedRouteDescriptors(const void *a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *Value;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v13[10];
  os_log_type_t type;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v8 = DerivedStorage;
      v16 = 0;
      v17 = &v16;
      v18 = 0x2020000000;
      v19 = 0;
      if (a2)
      {
        Value = CFDictionaryGetValue(a2, CFSTR("RouteName"));
        v17[3] = (uint64_t)Value;
        v10 = CFDictionaryGetValue(a2, CFSTR("RouteUID"));
      }
      else
      {
        v10 = 0;
      }
      if (dword_1EE2B3E08)
      {
        v15 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a1)
        CFRetain(a1);
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __routingContext_AddToSelectedRouteDescriptors_block_invoke;
      v13[3] = &unk_1E309C3F8;
      v13[4] = &v16;
      v13[5] = a2;
      v13[6] = v8;
      v13[7] = v10;
      v13[8] = a3;
      v13[9] = a1;
      MXDispatchAsync((uint64_t)"routingContext_AddToSelectedRouteDescriptors", (uint64_t)"FigRoutingContext.m", 1708, 0, 0, SharedQueue, (uint64_t)v13);
      _Block_object_dispose(&v16, 8);
      return 0;
    }
    else
    {
      return 4294955276;
    }
  }
  return result;
}

void sub_193730DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_RemoveFromSelectedRoutes(const void *a1, const void *a2, const void *a3)
{
  uint64_t result;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  _QWORD v9[8];

  result = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
    {
      return 4294955269;
    }
    else
    {
      if (a1)
        CFRetain(a1);
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __routingContext_RemoveFromSelectedRoutes_block_invoke;
      v9[3] = &__block_descriptor_64_e5_v8__0l;
      v9[4] = DerivedStorage;
      v9[5] = a2;
      v9[6] = a3;
      v9[7] = a1;
      MXDispatchAsync((uint64_t)"routingContext_RemoveFromSelectedRoutes", (uint64_t)"FigRoutingContext.m", 1811, 0, 0, SharedQueue, (uint64_t)v9);
      return 0;
    }
  }
  return result;
}

uint64_t routingContext_RemoveFromSelectedRouteDescriptors(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v13[11];
  os_log_type_t type;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 1);
  *((_DWORD *)v17 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (a1)
        CFRetain(a1);
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      if (a2)
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("RouteName"));
        v9 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("RouteUID"));
      }
      else
      {
        Value = 0;
        v9 = 0;
      }
      if (dword_1EE2B3E08)
      {
        v15 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __routingContext_RemoveFromSelectedRouteDescriptors_block_invoke;
      v13[3] = &unk_1E30996D8;
      v13[6] = DerivedStorage;
      v13[7] = Value;
      v13[8] = v9;
      v13[9] = a3;
      v13[4] = &v16;
      v13[5] = a2;
      v13[10] = a1;
      MXDispatchAsync((uint64_t)"routingContext_RemoveFromSelectedRouteDescriptors", (uint64_t)"FigRoutingContext.m", 1876, 0, 0, SharedQueue, (uint64_t)v13);
      IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v17 + 6);
    }
    else
    {
      IsOperationOnSystemInputContextAllowedInternal = 4294955276;
    }
  }
  _Block_object_dispose(&v16, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_1937311A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v11 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __routingContext_CreateCommChannel_block_invoke;
    v9[3] = &unk_1E3099668;
    v9[4] = &v10;
    v9[5] = DerivedStorage;
    v9[6] = a2;
    v9[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CreateCommChannel", (uint64_t)"FigRoutingContext.m", 876, 0, 0, SharedQueue, (uint64_t)v9);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_1937312BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v15[11];
  os_log_type_t type;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v19 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2B3E08)
    {
      v17 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __routingContext_SendData_block_invoke;
    v15[3] = &unk_1E30996D8;
    v15[6] = a1;
    v15[7] = a4;
    v15[4] = &v18;
    v15[5] = DerivedStorage;
    v15[8] = a5;
    v15[9] = a2;
    v15[10] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_SendData", (uint64_t)"FigRoutingContext.m", 971, 0, 0, SharedQueue, (uint64_t)v15);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_1937314FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v8[7];
  os_log_type_t type;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v12 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2B3E08)
    {
      v10 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __routingContext_CloseCommChannel_block_invoke;
    v8[3] = &unk_1E3098D60;
    v8[4] = &v11;
    v8[5] = DerivedStorage;
    v8[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CloseCommChannel", (uint64_t)"FigRoutingContext.m", 1053, 0, 0, SharedQueue, (uint64_t)v8);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v12 + 6);
  }
  _Block_object_dispose(&v11, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193731724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *SharedQueue;
  _QWORD v15[11];
  os_log_type_t type;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v19 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2B3E08)
    {
      v17 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __routingContext_SendCommand_block_invoke;
    v15[3] = &unk_1E30996D8;
    v15[6] = a1;
    v15[7] = a4;
    v15[4] = &v18;
    v15[5] = DerivedStorage;
    v15[8] = a5;
    v15[9] = a2;
    v15[10] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_SendCommand", (uint64_t)"FigRoutingContext.m", 1143, 0, 0, SharedQueue, (uint64_t)v15);
    IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_19373196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  NSObject *DataTransmissionQueue;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v12 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __routingContext_CreateCommChannelForDeviceID_block_invoke;
      v10[3] = &unk_1E3099668;
      v10[4] = &v11;
      v10[5] = a2;
      v10[6] = a3;
      v10[7] = a4;
      MXDispatchSync((uint64_t)"routingContext_CreateCommChannelForDeviceID", (uint64_t)"FigRoutingContext.m", 914, 0, 0, DataTransmissionQueue, (uint64_t)v10);
      IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v12 + 6);
    }
    else
    {
      IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v12 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v11, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193731AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  NSObject *DataTransmissionQueue;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v16 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __routingContext_SendDataForDeviceID_block_invoke;
      v14[3] = &unk_1E309C3F8;
      v14[4] = &v15;
      v14[5] = a2;
      v14[6] = a3;
      v14[7] = a4;
      v14[8] = a5;
      v14[9] = a6;
      MXDispatchSync((uint64_t)"routingContext_SendDataForDeviceID", (uint64_t)"FigRoutingContext.m", 1026, 0, 0, DataTransmissionQueue, (uint64_t)v14);
      IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v16 + 6);
    }
    else
    {
      IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v16 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v15, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193731BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  NSObject *DataTransmissionQueue;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v10 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __routingContext_CloseCommChannelForDeviceID_block_invoke;
      v8[3] = &unk_1E3098D60;
      v8[4] = &v9;
      v8[5] = a2;
      v8[6] = a3;
      MXDispatchSync((uint64_t)"routingContext_CloseCommChannelForDeviceID", (uint64_t)"FigRoutingContext.m", 1088, 0, 0, DataTransmissionQueue, (uint64_t)v8);
      IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v10 + 6);
    }
    else
    {
      IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v10 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v9, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_193731D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal;
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  _QWORD v5[5];

  IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (!(_DWORD)IsOperationOnSystemInputContextAllowedInternal)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __routingContext_ResetPredictedSelectedRouteDescriptor_block_invoke;
    v5[3] = &__block_descriptor_40_e5_v8__0l;
    v5[4] = DerivedStorage;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_ResetPredictedSelectedRouteDescriptor", (uint64_t)"FigRoutingContext.m", 1537, 0, 0, SharedQueue, (uint64_t)v5);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  NSObject *SharedQueue;
  const void *v7;
  _QWORD *v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __routingContext_CopySelectedBufferedEndpointForTesting_block_invoke;
  v10[3] = &unk_1E3098D60;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = a2;
  MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedBufferedEndpointForTesting", (uint64_t)"FigRoutingContext.m", 1573, 0, 0, SharedQueue, (uint64_t)v10);
  v8 = v12 + 3;
  v7 = (const void *)v12[3];
  if (a3)
  {
    *a3 = v7;
LABEL_5:
    *v8 = 0;
    goto LABEL_6;
  }
  if (v7)
  {
    CFRelease(v7);
    v8 = v12 + 3;
    goto LABEL_5;
  }
LABEL_6:
  _Block_object_dispose(&v11, 8);
  return 0;
}

void sub_193731EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_IsOperationOnSystemInputContextAllowedInternal(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (routingContext_IsOperationOnSystemInputContextAllowedInternal_onceToken != -1)
    dispatch_once(&routingContext_IsOperationOnSystemInputContextAllowedInternal_onceToken, &__block_literal_global_30);
  CMBaseObjectGetDerivedStorage();
  result = FigCFEqual();
  if (!a2 && (_DWORD)result)
    goto LABEL_8;
  if (!(_DWORD)result)
    return result;
  if (MX_FeatureFlags_IsSystemInputPickerEnabled())
    return 0;
LABEL_8:
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954314;
}

void routingContext_sendDataCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v8)(CFTypeRef, uint64_t, uint64_t, CFTypeRef);

  if (dword_1EE2B3E08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    v8 = (void (*)(CFTypeRef, uint64_t, uint64_t, CFTypeRef))a4[1];
    if (v8)
      v8(*a4, a2, a3, a4[2]);
    CFRelease(*a4);
    free(a4);
  }
}

void routingContext_sendCommandCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v8)(CFTypeRef, uint64_t, uint64_t, CFTypeRef);

  if (dword_1EE2B3E08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    v8 = (void (*)(CFTypeRef, uint64_t, uint64_t, CFTypeRef))a4[1];
    if (v8)
      v8(*a4, a3, a2, a4[2]);
    CFRelease(*a4);
    free(a4);
  }
}

void MXInitialize()
{
  if (MXInitialize_onceToken != -1)
    dispatch_once(&MXInitialize_onceToken, &__block_literal_global_48);
}

dispatch_semaphore_t MXSystemControllerSetup()
{
  dispatch_semaphore_t result;

  gMXSystemControllerList = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3868]), "initWithOptions:", 5);
  gSidekickMXSystemControllerList = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3868]), "initWithOptions:", 5);
  gMXSystemControllerListActiveReaders = 0;
  gMXSystemControllerListReadLock = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3740]);
  result = dispatch_semaphore_create(1);
  gMXSystemControllerListWriteSemaphore = (uint64_t)result;
  return result;
}

uint64_t MXSystemMirroring_PickEndpoint(const void *a1, const void *a2, CFDictionaryRef theDict, const void *a4)
{
  __CFDictionary *v8;
  uint64_t v9;

  v8 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  if (!a2)
  {
    mxSystemMirroring_disconnect((uint64_t)a1, theDict);
    v9 = 0;
    if (!v8)
      return v9;
    goto LABEL_3;
  }
  v9 = mxSystemMirroring_preprocessPickEndpoint(a2, a1, v8, a4);
  if (v8)
LABEL_3:
    CFRelease(v8);
  return v9;
}

void mxSystemMirroring_disconnect(uint64_t a1, const __CFDictionary *a2)
{
  __CFDictionary *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v8;
  unsigned int NumberOfCurrentOutputPorts;
  uint64_t v10;
  __CFArray *Mutable;
  CFIndex v12;
  uint64_t v13;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v15;
  OpaqueFigEndpoint *v16;
  __CFArray *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef v22[23];

  v22[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  v4 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a2);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("mxSystemMirroring_disconnect - "), 0, 0, 0, a1, v4);
  v22[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)v22);
  if (FigRoutingManagerUtilities_IsEndpointPicked(0, (uint64_t)v22[0]))
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v22[0], v4, CFSTR("configUpdateReasonEndedNoop"));
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v22[0], a2, CFSTR("configUpdateReasonStarted"));
    cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
    v20 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v22[0], 0, (uint64_t)&v20);
    v19 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)cf, 0, (uint64_t)&v19);
    v18 = 0;
    if (v20)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v6)
        v6(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v18);
    }
    if (v19 == v20 && FigRoutingManagerIsEndpointOfType((uint64_t)v19))
    {
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v20, (uint64_t)v22[0], 1);
      FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Going to deactivate endpoint with name="), (uint64_t)v20, (uint64_t)CFSTR("because most recent currently activating endpoint is NULL"), 1);
      mxSystemMirroring_iOSDeactivateEndpoint(v20, 1, (uint64_t)a2);
      v8 = CMSMUtility_CopyCurrentRouteIdentifiers();
      NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
      if (NumberOfCurrentOutputPorts)
      {
        v10 = NumberOfCurrentOutputPorts;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        v12 = 0;
        v13 = *MEMORY[0x1E0CA3A80];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v8, v12);
          v15 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v13, (uint64_t)cf);
          if (v15)
          {
            v16 = v15;
            CFArrayAppendValue(Mutable, v15);
            CFRelease(v16);
          }
          ++v12;
        }
        while (v10 != v12);
      }
      else
      {
        Mutable = 0;
      }
      v17 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, Mutable, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a2, (uint64_t)v17);
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)cf, 0);
      if (v17)
        CFRelease(v17);
      if (v8)
        CFRelease(v8);
      if (Mutable)
        CFRelease(Mutable);
    }
    if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed())
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v22[0], 0, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)a2, 0);
    mxSystemMirroring_iOSDeactivateEndpoint(v20, 1, (uint64_t)a2);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v20)
    {
      CFRelease(v20);
      v20 = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    if (v18)
      CFRelease(v18);
  }
  if (v22[0])
  {
    CFRelease(v22[0]);
    v22[0] = 0;
  }
  if (v4)
    CFRelease(v4);
}

uint64_t mxSystemMirroring_preprocessPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t IsEndpointOfType;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *v14;
  BOOL v15;
  uint64_t v16;
  const void *v17;
  int IsRoutedToLocalAirplayReceiver;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  int IsCurrentRouteHandoff;
  char v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, const __CFAllocator *, const __CFArray **);
  NSObject *v25;
  CFIndex Count;
  CFIndex v27;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v30;
  const void *v32;
  CFMutableDictionaryRef v33;
  uint64_t v34;
  CFArrayRef v35;
  CFTypeRef v36;
  NSObject *v38;
  const void *v39;
  __CFArray *Mutable;
  const __CFAllocator *allocator;
  const __CFArray *v42;
  CFTypeRef v43;
  CFTypeRef cf;
  CFTypeRef v45;
  CFTypeRef v46;
  CFArrayRef v47;
  CFArrayRef theArray[18];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  IsEndpointOfType = FigRoutingManagerIsEndpointOfType((uint64_t)a1);
  if (!(_DWORD)IsEndpointOfType)
    return 0;
  FigRoutingContextUtilities_LogCurrentState(IsEndpointOfType, v9);
  v46 = 0;
  v10 = *MEMORY[0x1E0CA4348];
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v13)
    v13(CMBaseObject, v10, v11, &v46);
  v14 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("mxSystemMirroring_preprocessPickEndpoint - "), (uint64_t)a1, 0, 0, (uint64_t)a2, v14);
  v45 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a2, (uint64_t)&v45);
  allocator = v11;
  Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, a1);
  v15 = 1;
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  v39 = a4;
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(0, (uint64_t)a2, (uint64_t)a1, (uint64_t)v14, (uint64_t)a4);
  v43 = 0;
  cf = 0;
  FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v43, &cf, 0);
  v16 = FigRoutingManagerContextUtilities_CopyScreenEndpointUUID((uint64_t)a2);
  if (v16)
  {
    v17 = (const void *)v16;
    IsRoutedToLocalAirplayReceiver = FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)a2);
    v15 = IsRoutedToLocalAirplayReceiver != 0;
    if (!IsRoutedToLocalAirplayReceiver && dword_1EE2B3E28)
    {
      LODWORD(v42) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v17);
  }
  if (!v43)
    goto LABEL_20;
  IsCurrentRouteHandoff = FigRoutingManagerUtilities_IsCurrentRouteHandoff();
  v22 = !v15;
  if (IsCurrentRouteHandoff)
    v22 = 1;
  if ((v22 & 1) != 0)
  {
LABEL_20:
    theArray[0] = 0;
    v47 = 0;
    FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(-1, theArray, &v47, 0, 0);
    if (theArray[0])
    {
      Count = CFArrayGetCount(theArray[0]);
      if (Count >= 1)
      {
        v27 = Count;
        for (i = 0; i != v27; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], i);
          v30 = CFArrayGetValueAtIndex(v47, i);
          if (ValueAtIndex != a1 || v30 != a2)
          {
            v32 = v30;
            v33 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            FigCFDictionarySetValue();
            v42 = 0;
            FigRoutingManagerCreateEndpointDeactivateCompletionContext(v32, &v42);
            FigRoutingManagerLogEndpointID((uint64_t)CFSTR("Preprocess - Calling to deactivate endpoint with name="), (uint64_t)ValueAtIndex, 0, 1);
            FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v32, (uint64_t)ValueAtIndex, (uint64_t)CFSTR("configUpdateReasonEndedUserCancelled"));
            mxSystemMirroring_iOSDeactivateEndpoint(ValueAtIndex, 0, 0);
            if (v33)
              CFRelease(v33);
          }
        }
      }
    }
    v20 = mxSystemMirroring_iOSActivateEndpoint(a1, a2, v14, v39);
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    v35 = v47;
    if (!v47)
      goto LABEL_34;
  }
  else
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 2);
    CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a2);
    v42 = 0;
    v23 = FigEndpointGetCMBaseObject();
    v24 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v24)
      v24(v23, v10, allocator, &v42);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v43))
    {
      if (dword_1EE2B3E28)
      {
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      mxSystemMirroring_iOSDeactivateEndpoint(v43, 1, 0);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)v43))
    {
      if (dword_1EE2B3E28)
      {
        v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v43, cf, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
      CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)cf);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, 0);
    }
    v20 = mxSystemMirroring_iOSActivateEndpoint(a1, a2, v14, a4);
    v35 = v42;
    if (!v42)
      goto LABEL_34;
  }
  CFRelease(v35);
LABEL_34:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v36 = v45;
  if (v45)
  {
    CFRelease(v45);
    v45 = 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v36, v34);
  if (v46)
  {
    CFRelease(v46);
    v46 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v43)
  {
    CFRelease(v43);
    v43 = 0;
  }
  if (v14)
    CFRelease(v14);
  return v20;
}

uint64_t MXSystemMirroring_PickRouteDescriptor(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueFigEndpoint *v9;
  OpaqueFigEndpoint *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  OpaqueFigEndpoint *ValueAtIndex;
  uint64_t v16;
  _BOOL4 v17;
  NSObject *v18;
  __CFDictionary *v19;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v23;
  CFTypeRef v24;
  os_log_type_t type[8];
  CFArrayRef theArray;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (theDict)
  {
    CFDictionaryGetValue(theDict, CFSTR("RouteName"));
    CFDictionaryGetValue(theDict, CFSTR("RouteUID"));
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigCFDictionaryGetCount())
  {
    mxSystemMirroring_disconnect((uint64_t)a1, a3);
    return 0;
  }
  v9 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
  if (v9)
  {
    v10 = v9;
    *(_QWORD *)type = 0;
    theArray = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)type);
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(*(uint64_t *)type, (uint64_t)&theArray);
    if (theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
    {
      v12 = Count;
      if (CFArrayGetValueAtIndex(theArray, 0) == v10)
      {
        v16 = 0;
        v17 = 1;
      }
      else
      {
        v13 = 1;
        while (1)
        {
          v14 = v13;
          if (v12 == v13)
            break;
          ValueAtIndex = (OpaqueFigEndpoint *)CFArrayGetValueAtIndex(theArray, v13);
          v13 = v14 + 1;
          if (ValueAtIndex == v10)
          {
            v16 = v14;
            goto LABEL_21;
          }
        }
        v16 = 0;
LABEL_21:
        v17 = v14 < v12;
      }
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v24 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v22 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v22)
      v22(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &v24);
    if (v17)
    {
      if (dword_1EE2B3E28)
      {
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex(*(uint64_t *)type, v16, (uint64_t)cf);
      FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex(*(uint64_t *)type, v16);
      FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo(*(uint64_t *)type, (uint64_t)cf[0]);
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(uint64_t *)type, a3, a4);
      if (cf[0])
        CFRelease(cf[0]);
    }
    else if (FigRoutingManagerUtilities_IsEndpointPicked(v10, *(uint64_t *)type))
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(uint64_t *)type, a3, CFSTR("configUpdateReasonEndedNoop"));
    }
    else
    {
      mxSystemMirroring_preprocessPickEndpoint(v10, a1, a3, a4);
    }
    if (v24)
    {
      CFRelease(v24);
      v24 = 0;
    }
    CFRelease(v10);
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
    if (*(_QWORD *)type)
      CFRelease(*(CFTypeRef *)type);
    return 0;
  }
  v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v19 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v19, CFSTR("configUpdateReasonEndedFailed"));
  if (v19)
    CFRelease(v19);
  return 4294954296;
}

void MXSystemMirroring_iOSHandleEndpointAudioActivation(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int AirPlayPortForEndpoint;
  int v16;
  NSObject *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v19 = 0;
    v9 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4468], v9, &v19);
    v18 = 0;
    v12 = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(v12, *MEMORY[0x1E0CA4348], v9, &v18);
    if (dword_1EE2B3E28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerStartDeactivateAirPlayEndpointTimer(a1, a3, 5.0);
    AirPlayPortForEndpoint = CMSMAP_FindAirPlayPortForEndpoint((uint64_t)a1);
    if (AirPlayPortForEndpoint)
    {
      v16 = AirPlayPortForEndpoint;
      FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
      if (CMSMVAUtility_MakePortRoutable(v16, (uint64_t)a4))
      {
        FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a4, 0, CFSTR("configUpdateReasonEndedFailed"));
        if (dword_1EE2B3E28)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        mxSystemMirroring_iOSDeactivateEndpoint(a1, 0, 0);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a5);
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf[0], a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a5);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        if (cf[0])
          CFRelease(cf[0]);
      }
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)cf);
      FigRoutingManagerContextUtilities_StopMirroringTimer((uint64_t)cf[0]);
      FigRoutingManagerContextUtilities_StopDiscoveryTimer((uint64_t)cf[0]);
      FigRoutingManagerContextUtilities_SetScreenEndpoint((uint64_t)cf[0], 0);
      FigRoutingManagerContextUtilities_SetAudioEndpoint((uint64_t)cf[0], 0);
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
    }
    if (v18)
    {
      CFRelease(v18);
      v18 = 0;
    }
    if (v19)
      CFRelease(v19);
  }
}

void mxSystemMirroring_iOSDeactivateEndpoint(const void *a1, uint64_t a2, uint64_t a3)
{
  void *SharedManager;
  const __CFAllocator *v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  void (*v12)(const void *, _QWORD);
  NSObject *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v16;
  CFMutableDictionaryRef Mutable;
  void (*v18)(const void *, _QWORD);
  uint64_t v19;
  void (*v20)(const void *, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, int, uint64_t), uint64_t);
  __CFString **v21;
  uint64_t v22;
  _QWORD v23[5];
  os_log_type_t type;
  CFTypeRef v25;
  CFTypeRef cf;
  CFTypeRef v27[18];

  v27[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  SharedManager = FigRoutingManagerGetSharedManager();
  v25 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v8)
    v8(CMBaseObject, *MEMORY[0x1E0CA4348], v6, &v25);
  if (dword_1EE2B3E28)
  {
    LODWORD(v22) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v27[0] = 0;
  v10 = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v11)
    v11(v10, *MEMORY[0x1E0CA4260], v6, v27);
  if (v27[0] == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    CFRetain(a1);
    v13 = *((_QWORD *)SharedManager + 1);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __mxSystemMirroring_iOSDeactivateEndpoint_block_invoke;
    v23[3] = &__block_descriptor_40_e5_v8__0l;
    v23[4] = a1;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_iOSDeactivateEndpoint", (uint64_t)"MXSystemMirroring_Embedded.m", 481, 0, 0, v13, (uint64_t)v23);
    cf = 0;
    v14 = FigEndpointGetCMBaseObject();
    v15 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v15)
    {
      v15(v14, *MEMORY[0x1E0CA4398], v6, &cf);
      v16 = cf;
    }
    else
    {
      v16 = 0;
    }
    FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)v16);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    FigRoutingManagerUnregisterFromFigEndpointNotifications((uint64_t)a1);
    v22 = 0;
    FigRoutingManagerCreateEndpointDeactivateCompletionContext(cf, &v22);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      v18 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v18)
        v18(a1, 0);
    }
    v19 = v22;
    v20 = *(void (**)(const void *, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, int, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v20)
      v20(a1, Mutable, mxSystemMirroring_iOSEndpointDeactivateCompletionCallback, v19);
    if (FigCFEqual() || FigCFEqual())
    {
      v21 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
    }
    else if (FigCFEqual() || FigCFEqual() || FigCFEqual())
    {
      v21 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
    }
    else
    {
      if (!FigCFEqual())
        goto LABEL_25;
      v21 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, (uint64_t)*v21, a3, 0);
LABEL_25:
    if (Mutable)
      CFRelease(Mutable);
    if (cf)
      CFRelease(cf);
    goto LABEL_29;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    v12 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v12)
      v12(a1, 0);
    FigEndpointDeactivate();
  }
LABEL_29:
  if (v27[0])
  {
    CFRelease(v27[0]);
    v27[0] = 0;
  }
  if (v25)
    CFRelease(v25);
}

void MXSystemMirroring_HandleNewWirelessPorts(const void *a1, const void *a2)
{
  int v4;
  const void *Value;
  const void *v6;
  CFDictionaryRef theDict;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFTypeRef cf;
  void *v12;

  v12 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)a2, &v12);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)a2, (uint64_t)&cf);
  v10 = 0;
  FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v10);
  if (v10 != 8)
  {
    if (v10 != 5 || !CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)v12, a1))
      goto LABEL_8;
    v4 = 6;
    goto LABEL_7;
  }
  if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)v12, a1))
  {
    v4 = 9;
LABEL_7:
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, v4);
  }
LABEL_8:
  FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v10);
  if (v10 == 9)
  {
    v9 = 0;
    FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v12, (uint64_t)&v9);
    v8 = 0;
    FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)a2, (uint64_t)v12, (uint64_t)&v8);
    theDict = 0;
    FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)a2, &theDict);
    if (theDict)
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions"));
      v6 = CFDictionaryGetValue(theDict, CFSTR("CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions"));
    }
    else
    {
      Value = 0;
      v6 = 0;
    }
    mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(v12, v8, v9, a2, (uint64_t)Value, (uint64_t)v6);
    if (theDict)
      CFRelease(theDict);
  }
  if (v12)
  {
    CFRelease(v12);
    v12 = 0;
  }
  if (cf)
    CFRelease(cf);
}

void mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(void *a1, char a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int IsPropertyTrue;
  uint64_t v14;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a2 & 2) != 0)
    {
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)cf);
      if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        || MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
        && FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)cf[0]))
      {
        MXSystemMirroring_iOSHandleEndpointAudioActivation(a1, v12, a3, a4, a5);
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    if ((a2 & 1) != 0)
    {
      v21 = 0;
      v22 = 0;
      IsPropertyTrue = FigEndpointUtility_EndpointPredicate_IsPropertyTrue();
      v14 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v16)
        v16(CMBaseObject, *MEMORY[0x1E0CA4468], v14, &v22);
      v17 = FigEndpointGetCMBaseObject();
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v18)
      {
        v18(v17, *MEMORY[0x1E0CA4460], v14, &v21);
        v19 = v21;
      }
      else
      {
        v19 = 0;
      }
      CMScreenHandleActivation(v22, v19);
      if (!(FigRoutingManagerIsEndpointOfType((uint64_t)a1) | IsPropertyTrue))
        FigEndpointCopyFirstStreamOfType();
      if (dword_1EE2B3E28)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        && (!MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
         || !FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)a4)))
      {
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), a6);
        FigRoutingManagerContextUtilities_StopMirroringTimer((uint64_t)a4);
      }
      if (v22)
      {
        CFRelease(v22);
        v22 = 0;
      }
      if (v21)
        CFRelease(v21);
    }
  }
}

uint64_t MXSystemMirroring_IsTestCodeEnabled()
{
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (MXSystemMirroring_IsDefaultRouteAirPlayReceiver_onceToken != -1)
    dispatch_once(&MXSystemMirroring_IsDefaultRouteAirPlayReceiver_onceToken, &__block_literal_global_49);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MXSystemMirroring_IsDefaultRouteAirPlayReceiver_isSystemMirroringDefaultRouteAirPlayReceiver;
}

uint64_t MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_onceToken != -1)
    dispatch_once(&MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_onceToken, &__block_literal_global_16);
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_isMirroringScreenAudioSeperate;
}

uint64_t mxSystemMirroring_iOSActivateEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t v8;
  CFMutableDictionaryRef EndpointActivateOptions;
  uint64_t v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v15;
  unsigned int v16;
  CFMutableDictionaryRef EndpointDelegateContext;
  _QWORD *v18;
  CFTypeRef v19;
  _QWORD *SharedManager;
  void (*v21)(const void *, CFTypeRef *);
  const void *Value;
  uint64_t *v24;
  const void *MutableCopy;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t (*v35)(const void *, uint64_t, const void *, _QWORD, uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t FigEndpointFeatures;
  os_log_type_t type[8];
  int v40;
  CFTypeRef cf;
  os_log_type_t v42;
  unsigned int v43;
  CFTypeRef v44;
  int v45;
  const char *v46;
  __int16 v47;
  CFTypeRef v48;
  __int16 v49;
  _QWORD v50[3];
  CFTypeRef v51[18];

  v51[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v8 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a2, a3);
  FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  cf = 0;
  v10 = *MEMORY[0x1E0CA4348];
  v11 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(CMBaseObject, v10, v11, &cf);
  v36 = v10;
  v37 = v11;
  if (dword_1EE2B3E28)
  {
    LODWORD(v44) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v15 = v44;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if (v16)
    {
      v45 = 136315650;
      v46 = "mxSystemMirroring_iOSActivateEndpoint";
      v47 = 2114;
      v48 = cf;
      v49 = 2048;
      v50[0] = FigEndpointFeatures;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    EndpointDelegateContext = FigRoutingManagerCreateEndpointDelegateContext();
    v18 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
    v19 = a1 ? CFRetain(a1) : 0;
    v18[1] = v19;
    v18[2] = EndpointDelegateContext;
    *v18 = 0;
    SharedManager = FigRoutingManagerGetSharedManager();
    MEMORY[0x1940352F8](SharedManager[7]);
    if (SharedManager[8])
      *(_QWORD *)SharedManager[9] = v18;
    else
      SharedManager[8] = v18;
    SharedManager[9] = v18;
    MEMORY[0x194035304](SharedManager[7]);
    v51[3] = 0;
    v51[4] = 0;
    v51[0] = EndpointDelegateContext;
    v51[1] = FigRoutingManager_HandleAuthorizationRequiredDelegate;
    v51[2] = mxSystemMirroring_handleEndpointFailedDelegate;
    v21 = *(void (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v21)
      v21(a1, v51);
  }
  if (!(_DWORD)v8)
  {
    if (a3)
    {
      Value = CFDictionaryGetValue(a3, CFSTR("authInfo"));
      if (Value)
        FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
    }
    v40 = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v40);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      *(_QWORD *)type = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, type);
      v24 = *(uint64_t **)type;
      MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      v44 = 0;
      v26 = FigEndpointGetCMBaseObject();
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (v27)
        v27(v26, v36, v37, &v44);
      if (dword_1EE2B3E28)
      {
        v43 = 0;
        v42 = OS_LOG_TYPE_DEFAULT;
        v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v29 = v43;
        if (os_log_type_enabled(v28, v42))
          v30 = v29;
        else
          v30 = v29 & 0xFFFFFFFE;
        if (v30)
        {
          v45 = 136315906;
          v46 = "mxSystemMirroring_endpointActivateWithCompletionCallback";
          v47 = 2114;
          v48 = v44;
          v49 = 1024;
          LODWORD(v50[0]) = FigEndpointFeatures;
          WORD2(v50[0]) = 2114;
          *(_QWORD *)((char *)v50 + 6) = EndpointActivateOptions;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
      {
        if (v24)
        {
          v31 = *v24;
          v32 = v24[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        v51[0] = 0;
        v33 = FigEndpointGetCMBaseObject();
        v34 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v34)
        {
          v34(v33, *MEMORY[0x1E0CA4218], v37, v51);
          v34 = (void (*)(uint64_t, _QWORD, uint64_t, CFTypeRef *))v51[0];
        }
        FigRoutingManagerSetMirroringModeOnBKSDisplayServices(EndpointActivateOptions, v31, v32, v34 == (void (*)(uint64_t, _QWORD, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50]);
        if (v51[0])
          CFRelease(v51[0]);
      }
      v35 = *(uint64_t (**)(const void *, uint64_t, const void *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
      if (v35)
        v8 = v35(a1, FigEndpointFeatures, MutableCopy, mxSystemMirroring_endpointActivateCompletionCallback, v24);
      else
        v8 = 4294954514;
      if (v44)
      {
        CFRelease(v44);
        v44 = 0;
      }
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
    else
    {
      v8 = 0;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (EndpointActivateOptions)
    CFRelease(EndpointActivateOptions);
  return v8;
}

void mxSystemMirroring_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  void *SharedManager;
  NSObject *v9;
  _QWORD v10[8];

  if (a1 && a3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4)
      CFRetain(a4);
    v9 = *((_QWORD *)SharedManager + 1);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __mxSystemMirroring_handleEndpointFailedDelegate_block_invoke;
    v10[3] = &__block_descriptor_64_e5_v8__0l;
    v10[4] = a4;
    v10[5] = a3;
    v10[6] = a1;
    v10[7] = a2;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_handleEndpointFailedDelegate", (uint64_t)"MXSystemMirroring_Embedded.m", 80, 0, 0, v9, (uint64_t)v10);
  }
}

void mxSystemMirroring_endpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *SharedManager;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  double v15;
  double v16;
  float v17;
  id v18;
  NSObject *v19;
  _QWORD v20[12];
  int v21;
  float v22;

  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    v11 = *(const void **)a5;
    v12 = *(const void **)(a5 + 8);
    v13 = *(const void **)(a5 + 16);
    v14 = *(void **)(a5 + 32);
  }
  else
  {
    v13 = 0;
    v11 = 0;
    v12 = 0;
    v14 = 0;
  }
  objc_msgSend(v14, "timeIntervalSinceNow");
  v16 = v15;
  if (a1)
    CFRetain(a1);
  if (v11)
    CFRetain(v11);
  if (v12)
    CFRetain(v12);
  if (v13)
    CFRetain(v13);
  v17 = fabs(v16) * 1000.0;
  v18 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v19 = *((_QWORD *)SharedManager + 1);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __mxSystemMirroring_endpointActivateCompletionCallback_block_invoke;
  v20[3] = &unk_1E309C538;
  v20[4] = v18;
  v20[5] = a1;
  v21 = a4;
  v20[6] = a3;
  v20[7] = a2;
  v22 = v17;
  v20[8] = v11;
  v20[9] = v12;
  v20[10] = v13;
  v20[11] = a5;
  MXDispatchAsync((uint64_t)"mxSystemMirroring_endpointActivateCompletionCallback", (uint64_t)"MXSystemMirroring_Embedded.m", 332, 0, 0, v19, (uint64_t)v20);
}

void __mxSystemMirroring_handleEndpointFailedDelegate_block_invoke(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const __CFDictionary *v4;
  const void *Value;
  _BOOL8 IsEndpointActivated;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *);
  __CFDictionary *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *);
  uint64_t *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *v18;
  const void *v19;
  NSObject *v20;
  char FigEndpointFeatures;
  CFTypeRef v22;
  __CFArray *v23;
  unsigned int NumberOfCurrentOutputPorts;
  uint64_t v25;
  __CFArray *v26;
  CFIndex v27;
  uint64_t v28;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v30;
  OpaqueFigEndpoint *v31;
  __CFArray *v32;
  NSObject *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  os_log_type_t v41[8];
  CFTypeRef cf;
  int v43;
  CFTypeRef v44[18];

  v44[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4)
    Value = CFDictionaryGetValue(v4, CFSTR("EndpointDelegateContextKey_ClientRouteChangeOptions"));
  else
    Value = 0;
  v43 = 0;
  FigCFDictionaryGetInt32IfPresent();
  IsEndpointActivated = FigRoutingManagerIsEndpointActivated(*(_QWORD *)(a1 + 48));
  if (IsEndpointActivated)
  {
    *(_QWORD *)v41 = 0;
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v9)
      v9(CMBaseObject, *MEMORY[0x1E0CA4258], v2, &cf);
    v10 = *MEMORY[0x1E0CA4348];
    v11 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v12)
      v12(v11, v10, v2, v41);
    v13 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(*(_QWORD *)(a1 + 48), 0);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    v40 = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&v40);
    v39 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v40, 0, (uint64_t)&v39);
    v38 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v38);
    v37 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v38, 0, (uint64_t)&v37);
    if (v39)
    {
      v14 = FigEndpointGetCMBaseObject();
      v15 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v15)
        v15(v14, v10, v2, v41);
      if (v39 && FigRoutingManagerIsEndpointOfType((uint64_t)v39))
      {
        v16 = &sCategoryToPriorityMapForTriangle;
        if (FigCFEqual())
        {
          if (dword_1EE2B3E28)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v16 = &sCategoryToPriorityMapForTriangle;
          }
          FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v39, (uint64_t)v40, 1);
        }
        mxSystemMirroring_iOSDeactivateEndpoint(*(const void **)(a1 + 48), 0, (uint64_t)Value);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0CA39C0]);
        if (FigCFEqual())
          FigRoutingManager_iOSHandleStartupFailed(v43, Mutable);
        v23 = CMSMUtility_CopyCurrentRouteIdentifiers();
        NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
        if (NumberOfCurrentOutputPorts)
        {
          v25 = NumberOfCurrentOutputPorts;
          v26 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
          v27 = 0;
          v28 = *MEMORY[0x1E0CA3A80];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v23, v27);
            v30 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v28, (uint64_t)v38);
            if (v30)
            {
              v31 = v30;
              CFArrayAppendValue(v26, v30);
              CFRelease(v31);
            }
            ++v27;
          }
          while (v25 != v27);
          v16 = &sCategoryToPriorityMapForTriangle;
        }
        else
        {
          v26 = 0;
        }
        v32 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v26, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(v38, v26, (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), (uint64_t)Value, (uint64_t)v32);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v38, 0);
        if (*((_DWORD *)v16 + 906))
        {
          v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v32)
          CFRelease(v32);
        if (v23)
          CFRelease(v23);
        if (v26)
          CFRelease(v26);
      }
    }
    if (*(_QWORD *)v41)
    {
      CFRelease(*(CFTypeRef *)v41);
      *(_QWORD *)v41 = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v13)
      CFRelease(v13);
    if (v40)
    {
      CFRelease(v40);
      v40 = 0;
    }
    if (v39)
    {
      CFRelease(v39);
      v39 = 0;
    }
    if (v38)
    {
      CFRelease(v38);
      v38 = 0;
    }
    v22 = v37;
    if (v37)
LABEL_58:
      CFRelease(v22);
  }
  else if (MX_FeatureFlags_IsAirPlayDaemonEnabled(IsEndpointActivated, v7))
  {
    v18 = *(const __CFDictionary **)(a1 + 32);
    if (v18)
      v19 = CFDictionaryGetValue(v18, CFSTR("EndpointDelegateContextKey_RoutingContextUUID"));
    else
      v19 = 0;
    FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(*(_QWORD *)(a1 + 48), (uint64_t)v19);
    v44[0] = 0;
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v19, v44);
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 48), FigEndpointFeatures, (uint64_t)v19);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v19, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    if (FigCFEqual())
      FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(v19, 0, (uint64_t)CFSTR("configUpdateReasonEndedFailed"), 0);
    v22 = v44[0];
    if (v44[0])
      goto LABEL_58;
  }
  else if (dword_1EE2B3E28)
  {
    LODWORD(cf) = 0;
    v41[0] = OS_LOG_TYPE_DEFAULT;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable)
    CFRelease(Mutable);
  v34 = *(const void **)(a1 + 48);
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(a1 + 40);
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(a1 + 32);
  if (v36)
    CFRelease(v36);
}

void __mxSystemMirroring_endpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;
  CFTypeRef v28[17];

  v28[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4348], v2, &v26);
    v5 = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(v5, *MEMORY[0x1E0CA4258], v2, &v25);
    v7 = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
      v8(v7, *MEMORY[0x1E0CA4128], v2, &v24);
    v9 = FigEndpointGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
      v10(v9, *MEMORY[0x1E0CA4310], v2, &v23);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v28[0] = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(*(_QWORD *)(a1 + 64), v28);
  v12 = *(_DWORD *)(a1 + 96);
  if (v12 && v12 != -16727)
  {
    if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 40)))
      FigEndpointUIAgentHelper_CleanupPrompt(v26, (uint64_t)v25, (uint64_t)v23, 0);
    if (v28[0] == *(CFTypeRef *)(a1 + 40))
      FigRoutingManager_iOSHandleEndpointActivationError(v28[0], *(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 96), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
  }
  else
  {
    if (FigRoutingManagerIsEndpointOfType(*(_QWORD *)(a1 + 40)))
    {
      v14 = v25;
      v13 = v26;
      v15 = v23;
      v16 = FigCFEqual();
      FigEndpointUIAgentHelper_CleanupPrompt(v13, (uint64_t)v14, (uint64_t)v15, v16);
    }
    if (v28[0] == *(CFTypeRef *)(a1 + 40))
    {
      FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 7);
      FigRoutingManagerRegisterForFigEndpointNotifications(*(_QWORD *)(a1 + 40));
      mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(*(void **)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
      FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
    }
    else
    {
      cf = 0;
      if (v28[0])
      {
        v17 = FigEndpointGetCMBaseObject();
        v18 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
        if (v18)
          v18(v17, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
      }
      mxSystemMirroring_iOSDeactivateEndpoint(*(const void **)(a1 + 40), 1, *(_QWORD *)(a1 + 72));
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 0);
    }
  }
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 88));
  if (v28[0])
  {
    CFRelease(v28[0]);
    v28[0] = 0;
  }
  if (v26)
  {
    CFRelease(v26);
    v26 = 0;
  }
  if (v24)
  {
    CFRelease(v24);
    v24 = 0;
  }
  if (v23)
  {
    CFRelease(v23);
    v23 = 0;
  }
  if (v25)
  {
    CFRelease(v25);
    v25 = 0;
  }
  v19 = *(const void **)(a1 + 64);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 40);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 72);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 80);
  if (v22)
    CFRelease(v22);

}

void __mxSystemMirroring_iOSDeactivateEndpoint_block_invoke(uint64_t a1)
{
  const void *v2;

  FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void mxSystemMirroring_iOSEndpointDeactivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _QWORD v11[8];
  int v12;

  if (a1)
  {
    CFRetain(a1);
    v10 = *((_QWORD *)FigRoutingManagerGetSharedManager() + 1);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __mxSystemMirroring_iOSEndpointDeactivateCompletionCallback_block_invoke;
    v11[3] = &__block_descriptor_68_e5_v8__0l;
    v12 = a4;
    v11[4] = a1;
    v11[5] = a3;
    v11[6] = a2;
    v11[7] = a5;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_iOSEndpointDeactivateCompletionCallback", (uint64_t)"MXSystemMirroring_Embedded.m", 436, 0, 0, v10, (uint64_t)v11);
  }
}

void __mxSystemMirroring_iOSEndpointDeactivateCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[25];

  v7[24] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], v7);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(uint64_t **)(a1 + 56);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 48), v6);
  FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  FigRoutingManagerRemoveCachedDelegateContext(*(_QWORD *)(a1 + 32));
}

void sub_1937385B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  const void *v45;
  const void *v46;

  FigRoutingManagerDestroyEndpointDeactivateCompletionContext(*(const void ***)(v44 + 56));
  v45 = *(const void **)(v44 + 32);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
}

uint64_t MXSystemRemotePool_AddEndpointToContext(const void *a1, const void *a2, const __CFDictionary *a3)
{
  __CFDictionary *Mutable;
  const void *v7;
  uint64_t v8;

  if (a1)
  {
    FigRoutingManagerLogEndpointID((uint64_t)CFSTR("MXSystemRemotePool_AddEndpointToContext - Adding endpoint="), (uint64_t)a1, (uint64_t)CFSTR("on system remote pool context"), 1);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_IsAddOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_UserPickedRoute"), v7);
    v8 = mxSystemRemotePool_processAddEndpoint(a1, a2, a3, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonEndedNoop"));
    return 0;
  }
  return v8;
}

uint64_t mxSystemRemotePool_processAddEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  CFTypeRef v14;
  NSObject *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  NSObject *v18;
  void (*v19)(const void *, _QWORD *);
  CFMutableDictionaryRef SubEndpointAddOptions;
  const void *Value;
  const void *MutableCopy;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t VTable;
  uint64_t v26;
  uint64_t (*v27)(CFTypeRef, const void *, const void *, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *v30;
  CFTypeRef v32;
  os_log_type_t type[8];
  _QWORD v34[4];
  os_log_type_t v35[8];
  CFTypeRef cf;
  uint64_t v37[18];

  v37[16] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v8 = FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&cf);
  if (!cf)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v8, v9);
  v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  *(_QWORD *)v35 = 0;
  v11 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v13)
    v13(CMBaseObject, *MEMORY[0x1E0CA4348], v11, v35);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("mxSystemRemotePool_processAddEndpoint"), (uint64_t)a1, 0, 0, (uint64_t)a2, v10);
  v14 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v14 = 0;
  if (!FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)v14)
    && FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    if (dword_1EE2B3E28)
    {
      type[0] = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v37[0] = 0;
    FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)a1, (uint64_t)v37);
    FigRoutingManager_iOSDeactivateEndpoint(a1, v37[0]);
  }
  if (dword_1EE2B3E28)
  {
    type[0] = OS_LOG_TYPE_DEFAULT;
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a2, (uint64_t)cf, a1, (uint64_t)v10, (uint64_t)a4);
  v34[1] = 0;
  if (mxSystemRemotePool_getDelegateContext_onceToken != -1)
    dispatch_once(&mxSystemRemotePool_getDelegateContext_onceToken, &__block_literal_global_50);
  v34[0] = gDelegateContext;
  v34[2] = FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate;
  v34[3] = FigRoutingManager_HandleDidCloseCommChannelDelegate;
  v19 = *(void (**)(const void *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v19)
    v19(a1, v34);
  *(_QWORD *)type = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a2, v10, a4, type);
  SubEndpointAddOptions = FigRoutingManagerCreateSubEndpointAddOptions((uint64_t)a1, (uint64_t)a2);
  if (v10)
  {
    Value = CFDictionaryGetValue(v10, CFSTR("authInfo"));
    if (Value)
      FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
  }
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (SubEndpointAddOptions)
    CFRelease(SubEndpointAddOptions);
  v23 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v23 = 0;
  v24 = *(_QWORD *)type;
  VTable = CMBaseObjectGetVTable();
  v27 = *(uint64_t (**)(CFTypeRef, const void *, const void *, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), uint64_t))(*(_QWORD *)(VTable + 32) + 8);
  if (v27)
  {
    VTable = v27(v23, a1, MutableCopy, FigRoutingManagerAggregateAddEndpointCompletionCallback, v24);
    v17 = VTable;
    if (!(_DWORD)VTable)
    {
      v32 = 0;
      v28 = FigEndpointGetCMBaseObject();
      v29 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v29)
        v29(v28, *MEMORY[0x1E0CA4258], v11, &v32);
      if (dword_1EE2B3E28)
      {
        v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      VTable = (uint64_t)v32;
      if (v32)
        CFRelease(v32);
      v17 = 0;
      if (!MutableCopy)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  else
  {
    v17 = 4294954514;
  }
  if (MutableCopy)
LABEL_35:
    CFRelease(MutableCopy);
LABEL_36:
  FigRoutingContextUtilities_LogCurrentState(VTable, v26);
  if (v10)
    CFRelease(v10);
  if (*(_QWORD *)v35)
  {
    CFRelease(*(CFTypeRef *)v35);
    *(_QWORD *)v35 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v17;
}

CFTypeRef MXSystemRemotePool_RemoveEndpointFromContext(const void *a1, const void *a2, const __CFDictionary *a3)
{
  __CFDictionary *Mutable;
  const void *v7;
  CFTypeRef v8;

  if (a1)
  {
    FigRoutingManagerLogEndpointID((uint64_t)CFSTR("MXSystemRemotePool_RemoveEndpointFromContext - Removing endpoint="), (uint64_t)a1, (uint64_t)CFSTR("on system remote pool context"), 1);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_IsRemoveOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("RouteChangeOptionKey_UserPickedRoute"), v7);
    v8 = mxSystemRemotePool_processRemoveEndpoint(a1, a2, a3, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, CFSTR("configUpdateReasonEndedNoop"));
    return 0;
  }
  return v8;
}

CFTypeRef mxSystemRemotePool_processRemoveEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t, os_log_type_t *);
  NSObject *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v23;
  os_log_type_t v25[8];
  CFTypeRef cf;
  CFTypeRef v27[23];

  v27[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v27[0] = 0;
  v8 = FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v27);
  if (!v27[0])
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v8, v9);
  v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  cf = 0;
  v11 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(CMBaseObject, *MEMORY[0x1E0CA4348], v11, &cf);
  FigRoutingManagerLogRoutingRequestDetails((uint64_t)CFSTR("mxSystemRemotePool_processRemoveEndpoint"), (uint64_t)a1, 0, 0, (uint64_t)a2, v10);
  v14 = v27[0];
  if (!v27[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v14 = 0;
  if (FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)v14))
  {
    v15 = v27[0];
    if (!v27[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
      v15 = 0;
    v16 = (CFTypeRef)FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)v15, a1, a2, v10, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
    v18 = v16;
    if ((_DWORD)v16)
      goto LABEL_23;
    *(_QWORD *)v25 = 0;
    v19 = FigEndpointGetCMBaseObject();
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v20)
      v20(v19, *MEMORY[0x1E0CA4258], v11, v25);
    if (dword_1EE2B3E28)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = *(CFTypeRef *)v25;
    if (*(_QWORD *)v25)
      CFRelease(*(CFTypeRef *)v25);
  }
  else
  {
    if (dword_1EE2B3E28)
    {
      *(_DWORD *)v25 = 0;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v10, CFSTR("configUpdateReasonEndedNoop"));
  }
  v18 = 0;
LABEL_23:
  FigRoutingContextUtilities_LogCurrentState(v16, v17);
  if (v10)
    CFRelease(v10);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v27[0])
    CFRelease(v27[0]);
  return v18;
}

uint64_t MXSystemRemotePool_RemoveEndpoint(const void *a1)
{
  uint64_t v2;
  CFTypeRef cf;
  CFTypeRef v5;

  v5 = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v5);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v5, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)cf))
  {
    FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)cf, a1, v5, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
    v2 = 0;
  }
  else
  {
    v2 = 4294954294;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v5)
    CFRelease(v5);
  return v2;
}

uint64_t MXSystemRemotePool_ActivateAggregateEndpoint(uint64_t a1, const void *a2)
{
  uint64_t FigEndpointFeatures;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  id v7;
  id v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v10)(uint64_t, _QWORD *);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t);
  CFTypeRef cf;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(a1, (uint64_t)a2);
  cf = 0;
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  if (a1)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], &cf);
  }
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = objc_alloc_init(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v7, "setValue:forKey:", objc_msgSend(v8, "UUIDString"), CFSTR("clientRouteRequestID"));
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17[3] = 0;
  v17[4] = 0;
  if (mxSystemRemotePool_getDelegateContext_onceToken != -1)
    dispatch_once(&mxSystemRemotePool_getDelegateContext_onceToken, &__block_literal_global_50);
  v17[0] = gDelegateContext;
  v17[1] = mxSystemRemotePool_handleAuthorizationRequiredDelegate;
  v17[2] = mxSystemRemotePool_handleEndpointFailedDelegate;
  v10 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v10)
    v10(a1, v17);
  v16 = 0;
  v11 = FigRoutingManagerCreateEndpointActivateCompletionContext(a2, v7, 0, 0, &v16);
  if (!(_DWORD)v11)
  {
    v12 = v16;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
    if (v13)
      v11 = v13(a1, FigEndpointFeatures, 0, mxSystemRemotePool_endpointActivateCompletionCallback, v12);
    else
      v11 = 4294954514;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }

  return v11;
}

void mxSystemRemotePool_handleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const __CFAllocator *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFMutableDictionaryRef Mutable;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFMutableDictionaryRef v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t type;
  unsigned int v29;
  CFTypeRef cf;
  CFTypeRef v31;
  CFTypeRef v32;
  int v33;
  const char *v34;
  __int16 v35;
  CFTypeRef v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v31 = 0;
    v32 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v12)
      v12(CMBaseObject, *MEMORY[0x1E0CA4468], v10, &v32);
    cf = 0;
    Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (a2)
    {
      v14 = FigEndpointGetCMBaseObject();
      v15 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v15)
        v15(v14, *MEMORY[0x1E0CA4348], v10, &cf);
      v16 = FigEndpointGetCMBaseObject();
      v17 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v17)
        v17(v16, *MEMORY[0x1E0CA4258], v10, &v31);
      v18 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
      FigCFDictionarySetValue();
      if (dword_1EE2B3E28)
      {
        v29 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)&v23 = v18;
      *((_QWORD *)&v23 + 1) = Mutable;
      v26 = a6;
      v27 = a7;
      v24 = v31;
      v25 = a2;
      FigEndpointAuthRequestHandler_ProcessRequest(&v23);
      if (dword_1EE2B3E28)
      {
        v29 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v21 = v29;
        if (os_log_type_enabled(v20, type))
          v22 = v21;
        else
          v22 = v21 & 0xFFFFFFFE;
        if (v22)
        {
          v33 = 136315394;
          v34 = "mxSystemRemotePool_handleAuthorizationRequiredDelegate";
          v35 = 2114;
          v36 = cf;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v18 = 0;
    }
    if (Mutable)
      CFRelease(Mutable);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v32)
    {
      CFRelease(v32);
      v32 = 0;
    }
    if (v18)
      CFRelease(v18);
    if (v31)
      CFRelease(v31);
  }
}

void mxSystemRemotePool_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3)
{
  void *SharedManager;
  NSObject *v6;
  _QWORD v7[6];

  if (a1)
  {
    if (a3)
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a1);
      CFRetain(a3);
      v6 = *((_QWORD *)SharedManager + 1);
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __mxSystemRemotePool_handleEndpointFailedDelegate_block_invoke;
      v7[3] = &__block_descriptor_48_e5_v8__0l;
      v7[4] = a3;
      v7[5] = a1;
      MXDispatchAsync((uint64_t)"mxSystemRemotePool_handleEndpointFailedDelegate", (uint64_t)"FigRoutingManager_SystemRemotePool.m", 398, 0, 0, v6, (uint64_t)v7);
    }
  }
}

void mxSystemRemotePool_endpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void *SharedManager;
  const void *v11;
  const void *v12;
  void *v13;
  double v14;
  double v15;
  float v16;
  id v17;
  NSObject *v18;
  _QWORD v19[11];
  int v20;
  float v21;

  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    v12 = *(const void **)a5;
    v11 = *(const void **)(a5 + 8);
    v13 = *(void **)(a5 + 32);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  objc_msgSend(v13, "timeIntervalSinceNow");
  v15 = v14;
  if (a1)
    CFRetain(a1);
  if (v12)
    CFRetain(v12);
  if (v11)
    CFRetain(v11);
  v16 = fabs(v15) * 1000.0;
  v17 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  v18 = *((_QWORD *)SharedManager + 1);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __mxSystemRemotePool_endpointActivateCompletionCallback_block_invoke;
  v19[3] = &unk_1E309E1B8;
  v19[4] = v17;
  v19[5] = a1;
  v20 = a4;
  v19[6] = a3;
  v19[7] = a2;
  v21 = v16;
  v19[8] = v12;
  v19[9] = v11;
  v19[10] = a5;
  MXDispatchAsync((uint64_t)"mxSystemRemotePool_endpointActivateCompletionCallback", (uint64_t)"FigRoutingManager_SystemRemotePool.m", 548, 0, 0, v18, (uint64_t)v19);
}

uint64_t MXSystemRemotePool_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v6;
  const void *v7;
  uint64_t (*v8)(const void *, uint64_t, uint64_t);
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = 4294954296;
  if (a1 && a3)
  {
    v6 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v6)
    {
      v7 = v6;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v8 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 88);
        if (v8)
          v3 = v8(v7, a2, a3);
        else
          v3 = 4294954514;
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFRelease(v7);
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v3;
}

CFTypeRef routingManagerSystemRemotePool_copySubEndpointWithID()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v10;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v14;
  CFTypeRef v15;

  v15 = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v15);
  v14 = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v15, (uint64_t)&v14);
  theArray = 0;
  if (!v14)
    goto LABEL_17;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
    goto LABEL_17;
  v2 = *MEMORY[0x1E0C9AE00];
  v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
  if (!theArray)
    goto LABEL_17;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_17;
  v4 = Count;
  v5 = 0;
  v6 = *MEMORY[0x1E0CA4258];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
    cf = 0;
    v8 = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(v8, v6, v2, &cf);
    if (FigCFEqual())
      break;
    if (cf)
      CFRelease(cf);
    if (v4 == ++v5)
      goto LABEL_17;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (ValueAtIndex)
    v10 = CFRetain(ValueAtIndex);
  else
LABEL_17:
    v10 = 0;
  if (v15)
  {
    CFRelease(v15);
    v15 = 0;
  }
  if (v14)
  {
    CFRelease(v14);
    v14 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t MXSystemRemotePool_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(CFTypeRef, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v5;
  CFTypeRef v10;
  const void *v11;
  _QWORD *v12;
  uint64_t VTable;
  uint64_t (*v14)(const void *, uint64_t, uint64_t, void (*)(int, uint64_t, uint64_t, _QWORD *), _QWORD *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v5 = 4294954296;
  if (a1 && a2 && a3)
  {
    v10 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v10)
    {
      v11 = v10;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
        *v12 = a4;
        v12[1] = a5;
        VTable = CMBaseObjectGetVTable();
        v14 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void (*)(int, uint64_t, uint64_t, _QWORD *), _QWORD *))(*(_QWORD *)(VTable + 24) + 96);
        if (!v14
          || (VTable = v14(v11, a2, a3, routingManagerSystemRemotePool_sendDataCompletionCallback, v12),
              v5 = VTable,
              (_DWORD)VTable == -12782))
        {
          v5 = 4294954514;
          routingManagerSystemRemotePool_sendDataCompletionCallback(VTable, a2, 4294954514, v12);
        }
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        cf[0] = 0;
        FigRoutingManagerCopySystemContext((uint64_t)cf, 9u);
        a4(cf[0], a2, 4294954296, a5);
        if (cf[0])
          CFRelease(cf[0]);
        v5 = 0;
      }
      CFRelease(v11);
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v5;
}

void routingManagerSystemRemotePool_sendDataCompletionCallback(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    if (*a4)
    {
      cf[0] = 0;
      FigRoutingManagerCopySystemContext((uint64_t)cf, 9u);
      ((void (*)(CFTypeRef, uint64_t, uint64_t, _QWORD))*a4)(cf[0], a2, a3, a4[1]);
      if (cf[0])
        CFRelease(cf[0]);
    }
    free(a4);
  }
}

uint64_t MXSystemRemotePool_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef v4;
  const void *v5;
  uint64_t (*v6)(const void *, uint64_t);
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = 4294954296;
  if (a1 && a2)
  {
    v4 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v4)
    {
      v5 = v4;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v6 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 104);
        if (v6)
          v2 = v6(v5, a2);
        else
          v2 = 4294954514;
        if (dword_1EE2B3E28)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFRelease(v5);
    }
    else
    {
      if (dword_1EE2B3E28)
      {
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v2;
}

void __mxSystemRemotePool_getDelegateContext_block_invoke()
{
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&cf);
  gDelegateContext = (uint64_t)FigRoutingManagerCreateEndpointDelegateContext();
  if (cf)
    CFRelease(cf);
}

void __mxSystemRemotePool_handleEndpointFailedDelegate_block_invoke(uint64_t a1)
{
  const void *Value;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFDictionary *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  const void *v13;
  const void *v14;
  CFTypeRef cf;
  CFTypeRef v16;
  int v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20[23];

  v20[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v19 = 0;
  v20[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v19);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E0CA3788]);
  v18 = 0;
  FigCFDictionaryGetInt64IfPresent();
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 0;
  FigCFDictionaryGetInt32IfPresent();
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E0CA39C0]);
  if (Value)
  {
    v16 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(CMBaseObject, *MEMORY[0x1E0CA4258], v3, &v16);
    v7 = FigEndpointGetCMBaseObject();
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
      v8(v7, *MEMORY[0x1E0CA4348], v3, v20);
    if (FigRoutingManagerIsEndpointActivated((uint64_t)Value))
    {
      v9 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)Value, 0);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v19, (uint64_t)&cf);
      if (cf)
      {
        v10 = *(_QWORD *)(a1 + 40);
        if (!v10 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
          v10 = 0;
        if (FigRoutingManagerRemoveEndpointFromAggregate(v10, Value, v19, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerLogEndpointID((uint64_t)CFSTR("HandleEndpointFailedDelegate: Removed endpoint with ID"), (uint64_t)Value, (uint64_t)CFSTR("from aggregate"), 1);
        }
      }
      if (dword_1EE2B3E28)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v9)
        CFRelease(v9);
    }
    if (v16)
      CFRelease(v16);
  }
  if (v19)
  {
    CFRelease(v19);
    v19 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v20[0])
  {
    CFRelease(v20[0]);
    v20[0] = 0;
  }
  v13 = *(const void **)(a1 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 32);
  if (v14)
    CFRelease(v14);
}

void __mxSystemRemotePool_endpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v5;
  const void *v6;
  const void *v7;
  CFTypeRef cf[29];

  cf[28] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  cf[0] = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4348], *MEMORY[0x1E0C9AE00], cf);
  }
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 7);
  FigRoutingManagerRegisterForFigEndpointNotifications(*(_QWORD *)(a1 + 40));
  FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)(a1 + 40), (uint64_t)CFSTR("configUpdateReasonEndedSuccess"), *(_QWORD *)(a1 + 72));
  FigRoutingManagerContextUtilities_SetPickingState(*(_QWORD *)(a1 + 64), 0);
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 80));
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v5 = *(const void **)(a1 + 64);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 72);
  if (v7)
    CFRelease(v7);

}

uint64_t FigEndpointUIAgentGetClassID()
{
  if (FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce != -1)
    dispatch_once(&FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce, &__block_literal_global_51);
  return sFigEndpointUIAgentClassID;
}

uint64_t FigEndpointUIAgentGetTypeID()
{
  if (FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce != -1)
    dispatch_once(&FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce, &__block_literal_global_51);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigEndpointUIAgentCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigEndpointUIAgent %p]"), a1);
}

void mx_ioKit_hidEventCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;

  v6 = (void *)MEMORY[0x194035B20]();
  objc_msgSend(a2, "handleEvent:", a4);
  objc_autoreleasePoolPop(v6);
}

void sub_19373B8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MX_IOKit_Initialize()
{
  if (CMSMDeviceState_IsSecureMicrophoneSupported())
  {
    if (MX_IOKit_Initialize_onceToken != -1)
      dispatch_once(&MX_IOKit_Initialize_onceToken, &__block_literal_global_52);
  }
}

uint64_t mx_ioKit_getSmartCoverState(CFArrayRef theArray, int a2)
{
  CFIndex v4;
  uint64_t v5;
  CFIndex i;
  const void *KeyboardEvent;
  uint64_t v8;
  const void *v9;
  int v10;

  v4 = 0;
  v5 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v4 < i; i = 0)
  {
    CFArrayGetValueAtIndex(theArray, v4);
    KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent();
    v8 = IOHIDServiceClientCopyEvent();
    if (v8)
    {
      v9 = (const void *)v8;
      if (IOHIDEventGetIntegerValue())
        v10 = a2;
      else
        v10 = 0;
      v5 = v10 | v5;
      CFRelease(v9);
    }
    if (KeyboardEvent)
      CFRelease(KeyboardEvent);
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return v5;
}

uint64_t DisplayModeRefreshRateObserver_UpdateHDMILatencyOnCoreAnimation()
{
  return objc_msgSend((id)displayModeRefreshRateObserver, "updateHDMILatencyOnCoreAnimation:");
}

uint64_t MX_RunningBoardServices_CopyBundleExtensionPointID(void *a1)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue")), "bundle"), "extensionPointIdentifier"), "copy");
}

void MX_RunningBoardServices_DumpMonitoredProcessPredicates()
{
  void *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  const __CFString *StringForApplicationState;
  uint64_t v12;
  uint64_t v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  os_log_type_t type;
  unsigned int v20;
  int v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  const __CFString *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (mx_runningBoardServices_initializeMonitoring_onceToken != -1)
    dispatch_once(&mx_runningBoardServices_initializeMonitoring_onceToken, &__block_literal_global_53);
  objc_msgSend((id)gProcessPredicatesSetLock, "lock");
  v0 = (void *)objc_msgSend((id)objc_msgSend((id)gProcessPredicatesSet, "allObjects"), "copy");
  objc_msgSend((id)gProcessPredicatesSetLock, "unlock");
  objc_msgSend((id)gApplicationStateCacheLock, "lock");
  obj = (id)objc_msgSend((id)gApplicationStateCache, "copy");
  objc_msgSend((id)gApplicationStateCacheLock, "unlock");
  if (dword_1EE2B3F60)
  {
    v20 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_PrintCollection(v0);
  if (dword_1EE2B3F60)
  {
    v20 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v27, 16, v12, v13);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(obj);
        if (dword_1EE2B3F60)
        {
          v7 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
          v20 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v9 = v20;
          if (os_log_type_enabled(v8, type))
            v10 = v9;
          else
            v10 = v9 & 0xFFFFFFFE;
          if (v10)
          {
            StringForApplicationState = CMSMUtility_GetStringForApplicationState(objc_msgSend((id)objc_msgSend(obj, "objectForKey:", v7), "unsignedIntValue"));
            v21 = 136315650;
            v22 = "MX_RunningBoardServices_DumpMonitoredProcessPredicates";
            v23 = 2114;
            v24 = v7;
            v25 = 2114;
            v26 = StringForApplicationState;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v27, 16);
    }
    while (v4);
  }

}

void MX_RunningBoardServices_InvalidateAssertion(void *a1)
{
  void *v2;
  CFIndex v3;
  void *Value;
  NSObject *v5;
  MXAudioStatistics *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1)
      dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_39);
    v2 = (void *)MEMORY[0x194035B20]();
    MEMORY[0x1940352BC](gProcessAssertionMutex);
    if (CFArrayGetCount((CFArrayRef)gProcessAssertionArray) >= 1)
    {
      v3 = 0;
      while (CFArrayGetValueAtIndex((CFArrayRef)gProcessAssertionArray, v3) != a1)
      {
        if (++v3 >= CFArrayGetCount((CFArrayRef)gProcessAssertionArray))
          goto LABEL_17;
      }
      if (gHostProcessAssertionDictionary
        && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, a1))
      {
        Value = (void *)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, a1);
        objc_msgSend(Value, "invalidate");
        v5 = MXGetAssertionLog();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v11 = "-MX_RunningBoardServices-";
          v12 = 2082;
          v10 = 136447234;
          v13 = "MX_RunningBoardServices_InvalidateAssertion";
          v14 = 1024;
          v15 = 880;
          v16 = 2048;
          v17 = Value;
          v18 = 2114;
          v19 = objc_msgSend(Value, "explanation");
          _os_log_impl(&dword_1935FC000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidated host process assertion %p explanation %{public}@", (uint8_t *)&v10, 0x30u);
        }
        CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, a1);
      }
      v6 = +[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance");
      v7 = objc_msgSend(a1, "explanation");
      -[MXAudioStatistics sendSinglePerformanceMessageForAssertion:explanation:activity:](v6, "sendSinglePerformanceMessageForAssertion:explanation:activity:", "MX_RunningBoardServices_InvalidateAssertion", v7, kMXAudioStatistics_AssertionActivity_AssertionInvalidated);
      v8 = MXGetAssertionLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(a1, "explanation");
        v10 = 136447234;
        v11 = "-MX_RunningBoardServices-";
        v12 = 2082;
        v13 = "MX_RunningBoardServices_InvalidateAssertion";
        v14 = 1024;
        v15 = 887;
        v16 = 2048;
        v17 = a1;
        v18 = 2114;
        v19 = v9;
        _os_log_impl(&dword_1935FC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidated assertion %p explanation %{public}@", (uint8_t *)&v10, 0x30u);
      }
      objc_msgSend(a1, "invalidate");
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gProcessAssertionArray, v3);
    }
LABEL_17:
    MEMORY[0x1940352C8](gProcessAssertionMutex);
    objc_autoreleasePoolPop(v2);
  }
}

void MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion(void *a1)
{
  void *v2;

  if (initializeLogging_onceToken != -1)
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  v2 = (void *)MEMORY[0x194035B20]();
  mx_runningBoardServices_InvalidateProcessAssertion(a1);
  objc_autoreleasePoolPop(v2);
}

uint64_t MX_RunningBoardServices_IsAssertionValid(const void *a1)
{
  const __CFArray *v2;
  _BOOL8 v3;
  CFRange v5;

  if (!a1)
    return 1;
  MEMORY[0x1940352BC](gProcessAssertionMutex);
  v2 = (const __CFArray *)gProcessAssertionArray;
  v5.length = CFArrayGetCount((CFArrayRef)gProcessAssertionArray);
  v5.location = 0;
  v3 = CFArrayContainsValue(v2, v5, a1) != 0;
  MEMORY[0x1940352C8](gProcessAssertionMutex);
  return v3;
}

void *MX_RunningBoardServices_CreateMediaPlaybackProcessAssertionForPID(uint64_t a1, const __CFString *a2)
{
  void *v4;
  void *MXAssertionForPID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (initializeLogging_onceToken != -1)
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  if ((int)a1 <= 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  else
  {
    v4 = (void *)MEMORY[0x194035B20]();
    MXAssertionForPID = mx_runningBoardServices_createMXAssertionForPID(a1, a2, 0);
    objc_autoreleasePoolPop(v4);
    return MXAssertionForPID;
  }
}

void *MX_RunningBoardServices_CreateBackgroundDownloadProcessAssertionForBundleIdentifier(uint64_t a1, const __CFString *a2)
{
  void *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v11[25];

  v11[24] = *MEMORY[0x1E0C80C00];
  if (initializeLogging_onceToken == -1)
  {
    if (a1)
      goto LABEL_3;
LABEL_11:
    LODWORD(v11[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_12;
  }
  dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  if (!a1)
    goto LABEL_11;
LABEL_3:
  if (a2)
  {
    v11[0] = 0;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForPredicate:error:", objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingBundleIdentifier:", a1), v11);
    if (!v11[0])
    {
      v7 = objc_msgSend(v4, "identity");
      v8 = objc_msgSend(MEMORY[0x1E0D87DF8], "targetWithProcessIdentity:", v7);
      if (v8)
        return mx_runningBoardServices_createAssertionForTarget(v8, a2, (uint64_t)CFSTR("com.apple.coremedia"), (uint64_t)CFSTR("AssetDownload"), 0);
    }
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    LODWORD(v11[0]) = 0;
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  }
LABEL_12:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

uint64_t MX_RunningBoardServices_DumpAssertionInfo()
{
  void *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  os_log_type_t type;
  unsigned int v40;
  int v41;
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1)
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_39);
  MEMORY[0x1940352BC](gProcessAssertionMutex);
  v0 = (void *)gProcessAssertionArray;
  v30 = (void *)gHostProcessAssertionDictionary;
  if (objc_msgSend((id)gProcessAssertionArray, "count") || objc_msgSend(v30, "count"))
  {
    if (dword_1EE2B3F60)
    {
      v40 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v35, v50, 16, v24, v27);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v36 != v4)
            objc_enumerationMutation(v0);
          if (dword_1EE2B3F60)
          {
            v6 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
            v40 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v8 = v40;
            if (os_log_type_enabled(v7, type))
              v9 = v8;
            else
              v9 = v8 & 0xFFFFFFFE;
            if (v9)
            {
              v10 = objc_msgSend(v6, "explanation");
              v41 = 136315650;
              v42 = "MX_RunningBoardServices_DumpAssertionInfo";
              v43 = 2048;
              v44 = v6;
              v45 = 2114;
              v46 = v10;
              LODWORD(v28) = 32;
              v25 = &v41;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        v3 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v35, v50, 16);
      }
      while (v3);
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v11 = (void *)objc_msgSend(v30, "allKeys", v25, v28);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v49, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v32;
      do
      {
        for (j = 0; j != v13; ++j)
        {
          if (*(_QWORD *)v32 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * j);
          v17 = objc_msgSend(v30, "objectForKey:", v16, v26, v29);
          if (dword_1EE2B3F60)
          {
            v18 = (void *)v17;
            v40 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v20 = v40;
            if (os_log_type_enabled(v19, type))
              v21 = v20;
            else
              v21 = v20 & 0xFFFFFFFE;
            if (v21)
            {
              v22 = objc_msgSend(v18, "explanation");
              v41 = 136315906;
              v42 = "MX_RunningBoardServices_DumpAssertionInfo";
              v43 = 2048;
              v44 = v16;
              v45 = 2048;
              v46 = (uint64_t)v18;
              v47 = 2114;
              v48 = v22;
              LODWORD(v29) = 42;
              v26 = &v41;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v49, 16);
      }
      while (v13);
    }
  }
  return MEMORY[0x1940352C8](gProcessAssertionMutex);
}

id __mx_runningBoardServices_initializeMonitoring_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (initializeLogging_onceToken != -1)
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_40_0);
  gProcessPredicatesSetLock = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3740]);
  gProcessPredicatesSet = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3550]);
  gApplicationStateCache = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  gApplicationStateCacheLock = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3740]);
  if (dword_1EE2B3F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = (id)objc_msgSend(MEMORY[0x1E0D87D90], "monitorWithConfiguration:", &__block_literal_global_23, v2, v3);
  gProcessMonitor = (uint64_t)result;
  return result;
}

uint64_t __mx_runningBoardServices_initializeMonitoring_block_invoke_22(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0D87DC0], "descriptor");
  objc_msgSend(v3, "setValues:", 1);
  objc_msgSend(v3, "setEndowmentNamespaces:", &unk_1E30C13F8);
  objc_msgSend(a2, "setStateDescriptor:", v3);
  return objc_msgSend(a2, "setUpdateHandler:", &__block_literal_global_28);
}

void __mx_runningBoardServices_initializeMonitoring_block_invoke_29(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "setPredicates:", objc_msgSend(*(id *)(a1 + 32), "allObjects"));

}

uint64_t __mx_runningBoardServices_createAndStoreAssertionForPIDWithInvalidationHandler_block_invoke(uint64_t a1, const void *a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex i;
  CFIndex Count;

  if (a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352BC](gProcessAssertionMutex);
  for (i = 0; ; ++i)
  {
    Count = gProcessAssertionArray;
    if (gProcessAssertionArray)
      Count = CFArrayGetCount((CFArrayRef)gProcessAssertionArray);
    if (i >= Count)
      break;
    if (CFArrayGetValueAtIndex((CFArrayRef)gProcessAssertionArray, i) == a2)
    {
      if (gHostProcessAssertionDictionary
        && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, a2))
      {
        objc_msgSend((id)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, a2), "invalidate");
        CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, a2);
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gProcessAssertionArray, i);
      return MEMORY[0x1940352C8](gProcessAssertionMutex);
    }
  }
  return MEMORY[0x1940352C8](gProcessAssertionMutex);
}

uint64_t __mx_runningBoardServices_initializeGlobalAssertionProperties_block_invoke()
{
  const __CFAllocator *v0;
  uint64_t result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gProcessAssertionArray = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  gHostProcessAssertionDictionary = (uint64_t)CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = FigReentrantMutexCreate();
  gProcessAssertionMutex = result;
  return result;
}

uint64_t __initializeLogging_block_invoke()
{
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  result = fig_note_initialize_category_with_default_work();
  if ((dword_1EE2B3F60 & 0x100) != 0)
    dword_1EE2B3F60 = 0;
  return result;
}

uint64_t __mx_runningBoardServices_createAssertionForTarget_block_invoke()
{
  uint64_t result;

  result = getpid();
  mx_runningBoardServices_createAssertionForTarget_pid = result;
  return result;
}

BOOL CMSUtility_AreRoutingContextsEquivalent(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  _BOOL8 v5;
  CFArrayRef theArray;
  CFTypeRef cf;

  if (!FigCFEqual())
  {
    -[MXSessionManager systemMirroringRoutingContextUUID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "systemMirroringRoutingContextUUID");
    if (FigCFEqual())
    {
      if (FigCFEqual())
        return 1;
      if (FigCFEqual())
        return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a2) == 0;
      return 0;
    }
    if (FigCFEqual())
      return FigCFEqual() != 0;
    return 1;
  }
  if (FigCFEqual())
    return 1;
  if (!FigCFEqual())
    return 0;
  if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a2))
    return 1;
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    theArray = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    v5 = 1;
    if (v4)
    {
      v4(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &theArray);
      if (theArray)
      {
        if (CFArrayGetCount(theArray))
          v5 = 0;
      }
    }
    if (theArray)
      CFRelease(theArray);
  }
  else
  {
    v5 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v5;
}

BOOL CMSUtilityPredicate_IsSessionUsingRoutingContext(uint64_t a1, void *a2, uint64_t a3)
{
  return CMSUtility_AreRoutingContextsEquivalent(a3, objc_msgSend(a2, "routingContextUUID"));
}

uint64_t CMSUtilityPredicate_HasSameAudioCategory(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "audioCategory");
  return FigCFEqual();
}

uint64_t CMSUtilityPredicate_IsSameClientAndNotStopped(int a1, void *a2, CFNumberRef number)
{
  uint64_t result;
  int v5;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!a2)
    return 0;
  result = objc_msgSend(a2, "isPlaying");
  if ((_DWORD)result)
  {
    v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

void *CMSUtility_GetIsPlaying(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isPlaying");
  return result;
}

uint64_t CMSUtilityPredicate_BelongsToTheSameProcessAndIsActiveAndStopsWhenBackgrounded(int a1, void *a2, CFNumberRef number)
{
  int v4;
  uint64_t result;
  int v6;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  v4 = objc_msgSend(a2, "isActive");
  result = 0;
  if (v4)
  {
    v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    if (v6 == valuePtr)
      return objc_msgSend(a2, "stopsWhenDeviceLocks");
    else
      return 0;
  }
  return result;
}

uint64_t CMSUtilityPredicate_BelongsToTheSameProcessAndIsPlayingAndStopsWhenBackgrounded(int a1, void *a2, CFNumberRef number)
{
  uint64_t result;
  int v5;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!a2)
    return 0;
  result = objc_msgSend(a2, "isPlaying");
  if (!(_DWORD)result)
    return result;
  v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
  if (v5 == valuePtr)
    return objc_msgSend(a2, "stopsWhenDeviceLocks");
  else
    return 0;
}

uint64_t CMSUtilityPredicate_IsVolumeButtonClient(uint64_t a1, void *a2, const __CFString *a3)
{
  int v4;
  uint64_t result;

  v4 = PVMCategoriesAreEquivalent((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", objc_msgSend(a2, "audioCategory")), (const void *)objc_msgSend(a2, "audioMode"), a3, 0);
  if (objc_msgSend(a2, "isActive"))
  {
    LODWORD(result) = objc_msgSend(a2, "hasPhoneCallBehavior");
    if (v4)
      return 1;
    else
      return result;
  }
  else
  {
    LODWORD(result) = objc_msgSend(a2, "wantsVolumeChangesWhenPausedOrInactive");
    if (v4)
      return result;
    else
      return 0;
  }
}

uint64_t CMSUtilityPredicate_IsActiveWithDisplayID(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "isActive");
  if ((_DWORD)result)
  {
    objc_msgSend(a2, "displayID");
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t CMSUtilityPredicate_SessionWantsSystemSoundNotifications(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "wantsVibrationNotifications");
}

uint64_t CMSUtilityPredicate_SessionHasSubscribedToNotification(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend((id)objc_msgSend(a2, "notificationsSubscribedTo"), "containsObject:", a3);
}

void *CMSUtility_PlaysToCarAltAudio(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    objc_msgSend(result, "audioCategory");
    if (FigCFEqual()
      || (objc_msgSend(v1, "audioCategory"), result = (void *)FigCFEqual(), (_DWORD)result))
    {
      objc_msgSend(v1, "audioMode");
      return (void *)(FigCFEqual() != 0);
    }
  }
  return result;
}

__CFString *CMSMUtility_GetCurrentAudioDestinationForVoiceOverSession()
{
  __CFString *v0;
  id v1;
  uint64_t v2;
  BOOL v3;

  v0 = CFSTR("VirtualAudioDevice_Default");
  if (CMSMDeviceState_IsVoiceOverOn())
  {
    v1 = -[MXSessionManager copyVoiceOverSession](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyVoiceOverSession");
    v2 = objc_msgSend(v1, "audioDestinationPriority");
    if (v1)
      v3 = v2 == 0;
    else
      v3 = 1;
    if (!v3)
      v0 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v2);

  }
  return v0;
}

uint64_t CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice(uint64_t a1, uint64_t a2)
{
  int VADIDForVADName;
  _BOOL8 v5;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  VADIDForVADName = CMSMUtility_GetVADIDForVADName(a1);
  if (VADIDForVADName == CMSMUtility_GetVADIDForVADName(a2))
    return 1;
  v11 = 0;
  cf = 0;
  v9 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(a1, 0, &cf, &v11, &v10);
  cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(a2, 0, &v9, &v8, &v7);
  v5 = FigCFEqual() && FigCFEqual() && FigCFEqual();
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return v5;
}

uint64_t CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(void *a1, void *a2)
{
  __CFString *v4;
  uint64_t v5;
  __CFString *v6;
  uint64_t v7;

  v4 = CFSTR("VirtualAudioDevice_Default");
  v5 = objc_msgSend(a1, "audioDestinationPriority");
  v6 = CFSTR("VirtualAudioDevice_Default");
  if (a1)
  {
    v6 = CFSTR("VirtualAudioDevice_Default");
    if (v5)
      v6 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v5);
  }
  v7 = objc_msgSend(a2, "audioDestinationPriority");
  if (a2 && v7)
    v4 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v7);
  return CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice((uint64_t)v6, (uint64_t)v4);
}

uint64_t CMSUtilityPredicate_ShouldDuck(void *a1, void *a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t v8;
  __CFArray *v9;
  char v10;

  if (a2 == a1 || !objc_msgSend(a2, "isPlaying"))
  {
    v5 = 1;
  }
  else
  {
    v4 = objc_msgSend(a2, "clientPriority");
    v5 = v4 > objc_msgSend(a1, "clientPriority");
  }
  v6 = CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(a1, a2);
  v7 = objc_msgSend(a2, "isActive");
  v8 = 0;
  if (a2 != a1 && v7)
  {
    v9 = CMSMUtility_CopyCurrentRouteTypes();
    if (v6)
      v10 = v5;
    else
      v10 = 1;
    LODWORD(v8) = (v10 & 1) == 0
               || (objc_msgSend(a1, "audioCategory"), FigCFEqual())
               && (FigCFArrayContainsValue()
                || (objc_msgSend(a2, "audioCategory"), FigCFEqual()));
    objc_msgSend(a2, "audioCategory");
    if (FigCFEqual())
      v8 = 0;
    else
      v8 = v8;
    if (v9)
      CFRelease(v9);
  }
  return v8;
}

BOOL CMSUtility_SessionDucksOthers(void *a1)
{
  return objc_msgSend(a1, "interruptionStyle") == 32;
}

__CFArray *CMSUtility_CopyDuckableSessionsPlayingToDefaultVAD(void *a1)
{
  __CFArray *Mutable;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  BOOL v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v7);
        if (v8 != a1)
        {
          if (objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v7), "isPlaying"))
          {
            v9 = objc_msgSend(v8, "clientPriority");
            if (v9 <= objc_msgSend(a1, "clientPriority"))
            {
              if (CMSUtility_IsPlayingToDefaultVAD(v8))
                CFArrayAppendValue(Mutable, v8);
            }
          }
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (CFArrayGetCount(Mutable))
    v10 = 1;
  else
    v10 = Mutable == 0;
  if (!v10)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t CMSUtility_IsSessionTheDefaultMusicApp(void *a1)
{
  objc_msgSend(a1, "displayID");
  -[MXSessionManager defaultMusicApp](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultMusicApp");
  return FigCFEqual();
}

uint64_t CMSUtility_IsGameApp(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v3;
  NSObject *v4;
  uint64_t v5;

  if (MX_CoreServices_DoesAppHaveGamesGenre(objc_msgSend(a1, "displayID")))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v3 = (void *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID((uint64_t)CFSTR("LSApplicationCategoryType"), objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v3, "hasSuffix:", CFSTR("games")))
    {
      if (dword_1EE2B3F38)
      {
        v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        v5 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }

  }
  return v5;
}

uint64_t CMSUtility_DidSessionRecentlyWantToPauseSpokenAudio(void *a1)
{
  return objc_msgSend(a1, "recentlyWantedToPauseSpokenAudio");
}

BOOL CMSUtility_IsDoingSpokenAudio(void *a1)
{
  if (CMSMUtility_IsCarPlaySessionPresent())
  {
    objc_msgSend(a1, "audioMode");
    if (FigCFEqual())
      return 0;
  }
  objc_msgSend(a1, "audioMode");
  if (FigCFEqual())
    return 1;
  objc_msgSend(a1, "audioMode");
  return FigCFEqual() != 0;
}

uint64_t CMSUtility_IsDisruptiveWhenGoingActive(void *a1)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  __CFDictionary *RouteConfigurationDictionary;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  int outData;

  outData = 1;
  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(a1, "audioCategory"));
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(a1, "audioMode"));
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)objc_msgSend(a1, "activationContext"), (const void *)objc_msgSend(a1, "allowedPortTypes"));
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"rsidbolg";
  inAddress.mElement = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(dword_1EE2B3C08, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData))
  {
    outData = 1;
  }
  if (RouteConfigurationDictionary)
    CFRelease(RouteConfigurationDictionary);
  return outData;
}

uint64_t CMSUtility_IsAllowedToStopOthers(void *a1)
{
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (objc_msgSend(a1, "applicationState") == 8)
    return 1;
  if (!objc_msgSend(a1, "applicationState"))
    return 1;
  objc_msgSend(a1, "setApplicationState:", CMSUtility_GetApplicationStateForSession(a1));
  if (objc_msgSend(a1, "applicationState") == 8 || !objc_msgSend(a1, "applicationState"))
    return 1;
  if (objc_msgSend(a1, "applicationState") != 4)
  {
    if (!dword_1EE2B3F38)
      return 0;
LABEL_24:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (!CMSUtility_HasBackgroundEntitlement(a1))
  {
    if (!dword_1EE2B3F38)
      return 0;
    goto LABEL_24;
  }
  v2 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
  if (v2 == objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
    return 1;
  if ((objc_msgSend((id)objc_msgSend(a1, "displayID"), "isEqualToString:", -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID")) & 1) != 0)return 1;
  if (CMSUtility_IsSessionTheDefaultMusicApp(a1))
    return 1;
  objc_msgSend(a1, "displayID");
  -[MXSessionManager appAllowedToInitiatePlaybackTemporarily](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "appAllowedToInitiatePlaybackTemporarily");
  if (FigCFEqual())
    return 1;
  if (CMSUtility_HasAssertionsToStartNonMixablePlayback(a1))
    return 1;
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual())
    return 1;
  if ((objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0)
    return 1;
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual()
    || objc_msgSend(a1, "clientPriority") == 10
    || CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)
    && CMSMUtility_IAPAppProcessIDIsUsingAccessory(objc_msgSend(a1, "displayID")))
  {
    return 1;
  }
  if (dword_1EE2B3F38)
    goto LABEL_24;
  return 0;
}

uint64_t CMSUtility_HasAssertionsToStartNonMixablePlayback(void *a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t UInt64;
  uint64_t v8;

  v1 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v2, v5);
      UInt64 = FigCFNumberGetUInt64();
      if (UInt64 == 16 || UInt64 == 50004)
        break;
      if (v4 == ++v5)
        goto LABEL_9;
    }
    v8 = 1;
  }
  CFRelease(v2);
  return v8;
}

uint64_t CMSUtility_IsAllowedToStopThisSession(void *a1, void *a2)
{
  uint64_t result;

  result = CMSUtility_IsAllowedToStopOthers(a1);
  if ((_DWORD)result)
    return !a2 || objc_msgSend(a2, "applicationState") != 8;
  return result;
}

uint64_t CMSUtility_IsReplayKitExtension(void *a1)
{
  const void *v1;
  uint64_t v2;

  v1 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
  v2 = FigCFEqual();
  if (v1)
    CFRelease(v1);
  return v2;
}

void *CMSUtility_GetAudioMode(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "audioMode");
  return a1;
}

uint64_t cmsutility_hasAssertionsToStartMixablePlayback(void *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  uint64_t UInt64;
  uint64_t HasGPSEntitlement;

  v2 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v2)
    return 1;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_17:
    HasGPSEntitlement = 1;
  }
  else
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      UInt64 = FigCFNumberGetUInt64();
      if (UInt64 > 9999)
      {
        if ((unint64_t)(UInt64 - 10000) < 6 || UInt64 == 50002 || UInt64 == 50004)
          goto LABEL_17;
      }
      else if ((unint64_t)UInt64 <= 0x17 && ((1 << UInt64) & 0x8937FE) != 0)
      {
        goto LABEL_17;
      }
    }
    HasGPSEntitlement = CMSUtility_HasGPSEntitlement(a1);
  }
  CFRelease(v3);
  return HasGPSEntitlement;
}

uint64_t cmsutility_hasAssertionsToStartMixableRecording(void *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  uint64_t UInt64;
  uint64_t HasGPSEntitlement;

  v2 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v2)
    return 1;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_17:
    HasGPSEntitlement = 1;
  }
  else
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      UInt64 = FigCFNumberGetUInt64();
      if (UInt64 > 9999)
      {
        if ((unint64_t)(UInt64 - 10000) < 6 || UInt64 == 50002 || UInt64 == 50004)
          goto LABEL_17;
      }
      else if ((unint64_t)UInt64 <= 0x17 && ((1 << UInt64) & 0x8917FE) != 0)
      {
        goto LABEL_17;
      }
    }
    HasGPSEntitlement = CMSUtility_HasGPSEntitlement(a1);
  }
  CFRelease(v3);
  return HasGPSEntitlement;
}

BOOL CMSUtility_IsAnyoneBesidesAssistantsSessionsActive(void *a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (v7 != a1)
        {
          if (objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6), "isActive"))
          {
            objc_msgSend(v7, "audioCategory");
            if (!FigCFEqual())
            {
              if (CMSUtility_DoesSessionActuallyPlayAudio(v7))
              {
                v8 = v7 != 0;
                goto LABEL_14;
              }
            }
          }
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

uint64_t CMSUtility_DoesSessionActuallyPlayAudio(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1 || !objc_msgSend(a1, "doesntActuallyPlayAudio"))
    return 1;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t CMSUtility_SessionWithPIDCanContinueAirPlayingVideoIfScreenIsLocked(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!CMSMDeviceState_ScreenIsBlanked() || !CMSMUtility_IsAirPlayVideoActive())
    return 0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          if (objc_msgSend(v7, "isPlaying"))
          {
            objc_msgSend(v7, "audioCategory");
            if (FigCFEqual()
              || (objc_msgSend(v7, "audioCategory"), FigCFEqual())
              || (objc_msgSend(v7, "audioCategory"), FigCFEqual()))
            {
              v8 = 1;
              goto LABEL_18;
            }
          }
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_18:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

void *CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(void *a1)
{
  void *result;

  result = CMSUtility_HasBackgroundEntitlement(a1);
  if ((_DWORD)result)
  {
    result = (void *)1;
    if (a1)
    {
      if (objc_msgSend(a1, "displayID"))
      {
        if (CFStringFind((CFStringRef)objc_msgSend(a1, "displayID"), CFSTR("WebKit"), 1uLL).length > 0)
          return 0;
        objc_msgSend(a1, "displayID");
        if (FigCFArrayContainsValue())
          return 0;
      }
    }
  }
  return result;
}

uint64_t CMSUtility_IsSessionWithPIDAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(int a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          v8 = (uint64_t)CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(v7);
          goto LABEL_11;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_11:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

uint64_t CMSUtility_HasGPSEntitlement(void *a1)
{
  if ((objc_msgSend(a1, "hasFetchedGPSPrivileges") & 1) == 0)
  {
    objc_msgSend(a1, "setHasGPSPrivileges:", CMSUtility_FetchGPSEntitlementForSessionWithPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")));
    objc_msgSend(a1, "setHasFetchedGPSPrivileges:", 1);
  }
  return objc_msgSend(a1, "hasGPSPrivileges");
}

BOOL CMSUtility_FetchGPSEntitlementForSessionWithPID(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFTypeID v3;
  _BOOL8 v4;

  if ((int)a1 < 1)
    return 0;
  v1 = (const __CFArray *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID((uint64_t)CFSTR("UIBackgroundModes"), a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  v4 = v3 == CFArrayGetTypeID() && CMSMUtility_AllowedToUseGPSInBackground(v2);
  CFRelease(v2);
  return v4;
}

uint64_t CMSUtility_IsSomeOtherNonIDSClientActiveWithNonDefaultVADConfiguration(void *a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (v7 != a1
          && CMSUtility_IsNonIDSClientActiveOnDestination(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v6))
          && (CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)objc_msgSend(v7, "audioCategory")) != 1668505974|| CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v7, "audioMode")) != 1768776806))
        {
          v8 = 1;
          goto LABEL_14;
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_14:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

CFNumberRef CMSUtility_CopyFadeDuration(void *a1, int a2, int a3)
{
  float FadeOutDurationForPlaybackHandoff;
  int v8;
  int valuePtr;

  valuePtr = -1082130432;
  if (a1 && objc_msgSend(a1, "interruptionFadeDurationSetByClient"))
  {
    objc_msgSend(a1, "interruptionFadeDuration");
    goto LABEL_4;
  }
  if (a2 == 1)
    goto LABEL_14;
  if (a2)
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  if ((objc_msgSend(a1, "isTheAssistant") & 1) != 0
    || (objc_msgSend(a1, "isIDSMXCoreSession") & 1) != 0
    || objc_msgSend(a1, "hasPhoneCallBehavior"))
  {
    v8 = 1008981770;
LABEL_15:
    valuePtr = v8;
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  }
  if (!a3)
  {
LABEL_14:
    v8 = 1060320051;
    goto LABEL_15;
  }
  FadeOutDurationForPlaybackHandoff = CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
LABEL_4:
  valuePtr = LODWORD(FadeOutDurationForPlaybackHandoff);
  if (FadeOutDurationForPlaybackHandoff == 0.0)
    return 0;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
}

BOOL CMSUtility_ShouldInterrupt(void *a1, void *a2, int a3)
{
  uint64_t v6;
  int IsContextSystemMusicAndIndependent;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1 == a2
    || !objc_msgSend(a2, "isActive")
    || objc_msgSend(a1, "siriInputDeviceUUID")
    || objc_msgSend(a2, "siriInputDeviceUUID"))
  {
    return 0;
  }
  if (objc_msgSend(a1, "isSharePlayCallSession")
    && objc_msgSend(a2, "isSharePlayMediaSession"))
  {
    if (dword_1EE2B3F38)
      goto LABEL_26;
    return 0;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled()
    && -[MXSessionManager canSessionsCoexistDueToIndependentRecording:victim:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "canSessionsCoexistDueToIndependentRecording:victim:", a1, a2))
  {
    if (dword_1EE2B3F38)
      goto LABEL_26;
    return 0;
  }
  if (a3)
  {
    if (!objc_msgSend(a2, "isActive"))
      return 0;
    objc_msgSend(a2, "audioCategory");
    return FigCFEqual() != 0;
  }
  IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(a1, "routingContextUUID"));
  if (IsContextSystemMusicAndIndependent != FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(objc_msgSend(a2, "routingContextUUID"))
    && !CMSMDeviceState_ItsAHomePod())
  {
    if (dword_1EE2B3F38)
    {
LABEL_26:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_95:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(objc_msgSend(a1, "routingContextUUID"))
    || FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(objc_msgSend(a2, "routingContextUUID")))
  {
    if (dword_1EE2B3F38)
      goto LABEL_26;
    return 0;
  }
  if (!objc_msgSend(a1, "mixesWithEveryone")
    || !objc_msgSend(a2, "isActive")
    || objc_msgSend(a1, "isTheAssistant") && (objc_msgSend(a2, "isRecording") & 1) != 0)
  {
    if (objc_msgSend(a2, "isActive"))
    {
      v10 = objc_msgSend(a2, "clientPriority");
      v6 = v10 <= objc_msgSend(a1, "clientPriority");
    }
    else
    {
      v6 = 0;
    }
    if (!objc_msgSend(a2, "mixesWithEveryone"))
      goto LABEL_80;
    if (-[MXSessionManager isMixableSessionBeingInterruptedByNextRecordingClient:victim:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isMixableSessionBeingInterruptedByNextRecordingClient:victim:", a1, a2))
    {
      if (dword_1EE2B3F38)
      {
LABEL_37:
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        v15 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual()
      || (objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0
      || (objc_msgSend(a1, "audioCategory"), FigCFEqual()))
    {
      objc_msgSend(a2, "audioCategory");
      if (FigCFEqual())
      {
LABEL_42:
        v15 = 0;
        goto LABEL_64;
      }
      if (objc_msgSend(a2, "isAirPlayReceiverSession")
        && (objc_msgSend(a1, "hasPhoneCallBehavior") & 1) == 0)
      {
        if (!dword_1EE2B3F38)
          goto LABEL_42;
        goto LABEL_53;
      }
      if (objc_msgSend(a2, "hasAudioMode:", CFSTR("EchoCancellationInput")))
      {
        if (!dword_1EE2B3F38)
          goto LABEL_42;
LABEL_53:
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_42;
      }
    }
    else
    {
      if (objc_msgSend(a1, "clientPriority") != 20
        || !objc_msgSend(a2, "hasAudioMode:", CFSTR("EchoCancellationInput")))
      {
        goto LABEL_42;
      }
      if (dword_1EE2B3F38)
        goto LABEL_37;
    }
LABEL_63:
    v15 = 1;
LABEL_64:
    if ((objc_msgSend(a2, "applicationState", v19, v20) == 2
       || objc_msgSend(a2, "applicationState") == 4)
      && objc_msgSend(a2, "isActive")
      && (objc_msgSend(a2, "isPlaying") & 1) == 0)
    {
      v15 = objc_msgSend(a2, "hwControlFlags") & 2;
    }
    if (!objc_msgSend(a1, "isTheAssistant"))
      goto LABEL_77;
    if (CMSMUtility_IsCarPlaySessionPresent()
      && CMSUtility_PlaysToCarAltAudio(a2)
      && CMSUtility_DoesSessionActuallyPlayAudio(a2))
    {
      CMSMUtility_HandOverInterruptionsToSession(a2, a1);
    }
    else if ((objc_msgSend(a2, "isCarSession") & 1) == 0 && (objc_msgSend(a2, "isHardwareSafetySession") & 1) == 0)
    {
      v15 = objc_msgSend(a2, "isIDSMXCoreSession") ^ 1;
LABEL_77:
      v16 = objc_msgSend(a1, "hasAudioMode:", CFSTR("Beacon"));
      if (objc_msgSend(a1, "isHardwareSafetySession") | v16)
        v6 = 1;
      else
        v6 = v15;
LABEL_80:
      if (CMSMVAUtility_IsAdditiveRoutingEnabled()
        && (_DWORD)v6
        && (objc_msgSend(a1, "isTheAssistant") & 1) == 0
        && ((objc_msgSend(a1, "hasAudioMode:", CFSTR("SoundRecognition")) & 1) != 0
         || objc_msgSend(a2, "hasAudioMode:", CFSTR("SoundRecognition")))
        && ((objc_msgSend(a2, "isRoutedToOnDemandVAD") & 1) != 0
         || objc_msgSend(a1, "willRouteToOnDemandVADOnActivation")))
      {
        if (dword_1EE2B3F38)
        {
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          goto LABEL_95;
        }
        return 0;
      }
      v17 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      if (v17 == objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue"))
      {
        objc_msgSend(a1, "audioCategory");
        if (FigCFEqual())
        {
          if (CMSMUtility_IsRecordingCategory((const void *)objc_msgSend(a2, "audioCategory")))
            return 0;
        }
        objc_msgSend(a2, "audioCategory");
        if (FigCFEqual())
        {
          if (CMSMUtility_IsRecordingCategory((const void *)objc_msgSend(a1, "audioCategory")))
            return 0;
        }
      }
      return v6;
    }
    v15 = 0;
    goto LABEL_77;
  }
  v12 = CMSMDeviceState_ItsAHomePod();
  v13 = objc_msgSend(a1, "wantsToPauseSpokenAudio");
  if (v12)
  {
    if (!v13
      || !CMSUtility_IsDoingSpokenAudio(a2)
      || FigRoutingManagerIsConfigurationWHASilentPrimary(objc_msgSend(a2, "routingContextUUID"))
      || (objc_msgSend(a2, "prefersNoInterruptionsByMixableSessions") & 1) != 0)
    {
      return 0;
    }
    CMSUtility_GetCurrentAudioDestination(a1);
    CMSUtility_GetCurrentAudioDestination(a2);
    objc_msgSend(a1, "setDontTakeOverHardware:", FigCFEqual() != 0);
    return 1;
  }
  if (!v13 || !CMSUtility_IsDoingSpokenAudio(a2))
    return 0;
  v6 = objc_msgSend(a2, "prefersNoInterruptionsByMixableSessions") ^ 1;
  if ((objc_msgSend(a1, "isTheAssistant") & 1) == 0)
  {
    CMSUtility_GetCurrentAudioDestination(a1);
    CMSUtility_GetCurrentAudioDestination(a2);
    objc_msgSend(a1, "setDontTakeOverHardware:", FigCFEqual() != 0);
  }
  return v6;
}

uint64_t CMSUtility_ShouldSessionToInterruptHandOverInterruptions(void *a1, void *a2)
{
  if (objc_msgSend(a1, "handsOverInterruptionsToInterruptor")
    && (objc_msgSend(a2, "handsOverInterruptionsToInterruptor") & 1) != 0
    || objc_msgSend(a1, "mixesWithEveryone") && (objc_msgSend(a1, "wantsToPauseSpokenAudio") & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend(a1, "isTheAssistant");
  }
}

BOOL CMSUtility_ShouldSessionToInterruptHandOverDucking(void *a1, void *a2)
{
  int v3;

  v3 = objc_msgSend(a1, "interruptionStyle");
  return objc_msgSend(a2, "interruptionStyle") == 32 && v3 == 32;
}

void *CMSUtility_GetDisplayID(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "displayID");
  return a1;
}

uint64_t CMSUtility_IsPlayingToSystemSoundLocalVAD(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(a1, "audioDestinationPriority");
  if (a1 && v2)
    -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v2);
  return FigCFEqual();
}

uint64_t CMSUtility_IsPlayingToSystemSoundRemoteVAD(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(a1, "audioDestinationPriority");
  if (a1 && v2)
    -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v2);
  return FigCFEqual();
}

uint64_t CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "isPlaying");
  if ((_DWORD)result)
    return CMSUtility_PlaysToCarMainAudio(a2);
  return result;
}

BOOL CMSUtility_PlaysToCarMainAudio(void *a1)
{
  _BOOL8 v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return 0;
  objc_msgSend(a1, "audioCategory");
  v2 = 0;
  if (!FigCFEqual())
  {
    objc_msgSend(a1, "audioCategory");
    if (!FigCFEqual()
      && !CMSUtility_PlaysToCarAltAudio(a1)
      && CMSUtility_DoesSessionActuallyPlayAudio(a1))
    {
      v2 = 1;
    }
  }
  if (objc_msgSend(a1, "isTheAssistant")
    && FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return v2;
}

uint64_t CMSUtility_ShouldBorrowCarMainAudio(void *a1)
{
  unsigned int v2;
  uint64_t v3;

  if (a1)
  {
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory")))
    {
      goto LABEL_29;
    }
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual())
      goto LABEL_29;
    objc_msgSend(a1, "audioMode");
    if (FigCFEqual())
      goto LABEL_29;
    if ((objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0)
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (FigCFEqual() || (objc_msgSend(a1, "isTheAssistant") & 1) != 0)
      goto LABEL_29;
    objc_msgSend(a1, "audioCategory");
    if (!FigCFEqual())
    {
      objc_msgSend(a1, "audioCategory");
      if (!FigCFEqual())
      {
        LOBYTE(v3) = 0;
        return v3;
      }
    }
    v2 = objc_msgSend(a1, "interruptionStyle") - 1;
    if (v2 > 7)
LABEL_29:
      LOBYTE(v3) = 1;
    else
      return (0x1010100010100uLL >> (8 * v2));
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

uint64_t CMSUtility_GetStarkInterruptionContext(uint64_t result, void *a2, uint64_t a3)
{
  int v5;
  int v6;

  if (!a3)
    return result;
  v5 = result;
  *(_DWORD *)a3 = result;
  result = objc_msgSend(a2, "audioCategory");
  *(_QWORD *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (!a2)
    return result;
  if (v5 == 1)
  {
    if (FigEndpointCentralEntityIsDoingActivity(qword_1EE2B3CD8, 0x1E309F4A8, CFSTR("PhoneCall"))
      && (result = CMSMUtility_PhoneCallOrRingtoneExists(), !(_DWORD)result))
    {
      *(_DWORD *)(a3 + 16) = -1;
    }
    else
    {
      result = CMSMUtility_IsPlayAndRecordCategory(objc_msgSend(a2, "audioCategory"));
      if (!(_DWORD)result)
      {
        objc_msgSend(a2, "audioCategory");
        result = FigCFEqual();
        if (!(_DWORD)result)
          return result;
      }
    }
    *(_DWORD *)(a3 + 24) = -1;
    return result;
  }
  if (v5)
    return result;
  objc_msgSend(a2, "audioCategory");
  if (FigCFEqual())
  {
    v6 = -1;
LABEL_14:
    *(_DWORD *)(a3 + 24) = v6;
    goto LABEL_15;
  }
  if (CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a2))
  {
    v6 = 10;
    goto LABEL_14;
  }
LABEL_15:
  result = objc_msgSend(a2, "hasPhoneCallBehavior");
  if ((result & 1) != 0 || (objc_msgSend(a2, "audioCategory"), result = FigCFEqual(), (_DWORD)result))
    *(_DWORD *)(a3 + 16) = 1;
  return result;
}

void CMSUtilityApplier_InheritApplicationStateAndPostApplicationStateDidChangeNotification(void *a1, const __CFNumber *a2)
{
  const __CFNumber *SInt32;

  objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
  CMSessionMgrHandleApplicationStateChange(SInt32, a2, 0);
  if (SInt32)
    CFRelease(SInt32);
}

void CMSUtility_PostInterruptionCommandNotification(void *a1, unsigned int a2, const __CFString *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  const __CFString *v20;
  int v21;
  const void **v22;
  int IsAsyncDuckingEnabled;
  int IsAirPlayVideoActive;
  void (*v25)(uint64_t, uint64_t, _QWORD, __CFDictionary *);
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  NSObject *v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, _QWORD, __CFDictionary *);
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD v37[6];
  float v38;
  _QWORD v39[6];
  unsigned int valuePtr;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = a2;
  v17 = CFGetAllocator(a1);
  v18 = CFNumberCreate(v17, kCFNumberSInt32Type, &valuePtr);
  if (v18)
  {
    v19 = v18;
    CFDictionarySetValue(Mutable, CFSTR("InterruptionCmd"), v18);
    CFRelease(v19);
  }
  if (a3)
    v20 = a3;
  else
    v20 = CFSTR("unknown interruptor");
  CFDictionarySetValue(Mutable, CFSTR("InterruptorName"), v20);
  if (a4)
    CFDictionarySetValue(Mutable, CFSTR("Status"), a4);
  if (a7)
    CFDictionarySetValue(Mutable, CFSTR("InterruptionReason"), a7);
  if (a8)
    CFDictionarySetValue(Mutable, CFSTR("InterruptorBundleID"), a8);
  v21 = objc_msgSend(a1, "applicationState");
  v22 = (const void **)MEMORY[0x1E0C9AE50];
  if (v21 == 2)
    CFDictionarySetValue(Mutable, CFSTR("InterruptedDueToAppSuspension"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (a5)
    CFDictionarySetValue(Mutable, CFSTR("QuietVolume"), a5);
  if (a6)
    CFDictionarySetValue(Mutable, CFSTR("VolumeChangeDuration"), a6);
  IsAsyncDuckingEnabled = MX_FeatureFlags_IsAsyncDuckingEnabled();
  if ((a2 & 0xFFFFFFFE) == 2 && IsAsyncDuckingEnabled)
    CFDictionarySetValue(Mutable, CFSTR("ModeAsync"), *v22);
  if (MX_FeatureFlags_IsAudiomxdEnabled()
    || !objc_msgSend(a1, "isAudioSession")
    || (objc_msgSend(a1, "isFigInstantiatedAudioSession") & 1) != 0)
  {
    IsAirPlayVideoActive = CMSMUtility_IsAirPlayVideoActive();
    v25 = (void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary *))unk_1EE2B3BD0;
    if (unk_1EE2B3BD0)
    {
      v26 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      v27 = objc_msgSend(a1, "audioSessionID");
      v25(v26, v27, valuePtr, Mutable);
    }
    if (IsAirPlayVideoActive)
    {
      if (a2)
      {
LABEL_32:
        if (objc_msgSend(a1, "isCarSession"))
        {
          CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("Interruption"));
          v38 = 0.5;
          CFNumberGetValue((CFNumberRef)a6, kCFNumberFloat32Type, &v38);
          usleep((float)(v38 * 1000000.0));
          goto LABEL_38;
        }
        if (Mutable)
          CFRetain(Mutable);
        v29 = a1;
        v30 = MXGetNotificationSenderQueue();
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 3221225472;
        v37[2] = __CMSUtility_PostInterruptionCommandNotification_block_invoke_2;
        v37[3] = &unk_1E309DAB0;
        v37[4] = a1;
        v37[5] = Mutable;
        v31 = v37;
        v32 = 6693;
        goto LABEL_37;
      }
    }
    else
    {
      v28 = objc_msgSend(a1, "isAudioOnlyAirPlayVideoActive");
      if (a2 || (v28 & 1) == 0)
        goto LABEL_32;
    }
    CMSMUtility_PostNotificationToSession(a1, (uint64_t)CFSTR("AirPlayVideoWillBeInterrupted"));
    goto LABEL_32;
  }
  v33 = (void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary *))unk_1EE2B3BD0;
  if (unk_1EE2B3BD0)
  {
    v34 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    v35 = objc_msgSend(a1, "audioSessionID");
    v33(v34, v35, valuePtr, Mutable);
    if (Mutable)
      CFRetain(Mutable);
    v36 = a1;
    v30 = MXGetNotificationSenderQueue();
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __CMSUtility_PostInterruptionCommandNotification_block_invoke;
    v39[3] = &unk_1E309DAB0;
    v39[4] = a1;
    v39[5] = Mutable;
    v31 = v39;
    v32 = 6638;
LABEL_37:
    MXDispatchAsync((uint64_t)"CMSUtility_PostInterruptionCommandNotification", (uint64_t)"CMSessionManager_SessionUtilities.m", v32, 0, 0, v30, (uint64_t)v31);
  }
LABEL_38:
  if (Mutable)
    CFRelease(Mutable);
}

void *CMSUtilityApplier_ResumeWaitingLockStopper(void *result, _BYTE *a2)
{
  void *v3;
  NSObject *v4;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFNumberRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int valuePtr[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    if ((objc_msgSend(result, "isPlaying") & 1) != 0
      || !objc_msgSend(v3, "waitingToResumeWhenDeviceUnlocksOrInForeground"))
    {
      if (objc_msgSend(v3, "wasInterruptedByNowPlayingApp"))
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), CFSTR("non-resumable"), objc_msgSend(v3, "audioCategory"));
        valuePtr[0] = 1060320051;
        v7 = CFNumberCreate(v5, kCFNumberFloat32Type, valuePtr);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v3, 1u, (const __CFString *)objc_msgSend(v3, "clientName", v10, v12), v6, 0, v7, 0, 0);
        if (v7)
          CFRelease(v7);
        if (v6)
          CFRelease(v6);
        objc_msgSend(v3, "setWasInterruptedByNowPlayingApp:", 0);
      }
    }
    else
    {
      cmsSetIsPlaying(v3, 1);
      if (dword_1EE2B3F38)
      {
        v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v3, 5u, 0, 0, 0, 0, 0, 0);
      *a2 = 1;
      if (objc_msgSend(v3, "wasRecordingBeforeBeingInterrupted"))
      {
        objc_msgSend(v3, "setIsRecording:", 1);
        objc_msgSend(v3, "setWasRecordingBeforeBeingInterrupted:", 0);
        CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
      }
    }
    return (void *)objc_msgSend(v3, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0, v9, v11);
  }
  return result;
}

void CMSUtilityApplier_PostNotification_StopCommand(void *a1, unsigned __int8 *a2)
{
  CMSUtilityApplier_PostNotification_StopCommandWithReason(a1, a2, 0);
}

void CMSUtilityApplier_PostNotification_StopCommandWithReason(void *a1, unsigned __int8 *a2, const void *a3)
{
  int v5;
  CFNumberRef v6;

  if (a1)
  {
    if (a2)
    {
      v5 = *a2;
      v6 = CMSUtility_CopyFadeDuration(0, 0, v5);
      if (v5)
        CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff();
    }
    else
    {
      v6 = CMSUtility_CopyFadeDuration(0, 0, 0);
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, CFSTR("CMSessionManager"), 0, 0, v6, a3, 0);
    if (objc_msgSend(a1, "needToEndInterruption"))
      MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, CFSTR("interrupted"), 1);
    if (objc_msgSend(a1, "isActive"))
      cmsSetIsActive(a1, 0, 0);
    if (v6)
      CFRelease(v6);
  }
}

void CMSUtilityApplier_PostNotificationToBackgroundedSession_StopCommand(void *a1)
{
  CFNumberRef v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = CMSUtility_CopyFadeDuration(0, 0, 0);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, CFSTR("CMSessionManager"), 0, 0, v2, 0, 0);
    if (v2)
      CFRelease(v2);
    if (objc_msgSend(a1, "needToEndInterruption", v5, v6))
    {
      if (objc_msgSend(a1, "wantsToSendResumableEndInterruptionWhenBackgrounded"))
        v4 = CFSTR("resumable.backgrounded");
      else
        v4 = CFSTR("interrupted");
      MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v4, 1);
    }
    if (objc_msgSend(a1, "isActive"))
      cmsSetIsActive(a1, 0, 0);
  }
}

void CMSUtilityApplier_PostNotificationToLockStoppers_StopCommand(void *a1)
{
  CFNumberRef v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = CMSUtility_CopyFadeDuration(0, 0, 0);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, CFSTR("CMSessionManager"), 0, 0, v2, 0, 0);
    if (objc_msgSend(a1, "wantsToSendResumableEndInterruptionWhenBackgrounded"))
      v4 = CFSTR("resumable.backgrounded");
    else
      v4 = CFSTR("backgrounded");
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v4, 1);
    if (objc_msgSend(a1, "isActive"))
      cmsSetIsActive(a1, 0, 0);
    objc_msgSend(a1, "setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:", 1, v5, v6);
    if (v2)
      CFRelease(v2);
  }
}

void *CMSUtilityApplier_PostNotification_EndInterruptionCommand(void *result)
{
  void *v1;
  void *v2;
  CFNumberRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  int valuePtr[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if ((objc_msgSend(result, "isActive") & 1) == 0
      && objc_msgSend(v1, "waitingForEndInterruptionWhenDeviceUnlocksOrInForeground"))
    {
      v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@.%@"), CFSTR("non-resumable"), objc_msgSend(v1, "audioCategory"));
      valuePtr[0] = 1060320051;
      v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, valuePtr);
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v1, 1u, (const __CFString *)objc_msgSend(v1, "clientName", v5, v6), v2, 0, v3, 0, 0);

    }
    return (void *)objc_msgSend(v1, "setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:", 0);
  }
  return result;
}

uint64_t CMSUtilityApplier_PostNotification_PauseCommand(void *a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *SInt32;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
    v2 = objc_msgSend(a1, "isPlaying");
  else
    v2 = 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSUtility_PostInterruptionCommandNotification(a1, 4u, 0, 0, 0, 0, 0, 0);
  cmsSetIsPlaying(a1, 0);
  CMSMSleep_ReleasePlaybackProcessAssertion(a1);
  if (objc_msgSend(a1, "needToEndInterruption"))
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, CFSTR("backgrounded"), 1);
  if (objc_msgSend(a1, "isActive", v6, v7))
    cmsSetIsActive(a1, 0, 0);
  objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (-[NSArray containsObject:](-[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs"), "containsObject:", SInt32)&& objc_msgSend(a1, "isRecording"))
  {
    objc_msgSend(a1, "setIsRecording:", 0);
    objc_msgSend(a1, "setWasRecordingBeforeBeingInterrupted:", 1);
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
  }
  if (SInt32)
    CFRelease(SInt32);
  return objc_msgSend(a1, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", v2);
}

void *CMSUtilityApplier_PostNotification_ResumeCommand(void *result)
{
  void *v1;
  NSObject *v2;
  const __CFAllocator *v3;
  CFStringRef v4;
  CFNumberRef v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int valuePtr[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if ((objc_msgSend(result, "isPlaying") & 1) != 0
      || !objc_msgSend(v1, "waitingToResumeWhenDeviceUnlocksOrInForeground"))
    {
      if (objc_msgSend(v1, "wasInterruptedByNowPlayingApp"))
      {
        v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), CFSTR("non-resumable"), objc_msgSend(v1, "audioCategory"));
        valuePtr[0] = 1060320051;
        v5 = CFNumberCreate(v3, kCFNumberFloat32Type, valuePtr);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v1, 1u, (const __CFString *)objc_msgSend(v1, "clientName", v8, v10), v4, 0, v5, 0, 0);
        if (v5)
          CFRelease(v5);
        if (v4)
          CFRelease(v4);
        objc_msgSend(v1, "setWasInterruptedByNowPlayingApp:", 0);
      }
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v1, 5u, 0, 0, 0, 0, 0, 0);
      if (objc_msgSend(v1, "wasRecordingBeforeBeingInterrupted"))
      {
        objc_msgSend(v1, "setIsRecording:", 1);
        objc_msgSend(v1, "setWasRecordingBeforeBeingInterrupted:", 0);
        CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
      }
    }
    return (void *)objc_msgSend(v1, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0, v7, v9);
  }
  return result;
}

void CMSUtility_DeactivateTimerHandler(uint64_t a1)
{
  void *v1;
  void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = CMSMUtility_CopyMXCoreSessionWithID(a1);
  if (v1)
  {
    v2 = v1;
    if (objc_msgSend(v1, "isActive")
      && (objc_msgSend(v2, "isPlaying") & 1) == 0
      && objc_msgSend(v2, "sessionDeactivateTimer"))
    {
      dispatch_source_cancel((dispatch_source_t)objc_msgSend(v2, "sessionDeactivateTimer"));
      objc_msgSend(v2, "setSessionDeactivateTimer:", 0);
      if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAirPlaySession:", v2)&& objc_msgSend(v2, "reporterStarted"))
      {
        CMSUtility_StopReporterWithAudioStatistics(v2);
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtilityApplier_PostNotification_StopCommandWithReason(v2, 0, 0);
      }
    }

  }
}

CFIndex CMSUtility_StopReporterWithAudioStatistics(void *a1)
{
  CFIndex result;
  CFIndex v3;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  _QWORD valuePtr[23];

  valuePtr[21] = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "reporterIDs");
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v3 = result;
      for (i = 0; i != v3; ++i)
      {
        valuePtr[0] = 1;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v7, v8), i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
        objc_msgSend(a1, "setReporterStarted:", 0);
        result = off_1EE2B3D58(valuePtr[0]);
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

uint64_t CMSUtility_CopyCPMSPowerBudgetForSession()
{
  return 0;
}

void CMSUtility_InterruptSessionForSecureMicrophonePolicy(void *a1)
{
  const void *SInt32;

  if (a1)
  {
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    CMSUtility_PostInterruptionCommandNotification(a1, 0, CFSTR("CMSessionManager"), 0, 0, 0, SInt32, 0);
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, CFSTR("interrupted.securemicrophoneengaged"), 1);
    if (SInt32)
      CFRelease(SInt32);
  }
}

void CMSMUtility_UpdateRecordingAccessIntervals(void *a1)
{
  int v2;
  id v3;
  __int128 v4;
  __int128 v5;

  v2 = objc_msgSend(a1, "auditTokenSetByClient");
  if (a1)
  {
    objc_msgSend(a1, "auditToken");
  }
  else
  {
    v4 = 0u;
    v5 = 0u;
  }
  v3 = MX_PrivacyAccounting_CreateRecordingAccessIntervals(v2, &v4, objc_msgSend((id)objc_msgSend(a1, "clientPID", v4, v5), "intValue"), (void *)objc_msgSend(a1, "hostProcessAttribution"), objc_msgSend(a1, "displayID"));
  MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)objc_msgSend(a1, "bundleIdToPAAccessIntervalMap"));
  objc_msgSend(a1, "setBundleIdToPAAccessIntervalMap:", v3);

}

void *CMSUtility_IsSessionPlayingLongFormAudio(void *result)
{
  if (result)
  {
    objc_msgSend(result, "audioCategory");
    return (void *)(FigCFEqual() != 0);
  }
  return result;
}

uint64_t CMSUtility_StartReporterWithAudioStatistics(void *a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  _QWORD valuePtr[23];

  valuePtr[21] = *MEMORY[0x1E0C80C00];
  result = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      valuePtr[0] = 1;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v7, v8), i);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      off_1EE2B3D50(valuePtr[0]);
      result = objc_msgSend(a1, "setReporterStarted:", 1);
    }
  }
  return result;
}

void CMSUtility_SendSessionReinterruptionDisallowedEventToAudioStatistics(void *a1)
{
  const __CFNumber *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  uint64_t valuePtr;

  if (a1 && objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count"))
  {
    valuePtr = 1;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs"), 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(a1, "displayID");
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetFloat32();
    off_1EE2B3D78(valuePtr, Mutable, 11, 6);
    if (Mutable)
      CFRelease(Mutable);
  }
}

const __CFArray *CMSUtility_CopySessionsToDuck(int a1, void *a2, const __CFArray *a3)
{
  const __CFArray *Mutable;
  __CFArray *v5;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v8;
  const __CFArray *v9;
  AudioObjectID PortAtIndex;
  CFTypeRef v11;
  CFTypeRef v12;
  int v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v15;

  if (!a1)
    return 0;
  Mutable = a3;
  if (!a2)
  {
    if (!a3)
      return Mutable;
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1EE2B3CF0, 1))
    {
      v15 = CMSMUtility_CopyMatchingSessions((uint64_t)Mutable, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_ShouldDuck, 0);
LABEL_29:
      Mutable = v15;
      if (!v15)
        return Mutable;
LABEL_30:
      if (CFArrayGetCount(Mutable))
        goto LABEL_31;
      CFRelease(Mutable);
      return 0;
    }
    VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)-[__CFArray audioCategory](Mutable, "audioCategory"));
    VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(-[__CFArray audioMode](Mutable, "audioMode"));
    v8 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)-[__CFArray activationContext](Mutable, "activationContext"), 0, 0, 0x1E30A8728);
    if (v8)
    {
      v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        v13 = 0;
      }
      else
      {
        PortAtIndex = CMSMVAUtility_GetPortAtIndex(v9, 0);
        v11 = vaeCopyDeviceIdentifierFromVADPort(PortAtIndex);
        v12 = FigRoutingManagerCopyActivatedCarPlayEndpoint(qword_1EE2B3CF0);
        v13 = FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID();
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v11)
          CFRelease(v11);
        if (v12)
          CFRelease(v12);
      }
      CFRelease(v9);
      if (!CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable)
        && (!v13 || !FigRoutingManager_iOSIsCarPlayAuxStreamSupported()))
      {
        goto LABEL_27;
      }
    }
    else if (!CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable))
    {
LABEL_27:
      if (!CMSUtility_IsPlayingToDefaultVAD(Mutable))
      {
        CMSUtility_IsPlayingToSystemSoundLocalVAD(Mutable);
        return 0;
      }
      v15 = CMSUtility_CopyDuckableSessionsPlayingToDefaultVAD(Mutable);
      goto LABEL_29;
    }
    CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return Mutable;
    if (qword_1EE2B3CD0 && !CMSMUtility_IsPhoneCallActive())
      CFArrayAppendValue(Mutable, (const void *)qword_1EE2B3CD0);
    goto LABEL_30;
  }
  if (!CMSUtilityPredicate_ShouldDuck(a3, a2))
    return 0;
  v5 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Mutable = v5;
  if (v5)
  {
    CFArrayAppendValue(v5, a2);
LABEL_31:
    CFArrayGetCount(Mutable);
  }
  return Mutable;
}

__CFArray *CMSUtility_CopyPickableRoutesForSession(void *a1)
{
  NSString *v2;
  NSString *v3;
  void *v4;
  void *v5;
  __CFArray *v6;

  v2 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(a1);
  v3 = CMSUtility_CopyNonNULLModeForPickingRoutes(a1);
  v4 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(a1);
  v5 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(a1);
  v6 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v2, (uint64_t)v3, v5, v4);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t CMSUtility_UpdateAlarmBehaviorOnAccessory(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSPointerArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  _BOOL4 v9;
  _BOOL4 IsOnlyRoutedToLocalStereoPair;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  const __CFString *v19;
  const __CFString *v20;
  int *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  os_log_type_t type;
  unsigned int v29;
  int v30;
  const char *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "hasAudioMode:", CFSTR("Sleep")))
  {
    if (dword_1EE2B3F38)
    {
      v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_39:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        if (v8 != a1
          && objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "isActive")
          && objc_msgSend(v8, "isPlaying")
          && CMSUtility_IsDoingSpokenAudio(v8))
        {
          v9 = FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(objc_msgSend(v8, "routingContextUUID")) != 0;
          IsOnlyRoutedToLocalStereoPair = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair(objc_msgSend(v8, "routingContextUUID"));
          goto LABEL_17;
        }
      }
      v5 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
  IsOnlyRoutedToLocalStereoPair = 0;
LABEL_17:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  if (v9 || IsOnlyRoutedToLocalStereoPair)
  {
    if (dword_1EE2B3F38)
    {
      v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v17 = v29;
      if (os_log_type_enabled(v16, type))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if (v18)
      {
        v19 = CFSTR("NO");
        v31 = "CMSUtility_UpdateAlarmBehaviorOnAccessory";
        if (v9)
          v20 = CFSTR("YES");
        else
          v20 = CFSTR("NO");
        v30 = 136315650;
        v32 = 2114;
        v33 = v20;
        if (IsOnlyRoutedToLocalStereoPair)
          v19 = CFSTR("YES");
        v34 = 2114;
        v35 = v19;
        LODWORD(v23) = 32;
        v22 = &v30;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_39;
    }
LABEL_40:
    v15 = 8;
    return objc_msgSend(a1, "updateInterruptionStyle:", v15, v22, v23);
  }
  if ((objc_msgSend(a1, "duckFadeDurationSetByClient") & 1) == 0)
  {
    LODWORD(v11) = 0.5;
    objc_msgSend(a1, "setDuckFadeDuration:", v11);
  }
  if ((objc_msgSend(a1, "unduckFadeDurationSetByClient") & 1) == 0)
  {
    LODWORD(v12) = 0.5;
    objc_msgSend(a1, "setUnduckFadeDuration:", v12);
  }
  if ((objc_msgSend(a1, "duckToLevelScalarSetByClient") & 1) == 0)
  {
    LODWORD(v13) = 1045220557;
    objc_msgSend(a1, "setDuckToLevelScalar:", v13);
  }
  if ((objc_msgSend(a1, "duckToLevelDBSetByClient") & 1) == 0)
  {
    LODWORD(v14) = -1038090240;
    objc_msgSend(a1, "setDuckToLevelDB:", v14);
  }
  v15 = 32;
  return objc_msgSend(a1, "updateInterruptionStyle:", v15, v22, v23);
}

float CMSUtility_GetVolumeDeltaIfRoutedToThirdPartyTV(void *a1, float a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  int v6;
  float v7;
  int IsEndpointThirdPartyTVFamily;
  float v9;
  CFArrayRef theArray;

  theArray = 0;
  if (a1)
  {
    FigRoutingManagerCopyPickedEndpointsForRoutingContext(objc_msgSend(a1, "routingContextUUID"), &theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v4 = Count;
        v5 = 0;
        v6 = 0;
        v7 = flt_1937A3F40[a2 < 0.0];
        do
        {
          CFArrayGetValueAtIndex(theArray, v5);
          IsEndpointThirdPartyTVFamily = FigEndpointUtility_IsEndpointThirdPartyTVFamily();
          if (v4 == v6 + 1)
            v9 = v7;
          else
            v9 = a2;
          if (IsEndpointThirdPartyTVFamily)
          {
            ++v6;
            a2 = v9;
          }
          ++v5;
        }
        while (v4 != v5);
      }
      if (theArray)
        CFRelease(theArray);
    }
  }
  return a2;
}

uint64_t CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(void *a1)
{
  double v2;
  double v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;

  if (!objc_msgSend(a1, "isActive"))
    return 0;
  if ((objc_msgSend(a1, "isPlaying") & 1) != 0)
    return 0;
  if (!objc_msgSend(a1, "isPlayingStopTime"))
    return 0;
  if (!objc_msgSend(a1, "isPlayingStartTime"))
    return 0;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "timeIntervalSinceDate:", objc_msgSend(a1, "isPlayingStopTime"));
  if (v2 <= 0.0)
    return 0;
  objc_msgSend((id)objc_msgSend(a1, "isPlayingStopTime"), "timeIntervalSinceDate:", objc_msgSend(a1, "isPlayingStartTime"));
  if (v3 <= 0.0)
    return 0;
  if (!dword_1EE2B3F38)
    return 1;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  v6 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v6;
}

uint64_t CMSUtility_IsSessionPlayStateEligibleForTipi(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if ((objc_msgSend(a1, "isActive") & 1) == 0)
  {
    if (dword_1EE2B3F38)
    {
LABEL_6:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(a1))
  {
    if (dword_1EE2B3F38)
      goto LABEL_6;
    return 0;
  }
  return 1;
}

const __CFString *cmsutility_GetRouteToPreferredRouteRequestReasonString(int a1)
{
  if ((a1 - 1) > 0xC)
    return CFSTR("Not defined yet");
  else
    return off_1E309E380[a1 - 1];
}

uint64_t CMSUtility_GetClientPID(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
}

void *CMSUtility_GetIsRecording(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "isRecording");
  return result;
}

void *CMSUtility_GetPrefersNoDucking(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "prefersNoDucking");
  return result;
}

void *CMSUtility_GetPrefersSuppressingRecordingState(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "prefersSuppressingRecordingState");
  return result;
}

void *CMSUtility_GetOptOutOfMutePriority(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "optOutOfMutePriority");
  return result;
}

void *CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "prefersToTakeHWControlFlagsFromAnotherSession");
  return result;
}

void *CMSUtility_GetPrefersMultichannelAudio(void *result)
{
  if (result)
    return (void *)objc_msgSend(result, "prefersMultichannelAudio");
  return result;
}

uint64_t CMSUtility_GetWantsAutomaticClusterPairingOnPlaybackStart(void *a1)
{
  uint64_t v2;
  int v3;

  if (!a1)
    return 0;
  if (!CMSMDeviceState_ItsAHomePod())
  {
    v3 = CMSMDeviceState_ItsAnAppleTV();
    return v3 != 0;
  }
  if ((objc_msgSend(a1, "wantsAutomaticClusterPairingOnPlaybackStart") & 1) != 0)
    return 1;
  objc_msgSend(a1, "displayID");
  v2 = 1;
  if (!FigCFStringFind())
  {
    objc_msgSend(a1, "displayID");
    v2 = 1;
    if (!FigCFStringFind())
    {
      objc_msgSend(a1, "displayID");
      v2 = 1;
      if (!FigCFStringFind())
      {
        objc_msgSend(a1, "displayID");
        v2 = 1;
        if (!FigCFStringFind())
        {
          objc_msgSend(a1, "displayID");
          v3 = FigCFStringFind();
          return v3 != 0;
        }
      }
    }
  }
  return v2;
}

uint64_t CMSUtility_GetCoreSessionID(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
}

id CMSUtility_CopyCurrentRouteTypeAtIndex(void *a1, CFIndex a2)
{
  __CFString *v4;
  uint64_t v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  BOOL v9;
  uint64_t PortAtIndex;
  unsigned int PortTypeFromPortID;
  id v12;

  v4 = CFSTR("VirtualAudioDevice_Default");
  v5 = objc_msgSend(a1, "audioDestinationPriority");
  if (a1 && v5)
    v4 = -[MXSessionManager getAvailableAudioDestination:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getAvailableAudioDestination:", v5);
  v6 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, (uint64_t)v4);
  if (!v6)
    return 0;
  v7 = v6;
  Count = CFArrayGetCount(v6);
  if (Count)
    v9 = Count <= a2;
  else
    v9 = 1;
  if (v9)
  {
    v12 = 0;
  }
  else
  {
    PortAtIndex = CMSMVAUtility_GetPortAtIndex(v7, a2);
    PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
    v12 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
  }
  CFRelease(v7);
  return v12;
}

uint64_t CMSUtility_ShouldSkipDuckingForSystemSounds(void *a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  _BOOL4 IsOnlyRoutedToLocalStereoPair;
  _BOOL8 v7;
  uint64_t CurrentOutputVADID;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  os_log_type_t type;
  unsigned int v43;
  _BYTE v44[128];
  _BYTE v45[128];
  int v46;
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "audioCategory");
  if (FigCFEqual()
    || objc_msgSend(a1, "interruptionStyle") == 32
    || CMSUtility_IsDoingSpokenAudio(a1)
    || objc_msgSend(a1, "hasPhoneCallBehavior"))
  {
    if (dword_1EE2B3F38)
    {
LABEL_6:
      v43 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_46:
      v7 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v7;
    }
    return 1;
  }
  v5 = objc_msgSend(a1, "routingContextUUID");
  if (!CMSMDeviceState_ItsAHomePod())
  {
    if ((objc_msgSend(a1, "isCarSession") & 1) != 0)
      return 0;
    CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
    if ((_DWORD)CurrentOutputVADID == (_DWORD)a2)
    {
LABEL_37:
      if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(v5)
        && !FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(v5))
      {
        return 0;
      }
      if (dword_1EE2B3F38)
      {
        v43 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v26 = v43;
        if (os_log_type_enabled(v25, type))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if (!v27)
          goto LABEL_46;
LABEL_35:
        v24 = objc_msgSend(a1, "clientName");
        v46 = 136315650;
        v47 = "CMSUtility_ShouldSkipDuckingForSystemSounds";
        v48 = 2048;
        v49 = a1;
        v50 = 2114;
        v51 = v24;
        _os_log_send_and_compose_impl();
        goto LABEL_46;
      }
    }
    else
    {
      v9 = CurrentOutputVADID;
      v10 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", a2);
      v11 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "copyDetailedRouteDescription:", v9);
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v33 = v10;
      v12 = (void *)objc_msgSend((id)objc_msgSend(v10, "objectForKey:", CFSTR("RouteDetailedDescription_Outputs")), "allObjects");
      v31 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v45, 16);
      if (v31)
      {
        v13 = *(_QWORD *)v39;
        v32 = v11;
        v30 = v12;
        v29 = *(_QWORD *)v39;
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v39 != v13)
              objc_enumerationMutation(v12);
            v15 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * v14), "objectForKey:", CFSTR("RouteDetailedDescription_ID"));
            v34 = 0u;
            v35 = 0u;
            v36 = 0u;
            v37 = 0u;
            v16 = (void *)objc_msgSend((id)objc_msgSend(v11, "objectForKey:", CFSTR("RouteDetailedDescription_Outputs")), "allObjects");
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v35;
              while (2)
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v35 != v19)
                    objc_enumerationMutation(v16);
                  if ((objc_msgSend(v15, "isEqualToNumber:", objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * i), "objectForKey:", CFSTR("RouteDetailedDescription_ID"))) & 1) != 0)
                  {

                    goto LABEL_37;
                  }
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
                if (v18)
                  continue;
                break;
              }
            }
            ++v14;
            v11 = v32;
            v12 = v30;
            v13 = v29;
          }
          while (v14 != v31);
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v38, v45, 16);
        }
        while (v31);
      }

      if (dword_1EE2B3F38)
      {
        v43 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v22 = v43;
        if (os_log_type_enabled(v21, type))
          v23 = v22;
        else
          v23 = v22 & 0xFFFFFFFE;
        if (!v23)
          goto LABEL_46;
        goto LABEL_35;
      }
    }
    return 1;
  }
  if (FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(v5))
    return 0;
  IsOnlyRoutedToLocalStereoPair = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair(v5);
  v7 = !IsOnlyRoutedToLocalStereoPair;
  if (!IsOnlyRoutedToLocalStereoPair && dword_1EE2B3F38)
    goto LABEL_6;
  return v7;
}

uint64_t CMSUtility_IsSessionAlwaysExpectingEndInterruption(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasAudioCategory:", CFSTR("AmbientSound"));
}

uint64_t CMSUtility_DoPickedEndpointsForSessionContainDeviceIdentifier(void *a1, uint64_t a2)
{
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, uint64_t, uint64_t, CFStringRef *);
  int HasPrefix;
  CFStringRef theString;
  CFArrayRef theArray;

  v2 = a2;
  theArray = 0;
  if (a2)
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpoints(objc_msgSend(a1, "routingContextUUID"), (uint64_t)&theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_12:
        v2 = 0;
      }
      else
      {
        v4 = Count;
        v5 = 0;
        v6 = *MEMORY[0x1E0CA4258];
        v7 = *MEMORY[0x1E0C9AE00];
        while (1)
        {
          CFArrayGetValueAtIndex(theArray, v5);
          theString = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (v9)
            v9(CMBaseObject, v6, v7, &theString);
          if (theString)
          {
            HasPrefix = CFStringHasPrefix(theString, (CFStringRef)v2);
            if (theString)
              CFRelease(theString);
            if (HasPrefix)
              break;
          }
          if (v4 == ++v5)
            goto LABEL_12;
        }
        v2 = 1;
      }
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef volumeController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVolumeController %p]"), a1);
}

void sub_19374466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_nw_release(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getnw_releaseSymbolLoc_ptr;
  v9 = getnw_releaseSymbolLoc_ptr;
  if (!getnw_releaseSymbolLoc_ptr)
  {
    v3 = (void *)NetworkLibrary();
    v2 = dlsym(v3, "nw_release");
    v7[3] = (uint64_t)v2;
    getnw_releaseSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    v5 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_193744AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193744B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_NetworkObserver_IsCarrierNetworkReachable()
{
  uint64_t result;

  if (mx_networkObserver_Initialize_onceToken != -1)
    dispatch_once(&mx_networkObserver_Initialize_onceToken, &__block_literal_global_55);
  result = gNetworkObserver;
  if (gNetworkObserver)
    return objc_msgSend((id)gNetworkObserver, "isCarrierNetworkReachable");
  return result;
}

uint64_t NetworkLibrary()
{
  uint64_t v0;
  void *v2;

  if (!NetworkLibraryCore_frameworkLibrary)
    NetworkLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = NetworkLibraryCore_frameworkLibrary;
  if (!NetworkLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

__CFDictionary *FigEndpointDescriptorUtility_CopyDescriptorForNonVirtualAudioEndpoint(uint64_t a1)
{
  int IsBulkCopyOfRouteDescriptorEnabled;
  const __CFAllocator **v3;
  int IsEndpointOfType;
  const __CFAllocator *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *MutableCopy;
  _BOOL4 IsEndpointSelfOnlyLocalAirPlay;
  __CFString **v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *);
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v24;
  const void **v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v30;
  uint64_t valuePtr;
  CFNumberRef number;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef cf;
  CFTypeRef v36;

  if (!a1)
    return 0;
  IsBulkCopyOfRouteDescriptorEnabled = MX_FeatureFlags_IsBulkCopyOfRouteDescriptorEnabled();
  v3 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (IsBulkCopyOfRouteDescriptorEnabled)
  {
    IsEndpointOfType = FigRoutingManagerIsEndpointOfType(a1);
    v5 = *v3;
    if (IsEndpointOfType)
    {
      v36 = 0;
      CMBaseObject = FigEndpointGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v7)
      {
        v7(CMBaseObject, *MEMORY[0x1E0CA41B8], v5, &v36);
        if (v36)
        {
          MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          CFDictionarySetValue(MutableCopy, CFSTR("IsBTRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
          CFDictionarySetValue(MutableCopy, CFSTR("AudioRouteName"), CFSTR("AirTunes"));
          figEndpointDescriptorUtility_setAirPlayFeatures(a1, MutableCopy);
          figEndpointDescriptorUtility_setAirPlayRouteSubType(a1, MutableCopy);
          IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
          v10 = kFigEndpointDescriptor_RouteType_Default;
          if (!IsEndpointSelfOnlyLocalAirPlay)
            v10 = kFigEndpointDescriptor_RouteType_Wireless;
          CFDictionarySetValue(MutableCopy, CFSTR("RouteType"), *v10);
          if ((FigEndpointGetSupportedFeatures() & 1) != 0)
            CFDictionarySetValue(MutableCopy, CFSTR("SupportsScreenMirroringControls"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_52:
          if (v36)
            CFRelease(v36);
          return MutableCopy;
        }
      }
    }
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  MutableCopy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = 0;
  v11 = *MEMORY[0x1E0CA4348];
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v13)
    v13(v12, v11, v5, &cf);
  v30 = v11;
  FigCFDictionarySetValue();
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v34 = 0;
  v14 = *MEMORY[0x1E0CA4258];
  v15 = FigEndpointGetCMBaseObject();
  v16 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v16)
    v16(v15, v14, v5, &v34);
  FigCFDictionarySetValue();
  if (v34)
  {
    CFRelease(v34);
    v34 = 0;
  }
  v33 = 0;
  v17 = *MEMORY[0x1E0CA4310];
  v18 = FigEndpointGetCMBaseObject();
  v19 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v19)
    v19(v18, v17, v5, &v33);
  FigCFDictionarySetValue();
  if (v33)
  {
    CFRelease(v33);
    v33 = 0;
  }
  valuePtr = 0;
  number = 0;
  v20 = FigEndpointGetCMBaseObject();
  v21 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v21)
    v21(v20, *MEMORY[0x1E0CA40A8], v5, &number);
  if (number)
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if ((FigEndpointGetSupportedFeatures() & 1) != 0 || (valuePtr & 1) != 0)
  {
    v36 = 0;
    v22 = FigEndpointGetCMBaseObject();
    v23 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v23)
      v23(v22, CFSTR("subType"), v5, &v36);
    v24 = FigCFEqual();
    v25 = (const void **)MEMORY[0x1E0C9AE40];
    if (!v24)
      v25 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(MutableCopy, CFSTR("SupportsScreenMirroringControls"), *v25);
    if (v36)
      CFRelease(v36);
  }
  if (number)
  {
    CFRelease(number);
    number = 0;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor(a1, MutableCopy);
    return MutableCopy;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    figEndpointDescriptorUtility_addBTDetailsToDescriptor(a1, MutableCopy);
    return MutableCopy;
  }
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
    && FigRoutingManagerIsEndpointOfType(a1))
  {
    v36 = 0;
    v26 = *MEMORY[0x1E0CA4260];
    v27 = FigEndpointGetCMBaseObject();
    v28 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v28)
      v28(v27, v26, v5, &v36);
    if (FigCFEqual())
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4230], MutableCopy, CFSTR("HIDs"));
    FigCFDictionarySetValue();
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4338], MutableCopy, CFSTR("RouteModel"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4318], MutableCopy, CFSTR("Manufacturer"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4210], MutableCopy, CFSTR("FirmwareVersion"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43A8], MutableCopy, CFSTR("SerialNumber"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA44C0], MutableCopy, CFSTR("iOSEntityIsDoingTurnByTurn"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43A0], MutableCopy, CFSTR("ScreenInfo"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4368], MutableCopy, CFSTR("OEMIcons"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4358], MutableCopy, CFSTR("OEMIconLabel"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4360], MutableCopy, CFSTR("OEMIconVisible"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4350], MutableCopy, CFSTR("NightMode"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4390], MutableCopy, CFSTR("RightHandDrive"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4300], MutableCopy, CFSTR("LimitedUIElements"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA42F8], MutableCopy, CFSTR("LimitedUI"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4148], MutableCopy, CFSTR("CarEntityIsDoingTurnByTurn"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4160], MutableCopy, CFSTR("CarEntityOwnsScreen"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4150], MutableCopy, CFSTR("CarEntityIsDoingVoiceRecognition"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4490], MutableCopy, CFSTR("VehicleInformation"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4460], MutableCopy, CFSTR("TransportType"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4120], MutableCopy, CFSTR("AuthenticationType"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4118], MutableCopy, CFSTR("AuthenticationData"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4498], MutableCopy, CFSTR("VoiceActivationType"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4158], MutableCopy, CFSTR("CarEntityOwnsMainAudio"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41D0], MutableCopy, CFSTR("ExtendedFeatures"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, v26, MutableCopy, CFSTR("IsActivated"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4108], MutableCopy, CFSTR("AlternateSiri"));
    goto LABEL_52;
  }
  if (FigRoutingManagerIsEndpointOfType(a1) && MutableCopy)
  {
    figEndpointDescriptorUtility_setDescriptorKey(a1, v30, MutableCopy, CFSTR("RouteName"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, v14, MutableCopy, CFSTR("RouteUID"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43D8], MutableCopy, CFSTR("RouteSubtype"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, v17, MutableCopy, CFSTR("MACAddress"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4338], MutableCopy, CFSTR("RouteModel"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4318], MutableCopy, CFSTR("Manufacturer"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4210], MutableCopy, CFSTR("FirmwareVersion"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43A8], MutableCopy, CFSTR("SerialNumber"));
  }
  return MutableCopy;
}

void figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor(uint64_t a1, CFMutableDictionaryRef theDict)
{
  const void *v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  _BOOL4 IsEndpointSelfOnlyLocalAirPlay;
  __CFString **v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int v14;
  const void **v15;
  __CFDictionary *v16;
  const void *v17;
  int v18;
  const void *v19;
  CFTypeRef cf;
  CFArrayRef v21;
  CFArrayRef theArray;

  if (!theDict)
    return;
  v4 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(theDict, CFSTR("IsBTRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(theDict, CFSTR("AudioRouteName"), CFSTR("AirTunes"));
  figEndpointDescriptorUtility_setAirPlayFeatures(a1, theDict);
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4338], theDict, CFSTR("RouteModel"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4318], theDict, CFSTR("Manufacturer"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4210], theDict, CFSTR("FirmwareVersion"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43A8], theDict, CFSTR("SerialNumber"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4458], theDict, CFSTR("TightSyncUUID"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4448], theDict, CFSTR("TightSyncIsGroupLeader"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4440], theDict, CFSTR("TightSyncBuddyNotReachable"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4380], theDict, CFSTR("PersistentGroupUUID"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4190], theDict, CFSTR("ClusterLeaderUUID"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4278], theDict, CFSTR("IsClusterLeader"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4198], theDict, CFSTR("ClusterSize"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41A0], theDict, CFSTR("ClusterType"));
  theArray = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
  {
    v7(CMBaseObject, *MEMORY[0x1E0CA4180], v5, &theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) >= 1)
        CFDictionarySetValue(theDict, CFSTR("ClusterComposition"), theArray);
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
  }
  v21 = 0;
  v8 = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
  {
    v9(v8, *MEMORY[0x1E0CA4188], v5, &v21);
    if (v21)
    {
      if (CFArrayGetCount(v21) >= 1)
        CFDictionarySetValue(theDict, CFSTR("ClusterHierarchy"), v21);
      if (v21)
      {
        CFRelease(v21);
        v21 = 0;
      }
    }
  }
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4268], theDict, CFSTR("IsAppleMusicSubscriber"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4170], theDict, CFSTR("CloudLibraryIsOn"));
  figEndpointDescriptorUtility_setAirPlayRouteSubType(a1, theDict);
  IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
  v11 = kFigEndpointDescriptor_RouteType_Default;
  if (!IsEndpointSelfOnlyLocalAirPlay)
    v11 = kFigEndpointDescriptor_RouteType_Wireless;
  CFDictionarySetValue(theDict, CFSTR("RouteType"), *v11);
  cf = 0;
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(v12, *MEMORY[0x1E0CA4128], v5, &cf);
  v14 = FigCFEqual();
  v15 = (const void **)MEMORY[0x1E0C9AE50];
  if (v14)
  {
    CFDictionarySetValue(theDict, CFSTR("RouteRequiresPassword"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  else
  {
    v18 = FigCFEqual();
    CFDictionarySetValue(theDict, CFSTR("RouteRequiresPassword"), v4);
    if (v18)
    {
      v17 = *v15;
      v16 = theDict;
      goto LABEL_23;
    }
  }
  v16 = theDict;
  v17 = v4;
LABEL_23:
  CFDictionarySetValue(v16, CFSTR("RouteRequiresAirPlayPIN"), v17);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA42E8], theDict, CFSTR("IsWHAGroupable"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4428], theDict, CFSTR("SupportsRelay"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4410], theDict, CFSTR("SupportsFitnessUIOverlay"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4330], theDict, CFSTR("IsMediaRemoteControllable"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4220], theDict, CFSTR("GroupContainsGroupLeader"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4290], theDict, CFSTR("IsGroupLeader"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43B0], theDict, CFSTR("IsSilentPrimary"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4400], theDict, CFSTR("SupportsExtendedWHAFeatures"));
  if (FigRoutingManagerIsEndpointLocal(a1))
    v19 = *v15;
  else
    v19 = v4;
  CFDictionarySetValue(theDict, CFSTR("IsLocalDevice"), v19);
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA40B8], theDict, CFSTR("AdvertisesHAPSupport"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4228], theDict, CFSTR("GroupUUID"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4250], theDict, CFSTR("HouseholdID"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA40C8], theDict, CFSTR("RouteHasAirPlayCloudConnectivity"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA40F0], theDict, CFSTR("AirPlayVodkaVersion"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA40D0], theDict, CFSTR("AirPlaySecurity"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA42A0], theDict, CFSTR("IsHKAccessControlEnabled"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4238], theDict, CFSTR("HKAccessControlLevel"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA40C0], theDict, CFSTR("AirPlayEndpointProperties"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41D8], theDict, CFSTR("ExternalPlaybackCannotFetchMediaFromSender"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41F8], theDict, CFSTR("ExternalPlaybackDoesNotSupportEncryptedCRABS"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41F0], theDict, CFSTR("ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets"));
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA42B0], theDict, CFSTR("IsLowFidelity"));
}

void figEndpointDescriptorUtility_addBTDetailsToDescriptor(uint64_t a1, CFMutableDictionaryRef theDict)
{
  const void *v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  const void *Value;
  const void *v13;
  const void *v14;
  const void *v15;
  CFDictionaryRef theDicta;
  CFTypeRef cf;

  if (theDict)
  {
    v4 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(theDict, CFSTR("RouteSupportsAudio"), (const void *)*MEMORY[0x1E0C9AE50]);
    cf = 0;
    v5 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA4280], v5, &cf);
      v8 = cf;
    }
    else
    {
      v8 = 0;
    }
    if (v8 == (CFTypeRef)*MEMORY[0x1E0C9AE40])
    {
      CFDictionarySetValue(theDict, CFSTR("RouteType"), CFSTR("Wireless"));
      CFDictionarySetValue(theDict, CFSTR("IsBTRoute"), v4);
      CFDictionarySetValue(theDict, CFSTR("AudioRouteName"), CFSTR("HeadphonesBT"));
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4270], theDict, CFSTR("IsBluetoothShareable"));
      v8 = cf;
    }
    if (v8)
    {
      CFRelease(v8);
      cf = 0;
    }
    v9 = *MEMORY[0x1E0CA4338];
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4338], theDict, CFSTR("RouteModel"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, v9, theDict, CFSTR("BTDetails_ProductID"));
    if (MX_FeatureFlags_IsCounterfeitDetectionEnabled())
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4288], theDict, CFSTR("IsGenuineAppleAccessory"));
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA4430], theDict, CFSTR("SupportsSmartRouting"));
    if (MX_FeatureFlags_IsConversationDetectSupported())
    {
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA43F0], theDict, CFSTR("SupportsConversationDetect"));
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E0CA41B0], theDict, CFSTR("ConversationDetectEnable"));
    }
    theDicta = 0;
    v10 = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v11)
    {
      v11(v10, *MEMORY[0x1E0CA4138], v5, &theDicta);
      if (theDicta)
      {
        Value = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3808]);
        if (Value)
          CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelLeft"), Value);
        v13 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3810]);
        if (v13)
          CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelRight"), v13);
        v14 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3800]);
        if (v14)
          CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelCase"), v14);
        v15 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E0CA3818]);
        if (v15)
          CFDictionarySetValue(theDict, CFSTR("BTDetails_BatteryLevelSingle"), v15);
        CFRelease(theDicta);
      }
    }
  }
}

void figEndpointDescriptorUtility_addMissingEntriesApplierFunction(void *key, const void *a2, CFDictionaryRef theDict)
{
  if (!CFDictionaryContainsKey(theDict, key))
    CFDictionarySetValue(theDict, key, a2);
}

OpaqueFigEndpoint *FigEndpointDescriptorUtility_CopyEndpointFromDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  if (!MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
    || !FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay(a2))
  {
    return -[MXEndpointDescriptorCache copyEndpointFromRouteDescriptor:routingContextUUID:](+[MXEndpointDescriptorCache sharedInstance](MXEndpointDescriptorCache, "sharedInstance"), "copyEndpointFromRouteDescriptor:routingContextUUID:", a1, a2);
  }
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)&cf);
  FigCFDictionaryGetValue();
  v8 = 0;
  if (cf)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v5)
      v5(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &v8);
  }
  if (!FigCFEqual())
  {
    v7 = 0;
LABEL_11:
    if (cf)
      CFRelease(cf);
    goto LABEL_14;
  }
  if (cf)
  {
    v7 = CFRetain(cf);
    goto LABEL_11;
  }
  v7 = 0;
LABEL_14:
  if (v8)
    CFRelease(v8);
  return (OpaqueFigEndpoint *)v7;
}

id FigEndpointDescriptorUtility_CopyEndpointArrayFromDescriptors(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OpaqueFigEndpoint *v9;
  OpaqueFigEndpoint *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(a1);
        v9 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8), a2);
        if (v9)
        {
          v10 = v9;
          objc_msgSend(v4, "addObject:", v9);
          CFRelease(v10);
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }
  return v4;
}

void FigEndpointDescriptorUtilitySetUserManualRoute(uint64_t a1, int a2)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, uint64_t);
  uint64_t v6;
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;

  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType(a1))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v5)
      {
        if (a2)
          v6 = *MEMORY[0x1E0C9AE50];
        else
          v6 = *MEMORY[0x1E0C9AE40];
        v5(CMBaseObject, *MEMORY[0x1E0CA4488], v6);
      }
    }
    else if (FigRoutingManagerIsEndpointOfType(a1))
    {
      v7 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
      if (v7)
      {
        v8 = v7;
        v9 = FigEndpointGetCMBaseObject();
        v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v10)
        {
          if (a2)
            v11 = *MEMORY[0x1E0C9AE50];
          else
            v11 = *MEMORY[0x1E0C9AE40];
          v10(v9, *MEMORY[0x1E0CA4488], v11);
        }
        CFRelease(v8);
      }
    }
  }
}

uint64_t FigEndpointDescriptorUtility_IsEndpointOfType()
{
  const void *v0;
  uint64_t v1;

  v0 = (const void *)FigEndpointUtility_CopyEndpointType();
  v1 = FigCFEqual();
  if (v0)
    CFRelease(v0);
  return v1;
}

void figEndpointDescriptorUtility_setAirPlayFeatures(uint64_t a1, __CFDictionary *a2)
{
  char SupportedFeatures;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a2)
  {
    SupportedFeatures = FigEndpointGetSupportedFeatures();
    v4 = (const void *)*MEMORY[0x1E0C9AE50];
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
    if ((SupportedFeatures & 2) != 0)
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v6 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(a2, CFSTR("RouteSupportsAudio"), v6);
    if ((FigEndpointGetSupportedFeatures() & 4) != 0)
      v7 = v4;
    else
      v7 = v5;
    CFDictionarySetValue(a2, CFSTR("RouteSupportsAirPlayVideo"), v7);
    if ((FigEndpointGetSupportedFeatures() & 1) != 0)
      v8 = v4;
    else
      v8 = v5;
    CFDictionarySetValue(a2, CFSTR("RouteSupportsAirPlayScreen"), v8);
    if ((FigEndpointGetSupportedFeatures() & 8) != 0)
      v9 = v4;
    else
      v9 = v5;
    CFDictionarySetValue(a2, CFSTR("RouteSupportsAirPlayMusic"), v9);
  }
}

void figEndpointDescriptorUtility_setAirPlayRouteSubType(uint64_t a1, __CFDictionary *a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  __CFString **v5;
  CFTypeRef cf;

  if (a2)
  {
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA43D8], *MEMORY[0x1E0C9AE00], &cf);
    if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_Unknown;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_AppleTV;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_HomePod;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_iOS;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_Mac;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTV;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySetTopBox;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_LowFidelitySpeaker;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTVStick;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySpeaker;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterStereoPair;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterHomeTheater;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGeneric;
    }
    else if (FigCFEqual())
    {
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGenericAudio;
    }
    else
    {
      if (!FigCFEqual())
        goto LABEL_35;
      v5 = kFigEndpointDescriptorKey_AudioRouteSubType_visionOS;
    }
    CFDictionarySetValue(a2, CFSTR("AudioRouteSubType"), *v5);
LABEL_35:
    if (cf)
      CFRelease(cf);
  }
}

void *MXBlockDictionaryRetain(int a1, void *aBlock)
{
  return _Block_copy(aBlock);
}

void MXBlockDictionaryRelease(int a1, void *aBlock)
{
  _Block_release(aBlock);
}

void MXInstallSysdiagnoseBlock(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194035B20]();
  -[MXDebugPlatform installSysdiagnoseBlock:blockToRun:](+[MXDebugPlatform sharedInstance](MXDebugPlatform, "sharedInstance"), "installSysdiagnoseBlock:blockToRun:", a1, a2);
  objc_autoreleasePoolPop(v4);
}

void MXSimulateCrash(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194035B20]();
  -[MXDebugPlatform simulateCrash:](+[MXDebugPlatform sharedInstance](MXDebugPlatform, "sharedInstance"), "simulateCrash:", a1);
  objc_autoreleasePoolPop(v2);
}

void sub_19374A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAPSubjectClass_block_invoke(uint64_t a1)
{
  Class result;

  AppProtectionLibrary();
  result = objc_getClass("APSubject");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getAPSubjectClass_block_invoke_cold_1();
  getAPSubjectClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void AppProtectionLibrary()
{
  void *v0;

  if (!AppProtectionLibraryCore_frameworkLibrary)
    AppProtectionLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getAPApplicationClass_block_invoke(uint64_t a1)
{
  Class result;

  AppProtectionLibrary();
  result = objc_getClass("APApplication");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getAPApplicationClass_block_invoke_cold_1();
  getAPApplicationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t CMSessionCreate(uint64_t *a1)
{
  void *v2;
  uint64_t CFObject;

  v2 = (void *)MEMORY[0x194035B20]();
  CFObject = cmsession_createCFObject(a1);
  if (!(_DWORD)CFObject)
    CFObject = MXCoreSessionInitialize(*(void **)(*a1 + 16));
  objc_autoreleasePoolPop(v2);
  return CFObject;
}

uint64_t cmsession_createCFObject(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (!a1)
    return FigSignalErrorAt();
  if (MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (!CMSMDeviceState_IsAudiomxd())
      return FigSignalErrorAt();
  }
  else if (!CMSMDeviceState_IsMediaserverd())
  {
    return FigSignalErrorAt();
  }
  CMSessionGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v3 = Instance;
    *(_QWORD *)(Instance + 16) = objc_alloc_init(MXCoreSession);
    CMNotificationCenterGetDefaultLocalCenter();
    MXGetNotificationSenderQueue();
    FigNotificationCenterAddWeakListener();
    *a1 = v3;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMSessionNotificationBarrier()
{
  return 0;
}

uint64_t _CMSessionNotificationBarrier()
{
  return 0;
}

uint64_t CMSessionAddResource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
    return 0;
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (isCoreSessionSidekick(a1))
    return 4294954309;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v9 = MXGetSerialQueue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CMSessionAddResource_block_invoke;
  v11[3] = &unk_1E30995C8;
  v11[4] = &v12;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionAddResource", (uint64_t)"CMSession_CInterface.m", 294, 0, 0, v9, (uint64_t)v11);
  v8 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_19374BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSessionRemoveResource(void *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
    return 0;
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (isCoreSessionSidekick(a1))
    return 4294954309;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v5 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CMSessionRemoveResource_block_invoke;
  v7[3] = &unk_1E3098D60;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionRemoveResource", (uint64_t)"CMSession_CInterface.m", 318, 0, 0, v5, (uint64_t)v7);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_19374BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSessionBeginInterruption(void *a1)
{
  void *v2;
  int v3;
  uint64_t UpTimeNanoseconds;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v3 = objc_msgSend(a1, "activate");
    *((_DWORD *)v10 + 6) = v3;
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v5 = MXGetSerialQueue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __CMSessionBeginInterruption_block_invoke;
    v8[3] = &unk_1E3098D88;
    v8[4] = &v9;
    v8[5] = a1;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionBeginInterruption", (uint64_t)"CMSession_CInterface.m", 350, 0, 0, v5, (uint64_t)v8);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "CMSessionBeginInterruption", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v2);
  v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_19374BD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionBeginInterruption_WithSecTaskAndFlags(_QWORD *a1, __SecTask *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t UpTimeNanoseconds;
  void *v9;

  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v7 = objc_msgSend(a1, "activate");
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      v9 = (void *)a1[2];
    else
      v9 = 0;
    v7 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(v9, a2, a3, 0);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_CMSessionBeginInterruption_WithSecTaskAndFlags", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

uint64_t _CMSessionBeginInterruption_WithFlags(_QWORD *a1, uint64_t a2)
{
  return _CMSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, a2);
}

uint64_t CMSessionEndInterruption(void *a1, const __CFString *a2)
{
  void *v4;
  _BOOL8 v5;
  uint64_t UpTimeNanoseconds;
  NSObject *v7;
  int v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v4 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    if (a2)
      v5 = CFStringHasPrefix(a2, CFSTR("resumable")) != 0;
    else
      v5 = 0;
    v8 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v5, 0);
    *((_DWORD *)v13 + 6) = v8;
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v7 = MXGetSerialQueue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __CMSessionEndInterruption_block_invoke;
    v11[3] = &unk_1E3098D60;
    v11[4] = &v12;
    v11[5] = a1;
    v11[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionEndInterruption", (uint64_t)"CMSession_CInterface.m", 411, 0, 0, v7, (uint64_t)v11);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "CMSessionEndInterruption", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v4);
  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_19374BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSessionEndInterruption_WithInterruptionNotification(void *a1, const __CFString *a2, int a3)
{
  void *v6;
  _BOOL8 v7;
  uint64_t UpTimeNanoseconds;
  NSObject *v9;
  int v10;
  uint64_t v11;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    if (a2)
      v7 = CFStringHasPrefix(a2, CFSTR("resumable")) != 0;
    else
      v7 = 0;
    v10 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v7, a3 != 0);
    *((_DWORD *)v15 + 6) = v10;
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v9 = MXGetSerialQueue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __CMSessionEndInterruption_WithInterruptionNotification_block_invoke;
    v13[3] = &unk_1E3098D60;
    v13[4] = &v14;
    v13[5] = a1;
    v13[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionEndInterruption_WithInterruptionNotification", (uint64_t)"CMSession_CInterface.m", 440, 0, 0, v9, (uint64_t)v13);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "CMSessionEndInterruption_WithInterruptionNotification", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v6);
  v11 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_19374C180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionEndInterruption_WithSecTaskAndStatus(_QWORD *a1, __SecTask *a2, const __CFString *a3)
{
  void *v6;
  _BOOL8 v7;
  uint64_t UpTimeNanoseconds;
  void *v9;
  uint64_t v10;

  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    if (a3)
      v7 = CFStringHasPrefix(a3, CFSTR("resumable")) != 0;
    else
      v7 = 0;
    v10 = objc_msgSend(a1, "deactivate:postInterruptionNotification:", v7, 0);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      v9 = (void *)a1[2];
    else
      v9 = 0;
    v10 = MXCoreSessionEndInterruption_WithSecTaskAndStatus(v9, a2, a3, 0);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_CMSessionEndInterruption_WithSecTaskAndStatus", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, 0);
  }
  objc_autoreleasePoolPop(v6);
  return v10;
}

uint64_t _CMSessionEndInterruption(_QWORD *a1, const __CFString *a2)
{
  return _CMSessionEndInterruption_WithSecTaskAndStatus(a1, 0, a2);
}

uint64_t CMSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  uint64_t UpTimeNanoseconds;
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v7 = objc_msgSend(a1, "setPropertyForKey:value:", a2, a3);
    *((_DWORD *)v14 + 6) = v7;
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v9 = MXGetSerialQueue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __CMSessionSetProperty_block_invoke;
    v12[3] = &unk_1E3099668;
    v12[4] = &v13;
    v12[5] = a1;
    v12[6] = a2;
    v12[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionSetProperty", (uint64_t)"CMSession_CInterface.m", 503, 0, 0, v9, (uint64_t)v12);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "CMSessionSetProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  }
  objc_autoreleasePoolPop(v6);
  v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_19374C430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionSetProperty(_QWORD *a1, const void *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t UpTimeNanoseconds;
  uint64_t v9;

  v6 = (void *)MEMORY[0x194035B20](+[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized"));
  if (isCoreSessionSidekick(a1))
  {
    v7 = objc_msgSend(a1, "setPropertyForKey:value:", a2, a3);
  }
  else
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1)
      v9 = a1[2];
    else
      LODWORD(v9) = 0;
    v7 = MXCoreSessionSetProperty(v9, a2);
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "_CMSessionSetProperty", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, a2);
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

uint64_t HandleDispatchBlockException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Exception thrown: %s, %s, %s:%d, %llu, %llu"), "Unknown", a1, a2, a3, a4, a5), "UTF8String");
  v5 = abort_with_reason();
  return MXDispatchSyncFunction(v5);
}

void MXDispatchSyncFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, uint64_t a8)
{
  void *v16;
  dispatch_block_t v17;
  void *v18;
  _QWORD v19[6];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  _QWORD block[6];
  __int128 v30;
  uint64_t v31;

  v30 = 0uLL;
  v31 = 0;
  v16 = (void *)MEMORY[0x194035B20]();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXDispatchSyncFunction_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a8;
  block[5] = a7;
  v17 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  v18 = (void *)MEMORY[0x194035B20]();
  v28 = 0;
  v27 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      CreateACQDispatchID();
  }
  objc_autoreleasePoolPop(v18);
  v30 = v27;
  v31 = v28;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1)
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_59);
    if (gSerialQueue == a6)
      MEMORY[0x1940347A0](&v30, 0, "MXDispatchSyncFunction", a1, a2, a3, a4, a5);
  }
  objc_autoreleasePoolPop(v16);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MXDispatchSyncFunction_block_invoke_2;
  v19[3] = &unk_1E309E5C0;
  v20 = v30;
  v21 = v31;
  v22 = a1;
  v26 = a3;
  v23 = a2;
  v24 = a4;
  v25 = a5;
  v19[4] = a6;
  v19[5] = v17;
  dispatch_barrier_async_and_wait(a6, v19);
}

void MXSetSerialQueue(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MXSetSerialQueue_block_invoke;
  block[3] = &unk_1E3099900;
  block[4] = a1;
  if (MXSetSerialQueue_onceToken != -1)
    dispatch_once(&MXSetSerialQueue_onceToken, block);
}

void MXDispatchUtilityCancelTimer(dispatch_source_t *a1)
{
  if (a1)
  {
    dispatch_source_cancel(*a1);
    if (*a1)
    {
      dispatch_release(*a1);
      *a1 = 0;
    }
  }
}

CFTypeRef PVMCopyMappedRoute(CFTypeRef key)
{
  CFTypeRef v1;

  if (key)
  {
    v1 = key;
    if (*(_QWORD *)(sStorage + 176))
      key = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 176), key);
    if (!key)
      key = v1;
    return CFRetain(key);
  }
  return key;
}

uint64_t pvmUpdate100dBVolumeLimit(uint64_t result)
{
  char v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (g100dBVolumeLimitEnabled != (_DWORD)result)
  {
    v1 = result;
    if (dword_1EE2B3DA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    g100dBVolumeLimitEnabled = v1;
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmReassertAllPreferredVolumesForRoute(0);
    pvmUpdatePreferredVolumeAndLimit((uint64_t)CFSTR("VolumeLimitChange"), 0, *(const __CFString **)(sStorage + 208), *(const void **)(sStorage + 216), 0, 1, 0, 0.0, 0.0);
    return MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return result;
}

BOOL PVMVolumePrefExistsForRouteAndCategory(const void *a1, unint64_t a2, uint64_t a3, const __CFString *a4, const void *a5)
{
  _BOOL8 v10;
  CFStringRef DeviceRouteString;
  CFStringRef v12;
  const __CFDictionary *v13;
  const __CFString *Value;
  const __CFString *MappedCategoryWithModeAppended;
  const __CFDictionary *v16;

  if (!PVMInitialize())
  {
    DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
    if (DeviceRouteString)
    {
      v12 = DeviceRouteString;
      MEMORY[0x1940352BC](*(_QWORD *)sStorage);
      if (!*(_QWORD *)(sStorage + 16))
        goto LABEL_12;
      v13 = *(const __CFDictionary **)(sStorage + 160);
      if (v13)
      {
        Value = (const __CFString *)CFDictionaryGetValue(v13, a4);
        if (Value)
          a4 = Value;
      }
      if (a4)
      {
        if (a5)
          goto LABEL_10;
      }
      else
      {
        a4 = *(const __CFString **)(sStorage + 208);
        if (a5)
          goto LABEL_10;
      }
      a5 = *(const void **)(sStorage + 216);
LABEL_10:
      MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a4, a5);
      v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 16), v12);
      if (v16)
      {
        v10 = CFDictionaryGetValue(v16, MappedCategoryWithModeAppended) != 0;
LABEL_13:
        MEMORY[0x1940352C8](*(_QWORD *)sStorage);
        CFRelease(v12);
        return v10;
      }
LABEL_12:
      v10 = 0;
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t PVMSetCurrentPreferredVolumeWithRefCon(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  const void *v11;
  __int128 v12;
  const __CFString *v13;
  __int128 v15[2];
  uint64_t v16;

  v8 = PVMInitialize();
  if (!(_DWORD)v8 && !*(_BYTE *)(sStorage + 8))
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    v9 = sStorage;
    if (*(float *)(sStorage + 284) != a4)
    {
      v10 = *(const __CFString **)(sStorage + 208);
      v11 = *(const void **)(sStorage + 216);
      v12 = *(_OWORD *)(sStorage + 256);
      v15[0] = *(_OWORD *)(sStorage + 240);
      v15[1] = v12;
      v16 = *(_QWORD *)(sStorage + 272);
      pvmSetVolumePref(v10, v11, v15, 0, a4);
      v9 = sStorage;
    }
    if (a3)
      v13 = CFSTR("ImplicitVolumeChange");
    else
      v13 = CFSTR("ExplicitVolumeChange");
    pvmUpdatePreferredVolumeAndLimit((uint64_t)v13, a1, *(const __CFString **)(v9 + 208), *(const void **)(v9 + 216), 0, 1, a2, 0.0, 0.0);
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return v8;
}

CFStringRef pvmSetVolumePref(const __CFString *a1, const void *a2, __int128 *a3, int a4, float a5)
{
  const __CFDictionary *v10;
  const __CFString *Value;
  const __CFString *v12;
  CFStringRef result;
  CFStringRef v14;
  __int128 v15;
  __int128 v16;
  float VolumeLimitPref;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  float MinimumCategoryVolume;
  float MaximumCategoryVolume;
  void *Mutable;
  const __CFAllocator *v28;
  CFNumberRef v29;
  CFStringRef CategoryStringWithModeAppended;
  float valuePtr;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  if (!*(_QWORD *)(sStorage + 16))
    *(_QWORD *)(sStorage + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigCFEqual())
  {
    v10 = *(const __CFDictionary **)(sStorage + 176);
    if (v10)
      Value = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("broadcast"));
    else
      Value = CFSTR("broadcast");
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    if (Value)
      v12 = Value;
    else
      v12 = CFSTR("broadcast");
    *((_QWORD *)a3 + 1) = v12;
  }
  if (FigCFEqual() && !PVMInitialize())
    pvmSetSystemSoundVolumeMultiplierForVolumeGuts(a5);
  result = pvmCreateDeviceRouteString(*((CFTypeRef *)a3 + 1), *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 2));
  if (result)
  {
    v14 = result;
    valuePtr = 0.0;
    if (a4)
    {
      v15 = a3[1];
      v32 = *a3;
      v33 = v15;
      v34 = *((_QWORD *)a3 + 4);
      v16 = a3[1];
      v35 = *a3;
      v36 = v16;
      v37 = *((_QWORD *)a3 + 4);
      VolumeLimitPref = pvmGetVolumeLimitPref();
      v18 = a5 / (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute());
      if (v18 <= 1.0)
        v19 = v18;
      else
        v19 = 1.0;
      v20 = a3[1];
      v32 = *a3;
      v33 = v20;
      v34 = *((_QWORD *)a3 + 4);
      v21 = a3[1];
      v35 = *a3;
    }
    else
    {
      v22 = a3[1];
      v32 = *a3;
      v33 = v22;
      v34 = *((_QWORD *)a3 + 4);
      if (a5 <= 1.0)
        v19 = a5;
      else
        v19 = 1.0;
      v21 = a3[1];
      v35 = *a3;
    }
    v36 = v21;
    v37 = *((_QWORD *)a3 + 4);
    v23 = pvmGetVolumeLimitPref();
    v24 = v19 * (float)(v23 * pvmGetCurrentVolumeLimitForRoute());
    valuePtr = v24;
    MinimumCategoryVolume = pvmGetMinimumCategoryVolume(a1, a2);
    if (v24 < MinimumCategoryVolume)
    {
      valuePtr = MinimumCategoryVolume;
      v24 = MinimumCategoryVolume;
    }
    MaximumCategoryVolume = pvmGetMaximumCategoryVolume(a1, a2);
    if (v24 > MaximumCategoryVolume)
      valuePtr = MaximumCategoryVolume;
    Mutable = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 16), v14);
    v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 16), v14, Mutable);
      CFRelease(Mutable);
    }
    v29 = CFNumberCreate(v28, kCFNumberFloat32Type, &valuePtr);
    CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
    CFDictionarySetValue((CFMutableDictionaryRef)Mutable, CategoryStringWithModeAppended, v29);
    CFRelease(v29);
    CFRelease(CategoryStringWithModeAppended);
    *(_BYTE *)(sStorage + 24) = 1;
    pvmWritePrefs();
  }
  return result;
}

uint64_t PVMSetCurrentPreferredVolume(uint64_t a1, int a2, float a3)
{
  return PVMSetCurrentPreferredVolumeWithRefCon(0, a1, a2, a3);
}

float PVMGetRawVolumeForCurrentRouteFromVolume(float a1)
{
  float v2;
  float VolumeLimitPref;

  if (!PVMInitialize())
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    if (a1 <= 1.0)
      v2 = a1;
    else
      v2 = 1.0;
    VolumeLimitPref = pvmGetVolumeLimitPref();
    a1 = v2 * (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute());
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return a1;
}

uint64_t PVMSetCurrentPreferredVolumeForDeviceRoute(uint64_t a1, int a2, uint64_t a3, int a4, float a5)
{
  uint64_t v10;
  void *v11;
  const __CFDictionary *v12;
  void *Value;
  void *v14;
  uint64_t MappedRouteIdentifier;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  __int128 v20;
  const __CFString *v21;
  const void *v22;
  __int128 v23;
  const __CFString *v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v10 = PVMInitialize();
  if (!(_DWORD)v10 && !*(_BYTE *)(sStorage + 8))
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    v11 = *(void **)(a1 + 8);
    if (v11)
    {
      v12 = *(const __CFDictionary **)(sStorage + 176);
      if (v12)
        Value = (void *)CFDictionaryGetValue(v12, *(const void **)(a1 + 8));
      else
        Value = *(void **)(a1 + 8);
      if (Value)
        v14 = Value;
      else
        v14 = v11;
    }
    else
    {
      v14 = 0;
    }
    *(_QWORD *)(a1 + 8) = v14;
    MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v14);
    v16 = 0;
    *(_QWORD *)(a1 + 24) = MappedRouteIdentifier;
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v18 = *(void **)(a1 + 8);
      if (v18)
      {
        if ((objc_msgSend(*(id *)(a1 + 8), "hasPrefix:", CFSTR("HeadphonesBT")) & 1) != 0
          || (v19 = objc_msgSend(v18, "hasPrefix:", CFSTR("HeadsetBT")), v16 = v17, v19))
        {
          v16 = 0;
        }
      }
    }
    *(_QWORD *)(a1 + 16) = v16;
    v20 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)a1;
    v27 = v20;
    v28 = *(_QWORD *)(a1 + 32);
    if (PVMIsCurrentDeviceRoute((uint64_t)&v26) | a2)
    {
      pvmAssureCurrentCategoryAndDeviceRoute();
      v21 = *(const __CFString **)(sStorage + 208);
      v22 = *(const void **)(sStorage + 216);
      v23 = *(_OWORD *)(a1 + 16);
      v26 = *(_OWORD *)a1;
      v27 = v23;
      v28 = *(_QWORD *)(a1 + 32);
      pvmSetVolumePref(v21, v22, &v26, 0, a5);
      if (a4)
        v24 = CFSTR("ImplicitVolumeChange");
      else
        v24 = CFSTR("ExplicitVolumeChange");
      pvmUpdatePreferredVolumeAndLimit((uint64_t)v24, 0, *(const __CFString **)(sStorage + 208), *(const void **)(sStorage + 216), 0, 1, a3, 0.0, 0.0);
    }
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return v10;
}

float PVMGetCurrentPreferredVolumeForDeviceRoute(uint64_t a1)
{
  float DefaultVolume;
  void *v3;
  const __CFDictionary *v4;
  void *Value;
  void *v6;
  uint64_t MappedRouteIdentifier;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  const __CFString *v12;
  const void *v13;
  __int128 v14;
  float v15;
  __int128 v17[2];
  uint64_t v18;

  DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize())
  {
    if (!*(_QWORD *)(a1 + 8))
      *(_QWORD *)(a1 + 8) = CFSTR("Speaker");
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      v4 = *(const __CFDictionary **)(sStorage + 176);
      if (v4)
        Value = (void *)CFDictionaryGetValue(v4, *(const void **)(a1 + 8));
      else
        Value = *(void **)(a1 + 8);
      if (Value)
        v6 = Value;
      else
        v6 = v3;
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(a1 + 8) = v6;
    MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v6);
    v8 = 0;
    *(_QWORD *)(a1 + 24) = MappedRouteIdentifier;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(void **)(a1 + 8);
      if (v10)
      {
        if ((objc_msgSend(*(id *)(a1 + 8), "hasPrefix:", CFSTR("HeadphonesBT")) & 1) != 0
          || (v11 = objc_msgSend(v10, "hasPrefix:", CFSTR("HeadsetBT")), v8 = v9, v11))
        {
          v8 = 0;
        }
      }
    }
    *(_QWORD *)(a1 + 16) = v8;
    pvmAssureCurrentCategoryAndDeviceRoute();
    v12 = *(const __CFString **)(sStorage + 208);
    v13 = *(const void **)(sStorage + 216);
    v14 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v14;
    v18 = *(_QWORD *)(a1 + 32);
    pvmGetVolumePref(v12, v13, v17);
    DefaultVolume = v15;
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return DefaultVolume;
}

uint64_t PVMSetCurrentCategoryAndMode(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  __CFString *MappedCategoryWithModeAppended;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeRef cf;

  if (*(_BYTE *)(sStorage + 8))
    return 0;
  v15 = 0;
  cf = 0;
  result = PVMInitialize();
  if (!(_DWORD)result)
  {
    v7 = (_QWORD *)sStorage;
    if (!*(_BYTE *)(sStorage + 8))
    {
      if (!a1)
        a1 = CFSTR("Audio/Video");
      MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(a1, a2);
      pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v15);
      MEMORY[0x1940352BC](*(_QWORD *)sStorage);
      pvmAssureCurrentCategoryAndDeviceRoute();
      if (!FigCFEqual() || !FigCFEqual())
      {
        v9 = *(const void **)(sStorage + 208);
        v10 = cf;
        *(_QWORD *)(sStorage + 208) = cf;
        if (v10)
          CFRetain(v10);
        if (v9)
          CFRelease(v9);
        v11 = *(const void **)(sStorage + 216);
        v12 = v15;
        *(_QWORD *)(sStorage + 216) = v15;
        if (v12)
          CFRetain(v12);
        if (v11)
          CFRelease(v11);
      }
      v13 = *(const void **)(sStorage + 224);
      *(_QWORD *)(sStorage + 224) = a1;
      CFRetain(a1);
      if (v13)
        CFRelease(v13);
      v14 = *(const void **)(sStorage + 232);
      *(_QWORD *)(sStorage + 232) = a2;
      if (a2)
        CFRetain(a2);
      if (v14)
        CFRelease(v14);
      if (cf)
        CFRelease(cf);
      if (v15)
        CFRelease(v15);
      MEMORY[0x1940352C8](*(_QWORD *)sStorage);
      v7 = (_QWORD *)sStorage;
    }
    MEMORY[0x1940352BC](*v7);
    pvmUpdatePreferredVolumeAndLimit((uint64_t)CFSTR("CategoryChange"), 0, *(const __CFString **)(sStorage + 208), *(const void **)(sStorage + 216), 0, 1, a3, 0.0, 0.0);
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
    return 0;
  }
  return result;
}

uint64_t PVMCopyCurrentState(_DWORD *a1, CFTypeRef *a2, _QWORD *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  const void *v15;
  const void *v16;

  v12 = PVMInitialize();
  if (!(_DWORD)v12)
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    v13 = sStorage;
    if (a1)
      *a1 = *(_DWORD *)(sStorage + 284);
    if (a2)
    {
      *a2 = CFRetain(*(CFTypeRef *)(v13 + 208));
      v13 = sStorage;
    }
    if (a3)
    {
      v14 = *(CFTypeRef *)(v13 + 216);
      if (v14)
      {
        v14 = CFRetain(v14);
        v13 = sStorage;
      }
      *a3 = v14;
    }
    if (a4)
    {
      *a4 = CFRetain(*(CFTypeRef *)(v13 + 248));
      v13 = sStorage;
    }
    if (a5)
    {
      v15 = *(const void **)(v13 + 264);
      if (!v15)
      {
        *a5 = 0;
        if (a6)
        {
LABEL_16:
          v16 = *(const void **)(v13 + 256);
          if (v16)
          {
            *a6 = CFRetain(v16);
            v13 = sStorage;
          }
          else
          {
            *a6 = 0;
          }
        }
LABEL_21:
        MEMORY[0x1940352C8](*(_QWORD *)v13);
        return v12;
      }
      *a5 = CFRetain(v15);
      v13 = sStorage;
    }
    if (a6)
      goto LABEL_16;
    goto LABEL_21;
  }
  return v12;
}

uint64_t PVMRemoveVolumesForDeviceRoute(void *a1, void *a2, uint64_t a3)
{
  uint64_t result;
  const void *Value;
  const void *v8;
  unint64_t MappedRouteIdentifier;
  uint64_t v10;

  result = PVMInitialize();
  if (!(_DWORD)result)
  {
    if (a1)
    {
      Value = a1;
      if (*(_QWORD *)(sStorage + 176))
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 176), a1);
      if (Value)
        v8 = Value;
      else
        v8 = a1;
      MappedRouteIdentifier = pvmGetMappedRouteIdentifier(a2, a1);
      if (!a3
        || (objc_msgSend(a1, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) == 0
        && !objc_msgSend(a1, "hasPrefix:", CFSTR("HeadsetBT")))
      {
        goto LABEL_14;
      }
    }
    else
    {
      MappedRouteIdentifier = pvmGetMappedRouteIdentifier(a2, 0);
      v8 = 0;
    }
    a3 = 0;
LABEL_14:
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    v10 = pvmRemoveVolumesForDeviceRoute(v8, MappedRouteIdentifier, a3);
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
    return v10;
  }
  return result;
}

uint64_t pvmRemoveVolumesForDeviceRoute(const void *a1, unint64_t a2, uint64_t a3)
{
  CFStringRef DeviceRouteString;
  CFStringRef v4;
  uint64_t v5;
  __CFDictionary *v6;
  __CFDictionary *v7;

  DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  if (!DeviceRouteString)
    return 4294938296;
  v4 = DeviceRouteString;
  v5 = sStorage;
  v6 = *(__CFDictionary **)(sStorage + 16);
  if (v6)
  {
    CFDictionaryRemoveValue(v6, v4);
    v5 = sStorage;
    *(_BYTE *)(sStorage + 24) = 1;
  }
  v7 = *(__CFDictionary **)(v5 + 32);
  if (v7)
  {
    CFDictionaryRemoveValue(v7, v4);
    v5 = sStorage;
    *(_BYTE *)(sStorage + 56) = 1;
  }
  if (*(_BYTE *)(v5 + 24) || *(_BYTE *)(v5 + 56))
    pvmWritePrefs();
  CFRelease(v4);
  return 0;
}

uint64_t PVMSetVolumePreference(const __CFString *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, int a6, float a7, float a8, float a9)
{
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;

  v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  v12 = *(_QWORD *)(a4 + 32);
  return pvmSetVolumePreferenceInternal(a1, a2, a3, (uint64_t)v11, 0, a5, a6, a7, a8, a9);
}

uint64_t pvmSetVolumePreferenceInternal(const __CFString *a1, const void *a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, float a8, float a9, float a10)
{
  uint64_t v20;
  __CFString *MappedCategoryWithModeAppended;
  __int128 v22;
  __int128 v23;
  _BOOL4 v24;
  const __CFString *v25;
  const __CFString *v26;
  const void *v27;
  float v28;
  float v29;
  int v30;
  int v31;
  __int128 v32;
  _BOOL4 v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  CFTypeRef v38;
  CFTypeRef cf;

  v20 = PVMInitialize();
  v38 = 0;
  cf = 0;
  if ((_DWORD)v20)
    return v20;
  if (!a1)
    a1 = CFSTR("Audio/Video");
  if (!*(_QWORD *)(a4 + 8))
    *(_QWORD *)(a4 + 8) = CFSTR("Speaker");
  MappedCategoryWithModeAppended = (__CFString *)pvmGetMappedCategoryWithModeAppended(a1, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v38);
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v22 = *(_OWORD *)(a4 + 16);
  v35 = *(_OWORD *)a4;
  v36 = v22;
  v37 = *(_QWORD *)(a4 + 32);
  pvmSetVolumePref((const __CFString *)cf, v38, &v35, a5, a8);
  v23 = *(_OWORD *)(a4 + 16);
  v35 = *(_OWORD *)a4;
  v36 = v23;
  v37 = *(_QWORD *)(a4 + 32);
  v24 = PVMIsCategoryAndRouteInfoCurrent(a1, a2, (uint64_t)&v35);
  if (v24)
    *(float *)(sStorage + 284) = a8;
  if (CMSMDeviceState_ItsAHomePod() && FigCFEqual())
  {
    if (a7)
      v25 = CFSTR("ImplicitVolumeChange");
    else
      v25 = CFSTR("ExplicitVolumeChange");
    v26 = CFSTR("VoiceCommand");
    v27 = 0;
    v28 = a9;
    v29 = a10;
    v30 = a3;
    v31 = 0;
  }
  else
  {
    v32 = *(_OWORD *)(a4 + 16);
    v35 = *(_OWORD *)a4;
    v36 = v32;
    v37 = *(_QWORD *)(a4 + 32);
    v33 = PVMIsCurrentDeviceRoute((uint64_t)&v35);
    if (!(v24 | a5) || !v33)
      goto LABEL_21;
    if (a7)
      v25 = CFSTR("ImplicitVolumeChange");
    else
      v25 = CFSTR("ExplicitVolumeChange");
    v26 = *(const __CFString **)(sStorage + 208);
    v27 = *(const void **)(sStorage + 216);
    v28 = a9;
    v29 = a10;
    v30 = a3;
    v31 = 1;
  }
  pvmUpdatePreferredVolumeAndLimit((uint64_t)v25, 0, v26, v27, v30, v31, a6, v28, v29);
LABEL_21:
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  if (cf)
    CFRelease(cf);
  if (v38)
    CFRelease(v38);
  return v20;
}

uint64_t PVMSetRawVolumePreference(const __CFString *a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6, float a7)
{
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  v10 = *(_QWORD *)(a3 + 32);
  return pvmSetVolumePreferenceInternal(a1, a2, a6, (uint64_t)v9, 1, a4, a5, a7, 0.0, 0.0);
}

uint64_t PVMSetVolumeLimit(uint64_t a1, float a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float DefaultVolume;
  const __CFString *v8;
  const void *v9;
  __int128 v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v13;
  CFNumberRef v14;
  __int128 v16[2];
  uint64_t v17;

  v4 = PVMInitialize();
  if (!(_DWORD)v4)
  {
    v5 = 0.0;
    if (a2 >= 0.0)
      v5 = a2;
    if (v5 <= 1.0)
      v6 = v5;
    else
      v6 = 1.0;
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    if (!PVMVolumePrefExistsForRouteAndCategory(*(const void **)(sStorage + 248), *(_QWORD *)(sStorage + 264), *(_QWORD *)(sStorage + 256), 0, 0))
    {
      DefaultVolume = pvmGetDefaultVolume();
      v8 = *(const __CFString **)(sStorage + 208);
      v9 = *(const void **)(sStorage + 216);
      v10 = *(_OWORD *)(sStorage + 256);
      v16[0] = *(_OWORD *)(sStorage + 240);
      v16[1] = v10;
      v17 = *(_QWORD *)(sStorage + 272);
      pvmSetVolumePref(v8, v9, v16, 0, DefaultVolume);
    }
    *(float *)v16 = v6;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(sStorage + 32)
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(sStorage + 32) = Mutable) != 0))
    {
      v13 = CFNumberCreate(v11, kCFNumberFloat32Type, v16);
      if (v13)
      {
        v14 = v13;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 32), CFSTR("Headphone"), v13);
        CFRelease(v14);
        *(_BYTE *)(sStorage + 56) = 1;
        pvmWritePrefs();
      }
    }
    v4 = FigSignalErrorAt();
    pvmReassertAllPreferredVolumesForRoute(a1);
    pvmUpdatePreferredVolumeAndLimit((uint64_t)CFSTR("VolumeLimitChange"), 0, *(const __CFString **)(sStorage + 208), *(const void **)(sStorage + 216), 0, 1, a1, 0.0, 0.0);
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return v4;
}

void pvmReassertAllPreferredVolumesForRoute(uint64_t a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *Copy;
  const __CFDictionary *v3;
  uint64_t context;

  context = a1;
  v1 = *(const __CFDictionary **)(sStorage + 16);
  if (v1)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    if (Copy)
    {
      v3 = Copy;
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)pvmReassertDeviceVolumesIfMatchesRoute, &context);
      CFRelease(v3);
    }
  }
}

float PVMGetVolumeLimit()
{
  float VolumeLimitPref;

  VolumeLimitPref = 1.0;
  if (!PVMInitialize())
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    VolumeLimitPref = pvmGetVolumeLimitPref();
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return VolumeLimitPref;
}

BOOL PVMIsOKToMuteCurrentCategory()
{
  _BOOL8 v0;

  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  pvmAssureCurrentCategoryAndDeviceRoute();
  v0 = !FigCFEqual() && !FigCFEqual();
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return v0;
}

float PVMGetVolumeMultiplier()
{
  float v0;
  const __CFDictionary *v1;
  const __CFNumber *Value;
  const __CFNumber *v3;
  CFTypeID v4;
  float valuePtr;

  v0 = 1.0;
  if (!PVMInitialize())
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    v0 = *(float *)(sStorage + 288);
    valuePtr = v0;
    v1 = *(const __CFDictionary **)(sStorage + 96);
    if (v1)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v1, CFSTR("global"));
      if (Value)
      {
        v3 = Value;
        v4 = CFGetTypeID(Value);
        if (v4 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v3, kCFNumberFloat32Type, &valuePtr);
          v0 = valuePtr;
        }
      }
    }
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  return v0;
}

uint64_t PVMGetThirdPartyVolumeMultiplier()
{
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  PVMGetVolumeMultiplier();
  return MEMORY[0x1940352C8](*(_QWORD *)sStorage);
}

void PVMApplyVolumeReductionToHeadphoneRoutes(float a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  float v16;
  uint64_t k;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t VolumeSequenceNumber;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  int *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  os_log_type_t type;
  unsigned int v61;
  int v62;
  const char *v63;
  __int16 v64;
  void *v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  _QWORD v69[19];

  v69[16] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v2 = (void *)objc_msgSend(*(id *)(sStorage + 16), "copy");
  v3 = (void *)objc_msgSend(*(id *)(sStorage + 112), "copy");
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  if (v2)
  {
    if (v3)
    {
      v43 = v2;
      v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v57;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v57 != v8)
              objc_enumerationMutation(v3);
            v10 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * i);
            if (objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", v10), "isEqualToString:", CFSTR("Headphones"))&& objc_msgSend(v10, "containsString:", CFSTR("Headphone")))
            {
              objc_msgSend(v4, "addObject:", v10);
            }
          }
          v7 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
        }
        while (v7);
      }
      v42 = v3;
      if (objc_msgSend(v4, "count"))
      {
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v11 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v52, v67, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v53;
          do
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v53 != v13)
                objc_enumerationMutation(v4);
              v15 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j);
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "objectForKey:", v15), "objectForKey:", CFSTR("Audio/Video")), "floatValue");
              if (v16 > a1)
                objc_msgSend(v5, "addObject:", v15);
            }
            v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v52, v67, 16);
          }
          while (v12);
        }
        if (objc_msgSend(v5, "count"))
        {
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v48, v66, 16);
          if (!v47)
            goto LABEL_66;
          v45 = *(_QWORD *)v49;
          v46 = v4;
          v44 = v5;
          while (1)
          {
            for (k = 0; k != v47; ++k)
            {
              if (*(_QWORD *)v49 != v45)
                objc_enumerationMutation(v5);
              v18 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * k);
              v19 = (void *)objc_msgSend(v18, "componentsSeparatedByString:", CFSTR("~"), v40, v41, v42);
              v20 = objc_msgSend(v19, "count");
              if (!v20)
              {
                v23 = 0;
                v22 = 0;
                v25 = 0;
                goto LABEL_37;
              }
              v21 = v20;
              v22 = objc_msgSend(v19, "objectAtIndex:", 0);
              v23 = 0;
              if (v21 == 2)
              {
                v24 = 1;
                goto LABEL_35;
              }
              if (v21 == 3)
              {
                v23 = objc_msgSend(v19, "objectAtIndex:", 1);
                v24 = 2;
LABEL_35:
                v25 = objc_msgSend(v19, "objectAtIndex:", v24);
                goto LABEL_37;
              }
              v25 = 0;
LABEL_37:
              VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
              if (dword_1EE2B3DA0)
              {
                v61 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v28 = v61;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                  v29 = v28;
                else
                  v29 = v28 & 0xFFFFFFFE;
                if (v29)
                {
                  v62 = 136315394;
                  v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
                  v64 = 2114;
                  v65 = v18;
                  LODWORD(v41) = 22;
                  v40 = &v62;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              MEMORY[0x1940352BC](*(_QWORD *)sStorage);
              v30 = (_QWORD *)sStorage;
              *(_BYTE *)(sStorage + 8) = 0;
              MEMORY[0x1940352C8](*v30);
              v69[0] = CFSTR("Headphones");
              v69[1] = v22;
              v69[2] = v23;
              v69[3] = v25;
              v69[4] = 0;
              pvmSetVolumePreferenceInternal(CFSTR("Audio/Video"), CFSTR("Default"), 0, (uint64_t)v69, 1, VolumeSequenceNumber, 0, a1, 0.0, 0.0);
              MEMORY[0x1940352BC](*(_QWORD *)sStorage);
              v31 = (_QWORD *)sStorage;
              *(_BYTE *)(sStorage + 8) = 1;
              MEMORY[0x1940352C8](*v31);
              v4 = v46;
              v5 = v44;
            }
            v47 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v48, v66, 16);
            if (!v47)
            {
LABEL_66:

              goto LABEL_68;
            }
          }
        }
        if (!dword_1EE2B3DA0)
          goto LABEL_66;
        v61 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v38 = v61;
        if (os_log_type_enabled(v37, type))
          v39 = v38;
        else
          v39 = v38 & 0xFFFFFFFE;
        if (!v39)
        {
LABEL_65:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_66;
        }
        v62 = 136315138;
        v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
      }
      else
      {
        if (!dword_1EE2B3DA0)
          goto LABEL_66;
        v61 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v35 = v61;
        if (os_log_type_enabled(v34, type))
          v36 = v35;
        else
          v36 = v35 & 0xFFFFFFFE;
        if (!v36)
          goto LABEL_65;
        v62 = 136315138;
        v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
      }
      _os_log_send_and_compose_impl();
      goto LABEL_65;
    }
    if (dword_1EE2B3DA0)
    {
      v61 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }

    v5 = 0;
  }
  else
  {
    if (dword_1EE2B3DA0)
    {
      v61 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = v3;
  }
LABEL_68:

}

uint64_t PVMSetVibeIntensityPreference(float a1)
{
  const void *v1;
  CFNumberRef v2;
  uint64_t v3;
  uint64_t v4;
  float valuePtr;

  valuePtr = a1;
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v1 = *(const void **)(sStorage + 64);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(sStorage + 64) = 0;
  }
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  v3 = sStorage;
  *(_QWORD *)(sStorage + 64) = v2;
  if (v2)
  {
    *(_BYTE *)(v3 + 72) = 1;
    pvmWritePrefs();
  }
  v4 = FigSignalErrorAt();
  MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  return v4;
}

void pvmWritePrefs()
{
  uint64_t v0;
  int v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *global_queue;
  const void *v8;

  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v0 = sStorage;
  v1 = *(unsigned __int8 *)(sStorage + 24);
  if (*(_BYTE *)(sStorage + 24))
  {
    v2 = *(const void **)(sStorage + 16);
    if (v2)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("volumes"), v2);
      v0 = sStorage;
      *(_BYTE *)(sStorage + 24) = 0;
      v1 = 1;
    }
    else
    {
      v1 = 0;
    }
  }
  if (*(_BYTE *)(v0 + 40))
  {
    v3 = *(const void **)(v0 + 48);
    if (v3)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("inputVolumes"), v3);
      v0 = sStorage;
      *(_BYTE *)(sStorage + 40) = 0;
      v1 = 1;
    }
  }
  if (*(_BYTE *)(v0 + 56))
  {
    v4 = *(const void **)(v0 + 32);
    if (v4)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("volumeLimits"), v4);
      v0 = sStorage;
      *(_BYTE *)(sStorage + 56) = 0;
      v1 = 1;
    }
  }
  if (*(_BYTE *)(v0 + 104))
  {
    v5 = *(const void **)(v0 + 96);
    if (v5)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("volumeMultiplier"), v5);
      v0 = sStorage;
      *(_BYTE *)(sStorage + 104) = 0;
      v1 = 1;
    }
  }
  if (*(_BYTE *)(v0 + 72) && (v6 = *(const void **)(v0 + 64)) != 0)
  {
    MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("vibeIntensity"), v6);
    *(_BYTE *)(sStorage + 72) = 0;
  }
  else if (!v1)
  {
    goto LABEL_19;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"pvmWritePrefs", (uint64_t)"MXPreferredVolumeManager.m", 1812, 0, 0, global_queue, (uint64_t)&__block_literal_global_157);
  v0 = sStorage;
LABEL_19:
  if (*(_BYTE *)(v0 + 120))
  {
    v8 = *(const void **)(v0 + 112);
    if (v8)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("endpointTypeInfo"), v8);
      *(_BYTE *)(sStorage + 120) = 0;
    }
  }
  JUMPOUT(0x1940352C8);
}

float PVMGetVibeIntensityPreference()
{
  __n128 v0;
  const __CFNumber *v1;
  float valuePtr;

  valuePtr = 1.0;
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v1 = *(const __CFNumber **)(sStorage + 64);
  if (v1)
  {
    CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
    v0.n128_f64[0] = valuePtr;
    if (valuePtr > 0.1)
      valuePtr = 1.0;
  }
  MEMORY[0x1940352C8](*(_QWORD *)sStorage, v0);
  return valuePtr;
}

uint64_t PVMSetInputVolumePreference(const void *a1, unint64_t a2, uint64_t a3, float a4)
{
  CFStringRef DeviceRouteString;
  CFStringRef v8;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *Mutable;
  float valuePtr;

  valuePtr = a4;
  if (FigCFEqual())
  {
    DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
    if (DeviceRouteString)
    {
      v8 = DeviceRouteString;
      MEMORY[0x1940352BC](*(_QWORD *)sStorage);
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
      if (v10)
      {
        v11 = v10;
        Mutable = *(__CFDictionary **)(sStorage + 48);
        if (!Mutable)
        {
          Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(sStorage + 48) = Mutable;
        }
        CFDictionarySetValue(Mutable, v8, v11);
        *(_BYTE *)(sStorage + 40) = 1;
        pvmWritePrefs();
      }
      MEMORY[0x1940352C8](*(_QWORD *)sStorage);
      CFRelease(v8);
    }
  }
  return 0;
}

float PVMGetInputVolumePreference(const void *a1, unint64_t a2, uint64_t a3)
{
  CFStringRef DeviceRouteString;
  float v4;
  CFStringRef v5;
  const __CFNumber *Value;
  int valuePtr;

  valuePtr = 1065353216;
  DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  v4 = 1.0;
  if (DeviceRouteString)
  {
    v5 = DeviceRouteString;
    if (*(_QWORD *)(sStorage + 48))
    {
      MEMORY[0x1940352BC](*(_QWORD *)sStorage);
      Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 48), v5);
      if (Value)
        CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
      MEMORY[0x1940352C8](*(_QWORD *)sStorage);
      CFRelease(v5);
      return *(float *)&valuePtr;
    }
    else
    {
      CFRelease(DeviceRouteString);
    }
  }
  return v4;
}

BOOL PVMInputVolumePrefExistsForDeviceRoute(const void *a1, unint64_t a2, uint64_t a3)
{
  CFStringRef DeviceRouteString;
  CFStringRef v4;
  _BOOL8 v5;

  DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  if (!DeviceRouteString)
    return 0;
  v4 = DeviceRouteString;
  if (*(_QWORD *)(sStorage + 48))
  {
    MEMORY[0x1940352BC](*(_QWORD *)sStorage);
    v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 48), v4) != 0;
    MEMORY[0x1940352C8](*(_QWORD *)sStorage);
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

void __pvmInitialize_block_invoke()
{
  const __CFString *v0;
  const __CFString *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  int64_t Count;
  const void **v5;
  uint64_t v6;
  const __CFDictionary *v7;
  int64_t v8;
  const void **v9;
  const void **v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  int v13;
  NSObject *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const void **v17;
  const void **v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const __CFDictionary *cf;
  const __CFString *v25;
  const __CFString *v26;
  int64_t v27;
  const void **v28;
  const void **v29;

  v0 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v1 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v2 = (const __CFDictionary *)CFPreferencesCopyValue(CFSTR("volumes"), CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v2)
  {
    v3 = v2;
    v25 = v1;
    v26 = v0;
    Count = CFDictionaryGetCount(v2);
    v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    cf = v3;
    v28 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    v29 = v5;
    CFDictionaryGetKeysAndValues(v3, v5, v28);
    v27 = Count;
    if (Count >= 1)
    {
      v6 = 0;
      do
      {
        v7 = (const __CFDictionary *)v28[v6];
        v8 = CFDictionaryGetCount(v7);
        v9 = (const void **)malloc_type_calloc(v8, 8uLL, 0x80040B8603338uLL);
        v10 = (const void **)malloc_type_calloc(v8, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(v7, v9, v10);
        if (dword_1EE2B3DA0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v8 >= 1)
        {
          v12 = 0;
          v13 = dword_1EE2B3DA0;
          do
          {
            if (v13)
            {
              v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v13 = dword_1EE2B3DA0;
            }
            ++v12;
          }
          while (v8 != v12);
        }
        free(v9);
        free(v10);
        ++v6;
      }
      while (v6 != v27);
    }
    free(v29);
    free(v28);
    CFRelease(cf);
    v1 = v25;
    v0 = v26;
  }
  v15 = (const __CFDictionary *)CFPreferencesCopyValue(CFSTR("volumeMultiplier"), CFSTR("com.apple.mediaexperience"), v0, v1);
  if (v15)
  {
    v16 = v15;
    v17 = (const void **)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    v18 = (const void **)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(v16, v17, v18);
    if (dword_1EE2B3DA0)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    free(v17);
    free(v18);
    CFRelease(v16);
  }
  if (dword_1EE2B3DA0)
  {
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2B3DA0)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1EE2B3DA0)
      {
        v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1EE2B3DA0)
        {
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
}

void pvmApplierFunction_CopyValidatedVolumes(const void *a1, CFNumberRef number, __CFDictionary *a3)
{
  CFNumberRef v5;
  float valuePtr;

  if (a3)
  {
    valuePtr = 0.0;
    CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
    if (valuePtr > 1.0)
      valuePtr = 1.0;
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
    CFDictionarySetValue(a3, a1, v5);
    if (v5)
      CFRelease(v5);
  }
}

uint64_t __pvmInitializeLogging_block_invoke()
{
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  result = fig_note_initialize_category_with_default_work();
  if ((dword_1EE2B3DA0 & 0x100) != 0)
    dword_1EE2B3DA0 = 0;
  return result;
}

void pvmApplierFunction_ValidateVolumesForRoute(const void *a1, const __CFDictionary *a2, __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)pvmApplierFunction_ValidateVolumesForCategory, Mutable);
  CFDictionarySetValue(a3, a1, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void pvmApplierFunction_ValidateVolumesForCategory(const void *a1, CFNumberRef number, __CFDictionary *a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = 1056964608;
  CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(a3, a1, v5);
  if (v5)
    CFRelease(v5);
}

uint64_t pvmGetMappedBluetoothRouteWithDeviceIDAppended(void *a1)
{
  void *v2;
  uint64_t v3;

  if ((objc_msgSend(a1, "hasPrefix:", CFSTR("HeadphonesBT")) & 1) == 0
    && !objc_msgSend(a1, "hasPrefix:", CFSTR("HeadsetBT")))
  {
    return 0;
  }
  v2 = (void *)objc_msgSend((id)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("~")), "lastObject");
  if (v2)
    v3 = objc_msgSend((id)objc_msgSend(v2, "componentsSeparatedByString:", CFSTR("-")), "firstObject");
  else
    v3 = 0;
  return objc_msgSend((id)objc_msgSend(CFSTR("HeadphonesBT"), "stringByAppendingString:", CFSTR("~")), "stringByAppendingString:", v3);
}

uint64_t __pvmAdd100dBVolumeLimitChangedListener_block_invoke()
{
  int CFPreferenceNumberWithDefault;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v2;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (dword_1EE2B3DA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v2 = (_QWORD *)sStorage;
  *(_BYTE *)(sStorage + 8) = 0;
  MEMORY[0x1940352C8](*v2);
  return pvmUpdate100dBVolumeLimit(CFPreferenceNumberWithDefault != 0);
}

uint64_t __pvmWritePrefs_block_invoke()
{
  return notify_post("com.apple.celestial.uservolumepreferenceschanged");
}

uint64_t pvmSetSystemSoundVolumeMultiplierForVolumeGuts(float a1)
{
  float v2;
  float v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v6;
  CFNumberRef v7;
  float valuePtr;

  MEMORY[0x1940352BC](*(_QWORD *)sStorage);
  v2 = *(float *)(sStorage + 136);
  v3 = *(float *)(sStorage + 144);
  if ((float)((float)(v2 + a1) * v3) >= v2)
    v2 = (float)(v2 + a1) * v3;
  if (v2 > *(float *)(sStorage + 140))
    v2 = *(float *)(sStorage + 140);
  valuePtr = v2;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(sStorage + 96)
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(sStorage + 96) = Mutable) != 0))
  {
    v6 = CFNumberCreate(v4, kCFNumberFloat32Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 96), CFSTR("global"), v6);
      CFRelease(v7);
      *(_BYTE *)(sStorage + 104) = 1;
      pvmWritePrefs();
    }
  }
  FigSignalErrorAt();
  return MEMORY[0x1940352C8](*(_QWORD *)sStorage);
}

void pvmReassertDeviceVolumesIfMatchesRoute(const __CFString *a1, const __CFDictionary *a2, uint64_t *a3)
{
  const __CFString *v6;
  const __CFAllocator *v7;
  CFMutableStringRef MutableCopy;
  int HasPrefix;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  uint64_t v12;
  CFIndex v13;
  const __CFString *context;
  const void *v15;
  const void *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;

  v6 = CFSTR("HeadphonesBT");
  if (CFStringHasPrefix(a1, CFSTR("HeadphonesBT"))
    || (v6 = CFSTR("Headphone"), CFStringHasPrefix(a1, CFSTR("Headphone"))))
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
    CFStringAppend(MutableCopy, CFSTR("~"));
    HasPrefix = CFStringHasPrefix(a1, MutableCopy);
    CFRelease(MutableCopy);
    if (HasPrefix)
    {
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v7, a1, CFSTR("~"));
      Count = CFArrayGetCount(ArrayBySeparatingStrings);
      v12 = *a3;
      v15 = 0;
      ValueAtIndex = 0;
      v18 = v12;
      context = v6;
      if (Count >= 2)
      {
        v13 = Count;
        ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
        if (v13 != 2)
          v15 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
      }
      v17 = *(_QWORD *)(sStorage + 240);
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)pvmReassertVolume, &context);
      CFRelease(ArrayBySeparatingStrings);
    }
  }
}

void pvmReassertVolume(void *a1, CFNumberRef number, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float VolumeLimitPref;
  float v12;
  float v13;
  float valuePtr;
  CFTypeRef v15;
  CFTypeRef cf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v15 = 0;
  cf = 0;
  v5 = a3[4];
  valuePtr = 0.0;
  CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
  v7 = a3[2];
  v6 = a3[3];
  v9 = *a3;
  v8 = a3[1];
  v10 = valuePtr;
  v17 = v6;
  v18 = v9;
  v19 = v7;
  v20 = v8;
  v21 = 0;
  VolumeLimitPref = pvmGetVolumeLimitPref();
  v17 = v6;
  v18 = v9;
  v19 = v7;
  v20 = v8;
  v21 = 0;
  v12 = v10 / (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute());
  if (v12 <= 1.0)
    v13 = v12;
  else
    v13 = 1.0;
  pvmCreateSeparateCategoryAndModeStrings(a1, &cf, &v15);
  v17 = v6;
  v18 = v9;
  v19 = v7;
  v20 = v8;
  v21 = 0;
  pvmSetVolumePreferenceInternal((const __CFString *)cf, v15, 0, (uint64_t)&v17, 0, v5, 0, v13, 0.0, 0.0);
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
}

void CMScreenInitialize()
{
  NSObject *v0;

  gCMScreen_0 = 0;
  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  gCMScreen_1 = (uint64_t)dispatch_queue_create("com.apple.coremedia.cmsession.screenqueue", v0);
  MXDispatchAsync((uint64_t)"CMScreenInitialize", (uint64_t)"CMSessionManager_Screen.m", 131, 0, 0, gCMScreen_1, (uint64_t)&__block_literal_global_61);
  CMScreenSetMirroringMode(0);
  CMScreenSetVirtualDisplayClientPID(0);
}

CFTypeRef cmscreenSetCurrentState(CFTypeRef cf)
{
  CFTypeRef result;

  if (gCMScreen_2)
    CFRelease((CFTypeRef)gCMScreen_2);
  if (cf)
    result = CFRetain(cf);
  else
    result = 0;
  gCMScreen_2 = (uint64_t)result;
  return result;
}

void CMScreenSetMirroringMode(int a1)
{
  _QWORD v2[4];
  int v3;

  if (BackBoardServicesLibrary_sOnce != -1)
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_27_0);
  if (BackBoardServicesLibrary_sLib)
  {
    if (dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetCloneMirroringMode"))
    {
      v2[0] = MEMORY[0x1E0C809B0];
      v2[1] = 3221225472;
      v2[2] = __CMScreenSetMirroringMode_block_invoke;
      v2[3] = &__block_descriptor_36_e5_v8__0l;
      v3 = a1;
      MXDispatchAsync((uint64_t)"CMScreenSetMirroringMode", (uint64_t)"CMSessionManager_Screen.m", 689, 0, 0, gCMScreen_1, (uint64_t)v2);
    }
  }
}

void CMScreenSetVirtualDisplayClientPID(int a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v3[4];
  int v4;
  os_log_type_t type;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (BackBoardServicesLibrary_sOnce != -1)
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_27_0);
  if (BackBoardServicesLibrary_sLib
    && dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetVirtualDisplayClientPID"))
  {
    if (dword_1EE2B3F38)
    {
      v6 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __CMScreenSetVirtualDisplayClientPID_block_invoke;
    v3[3] = &__block_descriptor_36_e5_v8__0l;
    v4 = a1;
    MXDispatchAsync((uint64_t)"CMScreenSetVirtualDisplayClientPID", (uint64_t)"CMSessionManager_Screen.m", 705, 0, 0, gCMScreen_1, (uint64_t)v3);
  }
}

uint64_t CMScreenHandleActivation(CFTypeRef cf, CFTypeRef a2)
{
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CMScreenHandleActivation_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMScreenHandleActivation", (uint64_t)"CMSessionManager_Screen.m", 217, 0, 0, gCMScreen_1, (uint64_t)v5);
  return 0;
}

uint64_t CMScreenHandleDeactivation(CFTypeRef cf, CFTypeRef a2)
{
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CMScreenHandleDeactivation_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMScreenHandleDeactivation", (uint64_t)"CMSessionManager_Screen.m", 268, 0, 0, gCMScreen_1, (uint64_t)v5);
  return 0;
}

uint64_t CMScreenSuspendStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  _QWORD v9[8];

  if (!a1)
    return 4294954316;
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CMScreenSuspendStream_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a4;
  MXDispatchAsync((uint64_t)"CMScreenSuspendStream", (uint64_t)"CMSessionManager_Screen.m", 338, 0, 0, gCMScreen_1, (uint64_t)v9);
  return 0;
}

uint64_t CMScreenResumeStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  _QWORD v9[8];

  if (!a1)
    return 4294954316;
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CMScreenResumeStream_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a4;
  MXDispatchAsync((uint64_t)"CMScreenResumeStream", (uint64_t)"CMSessionManager_Screen.m", 408, 0, 0, gCMScreen_1, (uint64_t)v9);
  return 0;
}

uint64_t CMScreenGetScreenState()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __CMScreenGetScreenState_block_invoke;
  v2[3] = &unk_1E3099018;
  v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenGetScreenState", (uint64_t)"CMSessionManager_Screen.m", 568, 0, 0, gCMScreen_1, (uint64_t)v2);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_193752030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMScreenIsSuspended()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __CMScreenIsSuspended_block_invoke;
  v2[3] = &unk_1E3099018;
  v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenIsSuspended", (uint64_t)"CMSessionManager_Screen.m", 670, 0, 0, gCMScreen_1, (uint64_t)v2);
  v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19375210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmscreenEndpointIsStarkWiFi()
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return FigCFEqual() != 0;
  return result;
}

uint64_t __cmscreenIsTetheredDemoModeOn_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn = result;
  return result;
}

uint64_t initBKSDisplayServicesSetCloneMirroringMode(uint64_t a1)
{
  if (BackBoardServicesLibrary_sOnce != -1)
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_27_0);
  softLinkBKSDisplayServicesSetCloneMirroringMode = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetCloneMirroringMode");
  return ((uint64_t (*)(uint64_t))softLinkBKSDisplayServicesSetCloneMirroringMode)(a1);
}

uint64_t initBKSDisplayServicesSetVirtualDisplayClientPID(uint64_t a1)
{
  if (BackBoardServicesLibrary_sOnce != -1)
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_27_0);
  softLinkBKSDisplayServicesSetVirtualDisplayClientPID = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetVirtualDisplayClientPID");
  return ((uint64_t (*)(uint64_t))softLinkBKSDisplayServicesSetVirtualDisplayClientPID)(a1);
}

void *CMSM_IDSClient_Initialize()
{
  void *result;

  if (cmsm_IDSClient_GetClient_once != -1)
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_62);
  idsFrameworkLib = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IDS.framework/IDS", 4);
  result = dlsym((void *)idsFrameworkLib, "IDSSendMessageOptionQueueOneIdentifierKey");
  kMXSession_IDSSendMessageOptionQueueOneIdentifierKey = (uint64_t)result;
  return result;
}

id CMSM_IDSClient_CreateSessionInfoDictionary(void *a1, int a2)
{
  id v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = objc_msgSend(a1, "clientName");
  if (v5)
  {
    objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("ClientName"));
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "ID", v9, v10), CFSTR("CMSessionID"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "audioCategory"), CFSTR("AudioCategory"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "audioMode"), CFSTR("AudioMode"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "interruptionStyle")), CFSTR("InterruptionStyle"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "clientPriority")), CFSTR("ClientPriority"));
  if (a2)
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "handsOverInterruptionsToInterruptor"));
    objc_msgSend(v4, "setObject:forKey:", v7, kMXSession_IDSMessage_HandoverInterruption);
  }
  return v4;
}

uint64_t CMSM_IDSClient_QueryRemote_BTDeviceConnectionStatus()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  CFNumberRef v2;
  uint64_t v3;
  int valuePtr;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusQuery);
  valuePtr = 1065353216;
  v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2)
    CFRelease(v2);
  v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

uint64_t CMSM_IDSClient_SendNotificationMessage(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  os_log_type_t v10[8];
  _QWORD v11[25];

  v11[24] = *MEMORY[0x1E0C80C00];
  if (cmsm_IDSClient_GetClient_once != -1)
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_62);
  v2 = (void *)cmsm_IDSClient_GetClient_idsClient;
  v3 = (void *)CMSM_IDSConnection_CopyNearbyPairedDevice();
  if (!v3)
  {
    FigCFDictionaryGetValue();
    goto LABEL_16;
  }
  v4 = (void *)CMSM_IDSCopyIDForDevice();
  FigCFDictionaryGetValue();
  if (!v4)
  {
LABEL_16:
    LODWORD(v11[0]) = 0;
    v10[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v4 = 0;
    v6 = 0;
    goto LABEL_20;
  }
  *(_QWORD *)v10 = 0;
  v11[0] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    FigCFDictionarySetValue();
  }
  v6 = objc_msgSend(v2, "sendMessage:toDestinations:priority:options:identifier:error:", a1, objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v4), 300, Mutable, v10, v11);
  if (!(_DWORD)v6 || dword_1EE2B3F38)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable)
    CFRelease(Mutable);
LABEL_20:

  return v6;
}

uint64_t CMSM_IDSClient_ReplyToRemote_BTDeviceConnectionStatus(int a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  const void **v5;
  uint64_t v6;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusReply);
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  v5 = (const void **)MEMORY[0x1E0C9AE40];
  if (a1)
    v5 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey, *v5);
  v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

uint64_t CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(int a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  const void **v5;
  uint64_t v6;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusChanged);
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  v5 = (const void **)MEMORY[0x1E0C9AE40];
  if (a1)
    v5 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey, *v5);
  v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

uint64_t CMSM_IDSClient_QueryRemote_PlayingInfo()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  CFNumberRef v2;
  uint64_t v3;
  int valuePtr;

  CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(0);
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemotePlayingInfoQuery);
  valuePtr = 1065353216;
  v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2)
    CFRelease(v2);
  v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)v3 && !CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
    CMSM_IDSConnection_StartWaitForRemoteToReplyWithInitialPlayingInfoTimer(20.0);
  return v3;
}

uint64_t CMSM_IDSClient_ReplyToRemote_PlayingInfo(const void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  int DoesPortSupportMultipleConnections;
  const void **v6;
  const __CFString *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemotePlayingInfoReply);
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  if (a1)
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_AllPlayingSessionsKey, a1);
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v10);
  DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(DWORD2(v12));
  v6 = (const void **)MEMORY[0x1E0C9AE40];
  if (DoesPortSupportMultipleConnections)
    v6 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey, *v6);
  if ((_QWORD)v11)
    v7 = (const __CFString *)v11;
  else
    v7 = &stru_1E30A1A48;
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey, v7);
  v8 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v8;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsBeingInitialized()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  CFNumberRef v2;
  uint64_t v3;
  int valuePtr;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsBeingInitialized);
  valuePtr = 1065353216;
  v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2)
    CFRelease(v2);
  v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

id CMSM_IDSClient_NotifyRemote_InterruptionStartAndCopyIdentifier(void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  id SessionInfoDictionary;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *MessagingQueue;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int valuePtr;
  os_log_type_t type;
  unsigned int v24;
  _QWORD v25[10];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  int v42;
  const char *v43;
  __int16 v44;
  const void *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 1);
  FigCFDictionarySetValue();
  if (cmsm_IDSClient_GetClient_once != -1)
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_62);
  v6 = cmsm_IDSClient_GetClient_idsClient;
  v7 = (void *)CMSM_IDSConnection_CopyNearbyPairedDevice();
  if (v7)
    v8 = (void *)CMSM_IDSCopyIDForDevice();
  else
    v8 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x3052000000;
  v39 = __Block_byref_object_copy__11;
  v40 = __Block_byref_object_dispose__11;
  v41 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 0;
  if (v8)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x3052000000;
    v29 = __Block_byref_object_copy__11;
    v30 = __Block_byref_object_dispose__11;
    v31 = 0;
    MessagingQueue = CMSM_IDSConnection_GetMessagingQueue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier_block_invoke;
    v25[3] = &unk_1E309E698;
    v25[4] = v6;
    v25[5] = v8;
    v25[6] = &v32;
    v25[7] = &v36;
    v25[8] = &v26;
    v25[9] = Mutable;
    MXDispatchSync((uint64_t)"CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier", (uint64_t)"CMSessionManager_IDSClient.m", 635, 0, 0, MessagingQueue, (uint64_t)v25);
    if (Mutable)
      Value = CFDictionaryGetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey);
    else
      Value = 0;
    if (*((_BYTE *)v33 + 24))
    {
      if (!dword_1EE2B3F38)
      {
LABEL_25:
        _Block_object_dispose(&v26, 8);
        goto LABEL_26;
      }
      v24 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v12 = v24;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if (v13)
      {
        v14 = v37[5];
        v42 = 136315650;
        v43 = "CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier";
        v44 = 2114;
        v45 = Value;
        v46 = 2114;
        v47 = v14;
        _os_log_send_and_compose_impl();
      }
    }
    else
    {
      v24 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v24;
      if (os_log_type_enabled(v15, type))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
        v18 = v37[5];
        v19 = v27[5];
        v42 = 136315906;
        v43 = "CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier";
        v44 = 2114;
        v45 = Value;
        v46 = 2114;
        v47 = v18;
        v48 = 2114;
        v49 = v19;
        _os_log_send_and_compose_impl();
      }
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_25;
  }
LABEL_26:

  v20 = (id)v37[5];
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  if (SessionInfoDictionary)
    CFRelease(SessionInfoDictionary);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

void sub_193753658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSM_IDSClient_NotifyRemote_InterruptionDone(int a1, const void *a2)
{
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  int v10;

  v10 = a1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemoteInterruptionDone);
  valuePtr = 1065353216;
  v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5)
    CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &v10);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_RemoteInterruptionDoneErrorCode, v6);
  if (v6)
    CFRelease(v6);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_IdentifierKey, a2);
  v7 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(void *a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  id SessionInfoDictionary;
  int DoesPortSupportMultipleConnections;
  const void **v8;
  const __CFString *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int valuePtr;

  if (CMSM_GetLocalSessionPriority(a1, 0) == 100)
    return 1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsPlayingStart);
  valuePtr = 1065353216;
  v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5)
    CFRelease(v5);
  SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 0);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_PlayingSessionKey, SessionInfoDictionary);
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v11);
  DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(DWORD2(v13));
  v8 = (const void **)MEMORY[0x1E0C9AE40];
  if (DoesPortSupportMultipleConnections)
    v8 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey, *v8);
  if ((_QWORD)v12)
    v9 = (const __CFString *)v12;
  else
    v9 = &stru_1E30A1A48;
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey, v9);
  v2 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (SessionInfoDictionary)
    CFRelease(SessionInfoDictionary);
  if (Mutable)
    CFRelease(Mutable);
  return v2;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsPlayingDone(void *a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  id SessionInfoDictionary;
  int valuePtr;

  if (CMSM_GetLocalSessionPriority(a1, 0) == 100)
    return 1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsPlayingDone);
  valuePtr = 1065353216;
  v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5)
    CFRelease(v5);
  SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 0);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_PlayingSessionKey, SessionInfoDictionary);
  v2 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (SessionInfoDictionary)
    CFRelease(SessionInfoDictionary);
  if (Mutable)
    CFRelease(Mutable);
  return v2;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsDoingEndInterruption(const void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  uint64_t v5;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsDoingEndInterruption);
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  if (a1)
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_LocalEndInterruptionStatusKey, a1);
  v5 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v5;
}

uint64_t CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress(const void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  const void **v5;
  uint64_t v6;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_UpdateSharedAudioRouteMacAddress);
  valuePtr = 1065353216;
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4)
    CFRelease(v4);
  if (a1)
  {
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_SharedAudioRouteMacAddress, a1);
    v5 = (const void **)MEMORY[0x1E0C9AE40];
  }
  else
  {
    v5 = (const void **)MEMORY[0x1E0C9AE50];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_ClearSharedAudioRoute, *v5);
  v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

id CMSMVAUtility_CopyFigIODeviceNameFromVADPortTypes(int a1, unsigned int a2)
{
  if (a1 == 1886216809 && a2 == 1886545251)
    return (id)CFRetain(CFSTR("ReceiverAndMicrophone"));
  if (a1 == 1886222185 && a2 == 1885892727)
    return (id)CFRetain(CFSTR("HeadsetInOut"));
  if (a1 == 1886216809 && a2 == 1885892727)
    return (id)CFRetain(CFSTR("HeadphonesAndMicrophone"));
  if (a1 == 1886216809 && a2 == 1886613611)
    return (id)CFRetain(CFSTR("SpeakerAndMicrophone"));
  if (a1 == 1886216820 && a2 == 1885892706)
    return (id)CFRetain(CFSTR("HeadsetBT"));
  if (a1 == 1886680169 && a2 == 1886680175)
    return (id)CFRetain(CFSTR("TTY"));
  if (a1 == 1886153070 && a2 == 1886154613)
    return (id)CFRetain(CFSTR("LineInOut"));
  return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(a2);
}

const __CFString *CMSMVAUtility_MapVASiriInputSourceToString(int a1)
{
  if (a1 <= 1936289390)
  {
    if (a1 == 1936024681)
      return CFSTR("ExternalDeviceInput");
    if (a1 == 1936286822)
      return CFSTR("DefaultDevice");
  }
  else
  {
    switch(a1)
    {
      case 1936289391:
        return CFSTR("None");
      case 1936290660:
        return CFSTR("SpeechDetectionDevice");
      case 1936679529:
        return CFSTR("OutOfBandSpeechInput");
    }
  }
  return 0;
}

NSDictionary *CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(NSDictionary *result)
{
  NSDictionary *v1;

  if (result)
  {
    v1 = result;
    result = -[MXSessionManager figRouteToVADOutputPortTypeDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figRouteToVADOutputPortTypeDict");
    if (result)
      return (NSDictionary *)-[NSDictionary objectForKey:](-[MXSessionManager figRouteToVADOutputPortTypeDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figRouteToVADOutputPortTypeDict"), "objectForKey:", v1);
  }
  return result;
}

NSDictionary *CMSMVAUtility_GetVADInputPortTypeFromFigRouteName(NSDictionary *result)
{
  NSDictionary *v1;

  if (result)
  {
    v1 = result;
    result = -[MXSessionManager figRouteToVADInputPortTypeDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figRouteToVADInputPortTypeDict");
    if (result)
      return (NSDictionary *)-[NSDictionary objectForKey:](-[MXSessionManager figRouteToVADInputPortTypeDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figRouteToVADInputPortTypeDict"), "objectForKey:", v1);
  }
  return result;
}

BOOL CMSMVAUtility_MakeConnectedPortRoutable(AudioObjectID a1)
{
  int PortRoutable;
  const void *v3;

  PortRoutable = vaeMakePortRoutable(a1, 1, 0, qword_1EE2B3CF0);
  v3 = (const void *)vaeCopyNameForPort(a1);
  if (v3)
    CFRelease(v3);
  return PortRoutable == 0;
}

uint64_t CMSMVAUtility_MakePortRoutable(int a1, uint64_t a2)
{
  return vaeMakePortRoutable(a1, 1, 1, a2);
}

uint64_t CMSMVAUtility_MakeLowLatencyAirPlayPortRoutable(uint64_t a1)
{
  __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFNumber *ValueAtIndex;
  int v8;
  uint64_t v9;
  uint64_t valuePtr;

  v2 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (!v2)
    return 0;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
    goto LABEL_10;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
    valuePtr = 0;
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    v8 = valuePtr;
    if (vaeGetPortTypeFromPortID(valuePtr) == 1885433964)
      break;
    if (v5 == ++v6)
      goto LABEL_10;
  }
  if (v8)
  {
    v9 = 1;
    vaeMakePortRoutable(v8, 1, 1, a1);
  }
  else
  {
LABEL_10:
    v9 = 0;
  }
  CFRelease(v3);
  return v9;
}

BOOL CMSMVAUtility_ShouldAutoRouteOnConnect(uint64_t a1, uint64_t a2)
{
  int PortTypeFromPortID;
  CFTypeRef v5;
  OpaqueFigEndpoint *v6;
  uint64_t v7;
  _BOOL8 ShouldBTPortBeTreatedAsInEar;
  unsigned int NumberOfCurrentOutputPorts;
  uint64_t v10;
  int v11;
  uint64_t v12;
  AudioObjectID v13;
  NSObject *v14;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  os_log_type_t type[2];
  unsigned int v42;
  int v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  char v47[40];
  AudioObjectID v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  v5 = vaeCopyDeviceIdentifierFromVADPort(a1);
  v6 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v5, 1, *MEMORY[0x1E0CA3A68], 0);
  if (v6)
  {
    CFRelease(v6);
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  if (PortTypeFromPortID > 1885433970)
  {
    if (PortTypeFromPortID == 1885433975)
    {
      ShouldBTPortBeTreatedAsInEar = 0;
      goto LABEL_107;
    }
    if (PortTypeFromPortID != 1885433971)
    {
LABEL_23:
      ShouldBTPortBeTreatedAsInEar = 0;
      v7 = 1;
      if (PortTypeFromPortID > 1886152040)
      {
        if (PortTypeFromPortID == 1886152041 || PortTypeFromPortID == 1886152047)
          goto LABEL_106;
        v15 = 1886216820;
      }
      else
      {
        if (PortTypeFromPortID == 1885565807)
          goto LABEL_106;
        if (PortTypeFromPortID == 1885892674)
          goto LABEL_31;
        v15 = 1885892706;
      }
      if (PortTypeFromPortID != v15)
        goto LABEL_4;
LABEL_31:
      if (!vaeDoesPortSupportMultipleConnections(a1))
      {
        ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a1);
        if (PortTypeFromPortID != 1885892674
          || CMSMDeviceState_ItsAnAppleTV()
          || !vaemLineOutIsConnected()
          && !vaemUSBAudioOutputIsConnected()
          && !vaemHDMIAudioOutputIsConnected()
          && !vaemDisplayPortAudioOutputIsConnected()
          && !vaemThunderboltOutputIsConnected()
          && !vaemStarkAudioPortIsCurrentlyActive()
          && !vaemContinuityScreenOutputIsConnected())
        {
          goto LABEL_106;
        }
        goto LABEL_105;
      }
      *(_WORD *)type = 0;
      MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(a1, &type[1], type, 0, 0);
      if (type[0])
      {
        if (type[1])
        {
          if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a1))
          {
            if (!vaeRequestOwnershipOnBTPort(a1))
              goto LABEL_103;
            v42 = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v17 = v42;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
              v18 = v17;
            else
              v18 = v17 & 0xFFFFFFFE;
            if (!v18)
              goto LABEL_104;
            v43 = 136315138;
            v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
            goto LABEL_87;
          }
          if (dword_1EE2B3F38)
          {
            v42 = 0;
            v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v26 = v42;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              v27 = v26;
            else
              v27 = v26 & 0xFFFFFFFE;
            if (!v27)
              goto LABEL_104;
            goto LABEL_86;
          }
        }
        else if (dword_1EE2B3F38)
        {
          v42 = 0;
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v23 = v42;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if (v24)
          {
            v43 = 136315138;
            v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
            _os_log_send_and_compose_impl();
          }
          goto LABEL_104;
        }
LABEL_105:
        ShouldBTPortBeTreatedAsInEar = 0;
        goto LABEL_106;
      }
      if (vaeDoesBTPortSupportInEarDetection(a1))
      {
        if (FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID())
        {
          if (!cmsmShouldSetupForCoordinatedInterruptions(a1, 0))
            goto LABEL_103;
          if (dword_1EE2B3F38)
          {
            v42 = 0;
            v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v20 = v42;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              v21 = v20;
            else
              v21 = v20 & 0xFFFFFFFE;
            if (v21)
            {
              v43 = 136315394;
              v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
              v45 = 2048;
              v46 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!vaeRequestOwnershipOnBTPort(a1))
            goto LABEL_103;
          v42 = 0;
          v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v38 = v42;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            v39 = v38;
          else
            v39 = v38 & 0xFFFFFFFE;
          if (!v39)
            goto LABEL_104;
          v43 = 136315138;
          v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
          goto LABEL_87;
        }
        if (CMSMVAUtility_IsBTPortKnownToNotBeInEar(a1))
        {
          if (!dword_1EE2B3F38)
            goto LABEL_105;
          v42 = 0;
          v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v32 = v42;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            v33 = v32;
          else
            v33 = v32 & 0xFFFFFFFE;
          if (!v33)
            goto LABEL_104;
        }
        else
        {
          if (vaeGetBTPortOwnsSharedAudioConnection(a1))
            goto LABEL_103;
          if (!dword_1EE2B3F38)
            goto LABEL_105;
          v42 = 0;
          v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v35 = v42;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            v36 = v35;
          else
            v36 = v35 & 0xFFFFFFFE;
          if (!v36)
            goto LABEL_104;
        }
      }
      else
      {
        if (vaeGetBTPortOwnsSharedAudioConnection(a1))
          goto LABEL_103;
        if (!dword_1EE2B3F38)
          goto LABEL_105;
        v42 = 0;
        v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v29 = v42;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          v30 = v29;
        else
          v30 = v29 & 0xFFFFFFFE;
        if (!v30)
          goto LABEL_104;
      }
LABEL_86:
      v43 = 136315394;
      v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
      v45 = 2048;
      v46 = a1;
LABEL_87:
      _os_log_send_and_compose_impl();
LABEL_104:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_105;
    }
LABEL_20:
    if (a2)
    {
      ShouldBTPortBeTreatedAsInEar = FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID() != 0;
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (PortTypeFromPortID == 1885433953)
    goto LABEL_20;
  if (PortTypeFromPortID != 1885433964)
    goto LABEL_23;
  NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!NumberOfCurrentOutputPorts)
  {
LABEL_103:
    ShouldBTPortBeTreatedAsInEar = 1;
    goto LABEL_106;
  }
  v10 = 0;
  v11 = 0;
  v12 = NumberOfCurrentOutputPorts;
  do
  {
    MXVW_GetCMSRouteInfoAt((_QWORD *)qword_1EE2B3C20, v10, (uint64_t)v47);
    v13 = v48;
    if ((vaeGetPortTypeFromPortID(v48) & 0xFFFFFFDF) == 0x70687042 && CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v13))
      v11 = 1;
    ++v10;
  }
  while (v12 != v10);
  if (v11)
  {
    v7 = dword_1EE2B3F38;
    if (dword_1EE2B3F38)
    {
      v42 = 0;
      type[1] = OS_LOG_TYPE_DEFAULT;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_3;
    }
  }
  else
  {
    v7 = 1;
  }
LABEL_4:
  ShouldBTPortBeTreatedAsInEar = v7;
  if (PortTypeFromPortID != 1885433975)
LABEL_106:
    FigPredictedRouting_StopPreemptivePortChangedTimer(!ShouldBTPortBeTreatedAsInEar);
LABEL_107:
  if (v5)
    CFRelease(v5);
  return ShouldBTPortBeTreatedAsInEar;
}

BOOL CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(AudioObjectID a1)
{
  return !vaeHasUserEnabledInEarDetectionForBTPort(a1) || vaeIsInEarStatusTrueForBTPort(a1);
}

uint64_t CMSMVAUtility_IsBTPortKnownToNotBeInEar(AudioObjectID a1)
{
  uint64_t result;

  result = vaeHasUserEnabledInEarDetectionForBTPort(a1);
  if ((_DWORD)result)
    return !vaeIsInEarStatusTrueForBTPort(a1);
  return result;
}

uint64_t CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  __CFArray *Mutable;
  CFIndex v10;
  int v11;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v13;
  uint64_t v14;
  __CFArray *ArrayFromPortID;
  __CFArray *Routable;
  const __CFArray *v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex i;
  const void *v21;
  CFIndex v22;
  CFIndex v23;
  uint64_t CMBaseObject;
  void (*v25)(uint64_t, _QWORD, uint64_t, CFStringRef *);
  CFIndex v26;
  const __CFNumber *v27;
  const __CFString *v28;
  int PortTypeFromPortID;
  uint64_t v31;
  uint64_t ArrayOfPortsRoutable;
  unsigned int v34;
  AudioObjectID v35;
  CFStringRef valuePtr;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v7 = Count;
  v34 = CMSMVAUtility_ArePortsHFPOnly(a1);
  v8 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (v7 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v10);
      v13 = ValueAtIndex;
      if (ValueAtIndex)
      {
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        v14 = valuePtr;
      }
      else
      {
        v14 = 0;
      }
      if (CMSMVAUtility_ShouldAutoRouteOnConnect(v14, a2))
      {
        CFArrayAppendValue(Mutable, v13);
        if (vaeDoesPortSupportMultipleConnections(v14))
        {
          if (vaeGetPortTypeFromPortID(v14) == 1885892674
            || vaeGetPortTypeFromPortID(v14) == 1885892706)
          {
            v11 = v14;
          }
        }
      }
      ++v10;
    }
    while (v7 != v10);
    if (v11)
    {
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(v11);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      if (Routable)
      {
        v17 = Routable;
        v18 = CFArrayGetCount(Routable);
        if (v18 >= 1)
        {
          v19 = v18;
          for (i = 0; i != v19; ++i)
          {
            v21 = CFArrayGetValueAtIndex(v17, i);
            if (!FigCFArrayContainsValue())
              CFArrayAppendValue(Mutable, v21);
          }
        }
        CFRelease(v17);
      }
      if (ArrayFromPortID)
        CFRelease(ArrayFromPortID);
    }
  }
  if (!Mutable)
    return 0;
  v22 = CFArrayGetCount(Mutable);
  if (v22 < 1)
  {
    ArrayOfPortsRoutable = 0;
  }
  else
  {
    v23 = v22;
    valuePtr = 0;
    if (a2)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v25 = *(void (**)(uint64_t, _QWORD, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v25)
        v25(CMBaseObject, *MEMORY[0x1E0CA4258], v8, &valuePtr);
    }
    v26 = 0;
    while (1)
    {
      v27 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, v26);
      v35 = 0;
      CFNumberGetValue(v27, kCFNumberSInt32Type, &v35);
      v28 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(v35);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(v35);
      if (MXCFStringHasCaseInsensitivePrefix(v28, valuePtr) || PortTypeFromPortID == 1885433964)
        break;
      if (v28)
        CFRelease(v28);
      if (v23 == ++v26)
      {
        v31 = 0;
        goto LABEL_43;
      }
    }
    if (v28)
      CFRelease(v28);
    v31 = 1;
LABEL_43:
    ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(Mutable, 1, v31, a3, v34);
    if (valuePtr)
      CFRelease(valuePtr);
  }
  CFRelease(Mutable);
  return ArrayOfPortsRoutable;
}

uint64_t CMSMVAUtility_ArePortsHFPOnly(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  unsigned __int8 v5;
  const __CFNumber *ValueAtIndex;
  int PortTypeFromPortID;
  BOOL v9;
  uint64_t valuePtr;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v3 = Count;
    v4 = 0;
    v5 = 1;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v4);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      if (PortTypeFromPortID != 1886216820 && PortTypeFromPortID != 1885892706)
        v5 = 0;
      v9 = PortTypeFromPortID == 1886216820 || PortTypeFromPortID == 1885892706;
      ++v4;
    }
    while (v9 && v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

__CFArray *CMSMVAUtility_CreateArrayFromPortID(int a1)
{
  __CFArray *Mutable;
  const void *SInt64;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  CFArrayAppendValue(Mutable, SInt64);
  if (SInt64)
    CFRelease(SInt64);
  return Mutable;
}

uint64_t CMSMVAUtility_AggregateEndpoints(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;
  uint64_t v7;
  __CFArray *Mutable;
  CFIndex i;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, __CFString *, uint64_t, void **);
  int IsBluetoothSharingSessionEnabled;
  uint64_t v13;
  void *value;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v7 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        CFArrayGetValueAtIndex(a1, i);
        value = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v11 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v11)
          v11(CMBaseObject, CFSTR("VAE_PortID"), v7, &value);
        CFArrayAppendValue(Mutable, value);
        if (value)
          CFRelease(value);
      }
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  }
  IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  v13 = vaemAggregatePorts((uint64_t)Mutable, a2, IsBluetoothSharingSessionEnabled, a3);
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t CMSMVAUtility_AggregatePorts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int IsBluetoothSharingSessionEnabled;

  IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  return vaemAggregatePorts(a1, a2, IsBluetoothSharingSessionEnabled, a3);
}

uint64_t CMSMVAUtility_IsAnyRouteBTManagedAndInEar()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const __CFNumber *ValueAtIndex;
  AudioObjectID v6;
  uint64_t v7;
  uint64_t valuePtr;

  v0 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  if (!v0)
    return 0;
  v1 = v0;
  Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
LABEL_7:
    v7 = 0;
  }
  else
  {
    v3 = Count;
    v4 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, v4);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      v6 = valuePtr;
      if (MXBluetoothServices_IsPortBTManaged(valuePtr, 1))
      {
        if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v6))
          break;
      }
      if (v3 == ++v4)
        goto LABEL_7;
    }
    v7 = 1;
  }
  CFRelease(v1);
  return v7;
}

void CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(const __CFString *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  int IsPortPresentInConnectedOutputPorts;
  const __CFNumber *v9;
  AudioObjectID v10;
  _BOOL4 ShouldBTPortBeTreatedAsInEar;
  const __CFString *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *ArrayFromPortID;
  __CFArray *Routable;
  __CFArray *Mutable;
  const __CFArray *A2DPPort;
  const void *v18;
  NSObject *v19;
  _QWORD valuePtr[18];
  CFRange v21;
  CFRange v22;

  valuePtr[16] = *MEMORY[0x1E0C80C00];
  v2 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  if (!v2)
    return;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
    goto LABEL_34;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
    IsPortPresentInConnectedOutputPorts = vaemIsPortPresentInConnectedOutputPorts((uint64_t)ValueAtIndex);
    v9 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
    valuePtr[0] = 0;
    CFNumberGetValue(v9, kCFNumberSInt64Type, valuePtr);
    v10 = valuePtr[0];
    ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr[0]);
    if (!IsPortPresentInConnectedOutputPorts || !ShouldBTPortBeTreatedAsInEar)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_11;
    }
    v12 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(v10);
    if (MXCFStringHasCaseInsensitivePrefix(v12, a1))
      break;
    if (v12)
      CFRelease(v12);
LABEL_11:
    if (v5 == ++v6)
      goto LABEL_34;
  }
  ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(v10);
  Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Routable && CFArrayGetCount(Routable) >= 1)
  {
    v21.length = CFArrayGetCount(Routable);
    v21.location = 0;
    CFArrayAppendArray(Mutable, Routable, v21);
  }
  if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
  {
    v22.length = CFArrayGetCount(ArrayFromPortID);
    v22.location = 0;
    CFArrayAppendArray(Mutable, ArrayFromPortID, v22);
  }
  A2DPPort = cmsmGetA2DPPort(Mutable);
  if (vaeGetBTPortOwnsSharedAudioConnection((uint64_t)A2DPPort))
  {
    v18 = (const void *)vaeCopyNameForPort((AudioObjectID)A2DPPort);
    if (dword_1EE2B3F38)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, (const void *)qword_1EE2B3CF0, 0);
    if (v18)
      CFRelease(v18);
  }
  else if (!vaeRequestOwnershipOnBTPort((uint64_t)A2DPPort))
  {
    vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, (const void *)qword_1EE2B3CF0, 0);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (Routable)
    CFRelease(Routable);
  if (ArrayFromPortID)
    CFRelease(ArrayFromPortID);
  if (v12)
    CFRelease(v12);
LABEL_34:
  CFRelease(v3);
}

const __CFArray *CMSMVAUtility_CopyWirelessPortsToEnableBluetoothSharing(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v7;
  const __CFArray *v8;
  AudioObjectID valuePtr;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count;
      for (i = 0; i != v3; ++i)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeIsPortBluetoothShareable(valuePtr))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7 = (const __CFArray *)vaeCopyBluetoothShareablePortsForPort(valuePtr);
          if (v7)
          {
            v8 = v7;
            if (CFArrayGetCount(v7) > 0)
              return v8;
            CFRelease(v8);
          }
        }
      }
    }
  }
  return 0;
}

const __CFArray *CMSMVAUtility_GetPortOfTypeInConnectedPortsList(int a1)
{
  const __CFArray *v2;
  const __CFArray *PortOfTypeInArray;

  v2 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(a1, v2);
  if (v2)
    CFRelease(v2);
  return PortOfTypeInArray;
}

const __CFArray *CMSMVAUtility_GetPortOfTypeInArray(int a1, CFArrayRef theArray)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFNumber *ValueAtIndex;
  const void *v9;
  AudioObjectID valuePtr;

  v2 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      while (1)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, v6);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeGetPortTypeFromPortID(valuePtr) == a1)
          break;
        if (v5 == ++v6)
          return 0;
      }
      v2 = (const __CFArray *)valuePtr;
      if (valuePtr)
      {
        v9 = (const void *)vaeCopyNameForPort(valuePtr);
        if (v9)
          CFRelease(v9);
      }
    }
  }
  return v2;
}

BOOL CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume()
{
  __CFArray *v0;
  const __CFArray *v1;
  const __CFNumber *ValueAtIndex;
  _BOOL8 DoesPortSupportSoftwareVolume;
  uint64_t valuePtr;

  v0 = CMSMUtility_CopyCurrentOutputPorts();
  if (!v0)
    return 0;
  v1 = v0;
  if (CFArrayGetCount(v0) < 1)
  {
    DoesPortSupportSoftwareVolume = 0;
  }
  else
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, 0);
    valuePtr = 0;
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    DoesPortSupportSoftwareVolume = vaeDoesPortSupportSoftwareVolume(valuePtr);
  }
  CFRelease(v1);
  return DoesPortSupportSoftwareVolume;
}

uint64_t CMSMVAUtility_SetCurrentPreferredVolume(float a1)
{
  return PVMSetCurrentPreferredVolume(0, 0, a1);
}

void CMSMVAUtility_SetVolumePreferenceForPort(uint64_t a1, const void *a2, uint64_t a3, float a4)
{
  void **v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t VolumeSequenceNumber;
  _QWORD v18[5];
  _BYTE v19[32];
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  unsigned int v27;

  v27 = 0;
  v8 = CMSMUtility_CopyCurrentRoutesInfo((int *)&v27);
  if (v27)
  {
    v9 = 0;
    while (CMSMUtility_GetCurrentOutputPortAtIndex(v9) != (_DWORD)a3)
    {
      if (++v9 >= (unint64_t)v27)
        goto LABEL_8;
    }
    v10 = vaeCopyFigOutputDeviceNameFromVADPort(a3);
    MXVW_GetCMSRouteInfoAt(v8, v9, (uint64_t)v25);
    v11 = v26;
    MXVW_GetCMSRouteInfoAt(v8, v9, (uint64_t)v23);
    v12 = v24;
    MXVW_GetCMSRouteInfoAt(v8, v9, (uint64_t)v21);
    v13 = v22;
    *(_QWORD *)&v14 = MXVW_GetCMSRouteInfoAt(v8, v9, (uint64_t)v19).n128_u64[0];
    v15 = v20;
    v16 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v14), "getUncustomizedCategory:", a1);
    VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
    v18[0] = v11;
    v18[1] = v10;
    v18[2] = v12;
    v18[3] = v13;
    v18[4] = v15;
    PVMSetVolumePreference(v16, a2, 0, (uint64_t)v18, VolumeSequenceNumber, 0, a4, 0.0, 0.0);
    if (v10)
      CFRelease(v10);
  }
LABEL_8:
  MXVW_ReleaseVectorCMSRouteInfo((uint64_t *)v8);
}

void CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes(const __CFString *a1, const void *a2)
{
  void **v4;
  unint64_t i;
  uint64_t CurrentOutputPortAtIndex;
  AudioObjectPropertyElement v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  float DeviceVolume;
  float v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  const void *v24;
  os_log_type_t type;
  unsigned int v26;
  char v27[32];
  uint64_t v28;
  char v29[16];
  uint64_t v30;
  char v31[24];
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  unsigned int v35;
  int v36;
  const char *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  const __CFString *v41;
  __int16 v42;
  const void *v43;
  _QWORD v44[19];

  v44[16] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v4 = CMSMUtility_CopyCurrentRoutesInfo((int *)&v35);
  if (v35)
  {
    for (i = 0; i < v35; ++i)
    {
      CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(i);
      v7 = CurrentOutputPortAtIndex;
      v8 = vaeCopyFigOutputDeviceNameFromVADPort(CurrentOutputPortAtIndex);
      MXVW_GetCMSRouteInfoAt(v4, i, (uint64_t)v33);
      v9 = v34;
      MXVW_GetCMSRouteInfoAt(v4, i, (uint64_t)v31);
      v10 = v32;
      MXVW_GetCMSRouteInfoAt(v4, i, (uint64_t)v29);
      v11 = v30;
      MXVW_GetCMSRouteInfoAt(v4, i, (uint64_t)v27);
      v44[0] = v9;
      v44[1] = v8;
      v44[2] = v10;
      v44[3] = v11;
      v44[4] = v28;
      v12 = PVMGetVolumePreference(a1, a2, (uint64_t)v44);
      if (dword_1EE2B3F38)
      {
        v26 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v14 = v26;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if (v15)
        {
          v36 = 136315906;
          v37 = "CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes";
          v38 = 2048;
          v39 = v12;
          v40 = 2114;
          v41 = a1;
          v42 = 2114;
          v43 = a2;
          LODWORD(v23) = 42;
          v22 = &v36;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v16 = -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v22, v23), "defaultVADID");
      MXVW_GetCMSRouteInfoAt(v4, i, (uint64_t)&v24);
      vaemSetDeviceVolumeIfNotSet(v16, v7, v24, 0, v12, 0.0, 0.0);
      if (v8)
        CFRelease(v8);
    }
  }
  DeviceVolume = vaemGetDeviceVolume(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
  if (dword_1EE2B3F38)
  {
    v18 = DeviceVolume;
    v26 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v20 = v26;
    if (os_log_type_enabled(v19, type))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if (v21)
    {
      v36 = 136315394;
      v37 = "CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes";
      v38 = 2048;
      v39 = v18;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXVW_ReleaseVectorCMSRouteInfo((uint64_t *)v4);
}

const __CFDictionary *CMSMVAUtility_GetUIDFromRouteDescription(const __CFDictionary *result)
{
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("RouteUID"));
  return result;
}

uint64_t CMSMVAUtility_IsAnyRouteAvailableForRouteConfiguration(uint64_t a1, NSDictionary *a2, uint64_t a3, const void *a4)
{
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  unsigned int PortTypeFromPortID;
  id v17;
  int v18;

  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a2);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a3);
  v9 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a4, 0);
  v10 = v9;
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (!a1)
      goto LABEL_15;
  }
  else
  {
    Count = 0;
    if (!a1)
      goto LABEL_15;
  }
  v12 = CFArrayGetCount((CFArrayRef)a1);
  if (v12 >= 1)
  {
    v13 = v12;
    v14 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex((CFArrayRef)a1, v14);
      if (Count >= 1)
        break;
LABEL_13:
      if (++v14 == v13)
        goto LABEL_14;
    }
    v15 = 0;
    while (1)
    {
      FigCFArrayGetInt64AtIndex();
      PortTypeFromPortID = vaeGetPortTypeFromPortID(0);
      v17 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
      v18 = FigCFEqual();
      if (v17)
        CFRelease(v17);
      if (v18)
        break;
      if (Count == ++v15)
        goto LABEL_13;
    }
    a1 = 1;
    if (v10)
      goto LABEL_16;
    return a1;
  }
LABEL_14:
  a1 = 0;
LABEL_15:
  if (v10)
LABEL_16:
    CFRelease(v10);
  return a1;
}

BOOL CMSMVAUtility_IsA2DPPortAvailableForEndpoint(_BOOL8 result, _DWORD *a2)
{
  const __CFArray *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFNumber *ValueAtIndex;
  uint64_t v10;
  const __CFString *v11;
  const void *v12;
  CFTypeRef cf;
  uint64_t valuePtr;

  if (result)
  {
    v3 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
    cf = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v5)
      v5(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
    if (v3 && (Count = CFArrayGetCount(v3), Count >= 1))
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v8);
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        v10 = valuePtr;
        v11 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
        if (vaeGetPortTypeFromPortID(v10) == 1885892674
          && MXCFStringHasCaseInsensitivePrefix(v11, (CFStringRef)cf))
        {
          v12 = CFArrayGetValueAtIndex(v3, v8);
          if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v12))
            break;
        }
        if (v11)
          CFRelease(v11);
        if (v7 == ++v8)
          goto LABEL_13;
      }
      if (v11)
        CFRelease(v11);
    }
    else
    {
LABEL_13:
      LODWORD(v10) = 0;
    }
    if (a2)
      *a2 = v10;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v3)
      CFRelease(v3);
    return (_DWORD)v10 != 0;
  }
  return result;
}

uint64_t CMSMVAUtility_IsPortAvailableForEndpoint(uint64_t a1, const void *a2)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFArray *v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v5(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
  if (a2)
    v6 = (const __CFArray *)CFRetain(a2);
  else
    v6 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  v8 = v6;
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    if (Count >= 1)
    {
      v10 = 0;
      do
      {
        FigCFArrayGetInt64AtIndex();
        if (vaeGetPortTypeFromPortID(0) == 1885433975)
          goto LABEL_30;
      }
      while (Count != ++v10);
    }
LABEL_23:
    v7 = 0;
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (Count < 1)
    goto LABEL_23;
  v11 = 0;
  while (1)
  {
    FigCFArrayGetInt64AtIndex();
    v12 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(0);
    if (MXCFStringHasCaseInsensitivePrefix(v12, (CFStringRef)cf))
      break;
    if (v12)
      CFRelease(v12);
    if (Count == ++v11)
      goto LABEL_23;
  }
  if (v12)
    CFRelease(v12);
LABEL_30:
  v7 = 1;
  if (v8)
LABEL_24:
    CFRelease(v8);
LABEL_25:
  if (cf)
    CFRelease(cf);
  return v7;
}

__CFArray *CMSMVAUtility_CreateArrayFromPortIDAndPartners(int a1)
{
  __CFArray *ArrayFromPortID;
  __CFArray *Routable;
  __CFArray *Mutable;
  CFRange v5;
  CFRange v6;

  ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(a1);
  Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Routable && CFArrayGetCount(Routable) >= 1)
  {
    v5.length = CFArrayGetCount(Routable);
    v5.location = 0;
    CFArrayAppendArray(Mutable, Routable, v5);
  }
  if (ArrayFromPortID)
  {
    if (CFArrayGetCount(ArrayFromPortID) >= 1)
    {
      v6.length = CFArrayGetCount(ArrayFromPortID);
      v6.location = 0;
      CFArrayAppendArray(Mutable, ArrayFromPortID, v6);
    }
    CFRelease(ArrayFromPortID);
  }
  if (Routable)
    CFRelease(Routable);
  return Mutable;
}

const __CFString *CMSMVAUtility_CopyDeviceIDFromBTAddress(const __CFString *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFNumber *ValueAtIndex;
  const __CFString *v8;
  uint64_t valuePtr;

  v2 = cmsmCopyWirelessPortsArrayForRouteConfiguration(0, 0, 0);
  if (!v2)
    return 0;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_8:
    v8 = 0;
  }
  else
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      v8 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      if (MXCFStringHasCaseInsensitivePrefix(v8, a1))
        break;
      if (v8)
        CFRelease(v8);
      if (v5 == ++v6)
        goto LABEL_8;
    }
  }
  CFRelease(v3);
  return v8;
}

uint64_t CMSMVAUtility_CreateMusicVADIfNeeded(const __CFArray *a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFNumber *ValueAtIndex;
  __CFArray *v6;
  NSObject *v7;
  CFArrayRef Copy;
  CFIndex Count;
  NSObject *v10;
  CFIndex v11;
  const __CFNumber *v12;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  __CFArray *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  NSObject *v19;
  os_log_type_t v21[4];
  os_log_type_t type[4];
  unsigned int valuePtr;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (vaemMusicVADExists())
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  valuePtr = 0;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
  if (vaeGetPortTypeFromPortID(valuePtr) == 1885433964)
  {
    v6 = CMSMVAUtility_CopyConnectedWirelessPorts();
    if (dword_1EE2B3F38)
    {
      *(_DWORD *)type = 0;
      v21[0] = OS_LOG_TYPE_DEFAULT;
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (!v6)
        goto LABEL_14;
      goto LABEL_12;
    }
  }
  else
  {
    if (a1)
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
    else
      Copy = CMSMVAUtility_CopyConnectedWirelessPorts();
    v6 = Copy;
  }
  if (!v6)
  {
LABEL_14:
    Count = 0;
    goto LABEL_15;
  }
LABEL_12:
  Count = CFArrayGetCount(v6);
LABEL_15:
  if (dword_1EE2B3F38)
  {
    *(_DWORD *)type = 0;
    v21[0] = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Count >= 1)
  {
    v11 = 0;
    while (1)
    {
      *(_DWORD *)type = 0;
      v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v11);
      CFNumberGetValue(v12, kCFNumberSInt32Type, type);
      if (vaeGetPortTypeFromPortID(*(unsigned int *)type) == 1885433975)
        break;
      if (Count == ++v11)
        goto LABEL_34;
    }
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
    v16 = CFNumberCreate(v13, kCFNumberSInt32Type, type);
    CFArrayAppendValue(v15, v16);
    if (v15)
    {
      CFDictionarySetValue(Mutable, CFSTR("port id array"), v15);
      CFRelease(v15);
    }
    if (v16)
      CFRelease(v16);
    *(_DWORD *)v21 = 1986884979;
    v17 = CFNumberCreate(v13, kCFNumberSInt32Type, v21);
    if (v17)
    {
      v18 = v17;
      CFDictionarySetValue(Mutable, CFSTR("VAD type 4cc"), v17);
      CFRelease(v18);
    }
    if (dword_1EE2B3F38)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCreateVADWithRouteConfigurationDictionary(Mutable, a2, 1, 1);
    if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
      CMSMAP_MakeAirPlayHandOffPortRoutable(0, a2);
    if (Mutable)
      CFRelease(Mutable);
  }
LABEL_34:
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t CMSMVAUtility_DestroyMusicVADIfNeeded(uint64_t a1)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (vaemMusicVADExists())
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"));
    if (v3)
    {
      v4 = v3;
      CFDictionarySetValue(Mutable, CFSTR("VAD type 4cc"), v3);
      CFRelease(v4);
    }
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 1);
    if (Mutable)
      CFRelease(Mutable);
  }
  return 0;
}

uint64_t CMSMVAUtility_CreatePerAppAirPlayVADWithHandOffPort(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const void *v4;
  const void *v5;
  __CFDictionary *v6;
  __CFArray *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t VADWithRouteConfigurationDictionary;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (vaemPerAppAirPlayVADExists())
  {
    v4 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
    if (v4)
    {
      v5 = v4;
      CFDictionarySetValue(Mutable, CFSTR("VAD type 4cc"), v4);
      CFRelease(v5);
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 0);
  }
  if (Mutable)
    CFRelease(Mutable);
  v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &dword_1EE2B3C18);
  CFArrayAppendValue(v7, v8);
  if (v7)
  {
    CFDictionarySetValue(v6, CFSTR("port id array"), v7);
    CFRelease(v7);
  }
  if (v8)
    CFRelease(v8);
  valuePtr = 1986095474;
  v9 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
  if (v9)
  {
    v10 = v9;
    CFDictionarySetValue(v6, CFSTR("VAD type 4cc"), v9);
    CFRelease(v10);
  }
  byte_1EE2B3C07 = 1;
  VADWithRouteConfigurationDictionary = vaemCreateVADWithRouteConfigurationDictionary(v6, a1, 0, 1);
  if (v6)
    CFRelease(v6);
  return VADWithRouteConfigurationDictionary;
}

uint64_t CMSMVAUtility_CreatePerAppAirPlayVADIfNeeded(CFArrayRef theArray, uint64_t a2, uint64_t a3)
{
  const __CFArray *Copy;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFNumber *ValueAtIndex;
  int PortTypeFromPortID;
  CFTypeRef v11;
  uint64_t VADWithRouteConfigurationDictionary;
  _BOOL4 v13;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  const void *v16;
  const void *v17;
  __CFDictionary *v18;
  __CFArray *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  int v24;
  AudioObjectID valuePtr;

  if (theArray)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
  else
    Copy = CMSMVAUtility_CopyConnectedWirelessPorts();
  v5 = Copy;
  if (!Copy)
    return 0;
  Count = CFArrayGetCount(Copy);
  if (!Count)
  {
    CFRelease(v5);
    return 0;
  }
  v7 = Count;
  if (Count < 1)
  {
LABEL_13:
    VADWithRouteConfigurationDictionary = 0;
  }
  else
  {
    v8 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v8);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      v11 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      if (PortTypeFromPortID == 1885433953)
      {
        if (FigEndpointUtility_EndpointPredicate_ContainsID())
          break;
      }
      if (v11)
        CFRelease(v11);
      if (v7 == ++v8)
        goto LABEL_13;
    }
    v13 = vaemPerAppAirPlayVADExists();
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v13)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v16 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
      if (v16)
      {
        v17 = v16;
        CFDictionarySetValue(Mutable, CFSTR("VAD type 4cc"), v16);
        CFRelease(v17);
      }
      vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a3, 0, 0);
      if (Mutable)
        CFRelease(Mutable);
    }
    v18 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v19 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
    v20 = CFNumberCreate(v14, kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(v19, v20);
    if (v19)
    {
      CFDictionarySetValue(v18, CFSTR("port id array"), v19);
      CFRelease(v19);
    }
    if (v20)
      CFRelease(v20);
    v24 = 1986095474;
    v21 = CFNumberCreate(v14, kCFNumberSInt32Type, &v24);
    if (v21)
    {
      v22 = v21;
      CFDictionarySetValue(v18, CFSTR("VAD type 4cc"), v21);
      CFRelease(v22);
    }
    byte_1EE2B3C07 = 0;
    VADWithRouteConfigurationDictionary = vaemCreateVADWithRouteConfigurationDictionary(v18, a3, 1, 1);
    if (v18)
      CFRelease(v18);
    if (v11)
      CFRelease(v11);
    CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
  }
  if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
    CMSMAP_MakeAirPlayHandOffPortRoutable(0, a3);
  CFRelease(v5);
  return VADWithRouteConfigurationDictionary;
}

uint64_t CMSMVAUtility_DestroyPerAppAirPlayVAD(uint64_t a1)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;

  if (vaemPerAppAirPlayVADExists())
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
    if (v3)
    {
      v4 = v3;
      CFDictionarySetValue(Mutable, CFSTR("VAD type 4cc"), v3);
      CFRelease(v4);
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 1);
    CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
    if (Mutable)
      CFRelease(Mutable);
  }
  return 0;
}

uint64_t CMSMVAUtility_SetBlurConfigurationOnVA(uint64_t a1)
{
  const void *Mutable;
  uint64_t v3;
  uint64_t v5;
  int v6;
  CFTypeRef cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = Mutable;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  v5 = *(_QWORD *)"dsavptuo";
  v6 = 0;
  if (!unk_1EE2B3BB0)
  {
    v3 = 0;
    if (!Mutable)
      return v3;
    goto LABEL_3;
  }
  v3 = unk_1EE2B3BB0(a1, &v5, 0, 0, 8, &cf);
  Mutable = cf;
  if (cf)
LABEL_3:
    CFRelease(Mutable);
  return v3;
}

void CMSMVAUtility_DisableBluetoothSharingSession()
{
  __CFArray *Mutable;
  const void *SInt64;
  const void *v2;
  CFTypeRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    CMSMUtility_GetCurrentOutputPortAtIndex(0);
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(Mutable, SInt64);
    if (SInt64)
      CFRelease(SInt64);
    CMSMUtility_GetCurrentOutputPortAtIndex(1);
    v2 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(Mutable, v2);
    if (v2)
      CFRelease(v2);
    v3 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemDeaggregatePorts((uint64_t)Mutable, (uint64_t)Mutable, 1, (uint64_t)v3);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t CMSMVAUtility_IsInputDeviceAvailableForSession(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, __CFString *, _QWORD, uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v2 = qword_1EE2B3BE0;
  v3 = objc_msgSend(a1, "audioCategory");
  v4 = objc_msgSend(a1, "audioMode");
  v5 = *(void (**)(uint64_t, __CFString *, _QWORD, uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
  if (v5)
    v5(v2, CFSTR("VAEM_InputDeviceIsAvailableForRouteConfiguration"), *MEMORY[0x1E0C9AE00], v3, v4, 0, cf);
  v6 = FigCFEqual();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v6;
}

uint64_t CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(int a1, uint64_t a2)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  _OWORD v7[9];
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = vaemShouldSetSharePlayMediaInfoInRouteConfiguration(a1, a2, 1);
  if ((_DWORD)result)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    memset(v7, 0, sizeof(v7));
    v8 = 256;
    v9 = a1;
    v10 = a2;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    return cmsmSetVADRouteConfiguration(v7, 0, 0);
  }
  else if (dword_1EE2B3F38)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t CMSMVAUtility_OverrideToPartnerPort()
{
  int v0;
  CFDictionaryRef v1;
  BOOL v2;
  uint64_t v3;
  const __CFNumber *Value;
  int valuePtr;
  uint64_t v7;
  int v8;
  CFDictionaryRef theDict;
  __int128 v10;
  CFDictionaryRef *p_theDict;
  uint64_t v12;

  v10 = 0u;
  theDict = 0;
  DWORD2(v10) = 0;
  p_theDict = &theDict;
  v12 = 8;
  v7 = *(_QWORD *)"pvovbolgisesbolg";
  v8 = 0;
  if (!unk_1EE2B3BB0)
    return 4294954310;
  v0 = unk_1EE2B3BB0(dword_1EE2B3C08, &v7, 0, 0, 32, &v10);
  v1 = theDict;
  if (v0)
    v2 = 1;
  else
    v2 = theDict == 0;
  if (v2)
  {
    v3 = 4294954310;
    if (!theDict)
      return v3;
    goto LABEL_14;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("route change reason"));
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (CMSMVAUtility_MapVADReasonToCMSReason(valuePtr) != 9)
    {
      vaemAQMERouteChanged(theDict, 0, 0);
      vaemVADRouteChangeListener(0, theDict, 0, 0, (const void *)qword_1EE2B3CF0, 0);
    }
  }
  v3 = 0;
  v1 = theDict;
  if (theDict)
LABEL_14:
    CFRelease(v1);
  return v3;
}

void CMSMVAUtility_RouteDefaultVADToCarPlayIfNecessary(CFArrayRef theArray)
{
  unsigned int PortOfTypeInArray;
  AudioObjectID v2;
  __CFArray *v3;

  PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(1886614639, theArray);
  if (PortOfTypeInArray)
  {
    v2 = PortOfTypeInArray;
    v3 = CMSMUtility_CopyMostImportantPlayingSession();
    if (cmsmRequestCarMainAudioForSession(v3))
      CMSMVAUtility_MakeConnectedPortRoutable(v2);

  }
}

uint64_t CMSMVAUtility_CancelAnyInProgressVolumeRamp(uint64_t a1, __int16 a2)
{
  uint64_t result;

  result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if ((_DWORD)result)
  {
    result = vaemIsVolumeRampInProgress(a1);
    if ((_DWORD)result)
      return vaemDeviceCancelVolumeRamp(a1, a2);
  }
  return result;
}

uint64_t FigRoutingSessionManagerRemoteCopyLongFormVideoManager(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;

  if (routingSessionManagerRemote_ensureClientEstablished_onceToken != -1)
    dispatch_once(&routingSessionManagerRemote_ensureClientEstablished_onceToken, &__block_literal_global_65);
  v4 = routingSessionManagerRemote_ensureClientEstablished_err;
  if (routingSessionManagerRemote_ensureClientEstablished_err)
    goto LABEL_16;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
    goto LABEL_19;
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v5)
    goto LABEL_19;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    v4 = 4294951905;
    goto LABEL_16;
  }
  v7 = uint64;
  v5 = FigXPCRemoteClientRetainCopiedObject();
  if ((_DWORD)v5)
    goto LABEL_19;
  FigRoutingSessionManagerGetClassID();
  v8 = CMDerivedObjectCreate();
  if (!(_DWORD)v8)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = v7;
    v10 = FigSimpleMutexCreate();
    DerivedStorage[2] = v10;
    if (v10
      && (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
          (DerivedStorage[3] = Mutable) != 0))
    {
      DerivedStorage[4] = 1;
      v8 = FigXPCRemoteClientAssociateObject();
      if (!(_DWORD)v8)
      {
        v4 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v8 = FigSignalErrorAt();
    }
  }
  v4 = v8;
LABEL_13:
  if (!(_DWORD)v4)
  {
    if (a2)
    {
      v4 = 0;
      *a2 = 0;
      goto LABEL_16;
    }
    v5 = FigSignalErrorAt();
LABEL_19:
    v4 = v5;
  }
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

void __routingSessionManagerRemote_ensureClientEstablished_block_invoke()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("RoutingSessionManager_ServerConnectionDied"));
  routingSessionManagerRemote_ensureClientEstablished_err = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

void routingSessionManagerRemote_DeadConnectionCallback(const void *a1)
{
  NSObject *global_queue;
  _QWORD v3[5];

  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  if (a1)
    CFRetain(a1);
  global_queue = dispatch_get_global_queue(0, 0);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerRemote_DeadConnectionCallback_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = a1;
  MXDispatchAsync((uint64_t)"routingSessionManagerRemote_DeadConnectionCallback", (uint64_t)"FigRoutingSessionManagerRemoteXPC.c", 587, 0, 0, global_queue, (uint64_t)v3);
}

uint64_t routingSessionManagerRemote_NotificationFilter()
{
  return 0;
}

uint64_t routingSessionManagerRemote_HandleClientMessage()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

void routingSessionManagerRemote_runOneCallback(const __CFDictionary *a1, uint64_t a2)
{
  void (*Value)(const void *, uint64_t);
  const void *v5;
  const void *v6;

  Value = (void (*)(const void *, uint64_t))CFDictionaryGetValue(a1, CFSTR("Callback"));
  v5 = CFDictionaryGetValue(a1, CFSTR("CallbackContext"));
  v6 = CFDictionaryGetValue(a1, CFSTR("Manager"));
  if (Value)
    Value(v5, a2);
  if (v6)
    CFRelease(v6);
}

void routingSessionManagerRemote_dequeueAndInvokeCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *UInt64;
  const void *Value;
  const __CFDictionary *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value)
    v7 = (const __CFDictionary *)CFRetain(Value);
  else
    v7 = 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  if (v7)
  {
    routingSessionManagerRemote_runOneCallback(v7, a3);
    CFRelease(v7);
  }
  if (UInt64)
    CFRelease(UInt64);
}

uint64_t routingSessionManagerRemote_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  FigSimpleMutexDestroy();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    CFRelease(v1);
  return FigXPCRelease();
}

uint64_t CMBaseObjectNotificationBarrier(uint64_t a1)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v2 >= 2uLL && (v3 = (uint64_t (*)(uint64_t))v2[8]) != 0)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t routingSessionManagerRemote_CopyCurrentSession(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v4 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  v4 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v4)
    *a2 = FigRoutingSessionCopyFromDictionary(0);
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_StartSessionForHighConfidenceDestination(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *UInt64;
  uint64_t ObjectID;
  uint64_t v13;
  const void *Value;
  CFTypeRef v15;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  v8 = Mutable;
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("Callback"), a2);
  if (a3)
    CFDictionarySetValue(v8, CFSTR("CallbackContext"), a3);
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  CFDictionarySetValue(v8, CFSTR("Manager"), v9);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  v10 = *(_QWORD *)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = v10 + 1;
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v17);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    v13 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v13)
      goto LABEL_18;
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value)
    v15 = CFRetain(Value);
  else
    v15 = 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  if (v15)
  {
    if (a1)
      CFRelease(a1);
    CFRelease(v15);
LABEL_18:
    if (!UInt64)
      goto LABEL_20;
    goto LABEL_19;
  }
  v13 = 0;
  if (UInt64)
LABEL_19:
    CFRelease(UInt64);
LABEL_20:
  if (v8)
    CFRelease(v8);
  FigXPCRelease();
  return v13;
}

uint64_t routingSessionManagerRemote_CopyLikelyDestinations(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
        ObjectID = FigXPCMessageCopyCFArray();
    }
  }
  v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingSessionManagerRemote_PrepareForPlayback(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *UInt64;
  uint64_t ObjectID;
  uint64_t v13;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  v8 = Mutable;
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("Callback"), a2);
  if (a3)
    CFDictionarySetValue(v8, CFSTR("CallbackContext"), a3);
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  CFDictionarySetValue(v8, CFSTR("Manager"), v9);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  v10 = *(_QWORD *)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = v10 + 1;
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v15);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    v13 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v13)
      goto LABEL_12;
  }
  routingSessionManagerRemote_dequeueAndInvokeCallback((uint64_t)a1, v10, v13);
LABEL_12:
  if (UInt64)
    CFRelease(UInt64);
  if (v8)
    CFRelease(v8);
  return FigXPCRelease();
}

uint64_t routingSessionManagerRemote_GetAirPlayVideoActive(uint64_t a1, BOOL *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_AirPlayVideoActive);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_GetAirPlayVideoPlaying(uint64_t a1, BOOL *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_AirPlayVideoPlaying);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_UpdateCurrentSessionFromLikelyDestinations(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *UInt64;
  uint64_t ObjectID;
  uint64_t v13;
  const void *Value;
  CFTypeRef v15;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  v8 = Mutable;
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("Callback"), a2);
  if (a3)
    CFDictionarySetValue(v8, CFSTR("CallbackContext"), a3);
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  CFDictionarySetValue(v8, CFSTR("Manager"), v9);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  v10 = *(_QWORD *)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = v10 + 1;
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v17);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    v13 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v13)
      goto LABEL_18;
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value)
    v15 = CFRetain(Value);
  else
    v15 = 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 16));
  if (v15)
  {
    if (a1)
      CFRelease(a1);
    CFRelease(v15);
LABEL_18:
    if (!UInt64)
      goto LABEL_20;
    goto LABEL_19;
  }
  v13 = 0;
  if (UInt64)
LABEL_19:
    CFRelease(UInt64);
LABEL_20:
  if (v8)
    CFRelease(v8);
  FigXPCRelease();
  return v13;
}

uint64_t routingSessionManagerRemote_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, BOOL *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_PrefersLikelyDestinations);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_StartSessionWithRouteDescriptors(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCFArray(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_StartSuppressingLikelyDestinations(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_StopSuppressingLikelyDestinations(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t FigRoutingContextStartServer()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v3 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v3)
    return 4294954514;
  v4 = v3(a2, &cf);
  v5 = cf;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!cf)
      return v6;
LABEL_5:
    CFRelease(v5);
    return v6;
  }
  if (!cf)
    return 0;
  v6 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  v5 = cf;
  if (cf)
    goto LABEL_5;
  return v6;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteDescriptorMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  __CFDictionary *v6;
  __CFDictionary *v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v4)
  {
    v5 = v4(a1, &cf);
    if ((_DWORD)v5)
    {
      v9 = v5;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 3))
      {
        v6 = frcXPCServer_copySanitizedRouteDescriptor((const __CFDictionary *)cf);
        v7 = v6;
        v8 = cf;
        cf = v6;
        if (v6)
          CFRetain(v6);
        if (v8)
          CFRelease(v8);
        if (v7)
          CFRelease(v7);
      }
      FigXPCMessageSetCFDictionary();
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRoutesMessage(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v5;
  uint64_t (*v6)(uint64_t, CFArrayRef *);
  uint64_t appended;
  CFIndex Count;
  CFIndex v9;
  uint64_t v10;
  CFArrayRef theArray;

  theArray = 0;
  v5 = xpc_array_create(0, 0);
  v6 = *(uint64_t (**)(uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v6)
  {
    v10 = 4294954514;
    goto LABEL_13;
  }
  appended = v6(a2, &theArray);
  if ((_DWORD)appended)
    goto LABEL_12;
  if (!theArray)
  {
    routes_logEndpoints(0);
    goto LABEL_11;
  }
  Count = CFArrayGetCount(theArray);
  routes_logEndpoints(theArray);
  if (Count < 1)
  {
LABEL_11:
    xpc_dictionary_set_value(a3, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList, v5);
    v10 = 0;
    goto LABEL_13;
  }
  v9 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v9);
    appended = FigEndpointXPCServerAppendNeighborEndpointToArray();
    if ((_DWORD)appended)
      break;
    if (Count == ++v9)
      goto LABEL_11;
  }
LABEL_12:
  v10 = appended;
LABEL_13:
  FigXPCRelease();
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteForRemoteControlMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v3 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v3)
    return 4294954514;
  v4 = v3(a2, &cf);
  v5 = cf;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!cf)
      return v6;
LABEL_5:
    CFRelease(v5);
    return v6;
  }
  if (!cf)
    return 0;
  v6 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  v5 = cf;
  if (cf)
    goto LABEL_5;
  return v6;
}

uint64_t FigRoutingContextXPCHandleCreateCommChannelMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef v5;

  v5 = 0;
  FigXPCMessageCopyCFDictionary();
  v2 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v2)
  {
    v3 = v2(a1, 0, &v5);
    if (!(_DWORD)v3)
      FigXPCMessageSetCFString();
  }
  else
  {
    v3 = 4294954514;
  }
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t FigRoutingContextXPCHandleCreateCommChannelForDeviceIDMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  const __CFDictionary *v7;
  const void *Value;
  __CFSet *v9;
  CFMutableSetRef Mutable;
  uint64_t v11;
  CFTypeRef v13;

  v13 = 0;
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFString();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v4)
  {
    v5 = v4(a1, 0, 0, &v13);
    if ((_DWORD)v5)
    {
      v11 = v5;
    }
    else if (a2)
    {
      v6 = v13;
      v7 = *(const __CFDictionary **)(a2 + 16);
      if (v7
        || (v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a2 + 16) = v7) != 0))
      {
        Value = CFDictionaryGetValue(v7, 0);
        if (Value)
        {
          v9 = (__CFSet *)CFRetain(Value);
          if (v9)
            goto LABEL_10;
        }
        Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
        if (Mutable)
        {
          v9 = Mutable;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), 0, Mutable);
LABEL_10:
          CFSetAddValue(v9, v6);
          CFRelease(v9);
          FigXPCMessageSetCFString();
          v11 = 0;
          goto LABEL_12;
        }
      }
      v11 = 4294955275;
    }
    else
    {
      v11 = 4294955276;
    }
  }
  else
  {
    v11 = 4294954514;
  }
LABEL_12:
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t FigRoutingContextXPCHandleSendDataMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *CompletionCallbackParametersFromMessageAndConnection;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *);
  uint64_t (*v8)(uint64_t, uint64_t, int, uint64_t);
  uint64_t v9;

  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5
    || (v5 = FigXPCMessageCopyCFData(), (_DWORD)v5)
    || (CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3),
        (v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120)) != 0)
    && (CompletionCallbackParametersFromMessageAndConnection ? (v8 = SendDataCompletionCallback) : (v8 = 0),
        v5 = v7(a2, 0, 0, v8, CompletionCallbackParametersFromMessageAndConnection),
        (_DWORD)v5 != -12782))
  {
    v9 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    v9 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v9;
}

uint64_t FigRoutingContextXPCHandleSendDataForDeviceIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *CompletionCallbackParametersFromMessageAndConnection;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *);
  uint64_t (*v8)(uint64_t, uint64_t, int, uint64_t);
  uint64_t v9;

  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5
    || (v5 = FigXPCMessageCopyCFData(), (_DWORD)v5)
    || (v5 = FigXPCMessageCopyCFString(), (_DWORD)v5)
    || (CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3),
        (v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160)) != 0)
    && (CompletionCallbackParametersFromMessageAndConnection ? (v8 = SendDataCompletionCallback) : (v8 = 0),
        v5 = v7(a2, 0, 0, 0, v8, CompletionCallbackParametersFromMessageAndConnection),
        (_DWORD)v5 != -12782))
  {
    v9 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    v9 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v9;
}

uint64_t FigRoutingContextXPCHandleCloseCommChannelMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t FigRoutingContextXPCHandleCloseCommChannelForDeviceIDMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  const __CFDictionary *v6;
  __CFSet *Value;
  const __CFSet *v8;

  v4 = FigXPCMessageCopyCFString();
  if ((_DWORD)v4)
    return v4;
  v4 = FigXPCMessageCopyCFString();
  if ((_DWORD)v4)
    return v4;
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (!v5)
    return 4294954514;
  v4 = v5(a1, 0, 0);
  if ((_DWORD)v4)
    return v4;
  if (!a2)
    return 4294955276;
  v6 = *(const __CFDictionary **)(a2 + 16);
  if (!v6)
    return 4294955276;
  Value = (__CFSet *)CFDictionaryGetValue(v6, 0);
  if (!Value)
    return 4294955272;
  v8 = Value;
  CFSetRemoveValue(Value, 0);
  if (!CFSetGetCount(v8))
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 16), 0);
  return 0;
}

uint64_t FigRoutingContextXPCHandleSendCommandMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *CompletionCallbackParametersFromMessageAndConnection;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *);
  uint64_t (*v8)(uint64_t, uint64_t, int, uint64_t);
  uint64_t v9;

  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5
    || (v5 = FigXPCMessageCopyCFDictionary(), (_DWORD)v5)
    || (CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3),
        (v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136)) != 0)
    && (CompletionCallbackParametersFromMessageAndConnection ? (v8 = SendCommandCompletionCallback) : (v8 = 0),
        v5 = v7(a2, 0, 0, v8, CompletionCallbackParametersFromMessageAndConnection),
        (_DWORD)v5 != -12782))
  {
    v9 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    v9 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v9;
}

uint64_t FigRoutingContextXPCHandleCopySelectedBufferedEndpointForTestingMessage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  FigXPCMessageCopyCFString();
  v3 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
  if (!v3)
    return 4294954514;
  v4 = v3(a2, 0, &cf);
  v5 = cf;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!cf)
      return v6;
LABEL_5:
    CFRelease(v5);
    return v6;
  }
  if (!cf)
    return 0;
  v6 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  v5 = cf;
  if (cf)
    goto LABEL_5;
  return v6;
}

uint64_t CloseCommChannelApplier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v3 = *a2;
  v4 = a2[1];
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 168);
  if (v6)
    return v6(v3, v4, a1);
  return result;
}

uint64_t FigRoutingContextServerNotificationFilter(uint64_t a1, int a2, int a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  uint64_t result;
  unint64_t Value;
  __CFDictionary *MutableCopy;

  result = 0;
  if (a1 && theDict)
  {
    if (*(_BYTE *)(a1 + 3))
      return 0;
    Value = (unint64_t)CFDictionaryGetValue(theDict, CFSTR("routeConfigUpdateReasonEndedFailed_DeviceID"));
    if (!(Value | (unint64_t)CFDictionaryGetValue(theDict, CFSTR("routeConfigUpdateReasonEndedFailed_CurrentRoutes"))))
    {
      return 0;
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
      CFDictionaryRemoveValue(MutableCopy, CFSTR("routeConfigUpdateReasonEndedFailed_DeviceID"));
      CFDictionaryRemoveValue(MutableCopy, CFSTR("routeConfigUpdateReasonEndedFailed_CurrentRoutes"));
      *a5 = MutableCopy;
      return 4;
    }
  }
  return result;
}

_QWORD *CreateCompletionCallbackParametersFromMessageAndConnection(void *a1)
{
  uint64_t uint64;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  uint64 = xpc_dictionary_get_uint64(a1, (const char *)kFigRoutingContextXPCMsgParam_CompletionID);
  if (!uint64)
    return 0;
  v3 = uint64;
  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x108004098BBCF0FuLL);
  v5 = v4;
  if (v4)
  {
    *v4 = v3;
    v4[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E0CA36A0]);
    v5[2] = FigXPCRetain();
  }
  else
  {
    FigSignalErrorAt();
  }
  return v5;
}

uint64_t SendDataCompletionCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, *(_QWORD *)a4);
    FigXPCMessageSetCFString();
    xpc_dictionary_set_int64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionStatus, a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a4 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a4);
  return FigXPCRelease();
}

void DestroyCompletionCallbackParameters(void *a1)
{
  if (a1)
  {
    FigXPCRelease();
    free(a1);
  }
}

uint64_t SendCommandCompletionCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, *(_QWORD *)a4);
    FigXPCMessageSetCFDictionary();
    xpc_dictionary_set_int64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionStatus, a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a4 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a4);
  return FigXPCRelease();
}

void std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3094948, MEMORY[0x1E0DE42D0]);
}

void sub_19375A208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *CMSM_IDS_Initialize()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/IDS.framework/IDS", 1);
  sIDSHandle = (uint64_t)result;
  if (result)
  {
    sIDSCopyIDForDevice = (uint64_t (*)(void))dlsym(result, "IDSCopyIDForDevice");
    result = objc_getClass("IDSService");
    sIDSServiceClass = (uint64_t)result;
  }
  return result;
}

uint64_t CMSM_IDSCopyIDForDevice()
{
  if (sIDSCopyIDForDevice)
    return sIDSCopyIDForDevice();
  else
    return 0;
}

uint64_t CMSM_GetIDSServiceClass()
{
  return sIDSServiceClass;
}

uint64_t FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (a2)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_block_invoke;
    v6[3] = &unk_1E309E758;
    v6[4] = &v7;
    v6[5] = a1;
    if (FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_onceToken != -1)
      dispatch_once(&FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_onceToken, v6);
    v3 = *((unsigned int *)v8 + 6);
    if (!(_DWORD)v3)
    {
      v4 = (CFTypeRef)FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager;
      if (FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager)
      {
        v4 = CFRetain((CFTypeRef)FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager);
        v3 = *((unsigned int *)v8 + 6);
      }
      else
      {
        v3 = 0;
      }
      *a2 = v4;
    }
  }
  else
  {
    v3 = FigSignalErrorAt();
    *((_DWORD *)v8 + 6) = v3;
  }
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t routingSessionManagerResilientRemote_startObservingRemoteManager()
{
  uint64_t v0;
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  v0 = 0;
  while (1)
  {
    result = FigNotificationCenterAddWeakListener();
    if ((_DWORD)result)
      break;
    v0 += 8;
    if (v0 == 32)
      return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void routingSessionManagerResilientRemote_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    _Block_release(*(const void **)DerivedStorage);
  if (*(_QWORD *)(DerivedStorage + 16))
    routingSessionManagerResilientRemote_stopObservingRemoteManager();
  if (*(_QWORD *)(DerivedStorage + 8))
    FigSimpleMutexDestroy();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
    dispatch_release(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
}

uint64_t CMBaseObjectNotificationBarrier_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v2 >= 2uLL && (v3 = (uint64_t (*)(uint64_t))v2[8]) != 0)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t routingSessionManagerResilientRemote_stopObservingRemoteManager()
{
  uint64_t i;

  CMNotificationCenterGetDefaultLocalCenter();
  for (i = 0; i != 32; i += 8)
    FigNotificationCenterRemoveWeakListener();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t routingSessionManagerResilientRemote_forwardNotificationFromRemoteManager()
{
  return CMNotificationCenterPostNotification();
}

void routingSessionManagerResilientRemote_serverConnectionDied(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD v8[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v7 = *(NSObject **)(DerivedStorage + 24);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __routingSessionManagerResilientRemote_serverConnectionDied_block_invoke;
  v8[3] = &__block_descriptor_tmp_5;
  v8[4] = DerivedStorage;
  v8[5] = a2;
  v8[6] = a4;
  MXDispatchAsync((uint64_t)"routingSessionManagerResilientRemote_serverConnectionDied", (uint64_t)"FigRoutingSessionManagerResilientRemote.c", 212, 0, 0, v7, (uint64_t)v8);
}

void __routingSessionManagerResilientRemote_serverConnectionDied_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  const void *v5;

  v2 = a1[4];
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 <= 4)
  {
    *(_DWORD *)(v2 + 32) = v3 + 1;
    if (!routingSessionManagerResilientRemote_replaceRemoteManager())
      *(_DWORD *)(a1[4] + 32) = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
}

uint64_t routingSessionManagerResilientRemote_replaceRemoteManager()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (*(uint64_t (**)(void))(*(_QWORD *)DerivedStorage + 16))();
  if (!(_DWORD)result)
  {
    CMBaseObjectGetDerivedStorage();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t routingSessionManagerResilientRemote_CopyCurrentSession(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_CopyCurrentSession_block_invoke;
  v3[3] = &__block_descriptor_tmp_7;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSessionForHighConfidenceDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_StartSessionForHighConfidenceDestination_block_invoke;
  v4[3] = &__block_descriptor_tmp_8;
  v4[4] = a2;
  v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_CopyLikelyDestinations(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_CopyLikelyDestinations_block_invoke;
  v3[3] = &__block_descriptor_tmp_9;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_PrepareForPlayback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_PrepareForPlayback_block_invoke;
  v4[3] = &__block_descriptor_tmp_10;
  v4[4] = a2;
  v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_GetAirPlayVideoActive(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_GetAirPlayVideoActive_block_invoke;
  v3[3] = &__block_descriptor_tmp_11;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_GetAirPlayVideoPlaying(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_GetAirPlayVideoPlaying_block_invoke;
  v3[3] = &__block_descriptor_tmp_12;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_UpdateCurrentSessionFromLikelyDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_UpdateCurrentSessionFromLikelyDestination_block_invoke;
  v4[3] = &__block_descriptor_tmp_13;
  v4[4] = a2;
  v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_GetPrefersLikelyDestinationsOverCurrentSession_block_invoke;
  v3[3] = &__block_descriptor_tmp_14;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSessionWithRouteDescriptors(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __routingSessionManagerResilientRemote_StartSessionWithRouteDescriptors_block_invoke;
  v3[3] = &__block_descriptor_tmp_15;
  v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSuppressingLikelyDestinations(uint64_t a1)
{
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)&__block_literal_global_17_0);
}

uint64_t routingSessionManagerResilientRemote_StopSuppressingLikelyDestinations(uint64_t a1)
{
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)&__block_literal_global_19);
}

uint64_t routingSessionManagerResilientRemote_withServerDeathRetry(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 8));
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 8));
  v6 = 0;
  v7 = 0;
  cf = v5;
  while (1)
  {
    v8 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf);
    v9 = v8;
    ++v7;
    if ((_DWORD)v8 == -15394 || (_DWORD)v8 == -16155)
      break;
LABEL_25:
    if ((_DWORD)v9 != -16155 && (_DWORD)v9 != -15394 || v7 >= 5)
    {
      v14 = v9;
      if (v6)
        goto LABEL_35;
      goto LABEL_36;
    }
  }
  v11 = cf;
  if (cf)
    CFRetain(cf);
  if (v6)
    CFRelease(v6);
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v12 = routingSessionManagerResilientRemote_replaceRemoteManager();
    v13 = (_DWORD)v12 == -15394;
    if ((_DWORD)v12 == -16155)
    {
      v13 = 1;
LABEL_20:
      ++v7;
      goto LABEL_21;
    }
    v14 = v12;
    if ((_DWORD)v12)
      break;
LABEL_21:
    if (v7 >= 5)
      v13 = 0;
    if (!v13)
    {
      v6 = v11;
      goto LABEL_25;
    }
  }
  if ((_DWORD)v12 == -15394)
    goto LABEL_20;
  v6 = v11;
  if (v11)
LABEL_35:
    CFRelease(v6);
LABEL_36:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t CMSMNP_GetNowPlayingAppIsInterrupted()
{
  int v0;
  int v1;
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
  if (v0 < 1)
    return 0;
  v1 = v0;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v1
          && (objc_msgSend(v7, "isActive") & 1) == 0
          && objc_msgSend(v7, "interruptingSession")
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v7))
        {
          v8 = 1;
          goto LABEL_15;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_15:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  return v8;
}

id CMSMNP_CopyNowPlayingAppSession()
{
  int v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
  v1 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v6)
          && objc_msgSend(v6, "isActive")
          && objc_msgSend(v6, "isPlaying")
          && objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue") == v0)
        {
          v7 = v6;
          goto LABEL_14;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_14:

  return v7;
}

uint64_t CMSMNP_NowPlayingAppIsPlayingDidChangeTimerDidFinish()
{
  int IsPlaying;

  if (qword_1EE2B3C80)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EE2B3C80);
    if (qword_1EE2B3C80)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B3C80);
      qword_1EE2B3C80 = 0;
    }
  }
  IsPlaying = CMSMNP_GetNowPlayingAppIsPlaying();
  return CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(IsPlaying);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppDisplayIDFromDisk()
{
  return CFPreferencesCopyValue(CFSTR("nowPlayingAppDisplayID"), CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppWasPlayingUponCarPlayDisconnectFromDisk()
{
  CFPropertyListRef v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = CFPreferencesCopyValue(CFSTR("nowPlayingAppWasPlayingUponCarPlayDisconnect"), CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

void CMSMNP_WriteNowPlayingAppWasPlayingUponCarPlayDisconnectToDisk(int a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v3;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a1)
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("nowPlayingAppWasPlayingUponCarPlayDisconnect"), *v3);
}

void CMSMNP_SaveCarPlayNowPlayingState()
{
  NSString *v0;
  int IsInterrupted;
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
  if (-[MXSessionManager starkMainAudioIsOwnedByiOSButBorrowedByCar](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "starkMainAudioIsOwnedByiOSButBorrowedByCar"))
  {
    IsInterrupted = CMSMNP_GetNowPlayingAppIsInterrupted();
  }
  else
  {
    IsInterrupted = CMSMNP_GetNowPlayingAppIsPlaying();
  }
  v2 = IsInterrupted;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMNP_WriteNowPlayingAppWasPlayingUponCarPlayDisconnectToDisk(v2);
  if (v2)
    CMSMNP_WriteNowPlayingAppDisplayIDUponCarPlayDisconnectToDisk(v0);
  byte_1EE2B3D39 = 1;
}

void CMSMNP_WriteNowPlayingAppDisplayIDUponCarPlayDisconnectToDisk(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXCFPreferencesSetAndSynchronizeUserPreference(CFSTR("nowPlayingAppDisplayIDUponCarPlayDisconnect"), a1);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppDisplayIDUponCarPlayDisconnectFromDisk()
{
  CFPropertyListRef v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = CFPreferencesCopyValue(CFSTR("nowPlayingAppDisplayIDUponCarPlayDisconnect"), CFSTR("com.apple.mediaexperience"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

uint64_t CMSMNP_GetNowPlayingAppShouldResumeForCarPlay()
{
  return byte_1EE2B3CB1;
}

uint64_t CMSMNP_SetNowPlayingAppShouldResumeForCarPlay(uint64_t result)
{
  byte_1EE2B3CB1 = result;
  return result;
}

void CMSMNP_ResumeNowPlayingAppOverCarPlay(CFTypeRef cf)
{
  NSObject *v2;
  _QWORD v3[5];

  if (cf)
    CFRetain(cf);
  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNP_ResumeNowPlayingAppOverCarPlay_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNP_ResumeNowPlayingAppOverCarPlay", (uint64_t)"CMSessionManager_NowPlaying.m", 473, 0, 0, v2, (uint64_t)v3);
}

uint64_t CMSMNP_IsNowPlayingAppPlayingToPort(int a1)
{
  id v2;
  void *v3;
  unsigned __int8 v4;
  CFIndex Count;
  CFIndex i;
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v9;
  NSObject *v10;
  CFArrayRef theArray;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = CMSMNP_CopyNowPlayingAppSession();
  if (!v2)
    return 0;
  v3 = v2;
  if ((objc_msgSend(v2, "isSharePlayMediaSession") & 1) != 0)
    return 0;
  theArray = 0;
  FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext(objc_msgSend(v3, "routingContextUUID"), &theArray);
  if (!theArray)
  {
    Count = 0;
    goto LABEL_13;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  for (i = 0; i != Count; ++i)
  {
    v13 = 0;
    CFArrayGetValueAtIndex(theArray, i);
    FigCFDictionaryGetInt32IfPresent();
    if (v13 == a1)
      v4 = 1;
  }
  if (v4)
    goto LABEL_22;
  v7 = 1;
LABEL_14:
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
  {
    v9 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v9);
      FigCFDictionaryGetInt32IfPresent();
      if (dword_1EE2B3F38)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v9;
    }
    while (Count != v9);
  }
  v4 = 0;
LABEL_22:
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }

  return v4;
}

id CMSMNP_GetBTPortForNowPlayingApp()
{
  id result;
  void *v1;
  const __CFDictionary *ValueAtIndex;
  CFArrayRef theArray;
  unsigned int v4;

  v4 = 0;
  result = CMSMNP_CopyNowPlayingAppSession();
  if (result)
  {
    v1 = result;
    theArray = 0;
    FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext(objc_msgSend(result, "routingContextUUID"), &theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
LABEL_7:
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
        goto LABEL_9;
      }
      CFArrayGetValueAtIndex(theArray, 0);
      FigCFDictionaryGetInt32IfPresent();
      if (theArray)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
        if (CFDictionaryGetValue(ValueAtIndex, CFSTR("IsBTRoute")) != (const void *)*MEMORY[0x1E0C9AE50])
          v4 = 0;
        goto LABEL_7;
      }
    }
LABEL_9:

    return (id)v4;
  }
  return result;
}

void CMSMDeviceState_Initialize(NSObject *a1)
{
  char CFPreferenceBooleanWithDefault;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;
  int v5;
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  void *v8;
  BOOL v9;
  NSObject *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  BOOL v16;
  char v17;
  int v18;
  NSObject *v19;
  MXSessionManager *v20;
  _BOOL8 v21;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  const __CFBoolean *Value;
  const __CFBoolean *v27;
  CFTypeID v28;
  Boolean v29;
  __CFNotificationCenter *v30;
  __CFNotificationCenter *v31;
  __CFNotificationCenter *v32;
  __CFNotificationCenter *v33;
  const __CFString *v34;
  const __CFString *v35;
  CFPropertyListRef v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  MXSessionManager *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t valuePtr;
  uint64_t state64[17];

  state64[16] = *MEMORY[0x1E0C80C00];
  CFPreferenceBooleanWithDefault = FigGetCFPreferenceBooleanWithDefault();
  if (dword_1EE2B3F38)
  {
    LODWORD(valuePtr) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  byte_1EE2B29C2 = CFPreferenceBooleanWithDefault;
  v4 = (const void *)MGCopyAnswer();
  v5 = FigCFEqual();
  if (v4)
    CFRelease(v4);
  byte_1EE2B29C8 = v5 != 0;
  v6 = (const __CFBoolean *)MGCopyAnswer();
  if (v6)
  {
    v7 = v6;
    byte_1EE2B29CB = CFBooleanGetValue(v6);
    CFRelease(v7);
  }
  else
  {
    byte_1EE2B29CB = 0;
  }
  byte_1EE2B29C9 = FigDebugIsInternalBuild();
  qword_1EE2B2A60 = FigReentrantMutexCreate();
  v8 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 4);
  sMKBLockStatusHandle = (uint64_t)v8;
  if (v8 && (sMKBGetLockStatus = (uint64_t (*)(_QWORD))dlsym(v8, "MKBGetDeviceLockState")) != 0)
  {
    if (a1)
    {
LABEL_11:
      v9 = notify_register_dispatch("com.apple.mobile.keybagd.lock_status", &dword_1EE2B29D0, a1, &__block_literal_global_76) == 0;
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(valuePtr) = 0;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (a1)
      goto LABEL_11;
  }
  v9 = 0;
LABEL_14:
  byte_1EE2B29D4 = v9;
  if (sMKBGetLockStatus)
    v11 = sMKBGetLockStatus(0) != 0;
  else
    v11 = 0;
  MEMORY[0x1940352BC](qword_1EE2B2A60);
  byte_1EE2B29CC = v11;
  MEMORY[0x1940352C8](qword_1EE2B2A60);
  if (a1)
    v12 = notify_register_dispatch("com.apple.springboard.hasBlankedScreen", &dword_1EE2B29E4, a1, &__block_literal_global_78) == 0;
  else
    v12 = 0;
  byte_1EE2B29E8 = v12;
  state64[0] = 0;
  if (notify_get_state(dword_1EE2B29E4, state64))
    v13 = 1;
  else
    v13 = state64[0] == 0;
  v14 = !v13;
  byte_1EE2B29E0 = v14;
  if (a1)
    v15 = notify_register_dispatch("com.apple.backboard.proximity.changed", &dword_1EE2B29FC, a1, &__block_literal_global_80_0) == 0;
  else
    v15 = 0;
  byte_1EE2B2A00 = v15;
  state64[0] = 0;
  if (notify_get_state(dword_1EE2B29FC, state64))
    v16 = 1;
  else
    v16 = state64[0] == 0;
  v17 = !v16;
  byte_1EE2B29F8 = v17;
  if (a1)
    notify_register_dispatch("com.apple.springboard.ringerstate", &dword_1EE2B2A04, a1, &__block_literal_global_81);
  if (cmsmdevicestate_RegisterForRingerIsOnNotification_onceToken != -1)
    dispatch_once(&cmsmdevicestate_RegisterForRingerIsOnNotification_onceToken, &__block_literal_global_82);
  if (!MX_FeatureFlags_IsMXSilentModeEnabled())
  {
    cmsmdevicestate_UpdateRingerIsOn();
    v20 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    v21 = byte_1EE2B2A01 == 0;
LABEL_54:
    -[MXSessionManager setSilentModeEnabled:](v20, "setSilentModeEnabled:", v21, v45, v46);
    goto LABEL_55;
  }
  if (byte_1EE2B29C5 || byte_1EE2B29C7 || byte_1EE2B29C8)
  {
    v20 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v45, v46);
    v21 = 0;
    goto LABEL_54;
  }
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_once != -1)
    dispatch_once(&CMSMDeviceState_DeviceHasHardwareRingerSwitch_once, &__block_literal_global_23_0);
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_hasPhysicalSwitch)
  {
    if (BackBoardServicesLibrary_sOnce_0 != -1)
      dispatch_once(&BackBoardServicesLibrary_sOnce_0, &__block_literal_global_42);
    if (BackBoardServicesLibrary_sLib_0
      && dlsym((void *)BackBoardServicesLibrary_sLib_0, "BKSHIDServicesGetRingerState"))
    {
      v18 = softLinkBKSHIDServicesGetRingerState[0]();
      if (dword_1EE2B3F38)
      {
        LODWORD(valuePtr) = 0;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      byte_1EE2B2A01 = v18 != 0;
      v44 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v45, v46);
      -[MXSessionManager setSilentModeEnabled:](v44, "setSilentModeEnabled:", byte_1EE2B2A01 == 0);
      -[MXSessionManager setSilentModeReason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSilentModeReason:", CFSTR("MXSessionManager startup HID ringer switch state"));
      -[MXSessionManager setSilentModeEnabledUntilTime:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setSilentModeEnabledUntilTime:", 0);
    }
    else
    {
      LODWORD(valuePtr) = 0;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_55:
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, &byte_1EE2B2A0C, (CFNotificationCallback)cmsmdevicestate_VibrateOnRingChangedNotificationCallback, CFSTR("com.apple.springboard.ring-vibrate.changed"), 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVibrateOnRing();
  v23 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v23, &byte_1EE2B2A0D, (CFNotificationCallback)cmsmdevicestate_VibrateOnSilentChangedNotificationCallback, CFSTR("com.apple.springboard.silent-vibrate.changed"), 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVibrateOnSilent();
  CelestialGetModelSpecificName();
  v24 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v24)
  {
    v25 = v24;
    Value = (const __CFBoolean *)CFDictionaryGetValue(v24, CFSTR("ChangesRingerVolume"));
    if (Value && (v27 = Value, v28 = CFGetTypeID(Value), v28 == CFBooleanGetTypeID()))
      v29 = CFBooleanGetValue(v27);
    else
      v29 = 1;
    byte_1EE2B2A0E = v29;
    CFRelease(v25);
  }
  else
  {
    byte_1EE2B2A0E = 1;
  }
  v30 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v30, &byte_1EE2B2A0E, (CFNotificationCallback)cmsmdevicestate_ButtonsCanChangeRingerVolumeChangedNotificationCallback, CFSTR("com.apple.preferences.sounds.buttons-can-change-ringer-volume.changed"), 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateButtonsCanChangeRingerVolume();
  cmsmdevicestate_UpdateVibrationDisabledFlag();
  v31 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v31, &byte_1EE2B2A0F, (CFNotificationCallback)cmsmdevicestate_VibrationDisabledPreferenceChangedNotificationCallback, CFSTR("VibrationDisabledPreferenceDidChange"), 0, (CFNotificationSuspensionBehavior)0);
  state64[0] = MEMORY[0x1E0C809B0];
  state64[1] = 3221225472;
  state64[2] = (uint64_t)__cmsmdevicestate_RegisterForDeviceIsChargingNotification_block_invoke;
  state64[3] = (uint64_t)&unk_1E3099900;
  state64[4] = (uint64_t)a1;
  if (cmsmdevicestate_RegisterForDeviceIsChargingNotification_onceToken != -1)
    dispatch_once(&cmsmdevicestate_RegisterForDeviceIsChargingNotification_onceToken, state64);
  v32 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v32, &byte_1EE2B2A20, (CFNotificationCallback)cmsmdevicestate_VoiceOverIsOnChangeCallback, CFSTR("com.apple.accessibility.voiceovertouch.status"), 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVoiceOverIsOn();
  if (byte_1EE2B29C7 | byte_1EE2B29C5)
  {
    v33 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v33, &qword_1EE2B2A38, (CFNotificationCallback)cmsmdevicestate_AirPlayPrefsChangedCallback, CFSTR("com.apple.airplay.prefsChanged"), 0, (CFNotificationSuspensionBehavior)0);
    v34 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v35 = (const __CFString *)*MEMORY[0x1E0C9B230];
    v36 = CFPreferencesCopyValue(CFSTR("tightSyncUUID"), CFSTR("com.apple.airplay"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    cmsmdevicestate_UpdateTightSyncUUID(v36);
    CFPreferencesSynchronize(CFSTR("com.apple.airplay"), v34, v35);
    byte_1EE2B2A30 = FigGetCFPreferenceNumberWithDefault() == 0;
    valuePtr = 0;
    v37 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("persistentGroupSize"), CFSTR("com.apple.airplay"), v34, v35);
    if (v37)
    {
      v38 = v37;
      v39 = CFGetTypeID(v37);
      if (v39 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v38, kCFNumberCFIndexType, &valuePtr);
        v40 = valuePtr;
      }
      else
      {
        v40 = 2 * (v36 != 0);
        valuePtr = v40;
      }
      qword_1EE2B2A40 = v40;
      CFRelease(v38);
    }
    else
    {
      valuePtr = 2 * (v36 != 0);
      qword_1EE2B2A40 = valuePtr;
    }
    if (dword_1EE2B3F38)
    {
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v36)
      CFRelease(v36);
  }
  if (MX_FeatureFlags_IsSeparatePlayerProcessEnabled())
  {
    v43 = MXGetSerialQueue();
    MXDispatchAsyncAndWait((uint64_t)"cmsmdevicestate_RegisterForDeviceThermalLevelNotification", (uint64_t)"CMSessionManager_DeviceState.m", 1587, 0, 0, v43, (uint64_t)&__block_literal_global_121);
  }
}

void cmsmdevicestate_UpdateRingerIsOn()
{
  BOOL v0;
  uint64_t state64;

  if (byte_1EE2B29C5)
    v0 = 0;
  else
    v0 = byte_1EE2B29C7 == 0;
  if (v0 && byte_1EE2B29C8 == 0)
  {
    state64 = 0;
    if (!notify_get_state(dword_1EE2B2A04, &state64))
      byte_1EE2B2A01 = state64 != 0;
  }
  else
  {
    byte_1EE2B2A01 = 1;
  }
}

uint64_t CMSMDeviceState_ItsAHomePod()
{
  return byte_1EE2B29C7;
}

uint64_t CMSMDeviceState_DeviceHasHardwareRingerSwitch()
{
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_once != -1)
    dispatch_once(&CMSMDeviceState_DeviceHasHardwareRingerSwitch_once, &__block_literal_global_23_0);
  return CMSMDeviceState_DeviceHasHardwareRingerSwitch_hasPhysicalSwitch;
}

uint64_t cmsmdevicestate_UpdateVibrationDisabledFlag()
{
  uint64_t result;

  CFPreferencesSynchronize(CFSTR("com.apple.Accessibility"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceNumberWithDefault();
  byte_1EE2B2A0F = (_DWORD)result != 0;
  return result;
}

uint64_t CMSMDeviceState_ItsAniPhone()
{
  return byte_1EE2B29C4;
}

uint64_t CMSMDeviceState_ItsAnAppleWatch()
{
  return byte_1EE2B29C6;
}

uint64_t CMSMDeviceState_IsAVirtualDevice()
{
  return byte_1EE2B29CA;
}

void CMSMDeviceState_UpdateDeviceConfiguration()
{
  if (CMSMDeviceState_UpdateDeviceConfiguration_once != -1)
    dispatch_once(&CMSMDeviceState_UpdateDeviceConfiguration_once, &__block_literal_global_67);
}

uint64_t CMSMDeviceState_AddQueueToWatchDogMonitoring()
{
  uint64_t result;

  if (HIBYTE(gDeviceState))
    return wd_endpoint_add_queue();
  return result;
}

uint64_t CMSMDeviceState_SupportsBeacon()
{
  if (CMSMDeviceState_SupportsBeacon_once != -1)
    dispatch_once(&CMSMDeviceState_SupportsBeacon_once, &__block_literal_global_13);
  return CMSMDeviceState_SupportsBeacon_supportsBeaconMode;
}

void CMSMDeviceState_InterruptAllActiveSessionsAndSystemSounds()
{
  void **v0;
  void **v1;

  CMSystemSoundMgr_DeactivateAllSystemSounds();
  v0 = (void **)CMSMDeviceState_CopyHardwareSafetySession();
  if (v0)
  {
    v1 = v0;
    MXCoreSessionBeginInterruption_WithSecTaskAndFlags(v0[2], 0, 0, 1);
    CFRelease(v1);
  }
}

uint64_t CMSMDeviceState_ItsAnInternalBuild()
{
  return byte_1EE2B29C9;
}

void *CMSMDeviceState_RegisterForScreenIsBlankedNotification(void *result)
{
  off_1EE2B29F0 = result;
  return result;
}

uint64_t CMSMDeviceState_ScreenIsBlankedByProximitySensor()
{
  BOOL v1;
  uint64_t state64;

  if (byte_1EE2B2A00)
    return byte_1EE2B29F8;
  state64 = 0;
  if (notify_get_state(dword_1EE2B29FC, &state64))
    v1 = 1;
  else
    v1 = state64 == 0;
  return !v1;
}

void CMSMDeviceState_UpdateSmartCoverState(int a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;

  MEMORY[0x1940352BC](qword_1EE2B2A60);
  byte_1EE2B29D5 = a1;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352C8](qword_1EE2B2A60);
  if (a1)
  {
    v3 = MXGetSerialQueue();
    qword_1EE2B29D8 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v3, 2.0, (uint64_t)&__block_literal_global_30_0, 0, 0);
  }
  else if (qword_1EE2B29D8)
  {
    MXDispatchUtilityCancelTimer((dispatch_source_t *)&qword_1EE2B29D8);
  }
}

uint64_t CMSMDeviceState_IsSecureMicrophoneSupported()
{
  return MGGetBoolAnswer();
}

uint64_t CMSMDeviceState_UpdateRingerStateForSilentMode(int a1)
{
  MXSessionManager *v1;

  byte_1EE2B2A01 = a1 == 0;
  v1 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  return -[MXSessionManager ringerIsOnChanged:](v1, "ringerIsOnChanged:", byte_1EE2B2A01 != 0);
}

uint64_t CMSMDeviceState_PostRingerStateDarwinNotification(int a1)
{
  uint64_t v1;

  v1 = a1 == 0;
  notify_set_state(dword_1EE2B2A04, a1 != 0);
  notify_post("com.apple.springboard.ringerstate");
  notify_set_state(dword_1EE2B2A08, v1);
  return notify_post("com.apple.mediaexperience.silentmode");
}

uint64_t cmsmdevicestate_UpdateVibrateOnRing()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CFPreferencesSynchronize(CFSTR("com.apple.springboard"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceNumberWithDefault();
  byte_1EE2B2A0C = (_DWORD)result != 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t cmsmdevicestate_UpdateVibrateOnSilent()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CFPreferencesSynchronize(CFSTR("com.apple.springboard"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceNumberWithDefault();
  byte_1EE2B2A0D = (_DWORD)result != 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void *CMSMDeviceState_RegisterForVoiceOverIsOnChangedNotification(void *result)
{
  off_1EE2B2A28 = result;
  return result;
}

void *CMSMDeviceState_RegisterForTightSyncUUIDChangeNotification(void *result)
{
  if (byte_1EE2B29C7)
    off_1EE2B2A48 = result;
  return result;
}

uint64_t CMSMDeviceState_IsAirplaneModeEnabled()
{
  uint64_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = MGGetBoolAnswer();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

uint64_t CMSMDeviceState_DeviceHasExclaveCapability()
{
  if (CMSMDeviceState_DeviceHasExclaveCapability_once != -1)
    dispatch_once(&CMSMDeviceState_DeviceHasExclaveCapability_once, &__block_literal_global_39_0);
  return CMSMDeviceState_DeviceHasExclaveCapability_deviceHasExclaveCapability;
}

uint64_t initBKSHIDServicesGetRingerState()
{
  if (BackBoardServicesLibrary_sOnce_0 != -1)
    dispatch_once(&BackBoardServicesLibrary_sOnce_0, &__block_literal_global_42);
  softLinkBKSHIDServicesGetRingerState[0] = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib_0, "BKSHIDServicesGetRingerState");
  return softLinkBKSHIDServicesGetRingerState[0]();
}

uint64_t cmsmdevicestate_UpdateVoiceOverIsOn()
{
  uint64_t v0;
  uint64_t result;

  v0 = byte_1EE2B2A20;
  CFPreferencesSynchronize(CFSTR("com.apple.Accessibility"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceNumberWithDefault();
  byte_1EE2B2A20 = (_DWORD)result != 0;
  if (off_1EE2B2A28)
    return ((uint64_t (*)(uint64_t))off_1EE2B2A28)(v0);
  return result;
}

void cmsmdevicestate_AirPlayPrefsChangedCallback()
{
  const __CFString *v0;
  const __CFString *v1;
  CFPropertyListRef v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL8 v4;
  NSObject *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD valuePtr[23];

  valuePtr[21] = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v1 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v2 = CFPreferencesCopyValue(CFSTR("tightSyncUUID"), CFSTR("com.apple.airplay"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!FigCFEqual())
  {
    cmsmdevicestate_UpdateTightSyncUUID(v2);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1EE2B2A48)
      off_1EE2B2A48(qword_1EE2B2A38);
  }
  CFPreferencesSynchronize(CFSTR("com.apple.airplay"), v0, v1);
  v4 = FigGetCFPreferenceNumberWithDefault() == 0;
  if (byte_1EE2B2A30 != v4)
  {
    byte_1EE2B2A30 = v4;
    if (dword_1EE2B3F38)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1EE2B2A50)
      off_1EE2B2A50(byte_1EE2B2A30 == 0, v4);
  }
  valuePtr[0] = 0;
  v6 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("persistentGroupSize"), CFSTR("com.apple.airplay"), v0, v1);
  v7 = v6;
  if (v6 && (v8 = CFGetTypeID(v6), v8 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(v7, kCFNumberCFIndexType, valuePtr);
    v9 = valuePtr[0];
  }
  else
  {
    v9 = 2 * (v2 != 0);
    valuePtr[0] = v9;
  }
  v10 = qword_1EE2B2A40;
  if (v9 != qword_1EE2B2A40)
  {
    qword_1EE2B2A40 = v9;
    if (dword_1EE2B3F38)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1EE2B2A58)
      off_1EE2B2A58(v10, valuePtr[0]);
  }
  if (v2)
    CFRelease(v2);
  if (v7)
    CFRelease(v7);
}

void cmsmdevicestate_UpdateTightSyncUUID(const void *a1)
{
  const void *v1;

  v1 = (const void *)qword_1EE2B2A38;
  qword_1EE2B2A38 = (uint64_t)a1;
  if (a1)
    CFRetain(a1);
  if (v1)
    CFRelease(v1);
}

uint64_t cmsmdevicestate_UpdateButtonsCanChangeRingerVolume()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CFPreferencesSynchronize(CFSTR("com.apple.preferences.sounds"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceNumberWithDefault();
  byte_1EE2B2A0E = (_DWORD)result != 0;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void MXBluetoothServices_RegisterForAudioRoutingChanged()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  if (!notify_register_dispatch("com.apple.BluetoothServices.AudioRoutingChanged", &MXBluetoothServices_RegisterForAudioRoutingChanged_notifyToken, v0, &__block_literal_global_68))mxBluetoothServices_handleAudioRoutingChanged();
}

void mxBluetoothServices_handleAudioRoutingChanged()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  __CFArray *Mutable;
  CFIndex v6;
  char v7;
  const __CFArray *v8;
  CFNumberRef v9;
  CFTypeRef v10;
  const void *v11;
  int IsPortBTManaged;
  __CFArray *v13;
  _BOOL4 v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *theArray;
  int v18;
  AudioObjectID valuePtr[32];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v0 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  v1 = v0;
  if (v0)
    Count = CFArrayGetCount(v0);
  else
    Count = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  theArray = CFArrayCreateMutable(v3, 0, v4);
  if (Count < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      valuePtr[0] = 0;
      v8 = v1;
      valuePtr[0] = CMSMVAUtility_GetPortAtIndex(v1, v6);
      v9 = CFNumberCreate(v3, kCFNumberSInt32Type, valuePtr);
      v10 = vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
      v11 = (const void *)vaeCopyNameForPort(valuePtr[0]);
      LOBYTE(v18) = 0;
      mxBluetoothServices_readCachedPort((uint64_t)v11, v10, (BOOL *)&v18);
      IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(valuePtr[0], 0);
      v13 = Mutable;
      if (!IsPortBTManaged)
        Mutable = theArray;
      if ((_BYTE)v18)
        v14 = IsPortBTManaged != 0;
      else
        v14 = 1;
      if (!v14)
        v7 = 1;
      mxBluetoothServices_addCachedPort((uint64_t)v11, v10, IsPortBTManaged != 0);
      CFArrayAppendValue(Mutable, v9);
      if (v9)
        CFRelease(v9);
      if (v11)
        CFRelease(v11);
      v1 = v8;
      Mutable = v13;
      if (v10)
        CFRelease(v10);
      ++v6;
    }
    while (Count != v6);
  }
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemUpdateSharedAudioRouteState(Mutable, theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) && v7 != 0)
    {
      mxBluetoothServices_routeToBTDeviceIfNeeded(theArray);
LABEL_41:
      FigPredictedRouting_UpdatePredictedRoute(2);
      goto LABEL_42;
    }
  }
  if (Mutable && CFArrayGetCount(Mutable))
  {
    if (theArray && CFArrayGetCount(theArray))
      goto LABEL_41;
    mxBluetoothServices_routeToBTDeviceIfNeeded(0);
  }
  FigPredictedRouting_UpdatePredictedRoute(2);
  if (!theArray)
  {
    if (!Mutable)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_42:
  CFRelease(theArray);
  if (Mutable)
LABEL_37:
    CFRelease(Mutable);
LABEL_38:
  if (v1)
    CFRelease(v1);
}

uint64_t MXBluetoothServices_RegisterForPreemptivePortChanged()
{
  uint64_t result;
  NSObject *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if ((_DWORD)result)
  {
    v1 = MXGetSerialQueue();
    result = notify_register_dispatch("com.apple.BluetoothServices.PreemptivePortChanged", &MXBluetoothServices_RegisterForPreemptivePortChanged_notifyToken, v1, &__block_literal_global_3_3);
    if ((_DWORD)result)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t MXBluetoothServices_RegisterForPreemptivePortDisconnected()
{
  uint64_t result;
  NSObject *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if ((_DWORD)result)
  {
    v1 = MXGetSerialQueue();
    result = notify_register_dispatch("com.apple.BluetoothServices.PreemptivePortDisconnected", (int *)&MXBluetoothServices_RegisterForPreemptivePortDisconnected_notifyToken, v1, &__block_literal_global_5_1);
    if ((_DWORD)result)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(AudioObjectID a1, _BYTE *a2, _BYTE *a3, int a4, int a5)
{
  const void *v10;
  const __CFString *v11;
  id v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v15[9];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  CFStringRef v29[23];

  v29[22] = *(CFStringRef *)MEMORY[0x1E0C80C00];
  if (mxBluetoothServices_isBluetoothServicesLoaded())
  {
    v10 = (const void *)vaeCopyNameForPort(a1);
    v11 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
    v29[0] = 0;
    v28 = 0;
    v12 = mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(&v28);
    CMSMUtility_CreateTokensFromDeviceUID(v11, v29, 0);
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    v20 = 0;
    v21 = &v20;
    v22 = 0x2020000000;
    v23 = 0;
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 1;
    if (a4)
      mxBluetoothServices_readCachedPort((uint64_t)v10, v11, &v27);
    if (a5)
    {
      if (MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled())
        v13 = 32;
      else
        v13 = 1;
    }
    else
    {
      v13 = 1;
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort_block_invoke;
    v15[3] = &unk_1E309E980;
    v15[4] = &v24;
    v15[5] = &v20;
    v15[6] = &v16;
    v15[7] = v10;
    v15[8] = v11;
    mxBluetoothServices_SendAudioRoutingRequest((uint64_t)v29[0], (uint64_t)v12, v28, v13, (uint64_t)v15);
    if (a3)
      *a3 = *((_BYTE *)v25 + 24);
    if (a2)
      *a2 = *((_BYTE *)v21 + 24);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*((_BYTE *)v17 + 24))
      mxBluetoothServices_addCachedPort((uint64_t)v10, v11, *((unsigned __int8 *)v25 + 24));

    if (v11)
      CFRelease(v11);
    if (v10)
      CFRelease(v10);
    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v24, 8);
  }
}

void sub_19375FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t mxBluetoothServices_isBluetoothServicesLoaded()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (mxBluetoothServices_loadFramework_onceToken != -1)
    dispatch_once(&mxBluetoothServices_loadFramework_onceToken, &__block_literal_global_15_0);
  if ((sBluetoothServicesLoaded & 1) != 0)
    return 1;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return sBluetoothServicesLoaded;
}

id mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(_DWORD *a1)
{
  id v2;
  void *v3;
  int LocalSessionPriority;
  id v5;
  int v6;

  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
    v2 = -[MXSessionManager copyHighestPriorityActiveSession:deviceIdentifier:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyHighestPriorityActiveSession:deviceIdentifier:", 0x1E30A4C28, 0);
  else
    v2 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
  v3 = v2;
  LocalSessionPriority = CMSM_GetLocalSessionPriority(v2, 1);
  if (LocalSessionPriority == 100)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v6 = LocalSessionPriority;
    v5 = (id)objc_msgSend(v3, "displayID");
  }

  if (a1)
    *a1 = v6;
  return v5;
}

uint64_t mxBluetoothServices_readCachedPort(uint64_t a1, const void *a2, BOOL *a3)
{
  uint64_t result;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = mxBluetoothServices_isBluetoothServicesLoaded();
  if ((_DWORD)result)
  {
    objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "lock");
    if (gBluetoothPortsToBTManagedMapping)
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, a2);
      if (Value)
        *a3 = Value == (const void *)*MEMORY[0x1E0C9AE50];
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock", v8, v9);
  }
  return result;
}

void mxBluetoothServices_SendAudioRoutingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = objc_alloc_init((Class)BTAudioRoutingRequestClass);
  objc_msgSend(v10, "setDeviceAddress:", a1);
  objc_msgSend(v10, "setAppBundleID:", a2);
  objc_msgSend(v10, "setAudioScore:", a3);
  objc_msgSend(v10, "setFlags:", a4);
  if (mxBluetoothServices_getRoutingRequestQueue_once != -1)
    dispatch_once(&mxBluetoothServices_getRoutingRequestQueue_once, &__block_literal_global_20);
  objc_msgSend(v10, "setDispatchQueue:", mxBluetoothServices_getRoutingRequestQueue_routingRequestQueue);
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = (void *)objc_msgSend(v10, "activateSync", v15, v18);
  if (dword_1EE2B3F38)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(v12, "error", v16, v19))
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v12);
  }
  objc_msgSend(v10, "invalidate", v17, v20);

}

uint64_t mxBluetoothServices_addCachedPort(uint64_t a1, const void *a2, int a3)
{
  uint64_t result;
  __CFDictionary *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = mxBluetoothServices_isBluetoothServicesLoaded();
  if ((_DWORD)result)
  {
    objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "lock");
    v6 = (__CFDictionary *)gBluetoothPortsToBTManagedMapping;
    if (gBluetoothPortsToBTManagedMapping)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v6 = (__CFDictionary *)gBluetoothPortsToBTManagedMapping;
      }
      v8 = (const void **)MEMORY[0x1E0C9AE50];
      if (!a3)
        v8 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v6, a2, *v8);
    }
    return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock", v9, v10);
  }
  return result;
}

uint64_t MXBluetoothServices_CopyPreferredDeviceAddress(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4;

  if (a3)
    v4 = 2;
  else
    v4 = 1;
  return mxBluetoothServices_CopyPreferredDeviceAddress(a1, a2, v4, a4, 0);
}

uint64_t mxBluetoothServices_CopyPreferredDeviceAddress(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD v12[7];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (!mxBluetoothServices_isBluetoothServicesLoaded())
    return 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __mxBluetoothServices_CopyPreferredDeviceAddress_block_invoke;
  v12[3] = &unk_1E309E9D0;
  v14 = a4;
  v12[5] = &v15;
  v12[6] = a5;
  v13 = a1;
  v12[4] = &v19;
  mxBluetoothServices_SendAudioRoutingRequest(0, a2, a1, a3, (uint64_t)v12);
  if (*((_BYTE *)v16 + 24))
    FigPredictedRouting_UpdatePredictedRoute(10);
  v10 = v20[3];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v10;
}

void sub_193760EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXBluetoothServices_CopyPreemptivePortInfo(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return mxBluetoothServices_CopyPreferredDeviceAddress(a1, a2, 16, a3, a4);
}

uint64_t MXBluetoothServices_RemoveDisconnectedDeviceIDs(const __CFArray *a1)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v4;
  unint64_t v5;
  const void **v6;
  size_t v7;
  const __CFArray *v8;
  CFIndex v9;
  __int128 v10;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[2];
  __int128 v19;
  os_log_type_t v20;
  unsigned int v21;
  int v22;
  const char *v23;
  __int16 v24;
  const void *v25;
  uint64_t v26;
  CFRange v27;

  v26 = *MEMORY[0x1E0C80C00];
  result = mxBluetoothServices_isBluetoothServicesLoaded();
  if (!(_DWORD)result)
    return result;
  objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "lock");
  Count = CFDictionaryGetCount((CFDictionaryRef)gBluetoothPortsToBTManagedMapping);
  if (Count < 1)
    return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock");
  v4 = Count;
  v18[1] = v18;
  MEMORY[0x1E0C80A78]();
  v6 = (const void **)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v5 >= 0x200)
    v7 = 512;
  else
    v7 = v5;
  bzero((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, v6, 0);
  v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v4, MEMORY[0x1E0C9B378]);
  v9 = 0;
  *(_QWORD *)&v10 = 136315395;
  v19 = v10;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
    if (CFArrayGetCount(a1))
    {
      v27.length = CFArrayGetCount(a1);
      v27.location = 0;
      if (CFArrayContainsValue(a1, v27, ValueAtIndex))
        goto LABEL_23;
      if (dword_1EE2B3F38)
      {
        v21 = 0;
        v20 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v13 = v21;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v20))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if (v14)
          goto LABEL_20;
        goto LABEL_21;
      }
    }
    else if (dword_1EE2B3F38)
    {
      v21 = 0;
      v20 = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v21;
      if (os_log_type_enabled(v15, v20))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
LABEL_20:
        v22 = v19;
        v23 = "MXBluetoothServices_RemoveDisconnectedDeviceIDs";
        v24 = 2113;
        v25 = ValueAtIndex;
        _os_log_send_and_compose_impl();
      }
LABEL_21:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gBluetoothPortsToBTManagedMapping, ValueAtIndex);
    FigPredictedRouting_StopTimer();
LABEL_23:
    ++v9;
  }
  while (v4 != v9);
  if (v8)
    CFRelease(v8);
  return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock");
}

void mxBluetoothServices_routeToBTDeviceIfNeeded(const __CFArray *a1)
{
  _BOOL4 v2;
  int IsBluetoothSharingSessionEnabled;
  int IsTimerActive;
  const __CFArray *A2DPPort;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v8;
  __CFString *v9;
  NSObject *v10;
  NSObject *v11;
  CFTypeRef v12;
  __CFArray *ArrayFromPortIDAndPartners;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn())
  {
    v2 = 1;
  }
  else if (CMSMDeviceState_RingerIsOn(1))
  {
    v2 = 0;
  }
  else
  {
    v2 = CMSMUtility_GetCurrentOutputPortAtIndex(0) == 0;
  }
  IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  IsTimerActive = FigPredictedRouting_IsTimerActive();
  if (!v2 || IsBluetoothSharingSessionEnabled || IsTimerActive)
  {
    if (!dword_1EE2B3F38)
      return;
    goto LABEL_20;
  }
  if (a1)
  {
    A2DPPort = cmsmGetA2DPPort(a1);
    if (!(_DWORD)A2DPPort)
      return;
    v6 = (uint64_t)A2DPPort;
    if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar((AudioObjectID)A2DPPort))
    {
      if (vaemShouldRequestOwnershipForSharedAudioRoute())
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!vaeRequestOwnershipOnBTPort(v6))
        {
          v12 = CMSMUtility_CopySystemAudioRoutingContextUUID();
          ArrayFromPortIDAndPartners = CMSMVAUtility_CreateArrayFromPortIDAndPartners(v6);
          vaemMakeArrayOfPortsRoutable(ArrayFromPortIDAndPartners, 1, 0, v12, 0);
          if (v12)
            CFRelease(v12);
          if (ArrayFromPortIDAndPartners)
            CFRelease(ArrayFromPortIDAndPartners);
        }
      }
      return;
    }
    if (!dword_1EE2B3F38)
      return;
LABEL_20:
    v14 = 0;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  v14 = 0;
  v8 = mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(&v14);
  v9 = (__CFString *)mxBluetoothServices_CopyPreferredDeviceAddress(v14, (uint64_t)v8, 1, 0, 0);
  if (dword_1EE2B3F38)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(v9);

}

id __mxBluetoothServices_loadFramework_block_invoke()
{
  id result;

  result = dlopen("/System/Library/PrivateFrameworks/BluetoothServices.framework/BluetoothServices", 4);
  if (result)
  {
    sBluetoothServicesLoaded = 1;
    BTAudioRoutingRequestClass = (uint64_t)objc_getClass("BTAudioRoutingRequest");
    gBluetoothPortsToBTManagedMapping = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    result = objc_alloc_init(MEMORY[0x1E0CB3740]);
    gBluetoothPortsToBTManagedMappingLock = (uint64_t)result;
  }
  return result;
}

dispatch_queue_t __mxBluetoothServices_getRoutingRequestQueue_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  result = dispatch_queue_create("com.apple.mediaexperience.btroutingrequestqueue", v0);
  mxBluetoothServices_getRoutingRequestQueue_routingRequestQueue = (uint64_t)result;
  return result;
}

uint64_t PowerManager_SetCPMSSupportedForAudio(uint64_t result)
{
  sCMSMPowerManagerForAudio_0 = result;
  return result;
}

uint64_t PowerManager_InitializeCPMSForAudio()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  CFMutableDictionaryRef PowerBudgetRequestDict;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  os_log_type_t v27[8];
  os_log_type_t type;
  os_log_type_t v29[4];
  id v30;
  int v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((sCMSMPowerManagerForAudio_1 & 1) != 0)
    return 0;
  sCMSMPowerManagerForAudio_2 = objc_msgSend(MEMORY[0x1E0D09930], "sharedCPMSAgent");
  if (sCMSMPowerManagerForAudio_2)
  {
    sCMSMPowerManagerForAudio_5 = vaemCopyCPMSPowerBudgetRangeInMilliWatts(5);
    if (!sCMSMPowerManagerForAudio_5)
    {
      v0 = 4294954513;
      goto LABEL_41;
    }
    *(_QWORD *)v27 = 0;
    v1 = (void *)sCMSMPowerManagerForAudio_2;
    v2 = objc_alloc_init(MEMORY[0x1E0D09940]);
    objc_msgSend(v2, "setClientId:", 5);
    objc_msgSend(v2, "setPowerLevels:", sCMSMPowerManagerForAudio_5);
    objc_msgSend(v2, "setIsContinuous:", 1);
    objc_msgSend(v2, "setNotificationCallback:", &__block_literal_global_4_3);
    objc_msgSend(v2, "setGetCurrentPower:", &__block_literal_global_69);
    objc_msgSend(v2, "setPowerBudgetUpdateMinimumPeriod:", 10);
    v3 = sCMSMPowerManagerForAudio_1;
    if ((sCMSMPowerManagerForAudio_1 & 1) == 0)
    {
      if (!objc_msgSend(v1, "registerClientWithDescription:error:", v2, v27))
      {
        v0 = 4294954513;
        goto LABEL_33;
      }
      sCMSMPowerManagerForAudio_1 = 1;
    }
    v30 = 0;
    v4 = (void *)sCMSMPowerManagerForAudio_2;
    PowerBudgetRequestDict = PowerManager_CreatePowerBudgetRequestDict((const __CFDictionary *)sCMSMPowerManagerForAudio_5, 1);
    if (PowerBudgetRequestDict)
    {
      v6 = PowerBudgetRequestDict;
      v7 = objc_msgSend(v4, "copyPowerBudgetForRequest:forClient:error:", PowerBudgetRequestDict, 5, &v30);
      if (v7)
      {
        v8 = v7;
        if (sCMSMPowerManagerForAudio_6)
          CFRelease((CFTypeRef)sCMSMPowerManagerForAudio_6);
        sCMSMPowerManagerForAudio_6 = v8;
        if (dword_1EE2B3F38)
        {
          *(_DWORD *)v29 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v10 = *(_DWORD *)v29;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v11 = v10;
          else
            v11 = v10 & 0xFFFFFFFE;
          if (v11)
          {
            v31 = 136315394;
            v32 = "powerManager_RequestPowerBudgetFromCPMSForAudioResource";
            v33 = 2114;
            v34 = sCMSMPowerManagerForAudio_6;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRelease(v6);
        v0 = PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(5, (void *)sCMSMPowerManagerForAudio_2, sCMSMPowerManagerForAudio_6);
        if ((v3 & 1) == 0)
          goto LABEL_39;
        goto LABEL_33;
      }
      *(_DWORD *)v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v13 = *(_DWORD *)v29;
      if (os_log_type_enabled(v12, type))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if (v14)
      {
        v15 = objc_msgSend(v30, "description");
        v31 = 136315394;
        v32 = "powerManager_RequestPowerBudgetFromCPMSForAudioResource";
        v33 = 2114;
        v34 = v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v6);
    }
    LODWORD(v30) = 0;
    v29[0] = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v17 = v30;
    if (os_log_type_enabled(v16, v29[0]))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if (v18)
    {
      v31 = 136315138;
      v32 = "powerManager_RequestInitialBudgetFromCPMSForAudioResource";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v0 = 4294954510;
    if (!v3)
    {
LABEL_39:

      if (sCMSMPowerManagerForAudio_6)
      {
        if (!(_DWORD)v0)
          return v0;
        goto LABEL_41;
      }
      goto LABEL_48;
    }
LABEL_33:
    LODWORD(v30) = 0;
    v29[0] = OS_LOG_TYPE_DEFAULT;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v20 = v30;
    if (os_log_type_enabled(v19, v29[0]))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if (v21)
    {
      v22 = objc_msgSend(*(id *)v27, "description");
      v31 = 136315394;
      v32 = "powerManager_RequestInitialBudgetFromCPMSForAudioResource";
      v33 = 2114;
      v34 = v22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
LABEL_48:
  v0 = 4294954510;
LABEL_41:
  LODWORD(v30) = 0;
  v27[0] = OS_LOG_TYPE_DEFAULT;
  v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v24 = v30;
  if (os_log_type_enabled(v23, v27[0]))
    v25 = v24;
  else
    v25 = v24 & 0xFFFFFFFE;
  if (v25)
  {
    v31 = 136315394;
    v32 = "PowerManager_InitializeCPMSForAudio";
    v33 = 1024;
    LODWORD(v34) = v0;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v0;
}

void sub_193762A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSystemSoundMgr_Initialize()
{
  const __CFAllocator **v0;
  uint64_t v1;
  const __CFDictionary *v2;
  CFTypeID TypeID;
  CFIndex Count;
  const void **v5;
  const void **v6;
  const __CFAllocator *v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFDataRef *v10;
  CFIndex v11;
  CFTypeID v12;
  CFTypeID v13;
  CFDictionaryRef v14;
  CFTypeRef *v15;
  uint64_t v16;
  const void *v17;
  CFTypeID v18;
  CFTypeRef v19;
  uint64_t v20;
  const __CFDictionary *v21;
  CFTypeID v22;
  const __CFBoolean *v23;
  const __CFBoolean *v24;
  int v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v27;
  const void *v28;
  NSObject *v29;
  const void *Value;
  uint64_t v31;
  const void *v32;
  CFTypeID v33;
  CFTypeRef v34;
  uint64_t v35;
  const void *v36;
  CFTypeID v37;
  CFTypeRef v38;
  uint64_t v39;
  const void *v40;
  CFTypeID v41;
  CFTypeRef v42;
  uint64_t v43;
  const void *v44;
  CFTypeID v45;
  CFTypeRef v46;
  uint64_t v47;
  const void *v48;
  CFTypeID v49;
  CFTypeRef v50;
  uint64_t v51;
  const __CFDictionary *v52;
  CFTypeID v53;
  const void *v54;
  CFTypeID v55;
  const void *v56;
  uint64_t v57;
  const __CFAllocator *v58;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const void *v61;
  uint64_t v62;
  NSObject *v63;
  const void **v64;
  const void **v65;
  const void **v66;
  __int128 context;
  __int128 v68;
  __CFString *v69;
  __CFString *v70;
  __CFString *v71;
  __CFString *v72;
  __CFString *v73;
  __CFString *v74;
  __CFString *v75;
  __CFString *v76;
  const __CFString *v77;
  const __CFString *v78;
  const __CFString *v79;
  const __CFString *v80;
  const __CFString *v81;
  const __CFString *v82;
  const __CFString *v83;
  const __CFString *v84;
  const __CFString *v85;
  const __CFString *v86;
  const __CFString *v87;
  const __CFString *v88;
  const __CFString *v89;
  const __CFString *v90;
  const __CFString *v91;
  const __CFString *v92;
  const __CFString *v93;
  const __CFString *v94;
  const __CFString *v95;
  const __CFString *v96;
  const __CFString *v97;
  const __CFString *v98;
  const __CFString *v99;
  const __CFString *v100;
  const __CFString *v101;
  const __CFString *v102;
  const __CFString *v103;
  const __CFString *v104;
  const __CFString *v105;
  const __CFString *v106;
  const __CFString *v107;
  const __CFString *v108;
  const __CFString *v109;
  const __CFString *v110;
  const __CFString *v111;
  const __CFString *v112;
  const __CFString *v113;
  const __CFString *v114;
  const __CFString *v115;
  const __CFString *v116;
  const __CFString *v117;
  const __CFString *v118;
  const __CFString *v119;
  const __CFString *v120;
  const __CFString *v121;
  const __CFString *v122;
  const __CFString *v123;
  const __CFString *v124;
  const __CFString *v125;
  const __CFString *v126;
  const __CFString *v127;
  __CFString *v128;
  __CFString *v129;
  __CFString *v130;
  __CFString *v131;
  __CFString *v132;
  __CFString *v133;
  __CFString *v134;
  __CFString *v135;
  __CFString *v136;
  __CFString *v137;
  __CFString *v138;
  __CFString *v139;
  __CFString *v140;
  __CFString *v141;
  __CFString *v142;
  __CFString *v143;
  __CFString *v144;
  __CFString *v145;
  __CFString *v146;
  __CFString *v147;
  __CFString *v148;
  __CFString *v149;
  __CFString *v150;
  __CFString *v151;
  __CFString *v152;
  __CFString *v153;
  __CFString *v154;
  __CFString *v155;
  __CFString *v156;
  __CFString *v157;
  __CFString *v158;
  __CFString *v159;
  const __CFString *v160;
  const __CFString *v161;
  const __CFString *v162;
  __CFString *v163;
  __CFString *v164;
  __CFString *v165;
  __CFString *v166;
  __CFString *v167;
  __CFString *v168;
  __CFString *v169;
  __CFString *v170;
  __CFString *v171;
  __CFString *v172;
  __CFString *v173;
  __CFString *v174;
  __CFString *v175;
  __CFString *v176;
  const __CFString *v177;
  const __CFString *v178;
  const __CFString *v179;
  const __CFString *v180;
  const __CFString *v181;
  const __CFString *v182;
  const __CFString *v183;
  const __CFString *v184;
  const __CFString *v185;
  const __CFString *v186;
  const __CFString *v187;
  const __CFString *v188;
  const __CFString *v189;
  const __CFString *v190;
  const __CFString *v191;
  const __CFString *v192;
  const __CFString *v193;
  const __CFString *v194;
  const __CFString *v195;
  const __CFString *v196;
  const __CFString *v197;
  const __CFString *v198;
  const __CFString *v199;
  const __CFString *v200;
  const __CFString *v201;
  const __CFString *v202;
  const __CFString *v203;
  const __CFString *v204;
  const __CFString *v205;
  const __CFString *v206;
  const __CFString *v207;
  const __CFString *v208;
  const __CFString *v209;
  const __CFString *v210;
  const __CFString *v211;
  const __CFString *v212;
  const __CFString *v213;
  const __CFString *v214;
  const __CFString *v215;
  const __CFString *v216;
  const __CFString *v217;
  const __CFString *v218;
  const __CFString *v219;
  const __CFString *v220;
  const __CFString *v221;
  const __CFString *v222;
  const __CFString *v223;
  const __CFString *v224;
  __CFString *v225;
  const __CFString *v226;
  const __CFString *v227;
  const __CFString *v228;
  const __CFString *v229;
  const __CFString *v230;
  const __CFString *v231;
  __CFString *v232;
  __CFString *v233;
  __CFString *v234;
  __CFString *v235;
  __CFString *v236;
  __CFString *v237;
  __CFString *v238;
  __CFString *v239;
  __CFString *v240;
  __CFString *v241;
  __CFString *v242;
  __CFString *v243;
  __CFString *v244;
  __CFString *v245;
  __CFString *v246;
  __CFString *v247;
  __CFString *v248;
  __CFString *v249;
  __CFString *v250;
  __CFString *v251;
  __CFString *v252;
  __CFString *v253;
  __CFString *v254;
  __CFString *v255;
  __CFString *v256;
  __CFString *v257;
  __CFString *v258;
  __CFString *v259;
  __CFString *v260;
  __CFString *v261;
  __CFString *v262;
  __CFString *v263;
  __CFString *v264;
  __CFString *v265;
  __CFString *v266;
  __CFString *v267;
  __CFString *v268;
  __CFString *v269;
  __CFString *v270;
  __CFString *v271;
  __CFString *v272;
  __CFString *v273;
  __CFString *v274;
  __CFString *v275;
  __CFString *v276;
  __CFString *v277;
  __CFString *v278;
  __CFString *v279;
  __CFString *v280;
  __CFString *v281;
  __CFString *v282;
  __CFString *v283;
  __CFString *v284;
  __CFString *v285;
  __CFString *v286;
  __CFString *v287;
  __CFString *v288;
  __CFString *v289;
  __CFString *v290;
  __CFString *v291;
  __CFString *v292;
  __CFString *v293;
  __CFString *v294;
  __CFString *v295;
  __CFString *v296;
  __CFString *v297;
  __CFString *v298;
  __CFString *v299;
  __CFString *v300;
  __CFString *v301;
  __CFString *v302;
  __CFString *v303;
  __CFString *v304;
  __CFString *v305;
  __CFString *v306;
  __CFString *v307;
  __CFString *v308;
  __CFString *v309;
  __CFString *v310;
  __CFString *v311;
  __CFString *v312;
  __CFString *v313;
  __CFString *v314;
  __CFString *v315;
  __CFString *v316;
  __CFString *v317;
  __CFString *v318;
  __CFString *v319;
  __CFString *v320;
  __CFString *v321;
  __CFString *v322;
  __CFString *v323;
  __CFString *v324;
  __CFString *v325;
  __CFString *v326;
  __CFString *v327;
  __CFString *v328;
  __CFString *v329;
  __CFString *v330;
  __CFString *v331;
  __CFString *v332;
  __CFString *v333;
  __CFString *v334;
  __CFString *v335;
  __CFString *v336;
  __CFString *v337;
  __CFString *v338;
  __CFString *v339;
  __CFString *v340;
  __CFString *v341;
  __CFString *v342;
  __CFString *v343;
  __CFString *v344;
  __CFString *v345;
  __CFString *v346;
  __CFString *v347;
  __CFString *v348;
  __CFString *v349;
  __CFString *v350;
  __CFString *v351;
  __CFString *v352;
  __CFString *v353;
  __CFString *v354;
  __CFString *v355;
  __CFString *v356;
  __CFString *v357;
  __CFString *v358;
  __CFString *v359;
  __CFString *v360;
  __CFString *v361;
  __CFString *v362;
  __CFString *v363;
  __CFString *v364;
  __CFString *v365;
  __CFString *v366;
  __CFString *v367;
  __CFString *v368;
  __CFString *v369;
  __CFString *v370;
  __CFString *v371;
  __CFString *v372;
  __CFString *v373;
  __CFString *v374;
  __CFString *v375;
  __CFString *v376;
  __CFString *v377;
  __CFString *v378;
  __CFString *v379;
  __CFString *v380;
  __CFString *v381;
  __CFString *v382;
  __CFString *v383;
  __CFString *v384;
  __CFString *v385;
  __CFString *v386;
  __CFString *v387;
  __CFString *v388;
  __CFString *v389;
  __CFString *v390;
  __CFString *v391;
  __CFString *v392;
  __CFString *v393;
  __CFString *v394;
  __CFString *v395;
  __CFString *v396;
  __CFString *v397;
  __CFString *v398;
  __CFString *v399;
  __CFString *v400;
  __CFString *v401;
  __CFString *v402;
  __CFString *v403;
  __CFString *v404;
  __CFString *v405;
  __CFString *v406;
  __CFString *v407;
  __CFString *v408;
  __CFString *v409;
  __CFString *v410;
  __CFString *v411;
  __CFString *v412;
  __CFString *v413;
  __CFString *v414;
  __CFString *v415;
  __CFString *v416;
  __CFString *v417;
  __CFString *v418;
  __CFString *v419;
  __CFString *v420;
  __CFString *v421;
  __CFString *v422;
  __CFString *v423;
  __CFString *v424;
  __CFString *v425;
  __CFString *v426;
  __CFString *v427;
  __CFString *v428;
  __CFString *v429;
  __CFString *v430;
  __CFString *v431;
  __CFString *v432;
  __CFString *v433;
  __CFString *v434;
  __CFString *v435;
  __CFString *v436;
  __CFString *v437;
  __CFString *v438;
  __CFString *v439;
  __CFString *v440;
  __CFString *v441;
  __CFString *v442;
  __CFString *v443;
  __CFString *v444;
  __CFString *v445;
  __CFString *v446;
  __CFString *v447;
  __CFString *v448;
  __CFString *v449;
  __CFString *v450;
  __CFString *v451;
  __CFString *v452;
  __CFString *v453;
  __CFString *v454;
  __CFString *v455;
  __CFString *v456;
  __CFString *v457;
  __CFString *v458;
  __CFString *v459;
  __CFString *v460;
  __CFString *v461;
  __CFString *v462;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint64_t v464;

  v464 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!gSystemSoundRingerSettings)
  {
    CelestialGetModelSpecificName();
    v1 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v1)
    {
      v2 = (const __CFDictionary *)v1;
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v2))
      {
        Count = CFDictionaryGetCount(v2);
        v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        v65 = v5;
        v66 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        v64 = v6;
        CFDictionaryGetKeysAndValues(v2, v5, v6);
        v7 = *v0;
        if (Count >= 1)
        {
          v8 = v6;
          v9 = v65;
          v10 = (CFDataRef *)v66;
          v11 = Count;
          do
          {
            context = xmmword_1937A4030;
            v68 = xmmword_1937A4040;
            v12 = CFStringGetTypeID();
            if (v12 != CFGetTypeID(*v9))
              break;
            v13 = CFDictionaryGetTypeID();
            if (v13 != CFGetTypeID(*v8))
              break;
            *(_QWORD *)&context = *v9;
            CFDictionaryApplyFunction((CFDictionaryRef)*v8, (CFDictionaryApplierFunction)cmsmWordyToCompact, &context);
            if (!BYTE8(v68))
              break;
            *v10++ = CFDataCreate(v7, (const UInt8 *)&context + 8, 8);
            ++v8;
            ++v9;
            --v11;
          }
          while (v11);
        }
        v14 = CFDictionaryCreate(v7, v65, v66, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        free(v65);
        free(v64);
        if (v66)
        {
          if (Count >= 1)
          {
            v15 = v66;
            do
            {
              if (*v15)
                CFRelease(*v15);
              ++v15;
              --Count;
            }
            while (Count);
          }
          free(v66);
        }
        v0 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
      }
      else
      {
        v14 = 0;
      }
      gSystemSoundRingerSettings = (uint64_t)v14;
      CFRelease(v2);
    }
  }
  if (!gSystemSoundAudioBehaviors)
  {
    CelestialGetModelSpecificName();
    v16 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v16)
    {
      v17 = (const void *)v16;
      v18 = CFDictionaryGetTypeID();
      if (v18 == CFGetTypeID(v17))
        v19 = CFRetain(v17);
      else
        v19 = 0;
      gSystemSoundAudioBehaviors = (uint64_t)v19;
      CFRelease(v17);
    }
  }
  if (!gRegionalSystemSoundsThatShareBehaviour)
  {
    CelestialGetModelSpecificName();
    v20 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v20)
    {
      v21 = (const __CFDictionary *)v20;
      v22 = CFDictionaryGetTypeID();
      if (v22 == CFGetTypeID(v21)
        && (v23 = (const __CFBoolean *)MGCopyAnswer()) != 0
        && (v24 = v23, v25 = CFBooleanGetValue(v23), CFRelease(v24), v25))
      {
        gCMSS_3 = MGGetBoolAnswer();
        if ((gCMSS_3 & 1) == 0 && dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v28 = (const void *)MGCopyAnswer();
        if (dword_1EE2B3F38)
        {
          v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        Value = CFDictionaryGetValue(v21, v28);
        v27 = (uint64_t)Value;
        if (Value)
          CFRetain(Value);
        if (v28)
          CFRelease(v28);
      }
      else
      {
        v27 = 0;
      }
      gRegionalSystemSoundsThatShareBehaviour = v27;
      CFRelease(v21);
    }
  }
  if (!gSystemSoundVibrationPatterns)
  {
    CelestialGetModelSpecificName();
    v31 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v31)
    {
      v32 = (const void *)v31;
      v33 = CFDictionaryGetTypeID();
      if (v33 == CFGetTypeID(v32))
        v34 = CFRetain(v32);
      else
        v34 = 0;
      gSystemSoundVibrationPatterns = (uint64_t)v34;
      CFRelease(v32);
    }
  }
  if (!gSystemSoundRoutingForCategories)
  {
    CelestialGetModelSpecificName();
    v35 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v35)
    {
      v36 = (const void *)v35;
      v37 = CFDictionaryGetTypeID();
      if (v37 == CFGetTypeID(v36))
        v38 = CFRetain(v36);
      else
        v38 = 0;
      gSystemSoundRoutingForCategories = (uint64_t)v38;
      CFRelease(v36);
    }
  }
  if (!gSystemSoundLowersMusicVolume)
  {
    CelestialGetModelSpecificName();
    v39 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v39)
    {
      v40 = (const void *)v39;
      v41 = CFDictionaryGetTypeID();
      if (v41 == CFGetTypeID(v40))
        v42 = CFRetain(v40);
      else
        v42 = 0;
      gSystemSoundLowersMusicVolume = (uint64_t)v42;
      CFRelease(v40);
    }
  }
  if (!gSystemSoundMaxVolume)
  {
    CelestialGetModelSpecificName();
    v43 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v43)
    {
      v44 = (const void *)v43;
      v45 = CFDictionaryGetTypeID();
      if (v45 == CFGetTypeID(v44))
        v46 = CFRetain(v44);
      else
        v46 = 0;
      gSystemSoundMaxVolume = (uint64_t)v46;
      CFRelease(v44);
    }
  }
  if (!gSystemSoundMaxVibrationIntensity)
  {
    CelestialGetModelSpecificName();
    v47 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v47)
    {
      v48 = (const void *)v47;
      v49 = CFDictionaryGetTypeID();
      if (v49 == CFGetTypeID(v48))
        v50 = CFRetain(v48);
      else
        v50 = 0;
      gSystemSoundMaxVibrationIntensity = (uint64_t)v50;
      CFRelease(v48);
    }
  }
  if (!gSystemSoundsWithNoVolumeAdjustment || !gSystemSoundsDoNotObeyAccessibilityVibrationSetting)
  {
    CelestialGetModelSpecificName();
    v51 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v51)
    {
      v52 = (const __CFDictionary *)v51;
      v53 = CFDictionaryGetTypeID();
      if (v53 == CFGetTypeID(v52))
      {
        v54 = CFDictionaryGetValue(v52, CFSTR("NoVolumeAdjustment"));
        if (v54)
          v54 = CFRetain(v54);
      }
      else
      {
        v54 = 0;
      }
      gSystemSoundsWithNoVolumeAdjustment = (uint64_t)v54;
      v55 = CFDictionaryGetTypeID();
      if (v55 == CFGetTypeID(v52))
      {
        v56 = CFDictionaryGetValue(v52, CFSTR("DoNotObeyAccessibilityVibrationSetting"));
        if (v56)
          v56 = CFRetain(v56);
      }
      else
      {
        v56 = 0;
      }
      gSystemSoundsDoNotObeyAccessibilityVibrationSetting = (uint64_t)v56;
      CFRelease(v52);
    }
  }
  if (!gSystemSoundMinVolume)
  {
    CelestialGetModelSpecificName();
    v57 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v57)
      gSystemSoundMinVolume = v57;
  }
  memset(&keyCallBacks, 0, sizeof(keyCallBacks));
  *(_QWORD *)&context = 0x1E30A6368;
  *((_QWORD *)&context + 1) = 0x1E30A6368;
  *(_QWORD *)&v68 = 0x1E30A6368;
  *((_QWORD *)&v68 + 1) = 0x1E30A6368;
  v69 = CFSTR("InCallSystemSound");
  v70 = CFSTR("InCallSystemSound");
  v71 = CFSTR("InCallSystemSound");
  v72 = CFSTR("InCallSystemSound");
  v73 = CFSTR("InCallSystemSound");
  v74 = CFSTR("InCallSystemSound");
  v75 = CFSTR("UserAlert");
  v76 = CFSTR("UserAlert");
  v77 = CFSTR("SystemSoundPreview");
  v78 = CFSTR("MailReceived");
  v79 = CFSTR("MailSent");
  v80 = CFSTR("VoicemailReceived");
  v81 = CFSTR("SMSReceived");
  v82 = CFSTR("SMSSent");
  v83 = CFSTR("CalendarAlert");
  v84 = CFSTR("LowPower");
  v85 = CFSTR("SMSReceived_Alert");
  v86 = CFSTR("SMSReceived_Alert");
  v87 = CFSTR("SMSReceived_Alert");
  v88 = CFSTR("SMSReceived_Alert");
  v89 = CFSTR("SMSReceived_Alert");
  v90 = CFSTR("SMSReceived_Vibrate");
  v91 = CFSTR("SMSReceived_Alert");
  v92 = CFSTR("SMSReceived_Alert");
  v93 = CFSTR("MailSent");
  v94 = CFSTR("ReminderAlert");
  v95 = CFSTR("MailSent");
  v96 = CFSTR("SMSReceived_Alert");
  v97 = CFSTR("SMSReceived_Alert");
  v98 = CFSTR("SMSReceived_Alert");
  v99 = CFSTR("SMSReceived_Alert");
  v100 = CFSTR("SMSReceived_Alert");
  v101 = CFSTR("SMSReceived_Alert");
  v102 = CFSTR("SMSReceived_Alert");
  v103 = CFSTR("SMSReceived_Alert");
  v104 = CFSTR("SMSReceived_Alert");
  v105 = CFSTR("SMSReceived_Alert");
  v106 = CFSTR("SMSReceived_Alert");
  v107 = CFSTR("SMSReceived_Alert");
  v108 = CFSTR("SMSReceived_Alert");
  v109 = CFSTR("SMSReceived_Alert");
  v110 = CFSTR("SMSReceived_Alert");
  v111 = CFSTR("SMSReceived_Alert");
  v112 = CFSTR("SMSReceived_Alert");
  v113 = CFSTR("USSDAlert");
  v114 = CFSTR("SIMToolkitTone");
  v115 = CFSTR("SIMToolkitTone");
  v116 = CFSTR("SIMToolkitTone");
  v117 = CFSTR("SIMToolkitTone");
  v118 = CFSTR("SIMToolkitTone");
  v119 = CFSTR("PINKeyPressed");
  v120 = CFSTR("ScreenLocked");
  v121 = CFSTR("FailedUnlock");
  v122 = CFSTR("KeyPressed");
  v123 = CFSTR("KeyPressed");
  v124 = CFSTR("KeyPressed");
  v125 = CFSTR("ConnectedToPower");
  v126 = CFSTR("RingerSwitchIndication");
  v127 = CFSTR("CameraShutter");
  v128 = CFSTR("ShakeToShuffle");
  v129 = CFSTR("JBL_Begin");
  v130 = CFSTR("JBL_Confirm");
  v131 = CFSTR("JBL_Cancel");
  v132 = CFSTR("JBL_Ambiguous");
  v133 = CFSTR("JBL_NoMatch");
  v134 = CFSTR("BeginRecording");
  v135 = CFSTR("EndRecording");
  v136 = CFSTR("BeginVideoRecording");
  v137 = CFSTR("EndVideoRecording");
  v138 = CFSTR("CameraShutterAlt");
  v139 = CFSTR("AirDropInvitation");
  v140 = CFSTR("CameraShutterAlt");
  v141 = CFSTR("CameraShutterAlt");
  v142 = CFSTR("CameraShutterAlt");
  v143 = CFSTR("CameraShutterAlt");
  v144 = CFSTR("CameraShutterAlt");
  v145 = CFSTR("KeyPressClick_Remote");
  v146 = CFSTR("FocusChangeKeyboard");
  v147 = CFSTR("FocusChangeAppIcon");
  v148 = CFSTR("FocusChangeLarge");
  v149 = CFSTR("FocusChangeSmall");
  v150 = CFSTR("NavigationPush");
  v151 = CFSTR("NavigationPop");
  v152 = CFSTR("KeyboardPressNormal");
  v153 = CFSTR("KeyboardPressDelete");
  v154 = CFSTR("KeyboardPressClear");
  v155 = CFSTR("VCInvitationAccepted");
  v156 = CFSTR("VCRinging");
  v157 = CFSTR("VCEnded");
  v158 = CFSTR("VCCallWaiting");
  v159 = CFSTR("VCCallUpgrade");
  v160 = CFSTR("KeyPressed");
  v161 = CFSTR("KeyPressed");
  v162 = CFSTR("KeyPressed");
  v163 = CFSTR("GoToSleep_Alert");
  v164 = CFSTR("Warsaw");
  v165 = CFSTR("PaymentSuccess");
  v166 = CFSTR("PearlSuccess");
  v167 = CFSTR("PearlFailure");
  v168 = CFSTR("PaymentSuccess");
  v169 = CFSTR("Health_Alert");
  v170 = CFSTR("HealthNotificationUrgent");
  v171 = CFSTR("InCallSystemSound");
  v172 = CFSTR("InCallSystemSound");
  v173 = CFSTR("VCGroupInvitation_Alert");
  v174 = CFSTR("USBHardening_Alert");
  v175 = CFSTR("Critical_Alert");
  v176 = CFSTR("Doorbell");
  v177 = CFSTR("TouchTone");
  v178 = CFSTR("TouchTone");
  v179 = CFSTR("TouchTone");
  v180 = CFSTR("TouchTone");
  v181 = CFSTR("TouchTone");
  v182 = CFSTR("TouchTone");
  v183 = CFSTR("TouchTone");
  v184 = CFSTR("TouchTone");
  v185 = CFSTR("TouchTone");
  v186 = CFSTR("TouchTone");
  v187 = CFSTR("TouchTone");
  v188 = CFSTR("TouchTone");
  v189 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v190 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v191 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v192 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v193 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v194 = CFSTR("SystemSoundPreview");
  v195 = CFSTR("KeyPressClickPreview");
  v196 = CFSTR("SMSReceived_Selection");
  v197 = CFSTR("SMSReceived_Selection");
  v198 = CFSTR("SMSReceived_Selection");
  v199 = CFSTR("SMSReceived_Selection");
  v200 = CFSTR("SMSReceived_Selection");
  v201 = CFSTR("SMSReceived_Vibrate");
  v202 = CFSTR("SMSReceived_Selection");
  v203 = CFSTR("SMSReceived_Selection");
  v204 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch");
  v205 = CFSTR("SystemSoundPreview_IgnoreRingerSwitch_NoVibe");
  v206 = CFSTR("SMSReceived_Selection");
  v207 = CFSTR("SMSReceived_Selection");
  v208 = CFSTR("SMSReceived_Selection");
  v209 = CFSTR("SMSReceived_Selection");
  v210 = CFSTR("SMSReceived_Selection");
  v211 = CFSTR("SMSReceived_Selection");
  v212 = CFSTR("SMSReceived_Selection");
  v213 = CFSTR("SMSReceived_Selection");
  v214 = CFSTR("SMSReceived_Selection");
  v215 = CFSTR("SMSReceived_Selection");
  v216 = CFSTR("SMSReceived_Selection");
  v217 = CFSTR("SMSReceived_Selection");
  v218 = CFSTR("SMSReceived_Selection");
  v219 = CFSTR("SMSReceived_Selection");
  v220 = CFSTR("SMSReceived_Selection");
  v221 = CFSTR("SMSReceived_Selection");
  v222 = CFSTR("SMSReceived_Selection");
  v223 = CFSTR("RingerVibeChanged");
  v224 = CFSTR("SilentVibeChanged");
  v225 = CFSTR("DeviceShutdown");
  v226 = CFSTR("Headset_StartCall");
  v227 = CFSTR("Headset_Redial");
  v228 = CFSTR("Headset_AnswerCall");
  v229 = CFSTR("Headset_EndCall");
  v230 = CFSTR("Headset_CallWaitingActions");
  v231 = CFSTR("Headset_TransitionEnd");
  v232 = CFSTR("Vibrate");
  v233 = CFSTR("VibrateAlways");
  v234 = CFSTR("AudioToneBusy");
  v235 = CFSTR("AudioToneCongestion");
  v236 = CFSTR("AudioTonePathAcknowledge");
  v237 = CFSTR("AudioToneError");
  v238 = CFSTR("AudioToneCallWaiting");
  v239 = CFSTR("AudioToneKey2");
  v240 = CFSTR("PaymentSuccess");
  v241 = CFSTR("PaymentFailure");
  v242 = CFSTR("PaymentFailure");
  v243 = CFSTR("PaymentReceived");
  v244 = CFSTR("PaymentReceivedFailure");
  v245 = CFSTR("PINEnterDigit_AX");
  v246 = CFSTR("PINDelete_AX");
  v247 = CFSTR("PINSubmit_AX");
  v248 = CFSTR("PINUnexpected");
  v249 = CFSTR("PINEnterDigit");
  v250 = CFSTR("PINDelete");
  v251 = CFSTR("Notification_Haptic");
  v252 = CFSTR("Ringtone_US_Haptic");
  v253 = CFSTR("Ringtone_UK_Haptic");
  v254 = CFSTR("Alarm_Haptic");
  v255 = CFSTR("SiriStart_Haptic");
  v256 = CFSTR("SiriStopSuccess_Haptic");
  v257 = CFSTR("SiriStopFailure_Haptic");
  v258 = CFSTR("Stockholm_Haptic");
  v259 = CFSTR("Beat_Haptic");
  v260 = CFSTR("RubberBand_Haptic");
  v261 = CFSTR("DoNotDisturb_Haptic");
  v262 = CFSTR("UIConfirmation_Haptic");
  v263 = CFSTR("ET_Heartbeat_Haptic");
  v264 = CFSTR("Timer_Haptic");
  v265 = CFSTR("NavigationLeftTurn_Haptic");
  v266 = CFSTR("NavigationRightTurn_Haptic");
  v267 = CFSTR("Detent_Haptic");
  v268 = CFSTR("NavigationGenericManeuver");
  v269 = CFSTR("NavigationGenericManeuver_Haptic");
  v270 = CFSTR("CameraCountdownTick_Haptic");
  v271 = CFSTR("CameraCountdownImminent_Haptic");
  v272 = CFSTR("ET_RemoteTap_Receive_Haptic");
  v273 = CFSTR("ET_RemoteTap_Send_Haptic");
  v274 = CFSTR("ET_BeginNotification_Haptic");
  v275 = CFSTR("DoNotDisturbExpiryWarning_Haptic");
  v276 = CFSTR("StockholmActive_Haptic");
  v277 = CFSTR("StockholmActiveSingleCycle_Haptic");
  v278 = CFSTR("StockholmFailure_Haptic");
  v279 = CFSTR("SedentaryTimer_Haptic");
  v280 = CFSTR("HourlyChime_Haptic");
  v281 = CFSTR("Preview_AudioAndHaptic");
  v282 = CFSTR("Alert_ActivityGoalAttained_Haptic");
  v283 = CFSTR("Alert_ActivityGoalBehind_Haptic");
  v284 = CFSTR("Alert_ActivityGoalClose_Haptic");
  v285 = CFSTR("Alert_BatteryLow_Haptic");
  v286 = CFSTR("Alert_BatteryCritical_Haptic");
  v287 = CFSTR("Alert_Calendar_Haptic");
  v288 = CFSTR("Alert_Mail_Haptic");
  v289 = CFSTR("Alert_Messages_1_Haptic");
  v290 = CFSTR("Alert_Messages_2_Haptic");
  v291 = CFSTR("Alert_Messages_3_Haptic");
  v292 = CFSTR("Alert_PassbookBalance_Haptic");
  v293 = CFSTR("Alert_PassbookGeofence_Haptic");
  v294 = CFSTR("Alert_PhotostreamActivity_Haptic");
  v295 = CFSTR("Alert_ReminderDue_Haptic");
  v296 = CFSTR("Alert_Voicemail_Haptic");
  v297 = CFSTR("Alert_WalkieTalkie_Haptic");
  v298 = CFSTR("BatteryMagsafe_Haptic");
  v299 = CFSTR("BuddyPairingFailure_Haptic");
  v300 = CFSTR("BuddyPairingSuccess_Haptic");
  v301 = CFSTR("CameraShutter_Haptic");
  v302 = CFSTR("Alert_MapsDirectionsInApp_Haptic");
  v303 = CFSTR("MessagesIncoming_Haptic");
  v304 = CFSTR("MessagesOutgoing_Haptic");
  v305 = CFSTR("OnOffPasscodeFailure_Haptic");
  v306 = CFSTR("OrbInvoke_Haptic");
  v307 = CFSTR("OrbLayers_Haptic");
  v308 = CFSTR("PhoneHangUp_Haptic");
  v309 = CFSTR("PhotosZoomDetent_Haptic");
  v310 = CFSTR("QB_Dictation_Haptic");
  v311 = CFSTR("SpringboardEdgeUniverse_Haptic");
  v312 = CFSTR("SpringboardHardStop_Haptic");
  v313 = CFSTR("StopwatchLap_Haptic");
  v314 = CFSTR("StopwatchReset_Haptic");
  v315 = CFSTR("StopwatchStart_Haptic");
  v316 = CFSTR("StopwatchStop_Haptic");
  v317 = CFSTR("TimerCancel_Haptic");
  v318 = CFSTR("TimerPause_Haptic");
  v319 = CFSTR("TimerStart_Haptic");
  v320 = CFSTR("TimerWheelHoursDetent_Haptic");
  v321 = CFSTR("WalkieTalkieActiveStart_Haptic");
  v322 = CFSTR("WorkoutComplete_Haptic");
  v323 = CFSTR("WorkoutCountdown_Haptic");
  v324 = CFSTR("Alert_3rdParty_Haptic");
  v325 = CFSTR("WorkoutSelect_Haptic");
  v326 = CFSTR("WorkoutPressStart_Haptic");
  v327 = CFSTR("ClockAnalogTick_Haptic");
  v328 = CFSTR("TimerWheelMinutesDetent_Haptic");
  v329 = CFSTR("PhoneAnswer_Haptic");
  v330 = CFSTR("PhoneHold_Haptic");
  v331 = CFSTR("WalkieTalkieActiveEnd_Haptic");
  v332 = CFSTR("UISnap_Haptic");
  v333 = CFSTR("UISwitch_On_Haptic");
  v334 = CFSTR("UISwitch_Off_Haptic");
  v335 = CFSTR("UISwipe_Haptic");
  v336 = CFSTR("SystemStartup_Haptic");
  v337 = CFSTR("BuddyPairingRemoteConnection_Haptic");
  v338 = CFSTR("BuddyPairingRemoteTap_Haptic");
  v339 = CFSTR("QB_Dictation_Off_Haptic");
  v340 = CFSTR("RingtoneDucked_US_Haptic");
  v341 = CFSTR("RingtoneDucked_UK_Haptic");
  v342 = CFSTR("SalientNotification_Haptic");
  v343 = CFSTR("Notification_Salient_Haptic");
  v344 = CFSTR("ET_BeginNotification_Salient_Haptic");
  v345 = CFSTR("Alert_Calendar_Salient_Haptic");
  v346 = CFSTR("Alert_Mail_Salient_Haptic");
  v347 = CFSTR("Alert_Messages_1_Salient_Haptic");
  v348 = CFSTR("Alert_ReminderDue_Salient_Haptic");
  v349 = CFSTR("Alert_Voicemail_Salient_Haptic");
  v350 = CFSTR("Alert_3rdParty_Salient_Haptic");
  v351 = CFSTR("3rdParty_DirectionUp_Haptic");
  v352 = CFSTR("3rdParty_DirectionDown_Haptic");
  v353 = CFSTR("3rdParty_Success_Haptic");
  v354 = CFSTR("3rdParty_Failure_Haptic");
  v355 = CFSTR("3rdParty_Retry_Haptic");
  v356 = CFSTR("3rdParty_Start_Haptic");
  v357 = CFSTR("3rdParty_Stop_Haptic");
  v358 = CFSTR("Alarm_Nightstand_Haptic");
  v359 = CFSTR("Alert_BatteryCritical_Salient_Haptic");
  v360 = CFSTR("NavigationLeftTurn_Salient_Haptic");
  v361 = CFSTR("NavigationRightTurn_Salient_Haptic");
  v362 = CFSTR("NavigationGenericManeuver_Salient_Haptic");
  v363 = CFSTR("SedentaryTimer_Salient_Haptic");
  v364 = CFSTR("Alert_ActivityGoalAttained_Salient_Haptic");
  v365 = CFSTR("Alert_ActivityGoalBehind_Salient_Haptic");
  v366 = CFSTR("Alert_PassbookGeofence_Salient_Haptic");
  v367 = CFSTR("WorkoutSaved_Haptic");
  v368 = CFSTR("OrbPeek_Haptic");
  v369 = CFSTR("OrbPop_Haptic");
  v370 = CFSTR("OrbNegative_Haptic");
  v371 = CFSTR("VoiceOver_Click_Haptic");
  v372 = CFSTR("SiriAutoSend_Haptic");
  v373 = CFSTR("HummingbirdCycle_Haptic");
  v374 = CFSTR("HummingbirdCompletion_Haptic");
  v375 = CFSTR("HummingbirdNotification_Haptic");
  v376 = CFSTR("RemoteCameraShutterBurstBegin_Haptic");
  v377 = CFSTR("RemoteCameraShutterBurstEnd_Haptic");
  v378 = CFSTR("WorkoutPaused_Haptic");
  v379 = CFSTR("WorkoutResumed_Haptic");
  v380 = CFSTR("GoToSleep_Haptic");
  v381 = CFSTR("Warsaw_Haptic");
  v382 = CFSTR("AutoUnlock_Haptic");
  v383 = CFSTR("Alert_ActivityFriendsGoalAttained_Haptic");
  v384 = CFSTR("Alert_SpartanConnecting_Haptic");
  v385 = CFSTR("Alert_SpartanConnecting_LowLatency_Haptic");
  v386 = CFSTR("Alert_SpartanConnected_LowLatency_Haptic");
  v387 = CFSTR("Alert_SpartanDisconnected_LowLatency_Haptic");
  v388 = CFSTR("Alert_SpartanReminderEscalationLevel1_Haptic");
  v389 = CFSTR("Alert_SpartanReminderEscalationLevel2_Haptic");
  v390 = CFSTR("Alert_SpartanReminderEscalationLevel3_Haptic");
  v391 = CFSTR("Alert_SpartanReminderEscalationLevel4_Haptic");
  v392 = CFSTR("AccessScanComplete_Haptic");
  v393 = CFSTR("BuddyMigrationStart_Haptic");
  v394 = CFSTR("SOSFallDetectionPrompt_Haptic");
  v395 = CFSTR("SOSEmergencyContactTextPrompt_Haptic");
  v396 = CFSTR("WorkoutStartAutoDetected_Haptic");
  v397 = CFSTR("WorkoutCompleteAutoDetected_Haptic");
  v398 = CFSTR("WorkoutPausedAutoDetected_Haptic");
  v399 = CFSTR("WorkoutResumedAutoDetected_Haptic");
  v400 = CFSTR("Alert_PaceAbove_Haptic");
  v401 = CFSTR("Alert_PaceBelow_Haptic");
  v402 = CFSTR("WalkieTalkieReceiveStart_Haptic");
  v403 = CFSTR("WalkieTalkieReceiveEnd_Haptic");
  v404 = CFSTR("Alert_Health_Haptic");
  v405 = CFSTR("Alert_HealthNotificationUrgent_Haptic");
  v406 = CFSTR("Doorbell_Haptic");
  v407 = CFSTR("InCallSystemSound");
  v408 = CFSTR("InCallSystemSound");
  v409 = CFSTR("Alert_VCGroupInvitation_Haptic");
  v410 = CFSTR("Alert_Critical_Haptic");
  v411 = CFSTR("Alert_FirstParty_Haptic");
  v412 = CFSTR("Alert_Limit_Exceeded_Haptic");
  v413 = CFSTR("SunlightPrompt_Haptic");
  v414 = CFSTR("Siren_Countdown_Major_Haptic");
  v415 = CFSTR("Siren_Countdown_Minor_Haptic");
  v416 = CFSTR("System_Notification_Haptic");
  v417 = CFSTR("SOSFallDetectionPromptEscalation_Haptic");
  v418 = CFSTR("RelTest1_Haptic");
  v419 = CFSTR("SwTest1_Haptic");
  v420 = CFSTR("SwTest2_Haptic");
  v421 = CFSTR("MMITest1_Haptic");
  v422 = CFSTR("AudioPrewarm");
  v423 = CFSTR("HapticPrewarm");
  v424 = CFSTR("HeadphoneAudioExposureLimitExceeded");
  v425 = CFSTR("HeadphoneAudioExposureLimitExceeded_Haptic");
  v426 = CFSTR("HealthReadingComplete_Haptic");
  v427 = CFSTR("HealthReadingFail_Haptic");
  v428 = CFSTR("WalkAMile_Haptic");
  v429 = CFSTR("CameraShutter_Haptic");
  v430 = CFSTR("Time_To_Run");
  v431 = CFSTR("Time_To_Run_Haptic");
  v432 = CFSTR("Time_To_Walk");
  v433 = CFSTR("Time_To_Walk_Haptic");
  v434 = CFSTR("InCallSystemSound");
  v435 = CFSTR("InCallSystemSound");
  v436 = CFSTR("InCallSystemSound");
  v437 = CFSTR("InCallSystemSound");
  v438 = CFSTR("WebcamStartAlwaysHeard");
  v439 = CFSTR("PushToTalkJoined");
  v440 = CFSTR("PushToTalkLeft");
  v441 = CFSTR("PushToTalkUnmute");
  v442 = CFSTR("PushToTalkMute");
  v443 = CFSTR("PushToTalkUnmuteFail");
  v444 = CFSTR("PushToTalkJoined_Haptic");
  v445 = CFSTR("PushToTalkLeft_Haptic");
  v446 = CFSTR("PushToTalkUnmute_Haptic");
  v447 = CFSTR("PushToTalkMute_Haptic");
  v448 = CFSTR("PushToTalkUnmuteFail_Haptic");
  v449 = CFSTR("Alert_IntervalEnded_Haptic");
  v450 = CFSTR("Alert_IntervalUpcoming_Haptic");
  v451 = CFSTR("WorkoutPrecisionStart_Haptic");
  v452 = CFSTR("Elevation_Alert_Haptic");
  v453 = CFSTR("IDCard_Sender_Confirmation");
  v454 = CFSTR("IDCard_Receiver_Confirmation");
  v455 = CFSTR("IDCard_Receiver_Connect");
  v456 = CFSTR("IDCard_Sender_Confirmation_Haptic");
  v457 = CFSTR("IDCard_Receiver_Confirmation_Haptic");
  v458 = CFSTR("IDCard_Receiver_Connect_Haptic");
  v459 = CFSTR("LiquidDetectedAlwaysHeard");
  v460 = CFSTR("DictationBegin");
  v58 = *v0;
  v461 = CFSTR("DictationCancel");
  v462 = CFSTR("DictationConfirm");
  gSystemSoundIDToCategory = (uint64_t)CFDictionaryCreate(v58, (const void **)&cmsmInitializeSSIDCategoryMappings_ssids, (const void **)&context, 398, &keyCallBacks, MEMORY[0x1E0C9B3A0]);
  gCMSS_12 = FigReentrantMutexCreate();
  CelestialGetModelSpecificName();
  v59 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v59)
  {
    v60 = v59;
    v61 = CFDictionaryGetValue(v59, CFSTR("DefaultVADToSystemSoundVADVolumeRatio"));
    v62 = (uint64_t)v61;
    if (v61)
      CFRetain(v61);
    CFRelease(v60);
  }
  else
  {
    v62 = 0;
  }
  gCMSS_4 = v62;
  gCMSS_5 = (uint64_t)CFDictionaryCreateMutable(v58, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gCMSS_6 = (uint64_t)CFArrayCreateMutable(v58, 0, MEMORY[0x1E0C9B378]);
  gCMSS_7 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (!gCMSS_7)
  {
    v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXInstallSysdiagnoseBlock((uint64_t)CFSTR("CMSessionSystemSoundManagerState"), (uint64_t)&__block_literal_global_70);
}

void cmsmPrewarmVibeForSSID(int a1, uint64_t a2, int a3)
{
  CFNumberRef v4;
  NSObject *v5;
  NSObject *v6;
  const __CFArray *v7;
  CFRange v8;
  CFIndex FirstIndexOfValue;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  int valuePtr;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!gCMSS_6 || !FigVibratorIsVibeSynthEngineAvailable())
  {
    if (!v4)
      return;
    goto LABEL_18;
  }
  if (!a1)
  {
    if (!v4)
      return;
    v7 = (const __CFArray *)gCMSS_6;
    if (gCMSS_6)
      v8.length = CFArrayGetCount((CFArrayRef)gCMSS_6);
    else
      v8.length = 0;
    v8.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v8, v4);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gCMSS_6, FirstIndexOfValue);
      if (gCMSS_6 && CFArrayGetCount((CFArrayRef)gCMSS_6))
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1EE2B3F38)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigVibratorStopPrewarm(0);
      }
    }
    goto LABEL_18;
  }
  if (!gCMSS_6 || !CFArrayGetCount((CFArrayRef)gCMSS_6))
  {
    if (dword_1EE2B3F38)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigVibratorStartPrewarm(0);
LABEL_16:
    if (!v4)
      return;
    goto LABEL_17;
  }
  if (!dword_1EE2B3F38)
    goto LABEL_16;
  v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v4)
  {
LABEL_17:
    CFArrayAppendValue((CFMutableArrayRef)gCMSS_6, v4);
LABEL_18:
    CFRelease(v4);
  }
}

uint64_t cmsmRemoveSystemSoundAudioCategoriesThatMixIn(uint64_t a1)
{
  void *v2;
  BOOL v3;
  void *v4;
  void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  MEMORY[0x1940352BC](gCMSS_12);
  v2 = (void *)gCMSS_7;
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
  {
    v3 = v2 == 0;
  }
  else
  {
    v3 = 1;
  }
  if (v3)
    return MEMORY[0x1940352C8](gCMSS_12);
  v4 = (void *)objc_msgSend(v2, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1));
  if (!v4)
  {
    if (!dword_1EE2B3F38)
      return MEMORY[0x1940352C8](gCMSS_12);
LABEL_10:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x1940352C8](gCMSS_12);
  }
  v5 = v4;
  if (!objc_msgSend(v4, "countForObject:", CFSTR("KeyPressed")))
    goto LABEL_10;
  objc_msgSend(v5, "removeObject:", CFSTR("KeyPressed"));
  if (!objc_msgSend(v5, "count"))
    objc_msgSend(v2, "removeObjectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1));
  return MEMORY[0x1940352C8](gCMSS_12);
}

void CMSystemSoundMgr_ActivateAllSystemSounds()
{
  uint64_t i;

  if (gCMSS_1)
  {
    MEMORY[0x1940352BC](gCMSS_12);
    for (i = gCMSS_0; i; i = *(_QWORD *)i)
    {
      if (*(_BYTE *)(i + 16) && !*(_BYTE *)(i + 18))
      {
        cmsmPrewarmAudioForSSID(1, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
        *(_BYTE *)(i + 18) = 1;
      }
      if (*(_BYTE *)(i + 17))
      {
        if (!*(_BYTE *)(i + 19))
        {
          cmsmPrewarmVibeForSSID(1, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
          *(_BYTE *)(i + 19) = 1;
        }
      }
      CMSMSleep_CreatePrewarmIdleSleepPreventor(*(unsigned int *)(i + 8), *(unsigned int *)(i + 12));
    }
    JUMPOUT(0x1940352C8);
  }
}

void CMSystemSoundMgr_DeactivateAllSystemSounds()
{
  uint64_t i;
  uint64_t v1;

  if (gCMSS_1)
  {
    MEMORY[0x1940352BC](gCMSS_12);
    for (i = gCMSS_0; i; i = *(_QWORD *)i)
    {
      if (*(_BYTE *)(i + 16) && *(_BYTE *)(i + 18))
      {
        v1 = *(unsigned int *)(i + 8);
        if ((v1 - 1103) <= 2)
        {
          cmsmRemoveSystemSoundAudioCategoriesThatMixIn(*(unsigned int *)(i + 12));
          v1 = *(unsigned int *)(i + 8);
        }
        cmsmPrewarmAudioForSSID(0, v1, *(_DWORD *)(i + 12));
        *(_BYTE *)(i + 18) = 0;
      }
      if (*(_BYTE *)(i + 17))
      {
        if (*(_BYTE *)(i + 19))
        {
          cmsmPrewarmVibeForSSID(0, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
          *(_BYTE *)(i + 19) = 0;
        }
      }
      CMSMSleep_ReleasePrewarmIdleSleepPreventor(*(_DWORD *)(i + 8), *(_DWORD *)(i + 12));
    }
    JUMPOUT(0x1940352C8);
  }
}

uint64_t CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio()
{
  return gCMSS_8;
}

const __CFString *CMSystemSoundMgr_SystemSoundMustBeHeard(void *key)
{
  unsigned int v1;
  const __CFString *Value;
  BOOL v3;
  const __CFString *result;

  v1 = key;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)key);
  if (Value)
    v3 = 0;
  else
    v3 = v1 > 0x1000;
  if (v3)
    Value = CFSTR("ThirdPartySystemSound");
  result = CMSystemsoundMgr_GetMappedBehaviorCategory(Value);
  if (result)
    return (const __CFString *)(CFStringHasSuffix(result, CFSTR("AlwaysHeard")) != 0);
  return result;
}

uint64_t CMSessionMgrCopySystemSoundAudioBehavior(uint64_t a1, __CFDictionary **a2)
{
  void *v4;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  int ApplicationStateForPID;
  int v9;
  NSObject *v10;
  MXSessionManager *v11;
  double v12;
  __CFDictionary *v13;
  const __CFString *v14;
  __CFString *MappedBehaviorCategory;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CFNumberRef v20;
  const void *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  float valuePtr;
  os_log_type_t type[4];
  unsigned __int8 v32;
  char v33;
  char v34;
  char v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[24];
  int v43;
  _QWORD v44[8];
  int v45;
  unsigned int v46;
  unsigned __int8 v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x194035B20]();
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (a1)
  {
    if (!gSystemSoundAudioBehaviors)
    {
LABEL_38:
      v7 = 0;
      goto LABEL_56;
    }
    v37 = 0;
    FigCFDictionaryGetInt32IfPresent();
    v36 = 0;
    FigCFDictionaryGetInt32IfPresent();
    v35 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v34 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v33 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v32 = 0;
    if (MX_FeatureFlags_IsOnenessEnabled()
      && !MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled())
    {
      FigCFDictionaryGetBooleanIfPresent();
    }
    Value = CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, 0);
    if (dword_1EE2B3F38)
    {
      LODWORD(v38) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ApplicationStateForPID = MX_RunningBoardServices_GetApplicationStateForPID(v36, 1);
    valuePtr = 0.0;
    *(_DWORD *)type = 0;
    if (ApplicationStateForPID == 4)
    {
      if (CMSMUtility_FetchBackgroundEntitlement(v36))
        goto LABEL_14;
      ApplicationStateForPID = MX_RunningBoardServices_GetApplicationStateForPID(+[MXSystemController getPIDToInheritAppStateFromForPID:](MXSystemController, "getPIDToInheritAppStateFromForPID:", v36), 1);
    }
    if ((ApplicationStateForPID & 0xFFFFFFF7) == 0)
      goto LABEL_15;
    if (ApplicationStateForPID != 4)
    {
LABEL_21:
      v13 = 0;
LABEL_54:
      v7 = 0;
      goto LABEL_55;
    }
LABEL_14:
    if (CMSMUtility_FetchBackgroundEntitlement(v36))
    {
LABEL_15:
      v9 = v32;
      if (gCMSS_2 != 1)
      {
        *(_QWORD *)v42 = 0;
        *(_QWORD *)&v42[8] = v42;
        *(_QWORD *)&v42[16] = 0x2020000000;
        v43 = 0;
        v38 = 0;
        v39 = &v38;
        v40 = 0x2020000000;
        v41 = 0;
        v10 = MXGetSerialQueue();
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 3221225472;
        v44[2] = __cmsmSystemSoundShouldPlay_block_invoke;
        v44[3] = &unk_1E309EA50;
        v45 = 0;
        v46 = v36;
        v47 = v32;
        v44[4] = v42;
        v48 = v35;
        v49 = v34;
        v50 = v33;
        v44[6] = type;
        v44[7] = &valuePtr;
        v44[5] = &v38;
        MXDispatchAsyncAndWait((uint64_t)"cmsmSystemSoundShouldPlay", (uint64_t)"CMSessionManager_SystemSounds.m", 3711, 0, 0, v10, (uint64_t)v44);
        if (MX_FeatureFlags_IsAsyncDuckingEnabled() && (*(_BYTE *)(*(_QWORD *)&v42[8] + 25) & 1) != 0)
        {
          v11 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
          LODWORD(v12) = 0.5;
          -[MXSessionManager sleepForAsyncDucking:duration:](v11, "sleepForAsyncDucking:duration:", 1, v12);
        }
        v7 = *((unsigned int *)v39 + 6);
        _Block_object_dispose(&v38, 8);
        _Block_object_dispose(v42, 8);
        if ((_DWORD)v7)
        {
          v13 = 0;
LABEL_55:
          *a2 = v13;
          goto LABEL_56;
        }
        v9 = v32;
      }
      v14 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, 0);
      MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v14);
      v16 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(MappedBehaviorCategory, v9);
      v13 = v16;
      if (v16)
      {
        v17 = (const void *)*MEMORY[0x1E0C9AE50];
        v18 = (const void *)*MEMORY[0x1E0C9AE40];
        if ((type[0] & 1) != 0)
          v19 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v19 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v16, CFSTR("Audio"), v19);
        if (valuePtr != 0.0)
        {
          v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
          CFDictionarySetValue(v13, CFSTR("AudioVolume"), v20);
          if (v20)
            CFRelease(v20);
        }
        v21 = v18;
        if ((type[0] & 2) != 0)
        {
          if (CMSMDeviceState_IsVibrationDisabled()
            && (objc_msgSend((id)gSystemSoundsDoNotObeyAccessibilityVibrationSetting, "containsObject:", Value) & 1) == 0)
          {
            LODWORD(v38) = 0;
            v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v23 = v38;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              v24 = v23;
            else
              v24 = v23 & 0xFFFFFFFE;
            if (v24)
            {
              *(_DWORD *)v42 = 136315394;
              *(_QWORD *)&v42[4] = "CMSessionMgrCopySystemSoundAudioBehavior";
              *(_WORD *)&v42[12] = 2114;
              *(_QWORD *)&v42[14] = Value;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v21 = v17;
        }
        CFDictionarySetValue(v13, CFSTR("Vibration"), v21);
        if ((type[0] & 8) != 0)
          v25 = v17;
        else
          v25 = v18;
        CFDictionarySetValue(v13, CFSTR("NeedsFinishCall"), v25);
        if ((type[0] & 0x10) != 0)
          v26 = v17;
        else
          v26 = v18;
        CFDictionarySetValue(v13, CFSTR("SynchronizedSystemSound"), v26);
        if ((type[0] & 0x40) != 0)
          v27 = v17;
        else
          v27 = v18;
        CFDictionarySetValue(v13, CFSTR("InterruptCurrentSystemSounds"), v27);
        if ((type[0] & 0x80) != 0)
          v28 = v17;
        else
          v28 = v18;
        CFDictionarySetValue(v13, CFSTR("NeedsUnduckCall"), v28);
        goto LABEL_54;
      }
      goto LABEL_38;
    }
    goto LABEL_21;
  }
  v7 = 4294954316;
LABEL_56:
  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_193765974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void CMSessionMgrSystemSoundDidFinish(int a1)
{
  void *v2;
  NSObject *v3;
  MXSessionManager *v4;
  double v5;
  _QWORD v6[5];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v2 = (void *)MEMORY[0x194035B20]();
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CMSessionMgrSystemSoundDidFinish_block_invoke;
  v6[3] = &unk_1E309BF78;
  v7 = a1;
  v6[4] = &v8;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundDidFinish", (uint64_t)"CMSessionManager_SystemSounds.m", 4226, 0, 0, v3, (uint64_t)v6);
  if (*((_BYTE *)v9 + 24))
  {
    v4 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    LODWORD(v5) = 0.5;
    -[MXSessionManager sleepForAsyncDucking:duration:](v4, "sleepForAsyncDucking:duration:", 0, v5);
  }
  _Block_object_dispose(&v8, 8);
  objc_autoreleasePoolPop(v2);
}

void sub_193765BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void cmsmSystemSoundDidFinishGuts(unsigned int a1, int a2, _BYTE *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  BOOL v12;
  char v13;
  NSObject *v14;
  __CFArray *v15;
  NSPointerArray *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const __CFString *Value;
  BOOL v24;
  __CFString *MappedBehaviorCategory;
  uint64_t CurrentVADForSystemSoundAudioCategory;
  __CFString *CurrentAudioDestination;
  __CFString *VADNameForVADID;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  NSPointerArray *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  __CFArray *v41;
  NSPointerArray *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t j;
  void *v49;
  __CFArray *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[4];
  unsigned int v69;
  os_log_type_t type;
  unsigned int v71;
  int v72;
  const char *v73;
  __int16 v74;
  uint64_t v75;
  _BYTE v76[128];
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    v71 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = gCMSS_8;
  if (gCMSS_8 <= 1)
    v7 = 1;
  gCMSS_8 = v7 - 1;
  MEMORY[0x1940352BC](gCMSM);
  v8 = dword_1EE2B3C78;
  if (a1 && !a2)
  {
    if (dword_1EE2B3C78 <= 1)
      v9 = 1;
    else
      v9 = dword_1EE2B3C78;
    dword_1EE2B3C78 = v9 - 1;
  }
  if (!gCMSS_9)
    goto LABEL_25;
  dispatch_source_cancel((dispatch_source_t)gCMSS_9);
  if (gCMSS_9)
    dispatch_release((dispatch_object_t)gCMSS_9);
  v10 = a1 == 1117 || v8 == 0;
  v11 = !v10;
  v12 = gCMSS_11 != a1 && a2 == 0;
  gCMSS_9 = 0;
  if (!v12 && !v11)
  {
LABEL_25:
    v13 = 1;
LABEL_26:
    if (a1 != 1117)
    {
      if (v8)
      {
        if (a2
          || (v14 = MXGetSerialQueue(),
              v68[0] = MEMORY[0x1E0C809B0],
              v68[1] = 3221225472,
              v68[2] = __cmsmSystemSoundDidFinishGuts_block_invoke,
              v68[3] = &__block_descriptor_36_e5_v8__0l,
              v69 = a1,
              (gCMSS_9 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v14, 1.0, (uint64_t)v68, 0, 0)) != 0))
        {
          if ((v13 & 1) != 0)
          {
            MEMORY[0x1940352C8](gCMSM);
          }
          else
          {
            v41 = cmsmCopySessionsToUnduck(gCMSS_11);
            MEMORY[0x1940352C8](gCMSM);
            if (v41)
            {
              cmsmUnduckSessions(v41, gCMSS_11, a3);
              CFRelease(v41);
            }
          }
          gCMSS_11 = a1;
          return;
        }
      }
    }
    goto LABEL_36;
  }
  if (a1 != 1117)
  {
    v13 = 0;
    goto LABEL_26;
  }
  v15 = cmsmCopySessionsToUnduck(gCMSS_11);
  MEMORY[0x1940352C8](gCMSM);
  if (v15)
  {
    cmsmUnduckSessions(v15, gCMSS_11, a3);
    CFRelease(v15);
  }
  MEMORY[0x1940352BC](gCMSM);
LABEL_36:
  v55 = a2;
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v51, v53), "mxCoreSessionListBeginIteration");
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v16 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v17 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v64, v78, 16);
  if (!v17)
  {
    v19 = 0;
    goto LABEL_66;
  }
  v18 = v17;
  v19 = 0;
  v20 = *(_QWORD *)v65;
  do
  {
    v21 = 0;
    do
    {
      if (*(_QWORD *)v65 != v20)
        objc_enumerationMutation(v16);
      v22 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v21);
      if (CMSUtility_GetIsActive(v22) && (objc_msgSend(v22, "currentlyControllingFlags") & 2) != 0)
      {
        if (!objc_msgSend(v22, "hasPhoneCallBehavior") || !FigCFArrayContainsValue())
          goto LABEL_58;
        Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)a1);
        if (Value)
          v24 = 0;
        else
          v24 = a1 > 0x1000;
        if (v24)
          Value = CFSTR("ThirdPartySystemSound");
        if (!Value
          || (MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(Value),
              CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0), CurrentAudioDestination = CMSUtility_GetCurrentAudioDestination(v22), VADNameForVADID = CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory), !CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice((uint64_t)CurrentAudioDestination, (uint64_t)VADNameForVADID)))
        {
LABEL_58:
          cmsTryToTakeControl(v22);
LABEL_59:
          v19 = 1;
          goto LABEL_60;
        }
        if (!dword_1EE2B3F38)
          goto LABEL_59;
        v71 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v30 = v71;
        if (os_log_type_enabled(v29, type))
          v31 = v30;
        else
          v31 = v30 & 0xFFFFFFFE;
        if (v31)
        {
          v32 = objc_msgSend(v22, "clientName");
          v72 = 136315394;
          v73 = "cmsmShouldSessionWithRouteControlTryToTakeControl";
          v74 = 2048;
          v75 = v32;
          LODWORD(v54) = 22;
          v52 = &v72;
          _os_log_send_and_compose_impl();
        }
        v19 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_60:
      ++v21;
    }
    while (v18 != v21);
    v33 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v64, v78, 16);
    v18 = v33;
  }
  while (v33);
LABEL_66:
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v52, v54), "mxCoreSessionListEndIteration");
  if (!v19)
  {
    -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v34 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
    v35 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", &v60, v77, 16);
    if (v35)
    {
      v36 = v35;
      v37 = 0;
      v38 = *(_QWORD *)v61;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v61 != v38)
            objc_enumerationMutation(v34);
          v40 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
          if (objc_msgSend(v40, "systemSoundHasModifiedCurrentlyControllingFlags")
            && objc_msgSend(v40, "prefersToTakeHWControlFlagsFromAnotherSession")
            && CMSUtility_GetIsActive(v40))
          {
            objc_msgSend(v40, "setSystemSoundHasModifiedCurrentlyControllingFlags:", 0);
            cmsTryToTakeControl(v40);
            v37 = 1;
          }
        }
        v36 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", &v60, v77, 16);
      }
      while (v36);
    }
    else
    {
      v37 = 0;
    }
    -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!v37)
    {
      -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v42 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
      v43 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v56, v76, 16);
      if (v43)
      {
        v44 = v43;
        v45 = 0;
        v46 = *(_QWORD *)v57;
        v47 = v55;
        do
        {
          for (j = 0; j != v44; ++j)
          {
            if (*(_QWORD *)v57 != v46)
              objc_enumerationMutation(v42);
            v49 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * j);
            if (objc_msgSend(v49, "systemSoundHasModifiedCurrentlyControllingFlags")
              && (objc_msgSend(v49, "prefersToTakeHWControlFlagsFromAnotherSession") & 1) == 0
              && CMSUtility_GetIsActive(v49))
            {
              objc_msgSend(v49, "setSystemSoundHasModifiedCurrentlyControllingFlags:", 0);
              cmsTryToTakeControl(v49);
              v45 = 1;
            }
          }
          v44 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v56, v76, 16);
        }
        while (v44);
      }
      else
      {
        v45 = 0;
        v47 = v55;
      }
      -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
      if (v47 && !v45)
        PVMSetEnabled(1);
    }
  }
  v50 = cmsmCopySessionsToUnduck(a1);
  MEMORY[0x1940352C8](gCMSM);
  if (v50)
  {
    cmsmUnduckSessions(v50, a1, a3);
    CFRelease(v50);
  }
}

void CMSessionMgrSystemSoundUnduckMedia(int a1)
{
  NSObject *v2;
  MXSessionManager *v3;
  double v4;
  _QWORD v5[5];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CMSessionMgrSystemSoundUnduckMedia_block_invoke;
  v5[3] = &unk_1E309BF78;
  v6 = a1;
  v5[4] = &v7;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundUnduckMedia", (uint64_t)"CMSessionManager_SystemSounds.m", 4259, 0, 0, v2, (uint64_t)v5);
  if (*((_BYTE *)v8 + 24))
  {
    v3 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    LODWORD(v4) = 0.5;
    -[MXSessionManager sleepForAsyncDucking:duration:](v3, "sleepForAsyncDucking:duration:", 0, v4);
  }
  _Block_object_dispose(&v7, 8);
}

void sub_19376674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSessionMgrSystemSoundActivate(int a1, char a2)
{
  CMSessionMgrSystemSoundActivateForPID(a1, a2, 0);
}

uint64_t CMSessionMgrVibrateForSystemSoundWithOptions(int a1, const __CFDictionary *a2)
{
  void *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  const void *v7;
  const __CFData *v8;
  const UInt8 *BytePtr;
  uint64_t v10;
  const __CFBoolean *v11;
  Boolean v12;
  const void *v13;
  const __CFBoolean *v14;
  Boolean v15;
  NSObject *v16;
  int v18;
  int valuePtr;
  _QWORD v20[8];
  int v21;
  Boolean v22;
  Boolean v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v4 = (void *)MEMORY[0x194035B20]();
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  if (a2)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Duration"));
    valuePtr = 0;
    if (Value)
      CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    v6 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Intensity"));
    v18 = 0;
    if (v6)
      CFNumberGetValue(v6, kCFNumberFloatType, &v18);
    v7 = CFDictionaryGetValue(a2, CFSTR("VibrationPattern"));
    v8 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("Synchronizer"));
    if (v8)
      BytePtr = CFDataGetBytePtr(v8);
    else
      BytePtr = 0;
    v11 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("Loop"));
    if (v11)
      v12 = CFBooleanGetValue(v11);
    else
      v12 = 0;
    v13 = CFDictionaryGetValue(a2, CFSTR("DidFinishContext"));
    v14 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("CancelCurrentVibePattern"));
    if (v14)
      v15 = CFBooleanGetValue(v14);
    else
      v15 = 0;
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    v16 = MXGetSerialQueue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __cmsmVibrateForSystemSoundInternal_block_invoke;
    v20[3] = &unk_1E309EA78;
    v21 = a1;
    v20[4] = &v24;
    v20[5] = v7;
    v22 = v12;
    v20[6] = BytePtr;
    v20[7] = v13;
    v23 = v15;
    MXDispatchAsyncAndWait((uint64_t)"cmsmVibrateForSystemSoundInternal", (uint64_t)"CMSessionManager_SystemSounds.m", 4823, 0, 0, v16, (uint64_t)v20);
    v10 = *((unsigned int *)v25 + 6);
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    v10 = 4294954315;
  }
  objc_autoreleasePoolPop(v4);
  return v10;
}

void sub_193766AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSessionMgrVibratorStopWithOptions(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = (void *)MEMORY[0x194035B20]();
  +[MXInitialization waitUntilMXIsFullyInitialized](MXInitialization, "waitUntilMXIsFullyInitialized");
  v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSessionMgrVibratorStopWithOptions_block_invoke;
  v4[3] = &__block_descriptor_40_e5_v8__0l;
  v4[4] = a1;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrVibratorStopWithOptions", (uint64_t)"CMSessionManager_SystemSounds.m", 5060, 0, 0, v3, (uint64_t)v4);
  objc_autoreleasePoolPop(v2);
}

void cmsmWordyToCompact(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v9;
  const void *ValueAtIndex;
  const void *v11;
  const void *v12;
  BOOL v13;
  const void *v15;
  int v16;
  int v17;
  int v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  int v22;
  int v23;
  const void *v24;
  CFTypeID v25;
  uint64_t i;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;

  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1)
    || (v7 = CFArrayGetTypeID(), v7 != CFGetTypeID(a2))
    || (ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, CFSTR(","))) == 0)
  {
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v9 = ArrayBySeparatingStrings;
  if (CFArrayGetCount(ArrayBySeparatingStrings) != 3)
    goto LABEL_47;
  ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
  v11 = CFArrayGetValueAtIndex(v9, 1);
  v12 = CFArrayGetValueAtIndex(v9, 2);
  v13 = !ValueAtIndex || v11 == 0;
  if (v13 || v12 == 0)
    goto LABEL_47;
  v15 = v12;
  if (CFEqual(ValueAtIndex, CFSTR("RingVibrateOff")))
  {
    v16 = 16;
  }
  else if (CFEqual(ValueAtIndex, CFSTR("RingVibrateOn")))
  {
    v16 = 32;
  }
  else
  {
    if (!CFEqual(ValueAtIndex, CFSTR("RingVibrateIgnore")))
      goto LABEL_47;
    v16 = 48;
  }
  if (CFEqual(v11, CFSTR("SilentVibrateOff")))
  {
    v17 = 4;
  }
  else if (CFEqual(v11, CFSTR("SilentVibrateOn")))
  {
    v17 = 8;
  }
  else
  {
    if (!CFEqual(v11, CFSTR("SilentVibrateIgnore")))
      goto LABEL_47;
    v17 = 12;
  }
  if (CFEqual(v15, CFSTR("RingerSwitchOff")))
  {
    v18 = 1;
    goto LABEL_31;
  }
  if (CFEqual(v15, CFSTR("RingerSwitchOn")))
  {
    v18 = 2;
    goto LABEL_31;
  }
  if (CFEqual(v15, CFSTR("RingerSwitchIgnore")))
  {
    v18 = 3;
LABEL_31:
    v33 = v18;
    Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count < 1)
    {
      LOBYTE(v23) = 0;
    }
    else
    {
      v20 = Count;
      v32 = v17;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = CFArrayGetValueAtIndex((CFArrayRef)a2, v21);
        if (!v24 || (v25 = CFStringGetTypeID(), v25 != CFGetTypeID(v24)))
          v22 = 1;
        if (CFEqual(v24, CFSTR("Beep")))
        {
          v23 |= 1u;
        }
        else if (CFEqual(v24, CFSTR("Vibrate")))
        {
          v23 |= 2u;
        }
        else if (CFEqual(v24, CFSTR("Synchronize")))
        {
          v23 |= 0x10u;
        }
        else if (CFEqual(v24, CFSTR("Interrupt")))
        {
          v23 |= 0x40u;
        }
        else
        {
          v22 = 1;
        }
        ++v21;
      }
      while (v20 != v21);
      v17 = v32;
      if (v22)
        goto LABEL_47;
    }
    for (i = 0; i != 8; ++i)
    {
      if ((i & 1) != 0)
        v27 = 2;
      else
        v27 = 1;
      if ((i & 2) != 0)
        v28 = 8;
      else
        v28 = 4;
      v29 = v27 | v28;
      if ((i & 4) != 0)
        v30 = 32;
      else
        v30 = 16;
      if (((v29 | v30) & ~(v16 | v17 | v33)) == 0)
      {
        v31 = a3 + i;
        *(_BYTE *)(v31 + 8) = v23;
        *(_BYTE *)(v31 + 16) = 1;
      }
    }
    goto LABEL_48;
  }
LABEL_47:
  *(_BYTE *)(a3 + 24) = 0;
LABEL_48:
  CFRelease(v9);
}

const __CFArray *cmsmCopyDestinationsWithoutElement(CFArrayRef theArray, uint64_t a2)
{
  const __CFArray *MutableCopy;
  const __CFArray *v4;
  CFIndex v5;

  if (!theArray)
    return 0;
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  v4 = MutableCopy;
  if (a2 && CFArrayGetCount(MutableCopy) >= 1)
  {
    v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v4, v5);
      if (FigCFEqual())
        break;
      if (++v5 >= CFArrayGetCount(v4))
        return v4;
    }
    CFArrayRemoveValueAtIndex(v4, v5);
  }
  return v4;
}

void __cmsmSystemSoundShouldPlay_block_invoke(uint64_t a1)
{
  uint64_t UpTimeNanoseconds;
  void *v3;
  int v4;
  BOOL v5;
  NSObject *v9;
  int v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  __CFNotificationCenter *LocalCenter;
  int v18;
  unsigned int v19;
  int IsBluetoothSharingSessionEnabledForMediaPlayback;
  const __CFArray *v21;
  const __CFArray *A2DPPort;
  _BOOL4 ShouldBTPortBeTreatedAsInEar;
  BOOL v24;
  int v25;
  unint64_t v26;
  const __CFString *v27;
  BOOL v28;
  NSObject *v29;
  const void *active;
  _BOOL4 v31;
  const __CFArray *v32;
  const __CFArray *v33;
  const __CFString *Value;
  BOOL v35;
  __CFString *MappedBehaviorCategory;
  int CurrentVADForSystemSoundAudioCategory;
  unsigned int v38;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v40;
  BOOL v41;
  __CFString *v42;
  AudioObjectID v43;
  _BOOL4 IsCategoryInputOnly;
  NSObject *v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v3 = (void *)*(unsigned int *)(a1 + 64);
  v4 = *(unsigned __int8 *)(a1 + 72);
  if (cmsmSkipPlayingSystemSound_onceToken != -1)
    dispatch_once(&cmsmSkipPlayingSystemSound_onceToken, &__block_literal_global_102_0);
  if (gSystemSoundRingerSettings)
    v5 = gSystemSoundRoutingForCategories == 0;
  else
    v5 = 1;
  if (v5 || gSystemSoundLowersMusicVolume == 0 || gSystemSoundMaxVolume == 0)
    goto LABEL_107;
  if (objc_msgSend((id)cmsmSkipPlayingSystemSound_unskippableSystemSounds, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v3)))
  {
    if (!dword_1EE2B3F38)
      goto LABEL_22;
    goto LABEL_17;
  }
  if (!CMSystemSoundMgr_SystemSoundMustBeHeard(v3))
  {
    if (-[MXSessionManager isSessionWithAudioModeActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioModeActive:", CFSTR("Enrollment")))
    {
      if (dword_1EE2B3F38)
        goto LABEL_107;
    }
    else if (-[MXSessionManager wombatEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "wombatEnabled"))
    {
      if (dword_1EE2B3F38)
        goto LABEL_107;
    }
    else
    {
      if (MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled())
      {
        active = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
        CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
        if (FigCFEqual())
          v31 = vaemContinuityScreenOutputIsConnected() != 0;
        else
          v31 = 0;
        Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, v3);
        if (Value)
          v35 = 0;
        else
          v35 = v3 > 0x1000;
        if (v35)
          Value = CFSTR("ThirdPartySystemSound");
        MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(Value);
        CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0);
        v38 = -[MXSessionManager speakerAlertVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speakerAlertVADID");
        if (active)
          CFRelease(active);
        if (CurrentVADForSystemSoundAudioCategory == v38)
          v31 = 0;
        if (v31 && dword_1EE2B3F38)
        {
          v46 = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v31)
          goto LABEL_21;
      }
      if (FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABBE8)
        || !FigCFArrayContainsValue()
        || !CMSMUtility_SomeClientIsPlaying())
      {
        goto LABEL_110;
      }
      v40 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, v3);
      if (v40)
        v41 = 0;
      else
        v41 = v3 > 0x1000;
      if (v41)
        v40 = CFSTR("ThirdPartySystemSound");
      v42 = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v40);
      v43 = cmsmGetCurrentVADForSystemSoundAudioCategory(v42, v4);
      IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly(0);
      if (vaemIsNotCurrentDeviceFormat(v43, IsCategoryInputOnly))
      {
        if (dword_1EE2B3F38)
        {
LABEL_107:
          v46 = 0;
          v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
LABEL_110:
        if (!CMSMUtility_IsSomeClientRecording()
          || !CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds()
          || cmsmSystemSoundShouldPlayDuringRecording((int)v3))
        {
          goto LABEL_22;
        }
        if (dword_1EE2B3F38)
          goto LABEL_107;
      }
    }
LABEL_21:
    **(_DWORD **)(a1 + 48) = 0;
    return;
  }
  if (dword_1EE2B3F38)
  {
LABEL_17:
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_22:
  v46 = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = cmsmGetUpdatedSystemSoundPlayFlags((void *)*(unsigned int *)(a1 + 64), *(_DWORD *)(a1 + 68), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), *(float **)(a1 + 56), 0, &v46, *(_BYTE *)(a1 + 72));
  if (FigGetUpTimeNanoseconds() - UpTimeNanoseconds >= 1000001000)
  {
    v10 = *(_DWORD *)(a1 + 64);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (CMSMDeviceState_ItsAnAppleTV())
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = 0;
      gCMSS_2 = 1;
      if (gCMSS_10)
      {
        dispatch_source_cancel((dispatch_source_t)gCMSS_10);
        if (gCMSS_10)
        {
          dispatch_release((dispatch_object_t)gCMSS_10);
          gCMSS_10 = 0;
        }
      }
      v13 = MXGetSerialQueue();
      gCMSS_10 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v13, 0.25, (uint64_t)&__block_literal_global_131, 0, 0);
      if (!gCMSS_10)
        gCMSS_2 = 0;
      if ((v12 & 8) != 0)
        CMSessionMgrSystemSoundDidFinish(v10);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(_DWORD *)(v14 + 24);
  if ((v15 & 1) != 0)
    ++gCMSS_8;
  *(_DWORD *)(v14 + 24) = v15 & 0xFFFFFFF7 | (8 * (v15 & 1));
  v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if ((v16 & 2) != 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("VibeWillStart"), 0, 0, 1u);
    v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  v18 = *(_DWORD *)(a1 + 64);
  v19 = v46;
  IsBluetoothSharingSessionEnabledForMediaPlayback = CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback();
  if ((v16 & v19 & 1) != 0 && !IsBluetoothSharingSessionEnabledForMediaPlayback)
  {
    v21 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
    A2DPPort = cmsmGetA2DPPort(v21);
    if (v21)
      CFRelease(v21);
    if ((_DWORD)A2DPPort && vaeDoesPortSupportMultipleConnections((uint64_t)A2DPPort))
    {
      if (vaeDoesBTPortSupportInEarDetection((AudioObjectID)A2DPPort))
        ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar((AudioObjectID)A2DPPort);
      else
        ShouldBTPortBeTreatedAsInEar = 1;
    }
    else
    {
      ShouldBTPortBeTreatedAsInEar = 0;
    }
    if (!CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
    {
      if (CMSMDeviceState_ItsAnAppleWatch())
      {
        v24 = v18 == 1413 || v18 == 1403;
        v25 = v24;
      }
      else
      {
        v25 = 1;
      }
      if ((ShouldBTPortBeTreatedAsInEar & v25) == 1
        && !vaeGetBTPortOwnsSharedAudioConnection((uint64_t)A2DPPort))
      {
        v32 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        v33 = cmsmGetA2DPPort(v32);
        if (v32)
          CFRelease(v32);
        if ((_DWORD)v33)
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = vaeRequestOwnershipOnBTPort((uint64_t)v33);
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
            vaeMakePortRoutable((int)v33, 1, 0, qword_1EE2B3CF0);
        }
      }
    }
  }
  v26 = *(unsigned int *)(a1 + 64);
  v27 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)v26);
  if (v27)
    v28 = 0;
  else
    v28 = v26 > 0x1000;
  if (v28)
    v27 = CFSTR("ThirdPartySystemSound");
  CMSystemsoundMgr_GetMappedBehaviorCategory(v27);
  if (dword_1EE2B3F38)
  {
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t __cmsmSkipPlayingSystemSound_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", &unk_1E30C1428, &unk_1E30C1440, 0);
  cmsmSkipPlayingSystemSound_unskippableSystemSounds = result;
  return result;
}

uint64_t cmsmSystemSoundShouldPlayDuringRecording(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 1152)
  {
    if (((a1 - 1061) > 0x3D || ((1 << (a1 - 37)) & 0x37FE800000004001) == 0)
      && (a1 - 30) >= 0xA)
    {
      return 0;
    }
  }
  else if (a1 <= 1262)
  {
    v3 = a1 - 1153;
    if (v3 > 0x3A || ((1 << v3) & 0x7FF800000000003) == 0)
      return 0;
  }
  else if (((a1 - 1263) > 0xB || ((1 << (a1 + 17)) & 0xF83) == 0)
         && ((a1 - 1364) > 0x28 || ((1 << (a1 - 84)) & 0x1002000000FLL) == 0)
         && (a1 - 1556) >= 2)
  {
    return 0;
  }
  return result;
}

void cmsmGetSystemSoundMaxVolume(const void *a1)
{
  void *v2;
  const void *CurrentRouteTypeForSystemSoundAtIndex;
  void *v4;
  void *v5;
  float v6;
  float v7;
  const __CFDictionary *v8;
  const void *v9;
  CFTypeRef v10;
  const __CFNumber *Value;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _OWORD v17[2];
  uint64_t v18;
  int valuePtr;

  *(float *)&valuePtr = 1.0;
  if (a1 && (v2 = (void *)objc_msgSend((id)gSystemSoundMinVolume, "objectForKey:", a1)) != 0
    || (v2 = (void *)objc_msgSend((id)gSystemSoundMinVolume, "objectForKey:", CFSTR("Default"))) != 0)
  {
    CurrentRouteTypeForSystemSoundAtIndex = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
    v4 = (void *)PVMCopyMappedRoute(CurrentRouteTypeForSystemSoundAtIndex);
    if (v4 && (v5 = (void *)objc_msgSend(v2, "objectForKey:", v4)) != 0
      || (v5 = (void *)objc_msgSend(v2, "objectForKey:", CFSTR("Default"))) != 0)
    {
      objc_msgSend(v5, "floatValue");
      v7 = v6;
    }
    else
    {
      v7 = 0.0;
    }

  }
  else
  {
    v7 = 0.0;
  }
  if (a1 && (v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundMaxVolume, a1)) != 0
    || (v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundMaxVolume, CFSTR("Default"))) != 0)
  {
    v9 = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
    v10 = PVMCopyMappedRoute(v9);
    if (!v10 || (Value = (const __CFNumber *)CFDictionaryGetValue(v8, v10)) == 0)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("Default"));
      if (!Value)
      {
        if (!v10)
          return;
        goto LABEL_31;
      }
    }
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    v12 = PVMGetVolumeMultiplier();
    if (objc_msgSend((id)gSystemSoundsWithNoVolumeAdjustment, "containsObject:", a1))
    {
      v12 = 1.0;
      v13 = *(float *)&valuePtr;
    }
    else
    {
      v13 = 1.0;
      if (a1
        && PVMCategoriesAreEquivalent((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", a1), 0, CFSTR("ThirdPartySystemSound"), 0))
      {
        PVMGetThirdPartyVolumeMultiplier();
        v12 = v14;
      }
    }
    if (FigCFEqual())
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      v15 = PVMGetVolumePreference(CFSTR("Ringtone"), 0, (uint64_t)v17);
    }
    else
    {
      v15 = *(float *)&valuePtr;
    }
    v16 = v12 * v15;
    if (v16 >= v13)
      v16 = v13;
    if (v7 > v16)
      v16 = v7;
    *(float *)&valuePtr = v16;
    if (v10)
LABEL_31:
      CFRelease(v10);
  }
}

BOOL cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(unsigned int a1)
{
  _BOOL8 result;

  if (a1 > 0x1000)
    return 1;
  result = 1;
  if (a1 - 1000 > 0xF || ((1 << (a1 + 24)) & 0x808B) == 0)
    return a1 == 1106;
  return result;
}

void cmsmAddPrewarmedAudioCategoriesThatMixIn(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;

  MEMORY[0x1940352BC](gCMSS_12);
  for (i = gCMSS_0; i; i = *(_QWORD *)i)
  {
    if (FigCFEqual()
      && *(_DWORD *)(i + 12) == (_DWORD)a1
      && *(_BYTE *)(i + 18)
      && (*(_DWORD *)(i + 8) - 1103) <= 2)
    {
      MEMORY[0x1940352BC](gCMSS_12);
      v5 = (void *)gCMSS_7;
      if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")&& v5)
      {
        v6 = (void *)objc_msgSend(v5, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1));
        if (!v6)
        {
          v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3550], "set");
          objc_msgSend(v5, "setObject:forKey:", v6, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1));
        }
        objc_msgSend(v6, "addObject:", a2);
      }
      MEMORY[0x1940352C8](gCMSS_12);
    }
  }
  JUMPOUT(0x1940352C8);
}

float cmsmGetSystemSoundVolumeScalarForCurrentRoute(void *a1, int a2)
{
  const __CFDictionary *v4;
  float v5;

  if (PVMGetEnabled())
  {
    v4 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(a1, a2);
    cmsGetCurrentSystemSoundVADForAudioBehaviour();
    v5 = PVMGetCurrentPreferredRawVolume();
    if (v4)
      CFRelease(v4);
    cmsmGetSystemSoundVolumeScalarForRawVolume(a1, v5);
  }
  return 1.0;
}

void cmsmGetSystemSoundVolumeScalarForRawVolume(const void *a1, float a2)
{
  float v3;
  float v4;
  _BOOL4 v5;

  cmsmGetSystemSoundMaxVolume(a1);
  v4 = v3;
  v5 = PVMGetEnabled();
  if (v4 < a2)
    PVMSetEnabled(1);
  PVMSetEnabled(v5);
}

float sub_193768324()
{
  uint64_t v0;
  float v1;

  if (*MEMORY[0x1E0C80C00] != *(_QWORD *)(v0 - 104))
    JUMPOUT(0x193768540);
  return cmsmGetAdjustedVolumeScalarForReceiverRoutes(1.0, v1);
}

float cmsmGetAdjustedVolumeScalarForReceiverRoutes(float a1, float a2)
{
  double v4;
  float v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue())
    return a1;
  if (a2 <= 0.5)
  {
    v5 = fminf(a1, 0.5);
  }
  else
  {
    v4 = (float)(1.0 - a2);
    if (v4 < 0.3)
      v4 = 0.3;
    v5 = v4 <= a1 ? v4 : a1;
  }
  if (v5 == a1)
    return a1;
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t cmsmConvertToDecibelInVAD(uint64_t a1, float *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, uint64_t, float *, CFTypeRef *);
  uint64_t v6;
  const __CFNumber *v7;
  CFTypeRef cf;

  if (!a2)
    return 4294954315;
  cf = 0;
  v4 = qword_1EE2B3BE0;
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t, float *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                              + 40);
  if (v5)
  {
    v6 = v5(v4, CFSTR("VAEM_DecibelEquivalentInVAD"), *MEMORY[0x1E0C9AE00], a1, a2, &cf);
    v7 = (const __CFNumber *)cf;
  }
  else
  {
    v7 = 0;
    v6 = 4294954514;
  }
  *a2 = MXCFNumberGetValueFloat32(v7);
  if (cf)
    CFRelease(cf);
  return v6;
}

void __cmsmRunSystemSoundWatchdogForAppleTV_block_invoke()
{
  if (gCMSS_10)
  {
    dispatch_source_cancel((dispatch_source_t)gCMSS_10);
    if (gCMSS_10)
    {
      dispatch_release((dispatch_object_t)gCMSS_10);
      gCMSS_10 = 0;
    }
  }
  gCMSS_2 = 0;
}

__CFArray *cmsmCopySessionsToUnduck(unsigned int a1)
{
  MXDuckingSource *v2;
  double v3;
  double v4;
  MXDuckingSource *v5;
  __CFArray *Mutable;
  NSPointerArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = [MXDuckingSource alloc];
  LODWORD(v3) = 0;
  LODWORD(v4) = 0;
  v5 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v2, "initWithType:ID:duckVolume:duckFadeDuration:", 0, a1, v3, v4);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", 0), "mxCoreSessionList");
  v8 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(const void **)(*((_QWORD *)&v14 + 1) + 8 * v11);
        if (-[MXSessionManager isSessionDucked:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionDucked:duckingSource:", v12, v5))
        {
          CFArrayAppendValue(Mutable, v12);
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");

  return Mutable;
}

void cmsmUnduckSessions(const __CFArray *a1, unsigned int a2, _BYTE *a3)
{
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  MXDuckingSource *v9;
  double v10;
  double v11;
  MXDuckingSource *v12;
  float v13;

  Count = CFArrayGetCount(a1);
  -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "startAsyncDuckingOperation");
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v9 = [MXDuckingSource alloc];
      LODWORD(v10) = 0;
      LODWORD(v11) = 0;
      v12 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:](v9, "initWithType:ID:duckVolume:duckFadeDuration:", 0, a2, v10, v11);
      -[MXSessionManager unduckVolume:sessionCausingUnduck:duckingSource:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "unduckVolume:sessionCausingUnduck:duckingSource:", ValueAtIndex, 0, v12);

    }
  }
  if (a3)
  {
    -[MXSessionManager mostRecentDuckFadeDuration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mostRecentDuckFadeDuration");
    *a3 |= v13 > 0.0;
  }
}

uint64_t __cmsmSystemSoundDidFinishGuts_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  MXSessionManager *v3;
  double v4;
  char v5;

  v1 = *(unsigned int *)(a1 + 32);
  v5 = 0;
  result = cmsmSystemSoundDidFinishGuts(v1, 1, &v5);
  if (v5)
  {
    v3 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
    LODWORD(v4) = 0.5;
    return -[MXSessionManager sleepForAsyncDucking:duration:](v3, "sleepForAsyncDucking:duration:", 0, v4);
  }
  return result;
}

uint64_t __cmsmVibrateForSystemSoundInternal_block_invoke(uint64_t a1)
{
  NSPointerArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  unint64_t v8;
  __CFString *Value;
  BOOL v10;
  __CFString *v11;
  BOOL v12;
  uint64_t result;
  const __CFDictionary *v14;
  _BOOL4 v15;
  const __CFDictionary *ValueWithDefaultAsFallback;
  _BOOL4 v17;
  const __CFString *v18;
  const __CFDictionary *v19;
  CFTypeRef v20;
  const void *v21;
  const __CFNumber *v22;
  int v23;
  float v24;
  int valuePtr;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v3 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v27 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        if (objc_msgSend(v7, "isActive")
          && objc_msgSend(v7, "isPlaying")
          && (objc_msgSend(v7, "isVibrating") & 1) != 0)
        {
          -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
          result = 4294954313;
          goto LABEL_50;
        }
      }
      v4 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v4)
        continue;
      break;
    }
  }
  -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListEndIteration");
  v8 = *(unsigned int *)(a1 + 64);
  Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)v8);
  if (Value)
    v10 = 0;
  else
    v10 = v8 > 0x1000;
  if (v10)
    v11 = CFSTR("ThirdPartySystemSound");
  else
    v11 = Value;
  if (v11)
    v12 = gSystemSoundVibrationPatterns == 0;
  else
    v12 = 1;
  if (v12)
    goto LABEL_22;
  v14 = *(const __CFDictionary **)(a1 + 40);
  if (!v14)
  {
    ValueWithDefaultAsFallback = (const __CFDictionary *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundVibrationPatterns, v11);
    if (!ValueWithDefaultAsFallback)
      goto LABEL_22;
    v14 = ValueWithDefaultAsFallback;
    if (!CFDictionaryGetCount(ValueWithDefaultAsFallback))
      goto LABEL_22;
  }
  v15 = FigCFArrayContainsValue() || FigCFArrayContainsValue() != 0;
  v17 = FigCFArrayContainsValue() || FigCFArrayContainsValue() != 0;
  if (CMSMUtility_IsPhoneCallActive()
    && (v15 || v17)
    && cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(*(_DWORD *)(a1 + 64))
    && CMSMUtility_VibrationPatternIsActuallyGoingToVibe((CFIndex)v14)
    && (!v15 ? (v18 = CFSTR("DefaultShort_SpeakerphoneActive")) : (v18 = CFSTR("DefaultShort_ReceiverActive")),
        (v19 = (const __CFDictionary *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundVibrationPatterns, v18), (v14 = v19) != 0)&& !CFDictionaryGetCount(v19)))
  {
LABEL_22:
    result = 4294954315;
  }
  else
  {
    v20 = cmsmCopyCurrentActiveRouteTypeAtIndex(0);
    valuePtr = 1065353216;
    if (v20)
    {
      v21 = v20;
      v22 = (const __CFNumber *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundMaxVibrationIntensity, v20);
      if (v22)
      {
        CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
      CFRelease(v21);
      v24 = *(float *)&valuePtr;
    }
    else
    {
      v23 = 0;
      v24 = 1.0;
    }
    result = FigVibratorPlayVibrationWithDictionary(v14, v23, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 68), *(const void **)(a1 + 56), *(unsigned __int8 *)(a1 + 69), 0, v24);
  }
LABEL_50:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

const void *cmsmCFDictionaryGetValueWithDefaultAsFallback(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict && a2)
  {
    result = CFDictionaryGetValue(theDict, a2);
    if (!result)
      return CFDictionaryGetValue(theDict, CFSTR("Default"));
  }
  return result;
}

uint64_t FigRoutingSessionGetClassID()
{
  if (FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce != -1)
    dispatch_once_f(&FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce, &FigRoutingSessionGetClassID_sFigRoutingSessionClassID, (dispatch_function_t)routingSession_getClassID);
  return FigRoutingSessionGetClassID_sFigRoutingSessionClassID;
}

uint64_t routingSession_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigRoutingSessionGetTypeID()
{
  if (FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce != -1)
    dispatch_once_f(&FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce, &FigRoutingSessionGetClassID_sFigRoutingSessionClassID, (dispatch_function_t)routingSession_getClassID);
  return CMBaseClassGetCFTypeID();
}

CFStringRef routingSession_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRoutingSession %p]"), a1);
}

void sub_19376B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t getAAAudioSessionControlClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__14;
  v7 = __Block_byref_object_dispose__14;
  v0 = getAAAudioSessionControlClass_softClass;
  v8 = getAAAudioSessionControlClass_softClass;
  if (!getAAAudioSessionControlClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getAAAudioSessionControlClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getAAAudioSessionControlClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19376BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19376CEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

Class __getAAAudioSessionControlClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!AudioAccessoryServicesLibraryCore_frameworkLibrary)
  {
    AudioAccessoryServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AudioAccessoryServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getAAAudioSessionControlClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("AAAudioSessionControl");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    goto LABEL_6;
  getAAAudioSessionControlClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

const __CFString *PowerManager_GetClientTypeFromID(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 6)
    v1 = CFSTR("haptics");
  if (a1 == 5)
    return CFSTR("audio");
  else
    return v1;
}

CFMutableDictionaryRef PowerManager_CreatePowerBudgetRequestDict(const __CFDictionary *a1, int a2)
{
  CFMutableDictionaryRef Mutable;
  int64_t Count;
  const void **v5;
  const __CFArray *Value;
  const __CFArray *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  const void **v11;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    Count = FigCFDictionaryGetCount();
    v11 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a1, v11, 0);
    if (Count >= 1)
    {
      v5 = v11;
      do
      {
        if (a1)
        {
          Value = (const __CFArray *)CFDictionaryGetValue(a1, *v5);
          if (Value)
          {
            v7 = Value;
            if (CFArrayGetCount(Value) != 2)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFArrayGetValueAtIndex(v7, a2 != 0);
          }
          else
          {
            v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        FigCFDictionarySetValue();
        ++v5;
        --Count;
      }
      while (Count);
    }
    free(v11);
  }
  return Mutable;
}

uint64_t PowerManager_SendAcknowledgementToCPMSForResource(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v5[23];

  v5[22] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  if ((objc_msgSend(a2, "acknowledgePowerBudget:forClientId:error:", a3, a1, v5) & 1) != 0)
    return 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294950314;
}

uint64_t PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v6 = vaemSetCPMSPowerBudget(a3, a1);
  if (!(_DWORD)v6)
    return PowerManager_SendAcknowledgementToCPMSForResource(a1, a2, a3);
  v7 = v6;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v7;
}

uint64_t FigRoutingSessionManagerGetConfidenceThresholds(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  if (result)
    routingSessionManager_getConfiguration(&v3);
  if (a2)
    routingSessionManager_getConfiguration(&v2);
  return result;
}

void routingSessionManager_getConfiguration(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;

  if (FigRoutingSessionManager_ensureConfigurationInitialized_onceToken != -1)
    dispatch_once(&FigRoutingSessionManager_ensureConfigurationInitialized_onceToken, &__block_literal_global_73);
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  MEMORY[0x1940352F8](gConfigurationMutex);
  v2 = xmmword_1EE2B3530;
  a1[2] = xmmword_1EE2B3520;
  a1[3] = v2;
  a1[4] = xmmword_1EE2B3540;
  v3 = xmmword_1EE2B3510;
  *a1 = gConfiguration;
  a1[1] = v3;
  JUMPOUT(0x194035304);
}

uint64_t FigRoutingSessionManagerCopyLongFormVideoManager(uint64_t a1, CFTypeRef *a2)
{
  const void *v3;
  uint64_t v4;
  const void *v5;
  _QWORD block[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (!a2)
    goto LABEL_9;
  if (routingSessionManager_getSingletonQueue_sSingletonQueueOnce != -1)
    dispatch_once(&routingSessionManager_getSingletonQueue_sSingletonQueueOnce, &__block_literal_global_69_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigRoutingSessionManagerCopyLongFormVideoManager_block_invoke;
  block[3] = &unk_1E3099018;
  block[4] = &v8;
  dispatch_sync((dispatch_queue_t)routingSessionManager_getSingletonQueue_sSingletonQueue, block);
  v3 = (const void *)v9[3];
  if (v3)
  {
    v4 = 0;
    *a2 = CFRetain(v3);
  }
  else
  {
LABEL_9:
    v4 = FigSignalErrorAt();
  }
  v5 = (const void *)v9[3];
  if (v5)
    CFRelease(v5);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_193771ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingSessionManagerInit(const void *a1)
{
  _QWORD v3[5];

  if (!a1)
    return FigSignalErrorAt();
  CFRetain(a1);
  if (routingSessionManager_getSingletonQueue_sSingletonQueueOnce != -1)
    dispatch_once(&routingSessionManager_getSingletonQueue_sSingletonQueueOnce, &__block_literal_global_69_0);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigRoutingSessionManagerInit_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = a1;
  MXDispatchAsync((uint64_t)"FigRoutingSessionManagerInit", (uint64_t)"FigRoutingSessionManager.m", 3569, 0, 0, routingSessionManager_getSingletonQueue_sSingletonQueue, (uint64_t)v3);
  return 0;
}

void routingSessionManager_updateConfiguration(const void *a1)
{
  CFTypeID v2;
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *v6;
  const void *v7;
  CFTypeID v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v10;
  CFTypeID v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  __n128 v22;
  NSObject *v23;

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("RoutingSessionManagerConfiguration"));
      if (Value)
      {
        v4 = Value;
        v5 = CFGetTypeID(Value);
        if (v5 == CFDictionaryGetTypeID())
        {
          v6 = (const void *)MGCopyAnswer();
          MEMORY[0x1940352F8](gConfigurationMutex);
          if (CFDictionaryContainsKey(v4, CFSTR("RoutePredictionsDisabled")))
          {
            v7 = CFDictionaryGetValue(v4, CFSTR("RoutePredictionsDisabled"));
            if (v7)
            {
              v8 = CFGetTypeID(v7);
              if (v8 == CFDictionaryGetTypeID())
              {
                if (FigCFDictionaryGetBooleanIfPresent())
                {
                  if (dword_1EE2B3E48)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  LOBYTE(gConfiguration) = 1;
                }
              }
            }
          }
          if (CFDictionaryContainsKey(v4, CFSTR("AutoRoutingDisabled")))
          {
            v10 = CFDictionaryGetValue(v4, CFSTR("AutoRoutingDisabled"));
            if (v10)
            {
              v11 = CFGetTypeID(v10);
              if (v11 == CFDictionaryGetTypeID())
              {
                if (FigCFDictionaryGetBooleanIfPresent())
                {
                  if (dword_1EE2B3E48)
                  {
                    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  BYTE1(gConfiguration) = 1;
                }
              }
            }
          }
          if (FigCFDictionaryGetFloatIfPresent() && -1.0 >= 0.0 && -1.0 <= 1.0)
          {
            if (dword_1EE2B3E48)
            {
              v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            DWORD1(gConfiguration) = -1082130432;
          }
          if (FigCFDictionaryGetFloatIfPresent() && -1.0 >= 0.0 && -1.0 <= 1.0)
          {
            if (dword_1EE2B3E48)
            {
              v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            DWORD2(gConfiguration) = -1082130432;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_QWORD *)&xmmword_1EE2B3510 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((_QWORD *)&xmmword_1EE2B3510 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_QWORD *)&xmmword_1EE2B3520 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((_QWORD *)&xmmword_1EE2B3520 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(double *)&xmmword_1EE2B3530 = -1.0 * 60.0;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((_QWORD *)&xmmword_1EE2B3530 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1EE2B3E48)
            {
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_QWORD *)&xmmword_1EE2B3540 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent())
          {
            v22.n128_u64[0] = 0xBFF0000000000000;
            if (-1.0 >= 0.0)
            {
              if (dword_1EE2B3E48)
              {
                v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v22.n128_f64[0] = -1.0 * 60.0;
              *((double *)&xmmword_1EE2B3540 + 1) = -1.0 * 60.0;
            }
          }
          MEMORY[0x194035304](gConfigurationMutex, v22);
          if (v6)
            CFRelease(v6);
        }
      }
    }
  }
}

dispatch_queue_t __routingSessionManager_getSingletonQueue_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  result = dispatch_queue_create("com.apple.coremedia.routingsessionmanager.singleton", v0);
  routingSessionManager_getSingletonQueue_sSingletonQueue = (uint64_t)result;
  return result;
}

void routingSessionManager_routeConfigUpdated(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  _QWORD *DerivedStorage;
  void *Value;
  void *v10;
  unsigned int (*v11)(uint64_t, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Value = (void *)CFDictionaryGetValue(a5, CFSTR("routeConfigUpdateReason"));
  cf = 0;
  if (*DerivedStorage != a4)
  {
    FigSignalErrorAt();
    return;
  }
  v10 = Value;
  v11 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v11 && !v11(a4, &cf))
  {
    if (FigCFEqual() || FigCFEqual())
      goto LABEL_6;
    if (FigCFEqual())
    {
      if (!routingSessionManager_routeIsBuiltIn((const __CFArray *)cf))
      {
LABEL_6:
        routingSessionManager_establishRoutingSessionFromCurrentRoutes(a2, (const __CFArray *)cf, v10);
        goto LABEL_7;
      }
    }
    else if (!FigCFEqual())
    {
      goto LABEL_7;
    }
    routingSessionManager_updateCurrentSession(a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, v10, 0);
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
}

void routingSessionManager_longFormVideoPlayingChanged(uint64_t a1, const void *a2)
{
  routingSessionManager_updateSessionExpiration(a2);
}

uint64_t routingSessionManager_airPlayVideoActiveChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16) != a4)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t routingSessionManager_airPlayVideoPlayingChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16) != a4)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void routingSessionManager_sharePlayCapableCallSessionIsActiveChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v4;
  char v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetValue();
  v4 = FigCFEqual();
  if (v4 != *(unsigned __int8 *)(DerivedStorage + 120))
  {
    v5 = v4;
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(DerivedStorage + 120) = v5;
    routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession(a2);
  }
}

void routingSessionManager_predictionsForCurrentContextUpdated()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  routingSessionManager_updatePredictedDestinations();
}

void routingSessionManager_updateSessionFromLatestInEarHeadphones(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *Float32;
  const __CFArray *v5;
  const __CFArray *v6;
  __CFDictionary *DestinationWithRouteDescriptors;
  const __CFArray *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  Float32 = (const void *)FigCFNumberCreateFloat32();
  v5 = routingSessionManager_copyEligibleInEarHeadphones(*(_QWORD *)(DerivedStorage + 8));
  if (!v5)
  {
    v9 = 0;
    routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, CFSTR("Headphones are not in-ear"), 0);
    goto LABEL_10;
  }
  v6 = v5;
  if (CFArrayGetCount(v5) < 1)
  {
    v9 = 0;
    routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, CFSTR("Headphones are not in-ear"), 0);
    v8 = v6;
  }
  else
  {
    DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(v6);
    if (!FigRoutingSessionCreateForInEarHeadphones(v3, DestinationWithRouteDescriptors, &v9))
      routingSessionManager_updateCurrentSession(a1, v9, 0, 0, 0, 1, 0, 0, 0, 0, CFSTR("Headphones are in-ear"), 0);
    CFRelease(v6);
    if (DestinationWithRouteDescriptors)
      CFRelease(DestinationWithRouteDescriptors);
    v8 = (const __CFArray *)v9;
    if (!v9)
    {
LABEL_10:
      if (!Float32)
        return;
      goto LABEL_11;
    }
  }
  CFRelease(v8);
  if (!Float32)
    return;
LABEL_11:
  CFRelease(Float32);
}

void routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, CFArrayRef *);
  __CFDictionary *DestinationWithRouteDescriptors;
  const __CFString *v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  cf[0] = 0;
  v3 = *(_QWORD *)DerivedStorage;
  v4 = *(unsigned int (**)(uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v4 || v4(v3, &theArray))
    goto LABEL_11;
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_11:
    DestinationWithRouteDescriptors = 0;
    goto LABEL_12;
  }
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(theArray);
    if (FigRoutingSessionCreateForActiveSharePlayCapableCallSession(*MEMORY[0x1E0C9AE00], DestinationWithRouteDescriptors, cf))goto LABEL_12;
    v6 = CFSTR("SharePlay-capable call session is active");
    v7 = cf[0];
  }
  else
  {
    v7 = 0;
    DestinationWithRouteDescriptors = 0;
    v6 = CFSTR("SharePlay-capable call session is not active");
  }
  routingSessionManager_updateCurrentSession(a1, v7, 0, 0, 0, 0, 1, 0, 0, 0, v6, 0);
LABEL_12:
  if (theArray)
    CFRelease(theArray);
  if (DestinationWithRouteDescriptors)
    CFRelease(DestinationWithRouteDescriptors);
  if (cf[0])
    CFRelease(cf[0]);
}

void routingSessionManager_updatePredictedDestinations()
{
  _OWORD v0[5];

  CMBaseObjectGetDerivedStorage();
  CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(v0);
}

void sub_1937741AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  const void *v42;
  uint64_t v43;
  uint64_t *v44;
  double v45;
  CFTypeRef v46;
  uint64_t v47;
  void (*v48)(uint64_t, CFTypeRef *);
  double v49;
  _QWORD v50[6];
  _QWORD v51[6];
  CFTypeRef v52[21];

  v46 = v52[3];
  v52[0] = 0;
  v47 = *v44;
  v48 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v48)
    v48(v47, v52);
  v49 = v45 + *(double *)&v46;
  if (v42)
    CFRetain(v42);
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 3221225472;
  v51[2] = __routingSessionManager_updatePredictedDestinations_block_invoke;
  v51[3] = &__block_descriptor_48_e20_C16__0____CFArray__8l;
  v51[4] = v42;
  v51[5] = v44;
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = __routingSessionManager_updatePredictedDestinations_block_invoke_208;
  v50[3] = &unk_1E309ED18;
  v50[4] = v43;
  v50[5] = v42;
  routingSessionManager_discoverRoutes((uint64_t)v51, (uint64_t)v50, v49);
  if (v52[0])
    CFRelease(v52[0]);
}

void routingSessionManager_Finalize()
{
  void *v0;
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;

  v0 = (void *)MEMORY[0x194035B20]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 72);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 80);
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
    CFRelease(v6);

  v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
    CFRelease(v7);
  v8 = *(NSObject **)(DerivedStorage + 32);
  if (v8)
    dispatch_release(v8);
  objc_autoreleasePoolPop(v0);
}

__CFString *routingSessionManager_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  void (*v3)(uint64_t, CFTypeRef *);
  CFTypeRef cf;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  v3 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
  {
    v3(a1, &cf);
    v3 = (void (*)(uint64_t, CFTypeRef *))cf;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRoutingSessionManager = %p: currentSession = %@>"), a1, v3);
  if (cf)
    CFRelease(cf);
  return Mutable;
}

uint64_t routingSessionManager_CopyCurrentSession(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v4 = *(const void **)(DerivedStorage + 72);
  if (!v4)
  {
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
    goto LABEL_5;
  }
  v5 = CFRetain(v4);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (!v5)
  {
LABEL_5:
    *a2 = 0;
    return 0;
  }
  *a2 = CFRetain(v5);
  CFRelease(v5);
  return 0;
}

uint64_t routingSessionManager_StartSessionForHighConfidenceDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v7)
    return v7(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t routingSessionManager_CopyLikelyDestinations(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  BOOL v5;
  CFArrayRef v6;
  CFArrayRef v7;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  if (sWiFiDeviceClientGetPower)
    v5 = sFigRoutingSessionManagerWiFiDevice == 0;
  else
    v5 = 1;
  if ((v5 || sWiFiDeviceClientGetPower()) && *(_QWORD *)(v4 + 56))
  {
    CFAbsoluteTimeGetCurrent();
    MEMORY[0x1940349B0](objc_msgSend(*(id *)(v4 + 56), "microLocationEventDate"));
    routingSessionManager_getConfiguration(v9);
  }
  MEMORY[0x194035304](*(_QWORD *)(v4 + 40));
  v6 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  v7 = v6;
  if (v6)
  {
    *a2 = CFRetain(v6);
    CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void routingSessionManager_PrepareForPlayback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[5];
  _QWORD aBlock[32];

  aBlock[29] = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __routingSessionManager_PrepareForPlayback_block_invoke;
  aBlock[3] = &__block_descriptor_48_e8_v12__0i8l;
  aBlock[4] = a2;
  aBlock[5] = a3;
  _Block_copy(aBlock);
  CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(v5);
}

void sub_1937749F0()
{
  void (**v0)(_QWORD, _QWORD);
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v8;
  _BOOL4 v9;
  CFTypeRef v10;
  const void *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  _QWORD v19[7];
  char v20;
  int v21;
  double v22;
  _QWORD v23[42];

  v6 = v22;
  if (dword_1EE2B3E48)
  {
    v21 = 0;
    v20 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!routingSessionManager_routePredictionsEnabled())
  {
    v10 = 0;
LABEL_30:
    v0[2](v0, 0);
    goto LABEL_31;
  }
  MEMORY[0x1940352F8](*(_QWORD *)(v2 + 40));
  v8 = *(const __CFArray **)(v2 + 104);
  if (v8)
    v9 = CFArrayGetCount(v8) > 0;
  else
    v9 = 0;
  v11 = *(const void **)(v2 + 72);
  if (v11)
    v10 = CFRetain(v11);
  else
    v10 = 0;
  v12 = *(unsigned __int8 *)(v2 + 96);
  *(_BYTE *)(v2 + 96) = 0;
  if (v12)
    v13 = 1;
  else
    v13 = v9;
  if (v13 == 1)
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 104), v0);
  v14 = *(unsigned __int8 *)(v2 + 64);
  *(_BYTE *)(v2 + 64) = 0;
  MEMORY[0x194035304](*(_QWORD *)(v2 + 40));
  if (v14 && dword_1EE2B3E48)
  {
    v21 = 0;
    v20 = 0;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v13 & 1) == 0)
  {
    if (dword_1EE2B3E48)
    {
      v21 = 0;
      v20 = 0;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_30;
  }
  if (v12)
  {
    if (v1)
      CFRetain(v1);
    v16 = MEMORY[0x1E0C809B0];
    if (v10)
      CFRetain(v10);
    v19[0] = v16;
    v19[1] = v5;
    v17 = v4 + v6;
    v19[2] = __routingSessionManager_PrepareForPlayback_block_invoke_82;
    v19[3] = &__block_descriptor_56_e8_v12__0i8l;
    v19[4] = v1;
    v19[5] = v2;
    v19[6] = v10;
    if (v1)
      CFRetain(v1);
    v23[0] = v16;
    v23[1] = v5;
    v23[2] = __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke;
    v23[3] = &unk_1E309ECF0;
    v23[4] = v19;
    v23[5] = v1;
    *(_QWORD *)(v3 - 192) = v16;
    *(_QWORD *)(v3 - 184) = v5;
    *(_QWORD *)(v3 - 176) = __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_2;
    *(_QWORD *)(v3 - 168) = &unk_1E309ED18;
    *(_QWORD *)(v3 - 160) = v19;
    *(_QWORD *)(v3 - 152) = v1;
    routingSessionManager_discoverRoutes((uint64_t)v23, v3 - 192, v17);
  }
LABEL_31:
  if (v10)
    CFRelease(v10);
  _Block_release(v0);
}

uint64_t routingSessionManager_getAirPlayVideoActive(uint64_t a1, _BYTE *a2)
{
  char v3;

  v3 = objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 16), "someLongFormVideoClientIsActiveOverAirPlayVideo");
  if (!a2)
    return FigSignalErrorAt();
  *a2 = v3;
  return 0;
}

uint64_t routingSessionManager_getAirPlayVideoPlaying(uint64_t a1, _BYTE *a2)
{
  char v3;

  v3 = objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 16), "someLongFormVideoClientIsPlayingOverAirPlayVideo");
  if (!a2)
    return FigSignalErrorAt();
  *a2 = v3;
  return 0;
}

uint64_t routingSessionManager_UpdateCurrentSessionFromLikelyDestinations(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  _QWORD v10[8];
  os_log_type_t type;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3E48)
  {
    v12 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
    CFRetain(a1);
  v8 = *(NSObject **)(DerivedStorage + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __routingSessionManager_UpdateCurrentSessionFromLikelyDestinations_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a1;
  v10[5] = DerivedStorage;
  v10[6] = a2;
  v10[7] = a3;
  MXDispatchAsync((uint64_t)"routingSessionManager_UpdateCurrentSessionFromLikelyDestinations", (uint64_t)"FigRoutingSessionManager.m", 1386, 0, 0, v8, (uint64_t)v10);
  return 0;
}

uint64_t routingSessionManager_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, char *a2)
{
  uint64_t DerivedStorage;
  char isVideoOnScreen;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFTypeRef *);
  uint64_t v8;
  CFIndex i;
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  char shouldUpdateCurrentSession;
  uint64_t v14;
  CFTypeRef v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  CFTypeRef cf;
  CFTypeRef v20[21];

  v20[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  isVideoOnScreen = routingSessionManager_isVideoOnScreen(a1);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  cf = 0;
  v20[0] = 0;
  v6 = *(_QWORD *)(DerivedStorage + 72);
  if (!v6)
    goto LABEL_4;
  v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v7)
  {
    shouldUpdateCurrentSession = 0;
    v14 = 4294954514;
    goto LABEL_24;
  }
  v8 = v7(v6, v20);
  if ((_DWORD)v8)
  {
    v14 = v8;
    shouldUpdateCurrentSession = 0;
  }
  else
  {
LABEL_4:
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 48);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        goto LABEL_16;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
      Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("routingSessionDestination_RouteDescriptors"));
      if (!routingSessionManager_routeIsBuiltIn(Value))
      {
        if (routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(Value))
          break;
      }
    }
    if (ValueAtIndex)
    {
      v14 = FigRoutingSessionCreate(*MEMORY[0x1E0C9AE00], 0, ValueAtIndex, &cf);
      v15 = cf;
      if (!(_DWORD)v14)
      {
        shouldUpdateCurrentSession = routingSessionManager_shouldUpdateCurrentSession(*(void **)(DerivedStorage + 24), *(_QWORD *)(DerivedStorage + 72), *(void **)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 96), (uint64_t)cf, *(void **)(DerivedStorage + 56), 1, 0, 0, isVideoOnScreen);
        v15 = cf;
        if (!cf)
          goto LABEL_24;
        goto LABEL_15;
      }
      shouldUpdateCurrentSession = 0;
      if (cf)
LABEL_15:
        CFRelease(v15);
    }
    else
    {
LABEL_16:
      if (*(_QWORD *)(DerivedStorage + 72))
      {
        if (dword_1EE2B3E48)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        shouldUpdateCurrentSession = 0;
      }
      else
      {
        if (!dword_1EE2B3E48)
        {
          v14 = 0;
          shouldUpdateCurrentSession = 1;
          goto LABEL_24;
        }
        v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        shouldUpdateCurrentSession = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v14 = 0;
    }
  }
LABEL_24:
  if (v20[0])
    CFRelease(v20[0]);
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (!(_DWORD)v14)
  {
    if (a2)
    {
      v14 = 0;
      *a2 = shouldUpdateCurrentSession;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v14;
}

void routingSessionManager_StartSessionWithRouteDescriptors(uint64_t a1, const __CFArray *a2)
{
  _OWORD v3[5];

  CMBaseObjectGetDerivedStorage();
  routingSessionManager_createDestinationWithRouteDescriptors(a2);
  routingSessionManager_getConfiguration(v3);
}

void sub_1937754A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,__int128 a48)
{
  FigGetCFPreferenceDoubleWithDefault();
  CFAbsoluteTimeGetCurrent();
  CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(&a48);
}

uint64_t sub_1937754E0()
{
  const void *v0;
  const void *v1;
  const __CFAllocator *v2;
  uint64_t v3;
  double v4;
  CFDateRef v5;
  uint64_t v6;
  const void *v7;
  __int128 v9;
  double v10;

  v5 = CFDateCreate(v2, v4 - v10);
  v6 = FigRoutingSessionCreate((uint64_t)v2, 0, v0, (_QWORD *)(v3 - 184));
  if (!(_DWORD)v6)
  {
    routingSessionManager_updateCurrentSession(v1, *(const void **)(v3 - 184), 0, 1, 0, 0, 0, 0, 0, 0, CFSTR("Set pending route"), 0);
    -[FigRoutingSessionUpdateState initWithNewSession:]([FigRoutingSessionUpdateState alloc], "initWithNewSession:", *(_QWORD *)(v3 - 184));
    if (v1)
      CFRetain(v1);
    routingSessionManager_getConfiguration(&v9);
  }
  if (v5)
    CFRelease(v5);

  if (v0)
    CFRelease(v0);
  v7 = *(const void **)(v3 - 184);
  if (v7)
    CFRelease(v7);
  return v6;
}

void routingSessionManager_StartSuppressingLikelyDestinations()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  *(_BYTE *)(DerivedStorage + 64) = 1;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  routingSessionManager_updatePredictedDestinations();
}

uint64_t sub_1937757E0()
{
  return 0;
}

void routingSessionManager_StopSuppressingLikelyDestinations()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  *(_BYTE *)(DerivedStorage + 64) = 0;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  routingSessionManager_updatePredictedDestinations();
}

uint64_t sub_193775944()
{
  return 0;
}

uint64_t routingSessionManager_routePredictionsEnabled()
{
  _OWORD v1[5];
  Boolean keyExistsAndHasValidFormat;

  if (!MX_FeatureFlags_IsCorianderEnabled())
  {
    keyExistsAndHasValidFormat = 0;
    CFPreferencesGetAppBooleanValue(CFSTR("EnableRoutePrediction"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
    routingSessionManager_getConfiguration(v1);
  }
  return 0;
}

void routingSessionManager_discoverRoutes(uint64_t a1, uint64_t a2, double a3)
{
  const __CFAllocator *v6;
  const void *SInt32;
  NSObject *v8;
  NSObject *v9;
  __CFDictionary *Mutable;
  const void *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, const __CFString *, const void *);
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, const __CFString *, const __CFString *);
  CFTypeRef v17;
  __CFDictionary *v18;
  uint64_t v19;
  const void *Value;
  __CFDictionary *v21;
  NSObject *v22;
  double Current;
  uint64_t (*v24)(const void *, const __CFString *, const __CFString *);
  int v25;
  uint64_t v26;
  void *DispatchSourceBlock;
  const void *v28;
  dispatch_time_t v29;
  int started;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  _QWORD v36[5];
  int v37;
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  CFTypeRef cf;
  _QWORD v42[5];
  _QWORD v43[16];

  cf = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  getpid();
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v9 = dispatch_queue_create("com.apple.coremedia.routing-session-manager.discovery", v8);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = (const void *)FigCFNumberCreateSInt32();
  CFDictionarySetValue(Mutable, CFSTR("discovererType"), v11);
  v12 = FigRouteDiscovererCreate((int)v6, Mutable, &cf);
  if ((_DWORD)v12)
    goto LABEL_40;
  v13 = cf;
  v14 = *(uint64_t (**)(CFTypeRef, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
  if (!v14)
    goto LABEL_14;
  v12 = v14(v13, CFSTR("clientPID"), SInt32);
  if ((_DWORD)v12)
    goto LABEL_40;
  v15 = cf;
  v16 = *(uint64_t (**)(CFTypeRef, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
  if (!v16)
  {
LABEL_14:
    v31 = 4294954514;
    if (!a2)
      goto LABEL_16;
    goto LABEL_15;
  }
  v12 = v16(v15, CFSTR("clientName"), CFSTR("FigRoutingSessionManager"));
  if ((_DWORD)v12)
  {
LABEL_40:
    v31 = v12;
    if (!a2)
    {
LABEL_16:
      v18 = 0;
      if (!Mutable)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v31);
    goto LABEL_16;
  }
  v17 = cf;
  v18 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v18, CFSTR("RouteDiscoverer"), v17);
  if (v18)
    CFRetain(v18);
  v19 = MEMORY[0x1E0C809B0];
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = __routingSessionManager_discoverRoutes_block_invoke;
  v40[3] = &unk_1E3098EA8;
  v40[4] = a1;
  v40[5] = v18;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __routingSessionManager_discoverRoutes_block_invoke_2;
  v39[3] = &unk_1E309ED18;
  v39[4] = a2;
  v39[5] = v18;
  Value = CFDictionaryGetValue(v18, CFSTR("RouteDiscoverer"));
  v21 = FigNotificationListenerCreate(Value, CFSTR("Discoverer_AvailableRoutesChanged"));
  v22 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v9);
  Current = CFAbsoluteTimeGetCurrent();
  v24 = *(uint64_t (**)(const void *, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
  v34 = a1;
  v35 = SInt32;
  if (!v24)
  {
    v26 = v19;
    DispatchSourceBlock = 0;
    v28 = 0;
    started = -12782;
    if (!v21)
      goto LABEL_31;
    goto LABEL_30;
  }
  v25 = v24(Value, CFSTR("DiscoveryMode"), CFSTR("DiscoveryMode_AirPlayInfraOnly"));
  if (v25)
  {
    started = v25;
    v26 = v19;
    DispatchSourceBlock = 0;
    v28 = 0;
    if (!v21)
      goto LABEL_31;
LABEL_30:
    CFRelease(v21);
    goto LABEL_31;
  }
  CFDictionarySetValue(v18, CFSTR("NotificationListener"), v21);
  if (v18)
    CFRetain(v18);
  v43[10] = v19;
  v43[11] = 3221225472;
  v26 = v19;
  v43[12] = __routingSessionManager_startDiscovery_block_invoke;
  v43[13] = &__block_descriptor_40_e5_v8__0l;
  v43[14] = v18;
  DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
  v43[5] = v19;
  v43[6] = 3221225472;
  v43[7] = __routingSessionManager_startDiscovery_block_invoke_97;
  v43[8] = &__block_descriptor_40_e5_v8__0l;
  v43[9] = v18;
  v28 = (const void *)FigDispatchCreateDispatchSourceBlock();
  v29 = dispatch_time(0, (uint64_t)((a3 - Current) * 1000000000.0));
  dispatch_source_set_timer(v22, v29, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler(v22, DispatchSourceBlock);
  dispatch_source_set_mandatory_cancel_handler();
  dispatch_resume(v22);
  CFDictionarySetValue(v18, CFSTR("TimeoutTimer"), v22);
  v43[0] = v26;
  v43[1] = 3221225472;
  v43[2] = __routingSessionManager_startDiscovery_block_invoke_2;
  v43[3] = &unk_1E309ED40;
  v43[4] = v40;
  v42[0] = v26;
  v42[1] = 3221225472;
  v42[2] = __routingSessionManager_startDiscovery_block_invoke_3;
  v42[3] = &unk_1E309ED68;
  v42[4] = v39;
  started = FigNotificationListenerStartNotifications(v21, (uint64_t)v9, v43, v42);
  if (v21)
    goto LABEL_30;
LABEL_31:
  if (v22)
    dispatch_release(v22);
  _Block_release(DispatchSourceBlock);
  _Block_release(v28);
  if (!started)
  {
    if (v18)
      CFRetain(v18);
    v38[0] = v26;
    v38[1] = 3221225472;
    v38[2] = __routingSessionManager_discoverRoutes_block_invoke_3;
    v38[3] = &unk_1E3098EA8;
    v38[4] = v34;
    v38[5] = v18;
    v32 = v38;
    v33 = 3024;
    goto LABEL_37;
  }
  if (v18)
  {
    CFRetain(v18);
    v36[0] = v26;
    v36[1] = 3221225472;
    v36[2] = __routingSessionManager_discoverRoutes_block_invoke_4;
    v36[3] = &__block_descriptor_44_e5_v8__0l;
    v36[4] = v18;
    v37 = started;
    v32 = v36;
    v33 = 3032;
LABEL_37:
    MXDispatchAsync((uint64_t)"routingSessionManager_discoverRoutes", (uint64_t)"FigRoutingSessionManager.m", v33, 0, 0, v9, (uint64_t)v32);
  }
  SInt32 = v35;
  if (Mutable)
LABEL_17:
    CFRelease(Mutable);
LABEL_18:
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (SInt32)
    CFRelease(SInt32);
  if (v18)
    CFRelease(v18);
  if (v9)
    dispatch_release(v9);
}

uint64_t __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, CFTypeRef *);
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, CFDictionaryRef *);
  const __CFArray *Value;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _OWORD v17[4];
  CFDictionaryRef theDict;
  CFTypeRef cf;
  uint64_t type;
  uint64_t block;
  int v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  theDict = 0;
  cf = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
    goto LABEL_10;
  v6 = v5(v4, &cf);
  if ((_DWORD)v6)
  {
LABEL_27:
    v11 = v6;
    goto LABEL_19;
  }
  v7 = cf;
  if (!cf)
    goto LABEL_6;
  v8 = *(uint64_t (**)(CFTypeRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
LABEL_10:
    v11 = 4294954514;
    goto LABEL_19;
  }
  v6 = v8(v7, &theDict);
  if ((_DWORD)v6)
    goto LABEL_27;
LABEL_6:
  if (theDict)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("routingSessionDestination_RouteDescriptors"));
    if (Value)
    {
      v10 = (uint64_t)routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(a2, Value, 0);
      if (v10)
      {
        CFAbsoluteTimeGetCurrent();
        routingSessionManager_getConfiguration(v17);
      }
      goto LABEL_22;
    }
  }
  if (dword_1EE2B3E48)
  {
    LODWORD(block) = 0;
    LOBYTE(type) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v13 = block;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)type))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if (v14)
    {
      v22 = 136315138;
      v23 = "routingSessionManager_routeToDestinationOfCurrentSession_block_invoke";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = 0;
LABEL_19:
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v15, v11);
  v10 = 1;
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (theDict)
    CFRelease(theDict);
  return v10;
}

CFTypeRef routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(const __CFArray *a1, const __CFArray *a2, int a3)
{
  CFIndex v6;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  CFIndex v9;
  CFIndex v10;
  const __CFDictionary *v11;
  CFIndex v12;
  CFIndex v13;
  CFTypeRef v14;
  CFTypeRef result;
  __CFArray *theArray;
  const __CFArray *v17;

  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = 0;
  v17 = a2;
  if (!a2)
    goto LABEL_3;
LABEL_2:
  Count = CFArrayGetCount(a2);
LABEL_4:
  if (v6 < Count)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v6);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteUID"));
    CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteName"));
    v9 = 0;
    if (a1)
    {
LABEL_6:
      v10 = CFArrayGetCount(a1);
      goto LABEL_8;
    }
    while (1)
    {
      v10 = 0;
LABEL_8:
      if (v9 >= v10)
        break;
      v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v9);
      CFDictionaryGetValue(v11, CFSTR("RouteUID"));
      CFDictionaryGetValue(v11, CFSTR("RouteName"));
      if (FigCFEqual() || a3 && FigCFEqual())
      {
        if (!v11)
          break;
        CFArrayAppendValue(theArray, v11);
        a2 = v17;
        ++v6;
        if (!v17)
        {
LABEL_3:
          Count = 0;
          goto LABEL_4;
        }
        goto LABEL_2;
      }
      ++v9;
      if (a1)
        goto LABEL_6;
    }
  }
  if (theArray)
    v12 = CFArrayGetCount(theArray);
  else
    v12 = 0;
  v13 = (CFIndex)v17;
  if (v17)
    v13 = CFArrayGetCount(v17);
  if (v12 == v13)
  {
    if (theArray)
    {
      v14 = CFRetain(theArray);
LABEL_25:
      CFRelease(theArray);
      return v14;
    }
    return 0;
  }
  else
  {
    v14 = 0;
    result = 0;
    if (theArray)
      goto LABEL_25;
  }
  return result;
}

uint64_t __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_89(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      (*(void (**)(void))(v3 + 16))();
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
}

void __routingSessionManager_discoverRoutes_block_invoke(uint64_t a1)
{
  routingSessionManager_vendDiscoveredRoutes(*(const __CFDictionary **)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void routingSessionManager_vendDiscoveredRoutes(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  const void *v5;
  unsigned int (*v6)(const void *, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  Value = CFDictionaryGetValue(a1, CFSTR("RouteDiscoverer"));
  cf = 0;
  if (Value)
  {
    v5 = Value;
    v6 = *(unsigned int (**)(const void *, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (!v6
      || v6(v5, CFSTR("availableRouteDescriptors"), *MEMORY[0x1E0C9AE00], &cf)
      || (*(unsigned int (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf))
    {
      routingSessionManager_stopDiscovery(a1);
    }
    if (cf)
      CFRelease(cf);
  }
}

void __routingSessionManager_discoverRoutes_block_invoke_2(uint64_t a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __routingSessionManager_discoverRoutes_block_invoke_3(uint64_t a1)
{
  const void *v2;

  routingSessionManager_vendDiscoveredRoutes(*(const __CFDictionary **)(a1 + 40), *(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __routingSessionManager_discoverRoutes_block_invoke_4(uint64_t a1)
{
  const void *v2;

  routingSessionManager_stopDiscovery(*(const __CFDictionary **)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void routingSessionManager_stopDiscovery(const __CFDictionary *a1)
{
  const void *SInt32;
  const __CFDictionary *Value;
  const void *v4;
  NSObject *v5;
  void (*v6)(const void *, const __CFString *, const __CFString *);

  SInt32 = (const void *)FigCFNumberCreateSInt32();
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("NotificationListener"));
  v4 = CFDictionaryGetValue(a1, CFSTR("RouteDiscoverer"));
  v5 = CFDictionaryGetValue(a1, CFSTR("TimeoutTimer"));
  if (Value)
  {
    FigNotificationListenerStopNotifications(Value, (uint64_t)SInt32);
    CFDictionaryRemoveValue(a1, CFSTR("NotificationListener"));
  }
  if (v4)
  {
    v6 = *(void (**)(const void *, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
    if (v6)
      v6(v4, CFSTR("DiscoveryMode"), CFSTR("DiscoveryMode_None"));
    CFDictionaryRemoveValue(a1, CFSTR("RouteDiscoverer"));
  }
  if (v5)
  {
    dispatch_source_cancel(v5);
    CFDictionaryRemoveValue(a1, CFSTR("TimeoutTimer"));
  }
  if (SInt32)
    CFRelease(SInt32);
}

__CFDictionary *FigNotificationListenerCreate(const void *a1, const void *a2)
{
  NSObject *v4;
  dispatch_queue_t v5;
  __CFDictionary *Mutable;
  const void *DefaultLocalCenter;

  v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v5 = dispatch_queue_create("com.apple.coremedia.notification-listener.serialization", v4);
  Mutable = 0;
  if (a1 && a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    DefaultLocalCenter = (const void *)CMNotificationCenterGetDefaultLocalCenter();
    CFDictionarySetValue(Mutable, CFSTR("notificationCenter"), DefaultLocalCenter);
    CFDictionarySetValue(Mutable, CFSTR("observedObject"), a1);
    CFDictionarySetValue(Mutable, CFSTR("notificationName"), a2);
    CFDictionarySetValue(Mutable, CFSTR("serializationQueue"), v5);
  }
  if (v5)
    dispatch_release(v5);
  return Mutable;
}

void __routingSessionManager_startDiscovery_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  routingSessionManager_stopDiscovery(*(const __CFDictionary **)(a1 + 32));
}

void __routingSessionManager_startDiscovery_block_invoke_97(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t FigNotificationListenerStartNotifications(const __CFDictionary *a1, uint64_t a2, const void *a3, const void *a4)
{
  NSObject *Value;
  void *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD block[7];

  CFDictionaryGetValue(a1, CFSTR("notificationCenter"));
  CFDictionaryGetValue(a1, CFSTR("observedObject"));
  CFDictionaryGetValue(a1, CFSTR("notificationName"));
  Value = CFDictionaryGetValue(a1, CFSTR("serializationQueue"));
  v8 = _Block_copy(a3);
  v9 = _Block_copy(a4);
  v10 = v9;
  if (v8)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigNotificationListenerStartNotifications_block_invoke;
    block[3] = &unk_1E309ED90;
    block[5] = v9;
    block[6] = a1;
    block[4] = v8;
    dispatch_sync(Value, block);
    v11 = FigNotificationCenterAddWeakListener();
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  v12 = v11;
  _Block_release(v8);
  _Block_release(v10);
  return v12;
}

uint64_t __routingSessionManager_startDiscovery_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __routingSessionManager_startDiscovery_block_invoke_3(uint64_t a1, CFNumberRef number)
{
  uint64_t result;
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, valuePtr);
  return result;
}

void notificationListener_receivedNotification(int a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *Value;
  void (**v8)(_QWORD, _QWORD);
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;

  Value = CFDictionaryGetValue(theDict, CFSTR("serializationQueue"));
  v10 = 0;
  v11 = &v10;
  v12 = 0x3052000000;
  v13 = __Block_byref_object_copy__15;
  v14 = __Block_byref_object_dispose__15;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __notificationListener_receivedNotification_block_invoke;
  v9[3] = &unk_1E3098D88;
  v9[4] = &v10;
  v9[5] = theDict;
  dispatch_sync(Value, v9);
  v8 = (void (**)(_QWORD, _QWORD))v11[5];
  if (v8)
  {
    v8[2](v8, a5);
    v8 = (void (**)(_QWORD, _QWORD))v11[5];
  }
  _Block_release(v8);
  _Block_object_dispose(&v10, 8);
}

void sub_1937771B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__notificationListener_receivedNotification_block_invoke(uint64_t a1)
{
  const void *Value;
  void *result;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("notificationBlock"));
  result = _Block_copy(Value);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

uint64_t FigNotificationListenerStopNotifications(const __CFDictionary *a1, uint64_t a2)
{
  NSObject *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;

  CFDictionaryGetValue(a1, CFSTR("notificationCenter"));
  CFDictionaryGetValue(a1, CFSTR("observedObject"));
  CFDictionaryGetValue(a1, CFSTR("notificationName"));
  v9 = 0;
  v10 = &v9;
  v11 = 0x3052000000;
  v12 = __Block_byref_object_copy__15;
  v13 = __Block_byref_object_dispose__15;
  v14 = 0;
  Value = CFDictionaryGetValue(a1, CFSTR("serializationQueue"));
  v5 = FigNotificationCenterRemoveWeakListener();
  if (!(_DWORD)v5)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigNotificationListenerStopNotifications_block_invoke;
    v8[3] = &unk_1E3098D88;
    v8[4] = &v9;
    v8[5] = a1;
    dispatch_sync(Value, v8);
    v6 = v10[5];
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, a2);
  }
  _Block_release((const void *)v10[5]);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_19377734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v5;

  MEMORY[0x1940352F8](*(_QWORD *)(a1[5] + 40));
  v2 = a1[5];
  v3 = *(unsigned __int8 *)(v2 + 121);
  *(_BYTE *)(v2 + 121) = 0;
  MEMORY[0x194035304](*(_QWORD *)(v2 + 40));
  if (v3)
  {
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    (*(void (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], 4294951903);
  }
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke_117(uint64_t a1, const __CFDictionary *a2)
{
  void *v4;
  const void *SInt32;
  id v6;

  v4 = (void *)MEMORY[0x194035B20]();
  CFDictionaryGetValue(a2, CFSTR("routeConfigUpdateID"));
  CFDictionaryGetValue(a2, CFSTR("routeConfigUpdateReason"));
  if (FigCFEqual()
    && (FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()))
  {
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (gARPFeedback_7 && gARPFeedback_3 && FigCFEqual() && FigCFEqual())
    {
      v6 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(*(const __CFArray **)(a1 + 40));
      gARPFeedback_7(gARPFeedback_3, v6);
    }
    FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 48), (uint64_t)SInt32);
    if (SInt32)
      CFRelease(SInt32);
  }
  objc_autoreleasePoolPop(v4);
}

id routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(const __CFArray *a1)
{
  id v2;
  CFIndex v3;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;

  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
  v3 = 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v3 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3);
    if (ValueAtIndex)
    {
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("RouteUID"));
      if (Value)
        objc_msgSend(v2, "addObject:", Value);
    }
    ++v3;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return v2;
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke_2(_QWORD *a1, CFNumberRef number)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  MEMORY[0x1940352F8](*(_QWORD *)(a1[5] + 40));
  v3 = a1[5];
  v4 = *(unsigned __int8 *)(v3 + 121);
  *(_BYTE *)(v3 + 121) = 0;
  MEMORY[0x194035304](*(_QWORD *)(v3 + 40));
  if (v4)
  {
    v5 = a1[4];
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, valuePtr);
  }
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[7];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[8];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[9];
  if (v9)
    CFRelease(v9);
}

void routingSessionManager_updateCurrentSession(const void *a1, const void *a2, void *a3, char a4, int a5, int a6, char a7, int a8, uint64_t a9, char a10, void *a11, char *a12)
{
  uint64_t DerivedStorage;
  char isVideoOnScreen;
  uint64_t v22;
  const void *v23;
  void *v24;
  const void *v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v27;
  CFDictionaryRef v28;
  NSObject *v29;
  NSObject *v30;
  void *values[18];

  values[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  isVideoOnScreen = routingSessionManager_isVideoOnScreen((uint64_t)a1);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v22 = *(_QWORD *)(DerivedStorage + 72);
  if (a8)
  {
    if (v22 != a9)
    {
LABEL_18:
      MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
      v27 = 0;
      goto LABEL_28;
    }
    v22 = a9;
  }
  if (!routingSessionManager_shouldUpdateCurrentSession(*(void **)(DerivedStorage + 24), v22, *(void **)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 96), (uint64_t)a2, a3, a5, a6, a7, isVideoOnScreen))goto LABEL_18;
  v23 = *(const void **)(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 72) = a2;
  if (a2)
    CFRetain(a2);
  if (v23)
    CFRelease(v23);
  v24 = *(void **)(DerivedStorage + 88);
  if (v24 != a3)
  {

    *(_QWORD *)(DerivedStorage + 88) = a3;
  }
  v25 = *(const void **)(DerivedStorage + 80);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  if (!a10)
    *(_BYTE *)(DerivedStorage + 96) = a4;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (v23 != a2)
  {
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    values[0] = a11;
    v28 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigRoutingSessionManagerPayloadValue_Reason, (const void **)values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v28)
      CFRelease(v28);
    routingSessionManager_updateSessionExpiration(a1);
    if (!a2)
    {
      if (dword_1EE2B3E48)
      {
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      routingSessionManager_updateSessionFromLatestInEarHeadphones(a1);
      if (dword_1EE2B3E48)
      {
        v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession((uint64_t)a1);
    }
  }
  v27 = 1;
LABEL_28:
  if (a12)
    *a12 = v27;
}

uint64_t routingSessionManager_isVideoOnScreen(uint64_t a1)
{
  unsigned int (*v2)(uint64_t, char *);
  uint64_t result;
  char v4;

  v4 = 0;
  v2 = *(unsigned int (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v2 || v2(a1, &v4))
    return 0;
  LODWORD(result) = objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 16), "someLongFormVideoClientIsPlaying");
  if (v4)
    return 1;
  else
    return result;
}

uint64_t routingSessionManager_shouldUpdateCurrentSession(void *a1, uint64_t a2, void *a3, int a4, uint64_t a5, void *a6, int a7, int a8, char a9, char a10)
{
  NSObject *v10;
  int v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int (*v21)(uint64_t, _BYTE *);
  const __CFArray *Value;
  __CFSet *v23;
  unsigned int (*v24)(uint64_t, CFDictionaryRef *);
  const __CFArray *v25;
  __CFSet *v26;
  int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int (*v34)(uint64_t, CFDictionaryRef *);
  const __CFArray *v35;
  const __CFArray *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  _BOOL4 v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  NSObject *v45;
  unsigned int v46;
  unsigned int v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  NSObject *v62;
  unsigned int v63;
  unsigned int v64;
  const char *v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  NSObject *v70;
  unsigned int v71;
  unsigned int v72;
  const char *v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  NSObject *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  NSObject *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  NSObject *v85;
  unsigned int v86;
  unsigned int v87;
  NSObject *v88;
  unsigned int v89;
  unsigned int v90;
  NSObject *v91;
  unsigned int v92;
  unsigned int v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  void *v98;
  CFDictionaryRef v99;
  CFDictionaryRef v100;
  _BYTE theDict[12];
  __int16 v102;
  const char *v103;
  _QWORD v104[18];

  v104[16] = *MEMORY[0x1E0C80C00];
  v99 = 0;
  if (a2 | a5)
  {
    if (routingSession_isFromForcedPrediction(a2))
    {
      v19 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
      if (a4)
      {
        if (v19)
        {
          if (dword_1EE2B3E48)
            goto LABEL_3;
          goto LABEL_181;
        }
      }
    }
    if (routingSession_isFromForcedPrediction(a5))
    {
      if (dword_1EE2B3E48)
      {
        LODWORD(v100) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_154:
        v84 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_182;
      }
LABEL_153:
      v84 = 1;
      goto LABEL_182;
    }
    v104[0] = CFSTR("RouteUID");
    v104[1] = CFSTR("RouteName");
    v104[2] = CFSTR("AudioRouteName");
    v104[3] = CFSTR("RouteSupportsAirPlayVideo");
    v100 = 0;
    *(_QWORD *)theDict = 0;
    v98 = a3;
    if (a2)
    {
      v21 = *(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v21 || v21(a2, theDict))
      {
        v27 = 0;
        v23 = 0;
        goto LABEL_25;
      }
      Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)theDict, CFSTR("routingSessionDestination_RouteDescriptors"));
      v23 = routingSessionManager_copyFilteredRouteDescriptors(Value, (uint64_t)v104);
      if (a5)
      {
LABEL_17:
        v24 = *(unsigned int (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v24 && !v24(a5, &v100))
        {
          v25 = (const __CFArray *)CFDictionaryGetValue(v100, CFSTR("routingSessionDestination_RouteDescriptors"));
          v26 = routingSessionManager_copyFilteredRouteDescriptors(v25, (uint64_t)v104);
LABEL_22:
          v27 = FigCFEqual();
          goto LABEL_26;
        }
        v27 = 0;
LABEL_25:
        v26 = 0;
LABEL_26:
        if (*(_QWORD *)theDict)
          CFRelease(*(CFTypeRef *)theDict);
        if (v100)
          CFRelease(v100);
        if (v23)
          CFRelease(v23);
        if (v26)
          CFRelease(v26);
        if (v27)
        {
          if (!dword_1EE2B3E48)
            goto LABEL_181;
          LODWORD(v100) = 0;
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v29 = v100;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            v30 = v29;
          else
            v30 = v29 & 0xFFFFFFFE;
          if (!v30)
            goto LABEL_180;
          *(_DWORD *)theDict = 136315138;
          *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
        }
        else
        {
          if (!a7 || !a10)
          {
            if (a2)
            {
              v34 = *(unsigned int (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
              if (!v34 || v34(a2, &v99))
                goto LABEL_181;
              v35 = (const __CFArray *)CFDictionaryGetValue(v99, CFSTR("routingSessionDestination_RouteDescriptors"));
              if (a7)
              {
                v36 = v35;
                if (v98 && a6)
                {
                  v37 = objc_msgSend(a6, "microLocationProbabilityVector");
                  v38 = objc_msgSend(v98, "microLocationProbabilityVector");
                  v39 = sARPMicroLocationSimilarityFunction(v37, v38);
                  objc_msgSend(a1, "microLocationSimilarityThreshold");
                  v41 = v39 < v40;
                }
                else
                {
                  if (dword_1EE2B3E48)
                  {
                    LODWORD(v100) = 0;
                    v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v49 = v100;
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                      v50 = v49;
                    else
                      v50 = v49 & 0xFFFFFFFE;
                    if (v50)
                    {
                      *(_DWORD *)theDict = 136315138;
                      *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v41 = 0;
                }
                v58 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
                if (a4 && v58)
                {
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v60 = v100;
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                    v61 = v60;
                  else
                    v61 = v60 & 0xFFFFFFFE;
                  if (!v61)
                    goto LABEL_154;
                  *(_DWORD *)theDict = 136315138;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                }
                else
                {
                  if (!a5)
                  {
                    if (dword_1EE2B3E48)
                    {
                      LODWORD(v100) = 0;
                      v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v67 = v100;
                      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                        v68 = v67;
                      else
                        v68 = v67 & 0xFFFFFFFE;
                      if (v68)
                      {
                        v69 = routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones();
                        *(_DWORD *)theDict = 136315394;
                        *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                        v102 = 1024;
                        LODWORD(v103) = v69;
                        _os_log_send_and_compose_impl();
                      }
                      goto LABEL_180;
                    }
                    goto LABEL_181;
                  }
                  if (!v41)
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v71 = v100;
                    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                      v72 = v71;
                    else
                      v72 = v71 & 0xFFFFFFFE;
                    if (!v72)
                      goto LABEL_180;
                    v73 = "NULL";
                    if (v98)
                      v73 = "non-NULL";
                    *(_DWORD *)theDict = 136315394;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    v102 = 2082;
                    v103 = v73;
                    goto LABEL_49;
                  }
                  if (!routingSessionManager_routeIsBuiltIn(v36)
                    && (!routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(v36)
                     || !v36
                     || CFArrayGetCount(v36) != 1))
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v78 = v100;
                    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
                      v79 = v78;
                    else
                      v79 = v78 & 0xFFFFFFFE;
                    if (!v79)
                      goto LABEL_180;
                    *(_DWORD *)theDict = 136315138;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    goto LABEL_49;
                  }
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v63 = v100;
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                    v64 = v63;
                  else
                    v64 = v63 & 0xFFFFFFFE;
                  if (!v64)
                    goto LABEL_154;
                  v65 = "NULL";
                  if (v98)
                    v65 = "non-NULL";
                  *(_DWORD *)theDict = 136315394;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                  v102 = 2082;
                  v103 = v65;
                }
              }
              else if (a8)
              {
                if (routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones())
                {
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v46 = v100;
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                    v47 = v46;
                  else
                    v47 = v46 & 0xFFFFFFFE;
                  if (!v47)
                    goto LABEL_154;
                  *(_DWORD *)theDict = 136315138;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                }
                else
                {
                  if (!a5)
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v86 = v100;
                    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                      v87 = v86;
                    else
                      v87 = v86 & 0xFFFFFFFE;
                    if (!v87)
                      goto LABEL_180;
                    *(_DWORD *)theDict = 136315138;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    goto LABEL_49;
                  }
                  v54 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
                  if (!a4 || !v54)
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v89 = v100;
                    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                      v90 = v89;
                    else
                      v90 = v89 & 0xFFFFFFFE;
                    if (!v90)
                      goto LABEL_180;
                    *(_DWORD *)theDict = 136315138;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    goto LABEL_49;
                  }
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v56 = v100;
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                    v57 = v56;
                  else
                    v57 = v56 & 0xFFFFFFFE;
                  if (!v57)
                    goto LABEL_154;
                  *(_DWORD *)theDict = 136315138;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                }
              }
              else if (a9)
              {
                if (routingSession_establishedBasedOnActiveSharePlayCapableCallSession())
                {
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v52 = v100;
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                    v53 = v52;
                  else
                    v53 = v52 & 0xFFFFFFFE;
                  if (!v53)
                    goto LABEL_154;
                  *(_DWORD *)theDict = 136315138;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                }
                else
                {
                  if (!a5)
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v92 = v100;
                    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                      v93 = v92;
                    else
                      v93 = v92 & 0xFFFFFFFE;
                    if (!v93)
                      goto LABEL_180;
                    *(_DWORD *)theDict = 136315138;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    goto LABEL_49;
                  }
                  v80 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
                  if (!a4 || !v80)
                  {
                    if (!dword_1EE2B3E48)
                      goto LABEL_181;
                    LODWORD(v100) = 0;
                    v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v95 = v100;
                    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                      v96 = v95;
                    else
                      v96 = v95 & 0xFFFFFFFE;
                    if (!v96)
                      goto LABEL_180;
                    *(_DWORD *)theDict = 136315138;
                    *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    goto LABEL_49;
                  }
                  if (!dword_1EE2B3E48)
                    goto LABEL_153;
                  LODWORD(v100) = 0;
                  v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v82 = v100;
                  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                    v83 = v82;
                  else
                    v83 = v82 & 0xFFFFFFFE;
                  if (!v83)
                    goto LABEL_154;
                  *(_DWORD *)theDict = 136315138;
                  *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                }
              }
              else
              {
                if (!dword_1EE2B3E48)
                  goto LABEL_153;
                LODWORD(v100) = 0;
                v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v75 = v100;
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                  v76 = v75;
                else
                  v76 = v75 & 0xFFFFFFFE;
                if (!v76)
                  goto LABEL_154;
                *(_DWORD *)theDict = 136315138;
                *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
              }
            }
            else
            {
              if (!dword_1EE2B3E48)
                goto LABEL_153;
              LODWORD(v100) = 0;
              v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v43 = v100;
              if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                v44 = v43;
              else
                v44 = v43 & 0xFFFFFFFE;
              if (!v44)
                goto LABEL_154;
              *(_DWORD *)theDict = 136315138;
              *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
            _os_log_send_and_compose_impl();
            goto LABEL_154;
          }
          if (!dword_1EE2B3E48)
            goto LABEL_181;
          LODWORD(v100) = 0;
          v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v32 = v100;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            v33 = v32;
          else
            v33 = v32 & 0xFFFFFFFE;
          if (!v33)
            goto LABEL_180;
          *(_DWORD *)theDict = 136315138;
          *(_QWORD *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
        }
LABEL_49:
        _os_log_send_and_compose_impl();
        goto LABEL_180;
      }
    }
    else
    {
      v23 = 0;
      if (a5)
        goto LABEL_17;
    }
    v26 = 0;
    goto LABEL_22;
  }
  if (dword_1EE2B3E48)
  {
LABEL_3:
    LODWORD(v100) = 0;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_180:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_181:
  v84 = 0;
LABEL_182:
  if (v99)
    CFRelease(v99);
  return v84;
}

void routingSessionManager_updateSessionExpiration(const void *a1)
{
  _QWORD *DerivedStorage;
  double Current;
  uint64_t v4;
  void (*v5)(uint64_t, CFTypeRef *);
  const __CFDictionary *v6;
  const __CFArray *Value;
  unsigned int v8;
  int v9;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  double v16;
  double v17;
  NSObject *v18;
  dispatch_time_t v19;
  NSObject *v20;
  _QWORD block[5];
  os_log_type_t type;
  int v23;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Current = CFAbsoluteTimeGetCurrent();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v4 = DerivedStorage[9];
  if (!v4)
  {
    MEMORY[0x194035304](DerivedStorage[5]);
    goto LABEL_9;
  }
  cf[0] = 0;
  v5 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v5)
  {
    v5(v4, cf);
    v6 = (const __CFDictionary *)cf[0];
  }
  else
  {
    v6 = 0;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("routingSessionDestination_RouteDescriptors"));
  v8 = routingSessionManager_routeIsBuiltIn(Value);
  if (cf[0])
    CFRelease(cf[0]);
  MEMORY[0x194035304](DerivedStorage[5]);
  if (v8)
  {
LABEL_9:
    v9 = objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 16), "someLongFormVideoClientIsPlaying");
    MEMORY[0x1940352F8](DerivedStorage[5]);
    if (v9)
    {
      v10 = (const void *)DerivedStorage[10];
      if (v10)
      {
        CFRelease(v10);
        DerivedStorage[10] = 0;
        if (dword_1EE2B3E48)
        {
          v23 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      if (!DerivedStorage[9])
        goto LABEL_18;
      if (!DerivedStorage[10])
        routingSessionManager_getConfiguration(cf);
    }
    v12 = (const void *)DerivedStorage[9];
    if (v12)
    {
      v13 = CFRetain(v12);
      goto LABEL_19;
    }
LABEL_18:
    v13 = 0;
LABEL_19:
    v14 = (const void *)DerivedStorage[10];
    if (v14)
      v15 = CFRetain(v14);
    else
      v15 = 0;
    MEMORY[0x194035304](DerivedStorage[5]);
    if (v13 && v15)
    {
      v16 = MEMORY[0x1940349B0](v15);
      if (Current <= v16)
      {
        v17 = v16;
        if (dword_1EE2B3E48)
        {
          v23 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a1)
          CFRetain(a1);
        v19 = dispatch_time(0, (uint64_t)((v17 - Current) * 1000000000.0));
        v20 = DerivedStorage[4];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __routingSessionManager_updateSessionExpiration_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_after(v19, v20, block);
      }
      else
      {
        routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 0, 0, 1, v13, 0, CFSTR("Session expiration after playback end"), 0);
      }
    }
    else if (!v13)
    {
      if (!v15)
        return;
      goto LABEL_28;
    }
    CFRelease(v13);
    if (!v15)
      return;
LABEL_28:
    CFRelease(v15);
  }
}

uint64_t routingSession_isFromForcedPrediction(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, CFTypeRef *);
  int v3;
  CFTypeRef v4;
  CFTypeRef cf;
  unsigned __int8 v7;

  v7 = 0;
  cf = 0;
  if (a1)
  {
    v2 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v2)
    {
      v3 = v2(a1, &cf);
      v4 = cf;
      if (!v3)
      {
        FigCFDictionaryGetBooleanIfPresent();
        v4 = cf;
      }
      if (v4)
        CFRelease(v4);
    }
  }
  return v7;
}

uint64_t routingSession_establishedAutomaticallyFromLikelyDestination(uint64_t a1)
{
  uint64_t CMBaseObject;
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  CMBaseObject = FigRoutingSessionGetCMBaseObject();
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v2)
    return 0;
  if (v2(CMBaseObject, CFSTR("EstablishedAutomaticallyFromLikelyDestination"), *MEMORY[0x1E0C9AE00], &cf))
    v3 = 0;
  else
    v3 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v4 = v3;
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones()
{
  uint64_t CMBaseObject;
  uint64_t (*v1)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int v2;
  CFBooleanRef v3;
  uint64_t Value;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  CMBaseObject = FigRoutingSessionGetCMBaseObject();
  v1 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v1)
    return 0;
  v2 = v1(CMBaseObject, CFSTR("EstablishedBasedOnInEarStatusOfConnectedHeadphones"), *MEMORY[0x1E0C9AE00], &BOOLean);
  v3 = BOOLean;
  if (v2)
  {
    Value = 0;
    if (!BOOLean)
      return Value;
    goto LABEL_4;
  }
  Value = CFBooleanGetValue(BOOLean);
  v3 = BOOLean;
  if (BOOLean)
LABEL_4:
    CFRelease(v3);
  return Value;
}

const __CFArray *routingSessionManager_routeIsBuiltIn(const __CFArray *result)
{
  const __CFArray *v1;
  const __CFDictionary *ValueAtIndex;

  if (result)
  {
    v1 = result;
    if (CFArrayGetCount(result) == 1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, 0);
      CFDictionaryGetValue(ValueAtIndex, CFSTR("AudioRouteName"));
      if (FigCFEqual())
        return (const __CFArray *)1;
      else
        return (const __CFArray *)(FigCFEqual() != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(CFArrayRef theArray)
{
  CFIndex i;
  CFIndex v3;

  for (i = 0; ; ++i)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (i >= v3)
      break;
    CFArrayGetValueAtIndex(theArray, i);
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

uint64_t routingSession_establishedBasedOnActiveSharePlayCapableCallSession()
{
  uint64_t CMBaseObject;
  uint64_t (*v1)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int v2;
  CFBooleanRef v3;
  uint64_t Value;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  CMBaseObject = FigRoutingSessionGetCMBaseObject();
  v1 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v1)
    return 0;
  v2 = v1(CMBaseObject, CFSTR("EstablishedBasedOnActiveSharePlayCapableCallSession"), *MEMORY[0x1E0C9AE00], &BOOLean);
  v3 = BOOLean;
  if (v2)
  {
    Value = 0;
    if (!BOOLean)
      return Value;
    goto LABEL_4;
  }
  Value = CFBooleanGetValue(BOOLean);
  v3 = BOOLean;
  if (BOOLean)
LABEL_4:
    CFRelease(v3);
  return Value;
}

__CFSet *routingSessionManager_copyFilteredRouteDescriptors(const __CFArray *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFSet *Mutable;
  CFIndex v6;
  const CFDictionaryValueCallBacks *v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v10;
  uint64_t j;
  const void *v12;
  const void *Value;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v6 = 0;
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  if (!a1)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a1); v6 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9AEB8], v7);
    for (j = 0; j != 32; j += 8)
    {
      v12 = *(const void **)(a2 + j);
      Value = CFDictionaryGetValue(ValueAtIndex, v12);
      if (Value)
        CFDictionarySetValue(v10, v12, Value);
    }
    CFSetAddValue(Mutable, v10);
    if (v10)
      CFRelease(v10);
    ++v6;
    if (a1)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return Mutable;
}

void __routingSessionManager_updateSessionExpiration_block_invoke(uint64_t a1)
{
  const void *v2;

  routingSessionManager_updateSessionExpiration(*(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t routingSessionManager_createFakePredictionContext()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v5[0] = &unk_1E30C1470;
  v0 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v1 = objc_alloc((Class)sARPPredictionContextClass);
  v2 = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  return objc_msgSend(v1, "initWithPredictionDate:microLocationEventDate:microLocationProbabilityVector:", v2, objc_msgSend(MEMORY[0x1E0C99D68], "date"), v0);
}

void routingSessionManager_waitForRecentPredictions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_create("com.apple.coremedia.routing-session-manager.route-prediction", v5);
  FigNotificationListenerCreate(*(const void **)(DerivedStorage + 24), (const void *)sARPRoutePredictorPredictionsForCurrentContextUpdatedNotificationName);
  -[FigRoutePredictionFetchOneShotCompletion initWithCompletionHandler:]([FigRoutePredictionFetchOneShotCompletion alloc], "initWithCompletionHandler:", a3);
  routingSessionManager_updatePredictedDestinations();
}

void sub_193779D44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  NSObject *v48;
  const void *v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  dispatch_time_t v56;
  _QWORD v57[6];
  _QWORD v58[8];
  _QWORD v59[26];

  if (v49)
    CFRetain(v49);
  if (v51)
    CFRetain(v51);
  v55 = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v53 - 144) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v53 - 136) = 3221225472;
  *(_QWORD *)(v53 - 128) = __routingSessionManager_waitForRecentPredictions_block_invoke_2;
  *(_QWORD *)(v53 - 120) = &unk_1E309EE68;
  *(_QWORD *)(v53 - 112) = v50;
  *(_QWORD *)(v53 - 104) = v52;
  *(_QWORD *)(v53 - 96) = v51;
  *(_QWORD *)(v53 - 88) = v49;
  v59[0] = v55;
  v59[1] = 3221225472;
  v59[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_3;
  v59[3] = &__block_descriptor_48_e10_v16__0r_v8l;
  v59[4] = v49;
  v59[5] = v51;
  if (FigNotificationListenerStartNotifications((const __CFDictionary *)v49, (uint64_t)v48, (const void *)(v53 - 144), v59))
  {
    objc_msgSend(v50, "invokeWithRoutePredictions:predictionContext:", 0, 0);
  }
  else
  {
    if (v49)
      CFRetain(v49);
    if (v51)
      CFRetain(v51);
    v58[0] = v55;
    v58[1] = 3221225472;
    v58[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_4;
    v58[3] = &unk_1E3098E80;
    v58[4] = v50;
    v58[5] = v52;
    v58[6] = v51;
    v58[7] = v49;
    MXDispatchAsync((uint64_t)"routingSessionManager_waitForRecentPredictions", (uint64_t)"FigRoutingSessionManager.m", 2891, 0, 0, v48, (uint64_t)v58);
    if (v49)
      CFRetain(v49);
    v56 = dispatch_time(0, (uint64_t)(v54 * 1000000000.0));
    v57[0] = v55;
    v57[1] = 3221225472;
    v57[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_5;
    v57[3] = &unk_1E309DAB0;
    v57[4] = v50;
    v57[5] = v49;
    dispatch_after(v56, v48, v57);
  }

  if (v48)
    dispatch_release(v48);
  if (v49)
    CFRelease(v49);
}

id __routingSessionManager_waitForRecentPredictions_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  id result;
  id v4;

  v4 = 0;
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "predictionsWithCurrentContext:", &v4);
  result = v4;
  if (v4)
  {
    result = (id)objc_msgSend((id)objc_msgSend(v4, "microLocationEventDate"), "compare:", *(_QWORD *)(a1 + 48));
    if (result == (id)1)
    {
      objc_msgSend(*(id *)(a1 + 32), "invokeWithRoutePredictions:predictionContext:", v2, v4);
      return (id)FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 56), 0);
    }
  }
  return result;
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_3(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  id v5;

  v5 = 0;
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "predictionsWithCurrentContext:", &v5);
  if (v5 && objc_msgSend((id)objc_msgSend(v5, "microLocationEventDate"), "compare:", *(_QWORD *)(a1 + 48)) == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "invokeWithRoutePredictions:predictionContext:", v2, v5);
    FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 56), 0);
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_5(uint64_t a1)
{
  const void *v2;

  objc_msgSend(*(id *)(a1 + 32), "invokeWithRoutePredictions:predictionContext:", 0, 0);
  FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 40), 0);
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __routingSessionManager_startSessionIfNecessary_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int16 a23,char a24,os_log_type_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void (*v40)(_QWORD, uint64_t);
  const void *v41;
  CFTypeRef cf[30];

  cf[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    routingSessionManager_getConfiguration(cf);
  routingSessionManager_updateCurrentSession(*(const void **)(a1 + 32), 0, 0, 0, 1, 0, 0, 0, 0, 0, CFSTR("Top predicted destination not found"), 0);
  v40 = *(void (**)(_QWORD, uint64_t))(a1 + 40);
  if (v40)
    v40(*(_QWORD *)(a1 + 48), a2);
  v41 = *(const void **)(a1 + 32);
  if (v41)
    CFRelease(v41);
}

uint64_t __routingSessionManager_findTopAvailablePredictedDestination_block_invoke(uint64_t a1, const __CFArray *a2)
{
  void *v4;
  const __CFDictionary *AvailableDestinationFromAvailableRoutes;
  const __CFDictionary *v6;
  CFStringRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  char v11;
  uint64_t v12;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x194035B20]();
  v12 = 0;
  cf[0] = 0;
  v11 = 0;
  routingSessionManager_copyTopPredictedDestination(*(_QWORD *)(a1 + 40), cf, &v12, &v11);
  if (cf[0])
  {
    AvailableDestinationFromAvailableRoutes = routingSessionManager_createAvailableDestinationFromAvailableRoutes(a2, (CFDictionaryRef)cf[0]);
    if (!AvailableDestinationFromAvailableRoutes)
    {
      v9 = 0;
      goto LABEL_11;
    }
    v6 = AvailableDestinationFromAvailableRoutes;
    v7 = FigRoutingSessionDestinationCopyDescription((const __CFAllocator *)*MEMORY[0x1E0C9AE00], AvailableDestinationFromAvailableRoutes);
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v7)
      CFRelease(v7);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
    CFRelease(v6);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  v9 = 1;
LABEL_11:
  if (cf[0])
    CFRelease(cf[0]);
  objc_autoreleasePoolPop(v4);
  return v9;
}

void routingSessionManager_copyTopPredictedDestination(uint64_t a1, _QWORD *a2, _QWORD *a3, _BYTE *a4)
{
  __CFArray *v6;
  CFIndex v7;
  CFIndex i;
  uint64_t v9;

  v9 = 0;
  v6 = routingSessionManager_copyCurrentPredictedDestinations(a1, &v9, a4);
  v7 = 0;
  if (!v6)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(v6); v7 < i; i = 0)
  {
    CFArrayGetValueAtIndex(v6, v7);
    FigCFDictionaryGetFloatIfPresent();
    ++v7;
    if (v6)
      goto LABEL_2;
LABEL_3:
    ;
  }
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = v9;
  if (v6)
    CFRelease(v6);
}

const __CFDictionary *routingSessionManager_createAvailableDestinationFromAvailableRoutes(const __CFArray *a1, CFDictionaryRef theDict)
{
  const __CFDictionary *MutableCopy;
  const __CFArray *Value;
  const __CFArray *v5;
  int v6;
  const void **v7;
  const void *v8;

  MutableCopy = theDict;
  if (theDict)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("routingSessionDestination_RouteDescriptors"));
    v5 = (const __CFArray *)routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(a1, Value, 1);
    v6 = routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(v5);
    if (v5)
    {
      v7 = (const void **)MEMORY[0x1E0C9AE40];
      if (v6)
        v7 = (const void **)MEMORY[0x1E0C9AE50];
      v8 = *v7;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MutableCopy);
      CFDictionarySetValue(MutableCopy, CFSTR("routingSessionDestination_RouteDescriptors"), v5);
      CFDictionarySetValue(MutableCopy, CFSTR("routingSessionDestination_ProvidesExternalVideoPlayback"), v8);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return MutableCopy;
}

void __routingSessionManager_findTopAvailablePredictedDestination_block_invoke_150(uint64_t a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  const __CFArray *Value;
  id v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v9;
  CFDictionaryRef theDict[17];

  theDict[16] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x194035B20]();
  if ((_DWORD)a2)
  {
    if (gARPFeedback_6)
      v5 = gARPFeedback_1 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      theDict[0] = 0;
      routingSessionManager_copyTopPredictedDestination(*(_QWORD *)(a1 + 40), theDict, 0, 0);
      if (theDict[0]
        && (Value = (const __CFArray *)CFDictionaryGetValue(theDict[0], CFSTR("routingSessionDestination_RouteDescriptors"))) != 0)
      {
        v7 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(Value);
      }
      else
      {
        v7 = 0;
      }
      gARPFeedback_6(gARPFeedback_1, v7);
      if (theDict[0])
        CFRelease(theDict[0]);
    }
    if (dword_1EE2B3E48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
  }
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
  objc_autoreleasePoolPop(v4);
}

__CFArray *routingSessionManager_copyCurrentPredictedDestinations(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  int v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFDictionary *DestinationWithRouteID;
  id v17;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  __CFDictionary *v27;
  __CFDictionary *DestinationWithRouteName;
  int v29;
  void *context;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  os_log_type_t type;
  int v36;
  id FakePredictionContext;
  _BYTE v38[128];
  int v39;
  _DWORD v40[32];
  uint64_t v41;
  CFRange v42;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  FakePredictionContext = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!routingSessionManager_routePredictionsEnabled())
  {
LABEL_7:
    v17 = 0;
    goto LABEL_8;
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v8 = *(unsigned __int8 *)(DerivedStorage + 64);
  v9 = MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (v8)
  {
    if (dword_1EE2B3E48)
    {
      v36 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_7;
  }
  context = (void *)MEMORY[0x194035B20](v9);
  v40[0] = 0;
  v39 = 0;
  v11 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  v12 = (void *)CFPreferencesCopyAppValue(CFSTR("HighConfidenceRouteName"), CFSTR("com.apple.coremedia"));
  v13 = (void *)CFPreferencesCopyAppValue(CFSTR("HighestMediumConfidenceRouteName"), CFSTR("com.apple.coremedia"));
  v14 = (void *)CFPreferencesCopyAppValue(CFSTR("ForcedHighConfidenceDeviceUID"), CFSTR("com.apple.coremedia"));
  v15 = (void *)CFPreferencesCopyAppValue(CFSTR("ForcedMediumConfidenceDeviceUID"), CFSTR("com.apple.coremedia"));
  FigRoutingSessionManagerGetConfidenceThresholds((uint64_t)v40, (uint64_t)&v39);
  if (v15)
  {
    v29 = 1;
    DestinationWithRouteID = routingSessionManager_createDestinationWithRouteID(v15, 1);
    CFArrayAppendValue(v11, DestinationWithRouteID);
  }
  else
  {
    if (!v14)
    {
      if (v12)
      {
        DestinationWithRouteName = routingSessionManager_createDestinationWithRouteName(v12);
        CFArrayAppendValue(v11, DestinationWithRouteName);
        if (DestinationWithRouteName)
          CFRelease(DestinationWithRouteName);
      }
      if (!v13)
      {
        v29 = 0;
        goto LABEL_13;
      }
      DestinationWithRouteID = routingSessionManager_createDestinationWithRouteName(v13);
      CFArrayAppendValue(v11, DestinationWithRouteID);
      v29 = 0;
      if (!DestinationWithRouteID)
        goto LABEL_13;
      goto LABEL_12;
    }
    v29 = 1;
    DestinationWithRouteID = routingSessionManager_createDestinationWithRouteID(v14, 1);
    CFArrayAppendValue(v11, DestinationWithRouteID);
  }
  if (DestinationWithRouteID)
LABEL_12:
    CFRelease(DestinationWithRouteID);
LABEL_13:
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v11)
  {
    if (CFArrayGetCount(v11) >= 1)
    {
      v42.length = CFArrayGetCount(v11);
      v42.location = 0;
      CFArrayAppendArray(Mutable, v11, v42);
      if (a3)
        *a3 = 1;
    }
    CFRelease(v11);
  }
  if (v29)
  {
    FakePredictionContext = (id)routingSessionManager_createFakePredictionContext();
  }
  else
  {
    v19 = *(void **)(DerivedStorage + 24);
    if (v19)
    {
      v20 = (void *)objc_msgSend(v19, "predictionsWithCurrentContext:", &FakePredictionContext);
      v21 = FakePredictionContext;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
      if (v22)
      {
        v23 = v22;
        v24 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v23; ++i)
          {
            if (*(_QWORD *)v32 != v24)
              objc_enumerationMutation(v20);
            v26 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
            objc_msgSend(v26, "confidence");
            v27 = routingSessionManager_createDestinationWithRouteID((void *)objc_msgSend(v26, "outputDeviceID"), 0);
            CFArrayAppendValue(Mutable, v27);
            if (v27)
              CFRelease(v27);
          }
          v23 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
        }
        while (v23);
      }
    }
  }
  objc_autoreleasePoolPop(context);
  v17 = FakePredictionContext;
  if (a2)
  {
    *a2 = FakePredictionContext;
    v17 = FakePredictionContext;
  }
LABEL_8:

  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteID(void *a1, int a2)
{
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  CFArrayRef v7;
  CFTypeRef cf;
  void *values;

  values = a1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9AEB8];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  cf = CFDictionaryCreate(v3, (const void **)kFigEndpointDescriptorKey_RouteUID, (const void **)&values, 1, v4, v5);
  v7 = CFArrayCreate(v3, &cf, 1, MEMORY[0x1E0C9B378]);
  if (v7)
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_RouteDescriptors"), v7);
  FigCFDictionarySetFloat();
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_FromForcedPrediction"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteName(void *a1)
{
  const __CFAllocator *v1;
  const CFDictionaryKeyCallBacks *v2;
  const CFDictionaryValueCallBacks *v3;
  __CFDictionary *Mutable;
  CFArrayRef v5;
  const void **v6;
  int v7;
  const void **v8;
  const void *v9;
  CFTypeRef cf;
  void *values;

  values = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9AEB8];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  cf = CFDictionaryCreate(v1, (const void **)kFigEndpointDescriptorKey_RouteName, (const void **)&values, 1, v2, v3);
  v5 = CFArrayCreate(v1, &cf, 1, MEMORY[0x1E0C9B378]);
  v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = FigCFEqual();
  v8 = (const void **)MEMORY[0x1E0C9AE50];
  if (v7)
    v8 = v6;
  v9 = *v8;
  if (v5)
  {
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_RouteDescriptors"), v5);
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_ProvidesExternalVideoPlayback"), v9);
    FigCFDictionarySetFloat();
    CFRelease(v5);
  }
  else
  {
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_ProvidesExternalVideoPlayback"), v9);
    FigCFDictionarySetFloat();
  }
  if (cf)
    CFRelease(cf);
  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteDescriptors(const __CFArray *a1)
{
  __CFDictionary *Mutable;
  int v3;
  const void *v4;
  const void *v5;
  const void *v6;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v3 = routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(a1);
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_RouteDescriptors"), a1);
  if (v3)
    v6 = v4;
  else
    v6 = v5;
  CFDictionarySetValue(Mutable, CFSTR("routingSessionDestination_ProvidesExternalVideoPlayback"), v6);
  return Mutable;
}

uint64_t routingSessionManager_setPredictionContextForSession(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352F8](DerivedStorage[5]);
  if (DerivedStorage[9] == a2)
  {
    if (!DerivedStorage[11])
    {
      DerivedStorage[11] = a3;
      return MEMORY[0x194035304](DerivedStorage[5]);
    }
    if (dword_1EE2B3E48)
      goto LABEL_8;
  }
  else if (dword_1EE2B3E48)
  {
LABEL_8:
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x194035304](DerivedStorage[5]);
}

void *__routingSessionManager_loadAirPlayRoutePredictionFramework_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *result;

  v2 = dlopen("/System/Library/PrivateFrameworks/AirPlayRoutePrediction.framework/AirPlayRoutePrediction", 4);
  if (!v2)
    goto LABEL_14;
  v3 = v2;
  sARPRoutePredictorClass = (uint64_t)objc_getClass("ARPRoutePredictor");
  if (!sARPRoutePredictorClass)
    goto LABEL_14;
  sARPPredictionContextClass = (uint64_t)objc_getClass("ARPPredictionContext");
  if (!sARPPredictionContextClass)
    goto LABEL_14;
  v4 = (uint64_t *)dlsym(v3, "ARPRoutePredictorPredictionsForCurrentContextUpdated");
  if (!v4)
    goto LABEL_14;
  sARPRoutePredictorPredictionsForCurrentContextUpdatedNotificationName = *v4;
  sARPMicroLocationSimilarityFunction = (double (*)(_QWORD, _QWORD))dlsym(v3, "ARPMicroLocationSimilarity");
  if (!sARPMicroLocationSimilarityFunction)
    goto LABEL_14;
  v5 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonNotFound");
  if (!v5)
    goto LABEL_14;
  gARPFeedback_1 = *v5;
  v6 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonNotSupported");
  if (!v6)
    goto LABEL_14;
  gARPFeedback_2 = *v6;
  v7 = (uint64_t *)dlsym(v3, "ARPPresentationMediumAutoroute");
  if (!v7)
    goto LABEL_14;
  gARPFeedback_0 = *v7;
  v8 = (uint64_t *)dlsym(v3, "ARPRoutingFailureReasonNotFound");
  if (!v8
    || (gARPFeedback_3 = *v8, (v9 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonExistingRoute")) == 0)
    || (gARPFeedback_4 = *v9, (gARPFeedback_5 = dlsym(v3, "ARPDonateFeedbackForPredictionPresented")) == 0)
    || (gARPFeedback_6 = dlsym(v3, "ARPDonateFeedbackForPredictionSuppressed")) == 0
    || (result = dlsym(v3, "ARPDonateFeedbackForRoutingFailure"), (gARPFeedback_7 = result) == 0))
  {
LABEL_14:
    result = (void *)FigSignalErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result;
  }
  return result;
}

void routingSessionManager_establishRoutingSessionFromCurrentRoutes(const void *a1, const __CFArray *a2, void *a3)
{
  __CFDictionary *DestinationWithRouteDescriptors;
  CFTypeRef cf;
  __int128 v7;

  cf = 0;
  DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(a2);
  if (!FigRoutingSessionCreate(*MEMORY[0x1E0C9AE00], 0, DestinationWithRouteDescriptors, &cf))
  {
    routingSessionManager_updateCurrentSession(a1, cf, 0, 0, 0, 0, 0, 0, 0, 0, a3, 0);
    CFAbsoluteTimeGetCurrent();
    routingSessionManager_getConfiguration(&v7);
  }
  if (cf)
    CFRelease(cf);
  if (DestinationWithRouteDescriptors)
    CFRelease(DestinationWithRouteDescriptors);
}

void __routingSessionManager_updatePredictionContextForSession_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  routingSessionManager_setPredictionContextForSession(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
}

BOOL __routingSessionManager_updatePredictedDestinations_block_invoke(uint64_t a1, const __CFArray *a2)
{
  __CFArray *v4;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  CFIndex v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *AvailableDestinationFromAvailableRoutes;
  const __CFDictionary *v11;
  CFIndex Count;
  CFIndex v13;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  id v18;
  id v19;
  __CFString *v20;
  CFIndex v21;
  CFIndex j;
  const __CFDictionary *v23;
  const __CFString *v24;
  CFIndex v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v28[23];

  v28[21] = *(id *)MEMORY[0x1E0C80C00];
  v28[0] = 0;
  v4 = routingSessionManager_copyCurrentPredictedDestinations(*(_QWORD *)(a1 + 32), v28, 0);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v7 = 0;
  if (!v4)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(v4); v7 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
    AvailableDestinationFromAvailableRoutes = routingSessionManager_createAvailableDestinationFromAvailableRoutes(a2, ValueAtIndex);
    if (AvailableDestinationFromAvailableRoutes)
    {
      v11 = AvailableDestinationFromAvailableRoutes;
      CFArrayAppendValue(Mutable, AvailableDestinationFromAvailableRoutes);
      CFRelease(v11);
    }
    ++v7;
    if (v4)
      goto LABEL_2;
LABEL_3:
    ;
  }
  if (Mutable)
  {
    Count = CFArrayGetCount(Mutable);
    if (v4)
    {
LABEL_11:
      v13 = CFArrayGetCount(v4);
      goto LABEL_14;
    }
  }
  else
  {
    Count = 0;
    if (v4)
      goto LABEL_11;
  }
  v13 = 0;
LABEL_14:
  MEMORY[0x1940352F8](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
  v14 = FigCFEqual();
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(const void **)(v15 + 48);
  *(_QWORD *)(v15 + 48) = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  if (v16)
    CFRelease(v16);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(id *)(v17 + 56);
  if (v28[0] != v18)
  {

    v19 = v28[0];
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v17 + 56) = v19;
  }
  MEMORY[0x194035304](*(_QWORD *)(v17 + 40));
  if (!v14)
  {
    v20 = CFStringCreateMutable(v5, 0);
    v21 = 0;
    if (!Mutable)
      goto LABEL_23;
LABEL_22:
    for (j = CFArrayGetCount(Mutable); v21 < j; j = 0)
    {
      v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v21);
      v24 = FigRoutingSessionDestinationCopyDescription(v5, v23);
      CFStringAppend(v20, v24);
      if (Mutable)
        v25 = CFArrayGetCount(Mutable);
      else
        v25 = 0;
      if (v21 < v25 - 1)
        CFStringAppend(v20, CFSTR(", "));
      if (v24)
        CFRelease(v24);
      ++v21;
      if (Mutable)
        goto LABEL_22;
LABEL_23:
      ;
    }
    if (v20)
    {
      if (dword_1EE2B3E48)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v20);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v4)
    CFRelease(v4);
  return Count == v13;
}

void __routingSessionManager_updatePredictedDestinations_block_invoke_208(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t routingSessionManager_wifiPowerStatusChanged(uint64_t a1, const void *a2)
{
  uint64_t result;
  BOOL v4;
  int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = sFigRoutingSessionManagerWiFiDevice;
  if (sWiFiDeviceClientGetPower)
    v4 = sFigRoutingSessionManagerWiFiDevice == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 1;
  }
  else
  {
    result = sWiFiDeviceClientGetPower();
    v5 = result;
  }
  if (dword_1EE2B3E48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v5)
  {
    routingSessionManager_updateCurrentSession(a2, 0, 0, 0, 1, 0, 0, 0, 0, 0, CFSTR("WiFi is powered off"), 0);
    routingSessionManager_updatePredictedDestinations();
  }
  return result;
}

void sub_19377D640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19377D838(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t MXEndpointDescriptorLogRouteDelta(uint64_t a1, const __CFArray *a2, uint64_t a3, int a4)
{
  const __CFString *v5;
  void *v6;
  CFIndex v7;
  uint64_t v8;
  CFIndex i;
  uint64_t Value;
  uint64_t v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFString *v23;

  if (a4)
    v5 = CFSTR("The following endpoints went away for endpointManager=%@\n");
  else
    v5 = CFSTR("The following endpoints are newly available for endpointManager=%@\n");
  v23 = v5;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", a1);
  v7 = 0;
  v8 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_5:
  for (i = CFArrayGetCount(a2); v7 < i; i = 0)
  {
    CFArrayGetValueAtIndex(a2, v7);
    FigCFDictionaryGetValue();
    if (FigCFArrayContainsValue())
    {
      FigCFDictionaryGetValue();
      Value = FigCFDictionaryGetValue();
      v11 = FigCFDictionaryGetValue();
      if (v11)
        LOBYTE(v11) = FigCFNumberGetUInt64();
      v12 = FigRoutingManagerCopyEndpointFeaturesAsString(v11);
      v13 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\t[%ld] Endpoint=%@, supportedFeatures=%@\n"), v8, Value, v12);
      v14 = objc_msgSend(v6, "length");
      if ((unint64_t)(objc_msgSend(v13, "length") + v14) > 0x3FF)
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v19 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v23, a1, v20);
        v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\t[%ld] Endpoint=%@, supportedFeatures=%@\n"), v19, v8, Value, v12);
      }
      else
      {
        v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), v6, v13, v21, v22);
      }
      v6 = (void *)v15;
      ++v8;
      if (v12)
        CFRelease(v12);
    }
    ++v7;
    if (a2)
      goto LABEL_5;
LABEL_6:
    ;
  }
  result = objc_msgSend(v6, "length");
  if (result && dword_1EE2B3F38)
  {
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void MXEndpointDescriptorEndpointDescriptionDidChangeHandler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1940352BC](objc_msgSend(a2, "_getCacheMutex"));
  objc_msgSend(a2, "_endpointDescriptionDidChangeForEndpoint:notificationName:payload:", a4, a3, a5);
  objc_msgSend(a2, "_getCacheMutex");
  JUMPOUT(0x1940352C8);
}

uint64_t FigRoutingSessionManagerGetClassID()
{
  if (FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce != -1)
    dispatch_once_f(&FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce, &FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID, (dispatch_function_t)routingSessionManager_getClassID);
  return FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID;
}

uint64_t routingSessionManager_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigRoutingSessionManagerGetTypeID()
{
  if (FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce != -1)
    dispatch_once_f(&FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce, &FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID, (dispatch_function_t)routingSessionManager_getClassID);
  return CMBaseClassGetCFTypeID();
}

CFStringRef routingSessionManager_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRoutingSessionManager %p]"), a1);
}

void sub_19377FC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFDictionary *FigRoutingSessionCopyAsDictionary(uint64_t a1, int a2)
{
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, void **);
  const __CFAllocator *v6;
  unsigned int (*v7)(uint64_t, CFTypeRef *);
  __CFDictionary *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  if (!a1)
    return 0;
  CMBaseObject = FigRoutingSessionGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v5
    || (v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        v5(CMBaseObject, CFSTR("EstablishedAutomaticallyFromLikelyDestination"), *MEMORY[0x1E0C9AE00], &value))
    || (v7 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
    || v7(a1, &cf))
  {
    v10 = 0;
    v8 = 0;
  }
  else
  {
    v8 = CopySanitizedDestination((CFDictionaryRef)cf, a2);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("EstablishedAutomaticallyFromLikelyDestination"), value);
      CFDictionarySetValue(v10, CFSTR("Destination"), v8);
    }
  }
  if (value)
    CFRelease(value);
  if (v8)
    CFRelease(v8);
  if (cf)
    CFRelease(cf);
  return v10;
}

__CFDictionary *CopySanitizedDestination(CFDictionaryRef theDict, int a2)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;

  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  v4 = MutableCopy;
  if (!a2)
    CFDictionaryRemoveValue(MutableCopy, CFSTR("routingSessionDestination_RouteDescriptors"));
  return v4;
}

const __CFDictionary *FigRoutingSessionCopyFromDictionary(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const void *Value;
  uint64_t v3;

  v3 = 0;
  if (result)
  {
    v1 = result;
    Value = CFDictionaryGetValue(result, CFSTR("EstablishedAutomaticallyFromLikelyDestination"));
    result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("Destination"));
    if (result)
    {
      FigRoutingSessionCreate(*MEMORY[0x1E0C9AE00], Value == (const void *)*MEMORY[0x1E0C9AE50], result, &v3);
      return (const __CFDictionary *)v3;
    }
  }
  return result;
}

uint64_t FigRoutingSessionManagerStartServer()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t HandleRoutingSessionManagerRemoteMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t HandleRoutingSessionManagerRemoteMessageWithNoReply(int a1, xpc_object_t xdict)
{
  uint64_t OpCode;
  unsigned int v3;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  v3 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v3)
    return v3;
  else
    return 4294951138;
}

_QWORD *CreateCompletionCallbackParametersFromMessageAndConnection_0(void *a1)
{
  uint64_t uint64;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  uint64 = xpc_dictionary_get_uint64(a1, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID);
  if (!uint64)
    return 0;
  v3 = uint64;
  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200403ED2C137uLL);
  if (!v4)
  {
    if (FigSignalErrorAt())
      DestroyCompletionCallbackParameters(0);
    return 0;
  }
  v5 = v4;
  *v4 = v3;
  v4[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E0CA36A0]);
  v5[2] = FigXPCRetain();
  return v5;
}

uint64_t StartHighConfidenceSessionCompletionCallback(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, *(_QWORD *)a1);
      xpc_dictionary_set_int64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionStatus, a2);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  DestroyCompletionCallbackParameters((void *)a1);
  return FigXPCRelease();
}

uint64_t PrepareForPlaybackCompletionCallback(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, *(_QWORD *)a1);
      xpc_dictionary_set_int64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionStatus, a2);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  DestroyCompletionCallbackParameters((void *)a1);
  return FigXPCRelease();
}

uint64_t MXAggregateEndpointCreateAggregateEndpoint(const void *a1, const void *a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFTypeRef v10;
  CFTypeRef v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  const __CFString *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (MXAggregateSetUpLoggingOnce_setUpLogging != -1)
    dispatch_once(&MXAggregateSetUpLoggingOnce_setUpLogging, &__block_literal_global_75);
  FigEndpointAggregateGetClassID();
  v8 = CMDerivedObjectCreate();
  if (!(_DWORD)v8)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *(_QWORD *)(DerivedStorage + 88) = 0;
    *(_OWORD *)(DerivedStorage + 104) = 0u;
    *(_OWORD *)(DerivedStorage + 120) = 0u;
    if (a2)
      v10 = CFRetain(a2);
    else
      v10 = 0;
    *(_QWORD *)(DerivedStorage + 32) = v10;
    if (a1)
      v11 = CFRetain(a1);
    else
      v11 = 0;
    *(_QWORD *)(DerivedStorage + 16) = v11;
    *(_DWORD *)(DerivedStorage + 24) = a3;
    *(_QWORD *)(DerivedStorage + 48) = 0;
    *(_QWORD *)(DerivedStorage + 96) = 0;
    *(_QWORD *)(DerivedStorage + 136) = 0;
    *(_QWORD *)(DerivedStorage + 144) = objc_alloc_init(MEMORY[0x1E0C99D20]);
    v12 = objc_alloc_init(MEMORY[0x1E0CB3A28]);
    v13 = (void *)objc_msgSend(v12, "UUIDString");

    *(_QWORD *)DerivedStorage = v13;
    v14 = objc_alloc(MEMORY[0x1E0CB3940]);
    v15 = *(int *)(DerivedStorage + 24);
    if (v15 > 3)
      v16 = CFSTR("?");
    else
      v16 = off_1E309F150[v15];
    *(_QWORD *)(DerivedStorage + 8) = objc_msgSend(v14, "initWithFormat:", CFSTR("MXEndpointAggregate-%@-[{%p}]"), v16, 0);
    *(_QWORD *)(DerivedStorage + 40) = FigSimpleMutexCreate();
    *a4 = 0;
    if (dword_1EE2B3B80)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v8;
}

uint64_t endpointAggregate_Finalize()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t result;

  if (dword_1EE2B3B80)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 136);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 8);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }

  result = FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 40) = 0;
  return result;
}

id endpointAggregate_CopyDebugDescription()
{
  _QWORD *DerivedStorage;
  void *v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<MXAggregateEndpoint: routingContextUUID: [%@] name: %@ uuid: %@ APAggregateEndpoint %@> "), DerivedStorage[4], DerivedStorage[1], *DerivedStorage, DerivedStorage[6]);
  MEMORY[0x194035304](DerivedStorage[5]);
  return v2;
}

uint64_t endpointAggregate_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *Copy;
  uint64_t result;
  const void *v11;
  CFTypeRef v12;
  _QWORD v13[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
    Copy = *(const void **)(DerivedStorage + 48);
    if (Copy)
      Copy = CFRetain(Copy);
    goto LABEL_4;
  }
  if (FigCFEqual())
  {
    v11 = *(const void **)(DerivedStorage + 8);
    if (v11)
    {
LABEL_7:
      v12 = CFRetain(v11);
LABEL_11:
      result = 0;
      *a4 = v12;
      return result;
    }
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    v11 = *(const void **)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
      goto LABEL_7;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    v11 = *(const void **)(DerivedStorage + 32);
    if (v11)
      goto LABEL_7;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    v11 = (const void *)*MEMORY[0x1E0CA4968];
    if (*MEMORY[0x1E0CA4968])
      goto LABEL_7;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(DerivedStorage + 144));
LABEL_4:
    *a4 = Copy;
    MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
    return 0;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_CopyProperty_block_invoke;
  v13[3] = &__block_descriptor_56_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v13);
}

uint64_t endpointAggregate_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __endpointAggregate_SetProperty_block_invoke;
  v4[3] = &__block_descriptor_48_e28_i16__0__OpaqueFigEndpoint__8l;
  v4[4] = a2;
  v4[5] = a3;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v4);
}

uint64_t endpointAggregate_WithRemoteAggregateEndpoint(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const void *v6;
  const void **v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t (*v14)(uint64_t, uint64_t, const void **);
  NSObject *v15;
  NSObject *v16;
  const void *v17;
  void (*v18)(const void *, _BYTE *);
  uint64_t (*v19)(const void *, _QWORD *);
  CFTypeRef v20;
  NSObject *v22;
  NSObject *v23;
  const void *v24;
  _BYTE buf[24];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];

  v28[5] = *MEMORY[0x1E0C80C00];
  if (!endpointAggregate_IsMXAggregateEndpoint(a1))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v7 = (const void **)(DerivedStorage + 48);
  v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    v8 = 0;
    goto LABEL_29;
  }
  v24 = (const void *)a1;
  if (dword_1EE2B3B80)
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)(DerivedStorage + 16);
  v11 = *(unsigned int *)(DerivedStorage + 24);
  v12 = 5;
  while (1)
  {
    if (dword_1EE2B3B80)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = *(uint64_t (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v14)
    {
      v8 = 4294954514;
      goto LABEL_14;
    }
    v8 = v14(v10, v11, v7);
    if (!(_DWORD)v8)
      break;
LABEL_14:
    if (dword_1EE2B3B80)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v7 = (const void **)(DerivedStorage + 48);
    }
    usleep(0xC350u);
    if (!--v12)
      goto LABEL_17;
  }
  if (!*v7)
  {
    v8 = 0;
LABEL_17:
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    v7 = (const void **)(DerivedStorage + 48);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_28;
  }
  FigEndpointAggregateGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
    v8 = 4294950576;
    goto LABEL_17;
  }
  if (!endpointAggregate_IsMXAggregateEndpoint((uint64_t)v24))
  {
    v8 = 4294950576;
    goto LABEL_17;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v8 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v8)
    goto LABEL_17;
  if (v24)
  {
    v17 = *v7;
    if (*v7)
    {
      v26 = 0;
      v27 = 0;
      *(_QWORD *)&buf[8] = MXAggregateEndpointHandleAuthRequired;
      *(_QWORD *)&buf[16] = MXAggregateEndpointHandleEndpointFailed;
      *(_QWORD *)buf = CFRetain(v24);
      v18 = *(void (**)(const void *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v18)
        v18(v17, buf);
      v28[1] = 0;
      v28[2] = MXAggregateEndpointDidReceiveDataFromCommChannel;
      v28[3] = MXAggregateEndpointDidCloseCommChannel;
      v28[0] = CFRetain(v24);
      v19 = *(uint64_t (**)(const void *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v19)
        v8 = v19(v17, v28);
      else
        v8 = 4294954514;
    }
  }
LABEL_28:
  v6 = *v7;
  if (*v7)
LABEL_29:
    v20 = CFRetain(v6);
  else
    v20 = 0;
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (!(_DWORD)v8 && v20)
  {
LABEL_34:
    v8 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, v20);
    goto LABEL_35;
  }
  MXSimulateCrash((uint64_t)"Something went wrong when setting up the remote aggregate endpoint. Please file a bug to Medi"
                           "aExperience (New Bugs) | All.");
  if ((_DWORD)v8)
  {
    v22 = MXGetAssertionLog();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "-MXAggregateEndpoint-";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "endpointAggregate_WithRemoteAggregateEndpoint";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v26) = 590;
      _os_log_impl(&dword_1935FC000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
    }
    if (!v20)
      return v8;
LABEL_35:
    CFRelease(v20);
    return v8;
  }
  if (v20)
    goto LABEL_34;
  v23 = MXGetAssertionLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "-MXAggregateEndpoint-";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "endpointAggregate_WithRemoteAggregateEndpoint";
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v26) = 591;
    _os_log_impl(&dword_1935FC000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
  }
  return 4294950571;
}

BOOL endpointAggregate_IsMXAggregateEndpoint(uint64_t a1)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    FigEndpointAggregateGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      if ((_UNKNOWN *)CMBaseObjectGetVTable() == &kMXAggregateEndpointVTable)
        return 1;
    }
  }
  return result;
}

void endpointAggregate_NotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  _QWORD *DerivedStorage;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  void (*v11)(uint64_t, _QWORD, _QWORD, const void *);
  const void *v12;

  v6 = (void *)MEMORY[0x194035B20]();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = FigCFEqual();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  if (a4 && FigCFEqual())
  {
    if (v8)
    {
      if (dword_1EE2B3B80)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(a2);
      v11 = (void (*)(uint64_t, _QWORD, _QWORD, const void *))DerivedStorage[9];
      if (DerivedStorage[12])
        v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      else
        v12 = 0;
      MEMORY[0x194035304](DerivedStorage[5]);
      if (v11)
        v11(a2, 0, MEMORY[0x1E0C9AA70], v12);
      if (v12)
        CFRelease(v12);
    }
    else
    {
      MEMORY[0x194035304](DerivedStorage[5]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  else
  {
    if (dword_1EE2B3B80)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x194035304](DerivedStorage[5]);
  }
  objc_autoreleasePoolPop(v6);
}

id MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(uint64_t a1)
{
  id result;
  uint64_t DerivedStorage;
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;

  result = (id)endpointAggregate_IsMXAggregateEndpoint(a1);
  if ((_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 48))
    {
      FigEndpointAggregateGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        if (endpointAggregate_IsMXAggregateEndpoint(a1))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
      }
    }
    v4 = *(_QWORD *)(DerivedStorage + 48);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v5)
      v5(v4);
    v6 = *(const void **)(DerivedStorage + 48);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }

    result = objc_alloc_init(MEMORY[0x1E0C99D20]);
    *(_QWORD *)(DerivedStorage + 144) = result;
  }
  return result;
}

void MXAggregateEndpointHandleAuthRequired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *DerivedStorage;
  void (*v14)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t);
  const void *v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v14 = (void (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t))DerivedStorage[8];
  if (DerivedStorage[12])
    v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v15 = 0;
  MEMORY[0x194035304](DerivedStorage[5]);
  if (v14)
    v14(a4, a2, a3, v15, a5, a6, a7);
  if (v15)
    CFRelease(v15);
}

void MXAggregateEndpointHandleEndpointFailed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  void (*v8)(uint64_t, uint64_t, uint64_t, const void *);
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v8 = (void (*)(uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[9];
  if (DerivedStorage[12])
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v9 = 0;
  MEMORY[0x194035304](DerivedStorage[5]);
  if (v8)
    v8(a4, a2, a3, v9);
  if (v9)
    CFRelease(v9);
}

void MXAggregateEndpointDidReceiveDataFromCommChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, const void *);
  const void *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[15];
  if (DerivedStorage[17])
    v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v11 = 0;
  MEMORY[0x194035304](DerivedStorage[5]);
  if (v10)
    v10(a5, a2, a3, a4, v11);
  if (v11)
    CFRelease(v11);
}

void MXAggregateEndpointDidCloseCommChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  void (*v8)(uint64_t, uint64_t, uint64_t, const void *);
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](DerivedStorage[5]);
  v8 = (void (*)(uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[16];
  if (DerivedStorage[17])
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v9 = 0;
  MEMORY[0x194035304](DerivedStorage[5]);
  if (v8)
    v8(a4, a2, a3, v9);
  if (v9)
    CFRelease(v9);
}

uint64_t endpointAggregate_Activate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_Activate_block_invoke;
  v6[3] = &__block_descriptor_72_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a1;
  v6[5] = a2;
  v6[6] = a3;
  v6[7] = a4;
  v6[8] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_Deactivate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __endpointAggregate_Deactivate_block_invoke;
  v5[3] = &__block_descriptor_64_e28_i16__0__OpaqueFigEndpoint__8l;
  v5[4] = a1;
  v5[5] = a2;
  v5[6] = a3;
  v5[7] = a4;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v5);
}

uint64_t endpointAggregate_SetDelegateRouting(uint64_t a1, __int128 *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const void *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _QWORD v11[5];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3B80)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v7 = (_OWORD *)(DerivedStorage + 56);
  if (a2)
  {
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)(DerivedStorage + 88) = *((_QWORD *)a2 + 4);
    *v7 = v8;
    *(_OWORD *)(DerivedStorage + 72) = v9;
    *(_QWORD *)(DerivedStorage + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 88) = 0;
    *v7 = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
  }
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __endpointAggregate_SetDelegateRouting_block_invoke;
  v11[3] = &__block_descriptor_40_e28_i16__0__OpaqueFigEndpoint__8l;
  v11[4] = a1;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v11);
}

uint64_t endpointAggregate_SetDelegateRemoteControl(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  _OWORD *v6;
  __int128 v7;
  _QWORD v9[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  v5 = *(const void **)(DerivedStorage + 136);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v6 = (_OWORD *)(DerivedStorage + 104);
  if (a2)
  {
    v7 = a2[1];
    *v6 = *a2;
    *(_OWORD *)(DerivedStorage + 120) = v7;
    *(_QWORD *)(DerivedStorage + 136) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  else
  {
    *v6 = 0u;
    *(_OWORD *)(DerivedStorage + 120) = 0u;
  }
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __endpointAggregate_SetDelegateRemoteControl_block_invoke;
  v9[3] = &__block_descriptor_40_e28_i16__0__OpaqueFigEndpoint__8l;
  v9[4] = a1;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v9);
}

void MXAggregateEndpointCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  NSObject *v14;

  v8 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))objc_msgSend(a5, "callback");
  v9 = objc_msgSend(a5, "endpoint");
  v10 = objc_msgSend(a5, "callbackRefCon");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3B80)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v8)
    v8(v9, a2, a3, a4, v10);
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  if (objc_msgSend(a5, "operationType") == 2)
  {
    v13 = objc_msgSend(*(id *)(DerivedStorage + 144), "count");
    if (a1)
    {
      if (!v13 && *(_QWORD *)(DerivedStorage + 48) && FigCFEqual())
      {
        if (dword_1EE2B3B80)
        {
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(v9);
      }
    }
  }
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));

}

uint64_t endpointAggregate_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_SendCommand_block_invoke;
  v6[3] = &__block_descriptor_64_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_SendData_block_invoke;
  v6[3] = &__block_descriptor_64_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_AddEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t FigEndpoint;
  _QWORD v13[10];

  FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_AddEndpoint_block_invoke;
  v13[3] = &__block_descriptor_80_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a1;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a2;
  v13[9] = DerivedStorage;
  return endpointAggregate_WithRemoteAggregateEndpoint(FigEndpoint, (uint64_t)v13);
}

uint64_t endpointAggregate_RemoveEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t FigEndpoint;
  _QWORD v13[10];

  FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_RemoveEndpoint_block_invoke;
  v13[3] = &__block_descriptor_80_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a1;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a2;
  v13[9] = DerivedStorage;
  return endpointAggregate_WithRemoteAggregateEndpoint(FigEndpoint, (uint64_t)v13);
}

void MXAggregateSubEndpointCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v11 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))objc_msgSend(a6, "callback");
  v12 = objc_msgSend(a6, "endpoint");
  v13 = objc_msgSend(a6, "callbackRefCon");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2B3B80)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352F8](*(_QWORD *)(DerivedStorage + 40));
  MXAggregateEndpointUpdateSubEndpoints();
  MEMORY[0x194035304](*(_QWORD *)(DerivedStorage + 40));
  if (v11)
    v11(v12, a2, a3, a4, a5, v13);

}

void MXAggregateEndpointUpdateSubEndpoints()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, void **);
  char v5;
  id v6;
  void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v1 = *(const void **)(DerivedStorage + 48);
  if (!v1)
  {
    v2 = 0;
    goto LABEL_7;
  }
  v2 = CFRetain(v1);
  if (!v2)
  {
LABEL_7:
    v5 = 1;
    goto LABEL_8;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
    v4(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v7);
  v5 = 0;
LABEL_8:

  v6 = v7;
  if (!v7)
    v6 = objc_alloc_init(MEMORY[0x1E0C99D20]);
  *(_QWORD *)(DerivedStorage + 144) = v6;
  if ((v5 & 1) == 0)
    CFRelease(v2);
}

void __cmsmInitializeLogging_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if ((dword_1EE2B3F38 & 0x100) != 0)
  {
    dword_1EE2B3F38 = 0;
  }
  else if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_PrintBuildInfo();
}

void cmsmInitializeCMSessionManager()
{
  int IsAudiomxd;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  const __CFDictionary *v3;
  CFTypeID TypeID;
  const void *Value;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  CFTypeID v10;
  NSObject *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  int Count;
  int v15;
  const void **v16;
  const void **v17;
  const void **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  MXSessionManager *v30;
  NSObject *v31;
  const __CFString *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char DoesPortSupportDoAP;
  uint64_t VolumeSequenceNumber;
  void *v38;
  NSObject *v39;
  NSObject *v40;
  dispatch_time_t v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t type[8];
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _DWORD valuePtr[32];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (cmsmInitializeLogging_onceToken != -1)
    dispatch_once(&cmsmInitializeLogging_onceToken, &__block_literal_global_76);
  CMSMDeviceState_UpdateDeviceConfiguration();
  MXCFPreferencesMigrateUserPreferencesToMXDomain();
  MXCFPreferencesMigrateSilentModeUserPreferenceToMXDomain();
  +[MXAppProtectionManager sharedInstance](MXAppProtectionManager, "sharedInstance");
  -[MXMediaEndowmentManager loadMediaEndowments](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "loadMediaEndowments");
  +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  sCMSessionClass = 0;
  *(_QWORD *)algn_1EE2B2F68 = "CMSession";
  qword_1EE2B2F70 = (uint64_t)cmsInit;
  unk_1EE2B2F78 = 0;
  qword_1EE2B2F80 = (uint64_t)CMSessionFinalize;
  unk_1EE2B2F88 = 0;
  qword_1EE2B2F90 = 0;
  unk_1EE2B2F98 = 0;
  qword_1EE2B2FA0 = (uint64_t)cmsCopyDebugDesc;
  sCMSessionID = _CFRuntimeRegisterClass();
  if (cmsmLoadAudioStatisticsRoutines_once != -1)
    dispatch_once(&cmsmLoadAudioStatisticsRoutines_once, &__block_literal_global_169);
  if (cmsmLoadClusterSyncMgrRoutines_once != -1)
    dispatch_once(&cmsmLoadClusterSyncMgrRoutines_once, &__block_literal_global_212);
  IsAudiomxd = CMSMDeviceState_IsAudiomxd();
  MXGetNotificationSenderQueue();
  if (IsAudiomxd)
    CMSMDeviceState_AddQueueToWatchDogMonitoring();
  else
    FigWatchdogMonitorDispatchQueue();
  gCMSM = FigReentrantMutexCreate();
  qword_1EE2B3D30 = 0;
  if (dword_1EE2B3F38)
  {
    v48 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRouteDiscoveryManagerInit();
  FigRouteDiscoveryManagerStart();
  FigRoutingManagerInit();
  CMScreenInitialize();
  MX_FrontBoardServices_Initialize();
  CMSM_IDS_Initialize();
  CMSM_IDSClient_Initialize();
  CMSM_IDSServer_Initialize();
  CMSM_IDSConnection_Initialize();
  MX_CoreServices_Initialize();
  if (!gDefaultVolumeCategory)
  {
    CelestialGetModelSpecificName();
    v2 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v2)
    {
      v3 = (const __CFDictionary *)v2;
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v3))
      {
        Value = CFDictionaryGetValue(v3, CFSTR("Category"));
        v6 = (uint64_t)Value;
        if (Value)
          CFRetain(Value);
      }
      else
      {
        v6 = 0;
      }
      gDefaultVolumeCategory = v6;
      CFRelease(v3);
    }
    else
    {
      gDefaultVolumeCategory = 0;
    }
  }
  +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v45, v46);
  PVMInitialize();
  CMSystemSoundMgr_Initialize();
  v7 = MXGetNotificationSenderQueue();
  CMSMDeviceState_Initialize(v7);
  MX_IOKit_Initialize();
  dword_1EE2B3C7C = FigGetCFPreferenceNumberWithDefault();
  -[MXSessionManager setCurrentAudioCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCurrentAudioCategory:", CFSTR("Audio/Video"));
  -[MXSessionManager setCurrentAudioMode:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCurrentAudioMode:", CFSTR("Default"));
  -[MXSessionManager updateSilentModeState:untilTime:withReason:forClientType:updateForStartup:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateSilentModeState:untilTime:withReason:forClientType:updateForStartup:", -[MXSessionManager silentModeEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "silentModeEnabled"), -[MXSessionManager silentModeEnabledUntilTime](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "silentModeEnabledUntilTime"), -[MXSessionManager silentModeReason](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "silentModeReason"), -[MXSessionManager silentModeClient](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "silentModeClient"), 1);
  MEMORY[0x1940352BC](gCMSM);
  qword_1EE2B3C20 = (uint64_t)MXVW_CreateVectorCMSRouteInfo();
  MEMORY[0x1940352C8](gCMSM);
  dword_1EE2B3C78 = 0;
  byte_1EE2B3CE0 = 0;
  byte_1EE2B3CB1 = 0;
  -[MXSessionManager setPhoneCallBehaviorSessionShouldResumeForCarPlay:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setPhoneCallBehaviorSessionShouldResumeForCarPlay:", 0);
  byte_1EE2B3D38 = 0;
  word_1EE2B3C40 = 0;
  CelestialGetModelSpecificName();
  v8 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v8)
  {
    v9 = (const void *)v8;
    v10 = CFDictionaryGetTypeID();
    if (v10 == CFGetTypeID(v9))
      qword_1EE2B3C48 = (uint64_t)CFRetain(v9);
    CFRelease(v9);
  }
  v11 = MXGetSerialQueue();
  if (!notify_register_dispatch("com.apple.appletv.audiostart", &gAudioDeviceStartNotifyToken, v11, &__block_literal_global_243))cmsmGetAudioDeviceStart();
  if (FigVibratorIsVibratorAvailable() && !FigVibratorInitialize())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
  }
  if (!MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
  {
    CelestialGetModelSpecificName();
    v12 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    v13 = v12;
    if (v12)
    {
      Count = CFDictionaryGetCount(v12);
      v15 = Count;
      if (!Count)
      {
        v19 = 0;
        v16 = 0;
        v18 = 0;
        goto LABEL_43;
      }
      v16 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      v17 = (const void **)malloc_type_calloc(v15, 8uLL, 0x6004044C4A2DFuLL);
      v18 = v17;
      v19 = 0;
      if (!v16 || !v17)
        goto LABEL_43;
      CFDictionaryGetKeysAndValues(v13, v16, v17);
      dword_1EE2B3C60 = v15;
      qword_1EE2B3C68 = (uint64_t)malloc_type_calloc(v15, 0x18uLL, 0x10600402CF69088uLL);
      if (!qword_1EE2B3C68)
      {
        v19 = 0;
        goto LABEL_43;
      }
      if (v15 >= 1)
      {
        v20 = 0;
        v21 = 0;
        while (1)
        {
          valuePtr[0] = 0;
          CFNumberGetValue((CFNumberRef)v18[v21], kCFNumberSInt32Type, valuePtr);
          if (!valuePtr[0])
            break;
          v22 = malloc_type_calloc(valuePtr[0], 0x10uLL, 0x1080040FC6463CFuLL);
          if (!v22)
            break;
          v23 = v22;
          v24 = v16[v21];
          v25 = qword_1EE2B3C68;
          *(_QWORD *)(qword_1EE2B3C68 + v20) = v24;
          if (v24)
          {
            CFRetain(v24);
            v25 = qword_1EE2B3C68;
          }
          v26 = v25 + v20;
          *(_DWORD *)(v26 + 8) = valuePtr[0];
          *(_QWORD *)(v26 + 16) = v23;
          ++v21;
          v20 += 24;
          if (v15 == v21)
          {
            v19 = 1;
            goto LABEL_43;
          }
        }
        v19 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v18 = 0;
    }
    v19 = 1;
LABEL_43:
    free(v16);
    free(v18);
    if (v13)
      CFRelease(v13);
    if ((v19 & 1) == 0)
    {
      v27 = (char *)qword_1EE2B3C68;
      if (v15 >= 1)
      {
        v28 = 0;
        v29 = 24 * v15;
        do
        {
          free(*(void **)&v27[v28 + 16]);
          v27 = (char *)qword_1EE2B3C68;
          if (*(_QWORD *)(qword_1EE2B3C68 + v28))
          {
            CFRelease(*(CFTypeRef *)(qword_1EE2B3C68 + v28));
            v27 = (char *)qword_1EE2B3C68;
          }
          v28 += 24;
        }
        while (v29 != v28);
      }
      free(v27);
      qword_1EE2B3C68 = 0;
      dword_1EE2B3C60 = 0;
    }
  }
  if (!CMSMDeviceState_ItsAHomePod())
    FigMobileAsset_RegisterForAssetUpdates();
  FigRoutingManagerCopySystemContext((uint64_t)&qword_1EE2B3CE8, 1u);
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&qword_1EE2B3CF0);
  FigRoutingManagerCopySystemContext((uint64_t)&qword_1EE2B3D00, 2u);
  *(_QWORD *)type = 0;
  FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)type);
  v30 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
  -[MXSessionManager setSystemMirroringRoutingContextUUID:](v30, "setSystemMirroringRoutingContextUUID:", *(_QWORD *)type);
  if (*(_QWORD *)type)
  {
    CFRelease(*(CFTypeRef *)type);
    *(_QWORD *)type = 0;
  }
  FigRoutingManagerContextUtilities_CopySystemVideoContextUUID((uint64_t)&unk_1EE2B3D10);
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&qword_1EE2B3D08);
  FigVAEndpointManagerCreate(0, (const void *)*MEMORY[0x1E0CA3A80], &qword_1EE2B3BE0);
  FigRouteDiscoveryManagerRegisterEndpointManager((CFTypeRef)qword_1EE2B3BE0);
  FigRoutingMangerCreateBluetoothEndpointManager();
  qword_1EE2B3CA8 = (uint64_t)CFSTR("Normal");
  cmsmUpdateCurrentActiveRoutesInfo();
  v31 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"cmsmInitializeCMSessionManager", (uint64_t)"CMSessionManager.m", 958, 0, 0, v31, (uint64_t)&__block_literal_global_22_1);
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v49);
  v32 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", -[MXSessionManager currentAudioCategory](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "currentAudioCategory"));
  v33 = v50;
  v34 = v49;
  v35 = byte_1EE2B3BE8;
  DoesPortSupportDoAP = vaeDoesPortSupportDoAP(DWORD2(v51));
  VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
  PVMSetCurrentState(v32, 0, (void *)v34, (void *)v33, *((const void **)&v33 + 1), *((const __CFString **)&v34 + 1), 0, 0, v35, DoesPortSupportDoAP, VolumeSequenceNumber);
  vaemAddVADDeviceVolumeChangeListener(0);
  vaemAddVADVolumeRampStatusChangeListener(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
  v38 = (void *)CMSMNP_CopyNowPlayingAppDisplayIDFromDisk();
  -[MXNowPlayingAppManager setNowPlayingAppDisplayID:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "setNowPlayingAppDisplayID:", v38);
  if (dword_1EE2B3F38)
  {
    v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (MX_FeatureFlags_IsNowPlayingAppStackEnabled())
  {
    -[MXNowPlayingAppManager updateNowPlayingAppStackFromDisk](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "updateNowPlayingAppStackFromDisk");
    -[MXNowPlayingAppManager pushToNowPlayingAppStack:hostProcessAttributionBundleID:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "pushToNowPlayingAppStack:hostProcessAttributionBundleID:", v38, 0);
  }

  CMSMDeviceState_RegisterForScreenIsBlankedNotification(cmsmScreenIsBlankedChangedCallback);
  CMSMDeviceState_RegisterForTightSyncUUIDChangeNotification(cmsmTightSyncUUIDChangedCallback);
  CMSMDeviceState_RegisterForVoiceOverIsOnChangedNotification(cmsmVoiceOverIsOnChangedCallback);
  CMSMDebugUtility_RegisterForCACentralStateDumping();
  v40 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"cmsmInitializeCMSessionManager", (uint64_t)"CMSessionManager.m", 1020, 0, 0, v40, (uint64_t)&__block_literal_global_25);
  MXInstallSysdiagnoseBlock((uint64_t)CFSTR("CMSessionManagerState"), (uint64_t)&__block_literal_global_28_0);
  if (CFPreferencesGetAppBooleanValue(CFSTR("EnableTetheredDisplayPortMode"), (CFStringRef)*MEMORY[0x1E0C9B228], 0)
    && FigGetCFPreferenceNumberWithDefault())
  {
    AudioDeviceStart(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
  }
  v41 = dispatch_time(0, 3000000000);
  v42 = MXGetSerialQueue();
  dispatch_after(v41, v42, &__block_literal_global_32_0);
  v43 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"cmsmInitializeCMSessionManager", (uint64_t)"CMSessionManager.m", 1091, 0, 0, v43, (uint64_t)&__block_literal_global_33_2);
  v44 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"cmsmInitializeCMSessionManager", (uint64_t)"CMSessionManager.m", 1108, 0, 0, v44, (uint64_t)&__block_literal_global_34);
}

__CFString *cmsCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%p\n"), a1);
  return Mutable;
}

uint64_t cmsmUpdateAppsLists(uint64_t result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  const __CFArray *v6;
  CFTypeID v7;

  if (result)
  {
    v1 = (const __CFDictionary *)result;
    v2 = CFGetTypeID((CFTypeRef)result);
    result = CFDictionaryGetTypeID();
    if (v2 == result)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v1, CFSTR("LongFormVideoApps"));
      if (Value)
      {
        v4 = Value;
        v5 = CFGetTypeID(Value);
        if (v5 == CFArrayGetTypeID() && cmsmValidateAppsList(v4))
        {
          -[MXSessionManager setLongFormVideoApps:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setLongFormVideoApps:", v4);
          CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
        }
      }
      result = (uint64_t)CFDictionaryGetValue(v1, CFSTR("NonLongFormMediaApps"));
      if (result)
      {
        v6 = (const __CFArray *)result;
        v7 = CFGetTypeID((CFTypeRef)result);
        result = CFArrayGetTypeID();
        if (v7 == result)
        {
          result = cmsmValidateAppsList(v6);
          if ((_DWORD)result)
            return CMSMUtility_SetNonLongFormMediaApps(v6);
        }
      }
    }
  }
  return result;
}

void __cmsmInitializeCMSessionManager_block_invoke()
{
  CFIndex Count;
  CFIndex v1;
  __CFArray *Mutable;
  CFIndex v3;
  uint64_t v4;
  const void *ValueAtIndex;
  OpaqueFigEndpoint *v6;
  OpaqueFigEndpoint *v7;
  __CFArray *v8;
  CFArrayRef theArray;

  theArray = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1E30A4C28, 0, &theArray, 0);
  if (theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
  {
    v1 = Count;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v3 = 0;
    v4 = *MEMORY[0x1E0CA3A80];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      v6 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v4, qword_1EE2B3CF0);
      if (v6)
      {
        v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
      ++v3;
    }
    while (v1 != v3);
  }
  else
  {
    Mutable = 0;
  }
  v8 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints((const void *)qword_1EE2B3CF0, Mutable, (uint64_t)CFSTR("configUpdateReasonEndedBottomUpRouteChange"), 0, (uint64_t)v8);
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
  if (theArray)
    CFRelease(theArray);
}

void cmsmScreenIsBlankedChangedCallback(char a1, char a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  char v7;

  v4 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __cmsmScreenIsBlankedChangedCallback_block_invoke;
  v5[3] = &__block_descriptor_34_e5_v8__0l;
  v6 = a1;
  v7 = a2;
  MXDispatchAsync((uint64_t)"cmsmScreenIsBlankedChangedCallback", (uint64_t)"CMSessionManager.m", 17342, 0, 0, v4, (uint64_t)v5);
}

void cmsmTightSyncUUIDChangedCallback()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"cmsmTightSyncUUIDChangedCallback", (uint64_t)"CMSessionManager.m", 17391, 0, 0, v0, (uint64_t)&__block_literal_global_251);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void cmsmVoiceOverIsOnChangedCallback(uint64_t a1, char a2)
{
  NSObject *v3;
  _QWORD v4[4];
  char v5;

  v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __cmsmVoiceOverIsOnChangedCallback_block_invoke;
  v4[3] = &__block_descriptor_33_e5_v8__0l;
  v5 = a2;
  MXDispatchAsyncAndWait((uint64_t)"cmsmVoiceOverIsOnChangedCallback", (uint64_t)"CMSessionManager.m", 17411, 0, 0, v3, (uint64_t)v4);
}

void __cmsmInitializeCMSessionManager_block_invoke_2()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"cmsmInitializeCMSessionManager_block_invoke_2", (uint64_t)"CMSessionManager.m", 1033, 0, 0, v0, (uint64_t)&__block_literal_global_29_2);
}

uint64_t __cmsmInitializeCMSessionManager_block_invoke_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  MXBluetoothServices_RegisterForAudioRoutingChanged();
  MXBluetoothServices_RegisterForPreemptivePortChanged();
  v0 = MXBluetoothServices_RegisterForPreemptivePortDisconnected();
  result = MX_FeatureFlags_IsAirPlayDaemonEnabled(v0, v1);
  if (!(_DWORD)result)
    return FigRoutingManagerPerformPostInitOperations();
  return result;
}

uint64_t __cmsmInitializeCMSessionManager_block_invoke_6()
{
  uint64_t result;
  BOOL v1;
  CFNumberRef v2;
  CFNumberRef v3;
  pid_t valuePtr;

  result = CMSessionCreate(&qword_1EE2B3C50);
  if ((_DWORD)result)
    v1 = 1;
  else
    v1 = qword_1EE2B3C50 == 0;
  if (!v1)
  {
    valuePtr = getpid();
    if (valuePtr)
    {
      v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (v2)
      {
        v3 = v2;
        _CMSessionSetProperty((_QWORD *)qword_1EE2B3C50, CFSTR("ClientPID"), (uint64_t)v2);
        CFRelease(v3);
      }
    }
    _CMSessionSetProperty((_QWORD *)qword_1EE2B3C50, CFSTR("ClientName"), (uint64_t)CFSTR("Default"));
    _CMSessionSetProperty((_QWORD *)qword_1EE2B3C50, CFSTR("AudioCategory"), (uint64_t)CFSTR("Audio/Video"));
    cmsSetControlFlags(*(void **)(qword_1EE2B3C50 + 16), 0x120000u);
    return objc_msgSend(*(id *)(qword_1EE2B3C50 + 16), "updateInterruptionStyle:", 8);
  }
  return result;
}

__CFArray *cmsmCopyPartnerPortsToMakeRoutable(const __CFArray *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v5;
  uint64_t i;
  unsigned int PartnersForPort;
  uint64_t v8;
  _DWORD *v9;
  CFNumberRef v10;
  _OWORD outData[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        FigCFArrayGetInt64AtIndex();
        memset(outData, 0, sizeof(outData));
        PartnersForPort = vaeGetPartnersForPort(0, outData);
        if (PartnersForPort)
        {
          v8 = PartnersForPort;
          v9 = outData;
          do
          {
            if (vaeDoesPortSupportRoutability(*v9))
            {
              if (!vaeIsPortRoutable(*v9))
              {
                v10 = CFNumberCreate(v2, kCFNumberSInt32Type, v9);
                CFArrayAppendValue(Mutable, v10);
                if (v10)
                  CFRelease(v10);
              }
            }
            ++v9;
            --v8;
          }
          while (v8);
        }
      }
    }
  }
  return Mutable;
}

uint64_t cmsmShouldSetupForCoordinatedInterruptions(uint64_t a1, int a2)
{
  uint64_t result;
  int DoesBTPortSupportInEarDetection;
  int BTPortOwnsSharedAudioConnection;

  result = vaeDoesPortSupportMultipleConnections(a1);
  if ((_DWORD)result)
  {
    DoesBTPortSupportInEarDetection = vaeDoesBTPortSupportInEarDetection(a1);
    BTPortOwnsSharedAudioConnection = vaeGetBTPortOwnsSharedAudioConnection(a1);
    result = (DoesBTPortSupportInEarDetection | BTPortOwnsSharedAudioConnection) == 0;
    if (DoesBTPortSupportInEarDetection)
    {
      if (!BTPortOwnsSharedAudioConnection)
        return !a2 || CMSMVAUtility_IsBTPortKnownToNotBeInEar(a1) == 0;
    }
  }
  return result;
}

void cmsmUpdateInEarBasedPlaybackState(unsigned int BTPortForNowPlayingApp, int a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int CurrentOutputPortAtIndex;
  NSObject *v8;
  id v9;
  __CFArray *v10;
  int v11;
  NSObject *v12;
  int CurrentAudioRouteInEarStatus;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  double v17;
  double v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  const void *v22;
  NSString *v23;
  NSObject *v24;
  NSObject *v25;
  NSString *v26;
  __objc2_meth_list **p_inst_meths;
  NSObject *v28;
  _BOOL4 v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  double v36;
  double v37;
  NSObject *v38;
  NSString *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSString *v43;
  id v44;
  NSObject *v45;
  NSObject *v46;
  const void *v47;
  NSString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  if (a3)
  {
    if (dword_1EE2B3F38)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

    cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
    cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
    if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
    {
      CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
      cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
    }
    if (CurrentOutputPortAtIndex)
    {
      if (vaeDoesBTPortSupportInEarDetection(CurrentOutputPortAtIndex))
      {
        CurrentAudioRouteInEarStatus = cmsmGetCurrentAudioRouteInEarStatus(CurrentOutputPortAtIndex);
        cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = CurrentAudioRouteInEarStatus;
        if (CurrentAudioRouteInEarStatus == 5)
        {
          if (dword_1EE2B3F38)
          {
            v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = 2;
        }
      }
    }
    return;
  }
  if (!BTPortForNowPlayingApp)
  {
    BTPortForNowPlayingApp = CMSMNP_GetBTPortForNowPlayingApp();
    v9 = CMSMNP_CopyNowPlayingAppSession();
    v10 = CMSMUtility_CopyCurrentRouteTypes();
    if (a2)
    {
      if (!BTPortForNowPlayingApp)
      {
        if (FigCFArrayContainsValue())
        {
          if (v9)
          {
            v11 = cmsmGetCurrentAudioRouteInEarStatus(CurrentOutputPortAtIndex);
            cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = v11;
            if (v11 == 5)
            {
              if (dword_1EE2B3F38)
              {
                v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = 2;
            }
          }
        }
      }
    }
    if (v10)
      CFRelease(v10);

  }
  if (vaeDoesBTPortSupportInEarDetection(BTPortForNowPlayingApp))
  {
    if (a2)
    {
      if (CMSMNP_IsNowPlayingAppPlayingToPort(BTPortForNowPlayingApp))
      {
        if (dword_1EE2B3F38)
        {
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;

        cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D68]);
        cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = BTPortForNowPlayingApp;
        v22 = (const void *)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused;
        v23 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
        cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = (uint64_t)v23;
        if (v23)
          CFRetain(v23);
        if (v22)
          CFRelease(v22);
      }
      return;
    }
    v20 = cmsmGetCurrentAudioRouteInEarStatus(BTPortForNowPlayingApp);
    if (dword_1EE2B3F38)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (BTPortForNowPlayingApp == CurrentOutputPortAtIndex)
    {
      if (v20 == 5 && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 1)
      {
        if (dword_1EE2B3F38)
        {
          v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          v20 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          v20 = 1;
        }
      }
      else if (v20 == 5 && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 3)
      {
        if (dword_1EE2B3F38)
        {
          v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v20 = 2;
      }
    }
    p_inst_meths = &OBJC_PROTOCOL___APSubjectMonitor.inst_meths;
    if (v20 == cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus)
    {
LABEL_63:
      *((_BYTE *)p_inst_meths + 568) = v20;
      return;
    }
    if (dword_1EE2B3F38)
    {
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (BTPortForNowPlayingApp == CurrentOutputPortAtIndex)
    {
      v30 = cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 2
         || cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 4;
      if (v20 == 1 && v30)
      {
        if (dword_1EE2B3F38)
        {
          v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar == 1
          && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == CurrentOutputPortAtIndex)
        {
          v39 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
          if (-[NSString isEqualToString:](v39, "isEqualToString:", cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused))
          {
            if (dword_1EE2B3F38)
            {
              v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            cmsmSendCommandToMediaRemote((uint64_t)-[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v49, v50), "nowPlayingAppDisplayID"), 0, CFSTR("com.apple.cmsession.airpods"));
          }
        }
LABEL_113:
        cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

        cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
        cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
        if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
        {
          CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
          cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
        }
        goto LABEL_63;
      }
      if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3)
      {
        if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 1)
        {
          if (v20 != 4)
          {
            if (v20 == 3)
            {
              if (dword_1EE2B3F38)
              {
                v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!CMSMNP_IsNowPlayingAppPlayingToPort(CurrentOutputPortAtIndex))
                goto LABEL_63;
              if (dword_1EE2B3F38)
              {
                v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsmSendCommandToMediaRemote((uint64_t)-[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v49, v50), "nowPlayingAppDisplayID"), 1, CFSTR("com.apple.cmsession.airpods"));
              cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;
              cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = CurrentOutputPortAtIndex;

              cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D68]);
LABEL_123:
              v47 = (const void *)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused;
              v48 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID");
              cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = (uint64_t)v48;
              if (v48)
                CFRetain(v48);
              if (v47)
                CFRelease(v47);
              goto LABEL_63;
            }
            if (v20 != 2)
              goto LABEL_63;
          }
          if (dword_1EE2B3F38)
          {
            v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!CMSMNP_IsNowPlayingAppPlayingToPort(CurrentOutputPortAtIndex))
            goto LABEL_63;
          v44 = CMSMNP_CopyNowPlayingAppSession();
          -[MXSessionManager cancelAnyInProgressRampIfNeeded:reason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "cancelAnyInProgressRampIfNeeded:reason:", v44, 2);

          if (dword_1EE2B3F38)
          {
            v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          cmsmSendCommandToMediaRemote((uint64_t)-[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v49, v50), "nowPlayingAppDisplayID"), 1, CFSTR("com.apple.cmsession.airpods"));
          cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;
          cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = CurrentOutputPortAtIndex;
          goto LABEL_123;
        }
LABEL_88:
        if (v20 == 3)
        {
          if (dword_1EE2B3F38)
          {
            v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar == 1
            && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == BTPortForNowPlayingApp)
          {
            if (dword_1EE2B3F38)
            {
              v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }

            cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
            cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D68]);
          }
        }
        goto LABEL_63;
      }
    }
    else if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3)
    {
      goto LABEL_88;
    }
    if (dword_1EE2B3F38)
    {
      v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___APSubjectMonitor + 24);
    }
    if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar != 1
      || cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived != BTPortForNowPlayingApp
      || BTPortForNowPlayingApp != CurrentOutputPortAtIndex)
    {
      goto LABEL_63;
    }
    v35 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "now");
    objc_msgSend(v35, "timeIntervalSinceDate:", cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar);
    v37 = v36;
    if (dword_1EE2B3F38)
    {
      v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v43 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v49, v50), "nowPlayingAppDisplayID");
    if (-[NSString isEqualToString:](v43, "isEqualToString:", cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)&& v37 <= 15.0)
    {
      cmsmSendCommandToMediaRemote((uint64_t)-[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID"), 0, CFSTR("com.apple.cmsession.airpods"));
    }
    goto LABEL_113;
  }
  if (a2
    && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == CurrentOutputPortAtIndex
    && vaeDoesBTPortSupportInEarDetection(CurrentOutputPortAtIndex)
    && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3
    && cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar)
  {
    v16 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "now");
    objc_msgSend(v16, "timeIntervalSinceDate:", cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar);
    v18 = v17;
    if (dword_1EE2B3F38)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v26 = -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v49, v50), "nowPlayingAppDisplayID");
    if (-[NSString isEqualToString:](v26, "isEqualToString:", cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)&& v18 <= 15.0)
    {
      cmsmSendCommandToMediaRemote((uint64_t)-[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID"), 0, CFSTR("com.apple.cmsession.airpods"));
    }
    cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

    cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
    cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
    if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
    {
      CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
      cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
    }
  }
}

uint64_t cmsmGetCurrentAudioRouteInEarStatus(AudioObjectID a1)
{
  int BTPortSecondaryBudInEarStatus;
  int BTPortPrimaryBudInEarStatus;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  _BOOL4 v13;
  BOOL v14;

  if (!a1 || !vaeDoesBTPortSupportInEarDetection(a1))
    return 3;
  BTPortSecondaryBudInEarStatus = vaeGetBTPortSecondaryBudInEarStatus(a1);
  BTPortPrimaryBudInEarStatus = vaeGetBTPortPrimaryBudInEarStatus(a1);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (BTPortPrimaryBudInEarStatus == 1 && BTPortSecondaryBudInEarStatus == 1)
    return 1;
  v7 = BTPortPrimaryBudInEarStatus == 3 && BTPortSecondaryBudInEarStatus == 1;
  v8 = BTPortSecondaryBudInEarStatus == 3 && BTPortPrimaryBudInEarStatus == 1;
  result = 4;
  if (!v8 && !v7)
  {
    v9 = BTPortPrimaryBudInEarStatus == 2 && BTPortSecondaryBudInEarStatus == 1;
    v10 = v9;
    v11 = BTPortSecondaryBudInEarStatus == 2 && BTPortPrimaryBudInEarStatus == 1;
    result = 2;
    if (!v11 && !v10)
    {
      v13 = BTPortPrimaryBudInEarStatus == 1 && BTPortSecondaryBudInEarStatus == 0;
      if (BTPortPrimaryBudInEarStatus)
        v14 = 0;
      else
        v14 = BTPortSecondaryBudInEarStatus == 1;
      if (v14)
        v13 = 1;
      if (v13)
        return 5;
      else
        return 3;
    }
  }
  return result;
}

__CFString *cmsmAudioRouteInEarStatusToString(unsigned int a1)
{
  if (a1 - 1 >= 5)
    return (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UNKNOWN (%d)"), a1);
  else
    return off_1E309F2A8[(char)(a1 - 1)];
}

void cmsmSendCommandToMediaRemote(uint64_t a1, uint64_t a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *Mutable;
  const void *v8;
  uint64_t v9;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_253);
  if (MediaRemoteLibrary_sLib && dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteSendCommandToApp"))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (a3)
    {
      v8 = (const void *)getkMRMediaRemoteOptionRemoteControlInterfaceIdentifier[0]();
      CFDictionarySetValue(Mutable, v8, a3);
    }
    if (MediaRemoteLibrary_sOnce != -1)
      dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_253);
    if (MediaRemoteLibrary_sLib && dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteGetLocalOrigin"))
      v9 = softLinkMRMediaRemoteGetLocalOrigin[0]();
    else
      v9 = 0;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkMRMediaRemoteSendCommandToApp[0])(a2, (uint64_t)Mutable, v9, a1, 0, 0, 0);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void cmsmUpdateEnableSharedAudioRouteSyntheticMute(int a1, int a2, int a3, int a4, int a5, int a6)
{
  int v12;
  int v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  MEMORY[0x1940352BC](gCMSM);
  v12 = HIBYTE(word_1EE2B3C40);
  if (a6)
  {
    if (CMSMDeviceState_RingerIsOn(1) && (_BYTE)word_1EE2B3C40)
    {
      v13 = 1;
      HIBYTE(word_1EE2B3C40) = 1;
    }
    else
    {
      v13 = HIBYTE(word_1EE2B3C40);
    }
  }
  else
  {
    if (!(a2 | a1 | a3) && (a4 == 1919184754 || !a5))
      JUMPOUT(0x1940352C8);
    v13 = 0;
    HIBYTE(word_1EE2B3C40) = 0;
  }
  MEMORY[0x1940352C8](gCMSM);
  if (v12 != v13)
  {
    cmsUpdateMuteStatus(0);
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t cmsmUpdateDeviceAudioFormatConfigIfNeeded(int a1)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  void *v30;
  void *v31;
  NSObject *v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  AudioObjectID CurrentOutputVADID;
  _BOOL4 IsCategoryInputOnly;
  uint64_t v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  int ShouldSessionSetInputSampleRate;
  double v64;
  double v65;
  uint64_t v66;
  float v67;
  int *v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  os_log_type_t v78[16];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  int v83;
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  const __CFString *v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (vaemGetDisallowAudioFormatChanges())
    return 4294954309;
  HIDWORD(v69) = a1;
  v4 = -[MXSessionManager copyMXCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyMXCoreSessionList");
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", v78, v89, 16);
  v6 = &sCategoryToPriorityMapForTriangle;
  if (!v5)
  {
    v8 = 0;
    v76 = 0;
    v77 = 0;
    v71 = 0;
    goto LABEL_97;
  }
  v7 = v5;
  v8 = 0;
  v76 = 0;
  v77 = 0;
  v71 = 0;
  v9 = *(_QWORD *)v79;
  v70 = v4;
  v72 = *(_QWORD *)v79;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v79 != v9)
        objc_enumerationMutation(v4);
      v11 = *(void **)(*(_QWORD *)&v78[8] + 8 * i);
      if (objc_msgSend(v11, "isActive", v68, v69)
        && (objc_msgSend(v11, "isRoutedToOnDemandVAD") & 1) == 0)
      {
        v74 = (void *)objc_msgSend(v11, "preferredHardwareFormat");
        if (!objc_msgSend(v11, "isPlaying")
          || (v12 = v71, objc_msgSend(v11, "doesntActuallyPlayAudio")))
        {
          if (objc_msgSend(v11, "doesntActuallyPlayAudio"))
            v12 = v76;
          else
            v12 = v77;
        }
        v13 = v11;
        if (!v12)
          goto LABEL_53;
        v73 = v12;
        if (*((_DWORD *)v6 + 974))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v6 = &sCategoryToPriorityMapForTriangle;
        }
        v15 = (void *)objc_msgSend(v12, "preferredHardwareFormat", v68, v69);
        if (objc_msgSend(v74, "isEqualToString:", v15))
        {
          v16 = objc_msgSend(v12, "preferredNumberOfOutputChannels");
          v13 = v12;
          if (v16 > (int)objc_msgSend(v11, "preferredNumberOfOutputChannels"))
          {
            if (*((_DWORD *)v6 + 974))
              goto LABEL_49;
LABEL_53:
            if (objc_msgSend(v11, "isPlaying", v68, v69)
              && !objc_msgSend(v11, "doesntActuallyPlayAudio"))
            {
              v71 = v13;
              if (!v8)
                goto LABEL_89;
            }
            else
            {
              v29 = objc_msgSend(v11, "doesntActuallyPlayAudio");
              if (v29)
                v30 = v13;
              else
                v30 = v76;
              v31 = v77;
              if (!v29)
                v31 = v13;
              v76 = v30;
              v77 = v31;
              if (!v8)
                goto LABEL_89;
            }
            if (*((_DWORD *)v6 + 974))
            {
              v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v4 = v70;
              v6 = &sCategoryToPriorityMapForTriangle;
            }
            if ((objc_msgSend(v8, "currentlyControllingFlags", v68, v69) & 2) == 0)
            {
              if ((objc_msgSend(v11, "currentlyControllingFlags") & 2) != 0)
              {
                if (*((_DWORD *)v6 + 974))
                  goto LABEL_88;
              }
              else
              {
                v33 = objc_msgSend(v8, "preferredIOBufferFrames");
                if (v33 > (int)objc_msgSend(v11, "preferredIOBufferFrames"))
                {
                  if (*((_DWORD *)v6 + 974))
                    goto LABEL_91;
LABEL_92:
                  v9 = v72;
                  continue;
                }
                v34 = objc_msgSend(v11, "preferredIOBufferFrames");
                if (v34 > (int)objc_msgSend(v8, "preferredIOBufferFrames"))
                {
                  if (*((_DWORD *)v6 + 974))
                    goto LABEL_88;
                  goto LABEL_89;
                }
                objc_msgSend(v8, "preferredIOBufferDuration");
                v36 = v35;
                objc_msgSend(v11, "preferredIOBufferDuration");
                if (v36 > v37)
                {
                  if (!*((_DWORD *)v6 + 974))
                    goto LABEL_92;
                  goto LABEL_91;
                }
                objc_msgSend(v11, "preferredIOBufferDuration");
                v39 = v38;
                objc_msgSend(v8, "preferredIOBufferDuration");
                if (v39 > v40)
                {
                  if (*((_DWORD *)v6 + 974))
                    goto LABEL_88;
                  goto LABEL_89;
                }
                objc_msgSend(v8, "preferredOutputSampleRate");
                v42 = v41;
                objc_msgSend(v11, "preferredOutputSampleRate");
                if (v42 > v43)
                {
                  if (!*((_DWORD *)v6 + 974))
                    goto LABEL_92;
                  goto LABEL_91;
                }
                objc_msgSend(v11, "preferredOutputSampleRate");
                v45 = v44;
                objc_msgSend(v8, "preferredOutputSampleRate");
                v46 = *((_DWORD *)v6 + 974);
                if (v45 <= v47)
                {
                  if (v46)
                    goto LABEL_91;
                  goto LABEL_92;
                }
                if (v46)
                {
LABEL_88:
                  v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
                  v9 = v72;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v8 = v11;
                  continue;
                }
              }
LABEL_89:
              v8 = v11;
              goto LABEL_92;
            }
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_92;
LABEL_91:
            v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_92;
          }
          v17 = objc_msgSend(v11, "preferredNumberOfOutputChannels");
          if (v17 > (int)objc_msgSend(v12, "preferredNumberOfOutputChannels"))
          {
            v13 = v11;
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_53;
            goto LABEL_52;
          }
          objc_msgSend(v12, "preferredOutputSampleRate");
          v19 = v18;
          objc_msgSend(v11, "preferredOutputSampleRate");
          if (v19 > v20)
          {
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_53;
LABEL_49:
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v13 = v73;
            v6 = &sCategoryToPriorityMapForTriangle;
            goto LABEL_53;
          }
          objc_msgSend(v11, "preferredOutputSampleRate");
          v22 = v21;
          objc_msgSend(v12, "preferredOutputSampleRate");
          if (v22 <= v23)
          {
            if ((objc_msgSend(v12, "currentlyControllingFlags") & 2) != 0)
            {
              if (*((_DWORD *)v6 + 974))
                goto LABEL_49;
              goto LABEL_53;
            }
            v24 = objc_msgSend(v11, "currentlyControllingFlags");
            v25 = *((_DWORD *)v6 + 974);
            if ((v24 & 2) == 0)
            {
              if (v25)
              {
                v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
                v6 = &sCategoryToPriorityMapForTriangle;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v13 = v12;
              }
              goto LABEL_53;
            }
            v13 = v11;
            if (!v25)
              goto LABEL_53;
          }
          else
          {
            v13 = v11;
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_53;
          }
LABEL_52:
          v75 = v8;
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v13 = v11;
          v8 = v75;
          goto LABEL_53;
        }
        if (objc_msgSend(v15, "isEqualToString:", CFSTR("MATAtmos")))
        {
          if (*((_DWORD *)v6 + 974))
            goto LABEL_49;
        }
        else
        {
          if (objc_msgSend(v74, "isEqualToString:", CFSTR("MATAtmos")))
          {
            v13 = v11;
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_53;
            goto LABEL_52;
          }
          if (!objc_msgSend(v15, "isEqualToString:", CFSTR("AC-3")))
          {
            v13 = v12;
            if (!objc_msgSend(v74, "isEqualToString:", CFSTR("AC-3")))
              goto LABEL_53;
            v13 = v11;
            if (!*((_DWORD *)v6 + 974))
              goto LABEL_53;
            goto LABEL_52;
          }
          if (*((_DWORD *)v6 + 974))
            goto LABEL_49;
        }
        v13 = v12;
        goto LABEL_53;
      }
    }
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", v78, v89, 16);
  }
  while (v7);
LABEL_97:

  if (*((_DWORD *)v6 + 974))
  {
    v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v51 = v77;
  if (!v77)
    v51 = v76;
  if (v71)
    v52 = v71;
  else
    v52 = v51;
  if (!v52 || !v8)
  {
    v2 = vaemSetDeviceFormat(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v68, v69), "defaultVADID"), CFSTR("LPCM"), 0);
    if ((_DWORD)v2)
    {
      v82 = 0;
      v78[0] = OS_LOG_TYPE_DEFAULT;
      v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v61 = v82;
      if (os_log_type_enabled(v60, v78[0]))
        v62 = v61;
      else
        v62 = v61 & 0xFFFFFFFE;
      if (v62)
      {
        v83 = 136315650;
        v84 = "cmsmUpdateDeviceAudioFormatConfigIfNeeded";
        v85 = 1024;
        v86 = v2;
        v87 = 2114;
        v88 = CFSTR("LPCM");
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v2;
  }
  CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(v52);
  IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)objc_msgSend(v52, "audioCategory"));
  objc_msgSend(v52, "preferredHardwareFormat");
  if (!vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly))
  {
    v2 = 0;
LABEL_120:
    if (HIDWORD(v69))
      goto LABEL_124;
    return v2;
  }
  v55 = CMSUtility_GetCurrentOutputVADID(v52);
  v2 = vaemSetDeviceFormat(v55, (const void *)objc_msgSend(v52, "preferredHardwareFormat"), 0);
  if (!(_DWORD)v2)
    goto LABEL_120;
  v82 = 0;
  v78[0] = OS_LOG_TYPE_DEFAULT;
  v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v57 = v82;
  if (os_log_type_enabled(v56, v78[0]))
    v58 = v57;
  else
    v58 = v57 & 0xFFFFFFFE;
  if (v58)
  {
    v59 = objc_msgSend(v52, "preferredHardwareFormat");
    v83 = 136315650;
    v84 = "cmsmUpdateDeviceAudioFormatConfigIfNeeded";
    v85 = 1024;
    v86 = v2;
    v87 = 2114;
    v88 = (const __CFString *)v59;
    LODWORD(v69) = 28;
    v68 = &v83;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (HIDWORD(v69))
  {
LABEL_124:
    ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(v8);
    if (ShouldSessionSetInputSampleRate)
      objc_msgSend(v8, "preferredInputSampleRate");
    else
      objc_msgSend(v8, "preferredOutputSampleRate");
    v65 = v64;
    v66 = objc_msgSend(v8, "preferredIOBufferFrames", v68, v69);
    objc_msgSend(v8, "preferredIOBufferDuration");
    cmsSetDeviceSampleRateAndBufferSize(v8, v66, ShouldSessionSetInputSampleRate != 0, v65, v67);
  }
  return v2;
}

uint64_t MXCoreSessionAddResource(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  int v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = 4294954315;
    if (a2 && qword_1EE2B3C68)
    {
      MEMORY[0x1940352BC](gCMSM);
      if (dword_1EE2B3C60 < 1)
        goto LABEL_27;
      v8 = 0;
      v9 = 0;
      while (!FigCFEqual())
      {
        ++v9;
        v8 += 24;
        if (v9 >= dword_1EE2B3C60)
          goto LABEL_27;
      }
      if (!*(_DWORD *)(qword_1EE2B3C68 + v8 + 8))
        goto LABEL_27;
      v23 = 0;
      v24[0] = 0;
      *a4 = 0;
      cmsmGetCountAndResourceEntriesOfType(a2, &v23, v24);
      v11 = v24[0];
      if (!v24[0])
        goto LABEL_27;
      v12 = v23;
      if (v23 < 1)
      {
        LODWORD(v13) = 0;
        v16 = -1;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = (uint64_t *)(v24[0] + 8);
        v16 = -1;
        while (*(v15 - 1))
        {
          v18 = *v15;
          v15 += 2;
          v17 = v18;
          if (v18 > v14)
          {
            v16 = v13;
            v14 = v17;
          }
          if (v23 == ++v13)
          {
            LODWORD(v13) = v23;
            goto LABEL_21;
          }
        }
        *(v15 - 1) = (uint64_t)a1;
        *v15 = FigGetUpTimeNanoseconds();
        v16 = v13;
      }
LABEL_21:
      if (v16 >= v12)
      {
LABEL_27:
        v5 = 4294954315;
        goto LABEL_28;
      }
      v19 = v16;
      if ((_DWORD)v13 == v12)
      {
        v20 = (void **)(v11 + 16 * v16);
        v21 = *v20;
        if (*v20)
        {
          MEMORY[0x1940352C8](gCMSM);
          v5 = cmsBeginInterruptionGuts(a1, v21, 2);
          MEMORY[0x1940352BC](gCMSM);
          if ((_DWORD)v5)
          {
LABEL_28:
            MEMORY[0x1940352C8](gCMSM);
            return v5;
          }
          *v20 = a1;
          *(_QWORD *)(v11 + 16 * v19 + 8) = FigGetUpTimeNanoseconds();
        }
      }
      v5 = 0;
      *a4 = v11 + 16 * v19;
      goto LABEL_28;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v5;
}

uint64_t MXCoreSessionRemoveResource(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    MEMORY[0x1940352BC](gCMSM);
    if (a2 && *a2 == a1)
    {
      v4 = 0;
      *a2 = 0;
      a2[1] = 0;
    }
    else
    {
      v4 = 4294954315;
    }
    MEMORY[0x1940352C8](gCMSM);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v4;
}

uint64_t cmsmRequestCarMainAudioForSession(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  _QWORD v13[2];
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (-[MXSessionManager sessionUtilizesIndependentRecordingOnly:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "sessionUtilizesIndependentRecordingOnly:", a1))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if ((objc_msgSend(a1, "hasPhoneCallBehavior") & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(a1))
  {
    if (CMSMUtility_IsPhoneCallActive())
    {
      v3 = 1;
    }
    else
    {
      if (dword_1EE2B3F38)
      {
        v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v3 = 1;
      byte_1EE2B3CA0 = 1;
    }
  }
  else if (CMSMUtility_IsPhoneCallActive() | byte_1EE2B3CA0)
  {
    v3 = 0;
  }
  else
  {
    v3 = -1;
  }
  if (CMSUtility_IsAudioCategoryRingtone(a1))
  {
    v6 = -1;
  }
  else if (CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a1))
  {
    v6 = 10;
  }
  else
  {
    v6 = 0;
  }
  v12 = CFSTR("Take");
  if (CMSUtility_ShouldBorrowCarMainAudio(a1))
  {
    v12 = CFSTR("Borrow");
    objc_msgSend(a1, "setNeedToEndInterruption:", 1);
  }
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Connected to car; Requesting main audio for session, %@ '%@'"),
         objc_msgSend(a1, "clientName", v10, v11),
         objc_msgSend(a1, "displayID"));
  v8 = objc_msgSend(a1, "audioCategory");
  v13[0] = 0;
  v13[1] = 0;
  v14 = v3;
  v15 = 0;
  v16 = v6;
  v17 = 0;
  v18 = v8;
  FigEndpointCentralRequestResource(qword_1EE2B3CD8, 0x1E30AA588, (uint64_t)v13, (uint64_t)v7, &v12);
  if (FigCFEqual())
    objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(a1, "starkBorrowCount") + 1);
  if (v7)
    CFRelease(v7);
  v5 = FigEndpointCentralEntityHoldsResource(qword_1EE2B3CD8, 0x1E309F4A8, 0x1E30AA588);
  objc_msgSend(a1, "setTookControlOfStarkMainAudio:", (_DWORD)v5 != 0);
  return v5;
}

void cmsAddToListOfSessionsToInterruptIfNecessary(void *a1, void *a2, int a3, int a4, uint64_t a5, int *a6, int *a7)
{
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  id v18;
  __CFArray *v19;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  _BYTE *v24;
  void *ValueAtIndex;
  id v26;

  v14 = *a6;
  v15 = *a7;
  if ((objc_msgSend(a2, "isCarSession") & 1) == 0)
  {
    objc_msgSend(a2, "audioCategory");
    if (FigCFEqual())
    {
      if (a4 != 1)
        goto LABEL_16;
    }
    else
    {
      objc_msgSend(a1, "audioCategory");
      v16 = FigCFEqual();
      if (a4 != 1 && v16)
        goto LABEL_16;
    }
    if (CMSUtility_ShouldInterrupt(a1, a2, a3))
    {
      objc_msgSend(a2, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0);
      objc_msgSend(a2, "setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:", 0);
      v17 = a5 + 16 * v14;
      *(_QWORD *)v17 = a2;
      v18 = a2;
      *(_BYTE *)(v17 + 8) = objc_msgSend(a2, "isPlaying");
      *(_BYTE *)(v17 + 9) = objc_msgSend(a2, "wasRecentlyActivated");
      ++v14;
      v19 = CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID(objc_msgSend(a2, "audioSessionID"));
      if (v19)
      {
        v20 = v19;
        if (CMSMDeviceState_ItsAnAppleTV() || CMSMDeviceState_ItsAHomePod())
        {
          Count = CFArrayGetCount(v20);
          if (Count >= 1)
          {
            v22 = Count;
            v23 = 0;
            v24 = (_BYTE *)(a5 + 16 * v14 + 9);
            do
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(v20, v23);
              *(_QWORD *)(v24 - 9) = ValueAtIndex;
              v26 = ValueAtIndex;
              *(v24 - 1) = objc_msgSend(ValueAtIndex, "isPlaying");
              *v24 = objc_msgSend(ValueAtIndex, "wasRecentlyActivated");
              v24 += 16;
              ++v23;
            }
            while (v22 != v23);
            v14 += v23;
          }
        }
        CFRelease(v20);
      }
    }
  }
LABEL_16:
  *a6 = v14;
  *a7 = v15;
}

uint64_t CMSessionMgrIsVolumeChangeTriggered(int a1)
{
  if ((a1 - 1) > 0xD)
    return 0;
  else
    return byte_1937A4DB8[a1 - 1];
}

uint64_t FigEndpointManagerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(CMBaseObject, a2, a3);
  return result;
}

void __cmsSetIsActive_block_invoke_93(uint64_t a1)
{
  CMSMNotificationUtility_PostSessionIsActiveDidChange(*(void **)(a1 + 32));
}

void __cmsSetIsPlaying_block_invoke(uint64_t a1)
{
  CMSUtility_DeactivateTimerHandler(*(_QWORD *)(a1 + 32));
}

void __cmsSetIsPlaying_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  const char *v4;
  double v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  void *ClientName;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = CMSMUtility_CopyMXCoreSessionWithID(*(_QWORD *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    if (objc_msgSend(v1, "sessionAssertionAuditTimer"))
    {
      dispatch_source_cancel((dispatch_source_t)objc_msgSend(v2, "sessionAssertionAuditTimer"));
      objc_msgSend(v2, "setSessionAssertionAuditTimer:", 0);
    }
    v3 = MXGetSessionLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136446978;
      v7 = "-CMSessionMgr-";
      v8 = 2082;
      v9 = "cmsSessionAssertionAuditTimeDidFinish";
      v10 = 1024;
      v11 = 5971;
      v12 = 2114;
      ClientName = CMSUtility_GetClientName(v2, v4);
      _os_log_impl(&dword_1935FC000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Timer expired for client %{public}@", (uint8_t *)&v6, 0x26u);
    }
    if (CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(v2))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "timeIntervalSinceDate:", objc_msgSend(v2, "isPlayingStopTime"));
      if (v5 >= (double)objc_msgSend(v2, "assertionAuditTimerDelay"))
        -[MXSessionManager cleanupSessionAssertionsIfNeeded:cleanupReason:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "cleanupSessionAssertionsIfNeeded:cleanupReason:", v2, 2);
    }

  }
}

uint64_t cmsmStartAllowedToInitiatePlaybackTemporarilyTimer()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v1;

  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x1940352BC](gCMSM);
  if (qword_1EE2B3C88)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EE2B3C88);
    if (qword_1EE2B3C88)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B3C88);
      qword_1EE2B3C88 = 0;
    }
  }
  v1 = MXGetSerialQueue();
  qword_1EE2B3C88 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v1, 10.0, (uint64_t)&__block_literal_global_110_0, 0, 0);
  if (!qword_1EE2B3C88)
    -[MXSessionManager setAppAllowedToInitiatePlaybackTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setAppAllowedToInitiatePlaybackTemporarily:", 0);
  return MEMORY[0x1940352C8](gCMSM);
}

uint64_t __cmsmStartAllowedToInitiatePlaybackTemporarilyTimer_block_invoke()
{
  NSObject *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940352BC](gCMSM);
  v0 = qword_1EE2B3C88;
  if (qword_1EE2B3C88)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v0 = qword_1EE2B3C88;
    }
    dispatch_source_cancel(v0);
    if (qword_1EE2B3C88)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B3C88);
      qword_1EE2B3C88 = 0;
    }
  }
  -[MXSessionManager setAppAllowedToInitiatePlaybackTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v3, v4), "setAppAllowedToInitiatePlaybackTemporarily:", 0);
  return MEMORY[0x1940352C8](gCMSM);
}

uint64_t cmsmStartAllowedToFadeInTemporarilyTimer()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;

  result = MX_FeatureFlags_IsHandoffEnabled();
  if ((_DWORD)result)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x1940352BC](gCMSM);
    if (qword_1EE2B3C90)
    {
      dispatch_source_cancel((dispatch_source_t)qword_1EE2B3C90);
      if (qword_1EE2B3C90)
      {
        dispatch_release((dispatch_object_t)qword_1EE2B3C90);
        qword_1EE2B3C90 = 0;
      }
    }
    v2 = MXGetSerialQueue();
    qword_1EE2B3C90 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 5.0, (uint64_t)&__block_literal_global_111, 0, 0);
    return MEMORY[0x1940352C8](gCMSM);
  }
  return result;
}

uint64_t __cmsmStartAllowedToFadeInTemporarilyTimer_block_invoke()
{
  uint64_t result;
  NSObject *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = MX_FeatureFlags_IsHandoffEnabled();
  if ((_DWORD)result)
  {
    MEMORY[0x1940352BC](gCMSM);
    v1 = qword_1EE2B3C90;
    if (qword_1EE2B3C90)
    {
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v1 = qword_1EE2B3C90;
      }
      dispatch_source_cancel(v1);
      if (qword_1EE2B3C90)
      {
        dispatch_release((dispatch_object_t)qword_1EE2B3C90);
        qword_1EE2B3C90 = 0;
      }
    }
    -[MXSessionManager setAppAllowedToFadeInTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v3, v4), "setAppAllowedToFadeInTemporarily:", 0);
    return MEMORY[0x1940352C8](gCMSM);
  }
  return result;
}

uint64_t CMSessionMgrRegisterEndpointManager(const void *a1)
{
  if (MXGetSerialQueue())
    return FigRouteDiscoveryManagerRegisterEndpointManager(a1);
  else
    return FigSignalErrorAt();
}

uint64_t cmsSetClientPriority(void *a1, uint64_t a2)
{
  int CanClientsSetEmergencyAlertPriority;
  uint64_t result;
  int v6;
  unsigned int v7;

  if (a2 > 0x14 || ((1 << a2) & 0x100401) == 0)
    return FigSignalErrorAt();
  CanClientsSetEmergencyAlertPriority = MX_FeatureFlags_CanClientsSetEmergencyAlertPriority();
  if ((_DWORD)a2 == 20 && CanClientsSetEmergencyAlertPriority)
  {
    if (objc_msgSend(a1, "hasEntitlementToSetEmergencyAlertPriority"))
    {
      objc_msgSend(a1, "isActive");
      goto LABEL_13;
    }
    return FigSignalErrorAt();
  }
  if (!CanClientsSetEmergencyAlertPriority && (objc_msgSend(a1, "mustUseDefaultClientPriority") & 1) != 0)
    return 4294954309;
  v6 = objc_msgSend(a1, "isActive");
  if ((_DWORD)a2 == 10 && v6 && !CMSUtility_IsAudioCategoryRingtone(a1))
    return 4294954309;
LABEL_13:
  v7 = objc_msgSend(a1, "clientPriority");
  objc_msgSend(a1, "setClientPriority:", a2);
  objc_msgSend(a1, "setHasPhoneCallBehavior:", CMSUtility_HasPhoneCallBehaviour(a1) != 0);
  objc_msgSend(a1, "setOptOutOfMutePriority:", CMSUtility_HasPhoneCallBehaviour(a1) != 0);
  if (objc_msgSend(a1, "clientPriority") <= v7
    || !objc_msgSend(a1, "isActive")
    || (result = cmsBeginInterruptionGuts(a1, 0, 2), !(_DWORD)result)
    && (result = -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA"), !(_DWORD)result))
  {
    if ((CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded(),
          MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
      && (objc_msgSend(a1, "isActive") & 1) != 0
      || (result = objc_msgSend(a1, "isPlaying"), (_DWORD)result))
    {
      CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 12);
      CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
      return 0;
    }
  }
  return result;
}

uint64_t cmsUpdateExcludedPortsList(void *a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v8;
  void *v9;
  uint64_t result;

  if (!a1)
    return 4294954316;
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFArrayGetTypeID())
      return 4294954315;
    objc_msgSend(a1, "setExcludedPortsList:", 0);
    if (CFArrayGetCount((CFArrayRef)cf) >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v5);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("PortNumber"));
        if (Value)
        {
          v8 = Value;
          v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "excludedPortsList"));
          objc_msgSend(v9, "addObject:", v8);
          objc_msgSend(a1, "setExcludedPortsList:", v9);

        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)cf) > v5);
    }
  }
  else
  {
    objc_msgSend(a1, "setExcludedPortsList:", 0);
  }
  result = objc_msgSend(a1, "isActive");
  if ((_DWORD)result)
  {
    if ((objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
      cmsSetCategoryOnPVMAndAudioDevice(a1);
    return 0;
  }
  return result;
}

uint64_t cmsSetOverrideRoute(void *a1, NSDictionary *a2)
{
  uint64_t result;
  uint64_t v5;
  const __CFString *v6;
  int VADOutputPortTypeFromFigRouteName;
  int VADInputPortTypeFromFigRouteName;
  NSDictionary *v9;
  int VADCategoryFromFigCategoryName;
  int VADModeFromFigModeName;
  int v12;
  int VADPortIDFromVADPortType;
  int v14;
  int v15;
  __CFArray *OverridePortsList;

  if (!a1)
    return 4294954316;
  if (FigCFEqual())
  {
    -[NSDictionary objectForKey:](-[MXSessionManager figCategoryToOutputOverridabilityDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figCategoryToOutputOverridabilityDict"), "objectForKey:", objc_msgSend(a1, "audioCategory"));
    if (FigCFEqual())
      return 4294954315;
  }
  v5 = objc_msgSend(a1, "audioCategory");
  v6 = (const __CFString *)objc_msgSend(a1, "audioMode");
  VADOutputPortTypeFromFigRouteName = CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(a2);
  VADInputPortTypeFromFigRouteName = CMSMVAUtility_GetVADInputPortTypeFromFigRouteName(a2);
  if (v5)
    v9 = (NSDictionary *)v5;
  else
    v9 = (NSDictionary *)CFSTR("Audio/Video");
  if (!v6)
    v6 = CFSTR("Default");
  VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v9);
  VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v6);
  if (!VADInputPortTypeFromFigRouteName && VADOutputPortTypeFromFigRouteName == 1886613611)
  {
    v12 = VADModeFromFigModeName;
    VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(1886216809);
    if (cmsmInputPortIsConnectedForRouteConfiguration(VADPortIDFromVADPortType, VADCategoryFromFigCategoryName, v12, (const void *)objc_msgSend(a1, "allowedPortTypes")))VADInputPortTypeFromFigRouteName = 1886216809;
    else
      VADInputPortTypeFromFigRouteName = 0;
  }
  v14 = vaemGetVADPortIDFromVADPortType(VADOutputPortTypeFromFigRouteName);
  v15 = vaemGetVADPortIDFromVADPortType(VADInputPortTypeFromFigRouteName);
  OverridePortsList = CMSMUtility_CreateOverridePortsList(v15, v14);
  objc_msgSend(a1, "setOverridePortsList:", OverridePortsList);
  if (OverridePortsList)
    CFRelease(OverridePortsList);
  result = objc_msgSend(a1, "isActive");
  if ((_DWORD)result)
  {
    cmsTryToTakeControl(a1);
    return 0;
  }
  return result;
}

uint64_t cmsSetVolume(void *a1, uint64_t a2, float a3)
{
  uint64_t VolumeSequenceNumber;

  if (objc_msgSend(a1, "isActive") && !PVMGetEnabled())
    cmsTryToTakeControl(a1);
  VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
  return PVMSetCurrentPreferredVolumeWithRefCon(a2, VolumeSequenceNumber, 0, a3);
}

uint64_t cmsmActivateEndpointFromRouteDescription(const __CFDictionary *a1)
{
  const __CFString *UIDFromRouteDescription;
  AudioObjectID CurrentOutputPortAtIndex;
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueFigEndpoint *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, OpaqueFigEndpoint *, _QWORD);
  uint64_t *v12;
  OpaqueFigEndpoint *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, OpaqueFigEndpoint *, _QWORD);
  uint64_t v16;

  if (!a1)
    return 0;
  UIDFromRouteDescription = (const __CFString *)CMSMVAUtility_GetUIDFromRouteDescription(a1);
  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  v4 = (uint64_t)vaeCopyDeviceIdentifierFromVADPort(CurrentOutputPortAtIndex);
  if (!FigCFEqual())
  {
    CFDictionaryGetValue(a1, CFSTR("AVAudioRouteName"));
    v6 = (const void *)vaeCopyNameForPort(CurrentOutputPortAtIndex);
    CFDictionaryGetValue(a1, CFSTR("RouteName"));
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v4)
      CFRelease((CFTypeRef)v4);
    if (v6)
      CFRelease(v6);
    if (!FigCFEqual())
      goto LABEL_24;
    v9 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)UIDFromRouteDescription, 1, *MEMORY[0x1E0CA3A58], 0);
    if (UIDFromRouteDescription && CFStringHasSuffix(UIDFromRouteDescription, CFSTR("screen")))
      v10 = qword_1EE2B3D00;
    else
      v10 = qword_1EE2B3CE8;
    v11 = *(uint64_t (**)(uint64_t, OpaqueFigEndpoint *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
    if (v11)
    {
      v4 = v11(v10, v9, 0);
      if (!v9)
        goto LABEL_23;
    }
    else
    {
      v4 = 4294954514;
      if (!v9)
      {
LABEL_23:
        if ((_DWORD)v4)
          return v4;
LABEL_24:
        if (FigCFEqual() || FigCFEqual())
        {
          if (!CFDictionaryGetValue(a1, CFSTR("PortNumber")))
          {
            v12 = (uint64_t *)MEMORY[0x1E0CA3A60];
LABEL_31:
            v13 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)UIDFromRouteDescription, 0, *v12, 0);
            v14 = qword_1EE2B3CE8;
            v15 = *(uint64_t (**)(uint64_t, OpaqueFigEndpoint *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
            if (v15)
            {
              v4 = v15(v14, v13, 0);
              if (!v13)
                goto LABEL_34;
            }
            else
            {
              v4 = 4294954514;
              if (!v13)
              {
LABEL_34:
                if ((_DWORD)v4)
                  return v4;
                goto LABEL_35;
              }
            }
            CFRelease(v13);
            goto LABEL_34;
          }
        }
        else if (!FigCFEqual())
        {
          v16 = FigRoutingManagerPickRouteDescriptorForContext((const void *)qword_1EE2B3CF0, a1, 0, 0);
          if ((_DWORD)v16)
            return v16;
LABEL_35:
          cmsmUpdateFakeSharedAudioRouteAsPicked(1, 0, 0, 0);
          cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 1, 0, 0, 0);
          return 0;
        }
        v12 = (uint64_t *)MEMORY[0x1E0CA3A80];
        goto LABEL_31;
      }
    }
    CFRelease(v9);
    goto LABEL_23;
  }
  if (dword_1EE2B3F38)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4)
  {
    CFRelease((CFTypeRef)v4);
    return 0;
  }
  return v4;
}

void CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream()
{
  NSObject *v0;

  v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream", (uint64_t)"CMSessionManager.m", 12429, 0, 0, v0, (uint64_t)&__block_literal_global_133);
}

uint64_t FigEndpointManagerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t CMSessionMgrHasRouteSharingPolicyLongFormVideo(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  _QWORD v6[6];

  *a2 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CMSessionMgrHasRouteSharingPolicyLongFormVideo_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = a1;
  v6[5] = a2;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrHasRouteSharingPolicyLongFormVideo", (uint64_t)"CMSessionManager.m", 14996, 0, 0, v4, (uint64_t)v6);
  return 0;
}

uint64_t CMSessionMgrShouldHijackAudioRoute(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _QWORD v10[7];
  int v11;

  if (!a3 || !a4)
    return FigSignalErrorAt();
  v8 = MXGetSerialQueue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __CMSessionMgrShouldHijackAudioRoute_block_invoke;
  v10[3] = &__block_descriptor_60_e5_v8__0l;
  v11 = a1;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrShouldHijackAudioRoute", (uint64_t)"CMSessionManager.m", 15026, 0, 0, v8, (uint64_t)v10);
  return 0;
}

uint64_t CMSessionMgrCopyDeviceRouteForRouteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v10 = MXGetSerialQueue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __CMSessionMgrCopyDeviceRouteForRouteConfiguration_block_invoke;
  v13[3] = &unk_1E309C3F8;
  v13[4] = &v14;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  v13[9] = a5;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrCopyDeviceRouteForRouteConfiguration", (uint64_t)"CMSessionManager.m", 15100, 0, 0, v10, (uint64_t)v13);
  v11 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_19378B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *MXSMGetVolumeRampCategory(const __CFString *a1, const void *a2)
{
  const __CFString *v4;

  v4 = CFSTR("PhoneCall");
  if (!PVMCategoriesAreEquivalent(a1, a2, CFSTR("PhoneCall"), 0))
  {
    v4 = CFSTR("VoiceCommand");
    if (!PVMCategoriesAreEquivalent(a1, a2, CFSTR("VoiceCommand"), 0))
    {
      v4 = CFSTR("Audio/Video");
      if (!PVMCategoriesAreEquivalent(a1, a2, CFSTR("Audio/Video"), 0))
        return 0;
    }
  }
  return v4;
}

void cmsmGetAndSetVolumePreferencesForNonActiveVolumeClient(void *a1, uint64_t a2, int a3, float a4, uint64_t a5, uint64_t a6, CFTypeRef *a7, const void *a8, _BYTE *a9, _BYTE *a10, float *a11, _BYTE *a12, _BYTE *a13, unsigned __int8 a14, char a15, unsigned __int8 a16)
{
  _BYTE *v17;
  MXSessionManager *v24;
  CFTypeRef v25;
  const __CFString *v26;
  float v27;
  float v28;
  NSObject *v29;
  float v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  NSDictionary **v38;
  float v39;
  float v40;
  NSObject *v41;
  float v42;
  CFTypeRef v43[2];
  CFTypeRef v44[2];
  uint64_t v45;
  CFTypeRef v46;
  CFTypeRef cf;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a9)
  {
    if (a11 && a12 != 0)
    {
      v17 = a9;
      v46 = 0;
      cf = 0;
      v45 = 0;
      *(_OWORD *)v43 = 0u;
      *(_OWORD *)v44 = 0u;
      CMSUtility_CopyCurrentCategoryAndDeviceRoute(a1, (NSDictionary **)&cf, &v46, &v43[1], &v44[1], v44);
      v24 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      v25 = -[MXSessionManager getUncustomizedCategory:](v24, "getUncustomizedCategory:", cf);
      if (v25)
        v25 = CFRetain(v25);
      cf = v25;
      v48 = *(_OWORD *)v43;
      v49 = *(_OWORD *)v44;
      v50 = v45;
      v43[0] = PVMGetMappedEndpointType((uint64_t)&v48);
      switch(a3)
      {
        case 1:
          vaemUnmuteFullMuteIfMuted();
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v30 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, v30 + a4, 0.0, 0.0);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          *a10 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a16, v30, *a11);
          if (dword_1EE2B3F38)
            goto LABEL_19;
          goto LABEL_45;
        case 2:
          vaemUnmuteFullMuteIfMuted();
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v32 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, a4, 0.0, 0.0);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          *a10 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a16, v32, *a11);
          if (dword_1EE2B3F38)
          {
LABEL_19:
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_45;
        case 3:
        case 6:
          goto LABEL_44;
        case 4:
          v17 = a10;
          vaemUnmuteFullMuteIfMuted();
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v33 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, v33 + a4, 0.0, 0.0);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v34 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          *a11 = v34;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a16, v33, v34);
          if (dword_1EE2B3F38)
            goto LABEL_36;
          goto LABEL_37;
        case 5:
          v17 = a10;
          vaemUnmuteFullMuteIfMuted();
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v35 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, a4, 0.0, 0.0);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v36 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          *a11 = v36;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a16, v35, v36);
          if (dword_1EE2B3F38)
            goto LABEL_36;
          goto LABEL_37;
        case 7:
          goto LABEL_29;
        case 8:
          if (!a13)
            goto LABEL_45;
          goto LABEL_34;
        case 9:
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          if (!PVMIsCurrentDeviceRoute((uint64_t)&v48))
            goto LABEL_45;
LABEL_29:
          v37 = objc_msgSend(a1, "userMuted");
          v38 = (NSDictionary **)MEMORY[0x1E0C9AE40];
          if (!v37)
            v38 = (NSDictionary **)MEMORY[0x1E0C9AE50];
          *a12 = v37 ^ (MXCoreSessionSetProperty(a1, CFSTR("UserMuted"), *v38, 0) == 0);
LABEL_37:
          *v17 = 1;
          goto LABEL_45;
        case 10:
          if (a13)
          {
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            if (PVMIsCurrentDeviceRoute((uint64_t)&v48))
LABEL_34:
              *a13 = objc_msgSend(a1, "userMuted");
            else
              *a13 = 0;
          }
          goto LABEL_45;
        case 11:
        case 12:
        case 13:
          if (!a8)
            goto LABEL_45;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v46)
          {
            CFRelease(v46);
            v46 = 0;
          }
          v26 = (const __CFString *)CFRetain(a8);
          cf = v26;
          if (a3 == 12)
          {
            if (!a15)
            {
              vaemUnmuteFullMuteIfMuted();
              v26 = (const __CFString *)cf;
            }
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            v42 = PVMGetVolumePreference(v26, v46, (uint64_t)&v48);
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, a4, 0.0, 0.0);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xCu, a16, v42, a4);
            if (dword_1EE2B3F38)
            {
LABEL_17:
              v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else
          {
            if (a3 != 11)
              goto LABEL_44;
            vaemUnmuteFullMuteIfMuted();
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            v27 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
            *a11 = v27 + a4;
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            PVMSetVolumePreference((const __CFString *)cf, v46, a16, (uint64_t)&v48, a2, a14, v27 + a4, 0.0, 0.0);
            v48 = *(_OWORD *)v43;
            v49 = *(_OWORD *)v44;
            v50 = v45;
            v28 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xBu, a16, v27, v28);
            if (dword_1EE2B3F38)
              goto LABEL_17;
          }
          *a10 = 1;
LABEL_44:
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
LABEL_45:
          if (a7)
          {
            *a7 = cf;
          }
          else
          {
            if (!cf)
              goto LABEL_50;
            CFRelease(cf);
          }
          cf = 0;
LABEL_50:
          if (v46)
          {
            CFRelease(v46);
            v46 = 0;
          }
          if (v44[1])
          {
            CFRelease(v44[1]);
            v44[1] = 0;
          }
          if (v43[1])
          {
            CFRelease(v43[1]);
            v43[1] = 0;
          }
          if (v44[0])
            CFRelease(v44[0]);
          break;
        case 14:
          v17 = a10;
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v39 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          PVMSetRawVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48, a2, a14, a16, a4);
          v48 = *(_OWORD *)v43;
          v49 = *(_OWORD *)v44;
          v50 = v45;
          v40 = PVMGetVolumePreference((const __CFString *)cf, v46, (uint64_t)&v48);
          *a11 = v40;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a16, v39, v40);
          if (dword_1EE2B3F38)
          {
LABEL_36:
            v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_37;
        default:
          goto LABEL_45;
      }
    }
  }
}

uint64_t CMSessionManagerPerformVolumeOperationWithSequenceNumber(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11)
{
  NSObject *v20;
  uint64_t v21;
  _QWORD v23[13];
  int v24;
  float v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v20 = MXGetSerialQueue();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __CMSessionManagerPerformVolumeOperationWithSequenceNumber_block_invoke;
  v23[3] = &unk_1E309F198;
  v24 = a1;
  v25 = a9;
  v23[4] = &v27;
  v23[5] = a2;
  v23[6] = a3;
  v23[7] = a4;
  v26 = a6;
  v23[8] = a5;
  v23[9] = a7;
  v23[10] = a8;
  v23[11] = a10;
  v23[12] = a11;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionManagerPerformVolumeOperationWithSequenceNumber", (uint64_t)"CMSessionManager.m", 16671, 0, 0, v20, (uint64_t)v23);
  v21 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v27, 8);
  return v21;
}

void sub_19378C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSessionMgrPerformVolumeOperation(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  NSObject *v18;
  uint64_t v19;
  _QWORD v21[12];
  int v22;
  float v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v18 = MXGetSerialQueue();
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __CMSessionMgrPerformVolumeOperation_block_invoke;
  v21[3] = &unk_1E309F1C0;
  v22 = a1;
  v23 = a9;
  v21[4] = &v24;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = a4;
  v21[8] = a5;
  v21[9] = a6;
  v21[10] = a7;
  v21[11] = a8;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrPerformVolumeOperation", (uint64_t)"CMSessionManager.m", 16709, 0, 0, v18, (uint64_t)v21);
  v19 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v24, 8);
  return v19;
}

void sub_19378C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionMgrCopyPortDescription(const void *a1, uint64_t a2, CFDictionaryRef *a3)
{
  CFTypeID v5;
  AudioObjectID PortFromCFNumber;

  if (!a1)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(a1);
  if (v5 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)a1);
  if (a3)
    *a3 = cmsmCopyDetailedPortInfoForRouteConfiguration(PortFromCFNumber, 0, 1768776806, 0, 2);
  return 0;
}

void FigPlayerCMSessionOneTimeInitialization()
{
  if (MX_FeatureFlags_IsAudiomxdEnabled())
    CMSMDeviceState_UpdateDeviceConfiguration();
  else
    MXInitialize();
}

__n128 MediaServerCMSessionOneTimeInitialization(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (cmsmInitializeLogging_onceToken != -1)
    dispatch_once(&cmsmInitializeLogging_onceToken, &__block_literal_global_76);
  MXSetSerialQueue(a1);
  *(_OWORD *)&unk_1EE2B3B90 = *(_OWORD *)a2;
  unk_1EE2B3BA0 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&unk_1EE2B3BB0 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&unk_1EE2B3BC0 = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)&qword_1EE2B3BD0 = result;
  return result;
}

uint64_t FigPlayerCMSessionOneTimeFinalization()
{
  return FigVibratorStopWithOptions(0);
}

uint64_t FigPlayerCMSession_SystemWillSleep()
{
  return FigVibratorStopWithOptions(0);
}

void MXSessionManagerFadeOutCurrentNowPlayingApp(int a1)
{
  id v2;
  void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float FadeOutDurationForPlaybackHandoff;
  const __CFAllocator *v6;
  CFNumberRef v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  MXSessionManager *v10;
  double v11;
  float v12;
  _DWORD valuePtr[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    v2 = CMSMNP_CopyNowPlayingAppSession();
    if (v2)
    {
      v3 = v2;
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      valuePtr[0] = 0;
      if (a1)
        FadeOutDurationForPlaybackHandoff = CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
      else
        FadeOutDurationForPlaybackHandoff = 0.0;
      v12 = FadeOutDurationForPlaybackHandoff;
      v6 = CFGetAllocator(v3);
      v7 = CFNumberCreate(v6, kCFNumberFloat32Type, valuePtr);
      v8 = CFGetAllocator(v3);
      v9 = CFNumberCreate(v8, kCFNumberFloat32Type, &v12);
      CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff();
      CMSUtility_PostInterruptionCommandNotification(v3, 2u, (const __CFString *)objc_msgSend(v3, "clientName"), 0, v7, v9, 0, 0);
      v10 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      *(float *)&v11 = v12;
      -[MXSessionManager sleepForAsyncDucking:duration:](v10, "sleepForAsyncDucking:duration:", 1, v11);
      if (v7)
        CFRelease(v7);
      if (v9)
        CFRelease(v9);

    }
  }
}

void MXSessionManagerFadeInCurrentNowPlayingApp(int a1)
{
  id v2;
  void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float FadeInDurationForPlaybackHandoff;
  const __CFAllocator *v6;
  CFNumberRef v7;
  MXSessionManager *v8;
  double v9;
  float valuePtr[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    v2 = CMSMNP_CopyNowPlayingAppSession();
    if (v2)
    {
      v3 = v2;
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a1)
        FadeInDurationForPlaybackHandoff = CMSMUtility_GetFadeInDurationForPlaybackHandoff();
      else
        FadeInDurationForPlaybackHandoff = 0.0;
      valuePtr[0] = FadeInDurationForPlaybackHandoff;
      v6 = CFGetAllocator(v3);
      v7 = CFNumberCreate(v6, kCFNumberFloat32Type, valuePtr);
      CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff();
      CMSUtility_PostInterruptionCommandNotification(v3, 3u, (const __CFString *)objc_msgSend(v3, "clientName"), 0, 0, v7, 0, 0);
      v8 = +[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance");
      *(float *)&v9 = valuePtr[0];
      -[MXSessionManager sleepForAsyncDucking:duration:](v8, "sleepForAsyncDucking:duration:", 0, v9);
      if (v7)
        CFRelease(v7);

    }
  }
}

void *__cmsmLoadAudioStatisticsRoutines_block_invoke()
{
  void *result;
  void *v1;

  result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    v1 = result;
    gCMSessionAudioStatistics = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    off_1EE2B3D48 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    off_1EE2B3D50 = (uint64_t (*)(_QWORD))dlsym(v1, "CAReportingClientStartReporter");
    off_1EE2B3D58 = (uint64_t (*)(_QWORD))dlsym(v1, "CAReportingClientStopReporter");
    off_1EE2B3D60 = dlsym(v1, "CAReportingClientSetAudioServiceType");
    qword_1EE2B3D68 = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    off_1EE2B3D70 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "CAReportingClientSetConfiguration");
    off_1EE2B3D78 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v1, "CAReportingClientSendMessage");
    result = dlsym(v1, "CAReportingClientDestroyReporterID");
    off_1EE2B3D80 = (uint64_t (*)(_QWORD))result;
  }
  return result;
}

void cmsmVibeStoppedNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMSMNotificationUtility_PostVibeStopped(a5);
}

void cmsmGetCountAndResourceEntriesOfType(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a3 = 0;
  *a2 = 0;
  if (dword_1EE2B3C60 >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (FigCFEqual())
      {
        v7 = qword_1EE2B3C68 + v5;
        *a2 = *(_DWORD *)(qword_1EE2B3C68 + v5 + 8);
        *a3 = *(_QWORD *)(v7 + 16);
      }
      ++v6;
      v5 += 24;
    }
    while (v6 < dword_1EE2B3C60);
  }
}

uint64_t (*__cmsmLoadClusterSyncMgrRoutines_block_invoke())(void)
{
  void *v0;
  uint64_t (*result)(void);

  v0 = dlopen("/System/Library/Frameworks/MediaToolbox.framework/MediaToolbox", 4);
  if (!v0)
    return (uint64_t (*)(void))FigSignalErrorAt();
  result = (uint64_t (*)(void))dlsym(v0, "FigClusterSynchronizationManager_ClientIsPlaying");
  sFigClusterSynchronizationManager_ClientIsPlaying = result;
  if (!result)
    return (uint64_t (*)(void))FigSignalErrorAt();
  return result;
}

void __cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic_block_invoke(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *v5;
  const void *v6;
  const void *v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, *(const void **)(a1 + 32));
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v5, CFSTR("RouteChangeOptionKey_UserPickedRoute"), (const void *)*MEMORY[0x1E0C9AE40]);
  FigRoutingManagerPickEndpointsForContext(*(const void **)(a1 + 40), Mutable, 0, v5);
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
}

uint64_t __cmsmUpdateSomeClientIsPlaying_block_invoke()
{
  return CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(byte_1EE2B3C98);
}

void __cmsHandleIdleSleep_block_invoke_2(uint64_t a1)
{
  CMSMSleep_UpdateIdleSleepPreventor(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void __cmsCopyGameAudioPreferencesToSession_block_invoke(uint64_t a1)
{
  id Weak;
  void *v2;
  int IsGameApp;
  void *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v2 = Weak;
    IsGameApp = CMSUtility_IsGameApp(Weak);
    if (IsGameApp)
    {
      v4 = (void *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID((uint64_t)CFSTR("AVGameBypassSystemSpatialAudio"), objc_msgSend((id)objc_msgSend(v2, "clientPID"), "unsignedIntValue"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v5 = objc_msgSend(v4, "BOOLValue");
      else
        v5 = 0;
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    objc_msgSend(v2, "setBypassSystemSpatialAudioForGame:", v5, v7, v8);
    objc_msgSend(v2, "setDoesGameAudioNeedToBeSpatialized:", IsGameApp & (v5 ^ 1));

  }
}

BOOL cmsmValidateAppsList(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  BOOL v4;
  CFIndex v5;
  const void *ValueAtIndex;
  CFTypeID v7;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    return 1;
  }
  else
  {
    v3 = Count;
    v4 = 0;
    if (CFArrayGetValueAtIndex(a1, 0))
    {
      v5 = 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v5 - 1);
        v7 = CFGetTypeID(ValueAtIndex);
        if (v7 != CFStringGetTypeID())
          break;
        v4 = v5 >= v3;
        if (v3 == v5)
          break;
      }
      while (CFArrayGetValueAtIndex(a1, v5++));
    }
  }
  return v4;
}

void MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(unsigned int a1, int a2, float a3, float a4)
{
  uint64_t CurrentOutputPortAtIndex;
  int DoesBluetoothSupportFeature;

  CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  DoesBluetoothSupportFeature = vaeDoesBluetoothSupportFeature(CurrentOutputPortAtIndex);
  if (a1 <= 0xE && ((1 << a1) & 0x5836) != 0 && a3 != a4 && !a2)
  {
    if (DoesBluetoothSupportFeature)
      CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(1, a4 > a3);
  }
}

void __cmsmRegisterForAudioDeviceStartNotifications_block_invoke()
{
  int AudioDeviceStart;
  const __CFAllocator *v1;
  __CFString *Mutable;
  CFAbsoluteTime Current;
  CFDateRef v4;
  const void *v5;
  const void *v6;
  __CFDictionary *PowerLogDataForAppleTV;

  AudioDeviceStart = cmsmGetAudioDeviceStart();
  if (-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"))
  {
    if (AudioDeviceStart)
    {
      if (FigAtomicCompareAndSwap32())
      {
        ::AudioDeviceStart(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
        if (FigAtomicCompareAndSwap32())
        {
          v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          CFStringAppendFormat(Mutable, 0, CFSTR("com.apple.appletv.audiostart"));
          Current = CFAbsoluteTimeGetCurrent();
          v4 = CFDateCreate(v1, Current);
          v5 = (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName;
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorName = (uint64_t)Mutable;
          if (Mutable)
            CFRetain(Mutable);
          if (v5)
            CFRelease(v5);
          v6 = (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime;
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime = (uint64_t)v4;
          if (v4)
            CFRetain(v4);
          if (v6)
            CFRelease(v6);
          PowerLogDataForAppleTV = CMSMPowerLogCreatePowerLogDataForAppleTV(CFSTR("AppleTV_Awake"), sCMSessionMgrAudioDeviceStartIdleSleepPreventor, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorAllocated = CMSMSleep_CreateIdleSleepPreventor(Mutable, CFSTR("CoreMedia_AppleTVIdleSleepPreventor"), PowerLogDataForAppleTV, (IOPMAssertionID *)&sCMSessionMgrAudioDeviceStartIdleSleepPreventor);
          if (PowerLogDataForAppleTV)
            CFRelease(PowerLogDataForAppleTV);
          if (Mutable)
          {
            CFRelease(Mutable);
            if (!v4)
              return;
LABEL_26:
            CFRelease(v4);
            return;
          }
          goto LABEL_25;
        }
      }
    }
    else if (FigAtomicCompareAndSwap32())
    {
      AudioDeviceStop(-[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"), 0);
      if (FigAtomicCompareAndSwap32())
      {
        v4 = CMSMPowerLogCreatePowerLogDataForAppleTV(CFSTR("AppleTV_Asleep"), sCMSessionMgrAudioDeviceStartIdleSleepPreventor, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
        if (!CMSMSleep_ReleaseIdleSleepPreventor(sCMSessionMgrAudioDeviceStartIdleSleepPreventor, CFSTR("CoreMedia_AppleTVIdleSleepPreventor"), v4))
        {
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorAllocated = 1;
          if (!v4)
            return;
          goto LABEL_26;
        }
        sCMSessionMgrAudioDeviceStartIdleSleepPreventor = 0;
        if (sCMSessionMgrAudioDeviceStartIdleSleepPreventorName)
        {
          CFRelease((CFTypeRef)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName);
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorName = 0;
        }
        if (sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime)
        {
          CFRelease((CFTypeRef)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
          sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime = 0;
        }
LABEL_25:
        if (!v4)
          return;
        goto LABEL_26;
      }
    }
  }
}

uint64_t cmsmGetAudioDeviceStart()
{
  uint64_t result;
  uint64_t state64;

  state64 = 0;
  if (notify_get_state(gAudioDeviceStartNotifyToken, &state64))
    return gAudioDeviceStartCached;
  result = state64 != 0;
  gAudioDeviceStartCached = state64 != 0;
  return result;
}

void __cmsmScreenIsBlankedChangedCallback_block_invoke(uint64_t a1)
{
  int IsBlanked;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  dispatch_time_t v4;
  NSObject *v5;
  NSObject *v6;

  IsBlanked = CMSMUtility_ShouldEnableLongPullModeWhenScreenIsBlanked();
  CMScreenHandleIdleEvent(100, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
  if (*(_BYTE *)(a1 + 33))
    goto LABEL_8;
  if (IsBlanked || FigVAEndpointManagerGetPropertyBoolean(qword_1EE2B3BE0, 0x1E30ABF28))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCalculateAndSetDeviceBufferDuration(1, 0, 0.0, 0.0);
  }
  v4 = dispatch_time(0, 1000000000);
  v5 = MXGetSerialQueue();
  dispatch_after(v4, v5, &__block_literal_global_248);
  if (*(_BYTE *)(a1 + 33))
LABEL_8:
    CMSystemSoundMgr_DeactivateAllSystemSounds();
  else
    CMSystemSoundMgr_ActivateAllSystemSounds();
  if (*(_BYTE *)(a1 + 33) && IsBlanked)
  {
    if (dword_1EE2B3F38)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCalculateAndSetDeviceBufferDuration(1, 0, 0.0, 0.0);
  }
}

uint64_t __cmsmTightSyncUUIDChangedCallback_block_invoke()
{
  NSPointerArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  NSPointerArray *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[MXSessionManager mxCoreSessionListBeginIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionListBeginIteration");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v0 = -[MXSessionManager mxCoreSessionList](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "mxCoreSessionList");
  v1 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v12;
    v10 = v0;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v12 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if ((-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v8, v9), "isAirPlaySession:", v5)|| CMSUtility_GetWantsAutomaticClusterPairingOnPlaybackStart(v5))&& objc_msgSend(v5, "isActive")&& objc_msgSend(v5, "isPlaying"))
        {
          if (dword_1EE2B3F38)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v0 = v10;
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
        }
      }
      v2 = -[NSPointerArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v2);
  }
  return -[MXSessionManager mxCoreSessionListEndIteration](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v8, v9), "mxCoreSessionListEndIteration");
}

uint64_t __cmsmVoiceOverIsOnChangedCallback_block_invoke(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;

  v1 = byte_1EE2B3D18;
  v2 = *(unsigned __int8 *)(a1 + 32);
  byte_1EE2B3D18 = *(_BYTE *)(a1 + 32);
  -[MXAdditiveRoutingManager sendActiveSessionsInfoToVA](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance"), "sendActiveSessionsInfoToVA");
  result = MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled();
  if ((_DWORD)result)
  {
    if (v1 != v2)
    {
      -[MXSessionManager startAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "startAsyncDuckingOperation");
      -[MXSessionManager updateDuckedSessionsForVoiceOver:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "updateDuckedSessionsForVoiceOver:", 0);
      return -[MXSessionManager endAsyncDuckingOperation](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "endAsyncDuckingOperation");
    }
  }
  return result;
}

uint64_t initValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_253);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteOptionRemoteControlInterfaceIdentifier");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier = result;
  }
  else
  {
    result = constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
  }
  getkMRMediaRemoteOptionRemoteControlInterfaceIdentifier[0] = kMRMediaRemoteOptionRemoteControlInterfaceIdentifierFunction;
  return result;
}

uint64_t kMRMediaRemoteOptionRemoteControlInterfaceIdentifierFunction()
{
  return constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
}

uint64_t initMRMediaRemoteSendCommandToApp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_253);
  softLinkMRMediaRemoteSendCommandToApp[0] = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteSendCommandToApp");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkMRMediaRemoteSendCommandToApp[0])(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t initMRMediaRemoteGetLocalOrigin()
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_253);
  softLinkMRMediaRemoteGetLocalOrigin[0] = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteGetLocalOrigin");
  return softLinkMRMediaRemoteGetLocalOrigin[0]();
}

uint64_t fsmcontroller_CopyCarModesQueue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  return v1;
}

uint64_t FigStarkModeControllerCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  _QWORD *Instance;
  NSObject *v4;
  NSObject *v5;
  NSObject *initially_inactive;
  const CFArrayCallBacks *v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v13[7];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (fsm_stateObjectGetTypeID_sRegisterStateOnce != -1)
    dispatch_once(&fsm_stateObjectGetTypeID_sRegisterStateOnce, &__block_literal_global_77);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v5 = dispatch_queue_create("com.apple.mediaexperience.carmodes", v4);
  Instance[2] = v5;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  Instance[3] = dispatch_queue_create_with_target_V2("com.apple.mediaexperience.carmodes-request", initially_inactive, v5);
  Instance[15] = CFArrayCreateMutable(v2, 0, 0);
  v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Instance[10] = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  Instance[6] = CFArrayCreateMutable(v2, 0, v7);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  v15 = 0;
  v14 = 0u;
  v13[5] = 100;
  v13[3] = 0;
  v13[1] = 100;
  Mutable = CFArrayCreateMutable(v2, 0, v7);
  v13[2] = Mutable;
  v13[0] = 0x6400000002;
  v9 = CFArrayCreateMutable(v2, 0, v7);
  v13[6] = v9;
  v13[4] = 0x6400000002;
  v10 = FigStarkModeControllerSetCurrentInternalMode((uint64_t)Instance, (uint64_t)v13);
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);
  if ((_DWORD)v10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRelease(Instance);
    Instance = 0;
  }
  *a1 = Instance;
  return v10;
}

uint64_t FigStarkModeControllerSetCurrentInternalMode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (!a1)
    return 4294950566;
  result = fsm_verifyResourceState(a2);
  if (!(_DWORD)result)
  {
    result = fsm_verifyResourceState(a2 + 32);
    if (!(_DWORD)result)
    {
      v5 = *(_DWORD *)(a2 + 68);
      if (*(_DWORD *)(a2 + 64))
      {
        if (!v5)
          return 4294949811;
      }
      else if (v5)
      {
        return 4294949810;
      }
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v13 = *(_OWORD *)(a2 + 16);
      v14 = v7;
      v9 = *(_OWORD *)(a2 + 64);
      v15 = v8;
      v16 = v9;
      v12 = v6;
      v10 = *(NSObject **)(a1 + 16);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __FigStarkModeControllerSetCurrentInternalMode_block_invoke;
      v11[3] = &__block_descriptor_120_e5_v8__0l;
      v11[4] = a1;
      MXDispatchSync((uint64_t)"FigStarkModeControllerSetCurrentInternalMode", (uint64_t)"FigStarkMode.m", 1029, 0, 0, v10, (uint64_t)v11);
      return 0;
    }
  }
  return result;
}

uint64_t fsm_verifyResourceState(uint64_t a1)
{
  const __CFArray *v2;

  if (!*(_DWORD *)a1)
    return 4294949813;
  if (!*(_DWORD *)(a1 + 4))
    return 4294950560;
  if (!*(_DWORD *)(a1 + 8))
    return 4294950559;
  v2 = *(const __CFArray **)(a1 + 16);
  if (v2 && CFArrayGetCount(v2))
  {
    if (!*(_DWORD *)(a1 + 24))
      return 4294950558;
  }
  else if (*(_DWORD *)(a1 + 24))
  {
    return 4294949812;
  }
  return 0;
}

void FigStarkModeControllerSetExecuteChangeHandler(_QWORD *a1, const void *a2)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[6];

  if (a1)
  {
    CFRetain(a1);
    v4 = _Block_copy(a2);
    v5 = a1[2];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigStarkModeControllerSetExecuteChangeHandler_block_invoke;
    v6[3] = &unk_1E3098EA8;
    v6[4] = v4;
    v6[5] = a1;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerSetExecuteChangeHandler", (uint64_t)"FigStarkMode.m", 1066, 0, 0, v5, (uint64_t)v6);
  }
}

uint64_t FigStarkModeControllerAddStateChangedHandler(_QWORD *a1, NSObject *a2, const void *a3)
{
  uint64_t Instance;
  NSObject *v7;
  _QWORD v9[6];

  if (!a1)
    return 0;
  if (fsm_stateChangedHandlerTokenObjectGetTypeID_sRegisterStateChangedHandlerTokenOnce != -1)
    dispatch_once(&fsm_stateChangedHandlerTokenObjectGetTypeID_sRegisterStateChangedHandlerTokenOnce, &__block_literal_global_39_1);
  Instance = _CFRuntimeCreateInstance();
  if (!a2)
    a2 = MEMORY[0x1E0C80D38];
  *(_DWORD *)(Instance + 16) = FigAtomicIncrement32();
  *(_QWORD *)(Instance + 24) = a2;
  dispatch_retain(a2);
  *(_QWORD *)(Instance + 32) = _Block_copy(a3);
  CFRetain(a1);
  v7 = a1[2];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __FigStarkModeControllerAddStateChangedHandler_block_invoke;
  v9[3] = &__block_descriptor_48_e5_v8__0l;
  v9[4] = a1;
  v9[5] = Instance;
  MXDispatchAsync((uint64_t)"FigStarkModeControllerAddStateChangedHandler", (uint64_t)"FigStarkMode.m", 1086, 0, 0, v7, (uint64_t)v9);
  return Instance;
}

void FigStarkModeControllerRemoveStateChangedHandler(CFTypeRef cf, uint64_t a2)
{
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[6];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (cf && a2)
  {
    CFRetain(cf);
    v4 = *(NSObject **)(a2 + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigStarkModeControllerRemoveStateChangedHandler_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = cf;
    v6[5] = a2;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerRemoveStateChangedHandler", (uint64_t)"FigStarkMode.m", 1104, 0, 0, v4, (uint64_t)v6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t _fsmcontroller_GetCurrentMode(__n128 *a1, __n128 *a2)
{
  if (!a1)
    return 4294950566;
  if (!a2)
    return 4294949645;
  if (_FigIsNotCurrentDispatchQueue())
    MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar against 'Media"
                             "Experience Session | All'");
  fsm_getCurrentMode(a1, a2, 0);
  return 0;
}

__n128 fsm_getCurrentMode(__n128 *a1, __n128 *a2, int a3)
{
  unsigned int CurrentBorrower;
  unsigned __int32 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int32 v10;
  __n128 result;

  CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)&a1[2]);
  v7 = a1[2].n128_u32[0];
  if (CurrentBorrower)
    v8 = CurrentBorrower;
  else
    v8 = a1[2].n128_u32[0];
  a2->n128_u32[0] = v8;
  a2->n128_u32[1] = v7;
  if (a3)
  {
    v9 = 2;
  }
  else
  {
    v9 = fsm_getCurrentBorrower((const __CFArray *)&a1[4]);
    if (!v9)
      v9 = a1[4].n128_u32[0];
  }
  v10 = a1[4].n128_u32[0];
  a2->n128_u32[2] = v9;
  a2->n128_u32[3] = v10;
  result = a1[6];
  a2[1] = result;
  return result;
}

uint64_t fsmcontroller_GetCurrentMode(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v4[6];

  if (!a1)
    return 4294950566;
  if (!a2)
    return 4294949645;
  v2 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __fsmcontroller_GetCurrentMode_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = a1;
  v4[5] = a2;
  MXDispatchSync((uint64_t)"fsmcontroller_GetCurrentMode", (uint64_t)"FigStarkMode.m", 1143, 0, 0, v2, (uint64_t)v4);
  return 0;
}

uint64_t FigStarkModeControllerGetCurrentMode(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  void (*v6)(uint64_t, uint64_t);

  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1EE2B4018)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v6)
      v6(a1, a2);
  }
  else
  {
    if (dword_1EE2B4018)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fsmcontroller_GetCurrentMode(a1, a2);
  }
  return 0;
}

uint64_t FigStarkModeControllerGetCurrentResourceBorrowConstraint(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigStarkModeControllerGetCurrentResourceBorrowConstraint_block_invoke;
  v5[3] = &unk_1E3098D60;
  v5[4] = &v6;
  v5[5] = a2;
  v5[6] = a1;
  MXDispatchSync((uint64_t)"FigStarkModeControllerGetCurrentResourceBorrowConstraint", (uint64_t)"FigStarkMode.m", 1181, 0, 0, v2, (uint64_t)v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19378ECB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void FigStarkModeControllerUpdateIsVoiceAssistantActive(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 16);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __FigStarkModeControllerUpdateIsVoiceAssistantActive_block_invoke;
    v3[3] = &__block_descriptor_41_e5_v8__0l;
    v3[4] = a1;
    v4 = a2;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerUpdateIsVoiceAssistantActive", (uint64_t)"FigStarkMode.m", 1223, 0, 0, v2, (uint64_t)v3);
  }
}

uint64_t fsmcontroller_RequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[9];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 24);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __fsmcontroller_RequestModeChange_block_invoke;
    v8[3] = &unk_1E309C3D0;
    v8[4] = &v10;
    v8[5] = a1;
    v8[6] = a2;
    v8[7] = a3;
    v8[8] = a4;
    v9 = a5;
    MXDispatchSync((uint64_t)"fsmcontroller_RequestModeChange", (uint64_t)"FigStarkMode.m", 1237, 0, 0, v5, (uint64_t)v8);
    v6 = *((unsigned int *)v11 + 6);
  }
  else
  {
    v6 = 4294950566;
    v13 = -16730;
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_19378EE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t fsm_requestModeChange(__n128 *a1, __int128 *a2, const char *a3, char a4, uint64_t a5, int a6)
{
  uint64_t result;
  CFStringRef v13;
  CFStringRef v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString *v16;
  char *v17;
  NSObject *v18;
  unsigned int *v19;
  int v20;
  unsigned int CurrentBorrower;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  __CFString *v33;
  uint64_t v34;
  __CFString *v35;
  __int128 v36;
  __int128 v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  CFTypeRef v44;
  const void *v45;
  CFTypeRef v46;
  const void *v47;
  char v48;
  uint64_t v49;
  void (*v50)(uint64_t, __n128 *);
  CFIndex v51;
  const void *ValueAtIndex;
  int v53;
  NSObject *v54;
  char v55;
  const void *v56;
  const void *v57;
  const char *v58;
  __CFString *v59;
  CFArrayRef *cf;
  __n128 type;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  os_log_type_t v67;
  unsigned int v68;
  CFTypeRef v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  const char *v76;
  __n128 v77;
  __int128 v78;
  CFArrayRef *v79;
  const void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  __n128 v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  fsm_getCurrentMode(a1, &v65, 0);
  if (!*(_DWORD *)a2 || !*((_DWORD *)a2 + 1))
    return 4294949813;
  result = fsm_verifyResourceChangeRequest((uint64_t)a2 + 8);
  if (!(_DWORD)result)
  {
    v58 = a3;
    cf = (CFArrayRef *)a1;
    v55 = a4;
    result = fsm_verifyResourceChangeRequest((uint64_t)(a2 + 2));
    if (!(_DWORD)result)
    {
      v77 = *(__n128 *)((char *)a2 + 8);
      *(_QWORD *)&v78 = *((_QWORD *)a2 + 3);
      v13 = FSMDebug_CopyFigStarkModeBorrowIDString((uint64_t)&v77);
      v77 = (__n128)a2[2];
      *(_QWORD *)&v78 = *((_QWORD *)a2 + 6);
      v14 = FSMDebug_CopyFigStarkModeBorrowIDString((uint64_t)&v77);
      if (dword_1EE2B4018)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v13)
        CFRelease(v13);
      if (v14)
        CFRelease(v14);
      v16 = FSMDebug_CopyPrettyPrintStringForModeChangeRequest((int *)a2);
      v17 = (char *)a1;
      if (v16)
        CFRelease(v16);
      if (a6)
      {
        if (dword_1EE2B4018)
        {
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v17 = (char *)a1;
        }
        *((_DWORD *)v17 + 8) = 2;
        *((_DWORD *)v17 + 16) = 2;
      }
      fsm_requestResourceModeChange(*(_DWORD *)a2, (uint64_t)a2 + 8, (uint64_t)(v17 + 32));
      v19 = (unsigned int *)(v17 + 64);
      fsm_requestResourceModeChange(*((_DWORD *)a2 + 1), (uint64_t)(a2 + 2), (uint64_t)(v17 + 64));
      fsm_printListOfBorrowers((uint64_t)(v17 + 32));
      fsm_printListOfBorrowers((uint64_t)(v17 + 64));
      if (!v17[128] || !FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
      {
        v20 = *((_DWORD *)v17 + 24);
        CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)(v17 + 64));
        if (!CurrentBorrower)
          CurrentBorrower = *v19;
        if (v20 != CurrentBorrower)
          *((_QWORD *)v17 + 12) = 0;
      }
      v22 = *((_DWORD *)v17 + 26);
      v23 = fsm_getCurrentBorrower((const __CFArray *)(v17 + 64));
      if (!v23)
        v23 = *v19;
      if (v22 != v23)
        *((_DWORD *)v17 + 26) = 0;
      v24 = *((_DWORD *)a2 + 14);
      if (v24)
      {
        if (v24 == -1)
        {
          if (*((_DWORD *)v17 + 24) != *((_DWORD *)a2 + 1))
            goto LABEL_38;
          v25 = 0;
          *((_DWORD *)v17 + 24) = 0;
          goto LABEL_37;
        }
        v26 = *((_DWORD *)a2 + 1);
        v27 = fsm_getCurrentBorrower((const __CFArray *)(v17 + 64));
        if (!v27)
          v27 = *v19;
        if (v26 == v27 || FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
        {
          *((_DWORD *)v17 + 24) = *((_DWORD *)a2 + 1);
          v25 = *((_DWORD *)a2 + 14);
LABEL_37:
          *((_DWORD *)v17 + 25) = v25;
        }
      }
LABEL_38:
      v28 = *((_DWORD *)a2 + 15);
      if (v28 == 1)
      {
        v30 = *((_DWORD *)a2 + 1);
        v31 = fsm_getCurrentBorrower((const __CFArray *)(v17 + 64));
        if (!v31)
          v31 = *v19;
        if (v30 == v31)
        {
          v29 = *((_DWORD *)a2 + 1);
          goto LABEL_46;
        }
      }
      else if (v28 == -1 && *((_DWORD *)v17 + 26) == *((_DWORD *)a2 + 1))
      {
        v29 = 0;
LABEL_46:
        *((_DWORD *)v17 + 26) = v29;
      }
      v32 = *((_DWORD *)a2 + 16);
      if (v32 == 1)
      {
        *((_DWORD *)v17 + 27) = *((_DWORD *)a2 + 1);
      }
      else if (v32 == -1 && *((_DWORD *)v17 + 27) == *((_DWORD *)a2 + 1))
      {
        *((_DWORD *)v17 + 27) = 0;
      }
      fsm_getCurrentMode((__n128 *)v17, (__n128 *)a5, a6);
      v33 = FSMDebug_CopyPrettyPrintStringForStarkModeState((int *)a5);
      if (v33)
        CFRelease(v33);
      if (v58)
      {
        v33 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v58, 0x8000100u);
        v35 = v33;
      }
      else
      {
        v35 = 0;
      }
      v63 = v65;
      v64 = v66;
      type = *(__n128 *)a5;
      v62 = *(_OWORD *)(a5 + 16);
      v36 = a2[3];
      v72 = a2[2];
      v73 = v36;
      v74 = *((_QWORD *)a2 + 8);
      v37 = a2[1];
      v70 = *a2;
      v71 = v37;
      v69 = 0;
      v59 = v35;
      if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v33, v34))
      {
        if (dword_1EE2B4018)
        {
          v68 = 0;
          v67 = OS_LOG_TYPE_DEFAULT;
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v39 = v68;
          if (os_log_type_enabled(v38, v67))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if (v40)
          {
            v75 = 136315138;
            v76 = "fsm_postStateChangedOnAllHandlers";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v77 = type;
        v78 = v62;
        FigStarkModeCreateDictionaryRepresentation(&v77, &v69);
        v44 = CMSMUtility_CopyStarkEndpointCentral();
        if (v44)
        {
          v45 = v44;
          FigEndpointExtendedGetClassID();
          v57 = v45;
          if (CMBaseObjectIsMemberOfClass())
          {
            v46 = CFRetain(v45);
            v47 = v46;
            if (v46)
            {
              v48 = v55;
              if (_FigEndpointCentralSendCommand((uint64_t)v46, (uint64_t)CFSTR("modesChanged"), (uint64_t)v69, 0, 0))
              {
LABEL_87:
                CFRelease(v47);
LABEL_88:
                if (v69)
                {
                  CFRelease(v69);
                  v69 = 0;
                }
                if (v57)
                  CFRelease(v57);
                if (v59)
                  CFRelease(v59);
                return 0;
              }
            }
            else
            {
              v48 = v55;
            }
          }
          else
          {
            v48 = v55;
            v47 = 0;
          }
LABEL_83:
          v56 = v47;
          if (CFArrayGetCount(*((CFArrayRef *)v17 + 15)) >= 1)
          {
            v51 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v17 + 15), v51);
              v53 = *((_DWORD *)ValueAtIndex + 4);
              CFRetain(cf);
              CFRetain(ValueAtIndex);
              v54 = *((_QWORD *)ValueAtIndex + 3);
              v77.n128_u64[0] = MEMORY[0x1E0C809B0];
              v77.n128_u64[1] = 3221225472;
              *(_QWORD *)&v78 = __fsm_postStateChanged_block_invoke;
              *((_QWORD *)&v78 + 1) = &__block_descriptor_189_e5_v8__0l;
              v79 = cf;
              v80 = ValueAtIndex;
              v17 = (char *)cf;
              v86 = v53;
              v87 = v63;
              v88 = v64;
              v89 = type;
              v90 = v62;
              v85 = v74;
              v83 = v72;
              v84 = v73;
              v81 = v70;
              v82 = v71;
              v91 = v48;
              MXDispatchAsync((uint64_t)"fsm_postStateChanged", (uint64_t)"FigStarkMode.m", 162, 0, 0, v54, (uint64_t)&v77);
              ++v51;
            }
            while (CFArrayGetCount(cf[15]) > v51);
          }
          v47 = v56;
          if (!v56)
            goto LABEL_88;
          goto LABEL_87;
        }
      }
      else
      {
        if (dword_1EE2B4018)
        {
          v68 = 0;
          v67 = OS_LOG_TYPE_DEFAULT;
          v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v42 = v68;
          if (os_log_type_enabled(v41, v67))
            v43 = v42;
          else
            v43 = v42 & 0xFFFFFFFE;
          if (v43)
          {
            v75 = 136315138;
            v76 = "fsm_postStateChangedOnAllHandlers";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v49 = *((_QWORD *)v17 + 14);
        if (v49)
        {
          v48 = a4;
          v50 = *(void (**)(uint64_t, __n128 *))(v49 + 16);
          v77 = type;
          v78 = v62;
          v50(v49, &v77);
LABEL_82:
          v47 = 0;
          v57 = 0;
          goto LABEL_83;
        }
      }
      v48 = a4;
      goto LABEL_82;
    }
  }
  return result;
}

uint64_t FigStarkModeControllerRequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1EE2B4018)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 16);
    if (v12)
      v12(a1, a2, a3, a4, a5);
  }
  else
  {
    if (dword_1EE2B4018)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fsmcontroller_RequestModeChange(a1, a2, a3, a4, a5);
  }
  return 0;
}

void fsmcontroller_RequestModeChangeAsync(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 v8;
  __int128 v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[6];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (a1)
  {
    v8 = a2[3];
    v22 = a2[2];
    v23 = v8;
    v24 = *((_QWORD *)a2 + 8);
    v9 = a2[1];
    v20 = *a2;
    v21 = v9;
    if (a3)
    {
      v10 = malloc_type_malloc(0x40uLL, 0x3F603644uLL);
      __strlcpy_chk();
    }
    else
    {
      v10 = 0;
    }
    CFRetain(a1);
    v11 = a1[3];
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __fsmcontroller_RequestModeChangeAsync_block_invoke;
    v12[3] = &unk_1E309F320;
    v15 = v22;
    v16 = v23;
    v14 = v21;
    v13 = v20;
    v17 = v24;
    v18 = v10;
    v19 = a5;
    v12[4] = a4;
    v12[5] = a1;
    MXDispatchAsync((uint64_t)"fsmcontroller_RequestModeChangeAsync", (uint64_t)"FigStarkMode.m", 1285, 0, 0, v11, (uint64_t)v12);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(a4 + 16))(a4, 4294950566, &v20);
  }
}

uint64_t fsmcontroller_RequestInitialModeChange(uint64_t a1, int *a2, int *a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  if (a1)
  {
    if (a4)
    {
      v11 = a4[3];
      v26 = a4[2];
      v27 = v11;
      v28 = *((_QWORD *)a4 + 8);
      v12 = a4[1];
      v24 = *a4;
      v25 = v12;
      fsm_validateInitialModeForResource(a2, (uint64_t)&v24, 0);
      fsm_validateInitialModeForResource(a3, (uint64_t)&v24, 1);
      v13 = *(NSObject **)(a1 + 16);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __fsmcontroller_RequestInitialModeChange_block_invoke;
      v16[3] = &unk_1E309F348;
      v16[6] = a2;
      v16[7] = a3;
      v16[4] = &v29;
      v16[5] = a1;
      v19 = v26;
      v20 = v27;
      v18 = v25;
      v17 = v24;
      v21 = v28;
      v22 = a5;
      v23 = a6;
      MXDispatchSync((uint64_t)"fsmcontroller_RequestInitialModeChange", (uint64_t)"FigStarkMode.m", 1473, 0, 0, v13, (uint64_t)v16);
    }
    dispatch_activate(*(dispatch_object_t *)(a1 + 24));
    v14 = *((unsigned int *)v30 + 6);
  }
  else
  {
    v14 = 4294950566;
    v32 = -16730;
  }
  _Block_object_dispose(&v29, 8);
  return v14;
}

void sub_19378FE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

int *fsm_validateInitialModeForResource(int *result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v11;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;

  if (a3)
    v5 = 32;
  else
    v5 = 8;
  if (a3)
    v6 = a2 + 32;
  else
    v6 = a2 + 8;
  if (result)
  {
    v7 = result;
    v8 = *result;
    if (*result)
    {
      v9 = 4 * (a3 != 0);
      if (dword_1EE2B4018)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = *v7;
      }
      if (v8 == 1)
      {
        if (!v7[1])
        {
          if (dword_1EE2B4018)
          {
            v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
            result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7[1] = 100;
        }
        if (!v7[2])
        {
          if (dword_1EE2B4018)
          {
            v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7[2] = 100;
        }
      }
      if (*v7 == 2)
      {
        if ((*(_DWORD *)(a2 + v5) & 0xFFFFFFFE) != 0x14)
          goto LABEL_40;
        if (a3)
        {
          if (*(_DWORD *)(a2 + v9) == 1)
          {
            *(_DWORD *)(a2 + 64) = 0;
            *(_QWORD *)(a2 + 56) = 0;
          }
        }
        *(_DWORD *)(a2 + v9) = 2;
      }
      else
      {
        if (*v7 != 1)
          goto LABEL_40;
        v15 = *(_DWORD *)(a2 + v5);
        if (v15 != 21)
        {
          if (v15 == 20)
          {
            *(_DWORD *)(v6 + 16) = v7[1];
            v16 = v7[2];
            goto LABEL_39;
          }
          if (v15)
            goto LABEL_40;
        }
        *(_QWORD *)(a2 + v5) = 0x6400000014;
      }
      v16 = 100;
      *(_DWORD *)(v6 + 16) = 100;
LABEL_39:
      *(_DWORD *)(v6 + 20) = v16;
LABEL_40:
      if (!dword_1EE2B4018)
        return result;
      goto LABEL_41;
    }
  }
  v11 = *(_DWORD *)(a2 + v5);
  if (v11 == 21 || v11 == 0)
  {
    *(_QWORD *)(a2 + v5) = 0x6400000014;
    *(_QWORD *)(v6 + 16) = 0x6400000064;
    if (dword_1EE2B4018)
    {
LABEL_41:
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      return (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t FigStarkModeControllerRequestInitialModeChange(uint64_t a1, int *a2, int *a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  uint64_t (*v14)(uint64_t, int *, int *, __int128 *, uint64_t, uint64_t);

  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1EE2B4018)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = *(uint64_t (**)(uint64_t, int *, int *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 24);
    if (v14)
      return v14(a1, a2, a3, a4, a5, a6);
    else
      return 4294954514;
  }
  else
  {
    if (dword_1EE2B4018)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return fsmcontroller_RequestInitialModeChange(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t FigStarkModeCopyController(CFTypeRef *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  uint64_t v6;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  cf[0] = 0;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    result = FigStarkModeControllerRemoteCreate(*MEMORY[0x1E0C9AE00], 0, cf);
LABEL_8:
    *a1 = cf[0];
    return result;
  }
  if (dword_1EE2B4018)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = CMSMUtility_CopyFigStarkModeController(cf);
  if (!(_DWORD)result)
    goto LABEL_8;
  v6 = result;
  FigSignalErrorAt();
  if (cf[0])
    CFRelease(cf[0]);
  return v6;
}

uint64_t FigStarkModeControllerGetClassID()
{
  if (FigStarkModeControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
  return FigStarkModeControllerGetClassID_sClassID;
}

uint64_t starkModeController_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigStarkModeControllerGetTypeID()
{
  if (FigStarkModeControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigStarkModeControllerXPCCreate(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a3)
  {
    if (FigStarkModeControllerGetClassID_sRegisterOnce != -1)
      dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
    v5 = CMDerivedObjectCreate();
    if (!(_DWORD)v5)
    {
      *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
      *a3 = 0;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v5;
}

void FigStarkModeCreateDictionaryRepresentation(_DWORD *a1, _QWORD *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  id v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  int v13;
  uint64_t v14;
  id v15;
  id v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *context;
  id v28;

  if (a2)
  {
    context = (void *)MEMORY[0x194035B20]();
    v28 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v4 = a1[6];
    if (v4 == 1)
      v5 = 2;
    else
      v5 = v4 == 2;
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("appStateID"));
    objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5), CFSTR("entity"));
    objc_msgSend(v3, "addObject:", v6);

    v7 = a1[4];
    v8 = a1[5];
    if (v7 == 1)
      v9 = 2;
    else
      v9 = v7 == 2;
    if (v8 == 11)
      v10 = 2;
    else
      v10 = -1;
    if (v8 == 10)
      v11 = 1;
    else
      v11 = v10;
    v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("appStateID"));
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9), CFSTR("entity"));
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11), CFSTR("speechMode"));
    objc_msgSend(v3, "addObject:", v12);

    v13 = a1[7];
    if (v13 == 1)
      v14 = 2;
    else
      v14 = v13 == 2;
    v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("appStateID"));
    objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v14), CFSTR("entity"));
    objc_msgSend(v3, "addObject:", v15);

    v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v17 = a1[2];
    v18 = a1[3];
    if (v17 == 1)
      v19 = 2;
    else
      v19 = v17 == 2;
    if (v18 == 1)
      v20 = 2;
    else
      v20 = v18 == 2;
    v21 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("resourceID"));
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19), CFSTR("entity"));
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20), CFSTR("permanentEntity"));
    objc_msgSend(v16, "addObject:", v21);

    v22 = a1[1];
    if (*a1 == 1)
      v23 = 2;
    else
      v23 = *a1 == 2;
    if (v22 == 1)
      v24 = 2;
    else
      v24 = v22 == 2;
    v25 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("resourceID"));
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v23), CFSTR("entity"));
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v24), CFSTR("permanentEntity"));
    objc_msgSend(v16, "addObject:", v25);

    objc_msgSend(v28, "setObject:forKey:", v3, CFSTR("appStates"));
    objc_msgSend(v28, "setObject:forKey:", v16, CFSTR("resources"));
    *a2 = v28;

    objc_autoreleasePoolPop(context);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t __fsm_stateObjectGetTypeID_block_invoke()
{
  uint64_t result;

  fsm_stateObjectGetTypeID_sStateClass = 0;
  *(_QWORD *)algn_1EE2B3A18 = "FigStarkModeControllerRefObject";
  qword_1EE2B3A20 = (uint64_t)fsm_stateInit;
  unk_1EE2B3A28 = 0;
  qword_1EE2B3A30 = (uint64_t)fsm_stateFinalize;
  unk_1EE2B3A38 = 0u;
  unk_1EE2B3A48 = 0u;
  result = _CFRuntimeRegisterClass();
  fsm_stateObjectGetTypeID_sStateID = result;
  return result;
}

double fsm_stateInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fsm_stateFinalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  dispatch_activate(*(dispatch_object_t *)(a1 + 24));
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 120);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 120) = 0;
  }
  _Block_release(*(const void **)(a1 + 112));
  v5 = *(const void **)(a1 + 80);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

uint64_t __fsm_stateChangedHandlerTokenObjectGetTypeID_block_invoke()
{
  uint64_t result;

  fsm_stateChangedHandlerTokenObjectGetTypeID_sStateChangedHandlerTokenClass = 0;
  unk_1EE2B3A90 = "FigStarkModeStateChangedHandlerTokenRefObject";
  qword_1EE2B3A98 = (uint64_t)fsm_stateChangedHandlerTokenInit;
  unk_1EE2B3AA0 = 0;
  qword_1EE2B3AA8 = (uint64_t)fsm_stateChangedHandlerTokenFinalize;
  unk_1EE2B3AB0 = 0u;
  unk_1EE2B3AC0 = 0u;
  result = _CFRuntimeRegisterClass();
  fsm_stateChangedHandlerTokenObjectGetTypeID_sStateChangedHandlerTokenID = result;
  return result;
}

_QWORD *fsm_stateChangedHandlerTokenInit(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fsm_stateChangedHandlerTokenFinalize(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  _Block_release(*(const void **)(a1 + 32));
}

const __CFArray *fsm_getCurrentBorrower(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;

  if (result)
  {
    v1 = result;
    result = (const __CFArray *)*((_QWORD *)result + 2);
    if (result)
    {
      Count = CFArrayGetCount(result);
      if (Count >= 1)
      {
        v3 = Count;
        for (i = 0; i != v3; ++i)
        {
          CFArrayGetValueAtIndex(*((CFArrayRef *)v1 + 2), i);
          FigCFDictionaryGetBooleanIfPresent();
        }
      }
      return 0;
    }
  }
  return result;
}

void fsm_requestResourceModeChange(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int CurrentBorrower;
  int v7;
  unsigned int v8;
  int *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  NSObject *v14;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFArray *v17;
  __CFDictionary *Mutable;
  const void *SInt32;
  const void *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  CFIndex v26;
  CFIndex i;
  __CFDictionary *v28;

  switch(*(_DWORD *)a2)
  {
    case 0x14:
      CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)a3);
      if (!CurrentBorrower || CurrentBorrower == a1)
      {
        if (*(_DWORD *)a3 == a1)
          v7 = 0;
        else
          v7 = *(_DWORD *)(a3 + 4);
      }
      else
      {
        v7 = *(_DWORD *)(a3 + 24);
      }
      if (*(_DWORD *)(a2 + 4) >= v7)
      {
        *(_DWORD *)a3 = a1;
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 20);
        *(_DWORD *)(a3 + 24) = 0;
        v17 = *(__CFArray **)(a3 + 16);
        if (v17)
          CFArrayRemoveAllValues(v17);
      }
      else if (dword_1EE2B4018)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return;
    case 0x15:
      if (*(_DWORD *)a3 == a1)
        *(_QWORD *)(a3 + 4) = 0x6400000064;
      return;
    case 0x16:
      v8 = fsm_getCurrentBorrower((const __CFArray *)a3);
      if (!v8)
      {
        if (*(_DWORD *)a3 != a1)
        {
          v9 = (int *)(a3 + 8);
          goto LABEL_31;
        }
LABEL_23:
        v15 = 0;
        goto LABEL_32;
      }
      if (v8 == a1)
        goto LABEL_23;
      v9 = (int *)(a3 + 24);
LABEL_31:
      v15 = *v9;
LABEL_32:
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      v20 = (const void *)FigCFNumberCreateSInt32();
      CFDictionarySetValue(Mutable, CFSTR("BorrowerEntity"), SInt32);
      CFDictionarySetValue(Mutable, CFSTR("UnborrowConstraint"), v20);
      if (*(_QWORD *)(a2 + 8))
      {
        FigCFDictionarySetValue();
      }
      else if (dword_1EE2B4018)
      {
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_DWORD *)(a2 + 4) >= v15)
      {
        CFDictionarySetValue(Mutable, CFSTR("BorrowSucceeded"), (const void *)*MEMORY[0x1E0C9AE50]);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 16);
      }
      else
      {
        CFDictionarySetValue(Mutable, CFSTR("BorrowSucceeded"), (const void *)*MEMORY[0x1E0C9AE40]);
        if (dword_1EE2B4018)
        {
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a3 + 16), 0, Mutable);
      if (SInt32)
        CFRelease(SInt32);
      if (v20)
        CFRelease(v20);
      if (Mutable)
        CFRelease(Mutable);
      return;
    case 0x17:
      if (*(_QWORD *)(a2 + 8))
      {
        v10 = *(const __CFArray **)(a3 + 16);
        if (v10)
        {
          Count = CFArrayGetCount(v10);
          v12 = Count - 1;
          if (Count >= 1)
          {
            while (1)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v12);
              FigCFDictionaryGetInt32IfPresent();
              FigCFDictionaryGetInt32IfPresent();
              if (ValueAtIndex)
                CFDictionaryGetValue(ValueAtIndex, CFSTR("BorrowID"));
              if (!a1 && FigCFEqual())
                break;
              if (--v12 == -1)
              {
                if (dword_1EE2B4018)
                {
                  v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_48;
              }
            }
            if (dword_1EE2B4018)
            {
              v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a3 + 16), v12);
          }
        }
      }
      else
      {
LABEL_48:
        fsm_requestResourceModeChangeUnborrowWithoutBorrowID(a1, a3);
      }
      v24 = *(const __CFArray **)(a3 + 16);
      if (!v24 || !CFArrayGetCount(v24))
      {
        *(_DWORD *)(a3 + 24) = 0;
        return;
      }
      v25 = *(const __CFArray **)(a3 + 16);
      if (v25)
      {
        v26 = CFArrayGetCount(v25);
        if (v26 < 1)
        {
          if (v26)
            return;
        }
        else
        {
          for (i = 0; i != v26; ++i)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), i);
            FigCFDictionaryGetBooleanIfPresent();
          }
        }
      }
      v28 = (__CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), 0);
      FigCFDictionaryGetInt32IfPresent();
      CFDictionarySetValue(v28, CFSTR("BorrowSucceeded"), (const void *)*MEMORY[0x1E0C9AE50]);
      *(_DWORD *)(a3 + 24) = 0;
      return;
    default:
      return;
  }
}

CFIndex fsm_printListOfBorrowers(uint64_t a1)
{
  CFIndex result;
  CFIndex v3;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v3 = result;
      for (i = 0; i != v3; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        CFDictionaryGetValue(ValueAtIndex, CFSTR("BorrowID"));
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        result = FigCFDictionaryGetBooleanIfPresent();
        if (dword_1EE2B4018)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

uint64_t fsm_verifyResourceChangeRequest(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t result;
  BOOL v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  switch(*(_DWORD *)a1)
  {
    case 0x14:
      v1 = *(_DWORD *)(a1 + 4);
      if (!v1)
        return 4294950564;
      v2 = *(_DWORD *)(a1 + 16);
      if (v2)
      {
        v3 = *(_DWORD *)(a1 + 20);
        if (v3)
          result = 0;
        else
          result = 4294950559;
        if (v1 == 100 && (v2 != 100 || v3 != 100))
          return 4294950557;
      }
      else
      {
        if (v1 == 100)
          return 4294950557;
        return 4294950560;
      }
      return result;
    case 0x15:
      if (!*(_DWORD *)(a1 + 4))
      {
        v5 = *(_QWORD *)(a1 + 16) == 0;
        v6 = -17480;
        goto LABEL_27;
      }
      return 4294950562;
    case 0x16:
      v7 = *(_DWORD *)(a1 + 4);
      if (!v7)
        return 4294950563;
      v8 = *(_DWORD *)(a1 + 16);
      if (v8)
      {
        if (*(_DWORD *)(a1 + 20))
          v9 = -17482;
        else
          v9 = 0;
      }
      else
      {
        v9 = -16738;
      }
      if (v8 == 100)
        v10 = v9;
      else
        v10 = -16738;
      if (v7 == 100)
        return v10;
      else
        return v9;
    case 0x17:
      if (!*(_DWORD *)(a1 + 4))
      {
        v5 = *(_QWORD *)(a1 + 16) == 0;
        v6 = -17481;
        goto LABEL_27;
      }
      return 4294950561;
    default:
      if (*(_DWORD *)a1)
        return 4294950565;
      v5 = (*(_QWORD *)a1 | *(_QWORD *)(a1 + 8) | *(_QWORD *)(a1 + 16)) == 0;
      v6 = -17487;
LABEL_27:
      if (v5)
        return 0;
      else
        return v6;
  }
}

void fsm_requestResourceModeChangeUnborrowWithoutBorrowID(int a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;

  v4 = *(const __CFArray **)(a2 + 16);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  while (Count-- >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), Count);
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    if (!a1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), Count);
      return;
    }
  }
}

void __fsm_postStateChanged_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _OWORD *, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[2];
  _QWORD v19[5];
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __fsm_postStateChanged_block_invoke_2;
  v19[3] = &unk_1E3099728;
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  v20 = *(_OWORD *)(a1 + 32);
  v21 = *(_DWORD *)(a1 + 120);
  v19[4] = &v22;
  MXDispatchSync((uint64_t)"fsm_postStateChanged_block_invoke", (uint64_t)"FigStarkMode.m", 164, 0, 0, v2, (uint64_t)v19);
  if (*((_BYTE *)v23 + 24))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
    v7 = *(unsigned __int8 *)(a1 + 188);
    v8 = *(void (**)(uint64_t, _OWORD *, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
    v9 = *(_OWORD *)(a1 + 140);
    v18[0] = *(_OWORD *)(a1 + 124);
    v18[1] = v9;
    v10 = *(_OWORD *)(a1 + 172);
    v17[0] = *(_OWORD *)(a1 + 156);
    v17[1] = v10;
    v11 = *(_OWORD *)(a1 + 96);
    v15[2] = *(_OWORD *)(a1 + 80);
    v15[3] = v11;
    v16 = *(_QWORD *)(a1 + 112);
    v12 = *(_OWORD *)(a1 + 64);
    v15[0] = *(_OWORD *)(a1 + 48);
    v15[1] = v12;
    v8(v6, v18, v17, v15, v7, v3, v4, v5);
  }
  v13 = *(const void **)(a1 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 32);
  if (v14)
    CFRelease(v14);
  _Block_object_dispose(&v22, 8);
}

void sub_19379263C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFIndex __fsm_postStateChanged_block_invoke_2(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex result;
  CFRange v4;

  v2 = *(const __CFArray **)(*(_QWORD *)(a1 + 40) + 120);
  v4.length = CFArrayGetCount(v2);
  v4.location = 0;
  result = CFArrayGetFirstIndexOfValue(v2, v4, *(const void **)(a1 + 48));
  if (result != -1 && *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16) == *(_DWORD *)(a1 + 56))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

CFStringRef starkModeController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStarkModeController %p]"), a1);
}

uint64_t mxFigStarkModeController_Finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
    return CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

__CFString *mxFigStarkModeController_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  if (a1)
  {
    v6 = *(unsigned int *)CMBaseObjectGetDerivedStorage();
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigStarkModeController %d>"), v6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigStarkModeControllerRef NULL>"));
  }
  return Mutable;
}

uint64_t mxFigStarkModeController_GetCurrentMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t CurrentMode;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950566;
  v3 = CMSMUtility_CopyFigStarkModeController(&cf);
  if ((_DWORD)v3)
  {
    CurrentMode = v3;
    FigSignalErrorAt();
  }
  else
  {
    CurrentMode = fsmcontroller_GetCurrentMode((uint64_t)cf, a2);
  }
  if (cf)
    CFRelease(cf);
  return CurrentMode;
}

uint64_t mxFigStarkModeController_RequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  if (a1)
  {
    cf = 0;
    v9 = CMSMUtility_CopyFigStarkModeController(&cf);
    if ((_DWORD)v9)
    {
      v10 = v9;
      FigSignalErrorAt();
    }
    else
    {
      v10 = fsmcontroller_RequestModeChange((uint64_t)cf, a2, a3, a4, a5);
    }
  }
  else
  {
    v10 = 4294950566;
  }
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t mxFigStarkModeController_RequestInitialModeChange(uint64_t a1, int *a2, int *a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;

  if (a1)
  {
    cf = 0;
    v11 = CMSMUtility_CopyFigStarkModeController(&cf);
    if ((_DWORD)v11)
    {
      v12 = v11;
      FigSignalErrorAt();
    }
    else
    {
      v12 = fsmcontroller_RequestInitialModeChange((uint64_t)cf, a2, a3, a4, a5, a6);
    }
  }
  else
  {
    v12 = 4294950566;
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

void FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(_QWORD *a1, _QWORD *a2, int a3)
{
  int64_t Count;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v14;
  CFTypeRef v15;
  CFTypeRef v16;
  _QWORD *v17;
  _QWORD *v18;
  CFTypeRef cf;
  CFTypeRef v20;
  CFDictionaryRef theDict;

  theDict = 0;
  FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)&theDict);
  Count = CFDictionaryGetCount(theDict);
  v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(theDict, v7, 0);
  if (Count >= 1)
  {
    v17 = a1;
    v18 = a2;
    v8 = *MEMORY[0x1E0CA4468];
    v9 = *MEMORY[0x1E0C9AE00];
    v10 = v7;
    while (1)
    {
      v11 = *v10;
      v20 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v11, 0, (uint64_t)&v20);
      cf = 0;
      if (v20)
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v13)
          v13(CMBaseObject, v8, v9, &cf);
      }
      if (FigCFEqual())
        break;
      v14 = FigCFEqual();
      if (!a3)
      {
        if (v14)
          break;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v20)
        CFRelease(v20);
      ++v10;
      if (!--Count)
        goto LABEL_28;
    }
    if (v17)
    {
      v15 = v20;
      if (v20)
        v15 = CFRetain(v20);
      *v17 = v15;
    }
    if (v18)
    {
      if (v11)
        v16 = CFRetain(v11);
      else
        v16 = 0;
      *v18 = v16;
    }
    if (cf)
      CFRelease(cf);
    goto LABEL_28;
  }
  if (v7)
LABEL_28:
    free(v7);
  if (theDict)
    CFRelease(theDict);
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRoutingToDeviceID(const __CFString *a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 v4;
  CFTypeRef cf;
  CFTypeRef v7;
  CFTypeRef v8;

  v8 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v8);
  v7 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)v8, &v7);
  if (v7)
  {
    cf = 0;
  }
  else
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v8, 0, (uint64_t)&v7);
    cf = 0;
    if (!v7)
      goto LABEL_6;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
    v3(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
LABEL_6:
  v4 = FigCFEqual() || MXCFStringHasCaseInsensitivePrefix(a1, (CFStringRef)cf);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v8)
  {
    CFRelease(v8);
    v8 = 0;
  }
  if (v7)
    CFRelease(v7);
  return v4;
}

uint64_t FigRoutingManagerUtilities_IsCurrentRouteHandoff()
{
  return *((unsigned __int8 *)FigRoutingManagerGetSharedManager() + 24);
}

_BYTE *FigRoutingManagerUtilities_UpdateIsRoutedToHandoff(char a1)
{
  _BYTE *result;

  result = FigRoutingManagerGetSharedManager();
  result[24] = a1;
  return result;
}

BOOL FigRoutingManagerUtilities_DidRouteChangeToBuiltIn(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v3;
  _BOOL8 v4;
  unsigned int PortFromCFNumber;
  CFTypeRef cf;

  if (!a1)
    return 0;
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v2 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v2)
  {
    v2(CMBaseObject, CFSTR("VAE_PortType"), *MEMORY[0x1E0C9AE00], &cf);
    v3 = (const __CFNumber *)cf;
  }
  else
  {
    v3 = 0;
  }
  PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v3);
  v4 = PortFromCFNumber == 1886613611 || PortFromCFNumber == 1886545251;
  if (cf)
    CFRelease(cf);
  return v4;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteNull()
{
  _BOOL8 IsContextRoutedToNull;
  CFTypeRef cf;

  cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  IsContextRoutedToNull = FigRoutingManagerUtilities_IsContextRoutedToNull((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  return IsContextRoutedToNull;
}

BOOL FigRoutingManagerUtilities_IsContextRoutedToNull(uint64_t a1)
{
  CFIndex Count;
  CFArrayRef theArray;

  theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (theArray)
      CFRelease(theArray);
  }
  else
  {
    Count = 0;
  }
  return Count == 0;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency()
{
  _BOOL8 IsEndpointLowLatencyAirPlay;
  CFTypeRef cf;
  CFTypeRef v3;

  v3 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v3);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v3, 0, (uint64_t)&cf);
  IsEndpointLowLatencyAirPlay = FigRoutingManagerIsEndpointLowLatencyAirPlay((uint64_t)cf);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v3)
    CFRelease(v3);
  return IsEndpointLowLatencyAirPlay;
}

OpaqueFigEndpointManager *FigRoutingManagerUtilities_CopySidePlayEndpoints()
{
  OpaqueFigEndpointManager *result;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v3;

  v3 = 0;
  result = FigRoutingManagerGetEndpointManager(*MEMORY[0x1E0CA3A78]);
  if (result)
  {
    CMBaseObject = FigEndpointManagerGetCMBaseObject();
    v2 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v2)
    {
      v2(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], &v3);
      return (OpaqueFigEndpointManager *)v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal()
{
  int IsEndpointOfType;
  const void *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 IsEndpointWHAGroupable;
  CFTypeRef v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v8 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v8);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v8, 0, (uint64_t)&cf);
  IsEndpointOfType = FigRoutingManagerIsEndpointOfType((uint64_t)cf);
  v1 = cf;
  if (IsEndpointOfType)
  {
    v6 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v3)
      v3(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &v6);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v1 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v6, 0, *MEMORY[0x1E0CA3A80], 0);
    cf = v1;
    if (v6)
    {
      CFRelease(v6);
      v1 = cf;
    }
  }
  IsEndpointWHAGroupable = FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v1);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v8)
    CFRelease(v8);
  return IsEndpointWHAGroupable;
}

const __CFString *FigRoutingManagerUtilities_GetEvaluatedBadgeType()
{
  const void *v0;
  CFTypeRef v1;
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  void (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  __CFString **v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24[29];

  v24[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v23 = 0;
  v24[0] = 0;
  v0 = (const void *)*MEMORY[0x1E0C9AE40];
  v21 = 0;
  v22 = v0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v21);
  v20 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v20);
  v19 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v21, 0, (uint64_t)&v19);
  cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v20, 0, (uint64_t)&cf);
  if (v19 && FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v19))
  {
    v1 = CMSMUtility_CopyStarkEndpointCentral();
    v2 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4258], v2, v24);
    v5 = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
      v6(v5, *MEMORY[0x1E0CA4348], v2, &v23);
    if (v1)
    {
      v7 = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v8)
        v8(v7, CFSTR("SupportsDCXForSpatialAudio"), v2, &v22);
      CFRelease(v1);
    }
    if (FigCFEqual())
    {
      if (!FigCFEqual())
        goto LABEL_33;
      goto LABEL_29;
    }
    if (FigCFEqual())
    {
      if (!FigCFEqual())
        goto LABEL_33;
      goto LABEL_31;
    }
  }
  else
  {
    v9 = 0;
    if (!MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled() || !cf)
      goto LABEL_35;
    if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)v20)
      || !FigRoutingManagerIsEndpointOfType((uint64_t)cf)
      && !FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      goto LABEL_24;
    }
    v10 = *MEMORY[0x1E0C9AE00];
    v11 = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(v11, *MEMORY[0x1E0CA4258], v10, v24);
    v13 = FigEndpointGetCMBaseObject();
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
      v14(v13, *MEMORY[0x1E0CA4348], v10, &v23);
    if ((FigEndpointGetSupportedFeatures() & 8) == 0)
    {
LABEL_24:
      v9 = 0;
      goto LABEL_35;
    }
    if (FigCFEqual())
    {
LABEL_29:
      v15 = kMXSession_BadgeType_DolbyAtmos;
LABEL_34:
      v9 = *v15;
      goto LABEL_35;
    }
    if (FigCFEqual())
    {
LABEL_31:
      v15 = kMXSession_BadgeType_DolbyAudio;
      goto LABEL_34;
    }
  }
  if (FigCFEqual())
  {
LABEL_33:
    v15 = kMXSession_BadgeType_SpatialAudio;
    goto LABEL_34;
  }
  if (FigCFEqual())
  {
    v15 = kMXSession_BadgeType_Surround;
    goto LABEL_34;
  }
  if (FigCFEqual())
    v9 = CFSTR("Stereo");
  else
    v9 = 0;
LABEL_35:
  if (dword_1EE2B3E28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    v19 = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    v21 = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    v20 = 0;
  }
  if (v22)
  {
    CFRelease(v22);
    v22 = 0;
  }
  if (v23)
  {
    CFRelease(v23);
    v23 = 0;
  }
  if (v24[0])
    CFRelease(v24[0]);
  if (v9)
    return v9;
  else
    return CFSTR("NotApplicable");
}

BOOL FigRoutingManagerUtilities_IsEndpointTypeVehicle(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  _BOOL8 v4;
  uint64_t v5;
  void (*v6)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFNumber *v7;
  CFTypeRef cf;
  CFNumberRef number;

  if (!a1)
    return 0;
  number = 0;
  v1 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v3
    && (v3(CMBaseObject, CFSTR("VAE_VAEndpointType"), v1, &number), number)
    && (cf = 0, CFNumberGetValue(number, kCFNumberSInt64Type, &cf), (_DWORD)cf == 1701869160))
  {
    v4 = 1;
  }
  else
  {
    cf = 0;
    v5 = FigEndpointGetCMBaseObject();
    v6 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v6)
    {
      v6(v5, CFSTR("VAE_PortType"), v1, &cf);
      v7 = (const __CFNumber *)cf;
    }
    else
    {
      v7 = 0;
    }
    v4 = CMSMVAUtility_GetPortFromCFNumber(v7) == 1886614639;
    if (cf)
      CFRelease(cf);
  }
  if (number)
    CFRelease(number);
  return v4;
}

void FigRoutingManagerUtilities_RegisterAirPlayStreamCapabilitiesDidChangeListener(uint64_t a1, uint64_t a2)
{
  const void *ValueAtIndex;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v16;
  CFArrayRef theArray;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  theArray = 0;
  cf = 0;
  if (!a2)
    goto LABEL_12;
  if (FigRoutingManagerIsEndpointOfType(a2) || FigRoutingManagerUtilities_IsEndpointTypeVehicle(a2))
    goto LABEL_4;
  if (a1 && FigEndpointAggregateGetFigEndpoint())
  {
    v9 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(CMBaseObject, *MEMORY[0x1E0CA4258], v9, &cf);
    if (FigCFEqual())
    {
      if (dword_1EE2B3E28)
      {
LABEL_21:
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v13 = FigEndpointGetCMBaseObject();
      v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (!v14 || (v14(v13, *MEMORY[0x1E0CA43D0], v9, &v16), !v16) || CFArrayGetCount((CFArrayRef)v16) < 2)
      {
LABEL_4:
        FigEndpointCopyStreamsForTypeAndSubType();
        if (theArray)
        {
          if (CFArrayGetCount(theArray) >= 1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            if (ValueAtIndex)
            {
              v5 = (uint64_t)ValueAtIndex;
              FigRoutingManagerGetSharedManager();
              CMNotificationCenterGetDefaultLocalCenter();
              v6 = CMNotificationCenterAddListener();
              routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification(v6, v7, v8, v5);
            }
          }
        }
        goto LABEL_8;
      }
      if (dword_1EE2B3E28)
        goto LABEL_21;
    }
  }
LABEL_8:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v16)
  {
    CFRelease(v16);
    v16 = 0;
  }
LABEL_12:
  if (theArray)
    CFRelease(theArray);
}

void routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *SharedManager;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  _QWORD v12[5];
  os_log_type_t type;
  int v14;
  CFTypeRef cf;
  _QWORD v16[23];

  v16[22] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    cf = 0;
    v16[0] = 0;
    v5 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
      v7(CMBaseObject, CFSTR("SupportedAudioCapabilities"), v5, v16);
    v8 = FigEndpointStreamGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(v8, *MEMORY[0x1E0CA4788], v5, &cf);
    if (dword_1EE2B3E28)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v11 = *((_QWORD *)SharedManager + 1);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification_block_invoke;
    v12[3] = &__block_descriptor_40_e5_v8__0l;
    v12[4] = v16[0];
    MXDispatchAsync((uint64_t)"routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification", (uint64_t)"FigRoutingManager_Utilities_Embedded.m", 466, 0, 0, v11, (uint64_t)v12);
  }
}

void FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v11;
  CFArrayRef theArray;
  CFTypeRef cf;
  CFTypeRef v14;
  CFArrayRef v15[23];

  v15[22] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  v14 = 0;
  v15[0] = 0;
  theArray = 0;
  cf = 0;
  if (a2)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a2)
      || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)a2))
    {
      goto LABEL_4;
    }
    if (a1 && FigEndpointAggregateGetFigEndpoint())
    {
      v4 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v6)
        v6(CMBaseObject, *MEMORY[0x1E0CA4258], v4, &v14);
      if (FigCFEqual())
      {
        if (!dword_1EE2B3E28)
          goto LABEL_18;
        goto LABEL_17;
      }
      v7 = FigEndpointGetCMBaseObject();
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v8)
      {
        v8(v7, *MEMORY[0x1E0CA43D0], v4, v15);
        if (v15[0])
        {
          if (CFArrayGetCount(v15[0]) == 1 && FigRoutingManagerIsEndpointPresentInAggregate(a2, a1))
          {
LABEL_4:
            FigEndpointCopyStreamsForTypeAndSubType();
            goto LABEL_18;
          }
        }
      }
      if (dword_1EE2B3E28)
      {
LABEL_17:
        v11 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
LABEL_18:
  if (v14)
  {
    CFRelease(v14);
    v14 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v15[0])
    CFRelease(v15[0]);
}

void __routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  CMSMUtility_UpdateSupportedOutputChannelLayouts(*(void **)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t FigEndpointUIAgentXPCRemoteCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t uint64;
  uint64_t v6;

  if (!a2)
  {
    v4 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_onceToken != -1)
    dispatch_once(&FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_78);
  v3 = FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_err;
  if (!FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_err)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        if (uint64)
        {
          v6 = uint64;
          FigEndpointUIAgentGetClassID();
          v3 = CMDerivedObjectCreate();
          if (!(_DWORD)v3)
          {
            *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = v6;
            FigXPCRemoteClientAssociateObject();
          }
          *a2 = 0;
        }
        else
        {
          v3 = 4294950515;
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    v3 = v4;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t remoteXPCendpointAgentClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 1) = 1;
  return result;
}

uint64_t figEndpointUIAgentRemoteXPC_Finalize()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    *DerivedStorage = 1;
    FigXPCRemoteClientDisassociateObject();
    if (!v1[1] && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendSyncMessage();
  }
  return FigXPCRelease();
}

uint64_t figEndpointUIAgentRemoteXPC_setAuthValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (a2 || a3)
  {
    ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v6);
    if ((_DWORD)ObjectID)
    {
      v4 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v4)
      {
        FigXPCMessageSetCFString();
        FigXPCMessageSetCFBoolean();
        v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    v4 = 0;
  }
  FigXPCRelease();
  return v4;
}

uint64_t figEndpointUIAgentRemoteXPC_setIsCurrentUIAgent(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetCFBoolean();
      v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t figEndpointUIAgentRemoteXPC_deviceWakeStatus(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetCFBoolean();
      v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t figEndpointUIAgentRemoteXPC_setPasswordFromKeychain(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFObject();
      v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCendpointAgent_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 1))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t remoteSystemController_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t remoteSystemController_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v2;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECEDA820)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage()
      || (v2 = FigXPCRemoteClientSendSyncMessage(), FigXPCRemoteClientKillServerOnTimeout(), v2))
    {
      v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigXPCRelease();
}

uint64_t remoteSystemController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  id v3;
  CFIndex v4;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v5 = " SERVER DIED";
  else
    v5 = "";
  return objc_msgSend(v3, "initWithFormat:", CFSTR("<FigSystemControllerRemote %p retainCount: %ld objectID: %016llx%s>"), a1, v4, *(_QWORD *)DerivedStorage, v5);
}

uint64_t remoteSystemController_CopyDeviceRouteForAudioCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  ObjectID = remoteSystemController_getObjectID(a1, v10);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  if (!a3)
  {
    if (!a4)
    {
      v8 = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  v7 = FigXPCMessageCopyCFString();
  v8 = v7;
  if (a4 && !(_DWORD)v7)
  {
LABEL_10:
    ObjectID = FigXPCMessageCopyCFString();
LABEL_11:
    v8 = ObjectID;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteSystemController_HasRouteSharingPolicyLongFormVideo(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;
  uint64_t v10;

  xdict = 0;
  v10 = 0;
  v8 = 0;
  ObjectID = remoteSystemController_getObjectID(a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    v6 = v5;
    if (a3 && !(_DWORD)v5)
      *a3 = xpc_dictionary_get_BOOL(xdict, (const char *)kFigSystemControllerXPCMsgParam_HasRouteSharingPolicyLongFormVideo);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSystemController_ShouldHijackAudioRoute(uint64_t a1, int a2, uint64_t a3, BOOL *a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  v11 = 0;
  ObjectID = remoteSystemController_getObjectID(a1, &v11);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_int64(xdict, (const char *)kFigSystemControllerXPCMsgParam_AudioScore, a2);
      ObjectID = FigXPCMessageSetCFString();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          if (a4)
            *a4 = xpc_dictionary_get_BOOL(v12, (const char *)kFigSystemControllerXPCMsgParam_ShouldHijackAudioRoute);
          if (!a5)
          {
            v9 = 0;
            goto LABEL_11;
          }
          ObjectID = FigXPCMessageCopyCFString();
        }
      }
    }
  }
  v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSystemController_ToggleInputMute(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  ObjectID = remoteSystemController_getObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_SetInputMute(uint64_t a1, const UInt8 *a2)
{
  CFDataRef v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  if (remoteSystemController_getObjectID(a1, v7)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFBoolean())
  {
    result = FigXPCRelease();
    __break(1u);
  }
  else
  {
    v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 32);
    v4 = FigXPCMessageSetCFData();
    if (!(_DWORD)v4)
      v4 = FigXPCRemoteClientSendSyncMessage();
    v5 = v4;
    FigXPCRelease();
    if (v3)
      CFRelease(v3);
    FigXPCRemoteClientKillServerOnTimeout();
    return v5;
  }
  return result;
}

uint64_t remoteSystemController_GetInputMute(uint64_t a1, const UInt8 *a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  ObjectID = remoteSystemController_getObjectID(a1, v10);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v8 = ObjectID;
  }
  else
  {
    a2 = (const UInt8 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 32);
    v6 = FigXPCMessageSetCFData();
    if ((_DWORD)v6)
    {
      v8 = v6;
    }
    else
    {
      v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      v8 = v7;
      if (a3)
      {
        if (!(_DWORD)v7)
        {
          v8 = FigXPCMessageCopyCFBoolean();
          if (!(_DWORD)v8)
            *a3 = *MEMORY[0x1E0C9AE50] == 0;
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  if (a2)
    CFRelease(a2);
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteSystemController_ClearUplinkMutedCache(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteSystemController_getObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_allowAppToInitiateRecordingTemporarily(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteSystemController_getObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCFString(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_createMediaEndowment(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteSystemController_getObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2
      || (v2 = FigXPCMessageSetCFString(), (_DWORD)v2)
      || (v2 = FigXPCMessageSetCFDictionary(), (_DWORD)v2))
    {
      v3 = v2;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_invalidateMediaEndowment(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteSystemController_getObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCFString(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_SetSilentMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  ObjectID = remoteSystemController_getObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
  {
    v7 = ObjectID;
  }
  else
  {
    v7 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v7)
    {
      v7 = FigXPCMessageSetCFBoolean();
      if (!(_DWORD)v7)
      {
        v7 = FigXPCMessageSetCFDate();
        if (!(_DWORD)v7)
        {
          v7 = FigXPCMessageSetCFString();
          if (!(_DWORD)v7)
          {
            xpc_dictionary_set_uint64(xdict, (const char *)kFigSystemControllerXPCMsgParam_ClientType, a5);
            v7 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteSystemController_RemoteDeviceControlIsAllowed(uint64_t a1, _DWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  ObjectID = remoteSystemController_getObjectID(a1, v7);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v5 = ObjectID;
  }
  else
  {
    v4 = FigXPCMessageCopyCFNumber();
    v5 = v4;
    if (a2 && !(_DWORD)v4)
      *a2 = objc_msgSend(0, "unsignedIntValue");
  }
  FigXPCRelease();
  FigXPCRelease();

  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigEndpointUIAgentStartServer()
{
  uint64_t *v0;
  uint64_t *v1;
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  v0 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (!v0)
  {
    v7 = FigSignalErrorAt();
    if ((_DWORD)v7)
      return v7;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_4;
  }
  v1 = v0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v1[1] = (uint64_t)Mutable;
  if (Mutable)
  {
    *v1 = FigReentrantMutexCreate();
    gEndpointAgentServerState = (uint64_t)v1;
    goto LABEL_4;
  }
  v8 = FigSignalErrorAt();
  if (!(_DWORD)v8)
  {
LABEL_4:
    v4 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    v5 = FigXPCServerStart();
    if (v4)
      CFRelease(v4);
    return v5;
  }
  v5 = v8;
  v9 = (const void *)v1[1];
  if (v9)
    CFRelease(v9);
  if (*v1)
    FigSimpleMutexDestroy();
  free(v1);
  return v5;
}

uint64_t HandleEndpointUIAgentRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v7 = 0;
  cf = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294954516;
  return v6;
}

uint64_t FigEndpointUIAgentCopyCurrentEndpointUIAgent(_QWORD *a1)
{
  _QWORD *v2;
  CFTypeRef v3;
  const __CFArray *v5;
  CFIndex Count;
  unint64_t v7;

  if (!a1)
    return 4294954516;
  if (!gEndpointAgentServerState)
    return 4294954513;
  MEMORY[0x1940352BC](*(_QWORD *)gEndpointAgentServerState);
  if (!*(_QWORD *)(gEndpointAgentServerState + 16))
  {
    v5 = *(const __CFArray **)(gEndpointAgentServerState + 8);
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v7 = Count + 1;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(gEndpointAgentServerState + 8), v7 - 2);
          FigCFDictionaryGetIntIfPresent();
          --v7;
        }
        while (v7 > 1);
      }
    }
  }
  v2 = (_QWORD *)gEndpointAgentServerState;
  v3 = *(CFTypeRef *)(gEndpointAgentServerState + 16);
  if (v3)
  {
    v3 = CFRetain(v3);
    v2 = (_QWORD *)gEndpointAgentServerState;
  }
  *a1 = v3;
  MEMORY[0x1940352C8](*v2);
  return 0;
}

void RefconDestructor(uint64_t a1)
{
  int v2;
  const void *v3;
  void (*v4)(const void *, _QWORD, uint64_t);
  const void *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  NSObject *v12;
  void (*v13)(const void *);

  v2 = *(unsigned __int8 *)(a1 + 8);
  CMNotificationCenterGetDefaultLocalCenter();
  if (v2)
  {
    CMNotificationCenterPostNotification();
  }
  else
  {
    CMNotificationCenterPostNotification();
    v3 = *(const void **)a1;
    v4 = *(void (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v4)
      v4(v3, 0, 1);
  }
  v5 = *(const void **)a1;
  if (gEndpointAgentServerState)
  {
    MEMORY[0x1940352BC](*(_QWORD *)gEndpointAgentServerState);
    v6 = *(const __CFArray **)(gEndpointAgentServerState + 8);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        v9 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(gEndpointAgentServerState + 8), v9);
          FigCFDictionaryGetValue();
          if (FigCFEqual())
            break;
          if (v8 == ++v9)
            goto LABEL_19;
        }
        if (FigCFDictionaryGetValue())
        {
          if (dword_1EE2B3F18)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(gEndpointAgentServerState + 8), v9);
          v11 = gEndpointAgentServerState;
          if (*(const void **)(gEndpointAgentServerState + 16) == v5)
          {
            if (dword_1EE2B3F18)
            {
              v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v11 = gEndpointAgentServerState;
            }
            *(_QWORD *)(v11 + 16) = 0;
            FigEndpointUIAgentHelper_SetNewUIAgent(0);
          }
        }
      }
    }
LABEL_19:
    MEMORY[0x1940352C8](*(_QWORD *)gEndpointAgentServerState);
    v5 = *(const void **)a1;
  }
  if (v5)
  {
    v13 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v13)
      v13(v5);
  }
  DisposePerUIAgentState((const void **)a1);
}

void DisposePerUIAgentState(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

void CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange(void *a1)
{
  CFDictionaryRef BooleanPayload;
  NSObject *v3;
  _QWORD v4[6];

  if (objc_msgSend(a1, "isActive"))
  {
    BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(CFSTR("PrefersConcurrentAirPlayAudio"), objc_msgSend(a1, "prefersConcurrentAirPlayAudio"));
    v3 = MXGetNotificationSenderQueue();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange_block_invoke;
    v4[3] = &unk_1E309DAB0;
    v4[4] = a1;
    v4[5] = BooleanPayload;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 92, 0, 0, v3, (uint64_t)v4);
  }
}

void CMSMNotificationUtility_PostSessionAudioBehaviourDidChange(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[5];

  v2 = a1;
  v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_block_invoke;
  v4[3] = &unk_1E3099900;
  v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioBehaviourDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 113, 0, 0, v3, (uint64_t)v4);
}

void CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange(void *a1, int a2)
{
  _BOOL8 IsRecordingCategory;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[6];
  id v10;
  id location;

  if (a2)
  {
    if (objc_msgSend(a1, "prefersEchoCancelledInput"))
      IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)objc_msgSend(a1, "audioCategory"));
    else
      IsRecordingCategory = 0;
    v4 = 1;
  }
  else
  {
    IsRecordingCategory = 0;
    v4 = 0;
  }
  v5 = objc_alloc(MEMORY[0x1E0C99D80]);
  v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v4);
  v7 = objc_msgSend(v5, "initWithObjectsAndKeys:", v6, CFSTR("RouteControlFeatures"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsRecordingCategory), CFSTR("HasEchoCancelledInput"), 0);
  objc_initWeak(&location, a1);
  v8 = MXGetNotificationSenderQueue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange_block_invoke;
  v9[3] = &unk_1E309D2F0;
  objc_copyWeak(&v10, &location);
  v9[4] = a1;
  v9[5] = v7;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 137, 0, 0, v8, (uint64_t)v9);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_193796C58(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFDictionary *CMSMNotificationUtility_CreateVolumeNotificationPayload(const void *a1, const void *a2, const void *a3, uint64_t a4, int a5, float a6)
{
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const void **v17;
  CFTypeRef v19;
  CFTypeRef cf;
  void *value;
  uint64_t v22;
  float valuePtr;

  valuePtr = a6;
  value = 0;
  v22 = a4;
  v19 = 0;
  cf = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("AudioCategory"), a1);
  if (a2)
    CFDictionarySetValue(v12, CFSTR("Reason"), a2);
  if (a3)
    CFDictionarySetValue(v12, CFSTR("RefCon"), a3);
  v13 = CFNumberCreate(v10, kCFNumberFloat32Type, &valuePtr);
  if (v13)
  {
    v14 = v13;
    CFDictionarySetValue(v12, CFSTR("Volume"), v13);
    CFRelease(v14);
  }
  v15 = CFNumberCreate(v10, kCFNumberSInt64Type, &v22);
  if (v15)
  {
    v16 = v15;
    CFDictionarySetValue(v12, CFSTR("SequenceNumber"), v15);
    CFRelease(v16);
  }
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled())
  {
    v17 = (const void **)MEMORY[0x1E0C9AE40];
    if (a5)
      v17 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v12, CFSTR("SilenceVolumeHUD"), *v17);
  }
  PVMCopyCurrentCategoryAndMode(&cf, &v19);
  PVMCopyVolumeCategoryAndMode((const __CFString *)cf, v19, &value, 0);
  if (value)
    CFDictionarySetValue(v12, CFSTR("ActiveAudioCategory"), value);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    v19 = 0;
  }
  if (value)
    CFRelease(value);
  return v12;
}

void CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload(CFTypeRef cf)
{
  NSObject *v2;
  _QWORD v3[5];

  if (cf)
    CFRetain(cf);
  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload", (uint64_t)"CMSessionManager_NotificationUtilities.m", 259, 0, 0, v2, (uint64_t)v3);
}

void CMSMNotificationUtility_PostPauseCommandNotificationToMatchingNotStoppedClients(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsSameClientAndNotStopped, a1, (unint64_t)CMSUtilityApplier_PostNotification_PauseCommand, a1);
}

void CMSMNotificationUtility_PostPauseCommandToPlayingLockStoppers(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_BelongsToTheSameProcessAndIsPlayingAndStopsWhenBackgrounded, a1, (unint64_t)CMSUtilityApplier_PostNotification_PauseCommand, a1);
}

void CMSMNotificationUtility_PostStopCommandToActiveLockStoppers(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_BelongsToTheSameProcessAndIsActiveAndStopsWhenBackgrounded, a1, (unint64_t)CMSUtilityApplier_PostNotificationToLockStoppers_StopCommand, 0);
}

void CMSMNotificationUtility_PostStopCommandToActiveClientWithDisplayID(uint64_t a1, char a2)
{
  char v2;

  v2 = a2;
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, _QWORD, uint64_t))CMSUtilityPredicate_IsActiveWithDisplayID, a1, (unint64_t)CMSUtilityApplier_PostNotification_StopCommand, (uint64_t)&v2);
}

void CMSMNotificationUtility_PostCurrentOutputSampleRateDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, (uint64_t)CFSTR("CurrentOutputSampleRateDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostCurrentInputSampleRateDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, (uint64_t)CFSTR("CurrentInputSampleRateDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostCurrentOutputDeviceBufferSizeDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, (uint64_t)CFSTR("CurrentOutputDeviceBufferSizeDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostCurrentInputDeviceBufferSizeChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, (uint64_t)CFSTR("CurrentInputDeviceBufferSizeDidChange"), 0, 0);
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppPIDDidChange()
{
  uint64_t v0;

  v0 = -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID");
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("NowPlayingAppPIDDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v0), CFSTR("PID"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppDidChange()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("NowPlayingAppDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v2, v3), "nowPlayingAppDisplayID"), CFSTR("DisplayID"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(int a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("State"), 0);
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("NowPlayingAppIsPlayingDidChange"), v1, 0, v4, v5);
}

void CMSMNotificationUtility_PostNowPlayingAppStackDidChange()
{
  id v0;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (MX_FeatureFlags_IsNowPlayingAppStackEnabled())
  {
    v0 = -[MXNowPlayingAppManager copyTopOfNowPlayingAppStack](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "copyTopOfNowPlayingAppStack");
    if (v0)
    {
      v1 = (uint64_t)v0;
      if ((objc_msgSend((id)CMSMNotificationUtility_PostNowPlayingAppStackDidChange_sCachedTopOfNowPlayingStack, "isEqualToString:", v0) & 1) == 0)
      {
        if (dword_1EE2B3F38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }

        CMSMNotificationUtility_PostNowPlayingAppStackDidChange_sCachedTopOfNowPlayingStack = v1;
        +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("NowPlayingAppStackDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v1, CFSTR("TopOfStackDisplayID"), 0), 0);
      }
    }
    else
    {
      MXSimulateCrash((uint64_t)"Current top of NowPlaying app stack is nil, this should never happen!!! Please file a rad"
                               "ar to MediaExperience (New Bugs) | All");
    }
  }
}

uint64_t CMSMNotificationUtility_PostPreferredExternalRouteDidChange()
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("PreferredExternalRouteDidChange"), 0, 0);
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("SomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange_IsActive"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingOverAirPlayVideoDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeLongFormVideoClientIsPlayingOverAirPlayVideo"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("SomeLongFormVideoClientIsPlayingOverAirPlayVideo_IsPlaying"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeLongFormVideoClientIsPlayingDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("SomeLongFormVideoClientIsPlayingDidChange_IsPlaying"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostFullMuteDidChangeToVolumeButtonClientAndAVSystemControllers(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("UserFullMuteDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("FullMuted"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostCarPlayIsConnectedDidChange(int a1)
{
  _BOOL8 v1;

  v1 = a1 != 0;
  -[MXSessionManager setCarPlayIsConnected:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setCarPlayIsConnected:", v1);
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("CarPlayIsConnectedDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1), CFSTR("IsConnected"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostCarPlayAuxStreamSupportDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("CarPlayAuxStreamSupportDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("IsSupported"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostHeadphoneJackIsConnectedDidChange()
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("HeadphoneJackIsConnectedDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange()
{
  NSObject *v0;

  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SystemHasAudioInputDeviceDidChange"), 0, 0);
  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 894, 0, 0, v0, (uint64_t)&__block_literal_global_21);
}

uint64_t CMSMNotificationUtility_PostActiveInputRouteForPlayAndRecordNoBluetoothDidChange()
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("ActiveInputRouteForPlayAndRecordNoBluetoothDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange()
{
  NSObject *v0;

  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SystemHasAudioInputDeviceExcludingBluetoothDidChange"), 0, 0);
  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 910, 0, 0, v0, (uint64_t)&__block_literal_global_22_2);
}

uint64_t CMSMNotificationUtility_PostUplinkMuteDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("UplinkMuteDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("UplinkMute"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostCurrentRouteHasVolumeControlDidChange(int a1)
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("CurrentRouteHasVolumeControlDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1 != 0), CFSTR("HasVolumeControl"), 0), 0);
}

uint64_t CMSMNotificationUtility_PostExternalScreenDidChange()
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("ExternalScreenDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostVibeStopped(const void *a1)
{
  CFTypeID v2;
  const void *Value;
  void *v4;
  id v5;
  NSObject *v6;
  _QWORD v7[5];

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("VibeStopped_Context"));
      if (Value)
      {
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", Value, CFSTR("Context"), 0);
        +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SystemSoundVibrateDidFinish"), v4, 0);
        v5 = v4;
        v6 = MXGetNotificationSenderQueue();
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = __CMSMNotificationUtility_PostVibeStopped_block_invoke;
        v7[3] = &unk_1E3099900;
        v7[4] = v4;
        MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVibeStopped", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1010, 0, 0, v6, (uint64_t)v7);
      }
    }
  }
}

void CMSMNotificationUtility_PostForceSoundCheckDidChange(int a1, int a2)
{
  CFDictionaryRef BooleanPayload;
  CFNumberRef v3;
  BOOL v4;
  CFNumberRef v5;
  NSObject *v6;
  _QWORD v7[6];
  int valuePtr;

  valuePtr = a2;
  BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(CFSTR("ForceSoundCheck"), a1);
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (BooleanPayload)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = v3;
    v6 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CMSMNotificationUtility_PostForceSoundCheckDidChange_block_invoke;
    v7[3] = &__block_descriptor_48_e5_v8__0l;
    v7[4] = v5;
    v7[5] = BooleanPayload;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostForceSoundCheckDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1062, 0, 0, v6, (uint64_t)v7);
  }
}

void CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1197, 0, 0, v0, (uint64_t)&__block_literal_global_28_1);
}

void CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange()
{
  NSObject *v0;

  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("ActiveNeroVisualStreamInfoDidChange"), 0, 0);
  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1218, 0, 0, v0, (uint64_t)&__block_literal_global_29_3);
}

void CMSMNotificationUtility_PostAvailableVirtualFormatsDidChange()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostAvailableVirtualFormatsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1269, 0, 0, v0, (uint64_t)&__block_literal_global_30_1);
}

void CMSMNotificationUtility_PostInputDataSourcesDidChange()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostInputDataSourcesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1302, 0, 0, v0, (uint64_t)&__block_literal_global_31_0);
}

void CMSMNotificationUtility_PostOutputDataDestinationsDidChange()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostOutputDataDestinationsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1321, 0, 0, v0, (uint64_t)&__block_literal_global_32_1);
}

void CMSMNotificationUtility_PostInputGainScalarDidChange()
{
  NSObject *v0;

  v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostInputGainScalarDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1341, 0, 0, v0, (uint64_t)&__block_literal_global_33_3);
}

void CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange(CFTypeRef cf)
{
  NSObject *v2;
  _QWORD v3[5];

  if (cf)
    CFRetain(cf);
  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1364, 0, 0, v2, (uint64_t)v3);
}

void CMSMNotificationUtility_PostNumberOfInputChannelsDidChange(int a1)
{
  NSObject *v2;
  _QWORD v3[4];
  int v4;

  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostNumberOfInputChannelsDidChange_block_invoke;
  v3[3] = &__block_descriptor_36_e5_v8__0l;
  v4 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostNumberOfInputChannelsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1373, 0, 0, v2, (uint64_t)v3);
}

CFDictionaryRef CMSMNotificationUtility_CreateSInt32Payload(void *a1, int a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;
  CFIndex v9;
  void *v10;
  CFNumberRef v11;
  CFDictionaryRef v12;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v5 = v4;
  v6 = v4 != 0;
  v7 = a1 != 0;
  v9 = v7 & v6;
  v8 = !v7 || !v6;
  if (v7 && v6)
    v10 = a1;
  else
    v10 = 0;
  if (v8)
    v11 = 0;
  else
    v11 = v4;
  values = v11;
  keys[0] = v10;
  v12 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v5)
    CFRelease(v5);
  return v12;
}

void CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange(int a1)
{
  NSObject *v2;
  _QWORD v3[4];
  int v4;

  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange_block_invoke;
  v3[3] = &__block_descriptor_36_e5_v8__0l;
  v4 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1383, 0, 0, v2, (uint64_t)v3);
}

uint64_t CMSMNotificationUtility_PostSourceFormatInfoDidChange()
{
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SourceFormatInfoDidChange"), 0, 0);
}

void CMSMNotificationUtility_PostBadgeTypeDidChange(id val)
{
  NSObject *v2;
  _QWORD v3[5];
  id v4;
  id location;

  objc_initWeak(&location, val);
  v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostBadgeTypeDidChange_block_invoke;
  v3[3] = &unk_1E309F430;
  objc_copyWeak(&v4, &location);
  v3[4] = val;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostBadgeTypeDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1399, 0, 0, v2, (uint64_t)v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_193798ED4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(id val)
{
  NSObject *v1;
  _QWORD v2[4];
  id v3;
  id location;

  objc_initWeak(&location, val);
  v1 = MXGetNotificationSenderQueue();
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange_block_invoke;
  v2[3] = &unk_1E309EC60;
  objc_copyWeak(&v3, &location);
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1415, 0, 0, v1, (uint64_t)v2);
  objc_destroyWeak(&v3);
  objc_destroyWeak(&location);
}

void sub_193799050(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange(uint64_t result)
{
  if (CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange_sCachedValue != (_DWORD)result)
  {
    CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange_sCachedValue = result;
    return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SomeSharePlayCapableCallSessionIsActiveDidChange"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", result), CFSTR("IsActive"), 0), 0);
  }
  return result;
}

void CMSMNotificationUtility_PostIsRecordingMutedDidChange(void *a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[6];
  id v5;
  id location;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "isRecordingMuted")), CFSTR("Muted"));
  if (-[MXSessionManager appendContextToMuteNotification](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "appendContextToMuteNotification"))
  {
    objc_msgSend(v2, "setObject:forKey:", CFSTR("External"), CFSTR("Context"));
    -[MXSessionManager setAppendContextToMuteNotification:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setAppendContextToMuteNotification:", 0);
  }
  objc_initWeak(&location, a1);
  v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostIsRecordingMutedDidChange_block_invoke;
  v4[3] = &unk_1E309D2F0;
  objc_copyWeak(&v5, &location);
  v4[4] = a1;
  v4[5] = v2;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostIsRecordingMutedDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1453, 0, 0, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1937992F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostWombatEnabledDidChange(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", a1);
  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v1, CFSTR("Enabled"), 0);
  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("WombatEnabledDidChange"), v2, 0);

}

void CMSMNotificationUtility_PostSilentModeEnabledDidChange(uint64_t a1)
{
  char v1;
  void *v2;
  void *v3;
  NSObject *v4;
  _QWORD v5[4];
  char v6;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", a1);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v2, CFSTR("Enabled"), 0);
  +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", CFSTR("SilentModeEnabledDidChange"), v3, 0);
  v4 = MXGetNotificationSenderQueue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CMSMNotificationUtility_PostSilentModeEnabledDidChange_block_invoke;
  v5[3] = &__block_descriptor_33_e5_v8__0l;
  v6 = v1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSilentModeEnabledDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1531, 0, 0, v4, (uint64_t)v5);

}

void CMSM_IDSConnection_Initialize()
{
  NSObject *global_queue;

  qword_1EE2B3088 = FigReentrantMutexCreate();
  qword_1EE2B3080 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gIDSConnection = objc_alloc_init(CMSM_IDSConnection);
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"CMSM_IDSConnection_Initialize", (uint64_t)"CMSessionManager_IDSConnection.m", 87, 0, 0, global_queue, (uint64_t)&__block_literal_global_80);
}

uint64_t CMSM_IDSConnection_IsNearbyPairedDevicePresent()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  v1 = objc_msgSend(v0, "isNearby");

  return v1;
}

uint64_t CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  if (objc_msgSend(v0, "isNearby"))
    v1 = objc_msgSend(v0, "isConnected");
  else
    v1 = 0;

  return v1;
}

uint64_t CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(uint64_t result)
{
  byte_1EE2B3070 = result;
  return result;
}

uint64_t CMSM_IDSConnection_HandleNearbyDeviceStatusChange()
{
  void *v0;
  int v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  v1 = objc_msgSend(v0, "isNearby");

  CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected();
  if (dword_1EE2B3F38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
  {
    CMSM_IDSClient_QueryRemote_BTDeviceConnectionStatus();
    return CMSM_IDSClient_QueryRemote_PlayingInfo();
  }
  else
  {
    result = CMSM_IDSConnection_DeactivateIDSMXCoreSession(CFSTR("non-resumable.noNearbyPairedDevice"));
    byte_1EE2B3070 = 1;
  }
  return result;
}

uint64_t CMSM_IDSConnection_DeactivateIDSMXCoreSession(const __CFString *a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CMSMUtility_IsIDSSessionActive())
  {
    v2 = (void *)CMSM_IDSConnection_CopyMXCoreSession();
    v3 = CMSessionEndInterruption(v2, a1);
    v4 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CMSM_IDSConnection_DeactivateIDSMXCoreSession_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = v2;
    MXDispatchAsync((uint64_t)"CMSM_IDSConnection_DeactivateIDSMXCoreSession", (uint64_t)"CMSessionManager_IDSConnection.m", 211, 0, 0, v4, (uint64_t)v7);
    return v3;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

CFTypeRef CMSM_IDSConnection_CopyMXCoreSession()
{
  CFTypeRef result;

  if (CMSM_IDSConnection_CopyMXCoreSession_onceToken != -1)
    dispatch_once(&CMSM_IDSConnection_CopyMXCoreSession_onceToken, &__block_literal_global_7_1);
  result = (CFTypeRef)sIDSInfo;
  if (sIDSInfo)
    return CFRetain((CFTypeRef)sIDSInfo);
  return result;
}

uint64_t CMSM_IDSConnection_AddRemotePlayingInfo(const void *a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote;
  __CFArray *Mutable;
  uint64_t result;

  IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x1940352BC](qword_1EE2B3088);
  Mutable = (__CFArray *)qword_1EE2B3060;
  if (!qword_1EE2B3060)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    qword_1EE2B3060 = (uint64_t)Mutable;
  }
  CFArrayAppendValue(Mutable, a1);
  MEMORY[0x1940352C8](qword_1EE2B3088);
  result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != (_DWORD)result)
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  return result;
}

BOOL CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
{
  _BOOL8 v0;

  MEMORY[0x1940352BC](qword_1EE2B3088);
  v0 = byte_1EE2B304B && qword_1EE2B3060 && CFArrayGetCount((CFArrayRef)qword_1EE2B3060) > 0;
  MEMORY[0x1940352C8](qword_1EE2B3088);
  return v0;
}

uint64_t cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSMutableDictionary *obj;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  -[NSRecursiveLock lock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "lock");
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions");
  v17 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v17)
  {
    v15 = *(_QWORD *)v26;
    v16 = v0;
    do
    {
      v1 = 0;
      do
      {
        if (*(_QWORD *)v26 != v15)
          objc_enumerationMutation(obj);
        v19 = v1;
        v18 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v1);
        v2 = (void *)-[NSMutableDictionary objectForKey:](-[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), "objectForKey:", v18);
        v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v20 = v2;
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v4)
        {
          v5 = v4;
          v6 = *(_QWORD *)v22;
          do
          {
            for (i = 0; i != v5; ++i)
            {
              if (*(_QWORD *)v22 != v6)
                objc_enumerationMutation(v20);
              v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
              v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v8);
              v10 = (void *)objc_msgSend(v8, "objectForKey:", CFSTR("IsBTRoute"));
              if (objc_msgSend(v10, "isEqualToNumber:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1)))
              {
                objc_msgSend(v9, "removeObjectForKey:", CFSTR("OtherDevicesConnected"));
                if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
                {
                  v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  v12 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
                  if (v12)
                  {
                    objc_msgSend(v11, "addObject:", v12);
                    objc_msgSend(v9, "setObject:forKey:", v11, CFSTR("OtherDevicesConnected"));
                  }
                  if (CMSM_GetFakeSharedAudioRouteAsPicked())
                    objc_msgSend(v9, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1), CFSTR("IsCurrentlyPickedOnPairedDevice"));

                }
              }
              objc_msgSend(v3, "addObject:", v9);

            }
            v5 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          }
          while (v5);
        }
        v0 = v16;
        objc_msgSend(v16, "setObject:forKey:", v3, v18);

        v1 = v19 + 1;
      }
      while (v19 + 1 != v17);
      v17 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v17);
  }
  if ((objc_msgSend(v0, "isEqualToDictionary:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions")) & 1) != 0)
  {

    return -[NSRecursiveLock unlock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "unlock");
  }
  else
  {
    -[MXSessionManager setPickableRoutesDescriptions:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "setPickableRoutesDescriptions:", v0);

    -[NSRecursiveLock unlock](-[MXSessionManager propertiesLock](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "propertiesLock"), "unlock");
    return CMSMNotificationUtility_PostPickableRoutesDidChange(1);
  }
}

uint64_t CMSM_IDSConnection_RemoveRemotePlayingInfo(CFIndex a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote;
  uint64_t result;

  IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x1940352BC](qword_1EE2B3088);
  if (!qword_1EE2B3060 || !CFArrayGetCount((CFArrayRef)qword_1EE2B3060))
    JUMPOUT(0x1940352C8);
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1EE2B3060, a1);
  MEMORY[0x1940352C8](qword_1EE2B3088);
  result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != (_DWORD)result)
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  return result;
}

uint64_t CMSM_IDSConnection_ResetRemotePlayingInfo()
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote;
  uint64_t result;

  IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x1940352BC](qword_1EE2B3088);
  if (!qword_1EE2B3060 || !CFArrayGetCount((CFArrayRef)qword_1EE2B3060))
    JUMPOUT(0x1940352C8);
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1EE2B3060);
  MEMORY[0x1940352C8](qword_1EE2B3088);
  result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != (_DWORD)result)
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  return result;
}

uint64_t CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo()
{
  return byte_1EE2B3070;
}

void CMSM_IDSConnection_StartWaitForRemoteToReplyWithInitialPlayingInfoTimer(float a1)
{
  NSObject *v2;

  MEMORY[0x1940352BC](qword_1EE2B3088);
  if (qword_1EE2B3078)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EE2B3078);
    if (qword_1EE2B3078)
    {
      dispatch_release((dispatch_object_t)qword_1EE2B3078);
      qword_1EE2B3078 = 0;
    }
  }
  MEMORY[0x1940352C8](qword_1EE2B3088);
  MEMORY[0x1940352BC](qword_1EE2B3088);
  v2 = MXGetSerialQueue();
  qword_1EE2B3078 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, a1, (uint64_t)&__block_literal_global_11_0, 0, 0);
  JUMPOUT(0x1940352C8);
}

void CMSM_IDSConnection_RouteToSharedAudioRouteUponReceivingOwnership()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *Copy;
  const __CFArray *A2DPPort;
  __CFArray *ArrayFromPortID;
  __CFArray *Routable;
  __CFArray *Mutable;
  CFRange v6;
  CFRange v7;

  if (-[MXSessionManager carPlayIsConnected](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "carPlayIsConnected"))
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (qword_1EE2B3040)
    {
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)qword_1EE2B3040);
      A2DPPort = cmsmGetA2DPPort(Copy);
      if (Copy)
        CFRelease(Copy);
    }
    else
    {
      A2DPPort = cmsmGetA2DPPort(0);
    }
    if (cmsmShouldRequestOwnershipOnSharedAudioRoute(0, (uint64_t)A2DPPort)
      && !vaeRequestOwnershipOnBTPort((uint64_t)A2DPPort))
    {
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID((int)A2DPPort);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Routable && CFArrayGetCount(Routable) >= 1)
      {
        v6.length = CFArrayGetCount(Routable);
        v6.location = 0;
        CFArrayAppendArray(Mutable, Routable, v6);
      }
      if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
      {
        v7.length = CFArrayGetCount(ArrayFromPortID);
        v7.location = 0;
        CFArrayAppendArray(Mutable, ArrayFromPortID, v7);
      }
      if (!vaeDoesBTPortSupportInEarDetection((AudioObjectID)A2DPPort)
        || CMSMVAUtility_ShouldBTPortBeTreatedAsInEar((AudioObjectID)A2DPPort))
      {
        vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, (const void *)qword_1EE2B3CF0, 0);
      }
      if (Mutable)
        CFRelease(Mutable);
      if (Routable)
        CFRelease(Routable);
      if (ArrayFromPortID)
        CFRelease(ArrayFromPortID);
    }
  }
}

void CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer()
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer", (uint64_t)"CMSessionManager_IDSConnection.m", 381, 0, 0, global_queue, (uint64_t)&__block_literal_global_12_0);
}

uint64_t CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo()
{
  return byte_1EE2B304C;
}

void CMSM_IDSConnection_ResetWaitingForGizmoPlayingInfo()
{
  byte_1EE2B304C = 0;
}

id CMSM_IDSConnection_GetRemotePlayingInfo()
{
  id v0;
  id v1;

  MEMORY[0x1940352BC](qword_1EE2B3088);
  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  v1 = (id)objc_msgSend(v0, "initWithArray:copyItems:", qword_1EE2B3060, 1);
  MEMORY[0x1940352C8](qword_1EE2B3088);
  return v1;
}

uint64_t CMSM_IDSConnection_SetRemotePlayingInfo(const __CFArray *a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote;
  uint64_t result;

  IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x1940352BC](qword_1EE2B3088);
  if (qword_1EE2B3060)
  {
    CFRelease((CFTypeRef)qword_1EE2B3060);
    qword_1EE2B3060 = 0;
  }
  if (a1)
    qword_1EE2B3060 = (uint64_t)CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  MEMORY[0x1940352C8](qword_1EE2B3088);
  result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != (_DWORD)result)
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  return result;
}

uint64_t CMSM_IDSConnection_CopyNearbyPairedDevice()
{
  return objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
}

BOOL CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired()
{
  void *v0;
  int v1;
  uint64_t v2;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  v1 = objc_msgSend(v0, "isNearby");

  if (!v1)
    return 0;
  MEMORY[0x1940352BC](qword_1EE2B3088);
  v2 = qword_1EE2B3078;
  MEMORY[0x1940352C8](qword_1EE2B3088);
  return v2 == 0;
}

id CMSM_IDSConnection_CopyNearbyPairedDeviceInfo()
{
  void *v0;
  int v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v0 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
  v1 = objc_msgSend(v0, "isNearby");

  if (!v1)
    return 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDeviceUniqueID");
  if (v3)
    objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("ConnectedDevice_UniqueID"));

  v4 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDeviceName");
  if (v4)
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("ConnectedDevice_Name"));

  v5 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDeviceModelIdentifier");
  if (v5)
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("ConnectedDevice_ModelIdentifier"));

  v6 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDeviceProductName");
  if (v6)
    objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("ConnectedDevice_ProductName"));

  if (qword_1EE2B3050)
  {
    v7 = (void *)CFRetain((CFTypeRef)qword_1EE2B3050);
    if (v7)
      objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("ConnectedDevice_RouteUID"));
  }
  else
  {
    v7 = 0;
  }

  objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()), CFSTR("ConnectedDevice_Playing"));
  return v2;
}

void CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(const void *a1)
{
  const void *v1;

  v1 = (const void *)qword_1EE2B3050;
  qword_1EE2B3050 = (uint64_t)a1;
  if (a1)
    CFRetain(a1);
  if (v1)
    CFRelease(v1);
}

void CMSM_IDSConnection_UpdateSharedAudioRouteMacAddressOnLocal(const __CFString *a1, int a2)
{
  const __CFArray *v4;

  if (CMSMDeviceState_ItsAnAppleWatch())
  {
    if (!a1)
      goto LABEL_17;
    if (!qword_1EE2B3038)
      goto LABEL_17;
    if (!FigCFEqual())
      goto LABEL_17;
    v4 = (const __CFArray *)qword_1EE2B3040;
    if (!qword_1EE2B3040)
      goto LABEL_17;
  }
  else
  {
    if (a2 && qword_1EE2B3040)
    {
      CFArrayRemoveAllValues((CFMutableArrayRef)qword_1EE2B3040);
      if (byte_1EE2B304B)
      {
        byte_1EE2B304B = 0;
        cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
      }
      return;
    }
    if (!a1)
      goto LABEL_17;
    if (!qword_1EE2B3038)
      goto LABEL_17;
    if (!FigCFEqual())
      goto LABEL_17;
    v4 = (const __CFArray *)qword_1EE2B3040;
    if (!qword_1EE2B3040)
      goto LABEL_17;
  }
  if (!CFArrayGetCount(v4))
LABEL_17:
    cmsm_IDSConnection_updateSharedAudioRoutePortIDsOnLocal(a1);
}

void cmsm_IDSConnection_updateSharedAudioRoutePortIDsOnLocal(CFStringRef theString)
{
  uint64_t v1;
  __CFString *MutableCopy;
  __CFString *v3;
  OpaqueFigEndpoint *v4;
  OpaqueFigEndpoint *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  AudioObjectID valuePtr;
  CFNumberRef number;

  if (theString)
  {
    v1 = *MEMORY[0x1E0C9AE00];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
    if (MutableCopy)
    {
      v3 = MutableCopy;
      CFStringAppend(MutableCopy, CFSTR("-tacl"));
      v4 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v3, 1, *MEMORY[0x1E0CA3A80], 0);
      if (v4)
      {
        v5 = v4;
        number = 0;
        valuePtr = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v7 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (v7)
        {
          v7(CMBaseObject, CFSTR("VAE_PortID"), v1, &number);
          if (number)
          {
            CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
            if (!MXBluetoothServices_IsPortBTManaged(valuePtr, 1))
              CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(valuePtr, 1, 0);
            if (number)
              CFRelease(number);
          }
        }
        CFRelease(v5);
      }
      CFRelease(v3);
    }
  }
}

uint64_t CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(uint64_t result)
{
  if (byte_1EE2B304B != (_DWORD)result)
  {
    byte_1EE2B304B = result;
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

void CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *global_queue;
  _QWORD block[6];
  os_log_type_t type;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (CMSMDeviceState_ItsAnAppleWatch())
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v3 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    if (dword_1EE2B3F38)
    {
      v10 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
      CFRetain(a1);
    if (dword_1EE2B3F38)
    {
      v10 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    byte_1EE2B304C = 1;
    v6 = dispatch_time(0, 20000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = a1;
    block[5] = v3;
    dispatch_after(v6, global_queue, block);
  }
}

void CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(AudioObjectID a1, int a2, int a3)
{
  const __CFAllocator *v5;
  CFNumberRef v6;
  const __CFString *v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  int v11;
  BOOL v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  const __CFString *v16;
  int v17;
  _BOOL4 v18;
  const __CFNumber *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  const void *v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int PartnersForPort;
  uint64_t v28;
  _OWORD *v29;
  CFNumberRef v30;
  NSObject *v31;
  const __CFNumber *v32;
  int v33;
  CFTypeRef cf;
  AudioObjectID valuePtr;
  unsigned int v36;
  _OWORD outData[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v7 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
  cf = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v7, (CFStringRef *)&cf, 0);
  if (!qword_1EE2B3040)
    qword_1EE2B3040 = (uint64_t)CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  v8 = qword_1EE2B3038;
  if (!qword_1EE2B3038)
  {
    qword_1EE2B3038 = (uint64_t)cf;
    if (!cf)
    {
      v9 = 0;
      v10 = a2 != 0;
      goto LABEL_16;
    }
    CFRetain(cf);
    v8 = qword_1EE2B3038;
  }
  v9 = 0;
  v10 = a2 != 0;
  if (a2 && v8)
  {
    v11 = FigCFEqual();
    if (a3)
      v12 = v11 == 0;
    else
      v12 = 0;
    v9 = v12;
    v10 = 1;
  }
LABEL_16:
  v33 = v9;
  if (dword_1EE2B3F38)
  {
    v36 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v14 = v36;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if (v15)
    {
      v16 = CFSTR("NO");
      if (v33)
        v16 = CFSTR("YES");
      LODWORD(outData[0]) = 136315394;
      *(_QWORD *)((char *)outData + 4) = "CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs";
      WORD6(outData[0]) = 2114;
      *(_QWORD *)((char *)outData + 14) = v16;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigCFEqual())
  {
    if (FigCFArrayContainsValue() || !vaemIsPortPresentInConnectedOutputPorts((uint64_t)v6))
      goto LABEL_54;
    CFArrayAppendValue((CFMutableArrayRef)qword_1EE2B3040, v6);
    v17 = a3;
    if (!dword_1EE2B3F38)
      goto LABEL_52;
    v18 = v10;
    v19 = v6;
    v36 = 0;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v21 = v36;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if (!v22)
      goto LABEL_50;
    goto LABEL_45;
  }
  if (!a2
    && (!vaeDoesBTPortSupportInEarDetection(valuePtr)
     || !CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr))
    && vaeDoesBTPortSupportInEarDetection(valuePtr))
  {
    goto LABEL_70;
  }
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1EE2B3040);
  if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v6))
  {
    CFArrayAppendValue((CFMutableArrayRef)qword_1EE2B3040, v6);
    v23 = (const void *)qword_1EE2B3038;
    qword_1EE2B3038 = (uint64_t)cf;
    if (cf)
      CFRetain(cf);
    v18 = v10;
    if (v23)
      CFRelease(v23);
    v17 = a3;
    if (!dword_1EE2B3F38)
      goto LABEL_51;
    v19 = v6;
    v36 = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v25 = v36;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if (!v26)
    {
LABEL_50:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v19;
LABEL_51:
      v10 = v18;
LABEL_52:
      if (v17)
        cmsm_IDSConnection_UpdateSharedAudioRouteMacAddressOnRemote(v33);
      goto LABEL_54;
    }
LABEL_45:
    LODWORD(outData[0]) = 136315651;
    *(_QWORD *)((char *)outData + 4) = "CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs";
    WORD6(outData[0]) = 1024;
    *(_DWORD *)((char *)outData + 14) = valuePtr;
    WORD1(outData[1]) = 2113;
    *(_QWORD *)((char *)&outData[1] + 4) = cf;
    _os_log_send_and_compose_impl();
    goto LABEL_50;
  }
LABEL_54:
  if (v10 && qword_1EE2B3040 && CFArrayGetCount((CFArrayRef)qword_1EE2B3040) >= 1)
  {
    v32 = v6;
    memset(outData, 0, sizeof(outData));
    PartnersForPort = vaeGetPartnersForPort(valuePtr, outData);
    if (PartnersForPort)
    {
      v28 = PartnersForPort;
      v29 = outData;
      while (1)
      {
        v30 = CFNumberCreate(v5, kCFNumberSInt32Type, v29);
        if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v30))
        {
          if (!FigCFArrayContainsValue())
            break;
        }
        if (v30)
          goto LABEL_62;
LABEL_63:
        v29 = (_OWORD *)((char *)v29 + 4);
        if (!--v28)
          goto LABEL_69;
      }
      if (dword_1EE2B3F38)
      {
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayAppendValue((CFMutableArrayRef)qword_1EE2B3040, v30);
      if (!v30)
        goto LABEL_63;
LABEL_62:
      CFRelease(v30);
      goto LABEL_63;
    }
LABEL_69:
    v6 = v32;
  }
LABEL_70:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
}

uint64_t cmsm_IDSConnection_UpdateSharedAudioRouteMacAddressOnRemote(int a1)
{
  _BOOL4 IsSomeClientPlayingOverSharedAudioRouteOnRemote;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t result;
  NSObject *v6;
  void *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;

  IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (a1 && IsSomeClientPlayingOverSharedAudioRouteOnRemote)
  {
    if (dword_1EE2B3F38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (qword_1EE2B3040 && CFArrayGetCount((CFArrayRef)qword_1EE2B3040) == 3)
      CFArrayRemoveAllValues((CFMutableArrayRef)qword_1EE2B3040);
    result = CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress(0);
LABEL_19:
    if (byte_1EE2B304B)
    {
      byte_1EE2B304B = 0;
      return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
    }
    return result;
  }
  if (dword_1EE2B3F38)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress((const void *)qword_1EE2B3038);
  result = CMSMDeviceState_ItsAnAppleWatch();
  if ((_DWORD)result)
  {
    if (dword_1EE2B3F38)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v7 = (void *)objc_msgSend((id)gIDSConnection, "copyNearbyPairedDevice");
    v8 = objc_msgSend(v7, "isNearby");

    if (v8 && (MEMORY[0x1940352BC](qword_1EE2B3088), v9 = qword_1EE2B3078, MEMORY[0x1940352C8](qword_1EE2B3088), !v9)
      || (result = CMSM_IDSConnection_IsPairedToAnotherDevice(), !(_DWORD)result))
    {
      if (dword_1EE2B3F38)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
      if (!(_DWORD)result || byte_1EE2B3C98)
      {
        if (dword_1EE2B3F38)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_19;
      }
    }
  }
  return result;
}

void CMSM_IDSConnection_RemovePortFromSharedAudioRoutePortIDs(int a1)
{
  CFIndex v2;
  const __CFNumber *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (qword_1EE2B3040)
  {
    if (CFArrayGetCount((CFArrayRef)qword_1EE2B3040) >= 1)
    {
      v2 = 0;
      while (1)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1EE2B3040, v2);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == a1)
          break;
        if (++v2 >= CFArrayGetCount((CFArrayRef)qword_1EE2B3040))
          goto LABEL_10;
      }
      if (dword_1EE2B3F38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1EE2B3040, v2);
    }
LABEL_10:
    if (!qword_1EE2B3040 || !CFArrayGetCount((CFArrayRef)qword_1EE2B3040))
    {
      if (qword_1EE2B3038)
      {
        CFRelease((CFTypeRef)qword_1EE2B3038);
        qword_1EE2B3038 = 0;
      }
    }
  }
}

uint64_t CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(uint64_t result)
{
  if (byte_1EE2B3048 != (_DWORD)result)
  {
    byte_1EE2B3048 = result;
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToRemote(uint64_t result)
{
  if (byte_1EE2B3049 != (_DWORD)result)
  {
    byte_1EE2B3049 = result;
    if (!(_DWORD)result)
      CMSM_IDSConnection_DeactivateIDSMXCoreSession(CFSTR("non-resumable.sharedAudioRouteIsNotConnectedToRemote"));
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(uint64_t result)
{
  byte_1EE2B304A = result;
  return result;
}

uint64_t CMSM_IDSConnection_IsRemoteUsingSharedAudioRoute()
{
  return byte_1EE2B304B;
}

uint64_t CMSM_IDSConnection_GetMessagingQueue()
{
  if (CMSM_IDSConnection_GetMessagingQueue_once != -1)
    dispatch_once(&CMSM_IDSConnection_GetMessagingQueue_once, &__block_literal_global_23_1);
  return CMSM_IDSConnection_GetMessagingQueue_messagingQueue;
}

void CMSM_IDSConnection_SetMessageWaitSemaphore(const void *a1)
{
  __CFDictionary *Mutable;
  dispatch_semaphore_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = dispatch_semaphore_create(0);
  CFDictionarySetValue(Mutable, CFSTR("lock"), v3);
  if (a1 && Mutable)
  {
    MEMORY[0x1940352BC](qword_1EE2B3088);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EE2B3080, a1, Mutable);
    MEMORY[0x1940352C8](qword_1EE2B3088);
LABEL_5:
    CFRelease(Mutable);
    goto LABEL_6;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (Mutable)
    goto LABEL_5;
LABEL_6:
  dispatch_release(v3);
}

void CMSM_IDSConnection_WaitForReply(const void *a1)
{
  const __CFDictionary *v2;
  NSObject *Value;
  dispatch_time_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  v2 = (const __CFDictionary *)cmsm_IDSConnection_CopyOutstandingMessage(a1);
  Value = CFDictionaryGetValue(v2, CFSTR("lock"));
  v4 = dispatch_time(0, 6000000000);
  if (dispatch_semaphore_wait(Value, v4))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    MEMORY[0x1940352BC](qword_1EE2B3088);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EE2B3080, a1);
    MEMORY[0x1940352C8](qword_1EE2B3088);
    if (!v2)
      return;
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v2)
      return;
  }
  CFRelease(v2);
}

CFTypeRef cmsm_IDSConnection_CopyOutstandingMessage(const void *a1)
{
  const void *Value;
  CFTypeRef v3;

  MEMORY[0x1940352BC](qword_1EE2B3088);
  Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2B3080, a1);
  if (Value)
    v3 = CFRetain(Value);
  else
    v3 = 0;
  MEMORY[0x1940352C8](qword_1EE2B3088);
  return v3;
}

void CMSM_IDSConnection_SetMessageReplyComplete(const void *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  NSObject *Value;

  v1 = (const __CFDictionary *)cmsm_IDSConnection_CopyOutstandingMessage(a1);
  if (v1)
  {
    v2 = v1;
    Value = CFDictionaryGetValue(v1, CFSTR("lock"));
    dispatch_semaphore_signal(Value);
    CFRelease(v2);
  }
}

uint64_t CMSM_IDSConnection_IsPairedToAnotherDevice()
{
  void *v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__18;
  v7 = __Block_byref_object_dispose__18;
  v0 = (void *)getNRPairedDeviceRegistryClass_softClass;
  v8 = getNRPairedDeviceRegistryClass_softClass;
  if (!getNRPairedDeviceRegistryClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getNRPairedDeviceRegistryClass_block_invoke;
    v2[3] = &unk_1E3099018;
    v2[4] = &v3;
    __getNRPairedDeviceRegistryClass_block_invoke((uint64_t)v2);
    v0 = (void *)v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return objc_msgSend((id)objc_msgSend(v0, "sharedInstance"), "isPaired");
}

void sub_19379CD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!NanoRegistryLibraryCore_frameworkLibrary)
  {
    NanoRegistryLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!NanoRegistryLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getNRPairedDeviceRegistryClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    goto LABEL_6;
  getNRPairedDeviceRegistryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __getBMDeviceSilentModeClass_block_invoke_cold_1()
{
  abort_report_np();
  return __getPAAccessLoggerClass_block_invoke_cold_1();
}

uint64_t __getPAAccessLoggerClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getPAApplicationClass_block_invoke_cold_1(v0);
}

uint64_t __getPAApplicationClass_block_invoke_cold_1()
{
  abort_report_np();
  return __getPATCCAccessClass_block_invoke_cold_1();
}

uint64_t __getPATCCAccessClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getCoreTelephonyClientClass_block_invoke_cold_1(v0);
}

uint64_t __getCoreTelephonyClientClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getCTBundleClass_block_invoke_cold_1(v0);
}

uint64_t __getCTBundleClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1()
{
  abort_report_np();
  return __getSTAttributedEntityClass_block_invoke_cold_1();
}

uint64_t __getSTAttributedEntityClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getSTExecutableIdentityClass_block_invoke_cold_1(v0);
}

uint64_t __getSTExecutableIdentityClass_block_invoke_cold_1()
{
  abort_report_np();
  return __getSTActivityAttributionClass_block_invoke_cold_1();
}

uint64_t __getSTActivityAttributionClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getGEOCountryConfigurationClass_block_invoke_cold_1(v0);
}

uint64_t __getGEOCountryConfigurationClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return -[MXDebugPlatform simulateCrash:].cold.1(v0);
}

void __getAPSubjectClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  __getAPApplicationClass_block_invoke_cold_1(v0);
}

void __getAPApplicationClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  __getAAAudioSessionControlClass_block_invoke_cold_1(v0);
}

void __getAAAudioSessionControlClass_block_invoke_cold_1()
{
  abort_report_np();
  __getNRPairedDeviceRegistryClass_block_invoke_cold_1();
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1()
{
  abort_report_np();
  AddACQEventWithDispatchID();
}

uint64_t AddACQEventWithDispatchID()
{
  return MEMORY[0x1E0CFF370]();
}

OSStatus AudioDeviceStart(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return MEMORY[0x1E0C97590](*(_QWORD *)&inDevice, inProcID);
}

OSStatus AudioDeviceStop(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return MEMORY[0x1E0C975A0](*(_QWORD *)&inDevice, inProcID);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x1E0C975C0](*(_QWORD *)&inObjectID, inAddress, inListener, inClientData);
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1E0C975D0](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

OSStatus AudioObjectGetPropertyDataSize(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *outDataSize)
{
  return MEMORY[0x1E0C975D8](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, outDataSize);
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return MEMORY[0x1E0C975E0](*(_QWORD *)&inObjectID, inAddress);
}

OSStatus AudioObjectIsPropertySettable(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, Boolean *outIsSettable)
{
  return MEMORY[0x1E0C975E8](*(_QWORD *)&inObjectID, inAddress, outIsSettable);
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x1E0C975F0](*(_QWORD *)&inObjectID, inAddress, inListener, inClientData);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1E0C98230]();
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, componentDesc);
  v3 = va_arg(va, _QWORD);
  return MEMORY[0x1E0C98248](calendar, v3, at);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C985F8](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1E0C98938](allocator, locale, style);
}

CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr)
{
  return (CFStringRef)MEMORY[0x1E0C98950](allocator, formatter, numberType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98A58](keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A88](keysToSet, keysToRemove, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1E0C98F20](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

uint64_t CMBaseClassGetCFTypeID()
{
  return MEMORY[0x1E0C9EAF8]();
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1E0C9EB00]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1E0C9EB28]();
}

uint64_t CMBaseObjectIsMemberOfClass()
{
  return MEMORY[0x1E0C9EB38]();
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1E0C9EEB8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1E0C9EED0]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1E0C9EEE8]();
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x1E0C9F2E0](retstr, time, *(_QWORD *)&newTimescale, *(_QWORD *)&method);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiply(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F380](retstr, time, *(_QWORD *)&multiplier);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

uint64_t CelestialCFCreatePropertyListForModelAndBundleIdentifier()
{
  return MEMORY[0x1E0C9F5A0]();
}

uint64_t CelestialGetModelSpecificName()
{
  return MEMORY[0x1E0C9F5B0]();
}

uint64_t CreateACQDispatchID()
{
  return MEMORY[0x1E0CFF628]();
}

uint64_t FigAtomicCompareAndSwap32()
{
  return MEMORY[0x1E0C9F7B0]();
}

uint64_t FigAtomicIncrement32()
{
  return MEMORY[0x1E0C9F7C8]();
}

uint64_t FigAtomicIncrement64()
{
  return MEMORY[0x1E0C9F7D0]();
}

uint64_t FigBaseClassRegisterClass()
{
  return MEMORY[0x1E0C9F868]();
}

uint64_t FigCFArrayAppendArray()
{
  return MEMORY[0x1E0C9F9F0]();
}

uint64_t FigCFArrayAppendInt32()
{
  return MEMORY[0x1E0C9FA20]();
}

uint64_t FigCFArrayContainsValue()
{
  return MEMORY[0x1E0C9FA58]();
}

uint64_t FigCFArrayCreateMutableCopy()
{
  return MEMORY[0x1E0C9FA80]();
}

uint64_t FigCFArrayGetInt64AtIndex()
{
  return MEMORY[0x1E0C9FAE8]();
}

uint64_t FigCFArrayGetValueAtIndex()
{
  return MEMORY[0x1E0C9FB00]();
}

uint64_t FigCFDictionaryCopyArrayOfKeys()
{
  return MEMORY[0x1E0C9FB60]();
}

uint64_t FigCFDictionaryCopyArrayOfValues()
{
  return MEMORY[0x1E0C9FB68]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1E0C9FB80]();
}

uint64_t FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks()
{
  return MEMORY[0x1E0C9FB88]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1E0C9FB98]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1E0C9FBD8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1E0C9FBF0]();
}

uint64_t FigCFDictionaryGetFloatIfPresent()
{
  return MEMORY[0x1E0C9FC00]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCFDictionaryGetInt64IfPresent()
{
  return MEMORY[0x1E0C9FC18]();
}

uint64_t FigCFDictionaryGetIntIfPresent()
{
  return MEMORY[0x1E0C9FC20]();
}

uint64_t FigCFDictionaryGetValue()
{
  return MEMORY[0x1E0C9FC48]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1E0C9FCB0]();
}

uint64_t FigCFDictionarySetFloat()
{
  return MEMORY[0x1E0C9FCB8]();
}

uint64_t FigCFDictionarySetFloat32()
{
  return MEMORY[0x1E0C9FCC0]();
}

uint64_t FigCFDictionarySetInt()
{
  return MEMORY[0x1E0C9FCC8]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1E0C9FCD8]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1E0C9FD00]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1E0C9FD08]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1E0C9FD10]();
}

uint64_t FigCFNumberCreateFloat32()
{
  return MEMORY[0x1E0C9FD30]();
}

uint64_t FigCFNumberCreateFloat64()
{
  return MEMORY[0x1E0C9FD38]();
}

uint64_t FigCFNumberCreateSInt32()
{
  return MEMORY[0x1E0C9FD48]();
}

uint64_t FigCFNumberCreateSInt64()
{
  return MEMORY[0x1E0C9FD50]();
}

uint64_t FigCFNumberCreateUInt32()
{
  return MEMORY[0x1E0C9FD68]();
}

uint64_t FigCFNumberCreateUInt64()
{
  return MEMORY[0x1E0C9FD70]();
}

uint64_t FigCFNumberGetFloat32()
{
  return MEMORY[0x1E0C9FD80]();
}

uint64_t FigCFNumberGetSInt32()
{
  return MEMORY[0x1E0C9FD90]();
}

uint64_t FigCFNumberGetSInt64()
{
  return MEMORY[0x1E0C9FD98]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1E0C9FDB0]();
}

uint64_t FigCFStringFind()
{
  return MEMORY[0x1E0C9FE30]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1E0C9FE38]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1E0C9FEB8]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1E0C9FEC0]();
}

uint64_t FigCFWeakReferenceHolderGetTypeID()
{
  return MEMORY[0x1E0C9FEC8]();
}

uint64_t FigCommonMediaProcessInitialization()
{
  return MEMORY[0x1E0CA0148]();
}

uint64_t FigDebugIsInternalBuild()
{
  return MEMORY[0x1E0CA04F0]();
}

uint64_t FigDispatchAsyncAndWait()
{
  return MEMORY[0x1E0CA0580]();
}

uint64_t FigDispatchCreateDispatchSourceBlock()
{
  return MEMORY[0x1E0CA0598]();
}

uint64_t FigEndpointActivate()
{
  return MEMORY[0x1E0CA0600]();
}

uint64_t FigEndpointAggregateGetClassID()
{
  return MEMORY[0x1E0CA0610]();
}

uint64_t FigEndpointAggregateGetFigEndpoint()
{
  return MEMORY[0x1E0CA0618]();
}

uint64_t FigEndpointCopyFirstStreamOfType()
{
  return MEMORY[0x1E0CA0658]();
}

uint64_t FigEndpointCopyStreamsForTypeAndSubType()
{
  return MEMORY[0x1E0CA0660]();
}

uint64_t FigEndpointDeactivate()
{
  return MEMORY[0x1E0CA0668]();
}

uint64_t FigEndpointExtendedGetClassID()
{
  return MEMORY[0x1E0CA0670]();
}

uint64_t FigEndpointGetCMBaseObject()
{
  return MEMORY[0x1E0CA0680]();
}

uint64_t FigEndpointGetClassID()
{
  return MEMORY[0x1E0CA0688]();
}

uint64_t FigEndpointGetSupportedFeatures()
{
  return MEMORY[0x1E0CA0690]();
}

uint64_t FigEndpointGetTypeID()
{
  return MEMORY[0x1E0CA0698]();
}

uint64_t FigEndpointManagerCopyMatchingEndpoints()
{
  return MEMORY[0x1E0CA06A0]();
}

uint64_t FigEndpointManagerGetCMBaseObject()
{
  return MEMORY[0x1E0CA06A8]();
}

uint64_t FigEndpointManagerGetClassID()
{
  return MEMORY[0x1E0CA06B0]();
}

uint64_t FigEndpointRPCCacheApplyObjectDeltas()
{
  return MEMORY[0x1E0CA06F8]();
}

uint64_t FigEndpointRPCCacheComputeCacheDeltas()
{
  return MEMORY[0x1E0CA0700]();
}

uint64_t FigEndpointRPCCacheCopyAvailableObjects()
{
  return MEMORY[0x1E0CA0708]();
}

uint64_t FigEndpointRPCCacheCreate()
{
  return MEMORY[0x1E0CA0710]();
}

uint64_t FigEndpointRPCCacheDispose()
{
  return MEMORY[0x1E0CA0718]();
}

uint64_t FigEndpointServerSetActiveEndpoint()
{
  return MEMORY[0x1E0CA0740]();
}

uint64_t FigEndpointStartServerEx()
{
  return MEMORY[0x1E0CA0750]();
}

uint64_t FigEndpointStreamGetCMBaseObject()
{
  return MEMORY[0x1E0CA0788]();
}

uint64_t FigEndpointStreamResume()
{
  return MEMORY[0x1E0CA0798]();
}

uint64_t FigEndpointStreamSuspend()
{
  return MEMORY[0x1E0CA07B0]();
}

uint64_t FigEndpointUtility_CopyEndpointTransportType()
{
  return MEMORY[0x1E0CA07D8]();
}

uint64_t FigEndpointUtility_CopyEndpointType()
{
  return MEMORY[0x1E0CA07E0]();
}

uint64_t FigEndpointUtility_EndpointPredicate_ContainsID()
{
  return MEMORY[0x1E0CA07E8]();
}

uint64_t FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID()
{
  return MEMORY[0x1E0CA07F0]();
}

uint64_t FigEndpointUtility_EndpointPredicate_IsPropertyTrue()
{
  return MEMORY[0x1E0CA07F8]();
}

uint64_t FigEndpointUtility_IsEndpointThirdPartyTVFamily()
{
  return MEMORY[0x1E0CA0800]();
}

uint64_t FigEndpointUtility_SetPropertyOnEndpointStreams()
{
  return MEMORY[0x1E0CA0808]();
}

uint64_t FigEndpointXPCRemoteGetObjectID()
{
  return MEMORY[0x1E0CA0810]();
}

uint64_t FigEndpointXPCRemotePing()
{
  return MEMORY[0x1E0CA0818]();
}

uint64_t FigEndpointXPCRemoteRetainCopiedEndpointFromReply()
{
  return MEMORY[0x1E0CA0820]();
}

uint64_t FigEndpointXPCRemoteRetainCopiedEndpointsFromArrayToCFArray()
{
  return MEMORY[0x1E0CA0828]();
}

uint64_t FigEndpointXPCServerAppendNeighborEndpointToArray()
{
  return MEMORY[0x1E0CA0830]();
}

uint64_t FigEndpointXPCServerWriteNeighborEndpointToReply()
{
  return MEMORY[0x1E0CA0838]();
}

uint64_t FigGetCFPreferenceBooleanWithDefault()
{
  return MEMORY[0x1E0CA0A58]();
}

uint64_t FigGetCFPreferenceDoubleWithDefault()
{
  return MEMORY[0x1E0CA0A60]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigGetUpTime()
{
  return MEMORY[0x1E0CA0AE0]();
}

uint64_t FigGetUpTimeNanoseconds()
{
  return MEMORY[0x1E0CA0AE8]();
}

uint64_t FigIsAirplaydEnabled()
{
  return MEMORY[0x1E0CA0D48]();
}

uint64_t FigMobileAsset_RegisterForAssetUpdates()
{
  return MEMORY[0x1E0CA0EE8]();
}

uint64_t FigMobileAsset_UpdateCatalogIfTimeIntervalElapsed()
{
  return MEMORY[0x1E0CA0EF0]();
}

uint64_t FigNanosecondsToHostTime()
{
  return MEMORY[0x1E0CA0EF8]();
}

uint64_t FigNote_AllowInternalDefaultLogs()
{
  return MEMORY[0x1E0CA0F80]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1E0CA0FC0]();
}

uint64_t FigNotificationCenterAddWeakListeners()
{
  return MEMORY[0x1E0CA0FC8]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1E0CA0FD8]();
}

uint64_t FigNotificationCenterRemoveWeakListeners()
{
  return MEMORY[0x1E0CA0FE8]();
}

uint64_t FigOSTransactionCreate()
{
  return MEMORY[0x1E0CA1028]();
}

uint64_t FigReentrantMutexCreate()
{
  return MEMORY[0x1E0CA11D0]();
}

uint64_t FigReentrantMutexDestroy()
{
  return MEMORY[0x1E0CA11D8]();
}

uint64_t FigReentrantMutexLock()
{
  return MEMORY[0x1E0CA11E0]();
}

uint64_t FigReentrantMutexUnlock()
{
  return MEMORY[0x1E0CA11F0]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1E0CA1550]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1E0CA1570]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1E0CA1578]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1E0CA1580]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1E0CA1590]();
}

uint64_t FigUInt32NearestPowerOfTwo()
{
  return MEMORY[0x1E0CA19D8]();
}

uint64_t FigUSleep()
{
  return MEMORY[0x1E0CA19E0]();
}

uint64_t FigWatchdogMonitorDispatchQueue()
{
  return MEMORY[0x1E0CA1AB0]();
}

uint64_t FigXPCConnectionHasEntitlement()
{
  return MEMORY[0x1E0CA1B10]();
}

uint64_t FigXPCCreateBasicMessage()
{
  return MEMORY[0x1E0CA1B58]();
}

uint64_t FigXPCEndpointServerRetainEndpointForID()
{
  return MEMORY[0x1E0CA1B60]();
}

uint64_t FigXPCHandleStdCopyPropertyMessage()
{
  return MEMORY[0x1E0CA1B78]();
}

uint64_t FigXPCHandleStdSetPropertyMessage()
{
  return MEMORY[0x1E0CA1B80]();
}

uint64_t FigXPCMessageCopyCFArray()
{
  return MEMORY[0x1E0CA1BB0]();
}

uint64_t FigXPCMessageCopyCFBoolean()
{
  return MEMORY[0x1E0CA1BB8]();
}

uint64_t FigXPCMessageCopyCFData()
{
  return MEMORY[0x1E0CA1BC0]();
}

uint64_t FigXPCMessageCopyCFDate()
{
  return MEMORY[0x1E0CA1BC8]();
}

uint64_t FigXPCMessageCopyCFDictionary()
{
  return MEMORY[0x1E0CA1BD0]();
}

uint64_t FigXPCMessageCopyCFNumber()
{
  return MEMORY[0x1E0CA1BE0]();
}

uint64_t FigXPCMessageCopyCFObject()
{
  return MEMORY[0x1E0CA1BE8]();
}

uint64_t FigXPCMessageCopyCFString()
{
  return MEMORY[0x1E0CA1BF0]();
}

uint64_t FigXPCMessageGetOpCode()
{
  return MEMORY[0x1E0CA1C98]();
}

uint64_t FigXPCMessageSetCFArray()
{
  return MEMORY[0x1E0CA1CC0]();
}

uint64_t FigXPCMessageSetCFBoolean()
{
  return MEMORY[0x1E0CA1CC8]();
}

uint64_t FigXPCMessageSetCFData()
{
  return MEMORY[0x1E0CA1CD0]();
}

uint64_t FigXPCMessageSetCFDate()
{
  return MEMORY[0x1E0CA1CD8]();
}

uint64_t FigXPCMessageSetCFDictionary()
{
  return MEMORY[0x1E0CA1CE0]();
}

uint64_t FigXPCMessageSetCFNumber()
{
  return MEMORY[0x1E0CA1CF0]();
}

uint64_t FigXPCMessageSetCFObject()
{
  return MEMORY[0x1E0CA1CF8]();
}

uint64_t FigXPCMessageSetCFString()
{
  return MEMORY[0x1E0CA1D00]();
}

uint64_t FigXPCRelease()
{
  return MEMORY[0x1E0CA1D80]();
}

uint64_t FigXPCRemoteClientAssociateObject()
{
  return MEMORY[0x1E0CA1D88]();
}

uint64_t FigXPCRemoteClientCreate()
{
  return MEMORY[0x1E0CA1DA8]();
}

uint64_t FigXPCRemoteClientDisassociateObject()
{
  return MEMORY[0x1E0CA1DC0]();
}

uint64_t FigXPCRemoteClientKillServerOnTimeout()
{
  return MEMORY[0x1E0CA1DD8]();
}

uint64_t FigXPCRemoteClientRetainCopiedObject()
{
  return MEMORY[0x1E0CA1DE8]();
}

uint64_t FigXPCRemoteClientSendAsyncMessage()
{
  return MEMORY[0x1E0CA1DF0]();
}

uint64_t FigXPCRemoteClientSendSyncMessage()
{
  return MEMORY[0x1E0CA1DF8]();
}

uint64_t FigXPCRemoteClientSendSyncMessageCreatingReply()
{
  return MEMORY[0x1E0CA1E00]();
}

uint64_t FigXPCRetain()
{
  return MEMORY[0x1E0CA1E10]();
}

uint64_t FigXPCSendStdCopyPropertyMessage()
{
  return MEMORY[0x1E0CA1E18]();
}

uint64_t FigXPCSendStdSetPropertyMessage()
{
  return MEMORY[0x1E0CA1E20]();
}

uint64_t FigXPCServerAssociateCopiedObjectWithConnection()
{
  return MEMORY[0x1E0CA1E30]();
}

uint64_t FigXPCServerAssociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E48]();
}

uint64_t FigXPCServerDisassociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E88]();
}

uint64_t FigXPCServerLookupAndRetainAssociatedObject()
{
  return MEMORY[0x1E0CA1EA8]();
}

uint64_t FigXPCServerRetainNeighborObjectFromID()
{
  return MEMORY[0x1E0CA1EB8]();
}

uint64_t FigXPCServerStart()
{
  return MEMORY[0x1E0CA1ED0]();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x1E0CBB078]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1E0CBB1E8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1E0CBB1F8]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1E0CBB220]();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return MEMORY[0x1E0CBB250]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1E0CBB268]();
}

uint64_t IOHIDServiceClientCopyEvent()
{
  return MEMORY[0x1E0CBB498]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1E0CBB698](*(_QWORD *)&mainPort);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB6B8](notify, queue);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB708](AssertionType, *(_QWORD *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties)
{
  return MEMORY[0x1E0CBB9A8](*(_QWORD *)&entry, properties);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1E0CBB9C0](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA08](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE28]();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

CFTypeID SecTaskGetTypeID(void)
{
  return MEMORY[0x1E0CD6640]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1E0C9A260]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _FigIsNotCurrentDispatchQueue()
{
  return MEMORY[0x1E0CA1F48]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void operator delete(void *__p)
{
  off_1E3094960(__p);
}

uint64_t operator delete()
{
  return off_1E3094968();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E3094970(__sz);
}

uint64_t operator new()
{
  return off_1E3094978();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1E0C81068]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1E0C813C0]();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F0](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F8](atoken);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1E0DDFE88]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_barrier_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C30](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

uint64_t dispatch_source_set_mandatory_cancel_handler()
{
  return MEMORY[0x1E0C82F68]();
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t exclaves_sensor_create()
{
  return MEMORY[0x1E0C83240]();
}

uint64_t exclaves_sensor_start()
{
  return MEMORY[0x1E0C83248]();
}

uint64_t exclaves_sensor_status()
{
  return MEMORY[0x1E0C83250]();
}

uint64_t exclaves_sensor_stop()
{
  return MEMORY[0x1E0C83258]();
}

uint64_t fig_log_call_emit_and_clean_up_after_send_and_compose()
{
  return MEMORY[0x1E0CA1F60]();
}

uint64_t fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type()
{
  return MEMORY[0x1E0CA1F68]();
}

uint64_t fig_note_initialize_category_with_default_work()
{
  return MEMORY[0x1E0CA1F80]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1E0DDFEA8]();
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

uint64_t wd_endpoint_add_queue()
{
  return MEMORY[0x1E0DC8A30]();
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1E0C85E78](xarray, index);
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
  MEMORY[0x1E0C85ED8](xarray, index, value);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

const char *__cdecl xpc_connection_get_name(xpc_connection_t connection)
{
  return (const char *)MEMORY[0x1E0C86000](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  double result;

  MEMORY[0x1E0C86298](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1E0C866E0]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

