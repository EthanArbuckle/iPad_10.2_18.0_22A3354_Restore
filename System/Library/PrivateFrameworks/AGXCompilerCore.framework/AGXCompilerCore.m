void MTLCompilerReleaseReply(uint64_t a1)
{
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void _agcGroupWithHeader(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t i;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  void *v18[2];
  char v19;
  std::string v20;
  void *v21[2];
  char v22;
  void *__p;
  std::string::size_type v24;
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  _agcIndentedLine((void **)&v27.__r_.__value_.__l.__data_, (std::string::value_type *)&v26, 0);
  std::string::basic_string[abi:nn180100]<0>(v21, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v21, 0);
  if ((v25 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v25 & 0x80u) == 0)
    v8 = v25;
  else
    v8 = v24;
  v9 = std::string::append(&v27, p_p, v8);
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (!a4)
      goto LABEL_41;
    goto LABEL_20;
  }
  if (a4)
  {
LABEL_20:
    for (i = 24 * a4; i; i -= 24)
    {
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v27 = *(std::string *)a3;
      v12 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      else
        v20 = v27;
      _agcIndentedLine(&__p, (std::string::value_type *)&v20, 1);
      if ((v25 & 0x80u) == 0)
        v13 = (const std::string::value_type *)&__p;
      else
        v13 = (const std::string::value_type *)__p;
      if ((v25 & 0x80u) == 0)
        v14 = v25;
      else
        v14 = v24;
      std::string::append(&v28, v13, v14);
      if ((char)v25 < 0)
        operator delete(__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if (v12 < 0)
LABEL_40:
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      else if (v12 < 0)
      {
        goto LABEL_40;
      }
      a3 += 24;
    }
  }
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v18, "}");
  _agcIndentedLine((void **)&v27.__r_.__value_.__l.__data_, (std::string::value_type *)v18, 0);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v28;
  else
    v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    size = v28.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&v27, 0, (const std::string::value_type *)v15, size);
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void AGCLLVMUserObject::markFunctionsInline(AGCLLVMUserObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Function *v44;
  llvm::Function *v45;
  uint64_t v46;
  _QWORD *Function;
  void *v48;
  _QWORD *v49;
  uint64_t *i;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  _QWORD *j;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void **v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  BOOL v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int *v95;
  const char *v96;
  const char *Value;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::GlobalValue *v101;
  llvm::GlobalValue *v102;
  char v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  int v107;
  _BYTE v108[128];
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  _BYTE v113[128];
  char v114[16];
  char v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[64];
  _QWORD *v119;
  uint64_t v120;
  _QWORD v121[10];

  v121[8] = *MEMORY[0x1E0C80C00];
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v10 = *((_QWORD *)v9 + 50);
  if (!*(_BYTE *)(v10 + 1751))
    goto LABEL_29;
  v11 = *(unsigned __int8 *)(v10 + 1772);
  v12 = *((_QWORD *)v9 + 46);
  v13 = (uint64_t *)(v12 + 168);
  v14 = *(char *)(v12 + 191);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 != 20)
      goto LABEL_14;
    goto LABEL_7;
  }
  if (*(_QWORD *)(v12 + 176) == 20)
  {
    v13 = (uint64_t *)*v13;
LABEL_7:
    v15 = (uint64_t *)*v13;
    v16 = v13[1];
    v17 = *((_DWORD *)v13 + 4);
    v18 = v15 == (uint64_t *)0x535F786574726556 && v16 == 0x6F72505F65746174;
    if (!v18 || v17 != 1835102823)
      goto LABEL_14;
    printMessage((char **)&AGCPrinter, "Disabling non-inlined functions for ES1 vertex shader", a3, a4, a5, a6, a7, a8, v103);
LABEL_29:
    v20 = 0;
    v21 = 0;
    goto LABEL_35;
  }
LABEL_14:
  if (*((_BYTE *)this + 15))
  {
    v20 = 0;
    v21 = 1;
    goto LABEL_35;
  }
  v22 = llvm::Function::args(*((llvm::Function **)this + 22));
  if (v22 == v23)
  {
    v26 = 0;
LABEL_31:
    v21 = 1;
    goto LABEL_34;
  }
  v24 = v22;
  v25 = v23;
  v26 = 0;
  while (!*(_QWORD *)(v24 + 8))
  {
LABEL_26:
    v24 += 40;
    if (v24 == v25)
      goto LABEL_31;
  }
  v27 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v24 + 32));
  if (isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.imageblock_data")
    || isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.imageblock"))
  {
    v40 = "Inlining all functions due to use of image blocks";
    goto LABEL_33;
  }
  if (v11 || !isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.indirect_buffer"))
  {
    if (isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.texture"))
    {
      v114[0] = 0;
      LODWORD(v109) = 0;
      if (parseMDTexture(v27, &v109, &v104, v114, (BOOL *)&v116, (BOOL *)&v119, &v119, (int *)&v109))
      {
        v26 = (~v114[0] & 3) == 0;
        printMessage((char **)&AGCPrinter, "Inlining all texture functions due to the use of a RW texture", v34, v35, v36, v37, v38, v39, v103);
      }
    }
    goto LABEL_26;
  }
  v40 = "Inlining all functions due to use of indirect argument buffer";
LABEL_33:
  printMessage((char **)&AGCPrinter, v40, v28, v29, v30, v31, v32, v33, v103);
  std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), v40);
  v21 = 0;
LABEL_34:
  v20 = v26;
LABEL_35:
  *((_DWORD *)this + 10) = 0;
  v41 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v42 = v41 + 24;
  v43 = *(_QWORD *)(v41 + 32);
  while (v43 != v42)
  {
    v44 = (llvm::Function *)(v43 - 56);
    v18 = v43 == 0;
    v43 = *(_QWORD *)(v43 + 8);
    if (v18)
      v45 = 0;
    else
      v45 = v44;
    if ((v21 & 1) == 0)
      llvm::Function::removeFnAttr();
    if (llvm::GlobalValue::isDeclaration(v45))
    {
      if (!*((_QWORD *)v45 + 1))
        llvm::Function::eraseFromParent(v45);
    }
    else if (v45 == *((llvm::Function **)this + 22))
    {
      llvm::GlobalValue::setLinkage((uint64_t)v45, 0);
      if ((v21 & 1) == 0)
        *(_QWORD *)(*((_QWORD *)this + 22) + 112) = 0;
      ++*((_DWORD *)this + 10);
    }
    else
    {
      AGCLLVMUserObject::markNonMainFunctionInline(this, v45, v21);
    }
  }
  if ((v21 & 1) == 0)
    return;
  v46 = 0;
  v119 = v121;
  v120 = 0x800000000;
  v109 = v113;
  v110 = v113;
  v111 = 16;
  v112 = 0;
  do
  {
    if (force_inline_function_names[v46])
      strlen(force_inline_function_names[v46]);
    Function = (_QWORD *)llvm::Module::getFunction();
    if (Function)
    {
      v48 = Function;
      if (Function[1])
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)Function);
        Function = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v48);
      }
    }
    ++v46;
  }
  while (v46 != 11);
  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)Function);
  if (dword_1ED839C70)
  {
    for (i = (uint64_t *)AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map;
  }
  v52 = AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * dword_1ED839C70;
  if (i == (uint64_t *)v52)
  {
    v54 = 0;
    v53 = 0;
    if ((v20 & 1) == 0)
      goto LABEL_106;
    goto LABEL_88;
  }
  v53 = 0;
  v54 = 0;
  v55 = *i;
  do
  {
    v49 = (_QWORD *)llvm::Module::getFunction();
    if (v49)
    {
      v56 = v49;
      if (v49[1])
      {
        if (*(_BYTE *)(v55 + 39))
          v54 = *(_QWORD *)(*(_QWORD *)(v49[3] + 16) + 8 * *(unsigned __int8 *)(v55 + 39) + 8);
        v57 = *(_DWORD *)(v55 + 8);
        if (v57 == 3 || v57 == 8 || v20)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v49);
          v49 = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v56);
          v57 = *(_DWORD *)(v55 + 8);
        }
        if ((v57 | 4) == 5)
        {
          v49 = (_QWORD *)(*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 352))(this);
          if ((_DWORD)v49)
          {
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v56);
            v49 = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v56);
            v53 = 1;
          }
        }
      }
    }
    do
    {
      v58 = i[1];
      ++i;
      v55 = v58;
      if (v58)
        v59 = v55 == -8;
      else
        v59 = 1;
    }
    while (v59);
  }
  while (i != (uint64_t *)v52);
  if ((v20 & 1) != 0)
  {
LABEL_88:
    AGCLLVMUserObject::getDimensionFunctionMap((AGCLLVMUserObject *)v49);
    if (dword_1ED839B98)
    {
      for (j = (_QWORD *)AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = (_QWORD *)AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map;
    }
    v62 = AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map + 8 * dword_1ED839B98;
    while (j != (_QWORD *)v62)
    {
      v63 = llvm::Module::getFunction();
      if (v63)
      {
        v64 = (void *)v63;
        if (*(_QWORD *)(v63 + 8))
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, v63);
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v64);
        }
      }
      do
      {
        v66 = j[1];
        ++j;
        v65 = v66;
        if (v66)
          v67 = v65 == -8;
        else
          v67 = 1;
      }
      while (v67);
    }
  }
LABEL_106:
  if (((v54 != 0) & v53) == 1)
  {
    v68 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v69 = v68 + 24;
    v70 = *(_QWORD *)(v68 + 32);
    if (v70 != v68 + 24)
    {
      while (1)
      {
        v71 = v70 - 56;
        v18 = v70 == 0;
        v70 = *(_QWORD *)(v70 + 8);
        v72 = v18 ? 0 : v71;
        if (v72 != *((_QWORD *)this + 22))
          break;
LABEL_123:
        if (v70 == v69)
          goto LABEL_124;
      }
      if ((*(_WORD *)(v72 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v72);
        v73 = *(_QWORD **)(v72 + 88);
        if ((*(_WORD *)(v72 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v72);
          v74 = *(_QWORD **)(v72 + 88);
LABEL_117:
          v75 = &v74[5 * *(_QWORD *)(v72 + 96)];
          while (v73 != v75)
          {
            if (*v73 == v54 && v73[1])
            {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, v72);
              llvm::Function::addFnAttr();
              goto LABEL_123;
            }
            v73 += 5;
          }
          goto LABEL_123;
        }
      }
      else
      {
        v73 = *(_QWORD **)(v72 + 88);
      }
      v74 = v73;
      goto LABEL_117;
    }
  }
LABEL_124:
  v76 = v120;
  while (v76)
  {
    v77 = v119[--v76];
    LODWORD(v120) = v76;
    v78 = *(_QWORD *)(v77 + 8);
    if (v78)
    {
      do
      {
        v79 = *(_QWORD *)(v78 + 24);
        if (v79)
        {
          if (*(_BYTE *)(v79 + 16) == 84)
          {
            v80 = *(void **)(*(_QWORD *)(v79 + 40) + 56);
            if (v80 != *((void **)this + 22))
            {
              llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v80);
              if ((_BYTE)v106)
              {
                llvm::Function::addFnAttr();
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v80);
              }
            }
          }
        }
        v78 = *(_QWORD *)(v78 + 8);
      }
      while (v78);
      v76 = v120;
    }
  }
  v116 = v118;
  v117 = 0x800000000;
  AGCLLVMUserObject::extractConstantSamplers(this, (uint64_t)&v116);
  v81 = (void **)v116;
  v104 = v108;
  v105 = v108;
  v106 = 16;
  v107 = 0;
  if (!(_DWORD)v117)
    goto LABEL_173;
  v82 = 8 * v117;
  do
  {
    v83 = *v81++;
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, v83);
    v82 -= 8;
  }
  while (v82);
  v84 = v117;
  if (!(_DWORD)v117)
    goto LABEL_173;
  do
  {
    v85 = *((_QWORD *)v116 + --v84);
    LODWORD(v117) = v84;
    v86 = *(_QWORD *)(v85 + 8);
    if (!v86)
      continue;
    do
    {
      v87 = *(_QWORD *)(v86 + 24);
      v88 = *(unsigned __int8 *)(v87 + 16);
      if (v87)
        v89 = v88 >= 0x1C;
      else
        v89 = 0;
      if (v89)
      {
        v91 = v88 - 28;
      }
      else
      {
        if (v87)
          v90 = v88 == 5;
        else
          v90 = 0;
        if (!v90)
        {
LABEL_153:
          if (!v87 || v88 != 84)
            goto LABEL_170;
          v92 = *(_QWORD *)(v87 - 32);
          if (!v92 || *(_BYTE *)(v92 + 16) || *(_QWORD *)(v92 + 24) != *(_QWORD *)(v87 + 72))
            v92 = 0;
          llvm::Function::addFnAttr();
          if ((*(_WORD *)(v92 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v92);
            v93 = *(unsigned int **)(v92 + 88);
            if ((*(_WORD *)(v92 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v92);
              v94 = *(unsigned int **)(v92 + 88);
LABEL_164:
              v95 = &v94[10 * *(_QWORD *)(v92 + 96)];
              while (v93 != v95)
              {
                if (*(_QWORD *)(v87 - 32 * (*(_DWORD *)(v87 + 20) & 0x7FFFFFF) + 32 * v93[8]) == v85)
                {
                  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, v93);
                  if (v115)
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v116, (uint64_t)v93);
                }
                v93 += 10;
              }
              goto LABEL_170;
            }
          }
          else
          {
            v93 = *(unsigned int **)(v92 + 88);
          }
          v94 = v93;
          goto LABEL_164;
        }
        v91 = *(unsigned __int16 *)(v87 + 18);
      }
      if (v91 != 49)
        goto LABEL_153;
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, *(void **)(v86 + 24));
      if (v115)
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v116, v87);
LABEL_170:
      v86 = *(_QWORD *)(v86 + 8);
    }
    while (v86);
    v84 = v117;
  }
  while (v84);
LABEL_173:
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_STRESS_NO_INLINING", v96);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
      {
        v98 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
        v99 = v98 + 24;
        v100 = *(_QWORD *)(v98 + 32);
        while (v100 != v99)
        {
          v101 = (llvm::GlobalValue *)(v100 - 56);
          v18 = v100 == 0;
          v100 = *(_QWORD *)(v100 + 8);
          if (v18)
            v102 = 0;
          else
            v102 = v101;
          if ((llvm::GlobalValue::isDeclaration(v102) & 1) == 0 && (llvm::Function::hasFnAttribute() & 1) == 0)
            llvm::Function::addFnAttr();
        }
      }
    }
  }
  if (v105 != v104)
    free(v105);
  if (v116 != v118)
    free(v116);
  if (v110 != v109)
    free(v110);
  if (v119 != v121)
    free(v119);
}

void _agcIndentedLine(void **a1, std::string::value_type *a2, int a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *p_p;
  std::string __p;
  std::string v14;

  std::string::basic_string[abi:nn180100]<0>(&v14, (char *)&unk_1C3E4D9BB);
  if (a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  if (a2[23] < 0)
  {
    v7 = a2;
    a2 = *(std::string::value_type **)a2;
    v6 = *((_QWORD *)v7 + 1);
    if (!v6)
      goto LABEL_19;
  }
  else
  {
    v6 = a2[23];
    if (!a2[23])
      goto LABEL_19;
  }
  do
  {
    v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        size = v14.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:nn180100]((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

{
  uint64_t v6;
  std::string::value_type *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *p_p;
  std::string __p;
  std::string v14;

  std::string::basic_string[abi:nn180100]<0>(&v14, (char *)&unk_1C3E4D9BB);
  for (; a3; --a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  if (a2[23] < 0)
  {
    v7 = a2;
    a2 = *(std::string::value_type **)a2;
    v6 = *((_QWORD *)v7 + 1);
    if (!v6)
      goto LABEL_19;
  }
  else
  {
    v6 = a2[23];
    if (!a2[23])
      goto LABEL_19;
  }
  do
  {
    v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        size = v14.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:nn180100]((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserObject::extractConstantSamplers(_QWORD *a1, uint64_t a2)
{
  llvm::Module *v3;
  uint64_t result;
  llvm::NamedMDNode *v5;
  unsigned int i;
  uint64_t Operand;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v3 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368);
  v11 = "air.sampler_states";
  v12 = 259;
  result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&v11);
  if (result)
  {
    v5 = (llvm::NamedMDNode *)result;
    for (i = 0; ; ++i)
    {
      result = llvm::NamedMDNode::getNumOperands(v5);
      if (i >= result)
        break;
      Operand = llvm::NamedMDNode::getOperand(v5);
      v8 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v8)
      {
        if (*v8 - 1 > 1)
        {
          v10 = 0;
        }
        else
        {
          v9 = *((_QWORD *)v8 + 16);
          if (*(_BYTE *)(v9 + 16) == 3)
            v10 = v9;
          else
            v10 = 0;
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a2, v10);
      }
    }
  }
  return result;
}

void SimplifyGenericIR(llvm::Module *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char *v9;
  char *v10;
  uint64_t v11;
  llvm::Argument *v12;
  llvm::Argument *v13;
  llvm::Argument *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Instruction **v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  llvm *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  llvm::Instruction *v39;
  uint64_t v40;
  llvm *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  llvm::CallBase *v46;
  _QWORD *v47;
  _QWORD **v49;
  _QWORD *v50;
  _QWORD **v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  llvm::CallBase *i;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  BOOL v63;
  llvm::BasicBlock *v64;
  uint64_t v65;
  llvm *v66;
  llvm *v67;
  int v68;
  int v69;
  llvm::Value *v70;
  uint64_t v71;
  llvm::Instruction *v72;
  int v73;
  int v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  _QWORD *v84[2];
  llvm *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD v91[18];

  v91[16] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    printMessage((char **)&AGCPrinter, "Skip SimplifyGenericIR", a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v9 = (char *)a1 + 24;
  v10 = (char *)*((_QWORD *)a1 + 4);
  if (v10 != (char *)a1 + 24)
  {
    v76 = (char *)a1 + 24;
    while (1)
    {
      v11 = v10 ? (uint64_t)(v10 - 56) : 0;
      if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v11) & 1) == 0)
        break;
LABEL_127:
      v10 = (char *)*((_QWORD *)v10 + 1);
      if (v10 == v9)
      {
        v73 = v81;
        v74 = HIDWORD(v81);
        v75 = v82;
        goto LABEL_130;
      }
    }
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v84[0] = 0;
    v84[1] = 0;
    v83 = (uint64_t *)v84;
    if ((*(_BYTE *)(v11 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v11);
      v12 = *(llvm::Argument **)(v11 + 88);
      if ((*(_WORD *)(v11 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v11);
        v13 = *(llvm::Argument **)(v11 + 88);
LABEL_14:
        v14 = (llvm::Argument *)((char *)v13 + 40 * *(_QWORD *)(v11 + 96));
        while (v12 != v14)
        {
          v15 = *(_DWORD *)(*(_QWORD *)v12 + 8);
          if (v15 == 15)
          {
            if ((v15 & 0xFE) == 0x12)
              v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
            if (v15 <= 0xFF)
            {
              if (llvm::Argument::hasNoAliasAttr(v12))
                AddCandidate((uint64_t)v12, (uint64_t)&v85, &v83, (uint64_t)&v80);
            }
          }
          v12 = (llvm::Argument *)((char *)v12 + 40);
        }
        v89 = v91;
        v90 = 0x1000000000;
        v16 = *(_QWORD *)(v11 + 80);
        if (v16)
          v17 = v16 - 24;
        else
          v17 = 0;
        v18 = v17 + 40;
        v19 = *(_QWORD *)(v17 + 48);
        if (v19 != v18)
        {
          do
          {
            v20 = *(_QWORD *)(v19 + 8);
            v21 = v19 - 24;
            if (v19)
              v22 = v19 - 24;
            else
              v22 = 0;
            if (*(_BYTE *)(v22 + 16) == 59)
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v89, v21);
            v19 = v20;
          }
          while (v20 != v18);
          if ((_DWORD)v90)
          {
            v23 = (llvm::Instruction **)v89;
            v24 = 8 * v90;
            do
            {
              v25 = *v23;
              if (*((_QWORD *)*v23 + 1))
              {
                ++HIDWORD(v80);
                AddCandidate((uint64_t)v25, (uint64_t)&v85, &v83, (uint64_t)&v80);
              }
              else
              {
                llvm::Instruction::eraseFromParent(v25);
                ++v82;
              }
              ++v23;
              v24 -= 8;
            }
            while (v24);
          }
        }
        LODWORD(v90) = 0;
        if ((_DWORD)v86)
        {
          v26 = *(_QWORD *)(v11 + 80);
          v78 = v11 + 72;
          if (v26 != v11 + 72)
          {
            v77 = v10;
            v27 = 0;
            v79 = 0;
            while (1)
            {
              if (v26)
                v28 = v26 - 24;
              else
                v28 = 0;
              v29 = *(_QWORD *)(v28 + 48);
              if (v29 != v28 + 40)
              {
                do
                {
                  if (v29)
                    v30 = (unsigned __int8 *)(v29 - 24);
                  else
                    v30 = 0;
                  v31 = *(_QWORD *)(v29 + 8);
                  LODWORD(v80) = v80 + 1;
                  v32 = v30[16];
                  if (v29 && v32 == 61)
                  {
                    v33 = *((_QWORD *)v30 - 4);
                    v88 = 0;
                    v34 = v85;
                    v35 = v87;
                    v36 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v33, &v88);
                    v37 = v88;
                    if (v36)
                      v38 = v88 == (_QWORD)v34 + 32 * v35;
                    else
                      v38 = 1;
                    if (!v38)
                    {
                      *(_QWORD *)(v88 + 8) = *((_QWORD *)v30 - 8);
                      *(_DWORD *)(v37 + 16) = v27;
                    }
                    goto LABEL_96;
                  }
                  if (v32 == 60)
                    v39 = (llvm::Instruction *)v30;
                  else
                    v39 = 0;
                  if (!v29 || v32 != 60)
                  {
                    if (v32 == 84)
                      v46 = (llvm::CallBase *)v30;
                    else
                      v46 = 0;
                    if (v29)
                    {
                      v47 = v84[0];
                      if (v32 == 84 && v84[0] != 0)
                      {
                        v49 = v84;
                        do
                        {
                          v50 = v47;
                          v51 = v49;
                          v52 = v47[4];
                          v53 = v47 + 1;
                          if (v52 >= (unint64_t)v46)
                          {
                            v53 = v50;
                            v49 = (_QWORD **)v50;
                          }
                          v47 = (_QWORD *)*v53;
                        }
                        while (v47);
                        if (v49 != v84)
                        {
                          if (v52 < (unint64_t)v46)
                            v50 = v51;
                          if ((unint64_t)v46 >= v50[4])
                          {
                            v54 = 0;
                            for (i = v46; ; i = (llvm::CallBase *)((char *)i + 32))
                            {
                              v56 = llvm::CallBase::arg_end(v46);
                              v57 = *((_DWORD *)v46 + 5) & 0x7FFFFFF;
                              if (v54 >= ((unint64_t)(v56
                                                                          - ((_QWORD)v46
                                                                           + 32 * -(int)v57)) >> 5))
                                break;
                              v58 = *((_QWORD *)i - 4 * v57);
                              v88 = 0;
                              v59 = v85;
                              v60 = v87;
                              v61 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v58, &v88);
                              v62 = v88;
                              if (v61)
                                v63 = v88 == (_QWORD)v59 + 32 * v60;
                              else
                                v63 = 1;
                              if (!v63)
                              {
                                *(_QWORD *)(v88 + 8) = 0;
                                *(_DWORD *)(v62 + 16) = v27;
                              }
                              ++v54;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_96;
                  }
                  v40 = *((_QWORD *)v39 - 4);
                  v88 = 0;
                  v41 = v85;
                  v42 = v87;
                  v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v40, &v88);
                  v44 = v88;
                  if (v43)
                    v45 = v88 == (_QWORD)v41 + 32 * v42;
                  else
                    v45 = 1;
                  if (!v45)
                  {
                    if (*(_DWORD *)(v88 + 16) == v27)
                    {
                      if (!*(_QWORD *)(v88 + 8))
                        goto LABEL_95;
                    }
                    else
                    {
                      if (!*(_BYTE *)(v88 + 21))
                      {
LABEL_95:
                        *(_QWORD *)(v88 + 8) = v39;
                        *(_DWORD *)(v44 + 16) = v27;
                        *(_BYTE *)(v44 + 20) = 0;
                        goto LABEL_96;
                      }
                      llvm::UndefValue::get();
                    }
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent(v39);
                    --*(_DWORD *)(v44 + 24);
                    LODWORD(v81) = v81 + 1;
                    v79 = 1;
                  }
LABEL_96:
                  v29 = v31;
                }
                while (v31 != v28 + 40);
              }
              v26 = *(_QWORD *)(v26 + 8);
              if (v26 == v78)
                break;
              if (v26)
                v64 = (llvm::BasicBlock *)(v26 - 24);
              else
                v64 = 0;
              if (llvm::BasicBlock::getSinglePredecessor(v64) != v28)
                ++v27;
            }
            v9 = v76;
            v10 = v77;
            if ((v79 & 1) != 0 && (_DWORD)v86)
            {
              if (v87)
              {
                v65 = 32 * v87;
                v66 = v85;
                while ((*(_QWORD *)v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v66 = (llvm *)((char *)v66 + 32);
                  v65 -= 32;
                  if (!v65)
                    goto LABEL_124;
                }
              }
              else
              {
                v66 = v85;
              }
              v67 = (llvm *)((char *)v85 + 32 * v87);
              if (v66 != v67)
              {
                v68 = HIDWORD(v81);
                v69 = v82;
LABEL_114:
                if (*((_BYTE *)v66 + 20) && !*((_DWORD *)v66 + 6))
                {
                  v70 = *(llvm::Value **)v66;
                  v71 = *(_QWORD *)(*(_QWORD *)v66 + 8);
                  if (v71)
                  {
                    do
                    {
                      v72 = *(llvm::Instruction **)(v71 + 24);
                      v71 = *(_QWORD *)(v71 + 8);
                      llvm::Instruction::eraseFromParent(v72);
                      ++v68;
                    }
                    while (v71);
                    v70 = *(llvm::Value **)v66;
                  }
                  v69 += EraseInstructionChain(v70);
                }
                while (1)
                {
                  v66 = (llvm *)((char *)v66 + 32);
                  if (v66 == v67)
                    break;
                  if ((*(_QWORD *)v66 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    if (v66 != v67)
                      goto LABEL_114;
                    break;
                  }
                }
                HIDWORD(v81) = v68;
                v82 = v69;
              }
            }
          }
        }
LABEL_124:
        if (v89 != v91)
          free(v89);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v84[0]);
        llvm::deallocate_buffer(v85, (void *)(32 * v87));
        goto LABEL_127;
      }
    }
    else
    {
      v12 = *(llvm::Argument **)(v11 + 88);
    }
    v13 = v12;
    goto LABEL_14;
  }
  v75 = 0;
  v74 = 0;
  v73 = 0;
LABEL_130:
  if (v74 + v73 + v75)
    printMessage((char **)&AGCPrinter, "SimplifyGenericIR: %u alloca's, Removed %u loads, %u stores, %u other out of %u insts, total %4.2f %c insts\n", a3, a4, a5, a6, a7, a8, SBYTE4(v80));
  else
    printMessage((char **)&AGCPrinter, "SimplifyGenericIR: %u alloca's, unable to simplify the IR\n", a3, a4, a5, a6, a7, a8, SBYTE4(v80));
}

void printMessage(char **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char *v11;
  char *v12;
  _QWORD *v13;
  size_t v14;
  const std::locale::facet *v15;
  char *__s;
  std::locale v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    if (status_file_cap)
    {
      v11 = &(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 24)];
      if ((v11[32] & 5) == 0)
      {
        (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5)
                                                                                            + 32))(&v17, *((_QWORD *)v11 + 5), 0, 1, 16);
        if (v18 >= status_file_cap)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          v12 = *a1;
          if (!*a1 || v12 == (char *)MEMORY[0x1E0DE4A50])
            goto LABEL_11;
          (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          *a1 = 0;
          getFilePath();
          if (byte_1EF8E8237 < 0)
          {
            *(_BYTE *)getFilePath(void)::file_path = 0;
            qword_1EF8E8228 = 0;
          }
          else
          {
            LOBYTE(getFilePath(void)::file_path) = 0;
            byte_1EF8E8237 = 0;
          }
        }
      }
    }
    v12 = *a1;
LABEL_11:
    if (v12)
    {
      __s = 0;
      vasprintf(&__s, a2, &a9);
      v13 = *a1;
      v14 = strlen(__s);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)__s, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v15 = std::locale::use_facet(&v17, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::flush();
      free(__s);
    }
  }
}

void std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*a1);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  uint64_t v2;

  if ((*((_WORD *)this + 9) & 1) == 0)
    return *((_QWORD *)this + 11);
  llvm::Function::BuildLazyArguments(this);
  v2 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(this);
  return v2;
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 32);
  if ((a2 - 7) < 2)
    v3 &= 0xFFFFFFCF;
  v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(this + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2)
    goto LABEL_7;
  if ((v3 & 0x30) != 0)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

uint64_t AGCLLVMAGPFragmentShader::detectSideEffects(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  AGCLLVMUserObject *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v35;
  int v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int Key;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t Operand;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v58;
  const std::string::value_type *v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t Name;
  unint64_t v64;

  v61 = (char *)this + 5835;
  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 == v2 + 24)
    goto LABEL_121;
  v62 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if (v4)
      v7 = v4 - 56;
    else
      v7 = 0;
    if ((llvm::Function::hasFnAttribute() & 1) == 0)
    {
      v8 = v7 + 72;
      for (i = *(_QWORD *)(v7 + 80); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v8)
          goto LABEL_7;
        v10 = i - 24;
        if (!i)
          v10 = 0;
        v11 = *(_QWORD *)(v10 + 48);
        if (v11 != v10 + 40)
          break;
      }
      while (1)
      {
LABEL_110:
        if (i == v8)
          break;
        v12 = v11 - 24;
        if (!v11)
          v12 = 0;
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v11 && v13 == 61)
        {
          v14 = **(_QWORD **)(v12 - 32);
          v15 = *(_DWORD *)(v14 + 8);
          if ((v15 & 0xFE) == 0x12)
            v15 = *(_DWORD *)(**(_QWORD **)(v14 + 16) + 8);
          v16 = v15 >> 8;
          if (v16 == 1)
          {
            HIDWORD(v62) = 1;
          }
          else if (v16 == 3)
          {
            LODWORD(v62) = 1;
          }
        }
        else
        {
          if (v13 == 84)
            v17 = v12;
          else
            v17 = 0;
          if (v11)
          {
            if (v13 == 84)
            {
              v18 = *(_QWORD *)(v17 - 32);
              if (v18)
              {
                if (!*(_BYTE *)(v18 + 16) && *(_QWORD *)(v18 + 24) == *(_QWORD *)(v17 + 72))
                {
                  Name = llvm::Value::getName((llvm::Value *)v18);
                  v64 = v19;
                  v20 = (AGCLLVMUserObject *)llvm::CallBase::arg_end((llvm::CallBase *)v17);
                  v21 = v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
                  v60 = v5;
                  v22 = v6;
                  v23 = (((unint64_t)v20 - v21) & 0x1FFFFFFFE0) != 0
                     && *(unsigned __int8 *)(**(_QWORD **)v21 + 8) == 15;
                  v26 = v64;
                  if (v64 < 0xA)
                  {
                    v27 = 0;
                    v6 = v22;
                    v5 = v60;
                    goto LABEL_63;
                  }
                  if (*(_QWORD *)Name != 0x6D6F74612E726961 || *(_WORD *)(Name + 8) != 25449)
                    goto LABEL_60;
                  v20 = (AGCLLVMUserObject *)llvm::StringRef::find();
                  if (v20 != (AGCLLVMUserObject *)-1 || !v23)
                    goto LABEL_60;
                  v30 = **(_QWORD **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
                  v31 = *(_DWORD *)(v30 + 8);
                  if ((v31 & 0xFE) == 0x12)
                    v31 = *(_DWORD *)(**(_QWORD **)(v30 + 16) + 8);
                  v32 = v31 >> 8;
                  if (v32 == 1)
                  {
                    v6 = 1;
                    HIDWORD(v62) = 1;
                  }
                  else
                  {
                    if (v32 == 3)
                    {
                      v6 = 1;
                      LODWORD(v62) = 1;
                      goto LABEL_61;
                    }
LABEL_60:
                    v6 = v22;
                  }
LABEL_61:
                  v5 = v60;
                  v26 = v64;
                  if (v64 < 0xB)
                  {
                    v27 = 0;
                    goto LABEL_63;
                  }
                  v33 = Name;
                  if (*(_QWORD *)Name == 0x6D656D2E6D766C6CLL && *(_QWORD *)(Name + 3) == 0x7970636D656D2E6DLL)
                  {
                    v47 = **(_QWORD **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
                    v48 = *(_DWORD *)(v47 + 8);
                    if ((v48 & 0xFE) == 0x12)
                      v48 = *(_DWORD *)(**(_QWORD **)(v47 + 16) + 8);
                    v49 = v48 >> 8;
                    if (v49 == 1)
                    {
                      HIDWORD(v62) = 1;
                    }
                    else if (v49 == 3)
                    {
                      LODWORD(v62) = 1;
                    }
                  }
                  if (v64 < 0xF
                    || (*(_QWORD *)Name == 0x5F7465732E726961
                      ? (v35 = *(_QWORD *)(Name + 7) == 0x5F7265666675625FLL)
                      : (v35 = 0),
                        !v35 ? (v36 = 0) : (v36 = 1),
                        (HIDWORD(v62) |= v36, v64 < 0x14)
                     || (*(_QWORD *)Name == 0x646D69732E726961
                       ? (v37 = *(_QWORD *)(Name + 8) == 0x616D5F70756F7267)
                       : (v37 = 0),
                         v37 ? (v38 = *(_DWORD *)(Name + 16) == 2020176500) : (v38 = 0),
                         !v38)))
                  {
                    v27 = 0;
LABEL_85:
                    v39 = *(_QWORD *)v33;
                    v40 = *(unsigned __int8 *)(v33 + 8);
                    if (v39 != 0x726F74732E726961 || v40 != 101)
                      goto LABEL_92;
                    goto LABEL_93;
                  }
                  v20 = (AGCLLVMUserObject *)llvm::StringRef::find();
                  v27 = v20 != (AGCLLVMUserObject *)-1;
                  v26 = v64;
LABEL_63:
                  if (v26 >= 9)
                  {
                    v33 = Name;
                    goto LABEL_85;
                  }
LABEL_92:
                  if (v27)
                  {
LABEL_93:
                    v43 = **(_QWORD **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
                    v44 = *(_DWORD *)(v43 + 8);
                    if ((v44 & 0xFE) == 0x12)
                      v44 = *(_DWORD *)(**(_QWORD **)(v43 + 16) + 8);
                    v45 = v44 >> 8;
                    if (v45 == 1)
                    {
                      HIDWORD(v62) = 1;
                    }
                    else if (v45 == 3)
                    {
                      LODWORD(v62) = 1;
                    }
                  }
                  AGCLLVMUserObject::getSampleFunctionMap(v20);
                  Key = llvm::StringMapImpl::FindKey();
                  if (Key != -1 && Key != (unint64_t)dword_1ED839C70)
                    v5 |= *(_DWORD *)(*(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                                                + 8 * Key)
                                    + 8) == 3;
                }
              }
            }
          }
        }
        v11 = *(_QWORD *)(v11 + 8);
        v24 = i - 24;
        if (!i)
          v24 = 0;
        if (v11 == v24 + 40)
        {
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if (i == v8)
              goto LABEL_7;
            v25 = i - 24;
            if (!i)
              v25 = 0;
            v11 = *(_QWORD *)(v25 + 48);
            if (v11 != v25 + 40)
              goto LABEL_110;
          }
        }
      }
    }
LABEL_7:
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != v3);
  if (((HIDWORD(v62) | v62 | v5) & 1) != 0)
  {
    if ((v62 & 1) != 0
      && (v50 = *(_QWORD *)(*(_QWORD *)this - 24), !*(_BYTE *)(*(_QWORD *)((char *)this + v50 + 400) + 1743)))
    {
      v58 = (std::string *)((char *)this + v50 + 8);
      v59 = "threadgroup memory not supported in fragment shaders";
    }
    else
    {
      if ((v5 & 1) == 0
        || (v51 = *(_QWORD *)(*(_QWORD *)this - 24), *(_BYTE *)(*(_QWORD *)((char *)this + v51 + 400) + 1742)))
      {
        if ((v6 & 1) != 0 && *((int *)this + 1082) <= 0)
          *((_DWORD *)this + 1082) = 1;
        *((_DWORD *)this + 1610) = 2;
        v52 = v61;
LABEL_123:
        Operand = llvm::NamedMDNode::getOperand(*((llvm::NamedMDNode **)this + 8));
        v54 = *(unsigned int *)(Operand + 8);
        if (Operand - 8 * v54 + 24 != Operand)
        {
          v55 = Operand;
          v56 = 24 - 8 * v54;
          while (!isStringMDNode(*(llvm::MDString **)(v55 + v56), "early_fragment_tests"))
          {
            v56 += 8;
            if (!v56)
              goto LABEL_129;
          }
          *((_DWORD *)this + 1610) = 1;
          llvm::Module::getOrInsertNamedMetadata();
          llvm::ConstantInt::get();
          llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
        }
        goto LABEL_129;
      }
      v58 = (std::string *)((char *)this + v51 + 8);
      v59 = "Texture writes not supported in fragment shaders";
    }
    std::string::append(v58, v59);
    return 0;
  }
LABEL_121:
  v52 = v61;
  if (v61[10] || v61[9])
    goto LABEL_123;
LABEL_129:
  if (*((_DWORD *)this + 1610) == 2)
  {
    if (!*v52)
    {
      *v52 = 1;
      *((_DWORD *)this + 1460) = 1;
    }
    *((_DWORD *)this + 1459) = 0;
  }
  return 1;
}

void AGCLLVMUserObject::getSampleFunctionMap(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map = 0;
      *(_QWORD *)&dword_1ED839C70 = 0;
      qword_1ED839C78 = 0x4000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map, &dword_1C3C54000);
    }
  }
}

uint64_t *AGCLLVMUserShader::AGCLLVMUserShader(uint64_t *a1, uint64_t *a2, uint64_t a3, _BYTE *a4, uint64_t a5, char a6, char a7)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Int8PtrTy;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Module *v30;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v32;
  unsigned int v33;
  uint64_t Operand;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  llvm::Module *v48;
  llvm::NamedMDNode *v49;
  uint64_t v50;
  llvm::Module *v51;
  uint64_t v52;
  llvm::NamedMDNode *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  llvm::Module *v73;
  llvm::NamedMDNode *v74;
  llvm::NamedMDNode *v75;
  int NumOperands;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  llvm::Value *v82;
  llvm::StringMapImpl *v84;
  uint64_t Name;
  size_t v86;
  size_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  llvm::Module *v94;
  char v95;
  llvm::NamedMDNode *v96;
  uint64_t v97;
  uint64_t v99;
  unsigned __int8 *v100;
  llvm::Value *v101;
  llvm::Value *v102;
  _QWORD *v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ValueAsString;
  uint64_t v121;
  void *v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  size_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t i;
  uint64_t v137;
  _QWORD *v138;
  void *__src;
  uint64_t v142;
  uint64_t v143;
  __int128 __dst;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v10 = a2[1];
  *a1 = v10;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 24)) = a2[2];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) = a2[3];
  *((_WORD *)a1 + 6) = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 14) = a6;
  *((_BYTE *)a1 + 15) = a7;
  *((_DWORD *)a1 + 4) = 0;
  *((_BYTE *)a1 + 20) = 0;
  a1[3] = a5;
  *((_DWORD *)a1 + 8) = 16843009;
  v11 = a1 + 4;
  *((_WORD *)a1 + 18) = 257;
  *((_DWORD *)a1 + 10) = 0;
  *((_WORD *)a1 + 22) = 0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  a1[10] = 0;
  a1[11] = (uint64_t)(a1 + 13);
  v138 = a1 + 11;
  a1[12] = 0x800000000;
  a1[21] = 0;
  a1[22] = 0;
  v146 = 260;
  *(_QWORD *)&__dst = a3 + 216;
  MEMORY[0x1CAA2CCA8](a1 + 23, &__dst);
  v12 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 464) + 32);
  if (*(_QWORD *)(v12 + 16))
    strlen(*(const char **)(v12 + 16));
  *((_WORD *)a1 + 120) = 0;
  *((_WORD *)a1 + 126) = 0;
  a1[33] = (uint64_t)(a1 + 36);
  *((_OWORD *)a1 + 17) = xmmword_1C3E37DE0;
  a1[37] = (uint64_t)(a1 + 39);
  a1[38] = 0x1000000000;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[58] = (uint64_t)(a1 + 60);
  a1[59] = 0x800000000;
  a1[76] = 0;
  a1[77] = (uint64_t)(a1 + 79);
  a1[78] = 0x800000000;
  llvm::DataLayout::reset();
  a1[83] = (uint64_t)(a1 + 85);
  a1[84] = 0x400000000;
  *((_DWORD *)a1 + 178) = 128;
  a1[87] = MEMORY[0x1CAA2C6C0](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t)(a1 + 87));
  *((_BYTE *)a1 + 720) = 0;
  *((_BYTE *)a1 + 744) = 0;
  *((_DWORD *)a1 + 194) = 128;
  a1[95] = MEMORY[0x1CAA2C6C0](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty((uint64_t)(a1 + 95));
  *((_BYTE *)a1 + 784) = 0;
  *((_BYTE *)a1 + 808) = 0;
  a1[105] = 0;
  a1[104] = 0;
  a1[103] = (uint64_t)(a1 + 104);
  a1[108] = 0;
  a1[107] = 0;
  a1[106] = (uint64_t)(a1 + 107);
  a1[111] = 0;
  a1[110] = 0;
  a1[109] = (uint64_t)(a1 + 110);
  a1[121] = 0;
  a1[120] = 0;
  *((_OWORD *)a1 + 56) = 0u;
  *((_OWORD *)a1 + 57) = 0u;
  *((_OWORD *)a1 + 58) = 0u;
  a1[118] = 0;
  a1[119] = (uint64_t)(a1 + 120);
  a1[123] = 0;
  a1[124] = 0;
  a1[122] = (uint64_t)(a1 + 123);
  a1[125] = (uint64_t)(a1 + 129);
  a1[126] = (uint64_t)(a1 + 129);
  a1[127] = 8;
  *((_DWORD *)a1 + 256) = 0;
  a1[137] = (uint64_t)(a1 + 141);
  a1[138] = (uint64_t)(a1 + 141);
  a1[139] = 8;
  *((_DWORD *)a1 + 280) = 0;
  bzero(a1 + 149, 0x280uLL);
  v13 = a1 + 229;
  v14 = 149;
  do
  {
    v15 = &a1[v14];
    *v15 = 4;
    *(_OWORD *)(v15 + 1) = 0uLL;
    *(_OWORD *)(v15 + 3) = 0uLL;
    *(_OWORD *)(v15 + 5) = 0uLL;
    v15[7] = -1;
    v14 += 8;
  }
  while (v15 + 8 != v13);
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 259) = 0u;
  *(_OWORD *)(a1 + 253) = 0u;
  *(_OWORD *)(a1 + 255) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 251) = 0u;
  *(_OWORD *)(a1 + 245) = 0u;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 241) = 0u;
  *(_OWORD *)(a1 + 243) = 0u;
  *(_OWORD *)(a1 + 237) = 0u;
  *(_OWORD *)(a1 + 239) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 235) = 0u;
  v16 = a1 + 261;
  v17 = 229;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(a1 + 231) = 0u;
  do
  {
    v18 = &a1[v17];
    *v18 = 4;
    *(_OWORD *)(v18 + 1) = 0uLL;
    *(_OWORD *)(v18 + 3) = 0uLL;
    *(_OWORD *)(v18 + 5) = 0uLL;
    v18[7] = -1;
    v17 += 8;
  }
  while (v18 + 8 != v16);
  *(_OWORD *)(a1 + 289) = 0u;
  *(_OWORD *)(a1 + 291) = 0u;
  *(_OWORD *)(a1 + 285) = 0u;
  *(_OWORD *)(a1 + 287) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  *(_OWORD *)(a1 + 283) = 0u;
  *(_OWORD *)(a1 + 277) = 0u;
  *(_OWORD *)(a1 + 279) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 275) = 0u;
  *(_OWORD *)(a1 + 269) = 0u;
  *(_OWORD *)(a1 + 271) = 0u;
  *(_OWORD *)(a1 + 265) = 0u;
  *(_OWORD *)(a1 + 267) = 0u;
  v19 = 261;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(a1 + 263) = 0u;
  do
  {
    v20 = &a1[v19];
    *v20 = 4;
    *(_OWORD *)(v20 + 1) = 0uLL;
    *(_OWORD *)(v20 + 3) = 0uLL;
    *(_OWORD *)(v20 + 5) = 0uLL;
    v20[7] = -1;
    v19 += 8;
  }
  while (v20 + 8 != a1 + 293);
  *((_BYTE *)a1 + 2344) = 0;
  *((_DWORD *)a1 + 587) = 0;
  v21 = 295;
  a1[294] = 0;
  do
  {
    v22 = &a1[v21];
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 4;
    v23 = (uint64_t)&a1[v21 + 3];
    v21 += 3;
  }
  while ((uint64_t *)v23 != a1 + 304);
  a1[304] = 4;
  *(_OWORD *)(a1 + 305) = 0u;
  a1[307] = 4;
  *((_OWORD *)a1 + 154) = 0u;
  a1[310] = 4;
  *(_OWORD *)(a1 + 311) = 0u;
  a1[313] = 4;
  *((_OWORD *)a1 + 157) = 0u;
  a1[316] = 4;
  *(_OWORD *)(a1 + 317) = 0u;
  a1[319] = 4;
  *((_OWORD *)a1 + 160) = 0u;
  a1[322] = 4;
  *(_OWORD *)(a1 + 323) = 0u;
  a1[325] = 4;
  *((_OWORD *)a1 + 163) = 0u;
  a1[329] = 4;
  *((_OWORD *)a1 + 165) = 0u;
  a1[333] = 4;
  *((_OWORD *)a1 + 167) = 0u;
  a1[337] = 4;
  *((_OWORD *)a1 + 169) = 0u;
  a1[340] = 4;
  *(_OWORD *)(a1 + 341) = 0u;
  a1[343] = 4;
  *((_OWORD *)a1 + 172) = 0u;
  a1[346] = 4;
  *(_OWORD *)(a1 + 347) = 0u;
  a1[349] = 4;
  *((_OWORD *)a1 + 175) = 0u;
  a1[352] = 4;
  a1[355] = 0;
  *(_OWORD *)(a1 + 353) = 0u;
  a1[356] = 4;
  *(_OWORD *)(a1 + 357) = 0u;
  a1[359] = (uint64_t)(a1 + 361);
  a1[360] = 0x100000000;
  a1[362] = (uint64_t)"agc.driver.api_texture.";
  *(_OWORD *)(a1 + 365) = 0u;
  *(_OWORD *)(a1 + 363) = 0u;
  *((_DWORD *)a1 + 734) = 1065353216;
  a1[368] = (uint64_t)"agc.driver.api_sampler.";
  *(_OWORD *)(a1 + 369) = 0u;
  *(_OWORD *)(a1 + 371) = 0u;
  *((_DWORD *)a1 + 746) = 1065353216;
  a1[374] = (uint64_t)"agc.driver.ab_texture.";
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 377) = 0u;
  *((_DWORD *)a1 + 758) = 1065353216;
  a1[380] = (uint64_t)"agc.driver.ab_sampler.";
  *(_OWORD *)(a1 + 381) = 0u;
  *(_OWORD *)(a1 + 383) = 0u;
  *((_DWORD *)a1 + 770) = 1065353216;
  a1[386] = (uint64_t)"agc.driver.api_texture.global_ref";
  *(_OWORD *)(a1 + 387) = 0u;
  *(_OWORD *)(a1 + 389) = 0u;
  *((_DWORD *)a1 + 782) = 1065353216;
  a1[392] = (uint64_t)"agc.driver.api_sampler.global_ref";
  *(_OWORD *)(a1 + 395) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *((_DWORD *)a1 + 794) = 1065353216;
  a1[398] = (uint64_t)(a1 + 400);
  a1[399] = 0x200000000;
  *(_OWORD *)(a1 + 403) = 0u;
  a1[402] = (uint64_t)(a1 + 403);
  *((_DWORD *)a1 + 814) = 128;
  a1[405] = MEMORY[0x1CAA2C6C0](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty((uint64_t)(a1 + 405));
  *((_BYTE *)a1 + 3264) = 0;
  *((_BYTE *)a1 + 3288) = 0;
  *(_OWORD *)(a1 + 413) = 0u;
  *(_OWORD *)(a1 + 415) = 0u;
  a1[417] = (uint64_t)(a1 + 419);
  a1[418] = 0x400000000;
  *(_OWORD *)(a1 + 439) = 0u;
  *((_DWORD *)a1 + 882) = 0;
  a1[442] = 4;
  *(_DWORD *)((char *)a1 + 3562) = 0;
  *((_BYTE *)a1 + 3566) = 0;
  *(_OWORD *)(a1 + 443) = 0u;
  a1[446] = 1;
  *((_BYTE *)a1 + 3560) = 0;
  *(int64x2_t *)(a1 + 447) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  a1[449] = (uint64_t)(a1 + 451);
  a1[450] = 0x200000000;
  a1[463] = 0;
  *((_WORD *)a1 + 1856) = 0;
  *((_DWORD *)a1 + 912) = 0;
  a1[455] = 0;
  *(_OWORD *)(a1 + 453) = 0u;
  *((_DWORD *)a1 + 914) = 0;
  *((_OWORD *)a1 + 229) = 0u;
  *((_OWORD *)a1 + 230) = 0u;
  *((_BYTE *)a1 + 3696) = 0;
  a1[467] = 0;
  *((_DWORD *)a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 469) = 0u;
  *(_OWORD *)(a1 + 471) = 0u;
  *(_OWORD *)(a1 + 473) = 0u;
  *(_OWORD *)(a1 + 475) = 0u;
  *(_OWORD *)(a1 + 477) = 0u;
  *(_OWORD *)(a1 + 479) = 0u;
  a1[481] = 0;
  a1[482] = 1;
  a1[483] = 0;
  a1[484] = (uint64_t)(a1 + 486);
  a1[485] = 0x1000000000;
  std::string::basic_string[abi:nn180100]<0>(a1 + 518, "texture");
  *((_DWORD *)a1 + 1042) = 93;
  std::string::basic_string[abi:nn180100]<0>(a1 + 522, "sampler");
  *((_DWORD *)a1 + 1050) = 113;
  *((_DWORD *)a1 + 1058) = 0;
  a1[528] = 0;
  a1[527] = 0;
  a1[526] = 0;
  a1[232] = (uint64_t)"agc.sampler_words";
  v24 = *a1;
  a1[233] = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 1680);
  a1[234] = (uint64_t)"sampler_state";
  a1[236] = 0x100000040;
  a1[240] = (uint64_t)"agc.sampler_es1_lod_bias";
  a1[241] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 200);
  a1[242] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 488) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 876);
  *((_DWORD *)a1 + 489) = 19;
  a1[248] = (uint64_t)"agc.sampler_unique_id";
  a1[249] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 240);
  a1[250] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 504) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 876);
  *((_DWORD *)a1 + 505) = 98;
  a1[256] = (uint64_t)"agc.sampler_heap_index";
  a1[257] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 232);
  a1[258] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 520) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 876);
  *((_DWORD *)a1 + 521) = 113;
  a1[264] = (uint64_t)"agc.constant_sampler_words";
  a1[265] = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 1680);
  a1[266] = (uint64_t)"constant_driver";
  a1[268] = 0x1200000040;
  a1[152] = (uint64_t)"agc.read_image_words";
  a1[153] = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 1672);
  a1[154] = (uint64_t)"image_state";
  a1[156] = 64;
  a1[160] = (uint64_t)"agc.write_image_words";
  a1[161] = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v24 - 24) + 400) + 1672);
  a1[162] = (uint64_t)"image_state";
  a1[164] = 0x600000040;
  a1[168] = (uint64_t)"agc.image_dim";
  a1[169] = llvm::FixedVectorType::get();
  a1[170] = (uint64_t)"driver_parameters";
  v25 = *a1;
  *((_DWORD *)a1 + 344) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 876);
  *((_DWORD *)a1 + 345) = 11;
  a1[176] = (uint64_t)"agc.image_array_info";
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(_QWORD *)(v25 - 24) + 392), (llvm::LLVMContext *)2);
  v27 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232);
  *(_QWORD *)&__dst = Int8PtrTy;
  *((_QWORD *)&__dst + 1) = v27;
  v145 = v27;
  a1[177] = llvm::StructType::get();
  a1[178] = (uint64_t)"driver_parameters";
  v28 = *a1;
  *((_DWORD *)a1 + 360) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 876);
  *((_DWORD *)a1 + 361) = 12;
  a1[192] = (uint64_t)"agc.image_mipmap_count";
  a1[193] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 232);
  a1[194] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 392) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 393) = 16;
  a1[200] = (uint64_t)"agc.image_sample_count";
  a1[201] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 232);
  a1[202] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 408) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 409) = 17;
  a1[184] = (uint64_t)"agc.image_pack_format";
  a1[185] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 232);
  a1[186] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 376) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 377) = 13;
  a1[208] = (uint64_t)"agc.image_base_level";
  a1[209] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 232);
  a1[210] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 424) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 425) = 62;
  a1[224] = (uint64_t)"agc.image_unique_id";
  a1[225] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 240);
  a1[226] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 456) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 457) = 97;
  a1[216] = (uint64_t)"agc.image_heap_index";
  a1[217] = *(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 232);
  a1[218] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 440) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v28 - 24) + 400) + 876);
  *((_DWORD *)a1 + 441) = 93;
  v29 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368) = a3;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v29 - 24) + 400) + 336) = *(uint64_t *)((char *)a1
                                                                                         + *(_QWORD *)(v29 - 24)
                                                                                         + 368);
  *(_BYTE *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v29 - 24) + 400) + 808) = (*((_DWORD *)a1 + 55) & 0xFFFFFFF7) == 3;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v29 - 24) + 400) + 344) = (char *)a1 + *(_QWORD *)(v29 - 24) + 2776;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v29 - 24) + 400) + 352) = (char *)a1 + *(_QWORD *)(v29 - 24) + 2856;
  v30 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(v29 - 24) + 368);
  *(_QWORD *)&__dst = "air.compile_options";
  v146 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v30, (const llvm::Twine *)&__dst);
  if (NamedMetadata)
  {
    v32 = (llvm::NamedMDNode *)NamedMetadata;
    v33 = 0;
    while (v33 < llvm::NamedMDNode::getNumOperands(v32))
    {
      Operand = llvm::NamedMDNode::getOperand(v32);
      ++v33;
      if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)), "air.compile.fast_math_disable"))
      {
        *v11 = 0;
        break;
      }
    }
    llvm::NamedMDNode::eraseFromParent(v32);
  }
  v35 = (uint64_t *)(a3 + 168);
  if ((*(char *)(a3 + 191) & 0x80000000) == 0)
  {
    v36 = *(unsigned __int8 *)(a3 + 191);
    if (v36 != 20)
    {
      if (v36 != 22)
        goto LABEL_30;
      goto LABEL_24;
    }
LABEL_32:
    v44 = (uint64_t *)*v35;
    v45 = v35[1];
    v46 = *((_DWORD *)v35 + 4);
    v42 = v44 == (uint64_t *)0x535F786574726556 && v45 == 0x6F72505F65746174 && v46 == 1835102823;
    goto LABEL_38;
  }
  v37 = *(_QWORD *)(a3 + 176);
  if (v37 == 20)
  {
    v35 = (uint64_t *)*v35;
    goto LABEL_32;
  }
  if (v37 == 22)
  {
    v35 = (uint64_t *)*v35;
LABEL_24:
    v38 = (uint64_t *)*v35;
    v39 = v35[1];
    v40 = *(uint64_t *)((char *)v35 + 14);
    v42 = v38 == (uint64_t *)0x746E656D67617246 && v39 == 0x505F65746174535FLL && v40 == 0x6D6172676F72505FLL;
LABEL_38:
    v43 = v42;
    goto LABEL_41;
  }
LABEL_30:
  v43 = 0;
LABEL_41:
  *((_BYTE *)a1 + 14) |= v43;
  v48 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368);
  *(_QWORD *)&__dst = "air.language_version";
  v146 = 259;
  v49 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v48, (const llvm::Twine *)&__dst);
  if (v49)
  {
    v50 = llvm::NamedMDNode::getOperand(v49);
    if (v50)
    {
      if (isStringMDNode(*(llvm::MDString **)(v50 - 8 * *(unsigned int *)(v50 + 8)), "OpenGL ES GLSL"))
        *((_BYTE *)a1 + 14) = 1;
    }
  }
  v51 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368);
  *(_QWORD *)&__dst = "llvm.module.flags";
  v146 = 259;
  v52 = llvm::Module::getNamedMetadata(v51, (const llvm::Twine *)&__dst);
  if (v52)
  {
    v53 = (llvm::NamedMDNode *)v52;
    v54 = 0;
LABEL_47:
    if (v54 < llvm::NamedMDNode::getNumOperands(v53))
    {
      v55 = llvm::NamedMDNode::getOperand(v53);
      v56 = 8 - 8 * *(unsigned int *)(v55 + 8);
      do
      {
        if (!v56)
        {
          ++v54;
          goto LABEL_47;
        }
        v57 = isStringMDNode(*(llvm::MDString **)(v55 + v56), "SDK Version");
        v56 += 8;
      }
      while (!v57);
      a1[7] = 0;
      v58 = *(unsigned __int8 **)(v55 - 8 * *(unsigned int *)(v55 + 8) + 16);
      if (v58 && *v58 - 1 <= 1)
      {
        v59 = *((_QWORD *)v58 + 16);
        if ((*(_BYTE *)(v59 + 16) & 0xFE) != 0xE)
          v59 = 0;
        a1[7] = v59;
      }
    }
  }
  v60 = *((_BYTE *)a1 + 32);
  if (v60)
    v61 = 1;
  else
    v61 = a6;
  *((_BYTE *)a1 + 34) = v61;
  *((_BYTE *)a1 + 36) = v61;
  *((_BYTE *)a1 + 35) = v61;
  *((_BYTE *)a1 + 33) = v60;
  v62 = *a1;
  v63 = *(_QWORD *)(*a1 - 24) + 32;
  v64 = *(uint64_t *)((char *)a1 + v63 + 336);
  v65 = v64 + 24;
  v66 = *(_QWORD *)(v64 + 32);
  if (v66 != v65)
  {
    do
    {
      v67 = *(_QWORD *)(v66 + 8);
      llvm::Function::removeFnAttr();
      llvm::Function::removeFnAttr();
      llvm::Function::removeFnAttr();
      v66 = v67;
    }
    while (v67 != v65);
    v62 = *a1;
    v63 = *(_QWORD *)(*a1 - 24) + 32;
  }
  v68 = (uint64_t)a1 + v63;
  v69 = *(_DWORD *)((char *)a1 + 33);
  if ((v69 & 1) != 0)
    v70 = -1;
  else
    v70 = 16;
  if ((v69 & 0x100) != 0)
    v70 |= 6u;
  *(_DWORD *)(v68 + 104) = v70 | (v69 >> 13) & 8;
  v71 = *(_DWORD *)((char *)a1 + 33);
  if ((v71 & 1) != 0)
    v72 = -1;
  else
    v72 = 16;
  if ((v71 & 0x100) != 0)
    v72 |= 6u;
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v62 - 24) + 400) + 104) = v72 | (v71 >> 13) & 8;
  v73 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(v62 - 24) + 368);
  *(_QWORD *)&__dst = "air.visible";
  v146 = 259;
  v74 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v73, (const llvm::Twine *)&__dst);
  if (v74)
  {
    v75 = v74;
    NumOperands = llvm::NamedMDNode::getNumOperands(v74);
    if (NumOperands)
    {
      v77 = NumOperands;
      v78 = 0;
      while (1)
      {
        v79 = llvm::NamedMDNode::getOperand(v75);
        v80 = *(unsigned __int8 **)(v79 - 8 * *(unsigned int *)(v79 + 8));
        if (v80)
        {
          if (*v80 - 1 <= 1)
          {
            v81 = v79;
            v82 = (llvm::Value *)*((_QWORD *)v80 + 16);
            if (v82 && *((_BYTE *)v82 + 16) == 0)
            {
              v84 = (llvm::StringMapImpl *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 3288);
              Name = llvm::Value::getName(v82);
              v87 = v86;
              v88 = llvm::StringMapImpl::LookupBucketFor();
              v89 = *(_QWORD *)v84;
              v90 = *(_QWORD *)(*(_QWORD *)v84 + 8 * v88);
              if (!v90)
                goto LABEL_87;
              if (v90 == -8)
                break;
            }
          }
        }
LABEL_90:
        if (v77 == ++v78)
          goto LABEL_91;
      }
      --*((_DWORD *)v84 + 4);
LABEL_87:
      __src = (void *)Name;
      v142 = v89;
      v91 = MEMORY[0x1CAA2C6C0](v87 + 17, 8);
      v92 = (_QWORD *)v91;
      v93 = v91 + 16;
      if (v87)
        memcpy((void *)(v91 + 16), __src, v87);
      *(_BYTE *)(v93 + v87) = 0;
      *v92 = v87;
      v92[1] = v81;
      *(_QWORD *)(v142 + 8 * v88) = v92;
      ++*((_DWORD *)v84 + 3);
      llvm::StringMapImpl::RehashTable(v84);
      goto LABEL_90;
    }
  }
LABEL_91:
  v94 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368);
  v95 = 1;
  HIBYTE(v146) = 1;
  if (*a4)
  {
    *(_QWORD *)&__dst = a4;
    v95 = 3;
  }
  LOBYTE(v146) = v95;
  v96 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v94, (const llvm::Twine *)&__dst);
  a1[8] = (uint64_t)v96;
  if (*((_BYTE *)a1 + 15))
  {
    MEMORY[0x1CAA2D494]((char *)a1 + *(_QWORD *)(*a1 - 24) + 3224, "dylib");
  }
  else
  {
    v99 = llvm::NamedMDNode::getOperand(v96);
    a1[22] = 0;
    v100 = *(unsigned __int8 **)(v99 - 8 * *(unsigned int *)(v99 + 8));
    if (v100 && *v100 - 1 <= 1)
    {
      v101 = (llvm::Value *)*((_QWORD *)v100 + 16);
      if (*((_BYTE *)v101 + 16))
        v102 = 0;
      else
        v102 = v101;
      a1[22] = (uint64_t)v102;
    }
    else
    {
      v102 = 0;
    }
    v103 = (_QWORD *)llvm::Value::getName(v102);
    if (v104 == 23)
    {
      v105 = *v103 == 0x747265762E726961 && v103[1] == 0x4668637465467865;
      if (v105 && *(_QWORD *)((char *)v103 + 15) == 0x6E6F6974636E7546)
      {
        v107 = *(_QWORD *)(a1[22] + 80);
        v108 = v107 - 24;
        if (!v107)
          v108 = 0;
        v109 = *(_QWORD *)(v108 + 40);
        if (v109 == v108 + 40)
        {
          v112 = 0;
        }
        else
        {
          v110 = v109 - 24;
          if (v109)
            v111 = v109 - 24;
          else
            v111 = 0;
          if (*(unsigned __int8 *)(v111 + 16) - 29 >= 0xB)
            v112 = 0;
          else
            v112 = v110;
        }
        if (*(_BYTE *)(v112 + 16) == 29)
          v113 = v112;
        else
          v113 = 0;
        v114 = *(_DWORD *)(v113 + 20) & 0x7FFFFFF;
        if ((_DWORD)v114 && (v115 = *(_QWORD *)(v113 - 32 * v114)) != 0)
        {
          v116 = *(unsigned __int8 *)(v115 + 16);
        }
        else
        {
          v117 = *(_QWORD *)(v113 + 24);
          v115 = v117 - 24;
          if (v117)
            v118 = v117 - 24;
          else
            v118 = 0;
          v116 = *(unsigned __int8 *)(v118 + 16);
        }
        if (v116 == 84)
        {
          v119 = *(_QWORD *)(v115 - 32);
          if (!v119 || *(_BYTE *)(v119 + 16) || *(_QWORD *)(v119 + 24) != *(_QWORD *)(v115 + 72))
            v119 = 0;
          if (v119)
            v102 = (llvm::Value *)v119;
        }
      }
    }
    v143 = *((_QWORD *)v102 + 14);
    *(_QWORD *)&__dst = llvm::AttributeList::getAttributeAtIndex();
    if (llvm::Attribute::isStringAttribute((llvm::Attribute *)&__dst))
    {
      ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&__dst);
      if (v121 == 10 && *(_QWORD *)ValueAsString == 0x696F706563617274 && *(_WORD *)(ValueAsString + 8) == 29806)
        *((_BYTE *)a1 + 45) = 1;
    }
    v123 = (void *)llvm::Value::getName(v102);
    if (v123)
    {
      std::string::basic_string[abi:nn180100](&__dst, v123, v124);
    }
    else
    {
      __dst = 0uLL;
      v145 = 0;
    }
    v125 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v126 = v125 + 3224;
    if (*(char *)(v125 + 3247) < 0)
      operator delete(*(void **)v126);
    *(_OWORD *)v126 = __dst;
    *(_QWORD *)(v126 + 16) = v145;
    v127 = (void *)llvm::Value::getName(v102);
    if (v127)
    {
      std::string::basic_string[abi:nn180100](&__dst, v127, v128);
    }
    else
    {
      __dst = 0uLL;
      v145 = 0;
    }
    v129 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v130 = v129 + 3248;
    if (*(char *)(v129 + 3271) < 0)
      operator delete(*(void **)v130);
    *(_OWORD *)v130 = __dst;
    *(_QWORD *)(v130 + 16) = v145;
    v131 = a1[22];
    if (**(_QWORD **)(*(_QWORD *)(v131 + 24) + 16) != *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 176))
      a1[9] = *(_QWORD *)(v99 - 8 * *(unsigned int *)(v99 + 8) + 8);
    v132 = *(_QWORD *)(v131 + 96);
    if (v132)
    {
      v133 = *(_QWORD *)(v99 - 8 * *(unsigned int *)(v99 + 8) + 16);
      a1[10] = v133;
      v134 = *((unsigned int *)a1 + 24);
      if (v132 != v134)
      {
        if (v132 >= v134)
        {
          if (v132 > (unint64_t)*((unsigned int *)a1 + 25))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v134 = *((unsigned int *)a1 + 24);
          }
          if (v134 != v132)
            bzero((void *)(*v138 + 8 * v134), 8 * v132 - 8 * v134);
        }
        *((_DWORD *)a1 + 24) = v132;
        v133 = a1[10];
      }
      v135 = *(unsigned int *)(v133 + 8);
      if ((_DWORD)v135)
      {
        for (i = 0; i < v135; ++i)
        {
          v137 = *(_QWORD *)(v133 - 8 * v135 + 8 * i);
          LODWORD(v143) = 0;
          LODWORD(__dst) = 0;
          parseMDInt(0, v137, (unsigned int *)&__dst, &v143);
          *(_QWORD *)(a1[11] + 8 * v143) = v137;
          v133 = a1[10];
          v135 = *(unsigned int *)(v133 + 8);
        }
      }
    }
  }
  v97 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v97 - 24)) = a2[4];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) = a2[5];
  a1[530] = 4;
  a1[532] = 0;
  a1[531] = 0;
  a1[533] = 4;
  a1[535] = 0;
  a1[534] = 0;
  a1[536] = 4;
  a1[537] = 0;
  a1[539] = 0;
  a1[538] = 0;
  return a1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::instructionIsIndirectOrExternCall(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v2 = *(_QWORD *)(a1 - 32);
  if (v2 && !*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a1 + 72))
    return AGCLLVMUserObject::functionIsUserExternDeclaration(*(AGCLLVMUserObject **)(a1 - 32), a2);
  else
    return 1;
}

uint64_t AGCLLVMUserObject::functionIsUserExternDeclaration(AGCLLVMUserObject *this, const llvm::Function *a2)
{
  uint64_t result;
  _DWORD *Name;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;

  result = llvm::GlobalValue::isDeclaration(this);
  if ((_DWORD)result)
  {
    if ((*((_WORD *)this + 16) & 0x200F) != 0)
      return 0;
    Name = (_DWORD *)llvm::Value::getName(this);
    if (v5 >= 4 && *Name == 778266465)
      return 0;
    v6 = (_DWORD *)llvm::Value::getName(this);
    if (v7 >= 4 && *v6 == 779250017)
    {
      return 0;
    }
    else
    {
      v8 = (_DWORD *)llvm::Value::getName(this);
      return v9 < 4 || *v8 != 779642721;
    }
  }
  return result;
}

uint64_t llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(this + 24))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 16);
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
      this = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)this);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return this;
}

uint64_t AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  char *v8;
  int Key;
  int v10;
  const char *v11;
  unint64_t v12;
  int String;
  char *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  flatbuffers::FlatBufferBuilder *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  _BYTE v40[16];
  uint64_t **v41;

  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v40, (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 1664);
  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 1688);
  if (v2)
  {
    if (v2 >> 62)
LABEL_47:
      abort();
    v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v2);
    v5 = &v3[4 * v4];
  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v6 = v41;
  if (v41)
  {
    v7 = v3;
    while (1)
    {
      v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)v8 + 824))
        goto LABEL_17;
      v10 = *((char *)v6 + 39);
      v11 = v10 >= 0 ? (const char *)(v6 + 2) : (const char *)v6[2];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 39) : (unint64_t)v6[3];
      String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 2568), v11, v12);
      v14 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v15 = v14 + 2568;
      v14[2638] = 1;
      v16 = *((_DWORD *)v14 + 650) - *((_DWORD *)v14 + 654) + *((_DWORD *)v14 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v14 + 2568, 4, String);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v15, 6, *((unsigned int *)v6 + 10), 0);
      v17 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v15, v16);
      v18 = v17;
      if (v7 < v5)
        break;
      v20 = (v7 - v3) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        goto LABEL_47;
      if ((v5 - v3) >> 1 > v21)
        v21 = (v5 - v3) >> 1;
      if ((unint64_t)(v5 - v3) >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v22);
      else
        v23 = 0;
      v24 = (char *)(v22 + 4 * v20);
      *(_DWORD *)v24 = v18;
      v19 = v24 + 4;
      while (v7 != v3)
      {
        v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v24 - 1) = v25;
        v24 -= 4;
      }
      v5 = (char *)(v22 + 4 * v23);
      if (v3)
        operator delete(v3);
      v3 = v24;
LABEL_18:
      v6 = (uint64_t **)*v6;
      v7 = v19;
      if (!v6)
        goto LABEL_36;
    }
    *(_DWORD *)v7 = v17;
    v7 += 4;
LABEL_17:
    v19 = v7;
    goto LABEL_18;
  }
  v19 = v3;
LABEL_36:
  v26 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v27 = (flatbuffers::FlatBufferBuilder *)(v26 + 2568);
  v26[2638] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v26 + 2568), v19 - v3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v26 + 2568), v19 - v3, 4uLL);
  v28 = v19 - v3;
  if (v19 == v3)
    v29 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>,std::allocator<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>(std::vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>> const&)::t;
  else
    v29 = v3;
  if (v19 != v3)
  {
    v30 = v28 >> 2;
    v31 = v29 - 4;
    do
    {
      v32 = v30 - 1;
      v33 = *(_DWORD *)&v31[4 * v30];
      flatbuffers::FlatBufferBuilder::Align(v27, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v27, *((_DWORD *)v26 + 650) - *((_DWORD *)v26 + 654) + *((_DWORD *)v26 + 652) - v33 + 4);
      v30 = v32;
    }
    while (v32);
  }
  v26[2638] = 0;
  v34 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v27, (unint64_t)v28 >> 2);
  v35 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v35[2638] = 1;
  v36 = *((_DWORD *)v35 + 650) - *((_DWORD *)v35 + 654) + *((_DWORD *)v35 + 652);
  if (v34)
  {
    v37 = v34;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v35 + 2568), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35 + 2568, 4, *((_DWORD *)v35 + 650) - *((_DWORD *)v35 + 654) + *((_DWORD *)v35 + 652) - v37 + 4);
  }
  v38 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v35 + 2568), v36);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v40);
  if (v3)
    operator delete(v3);
  return v38;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a1 + 70) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, v6, 4uLL);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      v10 = *(_DWORD *)(v7 + 4 * v8);
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      v8 = v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, a3);
}

uint64_t AGCLLVMUserObject::constructFlatReply(AGCLLVMUserObject *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  _OWORD *v7;
  _OWORD *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  const unsigned __int8 *v27;
  char *v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  BOOL v34;
  char *v35;
  _BOOL8 v36;
  void **v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  void **v55;
  void **v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  int v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  const char *v76;
  unint64_t v77;
  int String;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  char *v98;
  char *v99;
  __int16 v100;
  __int16 v101;
  char *v102;
  char *v103;
  int v104;
  _BOOL4 v106;
  int v107;
  int v108;
  int v109;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *__p;
  _BYTE *v120;
  uint64_t v121;
  void *v122[2];
  uint64_t v123;
  uint64_t v124;
  void **p_p;

  v2 = *((_QWORD *)this + 112);
  v3 = *((_QWORD *)this + 113);
  v117 = *((_QWORD *)this + 116);
  v118 = *((_QWORD *)this + 115);
  v115 = v3;
  v116 = v2;
  if (v2 == v3)
  {
    v114 = 0;
  }
  else
  {
    if (v3 - v2 < 0)
      goto LABEL_168;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((v3 - v2) >> 4);
    v6 = v4;
    v7 = (_OWORD *)*((_QWORD *)this + 112);
    v8 = (_OWORD *)*((_QWORD *)this + 113);
    if (v7 == v8)
    {
      v13 = v4;
    }
    else
    {
      v9 = v4;
      v10 = &v4[4 * v5];
      do
      {
        *(_OWORD *)v122 = *v7;
        v11 = AIRConstSampler::constructFlatReply((AIRConstSampler *)v122, (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
        v12 = v11;
        if (v9 >= v10)
        {
          v14 = (v9 - v6) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            goto LABEL_168;
          if ((v10 - v6) >> 1 > v15)
            v15 = (v10 - v6) >> 1;
          if ((unint64_t)(v10 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v16);
          else
            v17 = 0;
          v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)v18 = v12;
          v13 = v18 + 4;
          while (v9 != v6)
          {
            v19 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v10 = (char *)(v16 + 4 * v17);
          if (v6)
            operator delete(v6);
          v6 = v18;
        }
        else
        {
          *(_DWORD *)v9 = v11;
          v13 = v9 + 4;
        }
        ++v7;
        v9 = v13;
      }
      while (v7 != v8);
    }
    if (v13 == v6)
      v20 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>> const&)::t;
    else
      v20 = v6;
    v114 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v20, (v13 - v6) >> 2);
    if (v6)
      operator delete(v6);
  }
  if (v118 == v117)
  {
    v112 = 0;
    v113 = 0;
  }
  else
  {
    v122[0] = 0;
    v122[1] = 0;
    v123 = 0;
    __p = 0;
    v120 = 0;
    v121 = 0;
    std::vector<unsigned long long>::reserve(v122, (uint64_t)(*((_QWORD *)this + 116) - *((_QWORD *)this + 115)) >> 4);
    std::vector<unsigned long long>::reserve(&__p, (uint64_t)(*((_QWORD *)this + 116) - *((_QWORD *)this + 115)) >> 4);
    v21 = (uint64_t *)*((_QWORD *)this + 115);
    v22 = (uint64_t *)*((_QWORD *)this + 116);
    p_p = v122;
    if (v21 != v22)
    {
      do
      {
        v23 = *v21;
        v21 += 2;
        v124 = v23;
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&p_p, &v124);
      }
      while (v21 != v22);
      v24 = *((_QWORD *)this + 115);
      v25 = *((_QWORD *)this + 116);
      p_p = &__p;
      while (v24 != v25)
      {
        v124 = *(_QWORD *)(v24 + 8);
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&p_p, &v124);
        v24 += 16;
      }
    }
    if (v122[1] == v122[0])
      v26 = (const unsigned __int8 *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
    else
      v26 = (const unsigned __int8 *)v122[0];
    v113 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v26, ((char *)v122[1] - (char *)v122[0]) >> 3);
    if (v120 == __p)
      v27 = (const unsigned __int8 *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
    else
      v27 = (const unsigned __int8 *)__p;
    v112 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v27, (v120 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v120 = __p;
      operator delete(__p);
    }
    if (v122[0])
    {
      v122[1] = v122[0];
      operator delete(v122[0]);
    }
  }
  v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v28 + 176))(v28) == 2
    || (*(unsigned int (**)(char *))(*(_QWORD *)v28 + 176))(v28) == 1)
  {
    v29 = (unsigned int **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v30 = v29[50];
    if (v29[87])
    {
      v31 = v29 + 87;
      if (!v29[88])
        v31 = v29 + 157;
    }
    else
    {
      v31 = v29 + 157;
    }
    v33 = *v31;
    v32 = v31[1];
    if (v33)
      v34 = v32 == 0;
    else
      v34 = 1;
    if (v34)
      v35 = 0;
    else
      v35 = (char *)v33 + *v33;
    v36 = (*((unsigned int (**)(unsigned int **))*v29 + 22))(v29) == 2;
    (*(void (**)(void **__return_ptr, unsigned int *, char *, _BOOL8))(*(_QWORD *)v30 + 928))(v122, v30, v35, v36);
    v37 = (void **)v122[0];
    if (v122[0] == &v122[1])
    {
      v38 = 0;
      v39 = 0;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v42 = v41 + 2472;
        v44 = *((_DWORD *)v37 + 7);
        v43 = *((_DWORD *)v37 + 8);
        v41[2542] = 1;
        v45 = *((_DWORD *)v41 + 626) - *((_DWORD *)v41 + 630) + *((_DWORD *)v41 + 628);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v41 + 2472, 6, v43);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 4, v44);
        v46 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v42, v45);
        v47 = v46;
        if (v39 >= v40)
        {
          v48 = (v39 - v38) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            goto LABEL_168;
          if ((v40 - v38) >> 1 > v49)
            v49 = (v40 - v38) >> 1;
          if ((unint64_t)(v40 - v38) >= 0x7FFFFFFFFFFFFFFCLL)
            v50 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v50 = v49;
          if (v50)
          {
            if (v50 >> 62)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v51 = (char *)operator new(4 * v50);
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[4 * v48];
          *(_DWORD *)v52 = v47;
          v53 = v52 + 4;
          while (v39 != v38)
          {
            v54 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v52 - 1) = v54;
            v52 -= 4;
          }
          v40 = &v51[4 * v50];
          if (v38)
            operator delete(v38);
          v38 = v52;
          v39 = v53;
        }
        else
        {
          *(_DWORD *)v39 = v46;
          v39 += 4;
        }
        v55 = (void **)v37[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (void **)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (void **)v37[2];
            v34 = *v56 == v37;
            v37 = v56;
          }
          while (!v34);
        }
        v37 = v56;
      }
      while (v56 != &v122[1]);
    }
    v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v57[2542] = 1;
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v57 + 2472), v39 - v38, 4uLL);
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v57 + 2472), v39 - v38, 4uLL);
    v58 = v39 - v38;
    if (v58)
      v59 = v38;
    else
      v59 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>> const&)::t;
    if (v58)
    {
      v60 = v58 >> 2;
      v61 = v59 - 4;
      do
      {
        v62 = v60 - 1;
        v63 = *(_DWORD *)&v61[4 * v60];
        flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v57 + 2472), 4uLL);
        flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v57 + 2472), *((_DWORD *)v57 + 626) - *((_DWORD *)v57 + 630) + *((_DWORD *)v57 + 628) - v63 + 4);
        v60 = v62;
      }
      while (v62);
    }
    v57[2542] = 0;
    v64 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v57 + 2472), (unint64_t)v58 >> 2);
    if (v38)
      operator delete(v38);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((_QWORD *)v122[1]);
  }
  else
  {
    v64 = 0;
  }
  if (!*((_DWORD *)this + 935))
  {
    v71 = 0;
    goto LABEL_142;
  }
  v65 = *((_QWORD *)this + 470);
  v66 = *((_QWORD *)this + 469);
  v67 = v65 - v66;
  if (v65 == v66)
  {
    v68 = 0;
    v70 = 0;
    goto LABEL_105;
  }
  if (v67 < 0)
LABEL_168:
    abort();
  v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v67 >> 5);
  v70 = &v68[4 * v69];
  v66 = *((_QWORD *)this + 469);
  v65 = *((_QWORD *)this + 470);
LABEL_105:
  v111 = v64;
  if (v66 == v65)
  {
    v84 = v68;
  }
  else
  {
    v72 = v68;
    do
    {
      v73 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v74 = v73 + 2472;
      v75 = *(char *)(v66 + 23);
      if (v75 >= 0)
        v76 = (const char *)v66;
      else
        v76 = *(const char **)v66;
      if (v75 >= 0)
        v77 = *(unsigned __int8 *)(v66 + 23);
      else
        v77 = *(_QWORD *)(v66 + 8);
      String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v73 + 2472), v76, v77);
      v79 = *(_DWORD *)(v66 + 24);
      v80 = String;
      v73[2542] = 1;
      v81 = *((_DWORD *)v73 + 626) - *((_DWORD *)v73 + 630) + *((_DWORD *)v73 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v74, 6, v79);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v74, 4, v80);
      v82 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v74, v81);
      v83 = v82;
      if (v72 >= v70)
      {
        v85 = (v72 - v68) >> 2;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62)
          goto LABEL_168;
        if ((v70 - v68) >> 1 > v86)
          v86 = (v70 - v68) >> 1;
        if ((unint64_t)(v70 - v68) >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
          v87 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v87);
        else
          v88 = 0;
        v89 = (char *)(v87 + 4 * v85);
        *(_DWORD *)v89 = v83;
        v84 = v89 + 4;
        while (v72 != v68)
        {
          v90 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v89 - 1) = v90;
          v89 -= 4;
        }
        v70 = (char *)(v87 + 4 * v88);
        if (v68)
          operator delete(v68);
        v68 = v89;
      }
      else
      {
        *(_DWORD *)v72 = v82;
        v84 = v72 + 4;
      }
      v66 += 32;
      v72 = v84;
    }
    while (v66 != v65);
  }
  v91 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v91[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v91 + 2472), v84 - v68, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v91 + 2472), v84 - v68, 4uLL);
  v92 = v84 - v68;
  if (v84 == v68)
    v93 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>> const&)::t;
  else
    v93 = v68;
  if (v84 != v68)
  {
    v94 = v92 >> 2;
    v95 = v93 - 4;
    do
    {
      v96 = v94 - 1;
      v97 = *(_DWORD *)&v95[4 * v94];
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v91 + 2472), 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v91 + 2472), *((_DWORD *)v91 + 626) - *((_DWORD *)v91 + 630) + *((_DWORD *)v91 + 628) - v97 + 4);
      v94 = v96;
    }
    while (v96);
  }
  v91[2542] = 0;
  v71 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v91 + 2472), (unint64_t)v92 >> 2);
  if (v68)
    operator delete(v68);
  v64 = v111;
LABEL_142:
  v98 = (char *)AGCLLVMObject::constructFlatReply((AGCLLVMUserObject *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24)));
  v99 = v98;
  v101 = v100;
  if (v116 != v115)
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v98, v114);
  if (v118 != v117)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v99, 12, v113);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v99, 64, v112);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 20, *((unsigned __int8 *)this + 45), 0);
  if (*((_BYTE *)this + 3566))
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 22, *((_QWORD *)this + 458), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 24, *((_QWORD *)this + 459), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 26, *((_QWORD *)this + 460), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 28, *((_QWORD *)this + 461), 0);
  }
  if (*((_BYTE *)this + 3696))
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 30, *((_QWORD *)this + 463), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 32, *((_DWORD *)this + 930));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 76, *((_DWORD *)this + 931));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 78, *((_QWORD *)this + 466), 0);
  v102 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v102 + 176))(v102) == 2)
  {
    if (!v64)
      goto LABEL_153;
    goto LABEL_152;
  }
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v102 + 176))(v102) == 1 && v64 != 0)
  {
LABEL_152:
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)v99, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 34, *((_DWORD *)v99 + 8) - *((_DWORD *)v99 + 12) + *((_DWORD *)v99 + 10) - v64 + 4);
  }
LABEL_153:
  v103 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v104 = (*(unsigned int (**)(char *))(*(_QWORD *)v103 + 176))(v103) == 2
      || (*(uint64_t (**)(char *))(*(_QWORD *)v103 + 176))(v103) == 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 36, v104, 0);
  v106 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 176))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 2;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 38, v106, 0);
  v107 = *((_DWORD *)this + 934);
  if (v107)
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 72, v107);
  v108 = *((_DWORD *)this + 935);
  if (v108)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 44, v108);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 46, *((_DWORD *)this + 936));
    if (v71)
    {
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)v99, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 48, *((_DWORD *)v99 + 8) - *((_DWORD *)v99 + 12) + *((_DWORD *)v99 + 10) - v71 + 4);
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 52, *((unsigned __int8 *)this + 10), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 54, *((unsigned __int8 *)this + 11), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v99, 56, *((unsigned __int8 *)this + 13), 0);
  v109 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 24))(this);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 66, v109);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 68, *((_QWORD *)this + 479), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 58, *((_QWORD *)this + 480), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 60, *((_QWORD *)this + 481), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v99, 62, *((_QWORD *)this + 482), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v99, 74, *((_DWORD *)this + 966));
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v99, v101);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t AGCLLVMObject::isBufferBoundsChecksEnabled(AGCLLVMObject *this)
{
  uint64_t result;

  if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) != 2)
  {
    result = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this);
    if ((_DWORD)result == 1)
      return result;
    if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) != 3)
      return (*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 4;
  }
  return 1;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v2 - 16);
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 - 32));
      v2 -= 40;
    }
    while (v2 != v3);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow((uint64_t *)a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow((uint64_t *)a1);
    }
  }
  return v2;
}

uint64_t llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

llvm::ValueHandleBase *llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::ValueHandleBase *v5;

  v2 = *((_QWORD *)this + 2);
  v3 = a2[2];
  if (v2 != v3)
  {
    v5 = this;
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
    {
      this = (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList(this);
      v3 = a2[2];
    }
    *((_QWORD *)v5 + 2) = v3;
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToExistingUseList(v5, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v4 - 8) = a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EB7D80;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EB7DA8;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7ECE6B0;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

llvm::ValueHandleBase *llvm::ValueHandleBase::ValueHandleBase(llvm::ValueHandleBase *this, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;

  *(_QWORD *)this = 2 * a2;
  *((_QWORD *)this + 1) = 0;
  v4 = a3[2];
  *((_QWORD *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  return this;
}

uint64_t AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Impl;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  _QWORD v18[2];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  v7 = llvm::User::operator new((llvm::User *)0x58);
  if (**(_BYTE **)(a3 + 24))
  {
    v17[0] = *(void **)(a3 + 24);
    v18[0] = "_indirect";
    v8 = 771;
  }
  else
  {
    v17[0] = "_indirect";
    v8 = 259;
  }
  v19 = v8;
  llvm::GlobalVariable::GlobalVariable();
  if (*(_QWORD *)(a3 + 40))
    strlen(*(const char **)(a3 + 40));
  llvm::GlobalObject::setSection();
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, v9);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v10 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v10)
  {
    v11 = *a2;
    v12 = 32 * v10;
    do
    {
      v11 += 32;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, Impl);
      v12 -= 32;
    }
    while (v12);
  }
  v14 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 376);
  v15 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14, v15);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)a3, v7);
  *(_QWORD *)(a3 + 48) = v6;
  if (v17[0] != v18)
    free(v17[0]);
  return v7;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(char *result, uint64_t a2, int a3)
{
  char *v5;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;

  v3 = a3;
  *((_BYTE *)a1 + 70) = 1;
  v6 = 8 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 8 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 8uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

void llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  int v4;
  char *v5;
  llvm::ValueHandleBase *v6;
  char *v7;
  char *v8;
  int v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = (char *)*a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4)
  {
    v5 = &v3[40 * v4];
    v6 = (llvm::ValueHandleBase *)(v2 + 8);
    v7 = v3 + 8;
    do
    {
      *((_DWORD *)v6 - 2) = *((_DWORD *)v7 - 2);
      llvm::ValueHandleBase::ValueHandleBase(v6, 2u, v7);
      *((_DWORD *)v6 + 6) = *((_DWORD *)v7 + 6);
      v6 = (llvm::ValueHandleBase *)((char *)v6 + 40);
      v8 = v7 + 32;
      v7 += 40;
    }
    while (v8 != v5);
    v3 = (char *)*a1;
    v9 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v9 = 0;
  }
  llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range((uint64_t)v3, (uint64_t)&v3[40 * v9]);
  if ((uint64_t *)*a1 != a1 + 2)
    free((void *)*a1);
  *a1 = v2;
  *((_DWORD *)a1 + 3) = 0;
}

flatbuffers::FlatBufferBuilder *AGCLLVMObject::constructFlatReply(AGCLLVMObject *this)
{
  flatbuffers::FlatBufferBuilder *v2;
  const char *v3;
  size_t v4;
  int String;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  BOOL v18;
  int *v19;
  unsigned __int16 *v20;
  int *v21;
  unsigned __int16 *v22;
  _BOOL4 v23;
  unsigned int *v24;
  int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int *v28;
  unsigned __int16 *v29;
  unsigned int **v30;
  int *v31;
  unsigned __int16 *v32;
  int *v33;
  unsigned __int16 *v34;
  unsigned int **v35;
  int *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  int *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  _DWORD *v42;
  int *v43;
  unsigned int *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int *v47;
  unsigned __int16 *v48;
  uint64_t v49;
  _DWORD *v50;
  const unsigned __int8 *v51;
  void *v52;
  int8x8_t v53;
  int *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  int *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int *v60;
  const char *v61;
  unint64_t v62;
  int v63;
  int v64;
  void **v65;
  uint64_t *p_p_p;
  unint64_t v67;
  unint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t **v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  void **p_p;
  char *v81;
  unsigned __int8 v82;
  void *__p;
  int8x8_t v84;
  uint64_t v85;
  int v86;

  v2 = (AGCLLVMObject *)((char *)this + 2472);
  v3 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 56))(this);
  v4 = strlen(v3);
  String = flatbuffers::FlatBufferBuilder::CreateString(v2, v3, v4);
  v6 = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 80))(this);
  LOBYTE(__p) = v6;
  if (v6)
    v7 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(v2, (const unsigned __int8 *)&__p, 1uLL);
  else
    v7 = 0;
  v86 = 0;
  v8 = *((_QWORD *)this + 87);
  if (!*((_BYTE *)this + 1616))
  {
    if (v8)
    {
      v14 = (char *)this + 1256;
      v15 = 696;
      if (*((_QWORD *)this + 88))
        v14 = (char *)this + 696;
      else
        v15 = 1256;
      v16 = *(unsigned int **)((char *)this + v15);
      v17 = *((_QWORD *)v14 + 1);
      if (v16)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (v18)
      {
LABEL_65:
        v23 = 0;
        goto LABEL_108;
      }
    }
    else
    {
      v23 = 0;
      v16 = (unsigned int *)*((_QWORD *)this + 157);
      if (!v16 || !*((_QWORD *)this + 158))
        goto LABEL_108;
      v17 = 1;
    }
    v31 = 0;
    if (v16 && v17)
      v31 = (int *)((char *)v16 + *v16);
    v32 = (unsigned __int16 *)((char *)v31 - *v31);
    if (*v32 < 5u)
    {
      v33 = 0;
    }
    else
    {
      v33 = (int *)v32[2];
      if (v33)
        v33 = (int *)((char *)v33 + (_QWORD)v31 + *(unsigned int *)((char *)v33 + (_QWORD)v31));
    }
    v34 = (unsigned __int16 *)((char *)v33 - *v33);
    if (*v34 >= 0x39u && v34[28])
    {
      if (v8)
      {
        if (*((_QWORD *)this + 88))
          v35 = (unsigned int **)((char *)this + 696);
        else
          v35 = (unsigned int **)((char *)this + 1256);
      }
      else
      {
        v35 = (unsigned int **)((char *)this + 1256);
      }
      v54 = 0;
      if (*v35 && v35[1])
        v54 = (int *)((char *)*v35 + **v35);
      v55 = (unsigned __int16 *)((char *)v54 - *v54);
      if (*v55 >= 5u && (v56 = v55[2]) != 0)
        v57 = (int *)((char *)v54 + v56 + *(unsigned int *)((char *)v54 + v56));
      else
        v57 = 0;
      v58 = (unsigned __int16 *)((char *)v57 - *v57);
      if (*v58 >= 0x39u && (v59 = v58[28]) != 0)
        v60 = (unsigned int *)((char *)v57 + v59 + *(unsigned int *)((char *)v57 + v59));
      else
        v60 = 0;
      v23 = AGCLLVMObject::extractPhaseOffsets((uint64_t)this, v60, &v86);
      goto LABEL_108;
    }
    goto LABEL_65;
  }
  if (v8)
  {
    v9 = (char *)this + 1256;
    v10 = 696;
    if (*((_QWORD *)this + 88))
      v9 = (char *)this + 696;
    else
      v10 = 1256;
    v11 = *(unsigned int **)((char *)this + v10);
    v12 = *((_QWORD *)v9 + 1);
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_37;
  }
  else
  {
    v11 = (unsigned int *)*((_QWORD *)this + 157);
    if (!v11 || !*((_QWORD *)this + 158))
      goto LABEL_37;
    v12 = 1;
  }
  v19 = 0;
  if (v11 && v12)
    v19 = (int *)((char *)v11 + *v11);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 < 5u)
  {
    v21 = 0;
  }
  else
  {
    v21 = (int *)v20[2];
    if (v21)
      v21 = (int *)((char *)v21 + (_QWORD)v19 + *(unsigned int *)((char *)v21 + (_QWORD)v19));
  }
  v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 0x39u && v22[28])
    goto LABEL_45;
LABEL_37:
  v23 = 0;
  v24 = (unsigned int *)*((_QWORD *)this + 203);
  if (v24 && *((_QWORD *)this + 204))
  {
    v25 = (int *)((char *)v24 + *v24);
    v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 5u && (v27 = v26[2]) != 0)
      v28 = (int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    else
      v28 = 0;
    v29 = (unsigned __int16 *)((char *)v28 - *v28);
    if (*v29 >= 0x39u && v29[28])
    {
LABEL_45:
      if (v8)
      {
        if (*((_QWORD *)this + 88))
          v30 = (unsigned int **)((char *)this + 696);
        else
          v30 = (unsigned int **)((char *)this + 1256);
      }
      else
      {
        v30 = (unsigned int **)((char *)this + 1256);
      }
      v36 = 0;
      if (*v30 && v30[1])
        v36 = (int *)((char *)*v30 + **v30);
      v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 5u && (v38 = v37[2]) != 0)
        v39 = (int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
      else
        v39 = 0;
      v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 >= 0x39u && (v41 = v40[28]) != 0)
        v42 = (int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
      else
        v42 = 0;
      v43 = 0;
      v44 = (unsigned int *)*((_QWORD *)this + 203);
      if (v44 && *((_QWORD *)this + 204))
        v43 = (int *)((char *)v44 + *v44);
      v45 = (unsigned __int16 *)((char *)v43 - *v43);
      if (*v45 >= 5u && (v46 = v45[2]) != 0)
        v47 = (int *)((char *)v43 + v46 + *(unsigned int *)((char *)v43 + v46));
      else
        v47 = 0;
      v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 >= 0x39u && (v49 = v48[28]) != 0)
        v50 = (int *)((char *)v47 + v49 + *(unsigned int *)((char *)v47 + v49));
      else
        v50 = 0;
      __p = 0;
      v84 = 0;
      v85 = 0;
      p_p = &__p;
      v81 = (char *)this + 1664;
      AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(&p_p, v42);
      AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(&p_p, v50);
      if ((void *)v84 == __p)
        v51 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
      else
        v51 = (const unsigned __int8 *)__p;
      v86 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>(v2, v51, (uint64_t)(*(_QWORD *)&v84 - (_QWORD)__p) >> 2);
      v52 = __p;
      v53 = v84;
      if (__p)
      {
        v84 = (int8x8_t)__p;
        operator delete(__p);
      }
      v23 = *(_QWORD *)&v53 != (_QWORD)v52;
      goto LABEL_108;
    }
    goto LABEL_65;
  }
LABEL_108:
  (*(void (**)(void **__return_ptr, AGCLLVMObject *))(*(_QWORD *)this + 128))(&__p, this);
  if (v85 >= 0)
    v61 = (const char *)&__p;
  else
    v61 = (const char *)__p;
  if (v85 >= 0)
    v62 = HIBYTE(v85);
  else
    v62 = (unint64_t)v84;
  v63 = flatbuffers::FlatBufferBuilder::CreateString(v2, v61, v62);
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
  *((_BYTE *)this + 2542) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v2, 6, *((_DWORD *)this + 818));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)v2, 18, v63);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)v2, 8, String);
  if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 80))(this))
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)v2, 4, v7);
  if (v23)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)v2, 14, v86);
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)&__p, (uint64_t)this + 1664);
  (*(void (**)(void ***__return_ptr, AGCLLVMObject *))(*(_QWORD *)this + 48))(&p_p, this);
  v64 = (char)v82;
  v65 = p_p;
  if ((v82 & 0x80u) == 0)
    p_p_p = (uint64_t *)&p_p;
  else
    p_p_p = (uint64_t *)p_p;
  if ((v82 & 0x80u) == 0)
    v67 = v82;
  else
    v67 = (unint64_t)v81;
  v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](p_p_p, v67);
  v69 = v84;
  if (!*(_QWORD *)&v84)
  {
    v74 = 0;
    if (v64 < 0)
      goto LABEL_148;
    goto LABEL_149;
  }
  v70 = v68;
  v71 = (uint8x8_t)vcnt_s8(v84);
  v71.i16[0] = vaddlv_u8(v71);
  v72 = v71.u32[0];
  if (v71.u32[0] > 1uLL)
  {
    v73 = v68;
    if (v68 >= *(_QWORD *)&v84)
      v73 = v68 % *(_QWORD *)&v84;
  }
  else
  {
    v73 = (*(_QWORD *)&v84 - 1) & v68;
  }
  v75 = (uint64_t **)*((_QWORD *)__p + v73);
  if (!v75)
  {
    v74 = 0;
    goto LABEL_147;
  }
  v74 = *v75;
  if (!*v75)
    goto LABEL_147;
  while (1)
  {
    v76 = v74[1];
    if (v76 == v70)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v74 + 16, (unsigned __int8 *)&p_p))
        goto LABEL_147;
      goto LABEL_143;
    }
    if (v72 > 1)
    {
      if (v76 >= *(_QWORD *)&v69)
        v76 %= *(_QWORD *)&v69;
    }
    else
    {
      v76 &= *(_QWORD *)&v69 - 1;
    }
    if (v76 != v73)
      break;
LABEL_143:
    v74 = (uint64_t *)*v74;
    if (!v74)
      goto LABEL_147;
  }
  v74 = 0;
LABEL_147:
  if (v64 < 0)
LABEL_148:
    operator delete(v65);
LABEL_149:
  if (v74 && (*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 64))(this) != 8)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v2, 16, *((_DWORD *)v74 + 10));
    v77 = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 64))(this);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)v2, 40, (v77 < 0x1E) & (0x200002C1u >> v77), 0);
  }
  v78 = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 104))(this);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)v2, 42, v78, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)v2, 50, *((unsigned __int8 *)this + 456), 0);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
  return v2;
}

uint64_t AGCLLVMObject::requiresDebugInfo(AGCLLVMObject *this)
{
  return *((unsigned __int8 *)this + 2760);
}

uint64_t std::unordered_map<std::string,unsigned int>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void AGCLLVMObject::debugName(AGCLLVMObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 3247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 403), *((_QWORD *)this + 404));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3224);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 405);
  }
}

_QWORD *AGCLLVMObject::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.main");
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getMaxTotalThreadsPerThreadgroup(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return *((unsigned int *)this + 1816);
}

uint64_t AIRConstSampler::constructFlatReply(AIRConstSampler *this, flatbuffers::FlatBufferBuilder *a2)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  __int16 v21;
  float v22;
  float v23;
  uint64_t v24;
  int v25;
  float v26;
  uint64_t v27;
  int v28;

  *((_BYTE *)a2 + 70) = 1;
  v4 = *((_DWORD *)a2 + 8);
  v5 = *((_DWORD *)a2 + 12);
  v6 = *((_DWORD *)a2 + 10);
  v7 = *(_QWORD *)this & 7;
  if (v7 >= 5)
    v8 = 4;
  else
    v8 = 0x503020004uLL >> (8 * v7);
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 4, v8 & 7);
  v9 = (*(_QWORD *)this >> 3) & 7;
  if (v9 >= 5)
    v10 = 4;
  else
    v10 = 0x503020004uLL >> (8 * v9);
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 6, v10 & 7);
  v11 = (*(_QWORD *)this >> 6) & 7;
  if (v11 >= 5)
    v12 = 4;
  else
    v12 = 0x503020004uLL >> (8 * v11);
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 8, v12 & 7);
  v13 = (*(_QWORD *)this >> 9) & 3;
  if (v13 == 2)
    v14 = 2;
  else
    v14 = v13 == 1;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 10, v14);
  v15 = (*(_QWORD *)this >> 11) & 3;
  if (v15 == 2)
    v16 = 2;
  else
    v16 = v15 == 1;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 12, v16);
  v17 = (*(_QWORD *)this >> 13) & 3;
  if (v17 == 2)
    v18 = 2;
  else
    v18 = v17 == 1;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 14, v18);
  v19 = ((*(_QWORD *)this >> 16) & 0xFLL) - 1;
  if (v19 >= 8)
    v20 = 0;
  else
    v20 = 0x108070605040302uLL >> (8 * v19);
  v21 = v4 - v5 + v6;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 18, v20 & 0xF);
  v22 = halfToFloat(*(_WORD *)((char *)this + 3));
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a2, 22, v22, 0.0);
  v23 = halfToFloat(*(_WORD *)((char *)this + 5));
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a2, 24, v23, 0.0);
  v24 = *((_BYTE *)this + 7) & 3;
  if (v24 == 2)
    v25 = 2;
  else
    v25 = v24 == 1;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 26, v25);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a2, 16, (*(_QWORD *)this & 0x8000) == 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a2, 20, ((*(_DWORD *)this >> 20) & 0xF) + 1, 0);
  v26 = halfToFloat(*((_WORD *)this + 4));
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a2, 30, v26, 0.0);
  v27 = (*(_QWORD *)this >> 58) & 3;
  if (v27 == 2)
    v28 = 2;
  else
    v28 = v27 == 1;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 34, v28);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a2, 28, *(_QWORD *)this, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a2, 32, *((_QWORD *)this + 1), 0);
  return flatbuffers::FlatBufferBuilder::EndTable(a2, v21);
}

char *flatbuffers::FlatBufferBuilder::AddElement<float>(char *this, uint64_t a2, float a3, float a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = this;
  if (a3 != a4 || this[80])
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)this, 4uLL);
    v7 = *((_QWORD *)v6 + 6);
    if ((unint64_t)(v7 - *((_QWORD *)v6 + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 4uLL);
      v7 = *((_QWORD *)v6 + 6);
    }
    *(float *)(v7 - 4) = a3;
    v8 = v7 - 4;
    *((_QWORD *)v6 + 6) = v8;
    return flatbuffers::FlatBufferBuilder::TrackField(v6, a2, *((_DWORD *)v6 + 8) - (int)v8 + *((_DWORD *)v6 + 10));
  }
  return this;
}

float halfToFloat(__int16 a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  float result;

  v1 = a1 & 0x7FFF;
  v2 = __clz(v1);
  v3 = (v1 << (v2 - 8)) ^ 0x800000 | (1124073472 - (v2 << 23));
  if ((a1 & 0x7FFF) == 0)
    v3 = 0;
  if ((unsigned __int16)(a1 & 0x7FFF) >> 10 >= 0x1Fu)
    v4 = (v1 << 13) | 0x7F800000;
  else
    v4 = v3;
  v5 = (v1 << 13) + 939524096;
  if (((a1 & 0x7FFFu) - 1024) >> 11 > 0xE)
    v5 = v4;
  LODWORD(result) = v5 | ((a1 & 0x8000) << 16);
  return result;
}

void GenericVaryingAllocator::serialize(GenericVaryingAllocator *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  unint64_t v12;
  int String;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;

  v2 = -858993459 * ((*((_QWORD *)this + 72) - *((_QWORD *)this + 71)) >> 3);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v6 = *((_QWORD *)this + 71) + 40 * i;
      v9 = *(const char **)(v6 + 16);
      v7 = v6 + 16;
      v8 = v9;
      v10 = *(char *)(v7 + 23);
      if (v10 >= 0)
        v11 = (const char *)v7;
      else
        v11 = v8;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      String = flatbuffers::FlatBufferBuilder::CreateString(a2, v11, v12);
      *((_BYTE *)a2 + 70) = 1;
      v14 = *((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 10);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a2, 4, *(unsigned __int8 *)(*((_QWORD *)this + 71) + 40 * i), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 6, *(_DWORD *)(*((_QWORD *)this + 71) + 40 * i + 4));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 8, *(_DWORD *)(*((_QWORD *)this + 71) + 40 * i + 8));
      flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)a2, 10, *(char *)(*((_QWORD *)this + 71) + 40 * i + 12));
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)a2, 12, String);
      v15 = flatbuffers::FlatBufferBuilder::EndTable(a2, v14);
      v16 = v15;
      v18 = (_DWORD *)*((_QWORD *)this + 1);
      v17 = *((_QWORD *)this + 2);
      if ((unint64_t)v18 >= v17)
      {
        v20 = *(_DWORD **)this;
        v21 = ((uint64_t)v18 - *(_QWORD *)this) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          abort();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v24);
          v20 = *(_DWORD **)this;
          v18 = (_DWORD *)*((_QWORD *)this + 1);
        }
        else
        {
          v25 = 0;
        }
        v26 = (_DWORD *)(v24 + 4 * v21);
        *v26 = v16;
        v19 = v26 + 1;
        while (v18 != v20)
        {
          v27 = *--v18;
          *--v26 = v27;
        }
        *(_QWORD *)this = v26;
        *((_QWORD *)this + 1) = v19;
        *((_QWORD *)this + 2) = v24 + 4 * v25;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v18 = v15;
        v19 = v18 + 1;
      }
      *((_QWORD *)this + 1) = v19;
    }
  }
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *result, uint64_t a2, int a3)
{
  char *v4;
  unsigned int v5;

  v4 = result;
  if (a3 || result[80])
  {
    v5 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v4, a2, v5);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::TrackField(char *this, uint64_t a2, unsigned int a3)
{
  char *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = this;
  v6 = (unint64_t *)*((_QWORD *)this + 7);
  if (*((_QWORD *)this + 6) - (_QWORD)v6 <= 7uLL)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    v6 = (unint64_t *)*((_QWORD *)v5 + 7);
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  *((_QWORD *)v5 + 7) += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return this;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int *v20;

  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - v5) <= 3)
  {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
    v4 = *((_QWORD *)this + 6);
    v5 = *((_QWORD *)this + 7);
  }
  *(_DWORD *)(v4 - 4) = 0;
  v6 = v4 - 4;
  *((_QWORD *)this + 6) = v6;
  v7 = *((_QWORD *)this + 4) - v6 + *((_QWORD *)this + 5);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v8 = 4;
  else
    v8 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v8;
  if (v6 - v5 < v8)
  {
    flatbuffers::vector_downward::reallocate(this, v8);
    v6 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 6) = v6 - v8;
  bzero((void *)(v6 - v8), v8);
  v9 = v7 - a2;
  v11 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v10 = *((_QWORD *)this + 7);
  v11[1] = v9;
  *v11 = *((_WORD *)this + 34);
  v12 = *((unsigned int *)this + 16);
  v13 = (char *)(v10 - 8 * v12);
  if ((_DWORD)v12)
  {
    v14 = (_WORD *)(v10 - 8 * v12);
    do
    {
      *(unsigned __int16 *)((char *)v11 + (unsigned __int16)v14[2]) = v7 - *v14;
      v14 += 4;
    }
    while ((unint64_t)v14 < v10);
  }
  *((_QWORD *)this + 7) = v13;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v16 = *((_QWORD *)this + 4);
  v15 = *((_QWORD *)this + 5);
  LODWORD(v17) = v16 - (_DWORD)v11 + v15;
  if (*((_BYTE *)this + 81) && v15 < (unint64_t)v13)
  {
    v18 = *v11;
    v19 = v15 + v16;
    v20 = (unsigned int *)*((_QWORD *)this + 5);
    while (1)
    {
      v17 = *v20;
      if ((_DWORD)v18 == *(unsigned __int16 *)(v19 - v17) && !memcmp((const void *)(v19 - v17), v11, v18))
        break;
      if (++v20 >= (unsigned int *)v13)
      {
        LODWORD(v17) = v16 - (_DWORD)v11 + v15;
        goto LABEL_19;
      }
    }
    v11 = (unsigned __int16 *)((char *)v11 + (v16 - (_DWORD)v11 + v15 - v7));
    *((_QWORD *)this + 6) = v11;
  }
LABEL_19:
  if ((_DWORD)v17 == (_DWORD)v16 + (_DWORD)v15 - (_DWORD)v11)
  {
    if ((unint64_t)((char *)v11 - v13) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v13 = (char *)*((_QWORD *)this + 7);
      v16 = *((_QWORD *)this + 4);
      v15 = *((_QWORD *)this + 5);
    }
    *(_DWORD *)v13 = v17;
    *((_QWORD *)this + 7) = v13 + 4;
  }
  *(_DWORD *)(v15 + v16 - v7) = v17 - v7;
  *((_BYTE *)this + 70) = 0;
  return v7;
}

char *flatbuffers::FlatBufferBuilder::AddElement<signed char>(char *result, uint64_t a2, int a3)
{
  char *v4;
  unsigned int v5;

  v4 = result;
  if (a3 || result[80])
  {
    v5 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v4, a2, v5);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  flatbuffers::vector_downward::fill((char *)this, 1uLL);
  flatbuffers::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

char *flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((_QWORD *)this + 9) < a3)
    *((_QWORD *)this + 9) = a3;
  return flatbuffers::vector_downward::fill((char *)this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::vector_downward::fill(char *this, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = *((_QWORD *)this + 6);
  if (v4 - *((_QWORD *)this + 7) >= a2)
  {
    *((_QWORD *)this + 6) = v4 - a2;
    if (!a2)
      return this;
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
    *((_QWORD *)v3 + 6) -= a2;
  }
  v5 = 0;
  do
    *(_BYTE *)(*((_QWORD *)v3 + 6) + v5++) = 0;
  while (a2 != v5);
  return this;
}

char *flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((_QWORD *)this + 9) < a2)
    *((_QWORD *)this + 9) = a2;
  return flatbuffers::vector_downward::fill((char *)this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

_QWORD *flatbuffers::vector_downward::push(_QWORD *this, const unsigned __int8 *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v5 = this;
    v6 = this[6];
    if (v6 - this[7] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      v6 = v5[6];
    }
    v5[6] = v6 - a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v4 = *((_QWORD *)this + 4);
  v3 = (char *)*((_QWORD *)this + 5);
  v5 = &v3[v4 - *((_QWORD *)this + 6)];
  v6 = *((_QWORD *)this + 7) - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v4 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v3)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v11, v3, v6);
  result = (char *)MEMORY[0x1CAA2D674](v3, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v5];
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = &v11[v6];
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 10, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Instruction *v14;
  llvm::Type *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t Cast;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  int v34;
  __int16 v35;
  void *v36;
  _BYTE v37[24];
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v4 = *((_QWORD *)this + 22);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v3 != v5)
  {
    v6 = "air.amplification_count";
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
      if (*(_QWORD *)(v3 + 8))
        v8 = v7 == 0;
      else
        v8 = 1;
      if (v8)
        goto LABEL_49;
      v9 = v6;
      v10 = *(_QWORD *)v3;
      v31 = 0;
      v31 = llvm::UndefValue::get();
      v11 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
      if (v11)
        v12 = v11 - 24;
      else
        v12 = 0;
      v13 = *(_QWORD *)(v12 + 40);
      if (v13)
        v14 = (llvm::Instruction *)(v13 - 24);
      else
        v14 = 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v14, *((_QWORD *)this + 6));
      v16 = *(_DWORD *)(v10 + 8);
      if (v16 != 16)
      {
        if (v16 == 15 && *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8) == 16)
        {
          if ((v16 & 0xFE) == 0x12)
            v16 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
          if ((v16 & 0xFFFFFF00) == 0x400)
          {
            llvm::Constant::getNullValue((llvm::Constant *)v10, v15);
            llvm::Value::replaceAllUsesWith();
LABEL_48:
            v6 = v9;
            goto LABEL_49;
          }
        }
LABEL_31:
        if (isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.amplification_id"))
        {
          AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)v32, this, (llvm::Type *)v10, "air.amplification_id", 0x14uLL);
          v31 = (uint64_t)AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)v32);
          llvm::Value::replaceAllUsesWith();
          llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7272), v31);
          *((_BYTE *)this + 5860) = 1;
          if (v36 != v37)
            free(v36);
          goto LABEL_48;
        }
        if (!isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), v6))
        {
          if (!*((_BYTE *)this + 7260)
            || !isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.render_target_array_index"))
          {
            goto LABEL_49;
          }
          v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v21 = (_BYTE *)*((_QWORD *)v20 + 50);
          if (v21[1747])
          {
            v22 = *(_QWORD *)v3;
            v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v21 + 680))(v21);
            v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            *(_OWORD *)v32 = *(_OWORD *)(v24 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
            v34 = *((_DWORD *)v24 + 34);
            Cast = AGCLLVMGen3TargetLowerer::buildLayerId(v23, (uint64_t)v32, v22);
            if (v33)
              llvm::MetadataTracking::untrack();
          }
          else
          {
            v26 = (uint64_t)(v20 + 40);
            v27 = llvm::ConstantInt::get();
            v28 = *(_QWORD *)v3;
            v35 = 257;
            Cast = llvm::IRBuilderBase::CreateCast(v26, 38, v27, v28, (uint64_t)v32);
          }
          v31 = Cast;
          llvm::Value::replaceAllUsesWith();
          *((_BYTE *)this + 5859) = 1;
          goto LABEL_48;
        }
        AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)v32, this, (llvm::Type *)v10, v6, 0x17uLL);
        v31 = (uint64_t)AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)v32);
        llvm::Value::replaceAllUsesWith();
        *((_BYTE *)this + 5861) = 1;
        v19 = v36;
        if (v36 == v37)
          goto LABEL_49;
LABEL_45:
        free(v19);
        goto LABEL_49;
      }
      if (!isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.imageblock_data"))
        goto LABEL_31;
      if (*((int *)this + 1082) <= 0)
        *((_DWORD *)this + 1082) = 1;
      v32[0] = &v33;
      v32[1] = (void *)0x500000000;
      v38[0] = &off_1E7E682C0;
      v38[1] = &v31;
      v38[2] = this;
      v39 = v38;
      AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v10, (uint64_t)v32, (uint64_t)this + 6928, 0, 1, (uint64_t)v38);
      v17 = v39;
      if (v39 == v38)
      {
        v17 = v38;
        v18 = 4;
      }
      else
      {
        if (!v39)
          goto LABEL_44;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_44:
      llvm::Value::replaceAllUsesWith();
      v19 = v32[0];
      if (v32[0] != &v33)
        goto LABEL_45;
LABEL_49:
      v3 += 40;
    }
    while (v3 != v5);
  }
  if (*((_DWORD *)this + 1752))
  {
    v29 = 0;
    do
    {
      llvm::MDNode::replaceOperandWith();
      ++v29;
    }
    while (*((_DWORD *)this + 1752) > v29);
  }
  return AGCLLVMUserFragmentShader::setupShaderInputs(this);
}

BOOL isStringMDNode(llvm::MDString *a1, const char *a2)
{
  uint64_t String;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  if (*(_BYTE *)a1)
    return 0;
  String = llvm::MDString::getString(a1);
  v6 = v5;
  if (a2)
  {
    v7 = (const void *)String;
    v8 = strlen(a2);
    if (v6 != v8)
      return 0;
    if (!v8)
      return 1;
    return memcmp(v7, a2, v8) == 0;
  }
  else
  {
    return v5 == 0;
  }
}

uint64_t AGCLLVMBuilder::SetInsertPoint(uint64_t a1, llvm::Instruction *a2, uint64_t a3)
{
  uint64_t v6;

  if (a3)
  {
    llvm::DebugLoc::DebugLoc();
    llvm::TrackingMDRef::operator=((_QWORD *)a2 + 6, &v6);
    if (v6)
      llvm::MetadataTracking::untrack();
  }
  return llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
}

uint64_t AGCLLVMTargetLowerer::buildClampColor(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t Element;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  _BYTE v34[32];
  __int16 v35;

  v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  if (v32)
    llvm::MetadataTracking::track();
  v33 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v31);
  if (v32)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a4 + 16) && (*(_QWORD *)a3 == *(_QWORD *)(a1 + 288) || *(_QWORD *)a3 == *(_QWORD *)(a1 + 280)))
  {
    if (*(float *)a4 == *(float *)(a4 + 4) && *(float *)(a4 + 8) == *(float *)(a4 + 12))
    {
      v10 = llvm::ConstantFP::get();
      v11 = llvm::ConstantFP::get();
      v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v30 = *(_DWORD *)(a1 + 104);
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v28, a3, v10, v11, a5);
      if (v29)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      v12 = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, a3, 0, 3, 1);
      v35 = 257;
      v13 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v13, (const llvm::Twine *)v34);
      v15 = llvm::ConstantFP::get();
      v16 = llvm::ConstantFP::get();
      v17 = llvm::ConstantFP::get();
      v18 = llvm::ConstantFP::get();
      v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v27 = *(_DWORD *)(a1 + 104);
      v19 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v25, v12, v15, v16, a5);
      if (v26)
        llvm::MetadataTracking::untrack();
      v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v24 = *(_DWORD *)(a1 + 104);
      v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v22, Element, v17, v18, a5);
      if (v23)
        llvm::MetadataTracking::untrack();
      return AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, v19, v20);
    }
  }
  return (uint64_t)a3;
}

llvm::Value *AGCLLVMTargetLowerer::buildFClamp(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, char a6)
{
  llvm::Value *InsertElement;
  uint64_t v13;
  uint64_t i;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _BYTE v26[32];
  __int16 v27;
  llvm::Value *v28[2];
  __int128 v29;
  llvm::Value *v30[2];
  __int128 v31;
  llvm::Value *v32[2];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v18 = a1;
  v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *(_DWORD *)(a2 + 24);
  v22 = a6;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    *(_OWORD *)v28 = 0u;
    v29 = 0u;
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a3, v32);
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a4, v30);
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v28);
    v13 = *(unsigned int *)(*(_QWORD *)a3 + 32);
    if ((_DWORD)v13)
    {
      for (i = 0; i != v13; ++i)
      {
        v15 = (llvm::Value *)AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((unsigned __int8 *)&v18, (uint64_t)v32[i], (uint64_t)v30[i], (uint64_t)v28[i]);
        v27 = 257;
        v16 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v15, v16, (const llvm::Twine *)v26);
      }
    }
  }
  else
  {
    InsertElement = (llvm::Value *)AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((unsigned __int8 *)&v18, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  if (v20)
    llvm::MetadataTracking::untrack();
  return InsertElement;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMax(const char **a1, __int128 *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildFMinFMax((AGCLLVMBuilder *)a1, (uint64_t)&v10, a3, a4, a1[302], a1[303]);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMin(const char **a1, __int128 *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildFMinFMax((AGCLLVMBuilder *)a1, (uint64_t)&v10, a3, a4, a1[300], a1[301]);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMBuilder::combineRGBA(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v5;
  llvm::Value *v6;
  _BYTE v8[32];
  __int16 v9;

  v5 = AGCLLVMBuilder::extendVector(this, a2, 4);
  v9 = 257;
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v5, a3, v6, (const llvm::Twine *)v8);
}

llvm::Value *AGCLLVMBuilder::extendVector(AGCLLVMBuilder *this, llvm::Value *a2, int a3)
{
  llvm::Value *v3;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v8;
  llvm::Value *v9;
  _BYTE v11[32];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    llvm::FixedVectorType::get();
    v8 = (llvm::Value *)llvm::UndefValue::get();
    v12 = 257;
    v9 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v8, v3, v9, (const llvm::Twine *)v11);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + 32) != a3)
  {
    v13 = llvm::ConstantInt::get();
    v14 = llvm::ConstantInt::get();
    v15 = llvm::ConstantInt::get();
    v16 = llvm::ConstantInt::get();
    v5 = (llvm::Value *)llvm::ConstantVector::get();
    v6 = (llvm::Value *)llvm::UndefValue::get();
    v12 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), v3, v6, v5, (const llvm::Twine *)v11);
  }
  return v3;
}

uint64_t AGCLLVMBuilder::subrangeVector(AGCLLVMBuilder *this, llvm::Value *a2, unsigned int a3, int a4, int a5)
{
  llvm::Value *v7;
  llvm::Value *v9;
  llvm::Value *v10;
  _WORD v11[20];
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a4 == 1 && a5)
  {
    LOWORD(v13) = 257;
    v7 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), a2, v7, (const llvm::Twine *)v12);
  }
  else
  {
    v12[0] = llvm::ConstantInt::get();
    v12[1] = llvm::ConstantInt::get();
    v12[2] = llvm::ConstantInt::get();
    v12[3] = llvm::ConstantInt::get();
    v13 = llvm::ConstantInt::get();
    v14 = llvm::ConstantInt::get();
    v15 = llvm::ConstantInt::get();
    v16 = llvm::ConstantInt::get();
    v9 = (llvm::Value *)llvm::ConstantVector::get();
    v10 = (llvm::Value *)llvm::UndefValue::get();
    v11[16] = 257;
    return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), a2, v10, v9, (const llvm::Twine *)v11);
  }
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  llvm::ShuffleVectorInst::getShuffleMask();
  return llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v10, 0, (uint64_t)a5);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  __int16 v19;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 336))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
    if (v12)
      v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
    else
      v13 = 0;
    if (v13)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v12, a6);
  }
  else
  {
    v12 = llvm::User::operator new((llvm::User *)0x68);
    v19 = 257;
    MEMORY[0x1CAA2C798](v12, a2, a3, a4, a5, v18, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v12, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v12;
}

void llvm::APFloat::Storage::~Storage(llvm::APFloat::Storage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)this;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      v4 = v3 - 16;
      v5 = *(_QWORD *)(v3 - 8);
      if (v5)
      {
        v6 = v3 - 24;
        v7 = 32 * v5;
        do
        {
          llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v6 + v7));
          v7 -= 32;
        }
        while (v7);
      }
      MEMORY[0x1CAA2D674](v4, 0x1072C801E5F02E8);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(this);
  }
}

llvm::Value *AGCLLVMTargetLowerer::buildSaturate(char **a1, uint64_t a2, llvm::Value *a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *InsertElement;
  uint64_t *v12;
  char **v13;
  llvm::Value *v14;
  llvm::Value *v15;
  char **v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  llvm::Value *v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23)
    llvm::MetadataTracking::untrack();
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v8 = *(_DWORD *)(a2 + 24);
  v20 = v8;
  v21 = a4;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a3, v29);
    v9 = *(unsigned int *)(*(_QWORD *)a3 + 32);
    if ((_DWORD)v9)
    {
      v10 = 0;
      InsertElement = 0;
      do
      {
        v12 = (uint64_t *)v29[v10];
        v25 = v18;
        v26 = v19;
        if (v19)
          llvm::MetadataTracking::track();
        v27 = v20;
        if (v21 && !*((_BYTE *)a1 + 1840))
          v13 = a1 + 153;
        else
          v13 = a1 + 152;
        v14 = AGCLLVMTargetLowerer::CallFPIntrinsic((uint64_t)a1, (uint64_t)&v25, v12, *v13);
        if (v26)
          llvm::MetadataTracking::untrack();
        if (!InsertElement)
        {
          llvm::FixedVectorType::get();
          InsertElement = (llvm::Value *)llvm::UndefValue::get();
        }
        v28 = 257;
        v15 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v14, v15, (const llvm::Twine *)&v25);
        ++v10;
      }
      while (v9 != v10);
    }
    else
    {
      InsertElement = 0;
    }
  }
  else
  {
    v25 = v18;
    v26 = v19;
    if (v19)
    {
      llvm::MetadataTracking::track();
      v8 = v20;
      a4 = a4;
    }
    v27 = v8;
    if (a4 && !*((_BYTE *)a1 + 1840))
      v16 = a1 + 153;
    else
      v16 = a1 + 152;
    InsertElement = AGCLLVMTargetLowerer::CallFPIntrinsic((uint64_t)a1, (uint64_t)&v25, (uint64_t *)a3, *v16);
    if (v26)
      llvm::MetadataTracking::untrack();
  }
  if (v19)
    llvm::MetadataTracking::untrack();
  return InsertElement;
}

llvm::Value *AGCLLVMTargetLowerer::CallFPIntrinsic(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  int v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string::size_type size;
  uint64_t v19;
  llvm::Value *v20;
  void *__p[2];
  uint64_t v23;
  __int16 v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;

  v30 = a3;
  v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  if (v28)
    llvm::MetadataTracking::track();
  v29 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v27);
  if (v28)
    llvm::MetadataTracking::untrack();
  v8 = *a3;
  std::string::basic_string[abi:nn180100]<0>(&v26, a4);
  std::string::append(&v26, ".");
  v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v25, *(_DWORD *)(v8 + 32));
    v10 = std::string::insert(&v25, 0, "v");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v23 >= 0)
      v13 = HIBYTE(v23);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(&v26, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v9 = *(_DWORD *)(v8 + 8);
  }
  v14 = v9 & 0xFE;
  v15 = v8;
  if (v14 == 18)
    v15 = **(_QWORD **)(v8 + 16);
  if (v15 == *(_QWORD *)(a1 + 152))
    v16 = "f16";
  else
    v16 = "f32";
  std::string::append(&v26, v16);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v26;
  else
    v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v17, size, v8, v8);
  v24 = 257;
  v20 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v19 + 24), v19, (uint64_t)&v30, 1, (uint64_t)__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v20;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement(uint64_t a1, llvm::Function *this, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  llvm::Function *v6;
  int v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Instruction *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  uint64_t v34;
  int v35;
  llvm::Type *v36;
  uint64_t v37;
  llvm::Value **v38;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD *, _QWORD, _QWORD);
  uint64_t v50;
  _QWORD *v51;
  llvm::Value *FPTrunc;
  uint64_t v53;
  unsigned int *v54;
  uint64_t (*v55)(_QWORD *, _QWORD, _QWORD);
  uint64_t v56;
  _QWORD *v57;
  uint64_t (*v58)(_QWORD *, _OWORD *, _BYTE *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  _OWORD *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, _QWORD, _OWORD *, _BYTE *, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  int v72;
  int v74;
  uint64_t v75;
  llvm::Value *v79;
  __int128 v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  _QWORD v87[4];
  __int16 v88;
  _OWORD v89[3];
  uint64_t v90;
  uint64_t v91;

  v5 = a3;
  v6 = this;
  v91 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a3 + 24);
  if (v7 != 10)
  {
    if (v7 == 9)
    {
      v8 = *(_BYTE **)(a3 + 8);
      if (v8)
      {
        v9 = strlen(*(const char **)(a3 + 8));
        *(_QWORD *)&v89[0] = (char *)&v89[1] + 8;
        *(_OWORD *)((char *)v89 + 8) = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v89, v8, &v8[v9]);
      }
      else
      {
        *(_QWORD *)&v89[1] = 64;
        *(_QWORD *)&v89[0] = (char *)&v89[1] + 8;
        *((_QWORD *)&v89[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v89, ".", "");
      llvm::SmallVectorImpl<char>::append<char const*,void>(v89, a4, &a4[a5]);
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v89[0] != (_OWORD *)((char *)&v89[1] + 8))
        free(*(void **)&v89[0]);
      return llvm::Function::eraseFromParent(v6);
    }
    v15 = **(_QWORD **)(*((_QWORD *)this + 3) + 16);
    v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(_BYTE *)(a3 + 29) == 0;
    v17 = !v16;
    if (v16)
      v18 = 1;
    else
      v18 = *(_DWORD *)(v15 + 32);
    v74 = v18;
    v72 = *(_DWORD *)(a1 + 104);
    v19 = *((_QWORD *)this + 1);
    if (!v19)
    {
LABEL_93:
      *(_DWORD *)(a1 + 104) = v72;
      v6 = this;
      return llvm::Function::eraseFromParent(v6);
    }
    v20 = (llvm::IRBuilderBase *)(a1 + 8);
    while (1)
    {
      v21 = *(llvm::Instruction **)(v19 + 24);
      v22 = *(_QWORD *)(v19 + 8);
      if (*(_DWORD *)v5 == 1)
      {
        v23 = 0;
      }
      else
      {
        if (*(_DWORD *)v5 != 2)
          goto LABEL_26;
        v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_26:
      v75 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      v24 = llvm::UndefValue::get();
      if (v74)
      {
        for (i = 0; i != v74; ++i)
        {
          v79 = (llvm::Value *)v24;
          v90 = 0;
          memset(v89, 0, sizeof(v89));
          v26 = llvm::CallBase::arg_end(v21) - (_QWORD)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            v27 = (v26 >> 5);
            v28 = (llvm::Value **)v89;
            v29 = v21;
            do
            {
              v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              v31 = *v30;
              *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(_QWORD *)v31 + 8) & 0xFE) == 0x12)
              {
                v88 = 257;
                v32 = (llvm::Value *)llvm::ConstantInt::get();
                *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v87);
              }
              ++v28;
              v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(_BYTE *)(a3 + 28))
          {
            v33 = **(llvm::Type ***)&v89[0];
            if ((*(_DWORD *)(**(_QWORD **)&v89[0] + 8) & 0xFE) == 0x12)
              v33 = (llvm::Type *)**((_QWORD **)v33 + 2);
            v87[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v87[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              v35 = 0;
            }
            else
            {
              v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(_QWORD **)&v89[0] + 8) & 0xFE) == 0x12)
                v36 = (llvm::Type *)llvm::FixedVectorType::get();
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                v37 = (v26 >> 5);
                v38 = (llvm::Value **)v89;
                do
                {
                  v39 = *v38;
                  v88 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v87);
                  --v37;
                }
                while (v37);
              }
              v35 = 1;
            }
          }
          else
          {
            v35 = 0;
          }
          v40 = *(_QWORD *)(a1 + 368);
          v84 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v20);
          v86 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v84, v40 + 8);
          if (v85)
            llvm::MetadataTracking::untrack();
          switch(*(_DWORD *)(a3 + 24))
          {
            case 1:
              v41 = *(uint64_t (**)(_QWORD *))(a3 + 8);
              v42 = *(_QWORD *)(a3 + 16);
              v43 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v42 >> 1));
              if ((v42 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *))(*v43 + v41);
              v44 = v41(v43);
              goto LABEL_78;
            case 2:
              v45 = *(uint64_t (**)(_QWORD *, uint64_t))(a3 + 8);
              v53 = *(_QWORD *)(a3 + 16);
              v47 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v53 >> 1));
              if ((v53 & 1) != 0)
                v45 = *(uint64_t (**)(_QWORD *, uint64_t))(*v47 + v45);
              v48 = *(_QWORD *)v21;
              goto LABEL_62;
            case 3:
              v45 = *(uint64_t (**)(_QWORD *, uint64_t))(a3 + 8);
              v46 = *(_QWORD *)(a3 + 16);
              v47 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v46 >> 1));
              if ((v46 & 1) != 0)
                v45 = *(uint64_t (**)(_QWORD *, uint64_t))(*v47 + v45);
              v48 = *(_QWORD *)&v89[0];
LABEL_62:
              v44 = v45(v47, v48);
              goto LABEL_78;
            case 4:
              v54 = (unsigned int *)(*(_QWORD *)&v89[0] + 24);
              if (*(_DWORD *)(*(_QWORD *)&v89[0] + 32) >= 0x41u)
                v54 = *(unsigned int **)v54;
              v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a3 + 8);
              v56 = *(_QWORD *)(a3 + 16);
              v57 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v56 >> 1));
              if ((v56 & 1) != 0)
                v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v57 + v55);
              v44 = v55(v57, *(_QWORD *)v21, *v54);
              goto LABEL_78;
            case 5:
              v49 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a3 + 8);
              v50 = *(_QWORD *)(a3 + 16);
              v51 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) != 0)
                v49 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v51 + v49);
              v44 = v49(v51, *(_QWORD *)&v89[0], *((_QWORD *)&v89[0] + 1));
              goto LABEL_78;
            case 6:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, _BYTE *, uint64_t))(a3 + 8);
              v59 = *(_QWORD *)(a3 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v59 >> 1));
              if ((v59 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, _BYTE *, uint64_t))(*v60 + v58);
              v62 = (_BYTE *)*((_QWORD *)&v89[0] + 1);
              v61 = *(_OWORD **)&v89[0];
              v63 = *(_QWORD *)&v89[1];
              goto LABEL_74;
            case 7:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, _BYTE *, uint64_t))(a3 + 8);
              v64 = *(_QWORD *)(a3 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v64 >> 1));
              if ((v64 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, _BYTE *, uint64_t))(*v60 + v58);
              v61 = v89;
              v63 = a5;
              v62 = a4;
LABEL_74:
              v44 = v58(v60, v61, v62, v63);
              goto LABEL_78;
            case 8:
              v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, _BYTE *, uint64_t))(a3 + 8);
              v66 = *(_QWORD *)(a3 + 16);
              v67 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v66 >> 1));
              if ((v66 & 1) != 0)
                v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, _BYTE *, uint64_t))(*v67 + v65);
              v44 = v65(v67, *(_QWORD *)v21, v89, a4, a5);
LABEL_78:
              FPTrunc = (llvm::Value *)v44;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          v68 = *(_QWORD *)(a1 + 368);
          v81 = *(_OWORD *)(v68 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 8));
          v83 = *(_DWORD *)(v68 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v81, (uint64_t)v20);
          if (v82)
            llvm::MetadataTracking::untrack();
          if (v35)
          {
            v69 = *(_QWORD *)v21;
            if (v17 && (*(_DWORD *)(v69 + 8) & 0xFE) == 0x12)
              v69 = **(_QWORD **)(v69 + 16);
            v88 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v69, (const llvm::Twine *)v87);
            if (!v17)
              goto LABEL_89;
          }
          else if (!v17)
          {
            goto LABEL_89;
          }
          v88 = 257;
          v70 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v79, FPTrunc, v70, (const llvm::Twine *)v87);
LABEL_89:
          v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(_QWORD *)v21 != *(_QWORD *)(a1 + 144))
        llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v21);
      v5 = a3;
      v19 = v75;
      if (!v75)
        goto LABEL_93;
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    do
    {
      v11 = *(void (**)(_QWORD *, _QWORD))(v5 + 8);
      v12 = *(_QWORD *)(v5 + 16);
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v12 >> 1));
      if ((v12 & 1) != 0)
        v11 = *(void (**)(_QWORD *, _QWORD))(*v13 + v11);
      v14 = *(_QWORD *)(v10 + 8);
      v11(v13, *(_QWORD *)(v10 + 24));
      v10 = v14;
    }
    while (v14);
  }
  return llvm::Function::eraseFromParent(v6);
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _BYTE v16[32];
  __int16 v17;

  if (a2
    && *((unsigned __int8 *)a2 + 16) <= 0x14u
    && a3
    && *((unsigned __int8 *)a3 + 16) <= 0x14u
    && a4
    && *((unsigned __int8 *)a4 + 16) <= 0x14u)
  {
    v10 = (*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                         + 328))(*((_QWORD *)this + 9), a2, a3, a4);
    if (v10)
      v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
    else
      v11 = 0;
    if (v11)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v10, (uint64_t)a5);
  }
  else
  {
    v17 = 257;
    v10 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x1CAA2C780](v10, a2, a3, a4, v16, 0);
    (*(void (**)(_QWORD, uint64_t, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v10, a5, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v12 = *((unsigned int *)this + 2);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD **)this;
      v14 = &v13[2 * v12];
      do
      {
        llvm::Instruction::setMetadata();
        v13 += 2;
      }
      while (v13 != v14);
    }
  }
  return v10;
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v2;
  uint64_t NumSubclassExtraOperandsDynamic;
  uint64_t Descriptor;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v2 == 39)
  {
    NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    NumSubclassExtraOperandsDynamic = 2;
  }
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
  {
    Descriptor = 0;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  Descriptor = llvm::User::getDescriptor(this);
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    goto LABEL_9;
  v11 = llvm::User::getDescriptor(this);
  v5 = v11 + v12;
LABEL_10:
  if (((v5 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    v6 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    v7 = llvm::User::getDescriptor(this);
    v9 = (*(_DWORD *)(v7 + v8 - 4) - v6);
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMinFMax(AGCLLVMBuilder *a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4, const char *a5, const char *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Function *v15;
  llvm::Value *v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v21[0] = v22;
  v21[1] = (void *)0x200000000;
  v12 = *(_QWORD *)a3;
  v13 = *(_QWORD *)a3;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
    v13 = **(_QWORD **)(v12 + 16);
  if (v12 != *(_QWORD *)a4)
    a4 = AGCLLVMBuilder::splat(a1, *(_DWORD *)(v12 + 32), a4);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v13);
  v14 = *(_QWORD *)a4;
  if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
    v14 = **(_QWORD **)(v14 + 16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v14);
  llvm::FunctionType::get();
  if (v13 != *((_QWORD *)a1 + 21))
    a6 = a5;
  if (a6)
    strlen(a6);
  llvm::Module::getOrInsertFunction();
  v16 = AGCLLVMBuilder::map2(a1, v15, a3, a4);
  if (v21[0] != v22)
    free(v21[0]);
  return v16;
}

uint64_t AGCLLVMTargetLowerer::SetIP(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
    llvm::MetadataTracking::track();
  v7 = *((_DWORD *)a2 + 6);
  result = AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v5, a1 + 8);
  if (v6)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t llvm::IRBuilderBase::SetInsertPoint(llvm::IRBuilderBase *this, llvm::Instruction *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 7) = (char *)a2 + 24;
  v3 = *((_QWORD *)a2 + 6);
  v5 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track();
    v3 = v5;
  }
  result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)this, v3);
  if (v5)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMBuilder::InsertPoint::restoreIP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)a1)
  {
    llvm::IRBuilderBase::SetInsertPoint(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track();
    v4 = v6;
  }
  result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(a2, v4);
  if (v6)
    result = llvm::MetadataTracking::untrack();
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *i;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(char **)result;
  v3 = *(unsigned int *)(result + 8);
  v4 = (char *)(*(_QWORD *)result + 16 * v3);
  if (a2)
  {
    if ((_DWORD)v3)
    {
      v6 = 16 * v3;
      v7 = *(char **)result;
      while (*(_DWORD *)v7)
      {
        v7 += 16;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
      *((_QWORD *)v7 + 1) = a2;
    }
    else
    {
LABEL_6:
      if (v3 >= *(_DWORD *)(result + 12))
      {
        v11 = result;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = (_QWORD *)(*(_QWORD *)v11 + 16 * *(unsigned int *)(v11 + 8));
        *v12 = 0;
        v12[1] = a2;
        ++*(_DWORD *)(v11 + 8);
      }
      else
      {
        *(_DWORD *)v4 = 0;
        *(_QWORD *)&v2[16 * v3 + 8] = a2;
        *(_DWORD *)(result + 8) = v3 + 1;
      }
    }
  }
  else
  {
    if ((_DWORD)v3)
    {
      v8 = 16 * v3;
      v9 = *(char **)result;
      while (*(_DWORD *)v9)
      {
        v9 += 16;
        v8 -= 16;
        if (!v8)
        {
          v9 = v4;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v9 = *(char **)result;
    }
    if (v9 != v4)
    {
      for (i = v9 + 16; i != v4; i += 16)
      {
        if (*(_DWORD *)i)
        {
          *(_DWORD *)v9 = *(_DWORD *)i;
          *((_QWORD *)v9 + 1) = *((_QWORD *)i + 1);
          v9 += 16;
        }
      }
    }
LABEL_21:
    *(_DWORD *)(result + 8) = (unint64_t)(v9 - v2) >> 4;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::SetInsertPoint(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  if (a2 + 40 != a3)
  {
    v3 = result;
    v4 = a3 - 24;
    if (!a3)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    v6 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track();
      v5 = v6;
    }
    result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(v3, v5);
    if (v6)
      return llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMBuilder::map2(AGCLLVMBuilder *this, llvm::Function *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *InsertElement;
  uint64_t v9;
  uint64_t i;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[2];
  llvm::Value *v18[2];
  __int128 v19;
  llvm::Value *v20[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    *(_OWORD *)v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v18 = 0u;
    v19 = 0u;
    AGCLLVMBuilder::unboxVector(this, a3, v20);
    AGCLLVMBuilder::unboxVector(this, a4, v18);
    v9 = *(unsigned int *)(*(_QWORD *)a3 + 32);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = v18[i];
        v17[0] = v20[i];
        v17[1] = v11;
        v16 = 257;
        v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a2 + 3), (uint64_t)a2, (uint64_t)v17, 2, (uint64_t)v15);
        v16 = 257;
        v13 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v12, v13, (const llvm::Twine *)v15);
      }
    }
  }
  else
  {
    v20[0] = a3;
    v20[1] = a4;
    v16 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a2 + 3), (uint64_t)a2, (uint64_t)v20, 2, (uint64_t)v15);
  }
  return InsertElement;
}

llvm::Value *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = 0;
  if (v9)
  {
    v11 = 48 * v9;
    v12 = (_QWORD *)(v8 + 32);
    do
    {
      v10 += (*v12 - *(v12 - 1)) >> 3;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
  if (v9)
  {
    v14 = 0;
    v15 = 48 * v9;
    v16 = (_QWORD *)(v8 + 32);
    do
    {
      v14 += (*v16 - *(v16 - 1)) >> 3;
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
    v17 = 48 * v9;
    v18 = (_QWORD *)(v8 + 32);
    do
    {
      LODWORD(v15) = v15 + ((*v18 - *(v18 - 1)) >> 3);
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  llvm::Instruction::Instruction();
  *((_QWORD *)v13 + 8) = 0;
  llvm::CallInst::init();
  if (*(_BYTE *)(a1 + 100))
  {
    llvm::Value::getContext(v13);
    *((_QWORD *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (llvm::FPMathOperator::classof((uint64_t)v13))
    llvm::IRBuilderBase::setFPAttrs(a1, (uint64_t)v13);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v19 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)a1;
    v21 = v20 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata();
      v20 += 16;
    }
    while (v20 != v21);
  }
  return v13;
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (v2 = v1 - 28, v1 < 0x1C))
  {
    v3 = 0;
    if (!a1 || v1 != 5)
      return v3;
    v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39)
    return 0;
  if (((1 << v2) & 0x40000001255000) != 0)
    return 1;
  if (((1 << v2) & 0x380000000000000) == 0)
    return 0;
  do
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
    a1 = *(_QWORD *)a1 + 24;
    if (v4)
      v6 = v5 == 17;
    else
      v6 = 0;
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  return v5 < 7;
}

uint64_t llvm::IRBuilderBase::setFPAttrs(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 88))
    llvm::Instruction::setMetadata();
  llvm::Instruction::setFastMathFlags();
  return a2;
}

uint64_t AGCLLVMBuilder::unboxVector(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value **a3)
{
  uint64_t v6;
  uint64_t i;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    tryToUnboxVector(a2, a3, 0);
    v6 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        if (!a3[i])
        {
          v11 = 257;
          v8 = (llvm::Value *)llvm::ConstantInt::get();
          a3[i] = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), a2, v8, (const llvm::Twine *)v10);
        }
      }
    }
  }
  else
  {
    *a3 = a2;
    return 1;
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE v14[32];
  __int16 v15;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 320))(*((_QWORD *)this + 9), a2, a3);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v8, (uint64_t)a4);
  }
  else
  {
    v15 = 257;
    v8 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x1CAA2C7BC](v8, a2, a3, v14, 0);
    (*(void (**)(_QWORD, uint64_t, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v10 = *((unsigned int *)this + 2);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD **)this;
      v12 = &v11[2 * v10];
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 2;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

void tryToUnboxVector(llvm::Value *a1, llvm::Value **a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  llvm::Value *v20[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  bzero(a2, 0x20uLL);
  if (a1 && a3 <= 5)
  {
    while (1)
    {
      v6 = *((unsigned __int8 *)a1 + 16);
      if (v6 != 90)
        break;
      v7 = *((_QWORD *)a1 - 4);
      if (v7)
        v8 = *(_BYTE *)(v7 + 16) == 16;
      else
        v8 = 0;
      if (v8)
      {
        v9 = (_QWORD *)(v7 + 24);
        if (*(_DWORD *)(v7 + 32) >= 0x41u)
          v9 = (_QWORD *)*v9;
        v10 = (_QWORD *)*v9;
        if ((v10 & 0xFFFFFFFC) == 0 && !a2[v10])
          a2[v10] = (llvm::Value *)*((_QWORD *)a1 - 8);
        a1 = (llvm::Value *)*((_QWORD *)a1 - 12);
        if (a1)
          continue;
      }
      return;
    }
    if (v6 == 91)
    {
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      memset(v19, 0, sizeof(v19));
      v11 = a3 + 1;
      tryToUnboxVector(*((llvm::Value **)a1 - 8), v20, v11);
      tryToUnboxVector(*((llvm::Value **)a1 - 4), (llvm::Value **)v19, v11);
      v12 = *(unsigned int *)(*(_QWORD *)a1 + 32);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(_DWORD *)(**((_QWORD **)a1 - 8) + 32);
        do
        {
          if ((v14 | v13) <= 3 && !a2[v13])
          {
            v15 = *(unsigned int *)(*((_QWORD *)a1 + 8) + 4 * v13);
            if ((int)v15 <= 3)
            {
              if ((_DWORD)v15 == -1)
              {
                v16 = (llvm::Value *)llvm::UndefValue::get();
              }
              else if (v15 >= v14)
              {
                v16 = (llvm::Value *)*((_QWORD *)v19 + v15 - v14);
              }
              else
              {
                v16 = v20[v15];
              }
              a2[v13] = v16;
            }
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    else if (v6 <= 0x14)
    {
      v17 = *(unsigned int *)(*(_QWORD *)a1 + 32);
      if ((v17 - 1) <= 3)
      {
        v18 = 0;
        do
        {
          if (!a2[v18])
            a2[v18] = (llvm::Value *)llvm::Constant::getAggregateElement(a1);
          ++v18;
        }
        while (v17 != v18);
      }
    }
  }
}

llvm::Value *AGCLLVMAirBuiltins::buildConvert(uint64_t a1, llvm::Value **a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  char *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t *v23;
  size_t v24;
  unsigned int v25;
  int16x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  char v37;
  int Key;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  llvm::IRBuilderBase *v47;
  uint64_t v48;
  llvm::Type *v49;
  llvm::Value *FPExt;
  llvm *v51;
  llvm::Type *v52;
  unsigned int v53;
  llvm::Type **v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Type *v57;
  llvm::IRBuilderBase *v58;
  uint64_t v60;
  unsigned int v61;
  uint64_t *v62;
  llvm::Type *v63;
  llvm::IRBuilderBase *v64;
  llvm::Type *v65;
  llvm::Type *v66;
  char *v67;
  BOOL v68;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  llvm::IRBuilderBase *v75;
  uint64_t v76;
  llvm::Type **v77;
  uint64_t v78;
  uint64_t v79;
  llvm::CmpInst **v80;
  uint64_t v81;
  llvm::Value **v82;
  uint64_t v83;
  char v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *__s;
  char *v93;
  char *v94;
  int v95;
  char v96;
  char *v97;
  char v98;
  __int16 v99;
  __int16 v100;
  BOOL v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  __int16 v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  llvm *v109;
  uint64_t *v110;
  __int128 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v5 = &AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map;
  if ((v4 & 1) == 0
  {
    AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map = 0;
    *(_QWORD *)&dword_1ED839860 = 0;
    qword_1ED839868 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::ConversionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map, &dword_1C3C54000);
  }
  if (!dword_1ED839864)
  {
    v82 = a2;
    v83 = a1;
    v90 = 0;
    v110 = &v112;
    v111 = xmmword_1C3E37B50;
    while (1)
    {
      v6 = 0;
      do
      {
        v86 = v6;
        v87 = 0;
        v93 = off_1E7E8B0B8[v6];
        v91 = *v93;
        __s = v93 + 2;
        do
        {
          if (*v93 == 102)
          {
            v85 = 1;
          }
          else
          {
            v85 = 2;
            if (*off_1E7E8B0B8[v87] != 102)
            {
              v84 = 0;
              v7 = 1;
              goto LABEL_11;
            }
          }
          v84 = 1;
          v7 = 4;
LABEL_11:
          v89 = v7;
          v8 = 0;
          v10 = v6 > 2 && v87 > 2;
          v88 = v10;
          do
          {
            v11 = !v88;
            if (!v8)
              v11 = 0;
            if (!v11)
            {
              v12 = 0;
              v13 = 0;
              v98 = byte_1C3DF0334[v86];
              v96 = byte_1C3DF0334[v87];
              v14 = v85;
              if ((v84 & (v8 == 0)) == 0)
                v14 = v8;
              v95 = v14;
              v97 = off_1E7E8B0B8[v87];
              v94 = v97 + 2;
              v15 = 1;
              while (1)
              {
                v100 = *v93;
                v101 = v93[2] == 98;
                v99 = *v97;
                *(_QWORD *)&v111 = 0;
                llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v110, *v93);
                llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v110, v93[1]);
                v16 = (char *)*(&off_1E7E8B088 + v90);
                v17 = strlen(v16);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, v16, &v16[v17]);
                v18 = strlen(__s);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, __s, &__s[v18]);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, ".", "");
                llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v110, *v97);
                llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v110, v97[1]);
                v19 = strlen(v16);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, v16, &v16[v19]);
                v20 = strlen(v94);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, v94, &v94[v20]);
                v21 = strlen((const char *)*(&off_1E7E8B118 + v8));
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, *(&off_1E7E8B118 + v8), (_BYTE *)*(&off_1E7E8B118 + v8) + v21);
                v22 = strlen((const char *)*(&off_1E7E8B148 + v13));
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v110, *(&off_1E7E8B148 + v13), (_BYTE *)*(&off_1E7E8B148 + v13) + v22);
                v23 = v110;
                v24 = v111;
                v25 = llvm::StringMapImpl::LookupBucketFor();
                v27 = *v5;
                v28 = v25;
                v29 = *(_QWORD *)(*v5 + 8 * v25);
                if (v29 == -8)
                  break;
                if (!v29)
                  goto LABEL_28;
LABEL_37:
                v26.i16[0] = v99;
                v26.i16[1] = v100;
                *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vceq_s16((int16x4_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 0), (int16x4_t)0x73007300660066), (int8x8_t)0x1000100010001);
                *(_DWORD *)(v29 + 8) = vmovn_s16(v26).u32[0];
                *(_BYTE *)(v29 + 12) = v101;
                *(_BYTE *)(v29 + 13) = v96;
                *(_BYTE *)(v29 + 14) = v98;
                *(_DWORD *)(v29 + 16) = v95;
                *(_BYTE *)(v29 + 20) = v12;
                v37 = v15 & (v91 != 102);
                v12 = 1;
                v13 = 1;
                v15 = 0;
                if ((v37 & 1) == 0)
                  goto LABEL_38;
              }
              LODWORD(qword_1ED839868) = qword_1ED839868 - 1;
LABEL_28:
              v30 = v8;
              v31 = v5;
              v32 = MEMORY[0x1CAA2C6C0](v24 + 25, 8);
              v33 = (_QWORD *)v32;
              v34 = v32 + 24;
              if (v24)
                memcpy((void *)(v32 + 24), v23, v24);
              *(_BYTE *)(v34 + v24) = 0;
              v33[1] = 0;
              v33[2] = 0;
              *v33 = v24;
              *(_QWORD *)(v27 + 8 * v28) = v33;
              v5 = v31;
              ++*((_DWORD *)v31 + 3);
              v35 = (uint64_t *)(*v31 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v31));
              v8 = v30;
              while (1)
              {
                v29 = *v35;
                if (*v35 && v29 != -8)
                  break;
                ++v35;
              }
              goto LABEL_37;
            }
LABEL_38:
            ++v8;
          }
          while (v8 != v89);
          v6 = v86;
          ++v87;
        }
        while (v87 != 12);
        v6 = v86 + 1;
      }
      while (v86 != 11);
      if (++v90 == 6)
      {
        if (v110 != &v112)
          free(v110);
        a2 = v82;
        a1 = v83;
        break;
      }
    }
  }
  Key = llvm::StringMapImpl::FindKey();
  v39 = Key;
  if (Key == -1)
    v39 = *((unsigned int *)v5 + 2);
  v40 = *(_QWORD *)(*v5 + 8 * v39);
  v41 = *a2;
  if (*(_BYTE *)(v40 + 9))
  {
    if (*(_BYTE *)(v40 + 8))
    {
      v42 = *(unsigned __int8 *)(v40 + 14);
      v43 = *(unsigned __int8 *)(v40 + 13);
      if (v42 != v43)
        goto LABEL_52;
      if (*(_QWORD *)v41 == *(_QWORD *)(a1 + 160))
      {
        v64 = (llvm::IRBuilderBase *)(a1 + 8);
        v65 = *(llvm::Type **)(a1 + 168);
        v113 = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v41, v65, (const llvm::Twine *)&v110);
        v49 = *(llvm::Type **)(a1 + 152);
      }
      else
      {
        if (*(_QWORD *)v41 != *(_QWORD *)(a1 + 152))
        {
LABEL_52:
          if (v42 >= v43)
          {
            v63 = *(llvm::Type **)(a1 + 168);
            v113 = 257;
            return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v41, v63, (const llvm::Twine *)&v110);
          }
          v44 = *(_QWORD *)(a1 + 752);
          if (v44)
          {
            if (*(_BYTE *)(v44 + 19))
            {
              v45 = *(_QWORD *)(a1 + 368);
              v102 = *(_OWORD *)(a1 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
              v104 = *(_DWORD *)(a1 + 104);
              v41 = (llvm::Value *)AGCLLVMTargetLowerer::buildRTZF16Value(v45, (uint64_t)&v102, (uint64_t *)v41, 0);
              if (v103)
                llvm::MetadataTracking::untrack();
            }
          }
          v46 = *(_DWORD *)(v40 + 16);
          if (v46 == 1 || v46 == 2)
          {
            v47 = (llvm::IRBuilderBase *)(a1 + 8);
            v48 = 160;
            if (!*(_BYTE *)(v40 + 12))
              v48 = 152;
            v49 = *(llvm::Type **)(a1 + v48);
            v113 = 257;
            FPExt = v41;
            return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v47, FPExt, v49, (const llvm::Twine *)&v110);
          }
          return 0;
        }
        v64 = (llvm::IRBuilderBase *)(a1 + 8);
        v66 = *(llvm::Type **)(a1 + 168);
        v113 = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v41, v66, (const llvm::Twine *)&v110);
        v49 = *(llvm::Type **)(a1 + 160);
      }
      v113 = 257;
      v47 = v64;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v47, FPExt, v49, (const llvm::Twine *)&v110);
    }
    v55 = 160;
    if (!*(_BYTE *)(v40 + 12))
      v55 = 152;
    v56 = 168;
    if (*(_BYTE *)(v40 + 14) == 16)
      v56 = v55;
    if (*(_DWORD *)(v40 + 16) == 1)
    {
      v57 = *(llvm::Type **)(a1 + v56);
      v58 = (llvm::IRBuilderBase *)(a1 + 8);
      if (*(_BYTE *)(v40 + 10))
      {
        v113 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateSIToFP(v58, v41, v57, (const llvm::Twine *)&v110);
      }
      else
      {
        v105 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v58, v41, v57, (const llvm::Twine *)&v102);
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(v40 + 8))
  {
    v60 = 0;
    v61 = *(unsigned __int8 *)(v40 + 14);
    if (v61 <= 0xF)
    {
      if (v61 == 1)
      {
        v80 = (llvm::CmpInst **)AGCLLVMBuilder::i32Extend((AGCLLVMBuilder *)a1, (llvm::Type **)v41, *(unsigned __int8 *)(v40 + 10));
        v81 = llvm::ConstantInt::get();
        v113 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v80, v81, (uint64_t)&v110);
      }
      if (v61 != 8)
        goto LABEL_119;
      v62 = (uint64_t *)(a1 + 184);
    }
    else
    {
      switch(v61)
      {
        case 0x10u:
          v62 = (uint64_t *)(a1 + 192);
          break;
        case 0x20u:
          v62 = (uint64_t *)(a1 + 200);
          break;
        case 0x40u:
          v62 = (uint64_t *)(a1 + 208);
          break;
        default:
LABEL_119:
          if (v61 >= *(unsigned __int8 *)(v40 + 13))
          {
            v78 = a1 + 8;
            if (*(_BYTE *)(v40 + 10))
            {
              v113 = 257;
              v79 = 40;
            }
            else
            {
              v113 = 257;
              v79 = 39;
            }
          }
          else
          {
            v78 = a1 + 8;
            v113 = 257;
            v79 = 38;
          }
          return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v78, v79, (uint64_t)v41, v60, (uint64_t)&v110);
      }
    }
    v60 = *v62;
    goto LABEL_119;
  }
  v51 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v41, 1);
  v52 = 0;
  v109 = v51;
  v53 = *(unsigned __int8 *)(v40 + 14);
  if (v53 <= 0xF)
  {
    if (v53 == 1)
    {
      llvm::ConstantFP::get();
      v113 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
    }
    if (v53 == 8)
    {
      v54 = (llvm::Type **)(a1 + 184);
      goto LABEL_94;
    }
  }
  else
  {
    switch(v53)
    {
      case 0x10u:
        v54 = (llvm::Type **)(a1 + 192);
        goto LABEL_94;
      case 0x20u:
        v54 = (llvm::Type **)(a1 + 200);
        goto LABEL_94;
      case 0x40u:
        v54 = (llvm::Type **)(a1 + 208);
LABEL_94:
        v52 = *v54;
        break;
    }
  }
  v67 = *(char **)(a1 + 752);
  if (v67)
  {
    v68 = (*(unsigned int (**)(char *))(*(_QWORD *)&v67[*(_QWORD *)(*(_QWORD *)v67 - 24)] + 64))(&v67[*(_QWORD *)(*(_QWORD *)v67 - 24)]) == 6
       && *(_BYTE *)(v40 + 11) == 0;
    if (v68 && *(_DWORD *)(v40 + 16) != 1)
    {
      v70 = *(_QWORD *)(a1 + 368);
      v106 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v108 = *(_DWORD *)(a1 + 104);
      v51 = (llvm *)AGCLLVMTargetLowerer::buildBiasF2IVarying(v70, (uint64_t)&v106, v51);
      v109 = v51;
      if (v107)
        llvm::MetadataTracking::untrack();
    }
  }
  v71 = *(_DWORD *)(v40 + 16);
  if (v71 == 2)
  {
    v75 = (llvm::IRBuilderBase *)(a1 + 8);
    if (*(_BYTE *)(v40 + 11))
    {
      v113 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI(v75, v51, v52, (const llvm::Twine *)&v110);
    }
    else
    {
      v113 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v75, v51, v52, (const llvm::Twine *)&v110);
    }
  }
  else
  {
    if (v71 != 1)
      return 0;
    v72 = *(_QWORD *)(a1 + 368);
    v73 = *(_QWORD *)(v72 + 1280);
    if (v73)
      v74 = strlen(*(const char **)(v72 + 1280));
    else
      v74 = 0;
    v76 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v73, v74, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 168));
    v113 = 257;
    v77 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v76 + 24), v76, (uint64_t)&v109, 1, (uint64_t)&v110);
    v105 = 257;
    return llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(a1 + 8), v77, v52, 0, (const llvm::Twine *)&v102);
  }
}

uint64_t llvm::IRBuilderBase::CreateFPTrunc(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 45, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t AGCLLVMAirBuiltins::buildFastFMax(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  _QWORD *v6;
  int v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;

  v6 = (_QWORD *)*((_QWORD *)this + 94);
  if (v6)
    LODWORD(v6) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 136) & 2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v9 = v7 == 2 && (_DWORD)v6 == 0;
  v10 = *((_QWORD *)this + 46);
  v13 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v15 = *((_DWORD *)this + 26);
  v11 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *, _BOOL8))(*(_QWORD *)v10 + 56))(v10, &v13, a2, a3, v9);
  if (v14)
    llvm::MetadataTracking::untrack();
  return v11;
}

uint64_t AGCLLVMUserObject::replaceSamplerInput<llvm::Argument>(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;

  if (!*((_QWORD *)a2 + 1))
    return 1;
  v18 = 0;
  v17 = 0;
  v5 = parseMDSampler(a3, (_DWORD *)&v18 + 1, &v18, &v17);
  result = 0;
  if (v5)
  {
    v7 = *(_QWORD *)a2;
    v8 = v17;
    if (v17)
    {
      v9 = **(_QWORD **)(v7 + 16);
      if (*(_BYTE *)(v9 + 8) == 16)
        v9 = **(_QWORD **)(v9 + 16);
      v7 = **(_QWORD **)(v9 + 16);
    }
    v10 = *(_DWORD *)(v7 + 8);
    if ((v10 & 0x1FF) == 0x110)
    {
      v7 = **(_QWORD **)(v7 + 16);
      LOBYTE(v10) = *(_BYTE *)(v7 + 8);
    }
    if (v10 == 15)
    {
      v11 = **(_QWORD **)(v7 + 16);
      if ((*(_DWORD *)(v11 + 8) & 0x1FF) == 0x110)
        v7 = **(_QWORD **)(v11 + 16);
    }
    v16 = 0;
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v15 = **(_QWORD **)(v7 + 16);
    v13 = v18;
    v12 = HIDWORD(v18);
    LODWORD(v14) = HIDWORD(v18) & 0xFFFFF;
    DWORD1(v14) = v18;
    std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>((uint64_t *)(a1 + 976), HIDWORD(v18) & 0xFFFFF, &v14);
    return AGCLLVMUserObject::replaceTextureOrSamplerArgument((AGCLLVMUserObject *)a1, a2, v12, v13, v8, (unsigned __int8 **)(a1 + 2944));
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceTextureOrSamplerArgument(AGCLLVMUserObject *this, llvm::Value *a2, unsigned int a3, unsigned int a4, char a5, unsigned __int8 **a6)
{
  llvm::Value *v8;
  uint64_t v10;
  llvm::Type *v11;
  uint64_t i;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  llvm::Type **v18;
  llvm::Type *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  llvm::Type *v24;
  llvm::Type *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Type *v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  int v40;
  char *v41;
  llvm::Type **v42;
  uint64_t v43;
  llvm::Type *v44;
  llvm::Value *IntCast;
  BOOL v46;
  unint64_t v47;
  _QWORD *v48;
  llvm::Value *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::Instruction **v60;
  uint64_t v61;
  void *Name;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  llvm::IRBuilderBase *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Instruction *v75;
  llvm::Value *v76;
  uint64_t AllocaInEntryBlock;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  llvm::Value *v82;
  llvm::Type *v83;
  uint64_t GEP;
  llvm::Value *v85;
  llvm::Type **v86;
  uint64_t v87;
  unsigned int v88;
  llvm::Type *v89;
  llvm::Value *v91;
  uint64_t *v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *v98;
  llvm::Type *v99;
  llvm::Type *v100;
  unsigned int v101;
  llvm::Type *v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  void *__p[2];
  uint64_t v109;
  __int16 v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  void *__src;
  uint64_t v115;
  _BYTE v116[256];
  void *v117;
  uint64_t v118;
  _QWORD v119[34];

  v8 = a2;
  v119[32] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a2;
  if ((a5 & 1) != 0)
  {
    if (*(_BYTE *)(v10 + 8) != 15)
      return 0;
    v89 = **(llvm::Type ***)(v10 + 16);
    v11 = (llvm::Type *)**((_QWORD **)v89 + 2);
    v102 = v11;
    if (*((_BYTE *)v11 + 8) == 16)
      v102 = (llvm::Type *)**((_QWORD **)v11 + 2);
    __src = a2;
    v117 = v119;
    v118 = 0x2000000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v117, &__src, &v115);
    for (i = *((_QWORD *)v8 + 1); i; i = *(_QWORD *)(i + 8))
    {
      v13 = *(_QWORD *)(i + 24);
      if (*(_BYTE *)(v13 + 16) == 77)
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v117, v13);
    }
    v14 = a3;
    __src = v116;
    v115 = 0x2000000000;
    v91 = v8;
    if ((_DWORD)v118)
    {
      v15 = (uint64_t *)v117;
      v16 = (uint64_t *)((char *)v117 + 8 * v118);
      v17 = a4;
      v98 = (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)a6;
      v88 = a3;
      v92 = v16;
      v93 = a3 | ((unint64_t)(a3 + a4 - 1) << 32);
      v99 = v11;
      v94 = a3;
      while (1)
      {
        v18 = *(llvm::Type ***)(*(_QWORD *)*v15 + 16);
        v19 = *v18;
        v20 = *((unsigned __int8 *)*v18 + 8);
        if (*v18)
          v21 = v20 == 16;
        else
          v21 = 0;
        if (v21)
        {
          if (*((_DWORD *)v19 + 3) != 1)
            goto LABEL_103;
          v23 = *(unsigned __int8 *)(**((_QWORD **)v19 + 2) + 8);
          v21 = v23 == 15;
          v22 = v23 != 15;
          if (!v21)
            v19 = (llvm::Type *)**((_QWORD **)v19 + 2);
          v20 = *((unsigned __int8 *)v19 + 8);
        }
        else
        {
          v22 = 0;
        }
        if (v20 == 17)
          v24 = v19;
        else
          v24 = 0;
        if (v24)
        {
          if (*((_QWORD *)v24 + 4) > v17)
            goto LABEL_103;
          v19 = (llvm::Type *)**((_QWORD **)v24 + 2);
          ++v22;
          v20 = *((unsigned __int8 *)v19 + 8);
        }
        if (v20 == 16)
          v25 = v19;
        else
          v25 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 3) != 1)
            goto LABEL_103;
          v19 = (llvm::Type *)**((_QWORD **)v25 + 2);
          v26 = v22 + 2;
        }
        else
        {
          v26 = v22 + 1;
        }
        if ((unint64_t)v24 | (unint64_t)v25)
          v27 = v19 == v102;
        else
          v27 = 0;
        if (v27)
        {
          v100 = v25;
          v97 = v22 + 1;
          v95 = *v15;
          v28 = *(_QWORD *)(*v15 + 8);
          if (!v28)
          {
LABEL_101:
            a6 = (unsigned __int8 **)v98;
            v11 = v99;
            v17 = a4;
            v16 = v92;
            if (*(unsigned __int8 *)(v95 + 16) > 0x1Bu)
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v95);
            goto LABEL_103;
          }
          v96 = v22;
          v101 = v26;
          while (2)
          {
            v29 = *(_QWORD *)(v28 + 24);
            if (!v29
              || *(_BYTE *)(v29 + 16) != 62
              || ((v30 = *(_DWORD *)(v29 + 20) & 0x7FFFFFF,
                   v31 = (v30 - 1),
                   v32 = **(llvm::Type ***)(*(_QWORD *)v29 + 16),
                   v32 == v102)
                ? (v33 = (_DWORD)v31 == v26)
                : (v33 = 1),
                  !v33 || (v32 == v100 ? (v34 = (_DWORD)v30 == v26) : (v34 = 1), !v34)))
            {
LABEL_100:
              v28 = *(_QWORD *)(v28 + 8);
              if (!v28)
                goto LABEL_101;
              continue;
            }
            break;
          }
          if ((_DWORD)v30 != 1)
          {
            v35 = v29 - 32 * v30 + 32;
            v36 = v96;
            do
            {
              if (v36)
              {
                v37 = *(_QWORD *)v35;
                if (*(_BYTE *)(*(_QWORD *)v35 + 16) != 16)
                  goto LABEL_100;
                v38 = (_QWORD *)(v37 + 24);
                v39 = *(_DWORD *)(v37 + 32);
                if (v39 >= 0x41)
                {
                  v40 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v37 + 24));
                  v26 = v101;
                  if (v39 - v40 > 0x40)
                    goto LABEL_100;
                  v38 = (_QWORD *)*v38;
                }
                if (*v38)
                  goto LABEL_100;
              }
              v35 += 32;
              --v36;
            }
            while (--v31);
          }
          v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v111 = *(_OWORD *)(v41 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 40));
          v113 = *((_DWORD *)v41 + 34);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v29);
          v42 = *(llvm::Type ***)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32 * v97);
          v43 = *(_QWORD *)(*(_QWORD *)this - 24);
          v44 = *(llvm::Type **)((char *)this + v43 + 232);
          v110 = 257;
          IntCast = llvm::IRBuilderBase::CreateIntCast((AGCLLVMUserObject *)((char *)this + v43 + 40), v42, v44, 0, (const llvm::Twine *)__p);
          if (IntCast)
            v46 = *((_BYTE *)IntCast + 16) == 16;
          else
            v46 = 0;
          v47 = v93;
          if (v46)
          {
            v48 = (_QWORD *)((char *)IntCast + 24);
            if (*((_DWORD *)IntCast + 8) >= 0x41u)
              v48 = (_QWORD *)*v48;
            v47 = (*(_DWORD *)v48 + v94) | ((unint64_t)(*(_DWORD *)v48 + v94) << 32);
          }
          v107 = v47;
          v49 = AGCLLVMUserObject::buildAPIResourceIntrinsic(this, (unsigned __int8 **)v98, v99, IntCast, (AGCArgumentBuffer::Resource::Bounds *)&v107);
          if (v32 == v100)
          {
            v50 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
            v51 = llvm::UndefValue::get();
            v106 = 0;
            v110 = 257;
            llvm::IRBuilderBase::CreateInsertValue((uint64_t)v50, v51, (uint64_t)v49, (uint64_t)&v106, 1, (uint64_t)__p);
          }
          v52 = *(_QWORD *)(v29 + 8);
          if (!v52)
          {
LABEL_93:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v29);
            v59 = *(_QWORD *)(*(_QWORD *)this - 24);
            v103 = v111;
            v104 = v112;
            if (v112)
              llvm::MetadataTracking::track();
            v105 = v113;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v103, (uint64_t)this + v59 + 40);
            if (v104)
              llvm::MetadataTracking::untrack();
            if (v112)
              llvm::MetadataTracking::untrack();
            v26 = v101;
            goto LABEL_100;
          }
          while (2)
          {
            v53 = *(_QWORD *)(v52 + 24);
            v54 = *(unsigned __int8 *)(v53 + 16);
            if (v53 && v54 == 60)
            {
              llvm::Value::replaceAllUsesWith();
              goto LABEL_75;
            }
            if (v53)
            {
              if (v54 == 77)
              {
                v55 = *(_QWORD *)(v53 + 8);
                if (v55)
                {
                  if (!*(_QWORD *)(v55 + 8)
                    && *(_BYTE *)(*(_QWORD *)v53 + 8) == 15
                    && **(_QWORD **)(*(_QWORD *)v53 + 16) == *(_QWORD *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                         + 240))
                  {
                    v56 = *(_QWORD *)(v55 + 24);
                    if (v56)
                    {
                      if (*(_BYTE *)(v56 + 16) == 60)
                      {
                        v57 = *(_QWORD *)(v56 + 8);
                        if (v57)
                        {
                          if (!*(_QWORD *)(v57 + 8))
                          {
                            v58 = *(_QWORD *)(v57 + 24);
                            if (v58)
                            {
                              if (*(_BYTE *)(v58 + 16) == 76
                                && (*(llvm::Type **)v58 == v99 || *(llvm::Type **)v58 == v100))
                              {
                                v87 = *(_QWORD *)(v57 + 24);
                                llvm::Value::replaceAllUsesWith();
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v87);
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v56);
LABEL_75:
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v53);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v52 = *(_QWORD *)(v52 + 8);
            if (!v52)
              goto LABEL_93;
            continue;
          }
        }
LABEL_103:
        if (++v15 == v16)
        {
          v8 = v91;
          v14 = v88;
          if ((_DWORD)v115)
          {
            v60 = (llvm::Instruction **)__src;
            v61 = 8 * v115;
            do
            {
              if (!*((_QWORD *)*v60 + 1))
                llvm::Instruction::eraseFromParent(*v60);
              ++v60;
              v61 -= 8;
            }
            while (v61);
          }
          break;
        }
      }
    }
    if (*((_QWORD *)v8 + 1))
    {
      Name = (void *)llvm::Value::getName(v8);
      if (Name)
      {
        std::string::basic_string[abi:nn180100](__p, Name, v63);
        if (v109 >= 0)
          v70 = __p;
        else
          LOBYTE(v70) = __p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v70 = __p;
        v109 = 0;
      }
      printMessage((char **)&AGCPrinter, "!!!! Perf: Argument %s: failed to patten match the array of texture/sampler, spilling!!", v64, v65, v66, v67, v68, v69, (char)v70);
      if (SHIBYTE(v109) < 0)
        operator delete(__p[0]);
      AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v89);
      v79 = AllocaInEntryBlock + 24;
      if (!AllocaInEntryBlock)
        v79 = 0;
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40, *(_QWORD *)(AllocaInEntryBlock + 40), *(_QWORD *)(v79 + 8));
      if (a4)
      {
        v80 = 0;
        do
        {
          LODWORD(v107) = v14 + v80;
          HIDWORD(v107) = v14 + v80;
          v81 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *(_QWORD *)&v111 = llvm::ConstantInt::get();
          *((_QWORD *)&v111 + 1) = llvm::ConstantInt::get();
          v110 = 257;
          v83 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)AllocaInEntryBlock, v82);
          GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v81 + 40), (uint64_t)v83, (uint64_t *)AllocaInEntryBlock, (uint64_t **)&v111, 2, (uint64_t)__p);
          v85 = (llvm::Value *)llvm::ConstantInt::get();
          v86 = (llvm::Type **)AGCLLVMUserObject::buildAPIResourceIntrinsic(this, a6, v11, v85, (AGCArgumentBuffer::Resource::Bounds *)&v107);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v86, GEP, 0);
          ++v80;
        }
        while (a4 != v80);
      }
      llvm::Value::replaceAllUsesWith();
    }
    if (__src != v116)
      free(__src);
    if (v117 != v119)
      free(v117);
  }
  else
  {
    v71 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v72 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
    if (v72)
      v73 = v72 - 24;
    else
      v73 = 0;
    v74 = *(_QWORD *)(v73 + 40);
    if (v74)
      v75 = (llvm::Instruction *)(v74 - 24);
    else
      v75 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v71, v75);
    LODWORD(v117) = a3;
    HIDWORD(v117) = a3;
    v76 = (llvm::Value *)llvm::ConstantInt::get();
    AGCLLVMUserObject::buildAPIResourceIntrinsic(this, a6, (llvm::Type *)v10, v76, (AGCArgumentBuffer::Resource::Bounds *)&v117);
    llvm::Value::replaceAllUsesWith();
  }
  return 1;
}

uint64_t AGCArgumentBuffer::Resource::Bounds::toConstantVector(uint64_t a1, llvm::Type **a2)
{
  llvm::LLVMContext *v3;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(a2[8], v3);
  llvm::ConstantInt::get();
  return llvm::ConstantVector::get();
}

uint64_t AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(unsigned __int8 **a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  _QWORD **v21;
  _QWORD *j;
  unint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t prime;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _QWORD v50[4];
  __int16 v51;
  void *__p;
  char v53;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (int8x8_t)a1[2];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = v8 & (*(_QWORD *)&v9 - 1);
    }
    v12 = *(_QWORD **)&a1[1][8 * v11];
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == a3)
            return i[5];
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
          }
          else
          {
            v14 &= *(_QWORD *)&v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  llvm::FunctionType::get();
  v15 = (uint64_t)*a1;
  v16 = **a1;
  v49 = a1[4];
  if (v16)
  {
    v50[0] = v15;
    v50[2] = &v49;
    v17 = 2563;
  }
  else
  {
    v50[0] = &v49;
    v17 = 266;
  }
  v51 = v17;
  llvm::Twine::str((llvm::Twine *)v50);
  llvm::Module::getOrInsertFunction();
  v47 = v18;
  if (v53 < 0)
    operator delete(__p);
  v19 = (unint64_t)a1[2];
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v19)
        v3 = v8 % v19;
    }
    else
    {
      v3 = v8 & (v19 - 1);
    }
    v21 = *(_QWORD ***)&a1[1][8 * v3];
    if (v21)
    {
      for (j = *v21; j; j = (_QWORD *)*j)
      {
        v23 = j[1];
        if (v23 == v8)
        {
          if (j[2] == a3)
            goto LABEL_95;
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= v19)
              v23 %= v19;
          }
          else
          {
            v23 &= v19 - 1;
          }
          if (v23 != v3)
            break;
        }
      }
    }
  }
  v24 = a1 + 3;
  j = operator new(0x30uLL);
  *j = 0;
  j[1] = v8;
  j[2] = a3;
  j[3] = 4;
  j[4] = 0;
  j[5] = 0;
  v25 = (float)(unint64_t)(a1[4] + 1);
  v26 = *((float *)a1 + 10);
  if (!v19 || (float)(v26 * (float)v19) < v25)
  {
    v27 = 1;
    if (v19 >= 3)
      v27 = (v19 & (v19 - 1)) != 0;
    v28 = v27 | (2 * v19);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = (int8x8_t)v29;
    else
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v19 = (unint64_t)a1[2];
    }
    if (*(_QWORD *)&prime > v19)
      goto LABEL_51;
    if (*(_QWORD *)&prime < v19)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)a1[4] / *((float *)a1 + 10));
      if (v19 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (*(_QWORD *)&prime <= v37)
        prime = (int8x8_t)v37;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = (unint64_t)a1[2];
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = (unsigned __int8 *)operator new(8 * *(_QWORD *)&prime);
          v32 = a1[1];
          a1[1] = v31;
          if (v32)
            operator delete(v32);
          v33 = 0;
          a1[2] = (unsigned __int8 *)prime;
          do
            *(_QWORD *)&a1[1][8 * v33++] = 0;
          while (*(_QWORD *)&prime != v33);
          v34 = (_QWORD *)*v24;
          if (*v24)
          {
            v35 = v34[1];
            v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&prime)
                v35 %= *(_QWORD *)&prime;
            }
            else
            {
              v35 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)&a1[1][8 * v35] = v24;
            v40 = (_QWORD *)*v34;
            if (*v34)
            {
              do
              {
                v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(_QWORD *)&prime)
                    v41 %= *(_QWORD *)&prime;
                }
                else
                {
                  v41 &= *(_QWORD *)&prime - 1;
                }
                if (v41 != v35)
                {
                  v42 = a1[1];
                  if (!*(_QWORD *)&v42[8 * v41])
                  {
                    *(_QWORD *)&v42[8 * v41] = v34;
                    goto LABEL_76;
                  }
                  *v34 = *v40;
                  *v40 = **(_QWORD **)&a1[1][8 * v41];
                  **(_QWORD **)&a1[1][8 * v41] = v40;
                  v40 = v34;
                }
                v41 = v35;
LABEL_76:
                v34 = v40;
                v40 = (_QWORD *)*v40;
                v35 = v41;
              }
              while (v40);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_80;
        }
        v48 = a1[1];
        a1[1] = 0;
        if (v48)
          operator delete(v48);
        v19 = 0;
        a1[2] = 0;
      }
    }
LABEL_80:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v8 >= v19)
        v3 = v8 % v19;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v19 - 1) & v8;
    }
  }
  v43 = a1[1];
  v44 = *(unsigned __int8 **)&v43[8 * v3];
  if (v44)
  {
    *j = *(_QWORD *)v44;
  }
  else
  {
    *j = *v24;
    *v24 = j;
    *(_QWORD *)&v43[8 * v3] = v24;
    if (!*j)
      goto LABEL_94;
    v45 = *(_QWORD *)(*j + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v45 >= v19)
        v45 %= v19;
    }
    else
    {
      v45 &= v19 - 1;
    }
    v44 = &a1[1][8 * v45];
  }
  *(_QWORD *)v44 = j;
LABEL_94:
  ++a1[4];
LABEL_95:
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(j + 3), v47);
  return v47;
}

uint64_t *std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>(uint64_t *result, unsigned int a2, _OWORD *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  __int128 v10;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = a3[1];
    *((_OWORD *)v9 + 2) = *a3;
    *((_OWORD *)v9 + 3) = v10;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t parseMDSampler(uint64_t a1, _DWORD *a2, _DWORD *a3, BOOL *a4)
{
  _QWORD *String;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v21;

  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8));
  if (v9 != 11)
    return 0;
  if (*String != 0x706D61732E726961 || *(_QWORD *)((char *)String + 3) != 0x72656C706D61732ELL)
    return 0;
  *a4 = 0;
  *a3 = 1;
  v12 = *(_DWORD *)(a1 + 8);
  v21 = 2;
  if (v12 >= 3)
  {
    do
    {
      if (parseMDLocationIndex(a1, &v21, a2, a3))
      {
        v13 = v21;
      }
      else
      {
        v14 = parseMDInt("air.binding", a1, &v21, a2);
        v15 = v21;
        v13 = v21;
        if ((v14 & 1) == 0)
        {
          v13 = ++v21;
          if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v15), "air.arg_type_name"))
          {
            v16 = v15 + 2;
            v21 = v16;
            v17 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v13));
            v19 = v18 >= 5 && *(_DWORD *)v17 == 1634890337 && *(_BYTE *)(v17 + 4) == 121;
            *a4 = v19;
            v13 = v16;
          }
        }
      }
    }
    while (v13 < v12);
  }
  return 1;
}

void AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(AGCLLVMUserShader *this)
{
  char *v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t Impl;
  uint64_t v7;
  unsigned __int8 *v8;
  llvm::GlobalObject *v9;
  _QWORD *SectionImpl;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t i;
  int v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  char *__p;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  llvm::DataLayout *v69;
  char *v70;
  unsigned int v71;
  int v72;
  int v73;
  unint64_t TypeAllocSize;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v2 = *((unsigned int *)v1 + 696);
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)*((_QWORD *)v1 + 347);
    v5 = &v4[v2];
    v70 = (char *)this + 368;
    v69 = (AGCLLVMUserShader *)((char *)this + 232);
    while (1)
    {
      Impl = *v4;
      v7 = *(unsigned int *)(*v4 + 8);
      if (v7 >= 3)
      {
        v8 = *(unsigned __int8 **)(Impl - 8 * v7);
        if (v8)
        {
          if (*v8 - 1 <= 1)
          {
            v9 = (llvm::GlobalObject *)*((_QWORD *)v8 + 16);
            if (v9)
            {
              if (*((_BYTE *)v9 + 16) == 3 && (*((_BYTE *)v9 + 34) & 0x40) != 0)
              {
                SectionImpl = (_QWORD *)llvm::GlobalObject::getSectionImpl(v9);
                if (v11 == 15
                  && *SectionImpl == 0x625F726566667562
                  && *(_QWORD *)((char *)SectionImpl + 7) == 0x73676E69646E6962)
                {
                  v13 = *(_QWORD *)v9;
                  v14 = *(_DWORD *)(*(_QWORD *)v9 + 8);
                  if (v14 == 15)
                  {
                    if ((v14 & 0xFE) == 0x12)
                      v14 = *(_DWORD *)(**(_QWORD **)(v13 + 16) + 8);
                    if ((v14 & 0xFFFFFF00) == 0x4000)
                    {
                      v15 = **(_QWORD **)(v13 + 16);
                      v16 = *(_DWORD *)(v15 + 8);
                      if (v16 == 15)
                      {
                        if ((v16 & 0xFE) == 0x12)
                          v16 = *(_DWORD *)(**(_QWORD **)(v15 + 16) + 8);
                        if ((v16 >> 8) - 1 <= 1)
                        {
                          for (i = *((_QWORD *)v9 + 1); i; i = *(_QWORD *)(i + 8))
                          {
                            if (*(_BYTE *)(*(_QWORD *)(i + 24) + 16) != 60)
                              goto LABEL_133;
                          }
                          v18 = 0;
                          v73 = 0;
                          if (*(_DWORD *)(Impl + 8) != 4)
                            break;
                          v67 = v15;
                          LODWORD(TypeAllocSize) = 3;
                          if (parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v73))
                          {
                            v18 = v73;
                            v15 = v67;
                            if (v73 != -1)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_133:
      *v4++ = Impl;
      if (v4 == v5)
        return;
    }
    v65 = v18;
    v68 = **(unsigned __int8 ***)(v15 + 16);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 192))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)))
      goto LABEL_30;
    v19 = v68;
    v20 = v68[8];
    if (v20 != 16)
      v19 = 0;
    if (v20 == 7 || v19 && (v19[9] & 1) == 0)
      goto LABEL_133;
    v71 = 0;
    v72 = 0;
    LODWORD(TypeAllocSize) = 1;
    parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v72);
    LODWORD(TypeAllocSize) = 2;
    parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v71);
    v21 = *(_QWORD *)&v70[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
    v22 = *(_BYTE *)(v21 + 1774) && v72 == 5;
    if (v22 && (v71 & 0x80000000) != 0
      || (!*(_BYTE *)(v21 + 1761) ? (v23 = v72 == 5) : (v23 = 0),
          v23 && (v71 & 0x80000000) != 0 && ((*((_QWORD *)this + 413) >> ((unint64_t)v71 >> 20)) & 1) != 0))
    {
LABEL_30:
      TypeAllocSize = llvm::ValueAsMetadata::get();
      v75 = *(_OWORD *)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8);
      llvm::ConstantInt::get();
      v76 = llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      goto LABEL_133;
    }
    if (v65)
      goto LABEL_133;
    v61 = v4;
    v62 = v5;
    v24 = *((_QWORD *)v9 + 1);
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = *(_QWORD *)(v24 + 24);
        if (v26 >= v27)
        {
          v29 = (v26 - v25) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
LABEL_135:
            abort();
          if ((v27 - v25) >> 3 > v30)
            v30 = (v27 - v25) >> 3;
          if ((unint64_t)(v27 - v25) >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
          {
            if (v31 >> 60)
LABEL_136:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v32 = (char *)operator new(16 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[16 * v29];
          *(_QWORD *)v33 = v28;
          *((_QWORD *)v33 + 1) = 0;
          if (v26 == v25)
          {
            v35 = &v32[16 * v29];
          }
          else
          {
            v34 = &v32[16 * v29];
            do
            {
              v35 = v34 - 16;
              *((_OWORD *)v34 - 1) = *((_OWORD *)v26 - 1);
              v26 -= 16;
              v34 -= 16;
            }
            while (v26 != v25);
          }
          v27 = &v32[16 * v31];
          v26 = v33 + 16;
          if (v25)
            operator delete(v25);
          v25 = v35;
        }
        else
        {
          *(_QWORD *)v26 = v28;
          *((_QWORD *)v26 + 1) = 0;
          v26 += 16;
        }
        v24 = *(_QWORD *)(v24 + 8);
      }
      while (v24);
      if (v25 != v26)
      {
        v66 = 0;
        __p = v25;
        v25 = v26;
        while (1)
        {
          v36 = *((_QWORD *)v25 - 2);
          v25 -= 16;
          v37 = *(_QWORD *)(v36 + 8);
          if (v37)
            break;
LABEL_123:
          if (__p == v25)
            goto LABEL_128;
        }
        v64 = *((_QWORD *)v25 + 1);
        while (1)
        {
          v38 = *(uint64_t **)(v37 + 24);
          v39 = *((unsigned __int8 *)v38 + 16);
          if (v39 == 77)
            break;
          if (v39 != 62)
          {
            if (v39 != 60)
              goto LABEL_125;
LABEL_87:
            v45 = v66;
            if (v66 <= v64)
              v45 = v64;
LABEL_102:
            v66 = v45;
            goto LABEL_103;
          }
          v46 = *((_DWORD *)v38 + 5) & 0x7FFFFFF;
          v47 = v38[-4 * v46 + 4];
          if (v47)
            v48 = *(_BYTE *)(v47 + 16) == 16;
          else
            v48 = 0;
          if (!v48)
            goto LABEL_125;
          v49 = (_QWORD *)(v47 + 24);
          if (*(_DWORD *)(v47 + 32) >= 0x41u)
            v49 = (_QWORD *)*v49;
          v50 = *v49 + v64;
          if ((_DWORD)v46 != 2)
          {
            v45 = v66;
            if (v66 <= v50)
              v45 = *v49 + v64;
            goto LABEL_102;
          }
          if (v25 >= v27)
          {
            v51 = (v25 - __p) >> 4;
            if ((unint64_t)(v51 + 1) >> 60)
              goto LABEL_135;
            v52 = (v27 - __p) >> 3;
            if (v52 <= v51 + 1)
              v52 = v51 + 1;
            if ((unint64_t)(v27 - __p) >= 0x7FFFFFFFFFFFFFF0)
              v53 = 0xFFFFFFFFFFFFFFFLL;
            else
              v53 = v52;
            if (v53)
            {
              if (v53 >> 60)
                goto LABEL_136;
              v54 = (char *)operator new(16 * v53);
            }
            else
            {
              v54 = 0;
            }
            v55 = &v54[16 * v51];
            *(_QWORD *)v55 = v38;
            *((_QWORD *)v55 + 1) = v50;
            if (v25 == __p)
            {
              v58 = &v54[16 * v51];
              v57 = __p;
            }
            else
            {
              v56 = &v54[16 * v51];
              v57 = __p;
              do
              {
                v58 = v56 - 16;
                *((_OWORD *)v56 - 1) = *((_OWORD *)v25 - 1);
                v25 -= 16;
                v56 -= 16;
              }
              while (v25 != __p);
            }
            v27 = &v54[16 * v53];
            v25 = v55 + 16;
            if (v57)
              operator delete(__p);
            __p = v58;
          }
          else
          {
            *(_QWORD *)v25 = v38;
            *((_QWORD *)v25 + 1) = v50;
            v25 += 16;
          }
LABEL_103:
          v37 = *(_QWORD *)(v37 + 8);
          if (!v37)
            goto LABEL_123;
        }
        v40 = *v38;
        if (*(_BYTE *)(*v38 + 8) != 15)
          goto LABEL_125;
        if (!llvm::Type::isSized(**(_QWORD **)(v40 + 16)))
          goto LABEL_125;
        TypeAllocSize = llvm::DataLayout::getTypeAllocSize(v69, (llvm::Type *)v68);
        *(_QWORD *)&v75 = v41;
        v42 = llvm::TypeSize::operator unsigned long long();
        TypeAllocSize = llvm::DataLayout::getTypeAllocSize(v69, **(llvm::Type ***)(v40 + 16));
        *(_QWORD *)&v75 = v43;
        if (llvm::TypeSize::operator unsigned long long() > v42)
          goto LABEL_125;
        v44 = v38[1];
        if (v44)
        {
          while (*(_BYTE *)(*(_QWORD *)(v44 + 24) + 16) == 60)
          {
            v44 = *(_QWORD *)(v44 + 8);
            if (!v44)
              goto LABEL_87;
          }
LABEL_125:
          v25 = __p;
LABEL_130:
          if (v25)
            operator delete(v25);
          v4 = v61;
          v5 = v62;
          goto LABEL_133;
        }
        goto LABEL_87;
      }
      v66 = 0;
    }
    else
    {
      v66 = 0;
      v25 = 0;
    }
LABEL_128:
    v59 = llvm::DataLayout::getTypeAllocSize(v69, (llvm::Type *)v68);
    TypeAllocSize = v59 + v59 * v66;
    *(_QWORD *)&v75 = v60;
    if ((unint64_t)llvm::TypeSize::operator unsigned long long() <= 0xFFFFFFFE)
    {
      TypeAllocSize = llvm::ValueAsMetadata::get();
      v75 = *(_OWORD *)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8);
      llvm::ConstantInt::get();
      v76 = llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
    }
    goto LABEL_130;
  }
}

BOOL parseMDTexture(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4, BOOL *a5, BOOL *a6, _BYTE *a7, int *a8)
{
  _BOOL8 v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t String;
  unint64_t v22;
  BOOL v23;
  BOOL *v24;
  BOOL v26;
  BOOL *v31;
  BOOL *v32;
  _BYTE *v33;
  unsigned int v34;

  v16 = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.texture");
  if (v16)
  {
    v31 = a5;
    v32 = a6;
    *a4 = 1;
    *a5 = 0;
    v33 = a7;
    *a7 = 0;
    v17 = *(_DWORD *)(a1 + 8);
    v34 = 2;
    if (v17 >= 3)
    {
      do
      {
        if ((parseMDLocationIndex(a1, &v34, a2, a3) & 1) == 0)
        {
          if (parseMDInt("air.binding", a1, &v34, a2))
          {
            *a3 = 1;
          }
          else
          {
            if (parseMDInt("air.raster_order_group", a1, &v34, a8))
            {
              v18 = *a8;
              if (*a8 >= 7)
                v18 = 7;
              *a8 = v18;
              *v33 = 1;
              continue;
            }
            if (!parseMDAccess(a1, &v34, a4))
            {
              v19 = v34;
              v20 = ++v34;
              if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v19), "air.arg_type_name"))
              {
                v34 = v19 + 2;
                String = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v20));
                if (v22 > 4)
                {
                  v26 = *(_DWORD *)String == 1634890337 && *(_BYTE *)(String + 4) == 121;
                  v24 = v32;
                  *v31 = v26;
                  if (v22 >= 0xE)
                  {
                    if (*(_QWORD *)String == 0x5F65727574786574 && *(_QWORD *)(String + 6) == 0x7265666675625F65)
                    {
                      v23 = 1;
                      goto LABEL_37;
                    }
                    if (v22 >= 0x14)
                    {
                      v23 = *(_QWORD *)String == 0x65743C7961727261
                         && *(_QWORD *)(String + 8) == 0x75625F6572757478
                         && *(_DWORD *)(String + 16) == 1919247974;
                      goto LABEL_37;
                    }
                  }
                  v23 = 0;
                }
                else
                {
                  v23 = 0;
                  v24 = v32;
                  *v31 = 0;
                }
LABEL_37:
                *v24 = v23;
              }
            }
          }
        }
      }
      while (v34 < v17);
    }
  }
  return v16;
}

BOOL parseMDBuffer(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _DWORD *a6, uint64_t *a7, char *a8, _BYTE *a9, int *a10, char *a11)
{
  _BOOL8 result;
  unsigned int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  unint64_t v30;
  _QWORD *String;
  uint64_t v33;
  BOOL v34;
  char v36;
  void **v37;
  void **v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  uint64_t v56;
  unsigned int v57[3];

  v44 = a2;
  if (!isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.buffer")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.indirect_buffer")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.visible_function_table")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.primitive_acceleration_structure")&& !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.instance_acceleration_structure"))
  {
    result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.intersection_function_table");
    if (!result)
      return result;
  }
  *a9 = 0;
  v18 = *(_DWORD *)(a1 + 8);
  LODWORD(v51) = 2;
  if (v18 >= 3)
  {
    do
    {
      if ((parseMDLocationIndex(a1, &v51, a3, a4) & 1) == 0
        && (parseMDInt("air.buffer_size", a1, (unsigned int *)&v51, a5) & 1) == 0
        && (parseMDInt("air.arg_type_size", a1, (unsigned int *)&v51, a6) & 1) == 0
        && !parseMDType<llvm::MDNode>("air.struct_type_info", a1, &v51, a7)
        && (parseMDInt("air.address_space", a1, (unsigned int *)&v51, &v44) & 1) == 0)
      {
        if (parseMDInt("air.raster_order_group", a1, (unsigned int *)&v51, a10))
        {
          v19 = *a10;
          if (*a10 >= 7)
            v19 = 7;
          *a10 = v19;
          *a9 = 1;
        }
        else if (!parseMDAccess(a1, &v51, a8))
        {
          LODWORD(v51) = (_DWORD)v51 + 1;
        }
      }
    }
    while (v51 < v18);
  }
  v20 = a11;
  v21 = *a5;
  if (*a5)
  {
    if (v44 == 2 && v21 <= 0xFFFFFFFC)
      v21 = (v21 + 3) & 0xFFFFFFFC;
    *a5 = v21;
  }
  if (!*a7)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v56 = *a7;
  v51 = v55;
  v52 = v55;
  v53 = 4;
  v54 = 0;
  v49 = 0u;
  v50 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<llvm::MDNode const*>::push_back(__p, &v56);
  v23 = *((_QWORD *)&v50 + 1);
  if (!*((_QWORD *)&v50 + 1))
  {
    v36 = 0;
    goto LABEL_61;
  }
  while (1)
  {
    v24 = *(_DWORD **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v50 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v50 & 0x1FF));
    *(_QWORD *)&v50 = v50 + 1;
    *((_QWORD *)&v50 + 1) = v23 - 1;
    if ((unint64_t)v50 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(_QWORD *)&v50 = v50 - 512;
    }
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v51, v24);
    if (v25)
    {
      v47 = 0;
      v26 = v24[2];
      if (v26)
        break;
    }
LABEL_55:
    v23 = *((_QWORD *)&v50 + 1);
    if (!*((_QWORD *)&v50 + 1))
    {
      v36 = 0;
      goto LABEL_60;
    }
  }
  while (1)
  {
    v46 = 0;
    if (!parseMDType<llvm::MDNode>("air.struct_type_info", (uint64_t)v24, &v47, &v46))
      break;
    std::deque<llvm::MDNode const*>::push_back(__p, &v46);
    v27 = v47;
LABEL_54:
    if (v27 >= v26)
      goto LABEL_55;
  }
  v28 = v47;
  if (!isStringMDNode(*(llvm::MDString **)&v24[2 * v47 + -2 * v24[2]], "air.indirect_argument"))
  {
    v27 = v28 + 1;
    goto LABEL_53;
  }
  v27 = v28 + 1;
  v57[0] = v28 + 1;
  if ((parseMDInt(0, (uint64_t)v24, v57, &v45) & 1) != 0)
    goto LABEL_51;
  v29 = *(unsigned __int8 **)&v24[2 * v27 + -2 * v24[2]];
  if (!v29)
    goto LABEL_53;
  v30 = *v29;
  if (v30 > 0x22 || ((0x7FFFFFFF0uLL >> v30) & 1) == 0)
    goto LABEL_53;
  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)&v29[-8 * *((unsigned int *)v29 + 2) + 8]);
  if (v33 == 21)
  {
    v34 = *String == 0x69646E692E726961 && String[1] == 0x6E6F635F74636572;
    if (v34 && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63)
    {
LABEL_51:
      v27 = v28 + 2;
LABEL_53:
      v47 = v27;
      goto LABEL_54;
    }
  }
  v36 = 1;
LABEL_60:
  v20 = a11;
LABEL_61:
  v37 = (void **)__p[1];
  v38 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v39 = v49 - (unint64_t)__p[1];
  if ((unint64_t)v49 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v37);
      v38 = (void **)v49;
      v37 = (void **)((char *)__p[1] + 8);
      __p[1] = v37;
      v39 = v49 - (_QWORD)v37;
    }
    while ((_QWORD)v49 - (_QWORD)v37 > 0x10uLL);
  }
  v40 = v39 >> 3;
  if (v40 == 1)
  {
    v41 = 256;
LABEL_67:
    *(_QWORD *)&v50 = v41;
  }
  else if (v40 == 2)
  {
    v41 = 512;
    goto LABEL_67;
  }
  if (v37 != v38)
  {
    do
    {
      v42 = *v37++;
      operator delete(v42);
    }
    while (v37 != v38);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v52 != v51)
    free(v52);
LABEL_76:
  *v20 = v36;
  return 1;
}

uint64_t parseMDInt(const char *a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;

  result = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    result = isStringMDNode((llvm::MDString *)result, a1);
    if (!(_DWORD)result)
      return result;
    v9 = *a3;
    v10 = *a3 + 1;
    *a3 = v10;
    result = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v10);
    if (!result || *(unsigned __int8 *)result - 1 >= 2)
    {
      result = 0;
      *a3 = v9 + 2;
      return result;
    }
    *a3 = v9 + 2;
  }
  else
  {
    if (!result)
      return result;
    if (*(unsigned __int8 *)result - 1 >= 2)
      return 0;
  }
  v11 = *(_QWORD *)(result + 128);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 16;
  else
    v12 = 0;
  if (!v12)
    return 0;
  v13 = (_QWORD *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  *a4 = *v13;
  return 1;
}

uint64_t parseMDLocationIndex(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  int v10;

  result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.location_index");
  if ((_DWORD)result)
  {
    v9 = *a2 + 1;
    result = parseMDInt(0, a1, (unsigned int *)&v9, a3);
    if ((_DWORD)result)
    {
      v10 = *a2 + 2;
      result = parseMDInt(0, a1, (unsigned int *)&v10, a4);
      if ((_DWORD)result)
      {
        *a2 += 3;
        return 1;
      }
    }
  }
  return result;
}

BOOL parseMDAccess(uint64_t a1, _DWORD *a2, char *a3)
{
  char v6;
  _BOOL8 result;

  if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.read"))
  {
    v6 = 1;
  }
  else if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.write"))
  {
    v6 = 2;
  }
  else
  {
    result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.read_write");
    if (!result)
      return result;
    v6 = 3;
  }
  *a3 = v6;
  ++*a2;
  return 1;
}

BOOL parseMDType<llvm::MDNode>(const char *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  llvm::MDString *v7;
  _BOOL8 result;
  int v10;
  _BYTE *v11;

  v7 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    result = isStringMDNode(v7, a1);
    if (!result)
      return result;
    v10 = (*a3)++;
    v11 = *(_BYTE **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v10 + 1));
    if (v11)
    {
      if (((*v11 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v11)) == 0)
        v11 = 0;
    }
    *a4 = v11;
    *a3 = v10 + 2;
  }
  else
  {
    if (v7)
    {
      if (((*(unsigned __int8 *)v7 < 0x23uLL) & (0x7FFFFFFF0uLL >> *(_BYTE *)v7)) != 0)
        v11 = *(_BYTE **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    *a4 = v11;
  }
  return v11 != 0;
}

void AGCLLVMAGPFragmentShader::getCompilationKeyDescription(AGCLLVMAGPFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  uint64_t m;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  void *v38[2];
  char v39;
  std::string v40;
  void *v41[2];
  char v42;
  std::string v43;
  void *__p[2];
  char v45;
  std::string v46;
  void *v47[2];
  char v48;
  std::string v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  std::string v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  std::string::size_type v87;
  __int128 v88;
  std::string::size_type v89;
  __int128 v90;
  std::string::size_type v91;
  __int128 v92;
  std::string::size_type v93;
  __int128 v94;
  std::string::size_type v95;
  __int128 v96;
  std::string::size_type v97;
  __int128 v98;
  std::string::size_type v99;
  __int128 v100;
  std::string::size_type v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)*((_QWORD *)this + 726);
  std::string::basic_string[abi:nn180100]<0>(v38, "AGCFragmentContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(&v43, "AGCFragmentContextState");
  std::string::basic_string[abi:nn180100]<0>(v41, "fragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v102, "AGCFragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v67, "GL and Metal state:");
  std::string::basic_string[abi:nn180100]<0>(v65, "alphaToCoverage");
  _agcFieldString<unsigned int>(&v68, (const void **)v65, *v4 & 1);
  std::string::basic_string[abi:nn180100]<0>(v63, "alphaToOne");
  _agcFieldString<unsigned int>(&v69, (const void **)v63, (*v4 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v61, "sampleCoverage");
  _agcFieldString<unsigned int>(&v70, (const void **)v61, (*v4 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v71, "GL specific state:");
  std::string::basic_string[abi:nn180100]<0>(v59, "depthStencilWriteDisabled");
  _agcFieldString<unsigned int>(&v72, (const void **)v59, (*v4 >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v57, "logicOp");
  _agcFieldString<unsigned int>(&v73, (const void **)v57, (*v4 >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v55, "logicOpState");
  _agcFieldString<char const*>(&v74, (const void **)v55, _agcLogicOpStrings[((unint64_t)*v4 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v54, "alphaTest");
  _agcFieldString<unsigned int>(&v75, (const void **)&v54.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  std::string::basic_string[abi:nn180100]<0>(v52, "alphaTestFunc");
  _agcFieldString<char const*>(&v76, (const void **)v52, _agcCompareFuncStrings[(unsigned __int16)*v4 >> 12]);
  std::string::basic_string[abi:nn180100]<0>(v50, "smoothPoints");
  _agcFieldString<unsigned int>(&v77, (const void **)v50, HIWORD(*v4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v49, "pointSpriteEnabled");
  _agcFieldString<unsigned int>(&v78, (const void **)&v49.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "outputPointSize");
  _agcFieldString<unsigned int>(&v79, (const void **)v47, (*v4 >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v46, "shaderDebugEnable");
  _agcFieldString<unsigned int>(&v80, (const void **)&v46.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v81, (const void **)__p, *v4 >> 20);
  _agcGroupWithHeader(&v40, (uint64_t)&v102, (uint64_t)&v67, 15);
  v5 = 45;
  do
  {
    if (v67.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0)
      operator delete(v65[v5]);
    v5 -= 3;
  }
  while (v5 * 8);
  if (v45 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  _agcFieldString<std::string>(&v102, (const void **)v41, (uint64_t)&v40);
  std::string::basic_string[abi:nn180100]<0>(v55, "colorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v65, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v63, "redEnableBits");
  _agcFieldStringHex(&v67, (const void **)v63);
  std::string::basic_string[abi:nn180100]<0>(v61, "greenEnableBits");
  _agcFieldStringHex(&v68, (const void **)v61);
  std::string::basic_string[abi:nn180100]<0>(v59, "blueEnableBits");
  _agcFieldStringHex(&v69, (const void **)v59);
  std::string::basic_string[abi:nn180100]<0>(v57, "alphaEnableBits");
  _agcFieldStringHex(&v70, (const void **)v57);
  _agcGroupWithHeader(&v54, (uint64_t)v65, (uint64_t)&v67, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v70.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v70.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  _agcFieldString<std::string>(&v103, (const void **)v55, (uint64_t)&v54);
  _agcGroupWithHeader(&v67, (uint64_t)&v43, (uint64_t)&v102, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v103.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v102 + j * 8 + 24));
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:nn180100]<0>(&v102, "mutableBuffers");
  _agcFieldStringHex(&v68, (const void **)&v102.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:nn180100]<0>(v65, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v69, (const void **)v65, v4[15] & 1);
  std::string::basic_string[abi:nn180100]<0>(v63, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v70, (const void **)v63, (v4[15] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v61, "fragmentOnly");
  _agcFieldString<unsigned int>(&v71, (const void **)v61, v4[16] & 1);
  std::string::basic_string[abi:nn180100]<0>(v59, "openglMode");
  _agcFieldString<unsigned int>(&v72, (const void **)v59, (v4[16] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v57, "customBorderColor");
  _agcFieldString<unsigned int>(&v73, (const void **)v57, (v4[16] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v55, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v74, (const void **)v55, (v4[15] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v54, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v75, (const void **)&v54.__r_.__value_.__l.__data_, (v4[15] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v52, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v76, (const void **)v52, (v4[15] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v50, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v77, (const void **)v50, (v4[15] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v49, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v78, (const void **)&v49.__r_.__value_.__l.__data_, (v4[15] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v79, (const void **)v47, (unsigned __int16)(v4[15] >> 10));
  std::string::basic_string[abi:nn180100]<0>(&v46, "enableStackShadow");
  _agcFieldString<unsigned int>(&v80, (const void **)&v46.__r_.__value_.__l.__data_, (v4[15] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v81, (const void **)__p, v4[15] >> 31);
  std::string::basic_string[abi:nn180100]<0>(&v43, "enableHLSLDiscardSemantics");
  _agcFieldString<unsigned int>(&v82, (const void **)&v43.__r_.__value_.__l.__data_, (v4[16] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "textureWriteFPRoundingMode");
  _agcFieldString<unsigned int>(&v83, (const void **)v41, (v4[16] >> 4) & 3);
  std::string::basic_string[abi:nn180100]<0>(&v40, "usesMeshShader");
  _agcFieldString<unsigned int>(&v84, (const void **)&v40.__r_.__value_.__l.__data_, (v4[16] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v37, "unused");
  _agcFieldString<unsigned int>(&v85, (const void **)&v37.__r_.__value_.__l.__data_, v4[16] >> 12);
  _agcStringRepresentation(&v36, v4 + 6);
  v8 = std::string::insert(&v36, 0, "blendState[0]: ");
  v9 = v8->__r_.__value_.__r.__words[2];
  v86 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v87 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v35, v4 + 7);
  v10 = std::string::insert(&v35, 0, "blendState[1]: ");
  v11 = v10->__r_.__value_.__r.__words[2];
  v88 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v89 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v34, v4 + 8);
  v12 = std::string::insert(&v34, 0, "blendState[2]: ");
  v13 = v12->__r_.__value_.__r.__words[2];
  v90 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v91 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v33, v4 + 9);
  v14 = std::string::insert(&v33, 0, "blendState[3]: ");
  v15 = v14->__r_.__value_.__r.__words[2];
  v92 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v93 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v32, v4 + 10);
  v16 = std::string::insert(&v32, 0, "blendState[4]: ");
  v17 = v16->__r_.__value_.__r.__words[2];
  v94 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v95 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v31, v4 + 11);
  v18 = std::string::insert(&v31, 0, "blendState[5]: ");
  v19 = v18->__r_.__value_.__r.__words[2];
  v96 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v97 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v30, v4 + 12);
  v20 = std::string::insert(&v30, 0, "blendState[6]: ");
  v21 = v20->__r_.__value_.__r.__words[2];
  v98 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v99 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v29, v4 + 13);
  v22 = std::string::insert(&v29, 0, "blendState[7]: ");
  v23 = v22->__r_.__value_.__r.__words[2];
  v100 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v101 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  _agcGroupWithHeader(&v28, (uint64_t)v38, (uint64_t)&v67, 27);
  v24 = 81;
  do
  {
    if (v67.__r_.__value_.__s.__data_[v24 * 8 - 1] < 0)
      operator delete(v65[v24]);
    v24 -= 3;
  }
  while (v24 * 8);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(v38[0]);
  v25 = *((_QWORD *)this + 614);
  std::string::basic_string[abi:nn180100]<0>(v65, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v63, "enabledBits");
  _agcFieldStringHex(&v102, (const void **)v63);
  std::string::basic_string[abi:nn180100]<0>(v61, "sampleCount");
  _agcFieldString<unsigned int>(&v103, (const void **)v61, (*(_DWORD *)(v25 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v59, "colorSampleCount");
  _agcFieldString<unsigned int>(&v104, (const void **)v59, (unsigned __int16)*(_DWORD *)(v25 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v57, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v105, (const void **)v57, *(_WORD *)(v25 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v55, "LIBSpilling");
  _agcFieldString<unsigned int>(&v106, (const void **)v55, (*(_DWORD *)(v25 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v54, "unused");
  _agcFieldString<unsigned int>(&v107, (const void **)&v54.__r_.__value_.__l.__data_, *(_DWORD *)(v25 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v50, "encoded[0]");
  _agcStringRepresentation(&v49, (_DWORD *)v25);
  _agcFieldString<std::string>(&v67, (const void **)v50, (uint64_t)&v49);
  std::string::basic_string[abi:nn180100]<0>(v47, "encoded[1]");
  _agcStringRepresentation(&v46, (_DWORD *)(v25 + 4));
  _agcFieldString<std::string>(&v68, (const void **)v47, (uint64_t)&v46);
  std::string::basic_string[abi:nn180100]<0>(__p, "encoded[2]");
  _agcStringRepresentation(&v43, (_DWORD *)(v25 + 8));
  _agcFieldString<std::string>(&v69, (const void **)__p, (uint64_t)&v43);
  std::string::basic_string[abi:nn180100]<0>(v41, "encoded[3]");
  _agcStringRepresentation(&v40, (_DWORD *)(v25 + 12));
  _agcFieldString<std::string>(&v70, (const void **)v41, (uint64_t)&v40);
  std::string::basic_string[abi:nn180100]<0>(v38, "encoded[4]");
  _agcStringRepresentation(&v37, (_DWORD *)(v25 + 16));
  _agcFieldString<std::string>(&v71, (const void **)v38, (uint64_t)&v37);
  std::string::basic_string[abi:nn180100]<0>(&v36, "encoded[5]");
  _agcStringRepresentation(&v35, (_DWORD *)(v25 + 20));
  _agcFieldString<std::string>(&v72, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&v35);
  std::string::basic_string[abi:nn180100]<0>(&v34, "encoded[6]");
  _agcStringRepresentation(&v33, (_DWORD *)(v25 + 24));
  _agcFieldString<std::string>(&v73, (const void **)&v34.__r_.__value_.__l.__data_, (uint64_t)&v33);
  std::string::basic_string[abi:nn180100]<0>(&v32, "encoded[7]");
  _agcStringRepresentation(&v31, (_DWORD *)(v25 + 28));
  _agcFieldString<std::string>(&v74, (const void **)&v32.__r_.__value_.__l.__data_, (uint64_t)&v31);
  _agcGroupWithHeader(&v108, (uint64_t)v52, (uint64_t)&v67, 8);
  _agcGroupWithHeader(&v30, (uint64_t)v65, (uint64_t)&v102, 7);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v108.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v108.__r_.__value_.__l.__data_ + k * 8));
  }
  for (m = 0; m != -24; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0)
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + m * 8));
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v28.__r_.__value_.__l.__data_, (const void **)&v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void _agcFieldString<unsigned int>(std::string *a1, const void **a2, unsigned int __val)
{
  std::string v5;

  std::to_string(&v5, __val);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

{
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;

  std::to_string(&__p, __val);
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = &v12;
  std::string::basic_string[abi:nn180100]((uint64_t)&v12, v5 + 3);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _agcStringRepresentation(std::string *a1, unsigned int *a2)
{
  char *v4;
  uint64_t i;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v20, "AGCBlendState");
  std::string::basic_string[abi:nn180100]<0>(v18, "enabled");
  if ((*a2 & 1) != 0)
    v4 = "yes";
  else
    v4 = "no";
  _agcFieldString<char const*>(&v22, (const void **)v18, v4);
  std::string::basic_string[abi:nn180100]<0>(v16, "src");
  _agcFieldString<char const*>(&v23, (const void **)v16, _agcBlendFactorStrings[((unint64_t)*a2 >> 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v14, "dst");
  _agcFieldString<char const*>(&v24, (const void **)v14, _agcBlendFactorStrings[((unint64_t)*a2 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v12, "srcA");
  _agcFieldString<char const*>(&v25, (const void **)v12, _agcBlendFactorStrings[(unsigned __int16)*a2 >> 11]);
  std::string::basic_string[abi:nn180100]<0>(v10, "dstA");
  _agcFieldString<char const*>(&v26, (const void **)v10, _agcBlendFactorStrings[*((_WORD *)a2 + 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v8, "equation");
  _agcFieldString<char const*>(&v27, (const void **)v8, _agcBlendEquationStrings[((unint64_t)*a2 >> 21) & 7]);
  std::string::basic_string[abi:nn180100]<0>(__p, "equationA");
  _agcFieldString<char const*>(&v28, (const void **)__p, _agcBlendEquationStrings[*((_BYTE *)a2 + 3) & 7]);
  _agcGroupWithHeader(a1, (uint64_t)v20, (uint64_t)&v22, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v28.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v28.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
}

void _agcFieldString<char const*>(std::string *a1, const void **a2, char *__s)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  _agcFieldString<std::string>(a1, a2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

{
  size_t v5;
  std::string *v6;
  const void *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;

  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = &v13;
  std::string::basic_string[abi:nn180100]((uint64_t)&v13, v5 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void _agcFieldString<std::string>(std::string *a1, const void **a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v13;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v13;
  std::string::basic_string[abi:nn180100]((uint64_t)&v13, v6 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v13, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void _agcStringRepresentation(std::string *a1, _DWORD *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, 0, (uint64_t)&v19, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

uint64_t _agcFieldStringHex(std::string *a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *__p;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v9);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v10[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(a1, a2, (uint64_t)&__p);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA2D638](&v12);
}

{
  _QWORD *v4;
  uint64_t v5;
  void *__p;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v9);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v10[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(a1, a2, (uint64_t)&__p);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA2D638](&v12);
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::grow(a1, v8);
    v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_QWORD *)v6 = v9;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(v6 + 16) = 0x400000000;
  *(_QWORD *)(v6 + 56) = v6 + 72;
  *(_DWORD *)(v6 + 68) = 4;
  *(_QWORD *)(v6 + 104) = v6 + 120;
  *(_DWORD *)(v6 + 116) = 4;
  *(_QWORD *)(v6 + 152) = v6 + 168;
  *(_DWORD *)(v6 + 164) = 4;
  *(_QWORD *)(v6 + 200) = v6 + 216;
  *(_DWORD *)(v6 + 212) = 4;
  *(_QWORD *)(v6 + 248) = v6 + 264;
  *(_DWORD *)(v6 + 260) = 4;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 296 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 296 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void **v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 296 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 296 * v10;
      do
      {
        *result = -4096;
        result += 37;
        v11 -= 296;
      }
      while (v11);
    }
    v35 = v3;
    if (v3)
    {
      v12 = 0;
      v13 = 296 * v3;
      while (1)
      {
        v14 = (char *)v4 + v12;
        v15 = *(_QWORD *)((char *)v4 + v12);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_43:
        v12 += 296;
        if (v13 == v12)
          return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(296 * v35));
      }
      v36 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v36);
      v16 = v36;
      *(_QWORD *)v36 = *(_QWORD *)v14;
      *((_QWORD *)v16 + 1) = v16 + 24;
      v17 = (void **)(v14 + 8);
      *((_QWORD *)v16 + 2) = 0x400000000;
      if (*((_DWORD *)v14 + 4))
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 8), (uint64_t)(v14 + 8));
      *((_QWORD *)v16 + 7) = v16 + 72;
      *((_QWORD *)v16 + 8) = 0x400000000;
      v18 = (char *)v4 + v12;
      if (*(_DWORD *)((char *)v4 + v12 + 64))
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 56), (uint64_t)(v18 + 56));
      *((_QWORD *)v16 + 13) = v16 + 120;
      *((_QWORD *)v16 + 14) = 0x400000000;
      if (*((_DWORD *)v18 + 28))
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 104), (uint64_t)v4 + v12 + 104);
      *((_QWORD *)v16 + 19) = v16 + 168;
      *((_QWORD *)v16 + 20) = 0x400000000;
      v19 = (char *)v4 + v12;
      if (*(_DWORD *)((char *)v4 + v12 + 160))
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 152), (uint64_t)(v19 + 152));
      *((_QWORD *)v16 + 25) = v16 + 216;
      *((_QWORD *)v16 + 26) = 0x400000000;
      if (*((_DWORD *)v19 + 52))
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 200), (uint64_t)v4 + v12 + 200);
      *((_QWORD *)v16 + 31) = v16 + 264;
      *((_QWORD *)v16 + 32) = 0x400000000;
      v20 = (char *)v4 + v12;
      v21 = *(_DWORD *)((char *)v4 + v12 + 256);
      if (!v21 || v14 == v16)
      {
LABEL_31:
        ++*(_DWORD *)(a1 + 8);
        v26 = (char *)*((_QWORD *)v20 + 31);
        if (v20 + 264 != v26)
          free(v26);
        v27 = (char *)v4 + v12;
        v28 = *(char **)((char *)v4 + v12 + 200);
        if ((char *)v4 + v12 + 216 != v28)
          free(v28);
        v29 = (char *)*((_QWORD *)v27 + 19);
        if (v27 + 168 != v29)
          free(v29);
        v30 = (char *)v4 + v12;
        v31 = *(char **)((char *)v4 + v12 + 104);
        if ((char *)v4 + v12 + 120 != v31)
          free(v31);
        v32 = (char *)*((_QWORD *)v30 + 7);
        if (v30 + 72 != v32)
          free(v32);
        if ((char *)v4 + v12 + 24 != *v17)
          free(*v17);
        goto LABEL_43;
      }
      v22 = *((_QWORD *)v20 + 31);
      v23 = (uint64_t)v4 + v12 + 264;
      if (v23 != v22)
      {
        v24 = *((_QWORD *)v20 + 32);
        *((_QWORD *)v16 + 31) = v22;
        *((_QWORD *)v16 + 32) = v24;
        *((_QWORD *)v20 + 31) = v23;
        *((_QWORD *)v20 + 32) = 0;
        goto LABEL_31;
      }
      if (v21 < 5)
      {
        v25 = *(unsigned int *)((char *)v4 + v12 + 256);
      }
      else
      {
        *((_DWORD *)v16 + 64) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *((unsigned int *)v20 + 64);
        if (!(_DWORD)v25)
          goto LABEL_30;
      }
      memcpy(*((void **)v16 + 31), *((const void **)v20 + 31), 8 * v25);
LABEL_30:
      *((_DWORD *)v16 + 64) = v21;
      *((_DWORD *)v20 + 64) = 0;
      goto LABEL_31;
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(296 * v35));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v33 = *(_DWORD *)(a1 + 16);
    if (v33)
    {
      v34 = 296 * v33;
      do
      {
        *result = -4096;
        result += 37;
        v34 -= 296;
      }
      while (v34);
    }
  }
  return result;
}

_QWORD *AGCLLVMUserObject::createSCSIFTHeapGlobal(_QWORD *this)
{
  AGCLLVMUserObject *v1;
  llvm::ValueHandleBase *v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  llvm::Type *v12;
  llvm::Value *GlobalBufferBinding;
  unsigned int v14[8];
  __int16 v15;

  if (!this[318])
  {
    v1 = (AGCLLVMUserObject *)this;
    v2 = (llvm::ValueHandleBase *)(this + 316);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)this + *(_QWORD *)(*this - 24)) + 64))((uint64_t)this + *(_QWORD *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      v5 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 872))(v5);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 640);
    }
    else
    {
      if (v3 == 29)
      {
        v8 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 816))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        v12 = *(llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 240);
        *(_QWORD *)v14 = "agc.ria.intersection_function_table_heap";
        v15 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v12, (const llvm::Twine *)v14, v9, 0, 0, 0);
        return (_QWORD *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      v10 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 872))(v10);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 312);
    }
    v11 = v7();
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v14, v6, v11);
    v9 = v14[0];
    goto LABEL_12;
  }
  return this;
}

uint64_t AGCLLVMUserObject::createGlobalRayStridesGlobal(AGCLLVMUserObject *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  llvm::Type *v8;
  llvm::Value *GlobalBufferBinding;
  int v10;
  BOOL v11;
  const char *v12;
  __int16 v13;
  unsigned int v14;

  result = *((_QWORD *)this + 342);
  if (!result)
  {
    v3 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v4 = 760;
    if (v3 != 29)
      v4 = 888;
    v5 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                            + 824)
                              + v4))();
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 7
      || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 22)
    {
      v6 = 80;
    }
    else
    {
      v10 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v6 = 39;
      if (v10 == 8)
      {
        v6 = 80;
        v11 = 0;
      }
      else
      {
        v11 = v3 == 29;
      }
      if (v11)
      {
        v7 = -10;
        goto LABEL_8;
      }
    }
    v7 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                            + 824)
                              + 8 * v6))();
LABEL_8:
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v14, v5, v7);
    v8 = *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 280);
    v12 = "agc.global_ray_stride";
    v13 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v8, (const llvm::Twine *)&v12, v14, 0, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2720), (uint64_t)GlobalBufferBinding);
    return *((_QWORD *)this + 342);
  }
  return result;
}

uint64_t AGCLLVMUserObject::setupBufferArgumentData(AGCLLVMUserObject *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, char a6, uint64_t a7)
{
  int v14;
  llvm::GlobalVariable *GlobalBufferBinding;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  llvm::Type *v21;
  uint64_t v22;
  uint64_t AlignedLoad;
  uint64_t Cast;
  char v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[2];
  _QWORD *v37;
  __int16 v38;

  v14 = *(_DWORD *)(a2 + 8);
  if ((v14 & 0xFE) == 0x12)
    v14 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if ((v14 & 0xFFFFFF00) == 0x300)
  {
    GlobalBufferBinding = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v36[0] = "agc.local_buffer_pointers.";
    v37 = (_QWORD *)a3;
    v38 = 2051;
    v16 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v16 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v17 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v18 = *((_QWORD *)v17 + 47);
    v19 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v17 + 32), GlobalBufferBinding);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v18, v19);
    v20 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v21 = (llvm::Type *)*((_QWORD *)v20 + 29);
    v22 = (uint64_t)(v20 + 40);
    v38 = 257;
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v20 + 5, v21, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v36);
    v35 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(v22, 48, AlignedLoad, a2, (uint64_t)v34);
  }
  else
  {
    if (a4 == -1)
    {
      LODWORD(v34[0]) = a3;
      v25 = 8;
      v26 = 1;
      v27 = (_QWORD *)v34[0];
    }
    else
    {
      v32[0] = a4;
      v32[2] = ".";
      v33 = 776;
      v34[0] = v32;
      v34[2] = a3;
      v25 = 2;
      v26 = 8;
      v27 = v34;
    }
    LOBYTE(v35) = v25;
    HIBYTE(v35) = v26;
    v36[0] = "agc.buffer_pointers.";
    v37 = v27;
    LOBYTE(v38) = 3;
    HIBYTE(v38) = v25;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v31, a3, a4);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(a1, (llvm::Type *)a2, (const llvm::Twine *)v36, v31, a5, 5, 0);
    v28 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v38 = 257;
    Cast = llvm::IRBuilderBase::CreateAlignedLoad(v28, (llvm::Type *)a2, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v36);
    if (a4 == -1)
      ++*((_DWORD *)a1 + 828);
    if ((a6 & 3) == 1)
    {
      llvm::Module::getOrInsertNamedMetadata();
      v36[0] = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  if ((_DWORD)a7 != -1)
  {
    v29 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400);
    (*(void (**)(uint64_t, llvm::GlobalVariable *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 176))(v29, GlobalBufferBinding, a7, 0, 0);
  }
  return Cast;
}

void _AGCBindingInfo::_AGCBindingInfo(_AGCBindingInfo *this, int a2, int a3)
{
  int v3;
  int v4;

  v3 = a2 & 0xFFFFF;
  v4 = 0x100000;
  switch(a3)
  {
    case -13:
      v4 = 12582912;
      break;
    case -12:
      v4 = 11534336;
      break;
    case -11:
      v4 = 10485760;
      break;
    case -10:
      v4 = 9437184;
      break;
    case -9:
      v4 = 0x800000;
      break;
    case -8:
      v4 = 7340032;
      break;
    case -7:
      v4 = 6291456;
      break;
    case -6:
      v4 = 5242880;
      break;
    case -5:
      v4 = 0x400000;
      break;
    case -4:
      v4 = 3145728;
      break;
    case -3:
      v4 = 0x200000;
      break;
    case -2:
      break;
    case -1:
      v4 = 0;
      break;
    default:
      v3 |= 0x80000000;
      v4 = (a3 & 0x7FF) << 20;
      break;
  }
  *(_DWORD *)this = v3 | v4;
}

char *AGCLLVMUserObject::createSCSConfigurationBufferGlobal(char *this)
{
  char *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int8x16_t v5;
  llvm::Type *v6;
  llvm::Value *GlobalBufferBinding;
  uint64_t v8;
  int v9;
  unsigned int v10;
  llvm::Type *v11;
  llvm::Value *v12;
  int8x16_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = this;
  v16 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 312))
  {
    if ((*(unsigned int (**)(char *))(*(_QWORD *)&this[*(_QWORD *)(*(_QWORD *)this - 24)] + 64))(&this[*(_QWORD *)(*(_QWORD *)this - 24)]) == 7
      || (*(unsigned int (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)]) == 22)
    {
      v2 = 80;
    }
    else
    {
      v3 = (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)]);
      v2 = 39;
      if (v3 == 8)
        v2 = 80;
    }
    v4 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24) + 400] + 824) + 8 * v2))();
    v5 = *(int8x16_t *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24) + 232];
    v13 = vextq_s8(v5, v5, 8uLL);
    v14 = vdupq_lane_s64(v5.i64[0], 0);
    v15 = v5.i64[0];
    llvm::StructType::create();
    v6 = (llvm::Type *)llvm::PointerType::get();
    v13.i64[0] = (uint64_t)"agc.scs_per_kick_configuration.";
    v14.i64[0] = v4;
    LOWORD(v15) = 2051;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)v1, v6, (const llvm::Twine *)&v13, v4, 12, 5, 0);
    this = (char *)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v1 + 2480), (uint64_t)GlobalBufferBinding);
  }
  if (!*((_QWORD *)v1 + 315))
  {
    if ((*(unsigned int (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)]) == 7
      || (*(unsigned int (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)]) == 22)
    {
      v8 = 81;
    }
    else
    {
      v9 = (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 24)]);
      v8 = 40;
      if (v9 == 8)
        v8 = 81;
    }
    v10 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 24) + 400] + 824) + 8 * v8))();
    v11 = (llvm::Type *)llvm::PointerType::get();
    v13.i64[0] = (uint64_t)"agc.scs_per_shader_configuration.";
    v14.i64[0] = v10;
    LOWORD(v15) = 2051;
    v12 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)v1, v11, (const llvm::Twine *)&v13, v10, 4, 5, 0);
    return (char *)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v1 + 2504), (uint64_t)v12);
  }
  return this;
}

uint64_t AGCLLVMFragmentShader::initCompile(AGCLLVMFragmentShader *this)
{
  uint64_t v2;
  llvm::Module *v3;
  int DefaultRoundingMode;
  _DWORD *v5;
  uint64_t v6;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  llvm::MDString *v24;
  uint64_t String;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t RTZMode;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unsigned int v53;
  unsigned int v54[8];
  __int16 v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  void *v59;
  uint64_t v60;
  _OWORD v61[4];
  __int128 v62;
  _OWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v60 = 0x800000000;
  v56 = v58;
  v57 = 0x800000000;
  v2 = *(_QWORD *)this;
  v3 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  *(_QWORD *)&v62 = v63;
  *((_QWORD *)&v62 + 1) = 0x800000000;
  memset(v61, 0, sizeof(v61));
  LODWORD(v60) = 8;
  DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMFragmentShader *)((char *)this
                                                                                      + *(_QWORD *)(v2 - 24)));
  v5 = v58;
  v6 = -8;
  do
    *v5++ = DefaultRoundingMode;
  while (!__CFADD__(v6++, 1));
  LODWORD(v57) = 8;
  *(_QWORD *)v54 = "air.fragment";
  v55 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v54);
  if (NamedMetadata)
  {
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    v10 = *(_QWORD *)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
    if (*(_BYTE *)(v10 + 16))
      v10 = 0;
    v11 = **(_QWORD **)(*(_QWORD *)(v10 + 24) + 16);
    v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 7)
    {
      v13 = Operand;
      if (v12 == 16)
      {
        if (*(_DWORD *)(v11 + 12))
        {
          v14 = *(uint64_t **)(v11 + 16);
          do
          {
            v15 = *v14++;
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v62, v15);
          }
          while (v14 != (uint64_t *)(*(_QWORD *)(v11 + 16) + 8 * *(unsigned int *)(v11 + 12)));
        }
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v62, v11);
      }
      v16 = *(unsigned __int8 **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8);
      if (v16)
      {
        v17 = *v16;
        if (v17 <= 0x22 && ((0x7FFFFFFF0uLL >> v17) & 1) != 0)
        {
          v19 = *((unsigned int *)v16 + 2);
          if ((_DWORD)v19)
          {
            v20 = 0;
            while (1)
            {
              v21 = *(unsigned __int8 **)&v16[8 * v20 + -8 * v19];
              if (!v21)
                goto LABEL_57;
              v22 = *v21;
              if (v22 > 0x22 || ((0x7FFFFFFF0uLL >> v22) & 1) == 0)
                goto LABEL_57;
              v24 = *(llvm::MDString **)&v21[-8 * *((unsigned int *)v21 + 2)];
              if (!v24)
                goto LABEL_57;
              if (*(_BYTE *)v24)
                goto LABEL_57;
              String = llvm::MDString::getString(v24);
              if (v26 != 17)
                goto LABEL_57;
              v27 = *(_QWORD *)String == 0x646E65722E726961 && *(_QWORD *)(String + 8) == 0x65677261745F7265;
              if (!v27 || *(_BYTE *)(String + 16) != 116)
                goto LABEL_57;
              v53 = 0;
              v54[0] = 1;
              if (parseMDInt(0, (uint64_t)v21, v54, &v53))
                *((_QWORD *)v59 + v53) = *(_QWORD *)(v62 + 8 * v20);
              v29 = *((unsigned int *)v21 + 2);
              if (&v21[-8 * v29 + 24] == v21)
                goto LABEL_57;
              v30 = 24 - 8 * v29;
              while (!isStringMDNode(*(llvm::MDString **)&v21[v30], "air.rounding_mode"))
              {
                v30 += 8;
                if (!v30)
                  goto LABEL_57;
              }
              v31 = *((unsigned int *)v21 + 2);
              if (&v21[-8 * v31 + 32] != v21)
                break;
LABEL_49:
              v33 = -v31;
              if (&v21[8 * v33 + 32] != v21)
              {
                v34 = 8 * v33 + 32;
                while (!isStringMDNode(*(llvm::MDString **)&v21[v34], "rte"))
                {
                  v34 += 8;
                  if (!v34)
                    goto LABEL_57;
                }
                v35 = 2;
LABEL_56:
                *((_DWORD *)v56 + v53) = v35;
              }
LABEL_57:
              ++v20;
              v19 = *((unsigned int *)v16 + 2);
              if (v20 >= v19)
                goto LABEL_58;
            }
            v32 = 32 - 8 * v31;
            while (!isStringMDNode(*(llvm::MDString **)&v21[v32], "rtz"))
            {
              v32 += 8;
              if (!v32)
              {
                v31 = *((unsigned int *)v21 + 2);
                goto LABEL_49;
              }
            }
            v35 = 1;
            goto LABEL_56;
          }
        }
      }
    }
  }
LABEL_58:
  if ((_OWORD *)v62 != v63)
    free((void *)v62);
  v36 = *((_QWORD *)this + 74);
  v37 = *(unsigned __int8 *)(v36 + 32);
  if (*(_BYTE *)(v36 + 32))
  {
    while (1)
    {
      v38 = __clz(v37);
      v39 = v38 ^ 0x1F;
      v40 = *(_QWORD *)(*(_QWORD *)this - 24);
      v41 = *(_BYTE **)((char *)this + v40 + 400);
      v42 = *((_DWORD *)v56 + v39);
      if (v42 == 2 && v41[1769] == 0)
        break;
      v44 = *(_DWORD *)(*((_QWORD *)this + 74) + 4 * v39);
      v37 ^= 0x80000000 >> v38;
      v45 = (v44 >> 8) & 1;
      v46 = v44 & 0x1F;
      RTZMode = AGCLLVMTargetLowerer::getRTZMode(v41, v42);
      (*(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 560))(&v62, v41, v46, v45, RTZMode, *((_QWORD *)v59 + v39));
      v48 = (char *)this + 72 * v39;
      v49 = v63[2];
      *((_OWORD *)v48 + 3) = v63[1];
      *((_OWORD *)v48 + 4) = v49;
      *((_QWORD *)v48 + 10) = v64;
      v50 = v63[0];
      *((_OWORD *)v48 + 1) = v62;
      *((_OWORD *)v48 + 2) = v50;
      if (!v37)
      {
        v51 = 1;
        goto LABEL_69;
      }
    }
    std::string::append((std::string *)((char *)this + v40 + 8), "The specified rounding mode is not supported on this device.");
    v51 = 0;
  }
  else
  {
    v51 = 1;
  }
LABEL_69:
  if (v56 != v58)
    free(v56);
  if (v59 != v61)
    free(v59);
  return v51;
}

uint64_t AGCLLVMObject::getDefaultRoundingMode(AGCLLVMObject *this)
{
  uint64_t i;
  uint64_t v3;
  const char *v4;
  const char *Value;
  const char *v6;
  const char *v7;
  const char *v8;
  char v9;
  char v10;

  i = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 208))(this);
  if (!(_DWORD)i)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 50) + 1769))
      v3 = 2;
    else
      v3 = 1;
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FLOAT_TO_FLOAT_RTZ_HW", v4);
      if (Value)
      {
        if (*Value != 48)
        {
          if (atoi(Value))
            v3 = 1;
          else
            v3 = v3;
        }
      }
    }
    if (MGGetBoolAnswer()
      && (v7 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEFAULT_ROUNDING_MODE", v6)) != 0)
    {
      v8 = v7;
      i = atoi(v7);
      if ((i - 1) >= 2)
      {
        v9 = 0;
        for (i = 1; ; i = 2)
        {
          v10 = v9;
          if (!strcasecmp(v8, _AGCFPRoundingModeStrings[i]))
            break;
          v9 = 1;
          if ((v10 & 1) != 0)
            return v3;
        }
      }
    }
    else
    {
      return v3;
    }
  }
  return i;
}

uint64_t AGCLLVMTargetLowerer::getRTZMode(_BYTE *a1, int a2)
{
  uint64_t v2;
  _BOOL4 v3;
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 *v6;
  const char *v7;
  const char *v8;
  int v10;
  const char *v11;
  _QWORD *Value;

  if (!a1[1769])
    return 0;
  if (a1[1770])
    return a2 != 2;
  if (a1[808])
    v3 = a2 != 2;
  else
    v3 = a2 == 1;
  v5 = 0x1EF8E7000uLL;
  if ((v4 & 1) == 0)
  {
    v5 = 0x1EF8E7000;
    if (v10)
    {
      if (MGGetBoolAnswer())
        Value = AGCEnv::getValue((AGCEnv *)"AGC_CLAMP_TO_F16_LIMITS", v11);
      else
        Value = 0;
      AGCLLVMTargetLowerer::getRTZMode(_AGCFPRoundingMode)const::clamp_to_f16 = (uint64_t)Value;
      v5 = 0x1EF8E7000uLL;
    }
  }
  v6 = *(unsigned __int8 **)(v5 + 1664);
  if (v6)
    v3 = *v6 != 48;
  if (v3)
    v2 = 2;
  else
    v2 = 0;
  if (MGGetBoolAnswer())
  {
    v8 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_F32_TO_F16_RTZ", v7);
    if (v8)
    {
      if (*v8 != 48)
      {
        if (atoi(v8))
          return 3;
        else
          return v2;
      }
    }
  }
  return v2;
}

double AGCLLVMGen3TargetLowerer::fragmentOutputConfiguration@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a5 + 52) = 0;
  *(_QWORD *)(a5 + 44) = 0;
  *(_BYTE *)(a5 + 60) = 0;
  *(_BYTE *)(a5 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 27) = 0u;
  v11 = a2 - 2;
  *(_DWORD *)(a5 + 68) = a3;
  switch(a2)
  {
    case 2u:
    case 3u:
    case 0x13u:
      v12 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)a5 = v12;
      if (!a4)
        goto LABEL_11;
      v12 = llvm::FixedVectorType::get();
      goto LABEL_6;
    case 4u:
    case 5u:
      v12 = *(_QWORD *)(a1 + 296);
      goto LABEL_21;
    case 6u:
    case 7u:
    case 0x11u:
      v12 = *(_QWORD *)(a1 + 288);
      goto LABEL_6;
    case 8u:
    case 9u:
      v12 = *(_QWORD *)(a1 + 304);
      goto LABEL_21;
    case 0xAu:
    case 0xBu:
      v12 = *(_QWORD *)(a1 + 312);
      goto LABEL_21;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      v12 = *(_QWORD *)(a1 + 280);
LABEL_6:
      *(_QWORD *)a5 = v12;
      goto LABEL_7;
    case 0x12u:
      *(_QWORD *)a5 = *(_QWORD *)(a1 + 240);
      goto LABEL_30;
    case 0x14u:
    case 0x15u:
      v14 = *(unsigned __int8 *)(a1 + 1808);
      v15 = 288;
      if (!*(_BYTE *)(a1 + 1808))
        v15 = 280;
      v12 = *(_QWORD *)(a1 + v15);
      *(_QWORD *)a5 = v12;
      if (a4 && v14)
      {
        v12 = llvm::FixedVectorType::get();
LABEL_21:
        *(_QWORD *)a5 = v12;
      }
      goto LABEL_22;
    default:
      v12 = 0;
LABEL_7:
      if (a2 != 12 || a3 != 1 || !a4)
      {
LABEL_11:
        if (a2 == 18)
        {
LABEL_30:
          v17 = *(_QWORD *)(a1 + 304);
          *(_QWORD *)(a5 + 8) = v17;
          *(_QWORD *)(a5 + 24) = v17;
          *(_QWORD *)&result = 0x200000001;
          *(_QWORD *)(a5 + 32) = 0x200000001;
          goto LABEL_31;
        }
LABEL_22:
        *(_QWORD *)(a5 + 8) = v12;
        *(_QWORD *)(a5 + 24) = v12;
        if (a2 <= 0x16)
        {
          if (((1 << a2) & 0x7993C0) != 0)
            goto LABEL_31;
          if (((1 << a2) & 0x603C) == 0 && ((1 << a2) & 0x20C00) != 0)
          {
            v16 = (_QWORD *)(a1 + 312);
            goto LABEL_32;
          }
        }
        v16 = (_QWORD *)(a1 + 296);
        goto LABEL_32;
      }
      v13 = llvm::FixedVectorType::get();
      *(_QWORD *)a5 = v13;
      *(_QWORD *)(a5 + 8) = v13;
      *(_QWORD *)(a5 + 24) = v13;
LABEL_31:
      v16 = (_QWORD *)(a1 + 304);
LABEL_32:
      *(_QWORD *)(a5 + 16) = *v16;
      switch(v11)
      {
        case 0u:
        case 4u:
        case 0xBu:
          *(_WORD *)(a5 + 41) = 257;
          result = -0.00781250557;
          *(_OWORD *)(a5 + 44) = xmmword_1C3E37F30;
          goto LABEL_38;
        case 1u:
        case 5u:
        case 0xCu:
        case 0x11u:
          *(_BYTE *)(a5 + 41) = 1;
          result = 0.0;
          *(_OWORD *)(a5 + 44) = xmmword_1C3E37F40;
          goto LABEL_38;
        case 2u:
        case 6u:
        case 8u:
          *(_BYTE *)(a5 + 42) = 1;
          goto LABEL_39;
        case 0xAu:
        case 0xFu:
        case 0x12u:
        case 0x13u:
          *(_BYTE *)(a5 + 41) = 1;
          goto LABEL_39;
        case 0xDu:
        case 0x14u:
          LODWORD(result) = dword_1C3E37938[a2 == 22];
          *(_WORD *)(a5 + 41) = 257;
          v18 = dword_1C3E37930[a2 == 22];
          *(_DWORD *)(a5 + 44) = LODWORD(result);
          *(_DWORD *)(a5 + 48) = 0;
          *(_DWORD *)(a5 + 52) = v18;
          *(_DWORD *)(a5 + 56) = 1065353216;
LABEL_38:
          *(_BYTE *)(a5 + 60) = 1;
LABEL_39:
          if (a2 <= 0x16 && ((1 << a2) & 0x40E000) != 0)
            *(_BYTE *)(a5 + 40) = 1;
          break;
        case 0xEu:
          *(_BYTE *)(a5 + 64) = 1;
          *(_WORD *)(a5 + 40) = 257;
          *(_QWORD *)&result = 3208691902;
          *(_OWORD *)(a5 + 44) = xmmword_1C3E38050;
          *(_BYTE *)(a5 + 60) = 1;
          break;
        default:
          return result;
      }
      return result;
  }
}

void AGCLLVMGen3TargetLowerer::AGCLLVMGen3TargetLowerer(AGCLLVMGen3TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  const char *Value;
  unsigned int v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  BOOL v25;
  const char *v26;
  unint64_t TypeAllocSize;
  uint64_t v28;

  v4 = (char *)this + 844;
  AGCLLVMGen2TargetLowerer::AGCLLVMGen2TargetLowerer(this, a2, a3);
  *(_QWORD *)v5 = &off_1E7ECB680;
  *(_OWORD *)(v5 + 2256) = 0u;
  *(_QWORD *)(v5 + 2248) = v5 + 2256;
  *(_OWORD *)(v5 + 2272) = 0u;
  *(_QWORD *)(v5 + 2288) = 0x1800000000;
  *(_OWORD *)(v5 + 2304) = 0u;
  *(_QWORD *)(v5 + 2320) = 0x2000000000;
  *(_QWORD *)(v5 + 2440) = 4;
  *(_QWORD *)(v5 + 2456) = 0;
  *(_QWORD *)(v5 + 2448) = 0;
  *(_QWORD *)(v5 + 2464) = 4;
  *(_QWORD *)(v5 + 2480) = 0;
  *(_QWORD *)(v5 + 2472) = 0;
  *(_QWORD *)(v5 + 2488) = 4;
  *(_QWORD *)(v5 + 2504) = 0;
  *(_QWORD *)(v5 + 2496) = 0;
  *(_QWORD *)(v5 + 2512) = 4;
  *(_QWORD *)(v5 + 2528) = 0;
  *(_QWORD *)(v5 + 2520) = 0;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7ECBD48;
  v7 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_WORD *)this + 864) = 0;
  *((_DWORD *)this + 210) = 16;
  *(_QWORD *)v4 = 0x10000000100;
  *((_DWORD *)this + 213) = 256;
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SHARED_REGS_BYTES", v8);
    if (Value)
    {
      if (*Value != 48)
      {
        v10 = atoi(Value);
        if (v10)
        {
          v11 = (((unint64_t)v10 + 15) >> 2) & 0x7FFFFFFC;
          if (v11 <= 0x100)
          {
            *((_DWORD *)this + 211) = v11;
            *((_DWORD *)this + 212) = v11;
          }
        }
      }
    }
  }
  if (MGGetBoolAnswer())
  {
    v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SHARED_REGS_BYTES_COMPUTE", v12);
    if (v13)
    {
      if (*v13 != 48)
      {
        v14 = atoi(v13);
        if (v14)
        {
          v15 = (((unint64_t)v14 + 15) >> 2) & 0x7FFFFFFC;
          if (v15 >= *((_DWORD *)this + 213))
            LODWORD(v15) = *((_DWORD *)this + 213);
          *((_DWORD *)this + 213) = v15;
        }
      }
    }
  }
  *(_OWORD *)(v4 + 12) = xmmword_1C3E38070;
  *(_OWORD *)(v4 + 28) = xmmword_1C3E38080;
  *(_OWORD *)(v4 + 44) = xmmword_1C3E38090;
  *((_QWORD *)this + 113) = 0x7C0000F000;
  *((_QWORD *)this + 117) = "llvm.agx2.tg.barrier.var";
  *((_QWORD *)this + 119) = "llvm.agx2.sg.barrier.var";
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 120) = "llvm.agx2.memory.fence.var";
  *((_QWORD *)this + 121) = "llvm.agx2.texture.memory.fence";
  *((_QWORD *)this + 122) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_QWORD *)this + 128) = "llvm.agx2.sadd.sat.i16";
  *((_QWORD *)this + 129) = "llvm.agx2.sadd.sat.i32";
  *((_QWORD *)this + 131) = 0;
  *((_QWORD *)this + 132) = "llvm.agx2.uadd.sat.i16";
  *((_QWORD *)this + 133) = "llvm.agx2.uadd.sat.i32";
  *((_QWORD *)this + 135) = 0;
  *((_QWORD *)this + 136) = "llvm.agx2.ssub.sat.i16";
  *((_QWORD *)this + 137) = "llvm.agx2.ssub.sat.i32";
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 140) = "llvm.agx2.usub.sat.i16";
  *((_QWORD *)this + 141) = "llvm.agx2.usub.sat.i32";
  *((_QWORD *)this + 143) = 0;
  *((_QWORD *)this + 144) = "llvm.agx2.smad.sat.i16";
  *((_QWORD *)this + 145) = "llvm.agx2.smad.sat.i32";
  *((_QWORD *)this + 147) = 0;
  *((_QWORD *)this + 148) = "llvm.agx2.umad.sat.i16";
  *((_QWORD *)this + 149) = "llvm.agx2.umad.sat.i32";
  *((_QWORD *)this + 152) = "llvm.agx2.clamp";
  *((_QWORD *)this + 153) = 0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 154) = "llvm.agx2.atanc.f32";
  *((_QWORD *)this + 155) = "llvm.agx2.atanc.f16";
  *((_QWORD *)this + 156) = "llvm.agx2.sin.f32";
  *((_QWORD *)this + 157) = "llvm.agx2.sin.f16";
  *((_QWORD *)this + 300) = "llvm.minnum.f16";
  *((_QWORD *)this + 301) = "llvm.minnum.f32";
  *((_QWORD *)this + 302) = "llvm.maxnum.f16";
  *((_QWORD *)this + 303) = "llvm.maxnum.f32";
  v16 = 1;
  *((_BYTE *)this + 1840) = 1;
  *((_QWORD *)this + 251) = "llvm.agx2.pixel.itr.1xf";
  *((_QWORD *)this + 252) = "llvm.agx2.pixel.itr.2xf";
  *((_QWORD *)this + 253) = "llvm.agx2.pixel.itr.3xf";
  *((_QWORD *)this + 254) = "llvm.agx2.pixel.itr.4xf";
  *((_QWORD *)this + 255) = "llvm.agx2.sample.itr.1xf";
  *((_QWORD *)this + 256) = "llvm.agx2.sample.itr.2xf";
  *((_QWORD *)this + 257) = "llvm.agx2.sample.itr.3xf";
  *((_QWORD *)this + 258) = "llvm.agx2.sample.itr.4xf";
  *((_QWORD *)this + 259) = "llvm.agx2.centroid.itr.1xf";
  *((_QWORD *)this + 260) = "llvm.agx2.centroid.itr.2xf";
  *((_QWORD *)this + 261) = "llvm.agx2.centroid.itr.3xf";
  *((_QWORD *)this + 262) = "llvm.agx2.centroid.itr.4xf";
  *((_QWORD *)this + 263) = "llvm.agx2.pixel.itrproj.1xf";
  *((_QWORD *)this + 264) = "llvm.agx2.pixel.itrproj.2xf";
  *((_QWORD *)this + 265) = "llvm.agx2.pixel.itrproj.3xf";
  *((_QWORD *)this + 266) = "llvm.agx2.pixel.itrproj.4xf";
  *((_QWORD *)this + 267) = "llvm.agx2.sample.itrproj.1xf";
  *((_QWORD *)this + 268) = "llvm.agx2.sample.itrproj.2xf";
  *((_QWORD *)this + 269) = "llvm.agx2.sample.itrproj.3xf";
  *((_QWORD *)this + 270) = "llvm.agx2.sample.itrproj.4xf";
  *((_QWORD *)this + 271) = "llvm.agx2.centroid.itrproj.1xf";
  *((_QWORD *)this + 272) = "llvm.agx2.centroid.itrproj.2xf";
  *((_QWORD *)this + 273) = "llvm.agx2.centroid.itrproj.3xf";
  *((_QWORD *)this + 274) = "llvm.agx2.centroid.itrproj.4xf";
  *((_QWORD *)this + 276) = "dir";
  *((_BYTE *)this + 2216) = 0;
  *((_QWORD *)this + 237) = "llvm.agx.smp";
  *((_QWORD *)this + 238) = "llvm.agx.smp";
  *((_QWORD *)this + 239) = "llvm.agx.smpw";
  *((_QWORD *)this + 240) = "llvm.agx2.imgwblk";
  *((_QWORD *)this + 241) = "llvm.agx2.lldiblk";
  *((_QWORD *)this + 242) = "llvm.agx2.lstiblk";
  *((_QWORD *)this + 158) = "llvm.agx2.pack.prog.i32.f32";
  *((_QWORD *)this + 159) = "llvm.agx2.pack.prog.i32.f32";
  *((_QWORD *)this + 160) = "llvm.agx2.pack.rne.s32";
  *((_QWORD *)this + 161) = "llvm.agx2.pack.rne.u32";
  *((_QWORD *)this + 166) = "llvm.agx2.load.";
  *((_QWORD *)this + 167) = "llvm.agx2.store.";
  *((_QWORD *)this + 168) = "llvm.agx2.device.load.cachectl";
  *((_QWORD *)this + 169) = "llvm.agx2.device.store.cachectl";
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_QWORD *)this + 172) = "llvm.agx2.vertex.varying.write.i32";
  *((_QWORD *)this + 173) = "llvm.agx2.vertex.varying.write.f32";
  *((_QWORD *)this + 174) = "llvm.agx2.vertex.pos.write";
  *((_QWORD *)this + 175) = "llvm.agx2.vertex.ptsize.write";
  *((_QWORD *)this + 176) = "llvm.agx2.vertex.clip.write";
  *((_QWORD *)this + 185) = 0;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((_QWORD *)this + 188) = "llvm.agx2.pixel.depthf.with.smp";
  *((_QWORD *)this + 189) = "llvm.agx2.pixel.movmsk.with.smp";
  *((_QWORD *)this + 190) = "llvm.agx2.sample.read.";
  *((_QWORD *)this + 191) = "llvm.agx2.pixel.write.";
  *((_QWORD *)this + 192) = "llvm.agx2.pixel.dfdx.f32";
  *((_QWORD *)this + 193) = "llvm.agx2.pixel.dfdy.f32";
  *((_QWORD *)this + 194) = "llvm.agx2.pixel.dfdx.f16";
  *((_QWORD *)this + 195) = "llvm.agx2.pixel.dfdy.f16";
  *((_QWORD *)this + 196) = "llvm.agx2.backface.triangle";
  *((_QWORD *)this + 197) = "llvm.agx2.pixel.coord.x";
  *((_QWORD *)this + 198) = "llvm.agx2.pixel.coord.y";
  *((_QWORD *)this + 199) = "llvm.agx.read.sample.number";
  *((_QWORD *)this + 200) = "llvm.agx2.sample.mask.in";
  *((_QWORD *)this + 201) = 0;
  *((_DWORD *)this + 408) = 6;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 206) = "llvm.agx2.read.shared.reg.alloc.size";
  *((_QWORD *)this + 207) = "llvm.agx2.idf";
  *((_QWORD *)this + 208) = "llvm.agx2.cppix.agx1r1";
  *((_QWORD *)this + 236) = "llvm.agx2.pack.prog.i16.f32";
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *((_QWORD *)this + 275) = "llvm.agx2.cmsk";
  *((_QWORD *)this + 115) = "llvm.agx2.flushpbe";
  *((_QWORD *)this + 116) = "llvm.agx2.flushimg";
  *((_QWORD *)this + 114) = "llvm.agx2.nop";
  *((_QWORD *)this + 292) = "llvm.agx2.quad.broadcast";
  *((_QWORD *)this + 293) = "llvm.agx2.quad.broadcast";
  *((_QWORD *)this + 294) = "llvm.agx2.quad.shuffle.up";
  *((_QWORD *)this + 295) = "llvm.agx2.quad.shuffle.down";
  *((_QWORD *)this + 296) = "llvm.agx2.quad.xor";
  *((_QWORD *)this + 151) = "llvm.agx2.rev";
  *((_QWORD *)this + 297) = "llvm.agx2.unpack.";
  *((_QWORD *)this + 298) = "llvm.agx2.pack.";
  *((_BYTE *)this + 2240) = 1;
  *(_QWORD *)(v4 + 887) = 0x101000001;
  *((_WORD *)this + 883) = 0;
  *((_BYTE *)this + 1743) = 1;
  *(_WORD *)((char *)this + 1749) = 257;
  *((_BYTE *)this + 1751) = 1;
  *(_DWORD *)(v4 + 895) = 0x1000000;
  *((_BYTE *)this + 1764) = 0;
  *((_BYTE *)this + 1768) = 0;
  *((_BYTE *)this + 1772) = 0;
  if (MGGetBoolAnswer())
  {
    v18 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_INLINING", v17);
    if (v18)
    {
      if (*v18 != 48 && atoi(v18))
        *((_BYTE *)this + 1751) = 0;
    }
  }
  *((_WORD *)this + 872) = 1;
  if (MGGetBoolAnswer())
  {
    v20 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_MUST_SHADE", v19);
    if (v20)
    {
      if (*v20 != 48)
        v16 = atoi(v20) == 0;
    }
  }
  *((_BYTE *)this + 1744) = v16;
  *((_BYTE *)this + 2392) = 0;
  *((_DWORD *)this + 599) = 8;
  *((_WORD *)this + 876) = 1;
  *((_BYTE *)this + 1755) = 1;
  *(_WORD *)((char *)this + 1761) = 1;
  *(_WORD *)((char *)this + 1769) = 1;
  *((_BYTE *)this + 1771) = 0;
  *((_BYTE *)this + 1808) = 0;
  *(_WORD *)((char *)this + 1775) = 1;
  *((_WORD *)this + 892) = 0;
  *((_QWORD *)this + 209) = llvm::ArrayType::get(*((llvm::ArrayType **)this + 21), (llvm::Type *)6);
  *((_QWORD *)this + 210) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 212) = 0x800000008;
  TypeAllocSize = llvm::DataLayout::getTypeAllocSize((AGCLLVMGen3TargetLowerer *)((char *)this + 376), *((llvm::Type **)this + 209));
  v28 = v21;
  *((_DWORD *)this + 426) = (llvm::TypeSize::operator unsigned long long()
                           / (unint64_t)*((unsigned int *)this + 92)
                           + *((_DWORD *)this + 424) / *((_DWORD *)this + 92)
                           - 1) & -(*((_DWORD *)this + 424) / *((_DWORD *)this + 92));
  TypeAllocSize = llvm::DataLayout::getTypeAllocSize((AGCLLVMGen3TargetLowerer *)((char *)this + 376), *((llvm::Type **)this + 210));
  v28 = v22;
  *((_DWORD *)this + 427) = (llvm::TypeSize::operator unsigned long long()
                           / (unint64_t)*((unsigned int *)this + 92)
                           + *((_DWORD *)this + 425) / *((_DWORD *)this + 92)
                           - 1) & -(*((_DWORD *)this + 425) / *((_DWORD *)this + 92));
  *((_QWORD *)this + 214) = "image_state";
  *((_QWORD *)this + 215) = 0x800000006;
  v23 = MGGetBoolAnswer();
  v25 = 0;
  if (v23)
  {
    v26 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_PRID", v24);
    v25 = v26 && *v26 != 48 && atoi(v26) != 0;
  }
  *((_BYTE *)this + 2432) = v25;
  LODWORD(TypeAllocSize) = 8;
  *(_OWORD *)(std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 281, 8u, &TypeAllocSize)+ 5) = xmmword_1C3E380A0;
  LODWORD(TypeAllocSize) = 16;
  *(_OWORD *)(std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 281, 0x10u, &TypeAllocSize)+ 5) = xmmword_1C3E380B0;
  LODWORD(TypeAllocSize) = 32;
  *(_OWORD *)(std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 281, 0x20u, &TypeAllocSize)+ 5) = xmmword_1C3E380C0;
  LODWORD(TypeAllocSize) = 64;
  *(_OWORD *)(std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 281, 0x40u, &TypeAllocSize)+ 5) = xmmword_1C3E380D0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "r8unorm", 7uLL)+ 8) = xmmword_1C3E380E0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "r8snorm", 7uLL)+ 8) = xmmword_1C3E380F0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "r16unorm", 8uLL)+ 8) = xmmword_1C3E38100;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "r16snorm", 8uLL)+ 8) = xmmword_1C3E38110;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "sr8unorm", 8uLL)+ 8) = xmmword_1C3E38120;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rg8unorm", 8uLL)+ 8) = xmmword_1C3E38130;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rg8snorm", 8uLL)+ 8) = xmmword_1C3E38140;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rg16unorm", 9uLL)+ 8) = xmmword_1C3E38150;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rg16snorm", 9uLL)+ 8) = xmmword_1C3E38160;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "srg8unorm", 9uLL)+ 8) = xmmword_1C3E38170;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rg11b10f", 8uLL)+ 8) = xmmword_1C3E38180;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgb9e5", 6uLL)+ 8) = xmmword_1C3E38190;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgba8unorm", 0xAuLL)+ 8) = xmmword_1C3E381A0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgba8snorm", 0xAuLL)+ 8) = xmmword_1C3E381B0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgba16unorm", 0xBuLL)+ 8) = xmmword_1C3E381C0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgba16snorm", 0xBuLL)+ 8) = xmmword_1C3E381D0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "srgba8unorm", 0xBuLL)+ 8) = xmmword_1C3E381E0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "rgb10a2", 7uLL)+ 8) = xmmword_1C3E381F0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "i8", 2uLL)+ 8) = xmmword_1C3E38200;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v2i8", 4uLL)+ 8) = xmmword_1C3E38210;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v3i8", 4uLL)+ 8) = xmmword_1C3E38220;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v4i8", 4uLL)+ 8) = xmmword_1C3E38230;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "i16", 3uLL)+ 8) = xmmword_1C3E38240;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v2i16", 5uLL)+ 8) = xmmword_1C3E38250;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v3i16", 5uLL)+ 8) = xmmword_1C3E38260;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v4i16", 5uLL)+ 8) = xmmword_1C3E380D0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "i32", 3uLL)+ 8) = xmmword_1C3E38270;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v2i32", 5uLL)+ 8) = xmmword_1C3E38280;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v3i32", 5uLL)+ 8) = xmmword_1C3E38290;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v4i32", 5uLL)+ 8) = xmmword_1C3E382A0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "f16", 3uLL)+ 8) = xmmword_1C3E382B0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v2f16", 5uLL)+ 8) = xmmword_1C3E382C0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v3f16", 5uLL)+ 8) = xmmword_1C3E382D0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v4f16", 5uLL)+ 8) = xmmword_1C3E382E0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "f32", 3uLL)+ 8) = xmmword_1C3E382F0;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v2f32", 5uLL)+ 8) = xmmword_1C3E38300;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v3f32", 5uLL)+ 8) = xmmword_1C3E38310;
  *(_OWORD *)(*llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((AGCLLVMGen3TargetLowerer *)((char *)this + 2272), "v4f32", 5uLL)+ 8) = xmmword_1C3E38320;
  llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2440), 0);
  llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2464), 0);
  llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2488), 0);
  *((_DWORD *)this + 445) = 0;
  *((_BYTE *)this + 1788) = 0;
  *((_DWORD *)this + 450) = 0;
  *((_BYTE *)this + 1795) = 0;
  *((_WORD *)this + 906) = 0;
}

uint64_t *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 25, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *AGCEnv::getValue(AGCEnv *this, const char *a2)
{
  AGCEnv *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  NSObject *OSLog;
  uint64_t v9;
  uint64_t v11;
  _BYTE __p[12];
  __int16 v13;
  AGCEnv *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  AGCEnv::getEnvLookup(this);
  v3 = (AGCEnv *)std::string::basic_string[abi:nn180100]<0>(__p, (char *)this);
  v4 = qword_1ED839C20;
  if (!qword_1ED839C20)
    goto LABEL_8;
  v5 = &qword_1ED839C20;
  do
  {
    v3 = (AGCEnv *)std::less<std::string>::operator()[abi:nn180100]((_QWORD *)(v4 + 32), __p);
    v6 = (uint64_t *)(v4 + 8);
    if (!(_DWORD)v3)
    {
      v6 = (uint64_t *)v4;
      v5 = (uint64_t *)v4;
    }
    v4 = *v6;
  }
  while (*v6);
  if (v5 == &qword_1ED839C20
    || (v3 = (AGCEnv *)std::less<std::string>::operator()[abi:nn180100](__p, v5 + 4), (_DWORD)v3))
  {
LABEL_8:
    v5 = &qword_1ED839C20;
  }
  if (SHIBYTE(v15) < 0)
    operator delete(*(void **)__p);
  if (v5 == &qword_1ED839C20)
    return 0;
  v7 = v5 + 7;
  if (*((char *)v5 + 79) < 0)
    v7 = (_QWORD *)*v7;
  OSLog = AGCEnv::getOSLog(v3);
  if (os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v5 + 55) < 0)
      v9 = v5[5];
    else
      v9 = *((unsigned __int8 *)v5 + 55);
    if (*((char *)v5 + 79) < 0)
      v11 = v5[8];
    else
      v11 = *((unsigned __int8 *)v5 + 79);
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "static const char *AGCEnv::getValue(const char *)";
    v13 = 2080;
    v14 = this;
    v15 = 2048;
    v16 = v9;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = v11;
    _os_log_debug_impl(&dword_1C3C54000, OSLog, OS_LOG_TYPE_DEBUG, "%s: %s[%zu] = %s[%zu]\n", __p, 0x34u);
  }
  return v7;
}

void AGCEnv::getEnvLookup(AGCEnv *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_1ED839C28 = 0;
      qword_1ED839C20 = 0;
      AGCEnv::getEnvLookup(void)::envlookup = (uint64_t)&qword_1ED839C20;
      __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:nn180100], &AGCEnv::getEnvLookup(void)::envlookup, &dword_1C3C54000);
    }
  }
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(this);
    *((_QWORD *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  return a2;
}

uint64_t **std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void AGCLLVMGen3TargetLowerer::getListOfFunctionsInMetalRuntimeWithFastAndNonFastVariants(uint64_t **a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  const std::string::value_type **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t *v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t i;
  _QWORD v19[3];
  uint64_t v20[3];
  uint64_t v21[3];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v19, "air.fract.f16");
  std::string::basic_string[abi:nn180100]<0>(v20, "air.fract.v2f16");
  std::string::basic_string[abi:nn180100]<0>(v21, "air.fract.v3f16");
  std::string::basic_string[abi:nn180100]<0>(v22, "air.fract.v4f16");
  v3 = 0;
  v4 = 0;
  a1[1] = 0;
  v5 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v6 = a1 + 1;
  while (1)
  {
    v7 = (const std::string::value_type **)&v19[3 * v4];
    v8 = (uint64_t *)(a1 + 1);
    if (v6 == v5)
      goto LABEL_8;
    v9 = v3;
    v10 = (uint64_t *)(a1 + 1);
    if (v3)
    {
      do
      {
        v8 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v8 = (uint64_t *)v10[2];
        v11 = *v8 == (_QWORD)v10;
        v10 = v8;
      }
      while (v11);
    }
    if (std::less<std::string>::operator()[abi:nn180100](v8 + 4, &v19[3 * v4]))
    {
LABEL_8:
      v12 = a1 + 1;
      v13 = a1 + 1;
      if (v3)
      {
        v13 = (uint64_t **)(v8 + 1);
        if (v8[1])
          goto LABEL_23;
        v12 = (uint64_t **)v8;
      }
LABEL_17:
      v15 = (uint64_t *)operator new(0x38uLL);
      v16 = (std::string *)(v15 + 4);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *v7, (std::string::size_type)v7[1]);
      }
      else
      {
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
        v15[6] = (uint64_t)v7[2];
      }
      *v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v12;
      *v13 = v15;
      v17 = (uint64_t *)**a1;
      if (v17)
      {
        *a1 = v17;
        v15 = *v13;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v6 = (uint64_t **)*a1;
      goto LABEL_23;
    }
    v12 = a1 + 1;
    v13 = a1 + 1;
    if (!v3)
      goto LABEL_17;
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v3;
        v14 = v3 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](&v19[3 * v4], v14))
          break;
        v3 = *v12;
        v13 = v12;
        if (!*v12)
          goto LABEL_17;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v14, &v19[3 * v4]))
        break;
      v13 = v12 + 1;
      v3 = v12[1];
      if (!v3)
        goto LABEL_17;
    }
LABEL_23:
    if (++v4 == 4)
      break;
    v3 = *v5;
  }
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0)
      operator delete((void *)v22[i]);
  }
}

void AGCLLVMGen2TargetLowerer::AGCLLVMGen2TargetLowerer(AGCLLVMGen2TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
  char *v5;
  _QWORD *v6;
  llvm::DataLayout *v7;
  const char *v8;
  const char *Value;
  int v10;
  const char *v11;
  BOOL v12;
  const char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v5 = (char *)this + 844;
  AGCLLVMBuilder::AGCLLVMBuilder(this, a2);
  *v6 = &off_1E7ECB090;
  v6[46] = 0x400000008;
  v7 = (llvm::DataLayout *)(v6 + 47);
  if (a3[2])
    strlen(a3[2]);
  *((_WORD *)this + 192) = 0;
  *((_WORD *)this + 198) = 0;
  *((_QWORD *)this + 51) = (char *)this + 432;
  *((_OWORD *)this + 26) = xmmword_1C3E37DE0;
  *((_QWORD *)this + 55) = (char *)this + 456;
  *((_QWORD *)this + 56) = 0x1000000000;
  *((_QWORD *)this + 73) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_QWORD *)this + 76) = (char *)this + 624;
  *((_QWORD *)this + 77) = 0x800000000;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 95) = (char *)this + 776;
  *((_QWORD *)this + 96) = 0x800000000;
  llvm::DataLayout::reset();
  *((_BYTE *)this + 808) = 0;
  *((_QWORD *)this + 102) = a3;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_QWORD *)v5 + 5) = -1;
  *((_QWORD *)v5 + 122) = a3[3];
  *((_QWORD *)this + 214) = "driver_parameters";
  *((_DWORD *)this + 430) = 3;
  *(_DWORD *)(v5 + 890) = 16842752;
  *((_BYTE *)this + 1730) = 0;
  *((_QWORD *)this + 202) = 0;
  *((_BYTE *)this + 1754) = 0;
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_ATOMIC_OPTIMIZATIONS_VERTEX_FRAGMENT", v8);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
        *((_BYTE *)this + 1754) = 1;
    }
  }
  *((_DWORD *)this + 439) = 0x38u / *((_DWORD *)this + 93);
  v10 = MGGetBoolAnswer();
  v12 = 1;
  if (v10)
  {
    v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SKIP_TEXTURE_OOB_CHECKS", v11);
    v12 = !v13 || *v13 == 48 || atoi(v13) == 0;
  }
  *((_BYTE *)this + 1765) = v12;
  *((_BYTE *)this + 1776) = 0;
  *((_BYTE *)this + 1786) = 1;
  *(_WORD *)((char *)this + 1791) = 1;
  *((_BYTE *)this + 1794) = 0;
  *((_BYTE *)this + 1798) = 1;
  *((_DWORD *)this + 451) = 4;
  *((_BYTE *)this + 1809) = 0;
  *((_BYTE *)this + 1811) = 0;
  *((_WORD *)this + 898) = 0;
  *(_DWORD *)(v5 + 970) = 0;
  *(_QWORD *)this = &off_1E7ECA5B0;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E7ECABB0;
  v15 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E7ECAFE8;
  v17 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *((_WORD *)this + 864) = 256;
  *((_DWORD *)this + 210) = 16;
  *(_QWORD *)v5 = 0x30000000400;
  *((_DWORD *)this + 213) = 512;
  if ((v18 & 1) == 0
  {
    v19 = *((_DWORD *)this + 211);
    v20 = *((_DWORD *)this + 212);
    v21 = *((_DWORD *)this + 213);
    v22 = v19 + 2 * v20 + v21;
    if (v19 <= v20)
      v19 = *((_DWORD *)this + 212);
    if (v19 <= v21)
      v19 = *((_DWORD *)this + 213);
    AGCLLVMGen2TargetLowerer::setSharedRegisterSizes(void)::total_shared_registers = v22 + 3 * v19;
  }
  *(_OWORD *)(v5 + 12) = xmmword_1C3E37F90;
  *(_OWORD *)(v5 + 28) = xmmword_1C3E37FA0;
  *((_DWORD *)this + 222) = 56;
  *((_QWORD *)this + 117) = "llvm.agx1.cl.barrier";
  *((_QWORD *)this + 119) = "llvm.agx1.simd.barrier";
  *((_QWORD *)this + 118) = "llvm.agx1.cl.global.barrier";
  *((_QWORD *)this + 120) = "llvm.agx1.memfence";
  *((_QWORD *)this + 127) = 0;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *((_QWORD *)this + 128) = "llvm.agx1.sadd.sat.i16";
  *((_QWORD *)this + 129) = "llvm.agx1.sadd.sat.i32";
  *((_OWORD *)this + 65) = 0u;
  *((_QWORD *)this + 132) = "llvm.agx1.uadd.sat.i16";
  *((_QWORD *)this + 133) = "llvm.agx1.uadd.sat.i32";
  *((_OWORD *)this + 67) = 0u;
  *((_QWORD *)this + 136) = "llvm.agx1.ssub.sat.i16";
  *((_QWORD *)this + 137) = "llvm.agx1.ssub.sat.i32";
  *((_OWORD *)this + 69) = 0u;
  *((_QWORD *)this + 140) = "llvm.agx1.usub.sat.i16";
  *((_QWORD *)this + 141) = "llvm.agx1.usub.sat.i32";
  *((_OWORD *)this + 71) = 0u;
  *((_QWORD *)this + 144) = "llvm.agx1.smad.sat.i16";
  *((_QWORD *)this + 147) = 0;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_QWORD *)this + 148) = "llvm.agx1.umad.sat.i16";
  *(_OWORD *)((char *)this + 1192) = 0u;
  *((_QWORD *)this + 152) = "llvm.agx1.clamp";
  *((_QWORD *)this + 153) = "llvm.agx1.fusedClampFlushNaN";
  *((_QWORD *)this + 229) = "llvm.agx1.flushNaN";
  *((_QWORD *)this + 154) = "llvm.agx1.atanc.f32";
  *((_QWORD *)this + 155) = "llvm.agx1.atanc.f16";
  *((_QWORD *)this + 156) = "llvm.agx1.sin.g5.f32";
  *((_QWORD *)this + 157) = "llvm.agx1.sin.g5.f16";
  *((_BYTE *)this + 1840) = 1;
  *((_QWORD *)this + 251) = "llvm.agx1.itr.pixel.1xf";
  *((_QWORD *)this + 252) = "llvm.agx1.itr.pixel.2xf";
  *((_QWORD *)this + 253) = "llvm.agx1.itr.pixel.3xf";
  *((_QWORD *)this + 254) = "llvm.agx1.itr.pixel.4xf";
  *((_QWORD *)this + 255) = "llvm.agx1.itr.sample.1xf";
  *((_QWORD *)this + 256) = "llvm.agx1.itr.sample.2xf";
  *((_QWORD *)this + 257) = "llvm.agx1.itr.sample.3xf";
  *((_QWORD *)this + 258) = "llvm.agx1.itr.sample.4xf";
  *((_QWORD *)this + 259) = "llvm.agx1.itr.centroid.1xf";
  *((_QWORD *)this + 260) = "llvm.agx1.itr.centroid.2xf";
  *((_QWORD *)this + 261) = "llvm.agx1.itr.centroid.3xf";
  *((_QWORD *)this + 262) = "llvm.agx1.itr.centroid.4xf";
  *((_QWORD *)this + 263) = "llvm.agx1.itrproj.pixel.1xf";
  *((_QWORD *)this + 264) = "llvm.agx1.itrproj.pixel.2xf";
  *((_QWORD *)this + 265) = "llvm.agx1.itrproj.pixel.3xf";
  *((_QWORD *)this + 266) = "llvm.agx1.itrproj.pixel.4xf";
  *((_QWORD *)this + 267) = "llvm.agx1.itrproj.sample.1xf";
  *((_QWORD *)this + 268) = "llvm.agx1.itrproj.sample.2xf";
  *((_QWORD *)this + 269) = "llvm.agx1.itrproj.sample.3xf";
  *((_QWORD *)this + 270) = "llvm.agx1.itrproj.sample.4xf";
  *((_QWORD *)this + 271) = "llvm.agx1.itrproj.centroid.1xf";
  *((_QWORD *)this + 272) = "llvm.agx1.itrproj.centroid.2xf";
  *((_QWORD *)this + 273) = "llvm.agx1.itrproj.centroid.3xf";
  *((_QWORD *)this + 274) = "llvm.agx1.itrproj.centroid.4xf";
  *((_QWORD *)this + 276) = "stf";
  *((_BYTE *)this + 2216) = 1;
  *((_QWORD *)this + 278) = "llvm.agx1.itrcem.tmp.3xf";
  *((_QWORD *)this + 279) = "llvm.agx1.itrcemgrad.tmp.3xf";
  *((_QWORD *)this + 237) = "llvm.agx.smp";
  *((_QWORD *)this + 238) = "llvm.agx.smp";
  *((_QWORD *)this + 239) = "llvm.agx.smpw";
  *((_QWORD *)this + 240) = "llvm.agx1.imgwblk";
  *((_QWORD *)this + 241) = "llvm.agx1.lldiblk";
  *((_QWORD *)this + 242) = "llvm.agx1.lstiblk";
  *((_QWORD *)this + 158) = "llvm.agx1.pack.prog.i32.f32";
  *((_QWORD *)this + 159) = "llvm.agx1.pack.prog.i32.f32";
  *((_QWORD *)this + 160) = "llvm.agx1.pack.rne.s32";
  *((_QWORD *)this + 161) = "llvm.agx1.pack.rne.u32";
  *((_QWORD *)this + 162) = "llvm.agx1.unpack.scale.s1616";
  *((_QWORD *)this + 163) = "llvm.agx1.unpack.scale.s8888";
  *((_QWORD *)this + 164) = "llvm.agx1.unpack.scale.u1616";
  *((_QWORD *)this + 165) = "llvm.agx1.unpack.scale.u8888";
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_QWORD *)this + 172) = "llvm.agx1.vertex.varying.write.i32";
  *((_QWORD *)this + 173) = "llvm.agx1.vertex.varying.write.f32";
  *((_QWORD *)this + 174) = "llvm.agx1.vertex.pos.write";
  *((_QWORD *)this + 175) = "llvm.agx1.vertex.ptsize.write";
  *((_QWORD *)this + 176) = "llvm.agx1.vertex.clip.write";
  *((_QWORD *)this + 185) = 0;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((_QWORD *)this + 188) = "llvm.agx1.pixel.depthf";
  *((_QWORD *)this + 189) = "llvm.agx1.pixel.movmsk";
  *((_QWORD *)this + 190) = "llvm.agx1.pixel.readOutputRegisterWithPartitionSize";
  *((_QWORD *)this + 191) = "llvm.agx1.pixel.writeOutputRegisterWithPartitionSize";
  *((_QWORD *)this + 192) = "llvm.agx1.pixel.dfdx.f32";
  *((_QWORD *)this + 193) = "llvm.agx1.pixel.dfdy.f32";
  *((_QWORD *)this + 194) = "llvm.agx1.pixel.dfdx.f16";
  *((_QWORD *)this + 195) = "llvm.agx1.pixel.dfdy.f16";
  *((_QWORD *)this + 196) = "llvm.agx1.is.back.facing";
  *((_QWORD *)this + 197) = "llvm.agx1.read.coord.x.pixel";
  *((_QWORD *)this + 198) = "llvm.agx1.read.coord.y.pixel";
  *((_QWORD *)this + 199) = "llvm.agx1.read.sample.number";
  *((_QWORD *)this + 200) = "llvm.agx1.savmsk.pixel";
  *((_QWORD *)this + 201) = "llvm.agx1.exit.if.zero";
  *((_QWORD *)this + 203) = "llvm.agx1.read.cluster.number";
  *((_QWORD *)this + 231) = "llvm.agx1.emitpix.agx1r1";
  *((_DWORD *)this + 408) = 6;
  *((_QWORD *)this + 205) = "llvm.agx1.wop";
  *((_QWORD *)this + 206) = "llvm.agx1.read.shared.reg.alloc.size";
  *((_QWORD *)this + 207) = "llvm.agx1.idf";
  *((_QWORD *)this + 208) = "llvm.agx1.cppix.agx1r1";
  *((_QWORD *)this + 232) = "llvm.agx1.pack.scale.rne.s8";
  *((_QWORD *)this + 233) = "llvm.agx1.pack.scale.rne.u8";
  *((_QWORD *)this + 234) = "llvm.agx1.pack.scale.rne.s16";
  *((_QWORD *)this + 235) = "llvm.agx1.pack.scale.rne.u16";
  *((_QWORD *)this + 236) = "llvm.agx1.pack.prog.i16.f32";
  *((_QWORD *)this + 243) = "llvm.agx1.gcmp.g5.i32.f32";
  *((_QWORD *)this + 244) = "llvm.agx1.gcmp.g5.i16.f16";
  *((_QWORD *)this + 245) = "llvm.agx1.gexp.g5.f32";
  *((_QWORD *)this + 246) = "llvm.agx1.gexp.g5.f16";
  *((_QWORD *)this + 247) = "llvm.agx1.gcmp.xr.g5.i32.f32";
  *((_QWORD *)this + 248) = "llvm.agx1.gcmp.xr.g5.i16.f16";
  *((_QWORD *)this + 249) = "llvm.agx1.gexp.xr.g5.f32";
  *((_QWORD *)this + 250) = "llvm.agx1.gexp.xr.g5.f16";
  *((_QWORD *)this + 275) = "llvm.agx1.cmsk";
  *((_QWORD *)this + 115) = "llvm.agx1.flushpbe";
  *((_QWORD *)this + 116) = "llvm.agx1.flushimg";
  *((_QWORD *)this + 114) = "llvm.agx1.nop";
  *((_QWORD *)this + 151) = "llvm.agx1.rev";
  *(_WORD *)((char *)this + 1731) = 1;
  *((_BYTE *)this + 1733) = 1;
  *((_BYTE *)this + 2240) = 0;
  *((_WORD *)this + 883) = 0;
  *(_QWORD *)(v5 + 902) = 0;
  *((_BYTE *)this + 1755) = 1;
  *((_DWORD *)this + 440) = 256;
  *(_QWORD *)(v5 + 894) = 0x100000000010000;
  *((_BYTE *)this + 1764) = 0;
  *((_BYTE *)this + 1808) = 0;
  *((_DWORD *)this + 442) = 0;
  *((_DWORD *)this + 443) = 0x1000000;
  *((_BYTE *)this + 1776) = 0;
  *(_WORD *)((char *)this + 1789) = 0;
  *((_BYTE *)this + 1793) = 0;
  *((_QWORD *)v5 + 117) = 0;
  *((_DWORD *)this + 461) = 6;
  *((_QWORD *)this + 209) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 210) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 212) = 0x800000010;
  *((_DWORD *)this + 431) = 16;
  llvm::DataLayout::getTypeAllocSize(v7, *((llvm::Type **)this + 209));
  *((_DWORD *)this + 426) = (llvm::TypeSize::operator unsigned long long()
                           / (unint64_t)*((unsigned int *)this + 92)
                           + *((_DWORD *)this + 424) / *((_DWORD *)this + 92)
                           - 1) & -(*((_DWORD *)this + 424) / *((_DWORD *)this + 92));
  llvm::DataLayout::getTypeAllocSize(v7, *((llvm::Type **)this + 210));
  *((_DWORD *)this + 427) = (llvm::TypeSize::operator unsigned long long()
                           / (unint64_t)*((unsigned int *)this + 92)
                           + *((_DWORD *)this + 425) / *((_DWORD *)this + 92)
                           - 1) & -(*((_DWORD *)this + 425) / *((_DWORD *)this + 92));
  *((_BYTE *)this + 1788) = 0;
  *((_DWORD *)this + 450) = 0;
  *((_BYTE *)this + 1795) = 0;
  *(_DWORD *)(v5 + 966) = 0;
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t ABITypeAlignment;

  llvm::DataLayout::getTypeSizeInBits((uint64_t)this, (uint64_t)a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this, a2);
  return (ABITypeAlignment + v5 - 1) / ABITypeAlignment * ABITypeAlignment;
}

void llvm::DataLayout::getTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C3C66850()
{
  return 64;
}

void AGCLLVMObject::AGCLLVMObject(AGCLLVMObject *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  AGCLLVMBuilder *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t i;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E7ECDDE8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v6 = (AGCLLVMObject *)((char *)this + 32);
  v7 = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *))(**((_QWORD **)a2 + 4) + 8))(*((_QWORD *)a2 + 4), a3);
  AGCLLVMBuilder::AGCLLVMBuilder(v6, a3);
  *((_QWORD *)this + 50) = v7;
  *(_QWORD *)this = &unk_1E7EC0520;
  *((_QWORD *)this + 4) = &unk_1E7EC0610;
  v8 = mach_absolute_time();
  v9 = 0;
  *((_QWORD *)this + 51) = v8;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((_QWORD *)this + 58) = a2;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  do
  {
    v10 = (char *)this + v9;
    *((_QWORD *)v10 + 65) = 0;
    *((_DWORD *)v10 + 132) = 0;
    *((_QWORD *)v10 + 62) = 0;
    *((_QWORD *)v10 + 63) = 0;
    v9 += 40;
    v10[512] = 0;
  }
  while (v9 != 560);
  for (i = 0; i != 560; i += 40)
  {
    v12 = (char *)this + i;
    *((_QWORD *)v12 + 135) = 0;
    *((_DWORD *)v12 + 272) = 0;
    *((_OWORD *)v12 + 66) = 0uLL;
    v12[1072] = 0;
  }
  *((_BYTE *)this + 1616) = 0;
  *((_QWORD *)this + 206) = 0;
  *((_DWORD *)this + 414) = 0;
  *((_BYTE *)this + 1640) = 0;
  *(_OWORD *)((char *)this + 1624) = 0u;
  v13 = (char *)this + 2224;
  v14 = 1664;
  do
  {
    v15 = (char *)this + v14;
    *(_OWORD *)v15 = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_DWORD *)v15 + 8) = 1065353216;
    v14 += 40;
  }
  while (v15 + 40 != v13);
  *((_OWORD *)this + 148) = *(_OWORD *)&off_1E7EC0788;
  *((_OWORD *)this + 149) = xmmword_1E7EC0798;
  *((_OWORD *)this + 150) = *(_OWORD *)&off_1E7EC07A8;
  *((_OWORD *)this + 151) = xmmword_1E7EC07B8;
  *((_OWORD *)this + 145) = xmmword_1E7EC0758;
  *((_OWORD *)this + 146) = *(_OWORD *)&off_1E7EC0768;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_DWORD *)this + 564) = 1065353216;
  *((_DWORD *)this + 570) = 0;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 147) = xmmword_1E7EC0778;
  std::string::basic_string[abi:nn180100]<0>(v19, "__TEXT");
  v20 = 0;
  std::string::basic_string[abi:nn180100]<0>(v21, *((char **)this + 291));
  v22 = 1;
  std::string::basic_string[abi:nn180100]<0>(v23, *((char **)this + 292));
  v24 = 2;
  std::string::basic_string[abi:nn180100]<0>(v25, *((char **)this + 293));
  v26 = 3;
  std::string::basic_string[abi:nn180100]<0>(v27, *((char **)this + 294));
  v28 = 4;
  std::string::basic_string[abi:nn180100]<0>(v29, *((char **)this + 295));
  v30 = 5;
  std::string::basic_string[abi:nn180100]<0>(v31, *((char **)this + 296));
  v32 = 6;
  std::string::basic_string[abi:nn180100]<0>(v33, *((char **)this + 297));
  v34 = 7;
  std::string::basic_string[abi:nn180100]<0>(v35, *((char **)this + 298));
  v36 = 8;
  std::string::basic_string[abi:nn180100]<0>(v37, *((char **)this + 299));
  v38 = 9;
  std::string::basic_string[abi:nn180100]<0>(v39, *((char **)this + 300));
  v40 = 10;
  std::string::basic_string[abi:nn180100]<0>(v41, *((char **)this + 301));
  v42 = 11;
  std::string::basic_string[abi:nn180100]<0>(v43, *((char **)this + 302));
  v44 = 12;
  std::string::basic_string[abi:nn180100]<0>(v45, *((char **)this + 303));
  v16 = 0;
  v46 = 13;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_DWORD *)this + 616) = 1065353216;
  do
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 2432, (uint64_t)&v19[v16], (uint64_t)&v19[v16]);
    v16 += 4;
  }
  while (v16 != 56);
  v17 = 56;
  do
  {
    if (*((char *)&v19[v17 - 1] - 1) < 0)
      operator delete((void *)v19[v17 - 4]);
    v17 -= 4;
  }
  while (v17 * 8);
  *((_QWORD *)this + 309) = 0;
  *((_BYTE *)this + 2480) = 0;
  *((_QWORD *)this + 311) = 1024;
  *((_QWORD *)this + 312) = 8;
  *((_QWORD *)this + 317) = 0;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *((_QWORD *)this + 318) = 1;
  *((_WORD *)this + 1276) = 256;
  *((_QWORD *)this + 321) = 0;
  *((_QWORD *)this + 320) = 0;
  *((_BYTE *)this + 2576) = 0;
  *((_QWORD *)this + 323) = 1024;
  *((_QWORD *)this + 324) = 8;
  *((_QWORD *)this + 329) = 0;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *((_QWORD *)this + 330) = 1;
  *((_WORD *)this + 1324) = 256;
  *((_QWORD *)this + 333) = 0;
  *((_QWORD *)this + 332) = 0;
  *((_BYTE *)this + 2672) = 0;
  *((_QWORD *)this + 335) = 1024;
  *((_QWORD *)this + 336) = 8;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 342) = 1;
  *((_WORD *)this + 1372) = 256;
  *((_QWORD *)this + 344) = 0;
  *((_BYTE *)this + 2760) = 0;
  *((_QWORD *)this + 346) = llvm::IntegerType::get();
  *((_QWORD *)this + 347) = (char *)this + 2792;
  *((_QWORD *)this + 348) = 0x800000000;
  *((_QWORD *)this + 357) = (char *)this + 2872;
  *((_QWORD *)this + 358) = 0x800000000;
  *((_QWORD *)this + 367) = (char *)this + 2952;
  *((_QWORD *)this + 368) = 0x1000000000;
  *((_QWORD *)this + 385) = (char *)this + 3096;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *((_QWORD *)this + 386) = 0x1000000000;
  do
    v18 = __ldaxr((unsigned int *)&AGCLLVMObject::next_debug_id);
  while (__stlxr(v18 + 1, (unsigned int *)&AGCLLVMObject::next_debug_id));
  *((_DWORD *)this + 818) = v18;
  *(_OWORD *)((char *)this + 3276) = 0u;
  *(_OWORD *)((char *)this + 3292) = 0u;
  *((_DWORD *)this + 827) = 16;
  *((_QWORD *)this + 47) = (char *)this + 2776;
  *((_QWORD *)this + 48) = (char *)this + 2856;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (uint64_t *)a2;
  else
    v5 = *(uint64_t **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = v7;
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    v12 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v12 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v12 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v13 = *(unsigned __int8 ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  for (i = *v13; i; i = *(unsigned __int8 **)i)
  {
    v15 = *((_QWORD *)i + 1);
    if (v9 == v15)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
        return i;
    }
    else
    {
      if (v11 > 1)
      {
        if (v15 >= *(_QWORD *)&v8)
          v15 %= *(_QWORD *)&v8;
      }
      else
      {
        v15 &= *(_QWORD *)&v8 - 1;
      }
      if (v15 != v12)
        return 0;
    }
  }
  return i;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;

  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v12)
        v3 = v10 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  v18 = (char *)operator new(0x30uLL);
  *((_QWORD *)v18 + 1) = v11;
  v19 = (std::string *)(v18 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v18 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v18 + 10) = *(_DWORD *)(a3 + 24);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  v28 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v18 = v28;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void AGCLLVMG16PB0TargetConfig::createTargetLowerer(AGCLLVMG16PB0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMG16TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMG16TargetLowerer *)operator new();
  AGCLLVMG16TargetLowerer::AGCLLVMG16TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC8788;
}

void AGCLLVMG16TargetLowerer::AGCLLVMG16TargetLowerer(AGCLLVMG16TargetLowerer *this, llvm::LLVMContext *a2, const AGCLLVMTargetConfig *a3)
{
  uint64_t v4;
  int v5;

  v4 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::AGCLLVMGen6TargetLowerer((uint64_t)this, a2, (uint64_t)a3);
  *(_QWORD *)v4 = &off_1E7EC6528;
  v5 = *((_DWORD *)a3 + 6);
  if (v5 == 65567 || v5 == 262175 || v5 == 196639)
  {
    *(_DWORD *)(v4 + 884) = 96;
    *(_BYTE *)(v4 + 1785) = 1;
  }
  *(_BYTE *)(v4 + 1792) = 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::AGCLLVMGen6TargetLowerer(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::Type *v10;
  const char *v11;
  const char *v12;
  const char *Value;
  unsigned int v14;
  int v15;
  BOOL v16;
  char v17;
  const char *v18;
  const char *v19;
  BOOL v20;

  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer((AGCLLVMGen5TargetLowerer *)a1, a2, (const char **)a3);
  *v5 = &off_1E7ECD040;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7ECD888;
  v7 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E7ECDCC0;
  v9 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_DWORD *)(a1 + 1780) = 1;
  *(_BYTE *)(a1 + 1755) = 0;
  v10 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 168), (llvm::Type *)8);
  *(_QWORD *)(a1 + 1672) = v10;
  llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 376), v10);
  *(_DWORD *)(a1 + 1704) = (llvm::TypeSize::operator unsigned long long()
                          / (unint64_t)*(unsigned int *)(a1 + 368)
                          + *(_DWORD *)(a1 + 1696) / *(_DWORD *)(a1 + 368)
                          - 1) & -(*(_DWORD *)(a1 + 1696) / *(_DWORD *)(a1 + 368));
  *(_DWORD *)(a1 + 2396) = 4;
  *(_BYTE *)(a1 + 1773) = 1;
  *(_DWORD *)(a1 + 1788) = 65793;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_WORD *)(a1 + 1762) = 257;
  *(_BYTE *)(a1 + 1741) = 0;
  *(_BYTE *)(a1 + 1764) = 1;
  *(_WORD *)(a1 + 1770) = 257;
  *(_BYTE *)(a1 + 1767) = 1;
  *(_QWORD *)(a1 + 1688) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 1360) = "llvm.agx3.intersect.ray.with.driver.user.data";
  *(_QWORD *)(a1 + 1368) = "llvm.agx3.continue.ray.with.driver.user.data";
  if (AGCEnv::getValue((AGCEnv *)"AGC_IQ_CANDIDATE_COUNT", v11))
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_IQ_CANDIDATE_COUNT", v12);
    if (!Value || *Value == 48 || ((v14 = atoi(Value), v14 >= 0x20) ? (v15 = 32) : (v15 = v14), v14 <= 7))
      v15 = 8;
  }
  else
  {
    v15 = 10;
  }
  *(_DWORD *)(a1 + 2800) = v15;
  *(_BYTE *)(a1 + 1787) = 1;
  *(_WORD *)(a1 + 1794) = 257;
  *(_WORD *)(a1 + 1797) = 1;
  v16 = *(_DWORD *)(a3 + 24) == 65560 || *(_DWORD *)(a3 + 28) < 24;
  v17 = v16;
  *(_BYTE *)(a1 + 1798) = v17;
  if (!v16 && AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ASYNC_COPY_EMULATE_AGX3", v12))
  {
    v20 = MGGetBoolAnswer()
       && (v19 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ASYNC_COPY_EMULATE_AGX3", v18)) != 0
       && *v19 != 48
       && atoi(v19) != 0;
    *(_BYTE *)(a1 + 1798) = v20;
  }
  *(_DWORD *)(a1 + 1800) = 5;
  *(_BYTE *)(a1 + 1813) = 0;
  *(_DWORD *)(a1 + 860) = 0x10000;
  return a1;
}

void AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer(AGCLLVMGen5TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  AGCLLVMGen4TargetLowerer::AGCLLVMGen4TargetLowerer(this, a2, a3);
  *v4 = &off_1E7ECC848;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E7ECD888;
  v6 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 334) = "llvm.agx2.simd.bcast";
  *((_QWORD *)this + 335) = "llvm.agx2.simd.shuffle";
  *((_QWORD *)this + 336) = "llvm.agx2.simd.shift.up";
  *((_QWORD *)this + 337) = "llvm.agx2.simd.shift.down";
  *((_QWORD *)this + 338) = "llvm.agx2.simd.bfly";
  *((_QWORD *)this + 339) = "llvm.agx2.simd.rotup";
  *((_QWORD *)this + 340) = "llvm.agx2.quad.rotup";
  *((_QWORD *)this + 341) = "llvm.agx2.simd.ballot";
  *((_QWORD *)this + 342) = "llvm.agx2.quad.ballot";
  *((_BYTE *)this + 1748) = 1;
  *((_BYTE *)this + 1738) = 1;
  *((_BYTE *)this + 1755) = 0;
  *((_DWORD *)this + 440) = 1;
  *((_BYTE *)this + 1808) = 1;
  *((_WORD *)this + 883) = 0;
  *((_BYTE *)this + 1753) = 1;
  *(_QWORD *)((char *)this + 1769) = 0x100000001000001;
  *((_BYTE *)this + 1784) = 1;
  *((_BYTE *)this + 1786) = 1;
  *((_BYTE *)this + 1754) = 1;
  *((_DWORD *)this + 450) = 0;
  *((_BYTE *)this + 1795) = 1;
  *((_BYTE *)this + 1812) = 0;
  *((_QWORD *)this + 186) = "llvm.agx2.vertex.amp.id.count.i32";
  *((_QWORD *)this + 187) = "llvm.agx2.vertex.amp.id.mask.i32";
  *((_QWORD *)this + 179) = "llvm.agx2.vertex.varying.amplified.write.i32";
  *((_QWORD *)this + 180) = "llvm.agx2.vertex.varying.amplified.write.f32";
  *((_QWORD *)this + 181) = "llvm.agx2.vertex.pos.amplified.write";
  *((_QWORD *)this + 182) = "llvm.agx2.vertex.ptsize.amplified.write";
  *((_QWORD *)this + 183) = "llvm.agx2.vertex.clip.amplified.write";
  *((_QWORD *)this + 184) = "llvm.agx2.vertex.viewportid.amplified.write.i32";
  *((_QWORD *)this + 185) = "llvm.agx2.vertex.layerid.amplified.write.i32";
  *((_QWORD *)this + 327) = "llvm.agx2.bufrblk.2d";
  *((_QWORD *)this + 328) = "llvm.agx2.bufwblk.2d";
  *((_QWORD *)this + 329) = "llvm.agx2.lmdescpack.2d";
  *((_QWORD *)this + 330) = "llvm.agx2.gmdescpack.2d";
  *((_QWORD *)this + 323) = "llvm.agx2.bufrblk.1d";
  *((_QWORD *)this + 324) = "llvm.agx2.bufwblk.1d";
  *((_QWORD *)this + 325) = "llvm.agx2.lmdescpack.1d";
  *((_QWORD *)this + 326) = "llvm.agx2.gmdescpack.1d";
  *((_QWORD *)this + 319) = llvm::ConstantInt::get();
  *((_QWORD *)this + 320) = llvm::ConstantInt::get();
  *((_QWORD *)this + 321) = llvm::ConstantInt::get();
  *((_QWORD *)this + 322) = llvm::ConstantInt::get();
  *((_QWORD *)this + 317) = "air.simdgroup_async_copy_1d";
  *((_QWORD *)this + 318) = "air.simdgroup_async_copy_2d";
  *((_QWORD *)this + 331) = "llvm.agx2.f32matmad8x8";
  *((_QWORD *)this + 332) = "llvm.agx2.f16matmad8x8";
  *((_QWORD *)this + 344) = "llvm.agx2.quad.reduce.";
  *((_QWORD *)this + 343) = "llvm.agx2.simd.reduce.";
  *((_QWORD *)this + 345) = "llvm.agx2.instance.valid";
  *((_QWORD *)this + 346) = "llvm.agx2.previous.simd.valid.count";
  *((_QWORD *)this + 347) = "llvm.agx2.previous.thread.valid.count";
  *((_QWORD *)this + 348) = "llvm.agx2.total.simd.valid.count";
  *((_QWORD *)this + 349) = "llvm.agx2.total.thread.valid.count";
  *((_QWORD *)this + 333) = "llvm.agx2.syncbuf";
}

void AGCLLVMGen4TargetLowerer::AGCLLVMGen4TargetLowerer(AGCLLVMGen4TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
  uint64_t v3;

  AGCLLVMGen3TargetLowerer::AGCLLVMGen3TargetLowerer(this, a2, a3);
  *(_QWORD *)v3 = &off_1E7ECC1C0;
  *(_BYTE *)(v3 + 1739) = 0;
  *(_QWORD *)(v3 + 1416) = "llvm.agx2.vertex.viewportid.write.i32";
  *(_QWORD *)(v3 + 1424) = "llvm.agx2.vertex.layerid.write.i32";
  *(_BYTE *)(v3 + 2392) = 1;
  *(_QWORD *)(v3 + 1504) = "llvm.agx2.pixel.feedback";
  *(_QWORD *)(v3 + 1616) = "llvm.agx2.get.layerid";
  *(_WORD *)(v3 + 1746) = 257;
  *(_BYTE *)(v3 + 1753) = 0;
  *(_BYTE *)(v3 + 1755) = 1;
  *(_WORD *)(v3 + 1761) = 1;
  *(_BYTE *)(v3 + 1808) = 0;
  *(_QWORD *)(v3 + 1766) = 16842752;
  *(_WORD *)(v3 + 1774) = 256;
  *(_BYTE *)(v3 + 1776) = 0;
  *(_BYTE *)(v3 + 1784) = 0;
  *(_DWORD *)(v3 + 1800) = 0;
  *(_BYTE *)(v3 + 1795) = 0;
  *(_BYTE *)(v3 + 1812) = 0;
}

void AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::~AGCDylibBindPointLayoutT()
{
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMUserObject::replaceBuiltins(AGCLLVMUserObject *this)
{
  AGCLLVMAirBuiltins *v1;
  uint64_t v2;

  v1 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(_QWORD, AGCLLVMUserObject *, _QWORD))(**(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                                                                            + 816))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
  v2 = AGCLLVMAirBuiltins::replaceBuiltins(v1);
  if (v1)
    (*(void (**)(AGCLLVMAirBuiltins *))(*(_QWORD *)v1 + 16))(v1);
  return v2;
}

void AGCLLVMGen5TargetLowerer::createBuiltins(AGCLLVMGen5TargetLowerer *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3)
{
  AGCLLVMAirBuiltins *v6;
  uint64_t (***v7)(int, llvm::Value *);
  uint64_t (**v8)(int, llvm::Value *);
  AGCLLVMAirBuiltins *v9;
  AGCLLVMAirBuiltins *v10;
  AGCLLVMAirBuiltins *v11;
  int v12;
  AGCLLVMAirBuiltins *v13;

  switch(*((_DWORD *)this + 456))
  {
    case 0xC:
      v11 = (AGCLLVMAirBuiltins *)operator new();
      AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v11, a2, a3, this);
      v8 = &off_1E7E8B6F0;
      goto LABEL_7;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v6 = (AGCLLVMAirBuiltins *)operator new();
      AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v6, a2, a3, this);
      v8 = &off_1E7E8B958;
      goto LABEL_7;
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      v9 = (AGCLLVMAirBuiltins *)operator new();
      AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v9, a2, a3, this);
      goto LABEL_4;
    case 0x16:
      v12 = *((_DWORD *)this + 455);
      v13 = (AGCLLVMAirBuiltins *)operator new();
      AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v13, a2, a3, this);
      if (v12 != 196630)
        goto LABEL_6;
LABEL_4:
      v8 = &off_1E7E8BBC0;
      goto LABEL_7;
    case 0x18:
    case 0x1F:
    case 0x20:
    case 0x22:
      v10 = (AGCLLVMAirBuiltins *)operator new();
      AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v10, a2, a3, this);
LABEL_6:
      v8 = &off_1E7E8BE28;
LABEL_7:
      *v7 = v8;
      break;
    default:
      return;
  }
}

void AGCLLVMAirBuiltinsGen7::~AGCLLVMAirBuiltinsGen7(AGCLLVMAirBuiltinsGen7 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(AGCLLVMAirBuiltins *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_1E7E8AE30;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirBuiltins *)((char *)this + 512));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirBuiltins *)((char *)this + 504));
  v2 = (char *)*((_QWORD *)this + 48);
  if (v2 != (char *)this + 400)
    free(v2);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirBuiltins *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirBuiltins *)((char *)this + 128));
  v3 = (char *)*((_QWORD *)this + 1);
  if (v3 != (char *)this + 24)
    free(v3);
}

{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(AGCLLVMAirBuiltins *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3, AGCLLVMTargetLowerer *a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  AGCLLVMBuilder::AGCLLVMBuilder(this, *a3);
  v8[46] = a4;
  *v8 = &off_1E7E8AE30;
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)(v8 + 47), *a3);
  *((_QWORD *)this + 47) = &off_1E7E8C090;
  *((_QWORD *)this + 93) = this;
  *((_QWORD *)this + 89) = a3;
  *((_QWORD *)this + 94) = a2;
  v9 = (uint64_t *)*((_QWORD *)a4 + 102);
  v10 = v9[7];
  if (!v10)
  {
    v11 = operator new();
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_DWORD *)(v11 + 20) = 40;
    std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100](v9 + 7, v11);
    (*(void (**)(uint64_t *, uint64_t))(*v9 + 232))(v9, v9[7]);
    v10 = v9[7];
  }
  *((_QWORD *)this + 95) = v10;
  *((_BYTE *)this + 768) = 1;
  *((_QWORD *)this + 42) = a3;
  *((_DWORD *)this + 26) = *((_DWORD *)a4 + 26);
}

uint64_t AGCLLVMAirBuiltins::replaceBuiltins(AGCLLVMAirBuiltins *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  char *Name;
  size_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;
  char *v15[2];

  v2 = *((_QWORD *)this + 42);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = (llvm::Value *)(v4 - 56);
      else
        v5 = 0;
      v4 = *(_QWORD *)(v4 + 8);
      Name = (char *)llvm::Value::getName(v5);
      v15[0] = 0;
      v15[1] = 0;
      v13 = 0;
      v14 = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v7, v15, &v13, "air.", 4uLL)
        && llvm::GlobalValue::isDeclaration(v5))
      {
        v8 = *((_QWORD *)this + 95);
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1)
          v10 = *(unsigned int *)(v8 + 8);
        else
          v10 = Key;
        v11 = (_QWORD *)(*(_QWORD *)v8 + 8 * v10);
        if (v11 != (_QWORD *)(**((_QWORD **)this + 95) + 8 * *(unsigned int *)(*((_QWORD *)this + 95) + 8)))
          AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement((uint64_t)this + 376, v5, *v11 + 8, v13, v14);
      }
    }
    while (v4 != v3);
  }
  return *((unsigned __int8 *)this + 768);
}

uint64_t AGCLLVMUserObject::replaceIndirectResources(AGCLLVMUserObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::Value *v5;
  char *Name;
  size_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t i;
  llvm::Instruction **v17;
  uint64_t v18;
  llvm::Instruction *v19;
  llvm::Type *VisibleFunctionTableHeapGlobal;
  uint64_t v21;
  char *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  llvm::Instruction *v33;
  llvm::Type *IndirectCommandBufferHeapGlobal;
  uint64_t v35;
  BOOL v36;
  llvm::Type *v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  const void *v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Instruction *v49;
  llvm::Type *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Instruction *v54;
  llvm::Type *PipelineStateHeapGlobal;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Instruction *v59;
  llvm::Type *IntersectionFunctionTableHeapGlobal;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Instruction *v64;
  BOOL v68;
  uint64_t v70;
  char *v71[2];
  void *__s1;
  unint64_t v73;
  void *v74;
  unsigned int v75;
  _QWORD v76[5];

  v76[4] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v2 = v1 + 24;
  v3 = *(_QWORD *)(v1 + 32);
  if (v3 == v1 + 24)
    return 1;
  v70 = v1 + 24;
  do
  {
    if (v3)
      v5 = (llvm::Value *)(v3 - 56);
    else
      v5 = 0;
    v3 = *(_QWORD *)(v3 + 8);
    Name = (char *)llvm::Value::getName(v5);
    __s1 = 0;
    v73 = 0;
    v71[0] = 0;
    v71[1] = 0;
    if (!AGCLLVMBuilder::findPrefix(Name, v7, (char **)&__s1, v71, "air.", 4uLL))
      continue;
    v8 = v73;
    if (v73 < 0x17)
      goto LABEL_36;
    v9 = __s1;
    v10 = (char *)__s1 + v73;
    if (*(_QWORD *)((char *)__s1 + v73 - 23) == 0x656C62697369765FLL
      && *(_QWORD *)((char *)__s1 + v73 - 15) == 0x6F6974636E75665FLL
      && *(_QWORD *)((char *)__s1 + v73 - 8) == 0x656C6261745F6E6FLL)
    {
      if (v73 == 31
        && (*(_QWORD *)__s1 == 0x6C6C756E5F746567 ? (v13 = *((_QWORD *)__s1 + 1) == 0x656C62697369765FLL) : (v13 = 0),
            v13 ? (v14 = *((_QWORD *)__s1 + 2) == 0x6F6974636E75665FLL) : (v14 = 0),
            v14 ? (v15 = *(_QWORD *)((char *)__s1 + 23) == 0x656C6261745F6E6FLL) : (v15 = 0),
            v15))
      {
        v62 = *((_QWORD *)v5 + 1);
        if (!v62)
        {
          v68 = *(_QWORD *)(v10 - 28) == 0x65737265746E695FLL
             && *(_QWORD *)(v10 - 20) == 0x75665F6E6F697463
             && *(_QWORD *)(v10 - 12) == 0x745F6E6F6974636ELL
             && *((_DWORD *)v10 - 1) == 1701601889;
          v2 = v70;
          if (!v68)
            goto LABEL_49;
          goto LABEL_112;
        }
        do
        {
          v63 = *(_QWORD *)(v62 + 8);
          v64 = *(llvm::Instruction **)(v62 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v64);
          llvm::ConstantInt::get();
          llvm::ConstantExpr::getIntToPtr();
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v64);
          v62 = v63;
        }
        while (v63);
      }
      else
      {
        for (i = *((_QWORD *)v5 + 1); i; i = *(_QWORD *)(i + 8))
        {
          AGCLLVMUserObject::getCallOfCastedFunction((AGCLLVMUserObject *)&v74, *(llvm::Value **)(i + 24));
          v17 = (llvm::Instruction **)v74;
          if (v75)
          {
            v18 = 8 * v75;
            do
            {
              v19 = *v17++;
              VisibleFunctionTableHeapGlobal = AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(this);
              AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v19, 0, VisibleFunctionTableHeapGlobal, v21);
              v18 -= 8;
            }
            while (v18);
            v17 = (llvm::Instruction **)v74;
          }
          if (v17 != v76)
            free(v17);
        }
      }
    }
    v2 = v70;
    if (v8 >= 0x1C)
    {
      if (*(_QWORD *)(v10 - 28) != 0x65737265746E695FLL
        || *(_QWORD *)(v10 - 20) != 0x75665F6E6F697463
        || *(_QWORD *)(v10 - 12) != 0x745F6E6F6974636ELL
        || *((_DWORD *)v10 - 1) != 1701601889)
      {
        goto LABEL_49;
      }
      if (v8 == 36 && !memcmp(v9, "get_null_intersection_function_table", 0x24uLL))
      {
        if (*(_QWORD *)((char *)v9 + 21) == 0x5F7265646E65725FLL
          && *(_QWORD *)((char *)v9 + 28) == 0x646E616D6D6F635FLL)
        {
          v27 = 36;
          goto LABEL_66;
        }
        v25 = (char *)v9 + 36;
        v27 = 36;
LABEL_57:
        v29 = *((_QWORD *)v25 - 2);
        v28 = *((_QWORD *)v25 - 1);
        if (v29 == 0x657475706D6F635FLL && v28 == 0x646E616D6D6F635FLL)
          goto LABEL_66;
        goto LABEL_61;
      }
LABEL_112:
      v57 = *((_QWORD *)v5 + 1);
      if (!v57)
        goto LABEL_49;
      do
      {
        v58 = *(_QWORD *)(v57 + 8);
        v59 = *(llvm::Instruction **)(v57 + 24);
        IntersectionFunctionTableHeapGlobal = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v59, 0, IntersectionFunctionTableHeapGlobal, v61);
        v57 = v58;
      }
      while (v58);
    }
LABEL_36:
    if (v8 <= 0xE)
    {
      v9 = __s1;
      goto LABEL_98;
    }
    v9 = __s1;
LABEL_49:
    v25 = (char *)v9 + v8;
    if (*(_QWORD *)((char *)v9 + v8 - 15) == 0x5F7265646E65725FLL
      && *(_QWORD *)((char *)v9 + v8 - 8) == 0x646E616D6D6F635FLL)
    {
      v27 = v8;
      goto LABEL_66;
    }
    if (v8 >= 0x10)
    {
      v27 = v8;
      goto LABEL_57;
    }
    v27 = 15;
LABEL_61:
    if (*(_QWORD *)((char *)v9 + v27 - 15) != 0x646E616D6D6F635FLL
      || *(_QWORD *)((char *)v9 + v27 - 8) != 0x7265666675625F64)
    {
      goto LABEL_89;
    }
LABEL_66:
    v32 = *((_QWORD *)v5 + 1);
    if (!v32)
      goto LABEL_89;
    do
    {
      while (1)
      {
        v33 = *(llvm::Instruction **)(v32 + 24);
        v32 = *(_QWORD *)(v32 + 8);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v33);
        IndirectCommandBufferHeapGlobal = (llvm::Type *)AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v33, 0, IndirectCommandBufferHeapGlobal, v35);
        if (v8 == 19)
          break;
        if (v8 == 20)
        {
          v36 = *v9 == 0x6D6F635F79706F63 && v9[1] == 0x6D6F635F65747570;
          if (v36 && *((_DWORD *)v9 + 4) == 1684955501)
            goto LABEL_87;
        }
LABEL_85:
        if (!v32)
          goto LABEL_88;
      }
      if (*v9 != 0x6E65725F79706F63
        || v9[1] != 0x6D6D6F635F726564
        || *(_QWORD *)((char *)v9 + 11) != 0x646E616D6D6F635FLL)
      {
        goto LABEL_85;
      }
LABEL_87:
      v40 = (llvm::Type *)AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(this);
      AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v33, 2u, v40, v41);
    }
    while (v32);
LABEL_88:
    v27 = v8;
LABEL_89:
    if (v27 >= 0x13
      && (*v9 == 0x657069705F746573 ? (v42 = v9[1] == 0x6174735F656E696CLL) : (v42 = 0),
          v42 ? (v43 = *(_QWORD *)((char *)v9 + 11) == 0x5F65746174735F65) : (v43 = 0),
          v43 && (v52 = *((_QWORD *)v5 + 1)) != 0))
    {
      do
      {
        v53 = *(_QWORD *)(v52 + 8);
        v54 = *(llvm::Instruction **)(v52 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v54);
        PipelineStateHeapGlobal = (llvm::Type *)AGCLLVMUserObject::createPipelineStateHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v54, 2u, PipelineStateHeapGlobal, v56);
        v52 = v53;
      }
      while (v53);
    }
    else
    {
      v8 = v27;
    }
LABEL_98:
    if (v8 == 43)
    {
      v44 = v9;
      v45 = "get_unique_identifier_render_pipeline_state";
      v46 = 43;
LABEL_102:
      if (!memcmp(v44, v45, v46))
      {
        v47 = *((_QWORD *)v5 + 1);
        if (v47)
        {
          do
          {
            v48 = *(_QWORD *)(v47 + 8);
            v49 = *(llvm::Instruction **)(v47 + 24);
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v49);
            v50 = (llvm::Type *)AGCLLVMUserObject::createPipelineStateHeapGlobal(this);
            AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v49, 0, v50, v51);
            v47 = v48;
          }
          while (v48);
        }
      }
    }
    else if (v8 == 44)
    {
      v44 = v9;
      v45 = "get_unique_identifier_compute_pipeline_state";
      v46 = 44;
      goto LABEL_102;
    }
  }
  while (v3 != v2);
  return 1;
}

void AGCLLVMUserObject::replaceTrigIdentities(AGCLLVMUserObject *this)
{
  char *v1;
  llvm::LLVMContext **v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::LLVMContext **v23;
  llvm::LLVMContext *v24;
  llvm::Value *v25;
  char *Name;
  size_t v27;
  char *v28;
  size_t v29;
  int Key;
  uint64_t v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  char *v48;
  void (*v49)(_QWORD *, _QWORD);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t __len;
  char *__src;
  char __srca;
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  void *__dst[2];
  uint64_t v60;
  char *v61;
  char *v62;
  size_t v63;
  char *v64[2];
  char *v65;
  size_t v66;
  uint64_t (**v67)(int, llvm::Value *);
  void *v68;
  _DWORD v69[26];
  uint64_t v70;
  uint64_t v71;
  llvm::LLVMContext **v72;
  uint64_t v73;
  uint64_t (**v74)(int, llvm::Value *);
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[29];
  uint64_t (***v79)(int, llvm::Value *);
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v2 = (llvm::LLVMContext **)*((_QWORD *)v1 + 46);
  v3 = *((_QWORD *)v1 + 50);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v67, *v2);
  v73 = v3;
  v67 = &off_1E7EB7DD0;
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v74, *v2);
  v79 = &v67;
  v78[25] = v2;
  v74 = &off_1E7E8C0A8;
  v72 = v2;
  v69[20] = *(_DWORD *)(v3 + 104);
  if ((v4 & 1) == 0
  {
    AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements = 0;
    *(_QWORD *)&dword_1ED8398B8 = 0;
    qword_1ED8398C0 = 0x2800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements, &dword_1C3C54000);
  }
  if (!dword_1ED8398BC)
  {
    v5 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    v6 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v5 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v6 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(_QWORD *)(v6 + 16) = 0;
    v7 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    v8 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v7 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v8 + 8) = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity;
    *(_QWORD *)(v8 + 16) = 0;
    v9 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    v10 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v9 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v10 + 8) = AGCLLVMAirTrigIdentities::buildSinArctan;
    *(_QWORD *)(v10 + 16) = 0;
    v11 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    v12 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v11 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v12 + 8) = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity;
    *(_QWORD *)(v12 + 16) = 0;
    v13 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    v14 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v13 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v14 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(_QWORD *)(v14 + 16) = 0;
    v15 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    v16 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v15 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v16 + 8) = AGCLLVMAirTrigIdentities::buildCosArctan;
    *(_QWORD *)(v16 + 16) = 0;
    v17 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    v18 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v17 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v18 + 8) = AGCLLVMAirTrigIdentities::buildTanArcsin;
    *(_QWORD *)(v18 + 16) = 0;
    v19 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    v20 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v19 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v20 + 8) = AGCLLVMAirTrigIdentities::buildTanArccos;
    *(_QWORD *)(v20 + 16) = 0;
    v21 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    v22 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v21 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v22 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(_QWORD *)(v22 + 16) = 0;
  }
  v23 = v72 + 3;
  v24 = v72[4];
  if (v24 != (llvm::LLVMContext *)(v72 + 3))
  {
    do
    {
      if (v24)
        v25 = (llvm::LLVMContext *)((char *)v24 - 56);
      else
        v25 = 0;
      v24 = (llvm::LLVMContext *)*((_QWORD *)v24 + 1);
      Name = (char *)llvm::Value::getName(v25);
      v65 = 0;
      v66 = 0;
      v64[0] = 0;
      v64[1] = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v27, &v65, v64, "air.", 4uLL))
      {
        v28 = v65;
        v29 = v66;
        Key = llvm::StringMapImpl::FindKey();
        v31 = Key == -1 ? dword_1ED8398B8 : Key;
        if (v31 != dword_1ED8398B8)
        {
          v32 = *((_QWORD *)v25 + 1);
          if (v32)
          {
            v56 = AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements;
            do
            {
              while (1)
              {
                v33 = *(llvm::Instruction **)(v32 + 24);
                v32 = *(_QWORD *)(v32 + 8);
                if (((llvm::CallBase::arg_end(v33) - ((_QWORD)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                {
                  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v68, v33);
                  v34 = *((_QWORD *)v33 - 4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
                  if (v34)
                  {
                    if (*(_BYTE *)(v34 + 16) == 84
                      && ((llvm::CallBase::arg_end((llvm::CallBase *)v34)
                         - (v34
                          + 32 * -(*(_DWORD *)(v34 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                    {
                      v35 = *(_QWORD *)(v34 - 32);
                      if (v35)
                      {
                        if (!*(_BYTE *)(v35 + 16) && *(_QWORD *)(v35 + 24) == *(_QWORD *)(v34 + 72))
                        {
                          v36 = (char *)llvm::Value::getName((llvm::Value *)v35);
                          v62 = 0;
                          v63 = 0;
                          if (AGCLLVMBuilder::findPrefix(v36, v37, &v62, &v61, "air.", 4uLL))
                          {
                            v38 = *(_QWORD *)(v56 + 8 * v31);
                            __len = v63;
                            __src = v62;
                            v39 = llvm::StringMapImpl::FindKey();
                            v46 = v39 == -1 ? *(unsigned int *)(v38 + 16) : (int)v39;
                            if (*(_QWORD *)(v38 + 8) + 8 * v46 != *(_QWORD *)(*(_QWORD *)(v56 + 8 * v31) + 8)
                                                                 + 8
                                                                 * *(unsigned int *)(*(_QWORD *)(v56 + 8 * v31) + 16))
                            {
                              v52 = *(_QWORD *)(v38 + 8) + 8 * v46;
                              if (v28)
                              {
                                std::string::basic_string[abi:nn180100](__dst, v28, v29);
                                LOBYTE(v47) = __dst[0];
                                if (v60 >= 0)
                                  v47 = __dst;
                              }
                              else
                              {
                                __dst[0] = 0;
                                __dst[1] = 0;
                                v47 = __dst;
                                v60 = 0;
                              }
                              v48 = __src;
                              if (__src)
                              {
                                __srca = (char)v47;
                                std::string::basic_string[abi:nn180100](__p, v48, __len);
                                LOBYTE(v47) = __srca;
                              }
                              else
                              {
                                __p[0] = 0;
                                __p[1] = 0;
                                v58 = 0;
                              }
                              printMessage((char **)&AGCPrinter, "Simplify Identity: %s(%s)", v40, v41, v42, v43, v44, v45, (char)v47);
                              if (SHIBYTE(v58) < 0)
                                operator delete(__p[0]);
                              if (SHIBYTE(v60) < 0)
                                operator delete(__dst[0]);
                              v49 = *(void (**)(_QWORD *, _QWORD))(*(_QWORD *)v52 + 8);
                              v50 = *(_QWORD *)(*(_QWORD *)v52 + 16);
                              v51 = (uint64_t (***)(int, llvm::Value *))((char *)v79 + (v50 >> 1));
                              if ((v50 & 1) != 0)
                                v49 = *(void (**)(_QWORD *, _QWORD))(*v51 + v49);
                              v49(v51, *(_QWORD *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF)));
                              llvm::Value::replaceAllUsesWith();
                              llvm::Instruction::eraseFromParent(v33);
                              if (!llvm::Value::getNumUses((llvm::Value *)v34))
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (!v32)
                  goto LABEL_45;
              }
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v34);
            }
            while (v32);
          }
        }
      }
LABEL_45:
      ;
    }
    while (v24 != (llvm::LLVMContext *)v23);
  }
  v67 = &off_1E7EB7DD0;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v78);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v77);
  if (v75 != &v76)
    free(v75);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v71);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v70);
  if (v68 != v69)
    free(v68);
}

uint64_t AGCLLVMBuilder::findPrefix(char *__s1, size_t a2, char **a3, char **a4, void *__s2, size_t __n)
{
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;

  if (a2 < __n)
    return 0;
  if (__n && memcmp(__s1, __s2, __n))
    return 0;
  if (a2 >= __n)
    v12 = __n;
  else
    v12 = a2;
  v13 = a2 - v12;
  v14 = &__s1[v12];
  if (a2 <= __n || (v15 = memchr(v14, 46, a2 - v12)) == 0 || (v16 = v15 - v14, v15 - v14 == -1))
  {
    v20 = 0;
    *a3 = v14;
    a3[1] = (char *)v13;
    v19 = (char *)&unk_1C3E4D9BB;
  }
  else
  {
    if (v13 >= v16)
      v17 = v15 - v14;
    else
      v17 = v13;
    *a3 = v14;
    a3[1] = (char *)v17;
    if (v13 >= v16 + 1)
      v18 = v16 + 1;
    else
      v18 = v13;
    v19 = &v14[v18];
    v20 = v13 - v18;
  }
  *a4 = v19;
  a4[1] = (char *)v20;
  return 1;
}

void AGCLLVMBuilder::AGCLLVMBuilder(AGCLLVMBuilder *this, llvm::LLVMContext *a2)
{
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  llvm::LLVMContext *v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v11;
  uint64_t v12;

  *((_QWORD *)this + 16) = MEMORY[0x1E0DE2A90] + 16;
  *((_QWORD *)this + 17) = MEMORY[0x1E0DE2AC0] + 16;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = (char *)this + 128;
  *((_QWORD *)this + 2) = 0x200000000;
  *((_QWORD *)this + 11) = (char *)this + 136;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 54) = 512;
  *((_BYTE *)this + 110) = 7;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_QWORD *)this = &off_1E7EBA008;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 18) = llvm::Type::getVoidTy(a2, a2);
  *((_QWORD *)this + 19) = llvm::Type::getHalfTy(*((llvm::Type **)this + 9), v4);
  *((_QWORD *)this + 20) = llvm::Type::getBFloatTy(*((llvm::Type **)this + 9), v5);
  *((_QWORD *)this + 21) = llvm::Type::getFloatTy(*((llvm::Type **)this + 9), v6);
  *((_QWORD *)this + 22) = llvm::Type::getInt1Ty(*((llvm::Type **)this + 9), v7);
  *((_QWORD *)this + 23) = llvm::Type::getInt8Ty(*((llvm::Type **)this + 9), v8);
  *((_QWORD *)this + 24) = llvm::Type::getInt16Ty(*((llvm::Type **)this + 9), v9);
  *((_QWORD *)this + 25) = llvm::Type::getInt32Ty(*((llvm::Type **)this + 9), v10);
  *((_QWORD *)this + 26) = llvm::Type::getInt64Ty(*((llvm::Type **)this + 9), v11);
  *((_QWORD *)this + 27) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 28) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 29) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 30) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 31) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 32) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 33) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 34) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 35) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 36) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 37) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 38) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 39) = llvm::FixedVectorType::get();
  *((_QWORD *)this + 40) = llvm::FixedVectorType::get();
  v12 = llvm::IntegerType::get();
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 41) = v12;
  *((_QWORD *)this + 45) = a2;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildReadWriteImage(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  llvm::Value *v6;
  int v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ConstantPointerNull *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t Cast;
  llvm::PointerType *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Type *v25;
  llvm::Value *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  uint64_t v42;
  llvm::Value *v43;
  uint64_t Element;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  llvm::Value *v49;
  llvm::Value *FPToUI;
  uint64_t v51;
  _QWORD *Name;
  unint64_t v53;
  BOOL v54;
  llvm::Value *v56;
  llvm::Type *v57;
  uint64_t v58;
  llvm::CmpInst **v59;
  llvm::Value *Select;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  llvm::Value *v71;
  llvm::Value *v72;
  llvm::Value *Shl;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Value *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  llvm::Value *v83;
  llvm::Type *v84;
  llvm::Type **v85;
  llvm::Value *v86;
  llvm::Type *v87;
  llvm::Value *v88;
  llvm::Value *Value;
  llvm::Value *v90;
  llvm::Value *v91;
  llvm::Value *v92;
  llvm::Value *v93;
  llvm::Value *v94;
  llvm::Value *v95;
  llvm::Value *v96;
  llvm::Value *v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::Value *v102;
  llvm::Value *v103;
  llvm::Value *v104;
  llvm::Value *v105;
  llvm::Value *v106;
  llvm::Value *v107;
  llvm::Value *v108;
  uint64_t v109;
  llvm::Value *v110;
  llvm::Value *v111;
  uint64_t v112;
  llvm::Value *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t InsertValue;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  unsigned int v122;
  llvm::Value *v123;
  llvm::Value *v124;
  llvm::Value *v125;
  int v126;
  uint64_t v127;
  int *v130;
  int v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  llvm::Value *InsertElement;
  _DWORD v137[8];
  __int16 v138;
  void *v139;
  uint64_t v140;
  _BYTE v141[128];
  _QWORD v142[4];
  __int16 v143;
  _BYTE *v144;
  uint64_t v145;
  _BYTE v146[16];
  __int16 v147;
  uint64_t v148;

  v4 = a2;
  v148 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::Value *)*((_QWORD *)a2 + 17);
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  v8 = *((_QWORD *)a2 + 25);
  v126 = a2[40];
  v139 = v141;
  v140 = 0x1000000000;
  InsertElement = v6;
  v9 = (llvm::Value *)*((_QWORD *)a2 + 18);
  v127 = *((_QWORD *)a2 + 19);
  v124 = (llvm::Value *)*((_QWORD *)a2 + 23);
  v125 = (llvm::Value *)*((_QWORD *)a2 + 22);
  v10 = a2[1];
  if (*a2 != 3)
  {
    v11 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v11);
    v12 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v12);
  }
  v123 = v9;
  v13 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
  if (*v4 == 3)
    v14 = (uint64_t *)(v4 + 14);
  else
    v14 = (uint64_t *)(v4 + 12);
  v15 = *v14;
  v147 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v15, (uint64_t)v13, (uint64_t)&v144);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, Cast);
  if (*v4 == 3)
  {
    v18 = llvm::ConstantPointerNull::get(v13, v17);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1780) || (v19 = *((_QWORD *)v4 + 5)) == 0)
      v19 = *((_QWORD *)v4 + 11);
    v147 = 257;
    v18 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v19, (uint64_t)v13, (uint64_t)&v144);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v18);
  v20 = *((_QWORD *)v4 + 4);
  if (!v20)
  {
    v21 = llvm::ConstantInt::get();
    v22 = llvm::PointerType::get();
    v147 = 257;
    v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v21, v22, (uint64_t)&v144);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v20);
  v23 = InsertElement;
  if (v10 == 2)
  {
    if (v7 == 13)
      v24 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, InsertElement, 0, 2, 1);
    else
      v24 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, InsertElement, 4);
    v23 = v24;
    InsertElement = v24;
  }
  v25 = *(llvm::Type **)v23;
  if ((*(_DWORD *)(*(_QWORD *)v23 + 8) & 0xFE) == 0x12)
    v25 = (llvm::Type *)**((_QWORD **)v25 + 2);
  if (!v4[1] && *v4 == 3)
  {
    v26 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, v23, 2);
    v27 = v7;
    v28 = v8;
    v29 = llvm::ConstantInt::get();
    v147 = 257;
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = (llvm::Value *)v29;
    v8 = v28;
    v7 = v27;
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v26, v31, v30, (const llvm::Twine *)&v144);
  }
  v32 = 0;
  v33 = v10 != 2;
  v130 = v4;
  if (*(_BYTE *)(a1 + 2216) && v10 == 2)
  {
    v34 = v4[1];
    v35 = v7;
    if (v34 > 3)
      v36 = 0;
    else
      v36 = dword_1C3E386B0[v34];
    v37 = v8;
    if (v126 == 2)
    {
      v38 = *(_QWORD *)(a1 + 224);
      v142[0] = *(_QWORD *)(a1 + 288);
      v142[1] = v38;
      v142[2] = v38;
      v142[3] = v38;
      llvm::FunctionType::get();
      if (*(_QWORD *)(a1 + 2232))
        strlen(*(const char **)(a1 + 2232));
      llvm::Module::getOrInsertFunction();
      v40 = v39;
      v144 = v146;
      v145 = 0x400000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v144, (uint64_t)InsertElement);
      AGCLLVMTargetLowerer::remapGradients(a1, (uint64_t)&v144, v125, v124, v36);
      v138 = 257;
      v41 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v40 + 24), v40, (uint64_t)v144, v145, (uint64_t)v137);
      if (v144 != v146)
        free(v144);
    }
    else
    {
      llvm::FunctionType::get();
      if (*(_QWORD *)(a1 + 2224))
        strlen(*(const char **)(a1 + 2224));
      llvm::Module::getOrInsertFunction();
      v147 = 257;
      v41 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v42 + 24), v42, (uint64_t)&InsertElement, 1, (uint64_t)&v144);
    }
    v8 = v37;
    InsertElement = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 0, 2, 1);
    v147 = 257;
    v43 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v41, v43, (const llvm::Twine *)&v144);
    v45 = *(_QWORD *)(a1 + 200);
    v138 = 257;
    v46 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, Element, v45, (uint64_t)v137);
    v47 = *(_QWORD *)(a1 + 192);
    v143 = 257;
    v32 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v46, v47, (uint64_t)v142);
    v7 = v35;
    if (v126 == 2)
    {
      v125 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 3u, 2, 1);
      v124 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 5u, 2, 1);
    }
    v33 = 0;
  }
  if (v7 == 13 && v10 == 2)
    v32 = (uint64_t)AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *((llvm::Value **)v4 + 29), *(llvm::Type **)(a1 + 192));
  if (*((_BYTE *)v4 + 23) && *v4 != 3)
  {
    if (v4[1] < 2)
    {
      if (v7 == 13)
        goto LABEL_56;
LABEL_55:
      (*(void (**)(uint64_t, _QWORD, llvm::Value **, BOOL))(*(_QWORD *)a1 + 1512))(a1, *((_QWORD *)v4 + 6), &InsertElement, v10 == 2);
      goto LABEL_56;
    }
    v48 = v7 == 13 || v33;
    if ((v48 & 1) == 0)
      goto LABEL_55;
  }
LABEL_56:
  if (v25 == *(llvm::Type **)(a1 + 192))
  {
    v49 = InsertElement;
    if (!*(_BYTE *)(a1 + 2240))
    {
      v49 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)a1, InsertElement, v25, 0);
      InsertElement = v49;
    }
  }
  else
  {
    v49 = InsertElement;
  }
  if (v7 != 13)
    v49 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v49, 1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v49);
  if (v32)
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v32);
  if (v127)
  {
    FPToUI = (llvm::Value *)*((_QWORD *)v4 + 19);
    if (*(_QWORD *)FPToUI == *(_QWORD *)(a1 + 200))
    {
      if (*((_BYTE *)FPToUI + 16) == 84)
      {
        v51 = *((_QWORD *)FPToUI - 4);
        if (v51)
        {
          if (!*(_BYTE *)(v51 + 16) && *(_QWORD *)(v51 + 24) == *((_QWORD *)FPToUI + 9))
          {
            Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v51);
            if (v53 >= 0x13)
            {
              v54 = *Name == 0x766E6F632E726961 && Name[1] == 0x33692E752E747265;
              if (v54 && *(_QWORD *)((char *)Name + 11) == 0x662E3233692E752ELL)
              {
                v133 = *(_OWORD *)(a1 + 56);
                llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
                v135 = *(_DWORD *)(a1 + 104);
                v56 = (llvm::Value *)AGCLLVMTargetLowerer::buildBiasF2IVarying(a1, (uint64_t)&v133, *((llvm **)FPToUI - 4 * (*((_DWORD *)FPToUI + 5) & 0x7FFFFFF)));
                if (v134)
                  llvm::MetadataTracking::untrack();
                v57 = *(llvm::Type **)(a1 + 192);
                v147 = 257;
                FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), v56, v57, (const llvm::Twine *)&v144);
              }
            }
          }
        }
      }
      if (FPToUI == *((llvm::Value **)v4 + 19))
      {
        v58 = llvm::ConstantInt::get();
        v59 = (llvm::CmpInst **)*((_QWORD *)v4 + 19);
        v147 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 37, v59, v58, (uint64_t)&v144);
        v147 = 257;
        Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        FPToUI = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, Select, *(llvm::Type **)(a1 + 192));
      }
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)FPToUI);
  }
  if (v8)
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, *((_QWORD *)v4 + 25));
  v61 = *((_QWORD *)v4 + 27);
  if (v61)
  {
    v62 = *(_QWORD *)(a1 + 192);
    v147 = 257;
    v63 = a1 + 8;
LABEL_89:
    v64 = llvm::IRBuilderBase::CreateCast(v63, 38, v61, v62, (uint64_t)&v144);
LABEL_90:
    v65 = v64;
LABEL_91:
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v65);
    goto LABEL_92;
  }
  v82 = v4[40];
  switch(v82)
  {
    case 0:
      v83 = (llvm::Value *)*((_QWORD *)v4 + 21);
      v84 = *(llvm::Type **)(a1 + 152);
      v85 = (llvm::Type **)a1;
      goto LABEL_137;
    case 1:
      v86 = (llvm::Value *)*((_QWORD *)v4 + 21);
      if (v7 == 13)
      {
        v87 = *(llvm::Type **)(a1 + 192);
        if (*(_BYTE *)(*(_QWORD *)v86 + 8) != 13)
        {
          v147 = 257;
          v64 = llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), v86, v87, (const llvm::Twine *)&v144);
          goto LABEL_90;
        }
        v147 = 257;
        v63 = a1 + 8;
        v61 = (uint64_t)v86;
        v62 = (uint64_t)v87;
        goto LABEL_89;
      }
      v84 = *(llvm::Type **)(a1 + 152);
      v85 = (llvm::Type **)a1;
      v83 = (llvm::Value *)*((_QWORD *)v4 + 21);
LABEL_137:
      v64 = (uint64_t)AGCLLVMBuilder::truncateToSmall(v85, v83, v84);
      goto LABEL_90;
    case 2:
      if (*(_BYTE *)(a1 + 2216) && v10 == 2)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v125);
        v65 = (uint64_t)v124;
        goto LABEL_91;
      }
      v121 = v4[1];
      if (v121 > 3)
        v122 = 0;
      else
        v122 = dword_1C3E386B0[v121];
      AGCLLVMTargetLowerer::remapGradients(a1, (uint64_t)&v139, v125, v124, v122);
      break;
  }
LABEL_92:
  if (*((_QWORD *)v4 + 18))
  {
    v66 = (llvm::Value *)llvm::ConstantInt::get();
    v67 = v4[1];
    if (v67 <= 3)
    {
      v68 = 0;
      v69 = dword_1C3E386B0[v67];
      do
      {
        v147 = 257;
        v70 = (llvm::Value *)llvm::ConstantInt::get();
        v71 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v123, v70, (const llvm::Twine *)&v144);
        v147 = 257;
        v72 = (llvm::Value *)llvm::ConstantInt::get();
        Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v71, v72, (const llvm::Twine *)&v144);
        v147 = 257;
        v74 = (llvm::Value *)llvm::ConstantInt::get();
        v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Shl, v74, (const llvm::Twine *)&v144);
        v147 = 257;
        v66 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v66, v75, (const llvm::Twine *)&v144);
        ++v68;
      }
      while (v69 != v68);
    }
    v76 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v66, *(llvm::Type **)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v76);
  }
  v77 = *v4;
  if (*v4 == 4)
  {
    v78 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v78);
    v77 = *v4;
  }
  v79 = a3;
  if (v77 != 3)
  {
    v80 = (unsigned __int8 *)*((_QWORD *)v4 + 24);
    if (v80)
    {
      if (v80[16] <= 0x14u)
      {
        if ((llvm::Constant::isZeroValue(*((llvm::Constant **)v4 + 24)) & 1) != 0)
          goto LABEL_103;
        v80 = (unsigned __int8 *)*((_QWORD *)v4 + 24);
      }
      v81 = (uint64_t)AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, (llvm::Value *)v80, *(llvm::Type **)(a1 + 152));
      goto LABEL_116;
    }
LABEL_103:
    v81 = llvm::ConstantFP::get();
LABEL_116:
    v79 = v81;
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v79);
  v147 = 257;
  v88 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(a4 + 24), a4, (uint64_t)v139, v140, (uint64_t)&v144);
  if (*((_BYTE *)v4 + 256))
  {
    llvm::Attribute::get();
    llvm::Value::getContext(v88);
    *((_QWORD *)v88 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (*v4 != 3)
  {
    v137[0] = 0;
    v147 = 257;
    Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v88, (uint64_t)v137, 1, (uint64_t)&v144);
    if (v4[2] == 6)
    {
      v90 = (llvm::Value *)llvm::UndefValue::get();
      v147 = 257;
      v91 = (llvm::Value *)llvm::ConstantInt::get();
      v92 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v91, (const llvm::Twine *)&v144);
      v138 = 257;
      v93 = (llvm::Value *)llvm::ConstantInt::get();
      v94 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v90, v92, v93, (const llvm::Twine *)v137);
      v147 = 257;
      v95 = (llvm::Value *)llvm::ConstantInt::get();
      v96 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v95, (const llvm::Twine *)&v144);
      v138 = 257;
      v97 = (llvm::Value *)llvm::ConstantInt::get();
      v98 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v94, v96, v97, (const llvm::Twine *)v137);
      v99 = *(_QWORD *)(a1 + 208);
      v147 = 257;
      v100 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v98, v99, (uint64_t)&v144);
      llvm::FixedVectorType::get();
      v101 = (llvm::Value *)llvm::UndefValue::get();
      v147 = 257;
      v102 = (llvm::Value *)llvm::ConstantInt::get();
      v103 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v101, v100, v102, (const llvm::Twine *)&v144);
      v104 = (llvm::Value *)llvm::ConstantInt::get();
      v147 = 257;
      v105 = (llvm::Value *)llvm::ConstantInt::get();
      v106 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v103, v104, v105, (const llvm::Twine *)&v144);
      v147 = 257;
      v107 = (llvm::Value *)llvm::ConstantInt::get();
      v108 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v106, v104, v107, (const llvm::Twine *)&v144);
      v109 = llvm::ConstantInt::get();
      v147 = 257;
      v110 = (llvm::Value *)llvm::ConstantInt::get();
      v111 = (llvm::Value *)v109;
      v4 = v130;
      v112 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v108, v111, v110, (const llvm::Twine *)&v144);
    }
    else
    {
      if (!*((_BYTE *)v4 + 22))
        goto LABEL_125;
      v112 = (**(uint64_t (***)(uint64_t, llvm::Value *))a1)(a1, Value);
    }
    Value = (llvm::Value *)v112;
LABEL_125:
    if (*((_BYTE *)v4 + 21) && (*(_DWORD *)(*(_QWORD *)Value + 8) & 0xFE) == 0x12)
    {
      v147 = 257;
      v113 = (llvm::Value *)llvm::ConstantInt::get();
      Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v113, (const llvm::Twine *)&v144);
    }
    if (*((_BYTE *)v4 + 24))
    {
      v114 = *(_QWORD *)(a1 + 184);
      v144 = *(_BYTE **)Value;
      v145 = v114;
      llvm::StructType::get();
      v115 = llvm::UndefValue::get();
      v137[0] = 0;
      v147 = 257;
      InsertValue = llvm::IRBuilderBase::CreateInsertValue(a1 + 8, v115, (uint64_t)Value, (uint64_t)v137, 1, (uint64_t)&v144);
      v132 = 1;
      v147 = 257;
      v117 = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v88, (uint64_t)&v132, 1, (uint64_t)&v144);
      v118 = *(_QWORD *)(a1 + 184);
      v138 = 257;
      v119 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v117, v118, (uint64_t)v137);
      v131 = 1;
      v143 = 257;
      v88 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertValue(a1 + 8, InsertValue, v119, (uint64_t)&v131, 1, (uint64_t)v142);
    }
    else
    {
      v88 = Value;
    }
  }
  if (v139 != v141)
    free(v139);
  return v88;
}

uint64_t llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 344))(*(_QWORD *)(a1 + 72), a2, a3, a4);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v8, a5);
  }
  else
  {
    v8 = llvm::User::operator new((llvm::User *)0x60);
    llvm::ExtractValueInst::getIndexedType();
    llvm::Instruction::Instruction();
    if (*(_QWORD *)(v8 - 32))
    {
      **(_QWORD **)(v8 - 16) = *(_QWORD *)(v8 - 24);
      v10 = *(_QWORD *)(v8 - 24);
      if (v10)
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 - 16);
    }
    *(_QWORD *)(v8 - 32) = a2;
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(v8 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v8 - 24;
    *(_QWORD *)(v8 - 16) = v12;
    *v12 = v8 - 32;
    *(_QWORD *)(v8 + 64) = v8 + 80;
    *(_QWORD *)(v8 + 72) = 0x400000000;
    llvm::ExtractValueInst::init();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v8;
}

uint64_t llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 352))(*(_QWORD *)(a1 + 72));
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v8, a6);
  }
  else
  {
    v8 = llvm::InsertValueInst::Create();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)a1;
      v12 = v11 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t llvm::InsertValueInst::Create()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::User::operator new((llvm::User *)0x60);
  v1 = llvm::Instruction::Instruction();
  *(_QWORD *)(v1 + 64) = v1 + 80;
  *(_QWORD *)(v1 + 72) = 0x400000000;
  llvm::InsertValueInst::init();
  return v0;
}

uint64_t AGCLLVMUserObject::buildSamplerArgumentPointer(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  const char *Value;
  uint64_t v8;
  BOOL v9;
  llvm::Type **DirectImageGlobalValue;
  llvm::Value *v11;
  llvm::Type **PHI;
  llvm::Type **v13;
  uint64_t v14;
  llvm::Type *v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *Cast;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::IRBuilderBase *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::BasicBlock *v41;
  llvm::BasicBlock *v42;
  llvm::BasicBlock *v43;
  uint64_t v44;
  llvm::Instruction *v45;
  uint64_t v46;
  llvm::Instruction *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value *v56;
  llvm::IRBuilderBase *v57;
  llvm::Value *v58;
  llvm::CmpInst **v59;
  uint64_t v60;
  uint64_t ICmp;
  uint64_t v62;
  llvm::Value *v63;
  uint64_t v64;
  llvm::Value *v65;
  uint64_t v66;
  uint64_t FirstInsertionPt;
  llvm::IRBuilderBase *v68;
  llvm::Type *v69;
  _QWORD v70[4];
  __int16 v71;
  uint64_t *TypeAllocSize;
  llvm::Value *v73;
  __int16 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v9 = MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v6)) != 0
    && *Value != 48
    && atoi(Value)
    || (v8 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400), *(_DWORD *)(v8 + 1780))
    || *(_BYTE *)(v8 + 1772) == 0;
  DirectImageGlobalValue = (llvm::Type **)AGCLLVMUserObject::getDirectImageGlobalValue(a2, (llvm::Value *)v6);
  if (DirectImageGlobalValue)
  {
    PHI = DirectImageGlobalValue;
    if (*((_BYTE *)*DirectImageGlobalValue + 8) != 13)
    {
      if (*((_BYTE *)DirectImageGlobalValue + 16) == 9)
        v13 = DirectImageGlobalValue;
      else
        v13 = 0;
      PHI = (llvm::Type **)*(&v13[4 * a3] - 4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    }
    if (a3 != 2)
      return (uint64_t)PHI;
    v14 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v71 = 257;
    v15 = AGCLLVMBuilder::tryDeducePointeeType(PHI, v11);
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v15, (uint64_t)PHI, 0, (uint64_t)v70);
  }
  if (*((_BYTE *)a1 + 15))
  {
    v17 = !v9;
    if (a3 != 2)
      v17 = 0;
    if (!v17)
    {
      v18 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v19 = v18 + 40;
      v20 = v18 + 32;
      if (a3 != 2)
      {
        v21 = llvm::PointerType::get();
        v71 = 257;
        v22 = v19;
        v23 = 50;
LABEL_43:
        v49 = a2;
        return llvm::IRBuilderBase::CreateCast(v22, v23, v49, v21, (uint64_t)v70);
      }
      v21 = *(_QWORD *)(v20 + 208);
      v71 = 257;
      v22 = v19;
LABEL_42:
      v23 = 47;
      goto LABEL_43;
    }
  }
  v24 = *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(*(uint64_t *)((char *)a1 + v24 + 400) + 1780))
  {
    if (!a1[309])
      AGCLLVMUserObject::createSamplerHeapGlobal((AGCLLVMUserObject *)a1);
    if (a3 != 2)
    {
      if (a3 == 3)
      {
        v25 = (uint64_t *)a1[255];
        v26 = a1[259];
        v27 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
        v28 = *(_QWORD *)(v27 + 224);
        v71 = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v27 + 40, 47, a2, v28, (uint64_t)v70);
        v30 = *a1;
        if (*((_BYTE *)a1 + 3696))
        {
          v31 = (uint64_t)a1 + *(_QWORD *)(v30 - 24);
          v32 = *(_QWORD *)(v31 + 400);
          if (!*(_DWORD *)(v32 + 1780))
          {
            v33 = (llvm::IRBuilderBase *)(v31 + 40);
            TypeAllocSize = (uint64_t *)llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), *(llvm::Type **)(v32 + 1680));
            v73 = v34;
            llvm::TypeSize::operator unsigned long long();
            v35 = (llvm::Value *)llvm::ConstantInt::get();
            v71 = 257;
            Cast = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v33, Cast, v35, (const llvm::Twine *)v70);
            v30 = *a1;
          }
        }
        v36 = (uint64_t)a1 + *(_QWORD *)(v30 - 24);
        TypeAllocSize = (uint64_t *)llvm::ConstantInt::get();
        v73 = Cast;
        v71 = 257;
        return llvm::IRBuilderBase::CreateGEP(v36 + 40, v26, v25, &TypeAllocSize, 2, (uint64_t)v70);
      }
      v50 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v51 = a1[309];
      v21 = llvm::PointerType::get();
      v71 = 257;
      v22 = v50;
      v23 = 49;
      v49 = v51;
      return llvm::IRBuilderBase::CreateCast(v22, v23, v49, v21, (uint64_t)v70);
    }
    v48 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v22 = v48 + 40;
    v21 = *(_QWORD *)(v48 + 240);
    v71 = 257;
    goto LABEL_42;
  }
  v37 = &a1[8 * (unint64_t)a3];
  v38 = v37[231];
  v39 = v37[263];
  if (v38)
  {
    if (v39)
    {
      v40 = *(uint64_t *)((char *)a1 + v24 + 88);
      v41 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
      v42 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v70[0] = "constant_sampler";
      v71 = 259;
      v43 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v44 = *(_QWORD *)(v40 + 40);
      if (v44 == v40 + 40)
      {
        v47 = 0;
      }
      else
      {
        v45 = (llvm::Instruction *)(v44 - 24);
        if (v44)
          v46 = v44 - 24;
        else
          v46 = 0;
        if (*(unsigned __int8 *)(v46 + 16) - 29 >= 0xB)
          v47 = 0;
        else
          v47 = v45;
      }
      llvm::Instruction::eraseFromParent(v47);
      v53 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      *(_QWORD *)(v53 + 88) = v40;
      *(_QWORD *)(v53 + 96) = v40 + 40;
      v54 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v55 = *(_QWORD *)(v54 + 240);
      v71 = 257;
      v56 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v54 + 40, 47, a2, v55, (uint64_t)v70);
      v57 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v58 = (llvm::Value *)llvm::ConstantInt::get();
      v71 = 257;
      v59 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v57, v56, v58, (const llvm::Twine *)v70);
      v60 = llvm::ConstantInt::get();
      v74 = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v57, 32, v59, v60, (uint64_t)&TypeAllocSize);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), ICmp, (uint64_t)v42, (uint64_t)v43);
      v62 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      *(_QWORD *)(v62 + 88) = v42;
      *(_QWORD *)(v62 + 96) = (char *)v42 + 40;
      v63 = (llvm::Value *)AGCLLVMUserObject::buildNonConstantSamplerArgumentPointer(a1, a2, a3);
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), v41);
      v64 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      *(_QWORD *)(v64 + 88) = v43;
      *(_QWORD *)(v64 + 96) = (char *)v43 + 40;
      v65 = (llvm::Value *)AGCLLVMUserObject::buildConstantSamplerArgumentPointer(a1, a2, a3);
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), v41);
      v66 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v41);
      llvm::IRBuilderBase::SetInsertPoint(v66, (uint64_t)v41, FirstInsertionPt);
      v68 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v69 = *(llvm::Type **)v63;
      v71 = 257;
      PHI = (llvm::Type **)llvm::IRBuilderBase::CreatePHI(v68, v69, 2, (const llvm::Twine *)v70);
      llvm::PHINode::addIncoming(PHI, v63, v42);
      llvm::PHINode::addIncoming(PHI, v65, v43);
      return (uint64_t)PHI;
    }
  }
  else if (v39)
  {
    return AGCLLVMUserObject::buildConstantSamplerArgumentPointer(a1, a2, a3);
  }
  return AGCLLVMUserObject::buildNonConstantSamplerArgumentPointer(a1, a2, a3);
}

uint64_t AGCLLVMUserObject::buildImageArgumentPointer(_BYTE *a1, AGCLLVMUserObject *this, unsigned int a3)
{
  uint64_t DirectImageGlobalValue;
  llvm::Value *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned __int8 *UDiv;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  llvm::IRBuilderBase *v23;
  unsigned __int8 *v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD v35[20];
  _BYTE v36[32];
  __int16 v37;
  uint64_t *TypeAllocSize;
  unsigned __int8 *v39;
  __int16 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  DirectImageGlobalValue = AGCLLVMUserObject::getDirectImageGlobalValue((uint64_t)this, this);
  if (DirectImageGlobalValue)
    return *(_QWORD *)(DirectImageGlobalValue - 32 * (*(_DWORD *)(DirectImageGlobalValue + 20) & 0x7FFFFFF) + 32 * a3);
  if (a3 <= 7)
  {
    v8 = (llvm::Value *)AGCLLVMUserObject::buildBindlessIndex((AGCLLVMUserObject *)a1, this);
    if (v8)
      return AGCLLVMUserObject::buildBindlessImageArgumentPointer(a1, v8, a3);
  }
  v9 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (!*(_BYTE *)(*(_QWORD *)&a1[v9 + 400] + 1755) && (a3 > 8 || ((1 << a3) & 0x103) == 0))
  {
    v8 = (llvm::Value *)AGCLLVMUserObject::buildImageHeapIndex((AGCLLVMUserObject *)a1, this);
    return AGCLLVMUserObject::buildBindlessImageArgumentPointer(a1, v8, a3);
  }
  v10 = (unint64_t)&a1[64 * (unint64_t)a3 + 1192];
  v11 = *(uint64_t **)(v10 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 48);
    v13 = *(_QWORD *)&a1[v9 + 232];
    v37 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&a1[v9 + 40], 47, (uint64_t)this, v13, (uint64_t)v36);
    if (a3 == 1)
    {
      v15 = (llvm::IRBuilderBase *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v16 = (llvm::Value *)llvm::ConstantInt::get();
      v37 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v15, Cast, v16, (const llvm::Twine *)v36);
    }
    v17 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
    v18 = *((_QWORD *)v17 + 28);
    v37 = 257;
    UDiv = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)(v17 + 40), 38, (uint64_t)Cast, v18, (uint64_t)v36);
    v20 = *(_QWORD *)a1;
    if (a1[3566])
    {
      v21 = &a1[*(_QWORD *)(v20 - 24)];
      v22 = *((_QWORD *)v21 + 50);
      if (!*(_DWORD *)(v22 + 1780))
      {
        v23 = (llvm::IRBuilderBase *)(v21 + 40);
        TypeAllocSize = (uint64_t *)llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 232), *(llvm::Type **)(v22 + 1672));
        v39 = v24;
        llvm::TypeSize::operator unsigned long long();
        v25 = (llvm::Value *)llvm::ConstantInt::get();
        v37 = 257;
        UDiv = (unsigned __int8 *)llvm::IRBuilderBase::CreateUDiv(v23, (llvm::Value *)UDiv, v25, (const llvm::Twine *)v36);
        v20 = *(_QWORD *)a1;
      }
    }
    v26 = (uint64_t)&a1[*(_QWORD *)(v20 - 24) + 32];
    if (a3 > 1 || UDiv[16] < 0x15u)
    {
      TypeAllocSize = (uint64_t *)llvm::ConstantInt::get();
      v39 = UDiv;
      v37 = 257;
      return llvm::IRBuilderBase::CreateGEP(v26 + 8, v12, v11, &TypeAllocSize, 2, (uint64_t)v36);
    }
    else
    {
      v27 = llvm::PointerType::get();
      v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], (uint64_t)"llvm.agx.textureState", 21, v27, v27, *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 240]);
      v29 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v37 = 257;
      v41[0] = llvm::IRBuilderBase::CreateCast(v29, 49, (uint64_t)v11, v27, (uint64_t)v36);
      v30 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v31 = *((_QWORD *)v30 + 30);
      v40 = 257;
      v41[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(v30 + 40), 39, (uint64_t)UDiv, v31, (uint64_t)&TypeAllocSize);
      v35[16] = 257;
      v32 = llvm::IRBuilderBase::CreateCall(v29, *(_QWORD *)(v28 + 24), v28, (uint64_t)v41, 2, (uint64_t)v35);
      v33 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v34 = llvm::PointerType::get();
      v37 = 257;
      return llvm::IRBuilderBase::CreateCast(v33, 49, (uint64_t)v32, v34, (uint64_t)v36);
    }
  }
  else
  {
    llvm::PointerType::get();
    return llvm::UndefValue::get();
  }
}

uint64_t AGCLLVMUserObject::getDirectImageGlobalValue(uint64_t this, llvm::Value *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t *v5;

  if (!this)
    return this;
  v2 = this;
  while (1)
  {
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 <= 0x1B)
      break;
    if (v3 != 77)
      return 0;
LABEL_8:
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(uint64_t **)(v2 - 8);
    else
      v5 = (uint64_t *)(v2 - 32 * (v4 & 0x7FFFFFF));
    v2 = *v5;
    if (!*v5)
      return 0;
  }
  if (v3 == 5)
  {
    if (*(_WORD *)(v2 + 18) != 49)
      return 0;
    goto LABEL_8;
  }
  if (v3 != 3 || (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v2) & 1) != 0)
    return 0;
  return *(_QWORD *)(v2 - 32);
}

uint64_t AGCLLVMUserObject::buildBindlessIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  const void **imp;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v10;
  __int16 v11;

  imp = llvm::SmallPtrSetImplBase::find_imp((AGCLLVMUserObject *)((char *)this + 1000), a2);
  v5 = *((_QWORD *)this + 126);
  v6 = 1016;
  if (v5 == *((_QWORD *)this + 125))
    v6 = 1020;
  if (imp == (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v6)))
    return 0;
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = *((_QWORD *)v7 + 29);
  v10 = "bindless_index";
  v11 = 259;
  return llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 47, (uint64_t)a2, v8, (uint64_t)&v10);
}

const void **llvm::SmallPtrSetImplBase::find_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  const void **v4;
  const void **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (const void **)*((_QWORD *)this + 1);
  if (v4 == *(const void ***)this)
  {
    v8 = *((unsigned int *)this + 5);
    result = &v4[v8];
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      while (*v4 != a2)
      {
        ++v4;
        v9 -= 8;
        if (!v9)
          return result;
      }
      return v4;
    }
  }
  else
  {
    result = (const void **)llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2)
    {
      v6 = *((_QWORD *)this + 1);
      v7 = 16;
      if (v6 == *(_QWORD *)this)
        v7 = 20;
      return (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  return result;
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t llvm::IRBuilderBase::CreateCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v8;

  v5 = a3;
  if (*(_QWORD *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      v5 = llvm::CastInst::Create();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
    }
    else
    {
      v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 224))(*(_QWORD *)(a1 + 72), a2, a3, a4);
      if (v5)
        v8 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
    }
  }
  return v5;
}

uint64_t llvm::IRBuilderBase::Insert<llvm::Instruction>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateLShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 160))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateAlignedLoad(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
  v11 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v11)
  {
    v12 = *a1;
    v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t AGCLLVMGen5TargetLowerer::adjustToMip(AGCLLVMGen5TargetLowerer *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v3;
  llvm::Constant **LShr;
  llvm::Type *v5;
  uint64_t NullValue;
  _BYTE v8[32];
  __int16 v9;

  v3 = (uint64_t *)((char *)this + 8);
  v9 = 257;
  LShr = (llvm::Constant **)llvm::IRBuilderBase::CreateLShr((AGCLLVMGen5TargetLowerer *)((char *)this + 8), a2, a3, (const llvm::Twine *)v8);
  v9 = 257;
  NullValue = llvm::Constant::getNullValue(*LShr, v5);
  llvm::IRBuilderBase::CreateICmp(v3, 33, LShr, NullValue, (uint64_t)v8);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t llvm::IRBuilderBase::CreateICmp(uint64_t *a1, uint64_t a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  llvm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 40))(a1[9]);
  if (!v8)
  {
    v8 = llvm::User::operator new((llvm::User *)0x40);
    llvm::CmpInst::makeCmpResultType(*a3, v9);
    llvm::CmpInst::CmpInst();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = v11 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  int v3;
  uint64_t result;

  v3 = *((_DWORD *)this + 2);
  result = llvm::Type::getInt1Ty(*(llvm::Type **)this, a2);
  if (this)
  {
    if ((v3 & 0xFE) == 0x12)
      return llvm::VectorType::get();
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateGEP(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t v9;
  uint64_t *v11;
  llvm::Value *v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)a4;
  v12 = a4;
  v9 = (*(uint64_t (**)(_QWORD, llvm::Type *, llvm::Value *, llvm::Value **, uint64_t, _QWORD))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), a2, a3, &v12, 1, 0);
  if (!v9)
  {
    v13 = 257;
    v9 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v9, (uint64_t)a5);
  }
  return v9;
}

uint64_t llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;

  v8 = llvm::User::operator new((llvm::User *)0x50);
  v9 = *a2;
  v10 = *(_DWORD *)(*a2 + 8);
  if ((v10 & 0xFE) == 0x12)
  {
    v9 = **(_QWORD **)(v9 + 16);
    v10 = *(_DWORD *)(v9 + 8);
  }
  v11 = (llvm::LLVMContext *)(v10 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(_QWORD *)(v9 + 24))
    llvm::PointerType::get();
  else
    llvm::PointerType::get(*(llvm::PointerType **)v9, v11);
  if (*a2 && (*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
LABEL_16:
    llvm::VectorType::get();
    goto LABEL_17;
  }
  if (a4)
  {
    v12 = 8 * a4;
    v13 = a3;
    do
    {
      v14 = **v13;
      if (v14 && (*(_DWORD *)(v14 + 8) & 0xFE) == 18)
        goto LABEL_16;
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
LABEL_17:
  llvm::Instruction::Instruction();
  *(_QWORD *)(v8 + 64) = a1;
  *(_QWORD *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

uint64_t llvm::IRBuilderBase::CreateAlignedStore(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  v14 = 257;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t AGCLLVMG16PB0TargetLowerer::extractBaseLevel(AGCLLVMG16PB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16PB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

llvm::Value *AGCLLVMBuilder::f32Extend(AGCLLVMBuilder *this, llvm::Value *a2, int a3)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::Type *v6;
  unsigned int v8;
  llvm::IRBuilderBase *v9;
  _BYTE v12[32];
  __int16 v13;

  v4 = a2;
  v5 = *(_QWORD *)a2;
  v6 = (llvm::Type *)*((_QWORD *)this + 21);
  if (*(llvm::Type **)a2 != v6)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      v6 = (llvm::Type *)llvm::FixedVectorType::get();
      v8 = *(unsigned __int8 *)(v5 + 8);
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 8);
    }
    if ((v8 & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v5 + 16) + 8);
    v9 = (AGCLLVMBuilder *)((char *)this + 8);
    if (v8 > 6)
    {
      v13 = 257;
      if (a3)
        return (llvm::Value *)llvm::IRBuilderBase::CreateSIToFP(v9, v4, v6, (const llvm::Twine *)v12);
      else
        return (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v9, v4, v6, (const llvm::Twine *)v12);
    }
    else
    {
      v13 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v9, v4, v6, (const llvm::Twine *)v12);
    }
  }
  return v4;
}

llvm::Value *AGCLLVMBuilder::coerceSampleType(_QWORD *a1, llvm::Value *a2, int a3)
{
  llvm::Value *v3;
  llvm::Type *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Cast;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  _BYTE v15[32];
  __int16 v16;

  v3 = a2;
  v5 = *(llvm::Type **)a2;
  switch(a3)
  {
    case 1:
      v11 = 19;
      if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
        v11 = 35;
      v12 = (llvm::Type *)a1[v11];
      v16 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), a2, v12, (const llvm::Twine *)v15);
    case 3:
    case 7:
      v6 = (uint64_t)(a1 + 1);
      v7 = a1[39];
      v16 = 257;
      goto LABEL_9;
    case 4:
    case 8:
      if (llvm::Type::getScalarSizeInBits(v5) == 32)
      {
        v8 = a1[39];
        v16 = 257;
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)v3, v8, (uint64_t)v15);
        v7 = a1[38];
        v16 = 257;
        v6 = (uint64_t)(a1 + 1);
        v10 = 38;
      }
      else
      {
        v7 = a1[38];
        v16 = 257;
        v6 = (uint64_t)(a1 + 1);
LABEL_9:
        v10 = 49;
        Cast = (uint64_t)v3;
      }
      return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6, v10, Cast, v7, (uint64_t)v15);
    default:
      return v3;
  }
}

llvm::Value *AGCLLVMBuilder::truncateToSmall(llvm::Type **this, llvm::Value *a2, llvm::Type *a3)
{
  llvm::Type *v3;
  llvm::Value *v4;
  unsigned int v6;
  llvm::IRBuilderBase *v7;
  _BYTE v10[32];
  __int16 v11;

  v3 = a3;
  v4 = a2;
  if (this[19] == a3 || this[24] == a3 || this[23] == a3)
  {
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v3 = (llvm::Type *)llvm::FixedVectorType::get();
    if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12)
      v6 = *(unsigned __int8 *)(**((_QWORD **)v3 + 2) + 8);
    else
      v6 = *((_DWORD *)v3 + 2);
    v7 = (llvm::IRBuilderBase *)(this + 1);
    v11 = 257;
    if (v6 > 6)
      return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v7, 38, (uint64_t)v4, (uint64_t)v3, (uint64_t)v10);
    else
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v7, v4, v3, (const llvm::Twine *)v10);
  }
  return v4;
}

_QWORD *AGCLLVMGen3TargetLowerer::getWriteSuffix(AGCLLVMGen3TargetLowerer *this, llvm::Type *a2, uint64_t a3)
{
  char *v3;

  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  if (*((_QWORD *)a2 + 24) == a3)
  {
    v3 = "i16";
  }
  else if (*((_QWORD *)a2 + 25) == a3)
  {
    v3 = "i32";
  }
  else if (*((_QWORD *)a2 + 19) == a3)
  {
    v3 = "f16";
  }
  else
  {
    v3 = "f32";
  }
  return std::string::basic_string[abi:nn180100]<0>(this, v3);
}

uint64_t iterateResourceUsers(llvm::Constant *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t i;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!this)
    return 1;
  v4 = *((_QWORD *)this + 1);
  while (v4)
  {
    v15 = v19;
    v16 = v19;
    v17 = 4;
    v18 = 0;
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 24);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 5;
    else
      v7 = 0;
    if (v7)
    {
      for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, (llvm::SmallPtrSetImplBase *)&v15, *(void **)(i + 24));
    }
    else
    {
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, (llvm::SmallPtrSetImplBase *)&v15, (void *)v6);
    }
    v9 = (_QWORD *)a2[3];
    if (v9)
    {
      if (v9 == a2)
      {
        v21 = v20;
        (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v20);
      }
      else
      {
        v21 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
      }
    }
    else
    {
      v21 = 0;
    }
    v10 = iterateResourceUsers(&v15, (uint64_t)v20);
    v11 = v21;
    if (v21 == v20)
    {
      v11 = v20;
      v12 = 4;
      goto LABEL_20;
    }
    if (v21)
    {
      v12 = 5;
LABEL_20:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    if (v16 != v15)
      free(v16);
    v4 = v5;
    if ((v10 & 1) == 0)
      return 0;
  }
  llvm::Constant::removeDeadConstantUsers(this);
  return 1;
}

_QWORD *llvm::SmallPtrSetImpl<llvm::Function *>::insert(uint64_t a1, llvm::SmallPtrSetImplBase *this, void *a3)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = llvm::SmallPtrSetImplBase::insert_imp(this, a3);
  v7 = *((_QWORD *)this + 1);
  v8 = 16;
  if (v7 == *(_QWORD *)this)
    v8 = 20;
  v9 = (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)this + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        result = v9;
        break;
      }
    }
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

_QWORD *llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
    return (_QWORD *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  v5 = *((unsigned int *)this + 5);
  if (!(_DWORD)v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5) = a2;
      return (_QWORD *)(*(_QWORD *)this + 8 * v5);
    }
    return (_QWORD *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  v6 = 0;
  v7 = 8 * v5;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2)
      v6 = v3;
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_12;
      *v6 = a2;
      --*((_DWORD *)this + 6);
      return v6;
    }
  }
  return v3;
}

uint64_t iterateResourceUsers(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;

  v3 = a1[1];
  if (v3 == *a1)
    v4 = (unsigned int *)a1 + 5;
  else
    v4 = (unsigned int *)(a1 + 2);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = (uint64_t *)a1[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return 1;
    }
  }
  else
  {
    i = (uint64_t *)a1[1];
  }
  v8 = (uint64_t *)(v3 + 8 * v5);
  if (i == v8)
    return 1;
  v9 = *i;
  do
  {
    v13 = v9;
    v10 = *(_QWORD *)(a2 + 24);
    if (!v10)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x1C3C6C518);
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13);
    ++i;
    if ((_DWORD)result)
      v12 = i == v8;
    else
      v12 = 1;
    if (v12)
      break;
    while (1)
    {
      v9 = *i;
      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        break;
      if (++i == v8)
        return 1;
    }
  }
  while (i != v8);
  return result;
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = v4 + 16;
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v16;
    if (v9 >= v16)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16)
LABEL_12:
    v8 = v6;
  v12 = *(_QWORD *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    v13 = ((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

AGCArgumentBuffer::Resource::Bounds *AGCArgumentBuffer::Resource::Bounds::Bounds(AGCArgumentBuffer::Resource::Bounds *this, llvm::Constant *a2)
{
  uint64_t AggregateElement;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  AggregateElement = llvm::Constant::getAggregateElement(a2);
  v5 = llvm::Constant::getAggregateElement(a2);
  v6 = (_QWORD *)(AggregateElement + 24);
  if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
    v6 = (_QWORD *)*v6;
  *(_DWORD *)this = *v6;
  v7 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v7 = (_QWORD *)*v7;
  *((_DWORD *)this + 1) = *v7;
  return this;
}

double std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = a2;
  v6 = a3;
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 48))(a1, &v7, &v6);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    *(_QWORD *)&result = std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(v4, v5).n128_u64[0];
  }
  return result;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB82B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void IntervalMap<unsigned int>::insert(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  char *v55;
  _QWORD *v56;
  uint64_t *v57;

  v4 = a2;
  v6 = HIDWORD(a2);
  v8 = (uint64_t **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v22 = (_QWORD **)(a1 + 8);
    goto LABEL_119;
  }
  v9 = (_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  do
  {
    v11 = *(_DWORD *)(v10 + 32);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (uint64_t *)v10;
    else
      v13 = (uint64_t *)(v10 + 8);
    if (v12)
      v9 = (_QWORD *)v10;
    v10 = *v13;
  }
  while (*v13);
  v14 = (_QWORD *)(a1 + 16);
  do
  {
    v15 = *(_DWORD *)(v7 + 28);
    v16 = v15 > HIDWORD(a2);
    if (v15 <= HIDWORD(a2))
      v17 = (uint64_t *)(v7 + 8);
    else
      v17 = (uint64_t *)v7;
    if (v16)
      v14 = (_QWORD *)v7;
    v7 = *v17;
  }
  while (*v17);
  if (v9 == v14)
  {
    v14 = v9;
  }
  else
  {
    v18 = v9;
    do
    {
      v19 = *((_DWORD *)v18 + 8);
      if (*((_DWORD *)v18 + 7) < v4)
        v4 = *((_DWORD *)v18 + 7);
      if (v6 <= v19)
        v6 = v19;
      else
        v6 = v6;
      (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, a3, *((unsigned int *)v18 + 9));
      v20 = (_QWORD *)v18[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v18[2];
          v46 = *v21 == (_QWORD)v18;
          v18 = v21;
        }
        while (!v46);
      }
      v18 = v21;
    }
    while (v21 != v14);
  }
  v22 = (_QWORD **)(a1 + 8);
  if (v9 == v14)
    goto LABEL_118;
  do
  {
    v23 = v9;
    v24 = (_QWORD *)v9[1];
    v25 = v9;
    if (v24)
    {
      do
      {
        v9 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v25[2];
        v46 = *v9 == (_QWORD)v25;
        v25 = v9;
      }
      while (!v46);
    }
    if (*v22 == v23)
      *v22 = v9;
    v26 = *(_QWORD **)(a1 + 16);
    --*(_QWORD *)(a1 + 24);
    v27 = *v23;
    v28 = v23;
    if (*v23)
    {
      v29 = (_QWORD *)v23[1];
      if (!v29)
      {
        v28 = v23;
LABEL_47:
        v30 = 0;
        *(_QWORD *)(v27 + 16) = v28[2];
        goto LABEL_48;
      }
      do
      {
        v28 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
    v27 = v28[1];
    if (v27)
      goto LABEL_47;
    v30 = 1;
LABEL_48:
    v31 = (_QWORD *)v28[2];
    v32 = (_QWORD *)*v31;
    if ((_QWORD *)*v31 == v28)
    {
      *v31 = v27;
      if (v28 == v26)
      {
        v32 = 0;
        v26 = (_QWORD *)v27;
      }
      else
      {
        v32 = (_QWORD *)v31[1];
      }
    }
    else
    {
      v31[1] = v27;
    }
    v33 = *((unsigned __int8 *)v28 + 24);
    if (v28 != v23)
    {
      v34 = v23[2];
      v28[2] = v34;
      *(_QWORD *)(v34 + 8 * (*(_QWORD *)v23[2] != (_QWORD)v23)) = v28;
      v36 = *v23;
      v35 = v23[1];
      *(_QWORD *)(v36 + 16) = v28;
      *v28 = v36;
      v28[1] = v35;
      if (v35)
        *(_QWORD *)(v35 + 16) = v28;
      *((_BYTE *)v28 + 24) = *((_BYTE *)v23 + 24);
      if (v26 == v23)
        v26 = v28;
    }
    if (!v33 || !v26)
      goto LABEL_112;
    if (!v30)
    {
      *(_BYTE *)(v27 + 24) = 1;
      goto LABEL_112;
    }
    while (1)
    {
      v37 = v32[2];
      if (*(_QWORD **)v37 != v32)
        break;
      if (!*((_BYTE *)v32 + 24))
      {
        *((_BYTE *)v32 + 24) = 1;
        *(_BYTE *)(v37 + 24) = 0;
        v43 = v32[1];
        *(_QWORD *)v37 = v43;
        if (v43)
          *(_QWORD *)(v43 + 16) = v37;
        v32[2] = *(_QWORD *)(v37 + 16);
        *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v32;
        v32[1] = v37;
        *(_QWORD *)(v37 + 16) = v32;
        if (v26 == (_QWORD *)v37)
          v26 = v32;
        v32 = *(_QWORD **)v37;
      }
      v44 = (_BYTE *)*v32;
      if (*v32 && !v44[24])
        goto LABEL_107;
      v45 = (uint64_t *)v32[1];
      if (v45 && !*((_BYTE *)v45 + 24))
      {
        if (v44 && !v44[24])
        {
LABEL_107:
          v45 = v32;
        }
        else
        {
          *((_BYTE *)v45 + 24) = 1;
          *((_BYTE *)v32 + 24) = 0;
          v51 = *v45;
          v32[1] = *v45;
          if (v51)
            *(_QWORD *)(v51 + 16) = v32;
          v45[2] = v32[2];
          *(_QWORD *)(v32[2] + 8 * (*(_QWORD *)v32[2] != (_QWORD)v32)) = v45;
          *v45 = (uint64_t)v32;
          v32[2] = v45;
          v44 = v32;
        }
        v48 = v45[2];
        *((_BYTE *)v45 + 24) = *(_BYTE *)(v48 + 24);
        *(_BYTE *)(v48 + 24) = 1;
        v44[24] = 1;
        v49 = *(uint64_t **)v48;
        v52 = *(_QWORD *)(*(_QWORD *)v48 + 8);
        *(_QWORD *)v48 = v52;
        if (v52)
          *(_QWORD *)(v52 + 16) = v48;
        v49[2] = *(_QWORD *)(v48 + 16);
        *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v49;
        v49[1] = v48;
        goto LABEL_111;
      }
      *((_BYTE *)v32 + 24) = 0;
      v42 = (_BYTE *)v32[2];
      if (v42[24])
        v46 = v42 == (_BYTE *)v26;
      else
        v46 = 1;
      if (v46)
        goto LABEL_92;
LABEL_89:
      v32 = *(_QWORD **)(*((_QWORD *)v42 + 2) + 8 * (**((_QWORD **)v42 + 2) == (_QWORD)v42));
    }
    if (!*((_BYTE *)v32 + 24))
    {
      *((_BYTE *)v32 + 24) = 1;
      *(_BYTE *)(v37 + 24) = 0;
      v38 = *(uint64_t **)(v37 + 8);
      v39 = *v38;
      *(_QWORD *)(v37 + 8) = *v38;
      if (v39)
        *(_QWORD *)(v39 + 16) = v37;
      v38[2] = *(_QWORD *)(v37 + 16);
      *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v38;
      *v38 = v37;
      *(_QWORD *)(v37 + 16) = v38;
      if (v26 == (_QWORD *)*v32)
        v26 = v32;
      v32 = *(_QWORD **)(*v32 + 8);
    }
    v40 = (_QWORD *)*v32;
    if (!*v32 || *((_BYTE *)v40 + 24))
    {
      v41 = (_QWORD *)v32[1];
      if (v41 && !*((_BYTE *)v41 + 24))
        goto LABEL_98;
      *((_BYTE *)v32 + 24) = 0;
      v42 = (_BYTE *)v32[2];
      if (v42 == (_BYTE *)v26)
      {
        v42 = v26;
LABEL_92:
        v42[24] = 1;
        goto LABEL_112;
      }
      if (!v42[24])
        goto LABEL_92;
      goto LABEL_89;
    }
    v41 = (_QWORD *)v32[1];
    if (v41 && !*((_BYTE *)v41 + 24))
    {
LABEL_98:
      v40 = v32;
    }
    else
    {
      *((_BYTE *)v40 + 24) = 1;
      *((_BYTE *)v32 + 24) = 0;
      v47 = v40[1];
      *v32 = v47;
      if (v47)
        *(_QWORD *)(v47 + 16) = v32;
      v40[2] = v32[2];
      *(_QWORD *)(v32[2] + 8 * (*(_QWORD *)v32[2] != (_QWORD)v32)) = v40;
      v40[1] = v32;
      v32[2] = v40;
      v41 = v32;
    }
    v48 = v40[2];
    *((_BYTE *)v40 + 24) = *(_BYTE *)(v48 + 24);
    *(_BYTE *)(v48 + 24) = 1;
    *((_BYTE *)v41 + 24) = 1;
    v49 = *(uint64_t **)(v48 + 8);
    v50 = *v49;
    *(_QWORD *)(v48 + 8) = *v49;
    if (v50)
      *(_QWORD *)(v50 + 16) = v48;
    v49[2] = *(_QWORD *)(v48 + 16);
    *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v49;
    *v49 = v48;
LABEL_111:
    *(_QWORD *)(v48 + 16) = v49;
LABEL_112:
    operator delete(v23);
  }
  while (v9 != v14);
LABEL_118:
  while (1)
  {
    v53 = *v8;
    if (!*v8)
      break;
    while (1)
    {
      v8 = (uint64_t **)v53;
      if (v6 < *((_DWORD *)v53 + 7))
        break;
      if (*((_DWORD *)v53 + 8) >= v4)
        return;
      v54 = (uint64_t **)(v53 + 1);
      v53 = (uint64_t *)v53[1];
      if (!v53)
        goto LABEL_120;
    }
  }
LABEL_119:
  v54 = v8;
LABEL_120:
  v55 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v55 + 28) = v4 | (v6 << 32);
  *((_DWORD *)v55 + 9) = a3;
  *(_QWORD *)v55 = 0;
  *((_QWORD *)v55 + 1) = 0;
  *((_QWORD *)v55 + 2) = v8;
  *v54 = (uint64_t *)v55;
  v56 = (_QWORD *)**v22;
  if (v56)
  {
    *v22 = v56;
    v57 = *v54;
  }
  else
  {
    v57 = (uint64_t *)v55;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v57);
  ++*(_QWORD *)(a1 + 24);
}

uint64_t AGCLLVMUserObject::linkMetalRuntime(AGCLLVMUserObject *this, int a2)
{
  char **v4;
  uint64_t Function;
  uint64_t v6;
  std::string::size_type size;
  void **v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  std::string *v12;
  uint64_t v13;
  llvm::Instruction *v14;
  uint64_t v15;
  char *v16;
  char **v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  llvm::Module *v21;
  llvm::Module *MetalRuntime;
  std::string v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  char **v30;
  char *v31[3];

  if (*((_BYTE *)this + 14))
    return 1;
  (*(void (**)(char ***__return_ptr))(**(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                               + 488))(&v30);
  v4 = v30;
  if (v30 != v31)
  {
    do
    {
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v6 = Function;
        if (*((char *)v4 + 55) < 0)
          std::string::__init_copy_ctor_external(&v29, v4[4], (std::string::size_type)v4[5]);
        else
          v29 = *(std::string *)(v4 + 4);
        std::string::insert(&v29, 0, "agx.");
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          size = v29.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)v27, size + 5);
        if (v28 >= 0)
          v8 = v27;
        else
          v8 = (void **)v27[0];
        if (size)
        {
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v9 = &v29;
          else
            v9 = (std::string *)v29.__r_.__value_.__r.__words[0];
          memmove(v8, v9, size);
        }
        strcpy((char *)v8 + size, ".fast");
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          v10 = v29.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)__p, v10 + 8);
        if (v26 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if (v10)
        {
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v29;
          else
            v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".nonfast");
        v13 = *(_QWORD *)(v6 + 8);
        while (v13)
        {
          v14 = *(llvm::Instruction **)(v13 + 24);
          v13 = *(_QWORD *)(v13 + 8);
          llvm::Instruction::getFastMathFlags(v14);
          llvm::Module::getOrInsertFunction();
          *((_QWORD *)v14 + 9) = *(_QWORD *)(v15 + 24);
          llvm::CallBase::setCalledOperand((uint64_t)v14, v15);
        }
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v27[0]);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
      v16 = v4[1];
      if (v16)
      {
        do
        {
          v17 = (char **)v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char **)v4[2];
          v18 = *v17 == (char *)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != v31);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v31[0]);
  v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v20 = *((_QWORD *)v19 + 58);
  v21 = (llvm::Module *)*((_QWORD *)v19 + 46);
  if (*((char *)this + 207) < 0)
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  else
    v24 = *(std::string *)((char *)this + 184);
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(v20, v21, a2);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (!MetalRuntime)
    return 1;
  else
    return AGCLLVMObject::linkCommon((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), MetalRuntime, *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1751), *((llvm::Function **)this + 21));
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t AGCLLVMUserObject::linkHelperRuntime(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Module *v6;
  llvm::Module *MetalRuntime;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *Name;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  int Key;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Function *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *(_QWORD *)(v4 + 464);
  v6 = *(llvm::Module **)(v4 + 368);
  if (*((char *)a1 + 207) < 0)
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)a1[23], a1[24]);
  else
    v42 = *(std::string *)(a1 + 23);
  v43 = *((_OWORD *)a1 + 13);
  v44 = a1[28];
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(v5, v6, a2);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v45 = 0;
  if (!MetalRuntime)
    return 1;
  for (i = (_QWORD *)*((_QWORD *)MetalRuntime + 4); i != (_QWORD *)((char *)MetalRuntime + 24); i = (_QWORD *)i[1])
  {
    if (i)
      v9 = (uint64_t)(i - 7);
    else
      v9 = 0;
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9) && (*(_BYTE *)(v9 + 34) & 0x80) != 0
      || (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9) & 1) == 0)
    {
      llvm::GlobalValue::setLinkage(v9, 3);
    }
    if ((*(_DWORD *)(v9 + 32) & 0xFu) - 7 >= 2)
      llvm::GlobalValue::setVisibility(v9);
  }
  v10 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 464) + 32);
  v11 = *(void **)(v10 + 8);
  if (v11)
    v12 = strlen(*(const char **)(v10 + 8));
  else
    v12 = 0;
  llvm::Module::setTargetTriple((uint64_t)MetalRuntime, v11, v12);
  v14 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 464) + 32);
  if (*(_QWORD *)(v14 + 16))
    strlen(*(const char **)(v14 + 16));
  llvm::Module::setDataLayout();
  v47 = 0;
  v15 = llvm::Linker::linkModules();
  v16 = v47;
  if (v47 == v46)
  {
    v17 = 4;
    v16 = v46;
    goto LABEL_29;
  }
  if (v47)
  {
    v17 = 5;
LABEL_29:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  v18 = MEMORY[0x1CAA2CC9C]();
  MEMORY[0x1CAA2D68C](v18, 0x10B2C407FF26C1CLL);
  if ((v15 & 1) == 0)
  {
    v19 = *a1;
    v20 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)(v20 + 400) + 1751))
    {
      v21 = *(_QWORD *)(v20 + 368);
      v22 = v21 + 24;
      v23 = *(_QWORD *)(v21 + 32);
      if (v23 != v21 + 24)
      {
        do
        {
          v24 = v23 - 56;
          v28 = v23 == 0;
          v23 = *(_QWORD *)(v23 + 8);
          if (v28)
            v25 = 0;
          else
            v25 = v24;
          if (v25 != a1[21])
          {
            Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v25);
            if (v27 != 22
              || (*Name == 0x626F6C672E636761 ? (v28 = Name[1] == 0x74736E6F635F6C61) : (v28 = 0),
                  v28 ? (v29 = *(_QWORD *)((char *)Name + 14) == 0x726F746375727473) : (v29 = 0),
                  !v29))
            {
              v30 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
              llvm::Value::getName((llvm::Value *)v25);
              Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v30 + 3296))
              {
                v32 = *(_DWORD *)(v25 + 32);
                if ((v32 & 0xF) != 0)
                  goto LABEL_51;
              }
              else
              {
                v32 = *(_DWORD *)(v25 + 32);
              }
              if ((v32 & 0x30) == 0x10)
              {
LABEL_51:
                if (!*(_QWORD *)(v25 + 8))
                  llvm::Function::eraseFromParent((llvm::Function *)v25);
              }
            }
          }
        }
        while (v23 != v22);
      }
    }
    else
    {
      *((_DWORD *)a1 + 10) = 1;
      v33 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v19 - 24) + 368);
      v34 = v33 + 24;
      v35 = *(_QWORD *)(v33 + 32);
      if (v35 != v33 + 24)
      {
        do
        {
          v36 = *(_QWORD *)(v35 + 8);
          if (v35)
            v37 = (llvm::Function *)(v35 - 56);
          else
            v37 = 0;
          if (v37 != (llvm::Function *)a1[21])
            AGCLLVMUserObject::markNonMainFunctionInline((AGCLLVMUserObject *)a1, v37, *(_BYTE *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 1751));
          v35 = v36;
        }
        while (v36 != v34);
        v33 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368);
      }
      v38 = v33 + 8;
      v39 = *(_QWORD *)(v33 + 16);
      if (v39 != v33 + 8)
      {
        do
        {
          v40 = v39 - 56;
          v28 = v39 == 0;
          v39 = *(_QWORD *)(v39 + 8);
          if (v28)
            v41 = 0;
          else
            v41 = v40;
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v41) & 1) == 0)
          {
            if (*(_QWORD *)(v41 + 8))
              *(_DWORD *)(v41 + 32) = *(_DWORD *)(v41 + 32) & 0xFFFFBFC0 | 0x4007;
            else
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v41);
          }
        }
        while (v39 != v38);
      }
      if (*((_DWORD *)a1 + 10) > 1u)
      {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 464) + 344), *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368));
        *((_DWORD *)a1 + 10) = 1;
      }
    }
  }
  return v15 ^ 1u;
}

llvm::Module *AGCLLVMCtx::loadMetalRuntime(uint64_t a1, llvm::Module *a2, int a3)
{
  llvm::Module *Runtime;
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  const void *v14;
  size_t v15;
  size_t v16;
  void **v17;
  const void *v18;
  char *v19;
  size_t v20;
  void **v21;
  const void *v22;
  size_t v23;
  void **v24;
  const void *v25;
  char *v26;
  const char *v27;
  size_t v28;
  void **v29;
  const void *v30;
  size_t v31;
  void **v32;
  const void *v33;
  std::string v34;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *__p[2];
  void *v42;
  int v43;
  void *v44;
  uint64_t v45;
  llvm *v46;
  uint64_t v47;
  unsigned int v48;

  Runtime = a2;
  switch(a3)
  {
    case 0:
      v12 = (char *)(a1 + 408);
      if (*(char *)(a1 + 431) < 0)
        v12 = *(char **)v12;
      return (llvm::Module *)loadRuntime(v12, a2);
    case 1:
      v14 = *(const void **)(*(_QWORD *)(a1 + 32) + 32);
      if (*(char *)(a1 + 407) >= 0)
        v15 = *(unsigned __int8 *)(a1 + 407);
      else
        v15 = *(_QWORD *)(a1 + 392);
      v16 = strlen(*(const char **)(*(_QWORD *)(a1 + 32) + 32));
      v17 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v15 + v16);
      if (SHIBYTE(v42) < 0)
        v17 = (void **)__p[0];
      if (v15)
      {
        if (*(char *)(a1 + 407) >= 0)
          v18 = (const void *)(a1 + 384);
        else
          v18 = *(const void **)(a1 + 384);
        memmove(v17, v18, v15);
      }
      if (v16)
        memmove((char *)v17 + v15, v14, v16);
      *((_BYTE *)v17 + v15 + v16) = 0;
      if (SHIBYTE(v42) >= 0)
        v19 = (char *)__p;
      else
        v19 = (char *)__p[0];
      goto LABEL_91;
    case 2:
      if (*(char *)(a1 + 407) >= 0)
        v20 = *(unsigned __int8 *)(a1 + 407);
      else
        v20 = *(_QWORD *)(a1 + 392);
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v20 + 15);
      if (SHIBYTE(v42) >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if (v20)
      {
        if (*(char *)(a1 + 407) >= 0)
          v22 = (const void *)(a1 + 384);
        else
          v22 = *(const void **)(a1 + 384);
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "/ei_rt.metallib");
      goto LABEL_88;
    case 3:
      if (*(char *)(a1 + 407) >= 0)
        v23 = *(unsigned __int8 *)(a1 + 407);
      else
        v23 = *(_QWORD *)(a1 + 392);
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v23 + 16);
      if (SHIBYTE(v42) >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if (v23)
      {
        if (*(char *)(a1 + 407) >= 0)
          v25 = (const void *)(a1 + 384);
        else
          v25 = *(const void **)(a1 + 384);
        memmove(v24, v25, v23);
      }
      v26 = (char *)v24 + v23;
      v27 = "/vft_rt.metallib";
      goto LABEL_75;
    case 4:
    case 5:
      if (*(char *)(a1 + 407) >= 0)
        v6 = *(unsigned __int8 *)(a1 + 407);
      else
        v6 = *(_QWORD *)(a1 + 392);
      v7 = &v34;
      std::string::basic_string[abi:nn180100]((uint64_t)&v34, v6 + 14);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v6)
      {
        if (*(char *)(a1 + 407) >= 0)
          v8 = (const void *)(a1 + 384);
        else
          v8 = *(const void **)(a1 + 384);
        memmove(v7, v8, v6);
      }
      strcpy((char *)v7 + v6, "/raytracing_rt");
      if (a3 == 5)
        std::string::append(&v34, "_dora");
      std::string::append(&v34, ".metallib");
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v34;
      else
        v9 = (std::string *)v34.__r_.__value_.__r.__words[0];
      Runtime = (llvm::Module *)loadRuntime((char *)v9, Runtime);
      if (Runtime)
      {
        __p[1] = 0;
        v42 = &RewriteAdressSpacePass::ID;
        v43 = 4;
        __p[0] = &off_1E7EC0898;
        v44 = &unk_1E7EC0868;
        v45 = 0x4B00000005;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        RewriteAdressSpacePass::runOnModule((RewriteAdressSpacePass *)__p, Runtime);
        v35[1] = 0;
        v35[2] = &AGCLLVMVerifyModulePass::ID;
        v36 = 4;
        v35[0] = &off_1E7EC06C8;
        v37 = (*((uint64_t (**)(void **))__p[0] + 2))(__p);
        v38 = v10;
        v39 = 0;
        v40 = a1;
        AGCLLVMVerifyModulePass::runOnModule((AGCLLVMVerifyModulePass *)v35, Runtime);
        llvm::Pass::~Pass((llvm::Pass *)v35);
        __p[0] = &off_1E7EC0898;
        v44 = &unk_1E7EC0868;
        llvm::deallocate_buffer(v46, (void *)(16 * v48));
        llvm::Pass::~Pass((llvm::Pass *)__p);
      }
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return Runtime;
      v11 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_93;
    case 6:
      if (*(char *)(a1 + 407) >= 0)
        v28 = *(unsigned __int8 *)(a1 + 407);
      else
        v28 = *(_QWORD *)(a1 + 392);
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v28 + 16);
      if (SHIBYTE(v42) >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if (v28)
      {
        if (*(char *)(a1 + 407) >= 0)
          v30 = (const void *)(a1 + 384);
        else
          v30 = *(const void **)(a1 + 384);
        memmove(v29, v30, v28);
      }
      v26 = (char *)v29 + v28;
      v27 = "/gpe_rt.metallib";
LABEL_75:
      *(_OWORD *)v26 = *(_OWORD *)v27;
      v26[16] = 0;
      goto LABEL_88;
    case 7:
      if (*(char *)(a1 + 407) >= 0)
        v31 = *(unsigned __int8 *)(a1 + 407);
      else
        v31 = *(_QWORD *)(a1 + 392);
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v31 + 24);
      if (SHIBYTE(v42) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (v31)
      {
        if (*(char *)(a1 + 407) >= 0)
          v33 = (const void *)(a1 + 384);
        else
          v33 = *(const void **)(a1 + 384);
        memmove(v32, v33, v31);
      }
      strcpy((char *)v32 + v31, "/tex_atomic_emu.metallib");
LABEL_88:
      if (SHIBYTE(v42) >= 0)
        v19 = (char *)__p;
      else
        v19 = (char *)__p[0];
LABEL_91:
      Runtime = (llvm::Module *)loadRuntime(v19, Runtime);
      if (SHIBYTE(v42) < 0)
      {
        v11 = __p[0];
LABEL_93:
        operator delete(v11);
      }
      break;
    default:
      return Runtime;
  }
  return Runtime;
}

uint64_t loadRuntime(char *a1, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t BuiltinsModuleForSourceModule;
  void *__p[2];
  char v31;
  void **v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E7EBA020;
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, a1);
  v33 = 260;
  v32 = __p;
  llvm::MemoryBuffer::getFile();
  if (v31 < 0)
    operator delete(__p[0]);
  if ((v35 & 1) != 0)
  {
    v5 = v34;
    if ((_DWORD)v34)
    {
      v6 = 0;
      if ((v35 & 1) != 0)
        goto LABEL_30;
      goto LABEL_28;
    }
  }
  else
  {
    std::system_category();
    v5 = v34;
  }
  v34 = 0;
  *(_QWORD *)(v4 + 40) = v5;
  v7 = *(unsigned int **)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16) - (_QWORD)v7;
  *(_QWORD *)(v4 + 48) = v7;
  *(_QWORD *)(v4 + 56) = 4;
  *(_QWORD *)(v4 + 64) = v8;
  if (v8 >= 4 && (v9 = *v7, (_DWORD)v9))
  {
    *(_DWORD *)(v4 + 8) = v9;
    v10 = malloc_type_malloc(4 * v9, 0x85F10640uLL);
    *(_QWORD *)(v4 + 16) = v10;
    memset(v10, 255, 4 * v9);
    *(_DWORD *)(v4 + 28) = v9;
    v11 = (char *)malloc_type_malloc(16 * v9, 0xD4B4F162uLL);
    *(_QWORD *)(v4 + 32) = v11;
    memset(v11, 255, 16 * v9);
    v12 = 0;
    v13 = 0;
    v6 = 0;
    *(_DWORD *)(v4 + 24) = 0;
    v14 = 4;
    do
    {
      if (v14 >= v8)
        break;
      v15 = v14;
      while (1)
      {
        v16 = v15 + 1;
        if (!*((_BYTE *)v7 + v15))
          break;
        ++v15;
        if (v8 == v16)
          goto LABEL_27;
      }
      *(_QWORD *)(v4 + 56) = v16;
      v17 = v15 + 5;
      if (v17 > v8)
        break;
      v18 = (char *)v7 + v14;
      v19 = *(unsigned int *)((char *)v7 + v16);
      *(_QWORD *)(v4 + 56) = v17;
      v20 = &v11[16 * v12];
      *(_DWORD *)v20 = -1;
      *((_DWORD *)v20 + 1) = v19;
      *((_QWORD *)v20 + 1) = v18;
      LOBYTE(v21) = *v18;
      if (*v18)
      {
        v22 = 0;
        v23 = 1;
        v24 = 1;
        do
        {
          v22 += v24 * (char)v21;
          v24 *= 2;
          v21 = v18[v23++];
        }
        while (v21);
      }
      else
      {
        v22 = 0;
      }
      v25 = v22 % v9;
      v26 = *((_DWORD *)v10 + v25);
      *((_DWORD *)v10 + v25) = v12;
      if (v26 != -1)
        *(_DWORD *)v20 = v26;
      ++v12;
      ++v13;
      *(_DWORD *)(v4 + 24) = v12;
      v14 = v17;
      v6 = v13 >= v9;
    }
    while (v13 != (_DWORD)v9);
  }
  else
  {
    v6 = 0;
  }
LABEL_27:
  if ((v35 & 1) == 0)
  {
LABEL_28:
    v27 = v34;
    v34 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
LABEL_30:
  if (!v6)
    AGCLLVMBuiltInFileReaderImpl::~AGCLLVMBuiltInFileReaderImpl((AGCLLVMBuiltInFileReaderImpl *)v4);
  BuiltinsModuleForSourceModule = AGCLLVMBuiltInFileReaderImpl::getBuiltinsModuleForSourceModule((AGCLLVMBuiltInFileReaderImpl *)v4, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return BuiltinsModuleForSourceModule;
}

BOOL AGCDeserializedReply::deserialize(AGCDeserializedReply *this, _DWORD *a2, uint64_t a3)
{
  int v4;
  char *v5;
  int v6;
  unsigned int v7;
  char *v8;
  int v9;
  unsigned __int8 v10;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  std::string::size_type data_low;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t **v34;
  uint64_t *i;
  unint64_t v36;
  char *v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  int v63;
  int v64;
  int8x8_t v65;
  unint64_t v66;
  uint8x8_t v67;
  unint64_t v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  char *v78;
  std::string::size_type v79;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  unint64_t v89;
  BOOL v90;
  char *v91;
  float v92;
  float v93;
  unint64_t v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v108;
  int v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char v114;
  uint64_t v115;
  int v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  int v120;
  _QWORD *v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  std::vector<unsigned int> *v125;
  std::string __p;
  uint64_t v127;
  std::string v128;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (*a2 != -17958193)
    return 0;
  v116 = a2[4];
  if (v116)
  {
    v4 = 0;
    v5 = (char *)(a2 + 8);
    v121 = (_QWORD *)((char *)this + 1960);
    v125 = (std::vector<unsigned int> *)((char *)this + 1824);
    v110 = (char *)this + 1880;
    v112 = (char *)this + 1864;
    v113 = (char *)this + 1856;
    v119 = (char *)this + 1904;
    v117 = (char *)this + 1912;
    v118 = (_QWORD *)((char *)this + 1768);
    while (1)
    {
      v6 = *(_DWORD *)v5;
      v120 = v4;
      if (*(_DWORD *)v5 == 2)
        break;
      if (v6 == 11)
      {
        *((_QWORD *)this + 227) = *((_QWORD *)v5 + 2);
        goto LABEL_215;
      }
      if (v6 == 25)
      {
        *((_QWORD *)this + 2) = v5;
        LODWORD(v124) = *((_DWORD *)v5 + 30);
        std::vector<unsigned int>::resize(v125, (*((_DWORD *)v5 + 16) + 1));
        v122 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 64);
        if (*(_BYTE *)(*((_QWORD *)this + 2) + 64))
        {
          v7 = 0;
          v114 = 0;
          v8 = v5 + 72;
          v9 = 1;
          v10 = 1;
          while (1)
          {
            *((_BYTE *)&v128.__r_.__value_.__s + 23) = 16;
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = *((_OWORD *)v8 + 1);
            v128.__r_.__value_.__s.__data_[16] = 0;
            begin = v125->__begin_;
            v125->__begin_[v10] = *((_DWORD *)v8 + 12) - v124;
            if (!strncmp(v8 + 16, "__GPU_STATS", 0x10uLL))
            {
              v13 = strncmp(v8, "__counters", 0x10uLL);
              v12 = v119;
              if (v13)
              {
                v14 = strncmp(v8, "__telemetry", 0x10uLL);
                v12 = v117;
                if (v14)
                  goto LABEL_28;
              }
            }
            else
            {
              if (!strncmp(v8 + 16, "__DWARF", 0x10uLL))
                goto LABEL_119;
              if (!strncmp(v8 + 16, "__GPU_METADATA", 0x10uLL))
              {
                if (!strncmp(v8, "__helpers", 0x10uLL) && *((_QWORD *)this + 28) && *((_QWORD *)this + 29))
                {
                  v22 = 1;
                  goto LABEL_29;
                }
                if (strncmp(v8, "__helpers", 0x10uLL))
                {
                  if ((v114 & 1) != 0)
                  {
                    v15 = *((_QWORD *)v8 + 5);
                    v16 = *(_QWORD *)this;
                    v17 = v8;
                    if (v15)
                      v17 = (char *)(v16 + *((unsigned int *)v8 + 12));
                    v18 = *((unsigned int *)v8 + 14);
                    v19 = *((_DWORD *)v8 + 15);
                    *((_QWORD *)this + 144) = v17;
                    *((_QWORD *)this + 145) = v15;
                    *((_BYTE *)this + 1168) = v10;
                    *((_QWORD *)this + 147) = v16 + v18;
                    *((_DWORD *)this + 296) = v19;
                    v114 = 1;
                    *((_BYTE *)this + 1144) = 1;
                    goto LABEL_119;
                  }
                  v22 = 0;
                  v114 = 1;
                  goto LABEL_29;
                }
              }
              if (strncmp(v8 + 16, "__TEXT", 0x10uLL)
                || (v20 = strncmp(v8, "__const", 0x10uLL), v12 = v113, v20)
                && (v21 = strncmp(v8, "__cstring", 0x10uLL), v12 = v112, v21))
              {
                if (strncmp(v8 + 16, "__DATA", 0x10uLL) || strncmp(v8, "__common", 0x10uLL))
                  goto LABEL_28;
                begin[v10] = *((_QWORD *)v8 + 4);
                v12 = v110;
              }
            }
            MEMORY[0x1CAA2D494](&v128, *v12);
LABEL_28:
            v22 = 0;
LABEL_29:
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = (std::string::size_type)&v128;
            else
              v23 = v128.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:nn180100]<0>(&__p, (char *)v23);
            v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v121, (uint64_t)&__p);
            v25 = v24;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v25)
              {
LABEL_34:
                v26 = *((_QWORD *)v8 + 5);
                v27 = v8;
                if (v26)
                  v27 = (char *)(*(_QWORD *)this + *((unsigned int *)v8 + 12));
                if ((v22 & 1) == 0)
                {
                  v28 = *((_DWORD *)v8 + 15);
                  v29 = *(_QWORD *)this + *((unsigned int *)v8 + 14);
                  v30 = (char *)this + 40 * *((unsigned int *)v25 + 10);
                  *((_QWORD *)v30 + 3) = v27;
                  *((_QWORD *)v30 + 4) = v26;
                  v30[40] = v10;
                  *((_QWORD *)v30 + 6) = v29;
                  *((_DWORD *)v30 + 14) = v28;
                }
                LODWORD(__p.__r_.__value_.__l.__data_) = v9;
                std::string::basic_string[abi:nn180100]<0>(&__p.__r_.__value_.__l.__size_, (char *)v23);
                data_low = LODWORD(__p.__r_.__value_.__l.__data_);
                v32 = *((_QWORD *)this + 220);
                if (v32)
                {
                  v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
                  v33.i16[0] = vaddlv_u8(v33);
                  if (v33.u32[0] > 1uLL)
                  {
                    v23 = LODWORD(__p.__r_.__value_.__l.__data_);
                    if (v32 <= LODWORD(__p.__r_.__value_.__l.__data_))
                      v23 = LODWORD(__p.__r_.__value_.__l.__data_) % v32;
                  }
                  else
                  {
                    v23 = (v32 - 1) & (uint64_t)__p.__r_.__value_.__l.__data_;
                  }
                  v34 = *(uint64_t ***)(*((_QWORD *)this + 219) + 8 * v23);
                  if (v34)
                  {
                    for (i = *v34; i; i = (uint64_t *)*i)
                    {
                      v36 = i[1];
                      if (v36 == LODWORD(__p.__r_.__value_.__l.__data_))
                      {
                        if (*((_DWORD *)i + 4) == LODWORD(__p.__r_.__value_.__l.__data_))
                          goto LABEL_116;
                      }
                      else
                      {
                        if (v33.u32[0] > 1uLL)
                        {
                          if (v36 >= v32)
                            v36 %= v32;
                        }
                        else
                        {
                          v36 &= v32 - 1;
                        }
                        if (v36 != v23)
                          break;
                      }
                    }
                  }
                }
                v37 = (char *)operator new(0x30uLL);
                *(_QWORD *)v37 = 0;
                *((_QWORD *)v37 + 1) = data_low;
                *((_DWORD *)v37 + 4) = data_low;
                *(_OWORD *)(v37 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *((_QWORD *)v37 + 5) = v127;
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                v127 = 0;
                v38 = (float)(unint64_t)(*((_QWORD *)this + 222) + 1);
                v39 = *((float *)this + 446);
                if (!v32 || (float)(v39 * (float)v32) < v38)
                {
                  v40 = (v32 & (v32 - 1)) != 0;
                  if (v32 < 3)
                    v40 = 1;
                  v41 = v40 | (2 * v32);
                  v42 = vcvtps_u32_f32(v38 / v39);
                  if (v41 <= v42)
                    prime = (int8x8_t)v42;
                  else
                    prime = (int8x8_t)v41;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                    v32 = *((_QWORD *)this + 220);
                  }
                  if (*(_QWORD *)&prime <= v32)
                  {
                    if (*(_QWORD *)&prime < v32)
                    {
                      v50 = vcvtps_u32_f32((float)*((unint64_t *)this + 222) / *((float *)this + 446));
                      if (v32 < 3
                        || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
                      {
                        v50 = std::__next_prime(v50);
                      }
                      else
                      {
                        v52 = 1 << -(char)__clz(v50 - 1);
                        if (v50 >= 2)
                          v50 = v52;
                      }
                      if (*(_QWORD *)&prime <= v50)
                        prime = (int8x8_t)v50;
                      if (*(_QWORD *)&prime >= v32)
                      {
                        v32 = *((_QWORD *)this + 220);
                      }
                      else
                      {
                        if (prime)
                          goto LABEL_68;
                        v59 = (void *)*((_QWORD *)this + 219);
                        *((_QWORD *)this + 219) = 0;
                        if (v59)
                          operator delete(v59);
                        v32 = 0;
                        *((_QWORD *)this + 220) = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_68:
                    if (*(_QWORD *)&prime >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v44 = operator new(8 * *(_QWORD *)&prime);
                    v45 = (void *)*((_QWORD *)this + 219);
                    *((_QWORD *)this + 219) = v44;
                    if (v45)
                      operator delete(v45);
                    v46 = 0;
                    *((int8x8_t *)this + 220) = prime;
                    do
                      *(_QWORD *)(*((_QWORD *)this + 219) + 8 * v46++) = 0;
                    while (*(_QWORD *)&prime != v46);
                    v47 = (_QWORD *)*v118;
                    if (*v118)
                    {
                      v48 = v47[1];
                      v49 = (uint8x8_t)vcnt_s8(prime);
                      v49.i16[0] = vaddlv_u8(v49);
                      if (v49.u32[0] > 1uLL)
                      {
                        if (v48 >= *(_QWORD *)&prime)
                          v48 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v48 &= *(_QWORD *)&prime - 1;
                      }
                      *(_QWORD *)(*((_QWORD *)this + 219) + 8 * v48) = v118;
                      v53 = (_QWORD *)*v47;
                      if (*v47)
                      {
                        do
                        {
                          v54 = v53[1];
                          if (v49.u32[0] > 1uLL)
                          {
                            if (v54 >= *(_QWORD *)&prime)
                              v54 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v54 &= *(_QWORD *)&prime - 1;
                          }
                          if (v54 != v48)
                          {
                            v55 = *((_QWORD *)this + 219);
                            if (!*(_QWORD *)(v55 + 8 * v54))
                            {
                              *(_QWORD *)(v55 + 8 * v54) = v47;
                              goto LABEL_97;
                            }
                            *v47 = *v53;
                            *v53 = **(_QWORD **)(*((_QWORD *)this + 219) + 8 * v54);
                            **(_QWORD **)(*((_QWORD *)this + 219) + 8 * v54) = v53;
                            v53 = v47;
                          }
                          v54 = v48;
LABEL_97:
                          v47 = v53;
                          v53 = (_QWORD *)*v53;
                          v48 = v54;
                        }
                        while (v53);
                      }
                    }
                    v32 = (unint64_t)prime;
                  }
                  if ((v32 & (v32 - 1)) != 0)
                  {
                    if (v32 <= data_low)
                      v23 = data_low % v32;
                    else
                      v23 = data_low;
                  }
                  else
                  {
                    v23 = ((_DWORD)v32 - 1) & data_low;
                  }
                }
                v56 = *((_QWORD *)this + 219);
                v57 = *(_QWORD **)(v56 + 8 * v23);
                if (v57)
                {
                  *(_QWORD *)v37 = *v57;
                  goto LABEL_114;
                }
                *(_QWORD *)v37 = *v118;
                *v118 = v37;
                *(_QWORD *)(v56 + 8 * v23) = v118;
                if (*(_QWORD *)v37)
                {
                  v58 = *(_QWORD *)(*(_QWORD *)v37 + 8);
                  if ((v32 & (v32 - 1)) != 0)
                  {
                    if (v58 >= v32)
                      v58 %= v32;
                  }
                  else
                  {
                    v58 &= v32 - 1;
                  }
                  v57 = (_QWORD *)(*((_QWORD *)this + 219) + 8 * v58);
LABEL_114:
                  *v57 = v37;
                }
                ++*((_QWORD *)this + 222);
LABEL_116:
                if (SHIBYTE(v127) < 0)
                  operator delete((void *)__p.__r_.__value_.__l.__size_);
                ++v7;
                goto LABEL_119;
              }
            }
            else if (v24)
            {
              goto LABEL_34;
            }
            __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4A50];
            printHexDump(&__p.__r_.__value_.__l.__data_, *(_QWORD *)this, *((_QWORD *)this + 1), 0x20u, (const char *)&unk_1C3E4D9BB, 0);
LABEL_119:
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
            if (v122 >= ++v10)
            {
              v8 += 80;
              v9 = v10;
              if (v7 <= 0xE)
                continue;
            }
            break;
          }
        }
      }
LABEL_215:
      v5 += *((unsigned int *)v5 + 1);
      v4 = v120 + 1;
      if (v120 + 1 == v116)
        goto LABEL_216;
    }
    v60 = *((_DWORD *)v5 + 3);
    v61 = *(_QWORD *)this + *((unsigned int *)v5 + 4);
    v62 = (unsigned int *)(*(_QWORD *)this + *((unsigned int *)v5 + 2));
    *((_QWORD *)this + 224) = v62;
    *((_QWORD *)this + 225) = v61;
    *((_DWORD *)this + 452) = v60;
    v63 = *((_DWORD *)v5 + 3);
    if (!v63)
      goto LABEL_215;
    v64 = 0;
    v111 = v61 + 1;
LABEL_135:
    v65 = *(int8x8_t *)((char *)this + 1760);
    if (!*(_QWORD *)&v65)
      goto LABEL_210;
    v66 = *((unsigned __int8 *)v62 + 5);
    v67 = (uint8x8_t)vcnt_s8(v65);
    v67.i16[0] = vaddlv_u8(v67);
    if (v67.u32[0] > 1uLL)
    {
      v68 = *((unsigned __int8 *)v62 + 5);
      if (*(_QWORD *)&v65 <= v66)
        v68 = v66 % *(_QWORD *)&v65;
    }
    else
    {
      v68 = (v65.i32[0] - 1) & v66;
    }
    v69 = *(uint64_t ***)(*((_QWORD *)this + 219) + 8 * v68);
    if (!v69)
      goto LABEL_210;
    v70 = *v69;
    if (!v70)
      goto LABEL_210;
    v71 = *v62;
    v72 = *((_QWORD *)v62 + 1);
    while (1)
    {
      v73 = v70[1];
      if (v73 == v66)
      {
        if (*((_DWORD *)v70 + 4) == (_DWORD)v66)
        {
          if ((~*((unsigned __int8 *)v62 + 4) & 0xE) != 0 || v70 == 0)
            goto LABEL_210;
          v75 = (char *)(v70 + 3);
          if (*((char *)v70 + 47) < 0)
            v75 = *(char **)v75;
          std::string::basic_string[abi:nn180100]<0>(&__p, v75);
          v76 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v121, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:nn180100]<0>(&v128, (char *)(v111 + v71));
          v77 = *((_DWORD *)v76 + 10);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
          else
            __p = v128;
          v78 = (char *)this + 40 * v77 + 1192;
          LODWORD(v127) = v72;
          v79 = __p.__r_.__value_.__r.__words[0];
          v109 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v82 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)p_p, size);
          v83 = v82;
          v115 = (uint64_t)v78;
          v84 = *((_QWORD *)v78 + 1);
          if (!v84)
            goto LABEL_186;
          v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
          v85.i16[0] = vaddlv_u8(v85);
          v123 = v85.u32[0];
          if (v85.u32[0] > 1uLL)
          {
            v86 = v82;
            if (v82 >= v84)
              v86 = v82 % v84;
          }
          else
          {
            v86 = (v84 - 1) & v82;
          }
          v87 = *(unsigned __int8 ***)(*(_QWORD *)v115 + 8 * v86);
          v124 = v86;
          if (!v87 || (v108 = (void *)v79, (v88 = *v87) == 0))
          {
LABEL_186:
            v91 = (char *)operator new(0x30uLL);
            *(_QWORD *)v91 = 0;
            *((_QWORD *)v91 + 1) = v83;
            *(std::string *)(v91 + 16) = __p;
            *((_DWORD *)v91 + 10) = v72;
            v92 = (float)(unint64_t)(*(_QWORD *)(v115 + 24) + 1);
            v93 = *(float *)(v115 + 32);
            v94 = v124;
            if (!v84 || (float)(v93 * (float)v84) < v92)
            {
              v95 = (v84 & (v84 - 1)) != 0;
              if (v84 < 3)
                v95 = 1;
              v96 = v95 | (2 * v84);
              v97 = vcvtps_u32_f32(v92 / v93);
              if (v96 <= v97)
                v98 = v97;
              else
                v98 = v96;
              std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(v115, v98);
              v84 = *(_QWORD *)(v115 + 8);
              if ((v84 & (v84 - 1)) != 0)
              {
                if (v83 >= v84)
                  v94 = v83 % v84;
                else
                  v94 = v83;
              }
              else
              {
                v94 = (v84 - 1) & v83;
              }
            }
            v99 = *(_QWORD *)v115;
            v100 = *(_QWORD **)(*(_QWORD *)v115 + 8 * v94);
            if (v100)
            {
              *(_QWORD *)v91 = *v100;
              goto LABEL_206;
            }
            *(_QWORD *)v91 = *(_QWORD *)(v115 + 16);
            *(_QWORD *)(v115 + 16) = v91;
            *(_QWORD *)(v99 + 8 * v94) = v115 + 16;
            if (*(_QWORD *)v91)
            {
              v101 = *(_QWORD *)(*(_QWORD *)v91 + 8);
              if ((v84 & (v84 - 1)) != 0)
              {
                if (v101 >= v84)
                  v101 %= v84;
              }
              else
              {
                v101 &= v84 - 1;
              }
              v100 = (_QWORD *)(*(_QWORD *)v115 + 8 * v101);
LABEL_206:
              *v100 = v91;
            }
            ++*(_QWORD *)(v115 + 24);
            goto LABEL_208;
          }
          while (2)
          {
            v89 = *((_QWORD *)v88 + 1);
            if (v89 != v83)
            {
              if (v123 > 1)
              {
                if (v89 >= v84)
                  v89 %= v84;
              }
              else
              {
                v89 &= v84 - 1;
              }
              if (v89 != v86)
                goto LABEL_186;
LABEL_185:
              v88 = *(unsigned __int8 **)v88;
              if (!v88)
                goto LABEL_186;
              continue;
            }
            break;
          }
          v90 = std::equal_to<std::string>::operator()[abi:nn180100](v88 + 16, (unsigned __int8 *)&__p);
          v86 = v124;
          if (!v90)
            goto LABEL_185;
          if (v109 < 0)
            operator delete(v108);
LABEL_208:
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
LABEL_210:
          v62 += 4;
          if (++v64 == v63)
            goto LABEL_215;
          goto LABEL_135;
        }
      }
      else
      {
        if (v67.u32[0] > 1uLL)
        {
          if (v73 >= *(_QWORD *)&v65)
            v73 %= *(_QWORD *)&v65;
        }
        else
        {
          v73 &= *(_QWORD *)&v65 - 1;
        }
        if (v73 != v68)
          goto LABEL_210;
      }
      v70 = (uint64_t *)*v70;
      if (!v70)
        goto LABEL_210;
    }
  }
LABEL_216:
  v102 = (char *)this + 24;
  if (*((_QWORD *)this + 3))
  {
    if (!*((_QWORD *)this + 4))
      v102 = (char *)this + 584;
  }
  else
  {
    v102 = (char *)this + 584;
  }
  if (!*(_QWORD *)v102)
    return 0;
  v103 = (char *)this + 224;
  if (*((_QWORD *)this + 28))
  {
    if (!*((_QWORD *)this + 29))
      v103 = (char *)this + 784;
  }
  else
  {
    v103 = (char *)this + 784;
  }
  v105 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  return v105 && v104 != 0 && *((_QWORD *)this + 152) != 0;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::size_type v6;
  unsigned int *value;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  char *v11;
  std::vector<unsigned int>::pointer v12;
  std::vector<unsigned int>::pointer v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v19 = &begin[__sz];
    goto LABEL_15;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62)
    abort();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 1;
  if (v8 >> 1 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10);
  v12 = this->__begin_;
  v13 = this->__end_;
  v14 = &v11[4 * v5];
  v16 = (unsigned int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = (unsigned int *)&v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
    operator delete(v12);
}

BOOL GenericVaryingAllocator::getVaryingSignature(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  int v17;
  const char *v18;
  unint64_t v19;
  int String;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  int v39;
  const char *v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  const unsigned __int8 *v55;
  int v56;
  __int16 v57;
  int v58;
  const char *v59;
  const unsigned __int8 *v60;
  int v61;
  int v62;
  _DWORD *v64;
  int v66;
  int v67[2];
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  int v72[4];
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;

  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v66 = *(_DWORD *)(a1 + 32);
    std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) + (v4 << 6), 126 - 2 * __clz(v4), 1);
    v69 = 0;
    v70 = xmmword_1C3E37B60;
    v71 = 0u;
    *(_OWORD *)v72 = 0u;
    v73 = 0;
    v74 = 1;
    v75 = 256;
    v76 = 0;
    v8 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)v67 = a2;
    v68 = 0;
    if (v8)
    {
      v64 = a3;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a1 + 24) + (v9 << 6);
        v16 = *(const char **)(v13 + 24);
        v14 = v13 + 24;
        v15 = v16;
        v17 = *(char *)(v14 + 23);
        if (v17 >= 0)
          v18 = (const char *)v14;
        else
          v18 = v15;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v14 + 23);
        else
          v19 = *(_QWORD *)(v14 + 8);
        String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v68, v18, v19);
        v21 = String;
        if (v11 >= v12)
        {
          v22 = (v11 - v10) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
LABEL_75:
            abort();
          if ((v12 - v10) >> 1 > v23)
            v23 = (v12 - v10) >> 1;
          if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
          {
            if (v24 >> 62)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v25 = (char *)operator new(4 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[4 * v22];
          *(_DWORD *)v26 = v21;
          v27 = v26 + 4;
          while (v11 != v10)
          {
            v28 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v26 - 1) = v28;
            v26 -= 4;
          }
          v12 = &v25[4 * v24];
          if (v10)
            operator delete(v10);
          v10 = v26;
          v11 = v27;
        }
        else
        {
          *(_DWORD *)v11 = String;
          v11 += 4;
        }
        ++v9;
        v29 = *(unsigned int *)(a1 + 32);
      }
      while (v9 < v29);
      if ((_DWORD)v29)
      {
        BYTE6(v73) = 1;
        flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)&v68, v11 - v10, 4uLL);
        flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)&v68, v11 - v10, 4uLL);
        v30 = v11 - v10;
        if (v11 == v10)
          v31 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
        else
          v31 = v10;
        if (v11 != v10)
        {
          v32 = v30 >> 2;
          v33 = v31 - 4;
          do
          {
            v34 = v32 - 1;
            v35 = *(_DWORD *)&v33[4 * v32];
            flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)&v68, 4uLL);
            flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v68, v71 - v72[0] + DWORD2(v71) - v35 + 4);
            v32 = v34;
          }
          while (v34);
        }
        BYTE6(v73) = 0;
        v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v68, (unint64_t)v30 >> 2);
        BYTE6(v73) = 1;
        v37 = v71 - LOWORD(v72[0]) + WORD4(v71);
        if (v36)
        {
          v38 = v36;
          flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)&v68, 4uLL);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)&v68, 4, v71 - v72[0] + DWORD2(v71) - v38 + 4);
        }
        v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v68, v37);
        flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v68, v39, v40);
      }
      a2 = *(flatbuffers::FlatBufferBuilder **)v67;
      a3 = v64;
    }
    else
    {
      v10 = 0;
    }
    *a3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a2, *(const unsigned __int8 **)v72, (v71 - v72[0] + DWORD2(v71)));
    if (v10)
      operator delete(v10);
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v68);
    v68 = 0;
    v69 = 0;
    v70 = xmmword_1C3E37B60;
    v71 = 0u;
    *(_OWORD *)v72 = 0u;
    v73 = 0;
    v74 = 1;
    v75 = 256;
    v76 = 0;
    if (*(_DWORD *)(a1 + 32))
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      do
      {
        v45 = *(_QWORD *)(a1 + 24) + (v41 << 6);
        v46 = *(_DWORD *)(v45 + 8) & 0xF | (16 * (*(_BYTE *)(v45 + 58) & 0xF)) | (unsigned __int16)(*(_DWORD *)(v45 + 12) << 8) | (*(_DWORD *)(v45 + 4) << 16) & 0x80FFFFFF | ((*(_DWORD *)v45 & 0x7F) << 24) | (*(unsigned __int8 *)(v45 + 57) << 31);
        if ((unint64_t)v43 >= v44)
        {
          v47 = v43 - v42;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62)
            goto LABEL_75;
          if ((uint64_t)(v44 - (_QWORD)v42) >> 1 > v48)
            v48 = (uint64_t)(v44 - (_QWORD)v42) >> 1;
          if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v48;
          if (v49)
            v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v49);
          else
            v50 = 0;
          v51 = (unsigned int *)(v49 + 4 * v47);
          *v51 = v46;
          v52 = v51 + 1;
          while (v43 != v42)
          {
            v53 = *--v43;
            *--v51 = v53;
          }
          v44 = v49 + 4 * v50;
          if (v42)
            operator delete(v42);
          v42 = v51;
          v43 = v52;
        }
        else
        {
          *v43++ = v46;
        }
        ++v41;
        v54 = *(unsigned int *)(a1 + 32);
      }
      while (v41 < v54);
      if ((_DWORD)v54)
      {
        if (v43 == v42)
          v55 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
        else
          v55 = (const unsigned __int8 *)v42;
        v56 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((flatbuffers::FlatBufferBuilder *)&v68, v55, v43 - v42);
        BYTE6(v73) = 1;
        v57 = v71 - LOWORD(v72[0]) + WORD4(v71);
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)&v68, 4, v56);
        v58 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v68, v57);
        flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v68, v58, v59);
        v61 = DWORD2(v71);
        v60 = *(const unsigned __int8 **)v72;
        v62 = v71;
      }
      else
      {
        v61 = 0;
        v62 = 0;
        v60 = 0;
      }
      a2 = *(flatbuffers::FlatBufferBuilder **)v67;
    }
    else
    {
      v42 = 0;
      v61 = 0;
      v62 = 0;
      v60 = 0;
    }
    *a4 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a2, v60, (v62 - (_DWORD)v60 + v61));
    if (v42)
      operator delete(v42);
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v68);
    LODWORD(v4) = v66;
  }
  return (_DWORD)v4 != 0;
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3)
{
  uint64_t result;

  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  flatbuffers::FlatBufferBuilder::PreAlign(this, 4, *((_QWORD *)this + 9));
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - a2 + 4);
  *((_BYTE *)this + 71) = 1;
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, unint64_t a3)
{
  *((_BYTE *)a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, a3, 1uLL);
  flatbuffers::vector_downward::push(a1, a2, a3);
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, a3);
}

BOOL AGCLLVMObject::extractPhaseOffsets(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned __int8 v14;
  size_t v15;
  void **v16;
  size_t v17;
  const void *v18;
  size_t v19;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  const unsigned __int8 *v28;
  unsigned int *v32;
  void *__p[2];
  unsigned __int8 v35;

  v3 = *a2;
  v4 = 0;
  v5 = 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v32 = a2 + 1;
    do
    {
      v8 = *(uint64_t **)(a1 + 1680);
      if (v8)
      {
        do
        {
          v9 = (int *)((char *)&v32[v7] + v32[v7]);
          v10 = (unsigned __int16 *)((char *)v9 - *v9);
          if (*v10 >= 5u && (v11 = v10[2]) != 0)
            v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
          else
            v12 = 0;
          std::string::basic_string[abi:nn180100]<0>(__p, v12 + 4);
          v13 = *((char *)v8 + 39);
          v14 = v35;
          if ((v35 & 0x80u) == 0)
            v15 = v35;
          else
            v15 = (size_t)__p[1];
          if ((v35 & 0x80u) == 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          if (v13 >= 0)
            v17 = *((unsigned __int8 *)v8 + 39);
          else
            v17 = v8[3];
          if (v13 >= 0)
            v18 = v8 + 2;
          else
            v18 = (const void *)v8[2];
          if (v17 >= v15)
            v19 = v15;
          else
            v19 = v17;
          if (!memcmp(v16, v18, v19) && v17 == v15)
          {
            if ((unint64_t)v5 >= v6)
            {
              v22 = (v5 - v4) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                abort();
              if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v23)
                v23 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
              if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v23;
              if (v24)
                v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v24);
              else
                v25 = 0;
              v26 = (char *)(v24 + 4 * v22);
              *(_DWORD *)v26 = *((_DWORD *)v8 + 10);
              v21 = v26 + 4;
              while (v5 != v4)
              {
                v27 = *((_DWORD *)v5 - 1);
                v5 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              v6 = v24 + 4 * v25;
              if (v4)
                operator delete(v4);
              v4 = v26;
            }
            else
            {
              *(_DWORD *)v5 = *((_DWORD *)v8 + 10);
              v21 = v5 + 4;
            }
            v14 = v35;
            v5 = v21;
          }
          if ((v14 & 0x80) != 0)
            operator delete(__p[0]);
          v8 = (uint64_t *)*v8;
        }
        while (v8);
        v3 = *a2;
      }
      ++v7;
    }
    while (v7 < v3);
  }
  if (v5 == v4)
    v28 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  else
    v28 = (const unsigned __int8 *)v4;
  *a3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((flatbuffers::FlatBufferBuilder *)(a1 + 2472), v28, (v5 - v4) >> 2);
  if (v4)
    operator delete(v4);
  return v5 != v4;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;

  v3 = a3;
  *((_BYTE *)a1 + 70) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

void AGCLLVMObject::~AGCLLVMObject(AGCLLVMObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t i;
  void *v19;
  char *v20;

  *(_QWORD *)this = &unk_1E7EC0520;
  *((_QWORD *)this + 4) = &unk_1E7EC0610;
  v2 = *((_QWORD *)this + 58);
  *(_QWORD *)(v2 + 160) = 0;
  if (*(char *)(v2 + 327) < 0)
  {
    **(_BYTE **)(v2 + 304) = 0;
    *(_QWORD *)(v2 + 312) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 304) = 0;
    *(_BYTE *)(v2 + 327) = 0;
  }
  MEMORY[0x1CAA2D494](v2 + 8, &unk_1C3E4D9BB);
  v3 = *((_QWORD *)this + 50);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  if (*((_QWORD *)this + 46))
  {
    v4 = MEMORY[0x1CAA2CC9C]();
    MEMORY[0x1CAA2D68C](v4, 0x10B2C407FF26C1CLL);
  }
  if (*((_DWORD *)this + 825))
  {
    v5 = *((unsigned int *)this + 824);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(llvm **)(*((_QWORD *)this + 411) + v6);
        if (v8 != (llvm *)-8 && v8 != 0)
          llvm::deallocate_buffer(v8, (void *)(*(_QWORD *)v8 + 17));
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  free(*((void **)this + 411));
  if (*((char *)this + 3271) < 0)
    operator delete(*((void **)this + 406));
  if (*((char *)this + 3247) < 0)
    operator delete(*((void **)this + 403));
  v10 = (char *)*((_QWORD *)this + 385);
  if (v10 != (char *)this + 3096)
    free(v10);
  v11 = (char *)*((_QWORD *)this + 367);
  if (v11 != (char *)this + 2952)
    free(v11);
  v12 = (char *)*((_QWORD *)this + 357);
  if (v12 != (char *)this + 2872)
    free(v12);
  v13 = (char *)*((_QWORD *)this + 347);
  if (v13 != (char *)this + 2792)
    free(v13);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2664));
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2568));
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2472));
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this + 2432);
  v14 = (void *)*((_QWORD *)this + 287);
  if (v14)
  {
    *((_QWORD *)this + 288) = v14;
    operator delete(v14);
  }
  v15 = (void **)*((_QWORD *)this + 280);
  if (v15)
  {
    do
    {
      v16 = (void **)*v15;
      if (*((char *)v15 + 47) < 0)
        operator delete(v15[3]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v17)
    operator delete(v17);
  for (i = 2184; i != 1624; i -= 40)
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this + i);
  v19 = (void *)*((_QWORD *)this + 53);
  if (v19)
  {
    *((_QWORD *)this + 54) = v19;
    operator delete(v19);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMObject *)((char *)this + 168));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMObject *)((char *)this + 160));
  v20 = (char *)*((_QWORD *)this + 5);
  if (v20 != (char *)this + 56)
    free(v20);
  *(_QWORD *)this = &unk_1E7ECDDE8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(_QWORD **)(v2 + 8));
    MEMORY[0x1CAA2D68C](v2, 0x1060C40C2B13FB5);
  }
  if (*((_QWORD *)this + 5))
  {
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
    else
      MEMORY[0x1CAA2D674](*((_QWORD *)this + 5), 0x1000C8077774924);
  }
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void AGCLLVMG16PB0TargetLowerer::~AGCLLVMG16PB0TargetLowerer(AGCLLVMG16PB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(AGCLLVMGen3TargetLowerer *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm *v17;

  *(_QWORD *)this = &off_1E7ECB680;
  v2 = *((_QWORD *)this + 316);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2512));
  v4 = *((_QWORD *)this + 313);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2488));
  v6 = *((_QWORD *)this + 310);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2464));
  v8 = *((_QWORD *)this + 307);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2440));
  if (*((_DWORD *)this + 579))
  {
    v9 = *((unsigned int *)this + 578);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 8 * v9;
      do
      {
        v12 = *(llvm **)(*((_QWORD *)this + 288) + v10);
        if (v12 != (llvm *)-8 && v12 != 0)
          llvm::deallocate_buffer(v12, (void *)(*(_QWORD *)v12 + 33));
        v10 += 8;
      }
      while (v11 != v10);
    }
  }
  free(*((void **)this + 288));
  if (*((_DWORD *)this + 571))
  {
    v14 = *((unsigned int *)this + 570);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 8 * v14;
      do
      {
        v17 = *(llvm **)(*((_QWORD *)this + 284) + v15);
        if (v17 != (llvm *)-8 && v17 != 0)
          llvm::deallocate_buffer(v17, (void *)(*(_QWORD *)v17 + 25));
        v15 += 8;
      }
      while (v16 != v15);
    }
  }
  free(*((void **)this + 284));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 282));
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
}

void AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(AGCLLVMTargetLowerer *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  *(_QWORD *)this = &off_1E7ECB090;
  v2 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x1CAA2C150]((char *)this + 376);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMTargetLowerer *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMTargetLowerer *)((char *)this + 128));
  v4 = (char *)*((_QWORD *)this + 1);
  if (v4 != (char *)this + 24)
    free(v4);
}

void AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::~AGCDylibBindPointLayoutT()
{
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMAGPVertexShader::getCompilationKeyDescription(AGCLLVMAGPVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *__p[2];
  char v44;
  void *v45[2];
  _QWORD v46[11];
  char v47;
  _BYTE v48[152];
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  std::string::basic_string[abi:nn180100]<0>(v41, "AGCVertexContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v39, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v45);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v46[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v46[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v49, (const void **)v39, (uint64_t)__p);
  if (v44 < 0)
    operator delete(__p[0]);
  v45[0] = *(void **)MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)v45 + *((_QWORD *)v45[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v46[0] = v5;
  v46[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v47 < 0)
    operator delete((void *)v46[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](v48);
  std::string::basic_string[abi:nn180100]<0>(v45, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v50, (const void **)v45, *(_DWORD *)(v3 + 12) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v51, (const void **)__p, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "partition_mode");
  _agcFieldString<char const*>(&v52, (const void **)v37, _agcTessellationPartitionModeStrings[(*(_QWORD *)(v3 + 16) >> 8) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v35, "step_function");
  _agcFieldString<char const*>(&v53, (const void **)v35, _agcTessellationStepFunctionStrings[(*(_QWORD *)(v3 + 16) >> 10) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v33, "vertex_amplification_mode");
  _agcFieldString<char const*>(&v54, (const void **)v33, _AGCVertexAmplificationModeStrings[(*(_QWORD *)(v3 + 16) >> 12) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v31, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned long long>(&v55, (const void **)v31, (*(_QWORD *)(v3 + 16) >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(v29, "customBorderColor");
  _agcFieldString<unsigned long long>(&v56, (const void **)v29, (*(_QWORD *)(v3 + 16) >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(v27, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v57, (const void **)v27, (*(_DWORD *)(v3 + 12) >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v25, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v58, (const void **)v25, (*(_DWORD *)(v3 + 12) >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v59, (const void **)v23, (*(_DWORD *)(v3 + 12) >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v60, (const void **)v21, (*(_DWORD *)(v3 + 12) >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v19, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v61, (const void **)v19, (*(_DWORD *)(v3 + 12) >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v17, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v62, (const void **)v17, (unsigned __int16)(*(_DWORD *)(v3 + 12) >> 10));
  std::string::basic_string[abi:nn180100]<0>(v15, "enableStackShadow");
  _agcFieldString<unsigned int>(&v63, (const void **)v15, (*(_DWORD *)(v3 + 12) >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v13, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v64, (const void **)v13, *(_DWORD *)(v3 + 12) >> 31);
  std::string::basic_string[abi:nn180100]<0>(v11, "flatVaryingAnalysis");
  _agcFieldString<unsigned long long>(&v65, (const void **)v11, (*(_QWORD *)(v3 + 16) >> 21) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "positionInvariance");
  _agcFieldString<unsigned long long>(&v66, (const void **)v9, (*(_QWORD *)(v3 + 16) >> 23) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "enableFMAFold");
  _agcFieldString<unsigned long long>(&v67, (const void **)v7, (*(_QWORD *)(v3 + 16) >> 24) & 1);
  _agcGroupWithHeader(a2, (uint64_t)v41, (uint64_t)&v49, 19);
  v6 = 456;
  do
  {
    if (v49.__r_.__value_.__s.__data_[v6 - 1] < 0)
      operator delete(*(void **)&v48[v6 + 128]);
    v6 -= 24;
  }
  while (v6);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v44 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46[0]) < 0)
    operator delete(v45[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
}

void _agcFieldString<unsigned long long>(std::string *a1, const void **a2, unint64_t __val)
{
  std::string v5;

  std::to_string(&v5, __val);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  BOOL *v11;
  BOOL *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  const char *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  llvm::Module *v34;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v36;
  unsigned int v37;
  uint64_t Operand;
  uint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL *v44;
  BOOL *v45;
  const char *v46;
  __int16 v47;

  v11 = (BOOL *)(a1 + 9456);
  v12 = (BOOL *)(a1 + 5057);
  v13 = AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(a1, a2 + 1, a3, a4, 0);
  v14 = *a2;
  *(_QWORD *)v13 = *a2;
  *(_QWORD *)(v13 + *(_QWORD *)(v14 - 24)) = a2[10];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 - 24) + v13 + 32) = a2[11];
  *(_DWORD *)(v13 + 9440) = 0;
  *(_OWORD *)(v13 + 9424) = 0u;
  *(_DWORD *)(v13 + 9444) = 16;
  *(_QWORD *)(v13 + 9456) = 0;
  *(_QWORD *)(v13 + 9464) = v13 + 9480;
  *(_QWORD *)(v13 + 9472) = 0x1000000000;
  *(_QWORD *)(v13 + 9992) = v13 + 10008;
  *(_QWORD *)(v13 + 10000) = 0x400000000;
  *(_WORD *)(v13 + 10049) = 0;
  if (a5 && a6)
  {
    v15 = (int *)((char *)a5 + *a5);
    v16 = (int *)((char *)a6 + *a6);
    v17 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v17 >= 5u && (v18 = v17[2]) != 0)
      v19 = (int *)((char *)v15 + v18 + *(unsigned int *)((char *)v15 + v18));
    else
      v19 = 0;
    v20 = (unsigned __int16 *)((char *)v16 - *v16);
    v44 = v12;
    v45 = v11;
    if (*v20 >= 5u && (v21 = v20[2]) != 0)
      v22 = (char *)v16 + v21 + *(unsigned int *)((char *)v16 + v21);
    else
      v22 = 0;
    if (*v19)
    {
      v23 = 0;
      v24 = v22 + 4;
      v25 = (const char *)(v19 + 2);
      v26 = v19 + 2;
      do
      {
        v27 = *(_DWORD *)&v24[4 * v23];
        v28 = *((unsigned int *)v25 - 1);
        v29 = strlen(&v25[v28]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 9424), (char *)v26 + v28, v29)+ 8) = v27;
        ++v23;
        ++v26;
        v25 += 4;
      }
      while (v23 < *v19);
    }
    v12 = v44;
    v11 = v45;
    *v45 = (*(_DWORD *)(a4 + 16) & 0x40000) != 0;
  }
  *(_DWORD *)(a1 + 5048) = *(unsigned __int8 *)(a4 + 16);
  *(_DWORD *)(a1 + 5052) = *(_DWORD *)(a4 + 8);
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  *(_BYTE *)(a1 + 18) = (*(_BYTE *)(a4 + 12) & 8) != 0;
  v30 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2760) = (*(_DWORD *)(a4 + 12) & 0x4000000) != 0;
  *(_QWORD *)(a1 + 3304) = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 5088) = (*(_DWORD *)(a4 + 16) >> 12) & 3;
  v31 = (*(_DWORD *)(a4 + 16) >> 14) & 0xF;
  *(_DWORD *)(a1 + 5084) = v31;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 - 24) + a1 + 400) + 1753))
    v32 = v31 > 1;
  else
    v32 = 0;
  v33 = v32;
  v12[25] = v33;
  v12[4] = (*(_DWORD *)(a4 + 16) & 0x8000000) != 0;
  if (v33 == 1)
    *(_DWORD *)(a1 + 5088) = 0;
  *(_BYTE *)(a1 + 20) = (*(_BYTE *)(a4 + 12) & 4) != 0;
  v11[1] = (*(_DWORD *)(a4 + 16) & 0x80000) != 0;
  *(_DWORD *)(a1 + 10040) = (*(_DWORD *)(a4 + 12) >> 4) & 7;
  *(_DWORD *)(a1 + 10044) = *(_DWORD *)(a4 + 12) >> 31;
  v11[595] = (*(_DWORD *)(a4 + 12) & 0x40000000) != 0;
  v11[2] = (*(_DWORD *)(a4 + 16) & 0x100000) != 0;
  v11[592] = (*(_DWORD *)(a4 + 12) & 0x80) != 0;
  *v12 = (*(_DWORD *)(a4 + 16) & 0x800000) != 0;
  v12[1] = *(_BYTE *)(a4 + 19) & 1;
  v12[3] = (*(_DWORD *)(a4 + 16) & 0x2000000) != 0;
  v11[3] = (*(_DWORD *)(a4 + 16) & 0x4000000) != 0;
  *(_BYTE *)(a1 + 3712) = *(_BYTE *)(a4 + 13) & 1;
  *(_BYTE *)(a1 + 3713) = (*(_DWORD *)(a4 + 12) & 0x200) != 0;
  v11[594] = (*(_DWORD *)(a4 + 12) & 0x20000000) != 0;
  v34 = *(llvm::Module **)(*(_QWORD *)(v30 - 24) + a1 + 368);
  v46 = "llvm.module.flags";
  v47 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v34, (const llvm::Twine *)&v46);
  if (NamedMetadata)
  {
    v36 = (llvm::NamedMDNode *)NamedMetadata;
    v37 = 0;
LABEL_25:
    if (v37 < llvm::NamedMDNode::getNumOperands(v36))
    {
      Operand = llvm::NamedMDNode::getOperand(v36);
      v39 = 8 - 8 * *(unsigned int *)(Operand + 8);
      do
      {
        if (!v39)
        {
          ++v37;
          goto LABEL_25;
        }
        v40 = isStringMDNode(*(llvm::MDString **)(Operand + v39), "agx.allow_mismatched_component_counts");
        v39 += 8;
      }
      while (!v40);
      v41 = *(_QWORD *)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 16) + 128);
      v42 = (_QWORD *)(v41 + 24);
      if (*(_DWORD *)(v41 + 32) >= 0x41u)
        v42 = (_QWORD *)*v42;
      if (*v42)
        v11[593] = 1;
    }
  }
  return a1;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 17, 8);
  v11 = v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 8) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t AGCLLVMUserFragmentShader::buildBlendEquation(_QWORD *a1, llvm::Type **a2, llvm::Type **a3, llvm::Value *a4, int a5, int a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  char *v16;
  llvm::Type **v17;
  uint64_t Element;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  llvm::IRBuilderBase *v22;
  llvm::Value *v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t FAdd;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t FMul;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _BYTE v50[32];
  __int16 v51;

  v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (a10)
  {
    v17 = a2;
    Element = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)(v16 + 32), (llvm::Value *)a2, 0, 3, 1);
    v19 = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), a4, 0, 3, 1);
  }
  else
  {
    v20 = (llvm::IRBuilderBase *)(v16 + 40);
    v51 = 257;
    v21 = (llvm::Value *)llvm::ConstantInt::get();
    v17 = a2;
    Element = llvm::IRBuilderBase::CreateExtractElement(v20, (llvm::Value *)a2, v21, (const llvm::Twine *)v50);
    v22 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v51 = 257;
    v23 = (llvm::Value *)llvm::ConstantInt::get();
    v19 = llvm::IRBuilderBase::CreateExtractElement(v22, a4, v23, (const llvm::Twine *)v50);
  }
  v24 = v19;
  if (a5 == 6)
  {
    v25 = (llvm::Value *)llvm::ConstantFP::get();
    if (a10)
      FMul = (uint64_t)AGCLLVMBuilder::splat((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), 3, v25);
    else
      FMul = (uint64_t)v25;
    goto LABEL_10;
  }
  FMul = Element;
  if ((a5 - 1) >= 2)
  {
LABEL_10:
    v26 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v27 = AGCLLVMUserFragmentShader::buildBlendFactor(a1, v17, a3, a4, a6, a8, a9, a10);
    v51 = 257;
    FMul = llvm::IRBuilderBase::CreateFMul(v26, FMul, (uint64_t)v27, (uint64_t)v50);
    v28 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v29 = AGCLLVMUserFragmentShader::buildBlendFactor(a1, v17, a3, a4, a7, a8, a9, a10);
    v51 = 257;
    v24 = llvm::IRBuilderBase::CreateFMul(v28, v24, (uint64_t)v29, (uint64_t)v50);
  }
  switch(a5)
  {
    case 1:
      v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v34 = *((_QWORD *)v33 + 50);
      v47 = *(_OWORD *)(v33 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 40));
      v49 = *((_DWORD *)v33 + 34);
      v32 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 48))(v34, &v47, FMul, v24, 0);
      if (v48)
        goto LABEL_17;
      return v32;
    case 2:
      v35 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v36 = *((_QWORD *)v35 + 50);
      v44 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v35 + 40));
      v46 = *((_DWORD *)v35 + 34);
      v32 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 56))(v36, &v44, FMul, v24, 0);
      if (v45)
LABEL_17:
        llvm::MetadataTracking::untrack();
      return v32;
    case 3:
    case 6:
      v30 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v51 = 257;
      FAdd = llvm::IRBuilderBase::CreateFAdd(v30, FMul, v24, (uint64_t)v50);
      goto LABEL_21;
    case 4:
      v37 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v51 = 257;
      v38 = FMul;
      v39 = v24;
      goto LABEL_20;
    case 5:
      v37 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v51 = 257;
      v38 = v24;
      v39 = FMul;
LABEL_20:
      FAdd = llvm::IRBuilderBase::CreateFSub(v37, v38, v39, (uint64_t)v50);
LABEL_21:
      v32 = FAdd;
      break;
    default:
      v32 = 0;
      break;
  }
  return v32;
}

uint64_t llvm::IRBuilderBase::CreateFMul(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = llvm::IRBuilderBase::foldConstant(a1, 18, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::foldConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  BOOL v9;

  v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    a3 = 0;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    a4 = 0;
  if (a3)
    v6 = a4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72));
    if (v5)
      v9 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
  }
  return v5;
}

llvm::Value *AGCLLVMUserFragmentShader::buildBlendFactor(_QWORD *a1, llvm::Type **a2, llvm::Type **a3, llvm::Value *a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  llvm::Value *v10;
  llvm::Type **v11;
  llvm::Value *v17;
  llvm::GlobalVariable *GlobalVariable;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  llvm::Type *v23;
  llvm::Value *AlignedLoad;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type **v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::IRBuilderBase *v38;
  llvm::Value *v39;
  uint64_t v40;
  llvm::Value *v41;
  llvm::IRBuilderBase *v42;
  llvm::Value *v43;
  int v44;
  char *v45;
  uint64_t v46;
  llvm::IRBuilderBase *v47;
  llvm::Value *v48;
  uint64_t Element;
  llvm::IRBuilderBase *v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t FSub;
  char *v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  char *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t InsertElement;
  char *v63;
  uint64_t v64;
  char *v65;
  llvm::IRBuilderBase *v66;
  llvm::Value *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  AGCLLVMBuilder *v72;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  _QWORD v82[4];
  __int16 v83;

  v8 = a8;
  v10 = a4;
  v11 = a3;
  if ((a5 & 0xFFFFFFFC) == 0xC)
  {
    GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v82[0] = "agc.blend_color";
      v83 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v20 = *((_QWORD *)v19 + 47);
      v21 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v19 + 32), GlobalVariable);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v20, v21);
    }
    v22 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v83 = 257;
    v23 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)GlobalVariable, v17);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v22 + 5, v23, (uint64_t)GlobalVariable, 0, (uint64_t)v82);
    v25 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v26 = *((_QWORD *)v25 + 50);
    v79 = *(_OWORD *)(v25 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v25 + 40));
    v81 = *((_DWORD *)v25 + 34);
    v29 = (llvm::Type **)AGCLLVMTargetLowerer::buildClampColor(v26, (uint64_t)&v79, AlignedLoad, a6, 0);
    if (v80)
      llvm::MetadataTracking::untrack();
    v30 = AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v29, *a2, a7, 1, 0, v27, v28);
    v8 = a8;
    v11 = a3;
    v10 = a4;
  }
  else
  {
    v30 = 0;
  }
  switch(a5)
  {
    case 1:
    case 2:
      v31 = llvm::ConstantFP::get();
      goto LABEL_39;
    case 3:
      goto LABEL_32;
    case 4:
      v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v33 = llvm::ConstantFP::get();
      v34 = (uint64_t)(v32 + 40);
      v83 = 257;
      v35 = (uint64_t)a2;
      goto LABEL_30;
    case 5:
      v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v38 = (llvm::IRBuilderBase *)v36;
      v39 = (llvm::Value *)a2;
      goto LABEL_36;
    case 6:
      v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v42 = (llvm::IRBuilderBase *)v40;
      v43 = (llvm::Value *)a2;
      goto LABEL_38;
    case 7:
      v44 = 1;
      a2 = (llvm::Type **)v10;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 8:
      v45 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v33 = llvm::ConstantFP::get();
      v34 = (uint64_t)(v45 + 40);
      v83 = 257;
      v35 = (uint64_t)v10;
      goto LABEL_30;
    case 9:
      v46 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v38 = (llvm::IRBuilderBase *)v46;
      v39 = v10;
      goto LABEL_36;
    case 10:
      v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v42 = (llvm::IRBuilderBase *)v40;
      v43 = v10;
      goto LABEL_38;
    case 11:
      v47 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v83 = 257;
      v48 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement(v47, (llvm::Value *)a2, v48, (const llvm::Twine *)v82);
      v50 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v83 = 257;
      v51 = (llvm::Value *)llvm::ConstantInt::get();
      v52 = llvm::IRBuilderBase::CreateExtractElement(v50, v10, v51, (const llvm::Twine *)v82);
      v53 = llvm::ConstantFP::get();
      v83 = 257;
      FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v50, v53, v52, (uint64_t)v82);
      v55 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v56 = *((_QWORD *)v55 + 50);
      v76 = *(_OWORD *)(v55 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v55 + 40));
      v78 = *((_DWORD *)v55 + 34);
      v57 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v56 + 48))(v56, &v76, Element, FSub, 0);
      if (v77)
        llvm::MetadataTracking::untrack();
      v58 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), 4, v57);
      v59 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v60 = (llvm::Value *)llvm::ConstantFP::get();
      v83 = 257;
      v61 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v59 + 40), v58, v60, v61, (const llvm::Twine *)v82);
      goto LABEL_31;
    case 12:
      v44 = 1;
      a2 = v30;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 13:
      v63 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v33 = llvm::ConstantFP::get();
      v34 = (uint64_t)(v63 + 40);
      v83 = 257;
      v35 = (uint64_t)v30;
      goto LABEL_30;
    case 14:
      v64 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v38 = (llvm::IRBuilderBase *)v64;
      v39 = (llvm::Value *)v30;
      goto LABEL_36;
    case 15:
      v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v42 = (llvm::IRBuilderBase *)v40;
      v43 = (llvm::Value *)v30;
      goto LABEL_38;
    case 16:
      v44 = 1;
      a2 = v11;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 17:
      v65 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v33 = llvm::ConstantFP::get();
      v34 = (uint64_t)(v65 + 40);
      v83 = 257;
      v35 = (uint64_t)v11;
LABEL_30:
      InsertElement = llvm::IRBuilderBase::CreateFSub(v34, v33, v35, (uint64_t)v82);
LABEL_31:
      a2 = (llvm::Type **)InsertElement;
LABEL_32:
      v44 = 1;
      if (!v8)
        goto LABEL_33;
      goto LABEL_41;
    case 18:
      v69 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v38 = (llvm::IRBuilderBase *)v69;
      v39 = (llvm::Value *)v11;
LABEL_36:
      v31 = llvm::IRBuilderBase::CreateExtractElement(v38, v39, v37, (const llvm::Twine *)v82);
      goto LABEL_39;
    case 19:
      v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v83 = 257;
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v42 = (llvm::IRBuilderBase *)v40;
      v43 = (llvm::Value *)v11;
LABEL_38:
      v70 = llvm::IRBuilderBase::CreateExtractElement(v42, v43, v41, (const llvm::Twine *)v82);
      v71 = llvm::ConstantFP::get();
      v83 = 257;
      v31 = llvm::IRBuilderBase::CreateFSub(v40, v71, v70, (uint64_t)v82);
LABEL_39:
      a2 = (llvm::Type **)v31;
      break;
    default:
      a2 = 0;
      break;
  }
  v44 = 0;
  if (v8)
  {
LABEL_41:
    v72 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    if (v44)
      return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v72, (llvm::Value *)a2, 0, 3, 1);
    else
      return AGCLLVMBuilder::splat(v72, 3, (llvm::Value *)a2);
  }
LABEL_33:
  if (v44)
  {
    v66 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v83 = 257;
    v67 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v66, (llvm::Value *)a2, v67, (const llvm::Twine *)v82);
  }
  return (llvm::Value *)a2;
}

uint64_t llvm::IRBuilderBase::CreateFSub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = llvm::IRBuilderBase::foldConstant(a1, 16, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateFAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = llvm::IRBuilderBase::foldConstant(a1, 14, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

llvm::Value *AGCLLVMBuilder::splat(AGCLLVMBuilder *this, int a2, llvm::Value *a3)
{
  llvm::Value *Splat;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *InsertElement;
  llvm::Value *v9;
  _BYTE v11[32];
  __int16 v12;

  if (a2 != 1)
  {
    llvm::ConstantInt::get();
    Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    llvm::FixedVectorType::get();
    v6 = (llvm::Value *)llvm::UndefValue::get();
    v12 = 257;
    v7 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v6, a3, v7, (const llvm::Twine *)v11);
    v9 = (llvm::Value *)llvm::UndefValue::get();
    v12 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v9, Splat, (const llvm::Twine *)v11);
  }
  return a3;
}

uint64_t llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(_DWORD *a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;

  v8 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)a1, *a2, &v8);
  if ((result & 1) != 0)
    return result;
  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::grow((uint64_t)a1, v6);
    v8 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)a1, *a2, &v8);
  }
  v7 = v8;
  *a1 += 2;
  if (*v7 != -4096)
    --a1[1];
  *v7 = *a2;
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(a1 + 6), *a2);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((a2 >> 4) ^ (a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t AGCLLVMUserObject::replaceRaytracingFunctions(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  uint64_t v2;
  _BYTE *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  _BYTE *p_p;
  size_t v19;
  __int16 v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  void **v28;
  size_t v29;
  uint64_t v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  size_t v35;
  uint64_t v36;
  _BOOL4 v37;
  char *v38;
  std::string *v39;
  std::string::size_type size;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string *v66;
  __int128 v67;
  unsigned int v68;
  std::string *v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  AGCLLVMUserObject *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t GlobalRayStridesGlobal;
  _QWORD *(*v83)(void **__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  __int128 v85;
  _BYTE *v86;
  _BOOL8 v87;
  _QWORD *n;
  BOOL v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t Function;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  llvm::Instruction **v111;
  llvm::Instruction *v112;
  int v113;
  uint64_t v114;
  int v115;
  llvm::Instruction **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Type *IntersectionFunctionTableHeapGlobal;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  llvm::Instruction *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  llvm::Instruction *v131;
  llvm::Instruction *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  llvm::Instruction *v136;
  char *v137;
  uint64_t v138;
  llvm::Instruction *v139;
  char *v140;
  uint64_t v141;
  llvm::Instruction *v142;
  llvm::Instruction *v143;
  char *v144;
  uint64_t v145;
  llvm::Instruction *v146;
  uint64_t *v147;
  llvm::Instruction *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  llvm::Instruction *v152;
  char *v153;
  uint64_t v154;
  llvm::Instruction *v155;
  llvm::Instruction *v156;
  char *v157;
  uint64_t v158;
  llvm::Instruction *v159;
  llvm::Instruction *v160;
  char *v161;
  uint64_t v162;
  llvm::Instruction *v163;
  uint64_t *v164;
  llvm::Instruction *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  llvm::Instruction *v169;
  char *v170;
  uint64_t v171;
  llvm::Instruction *v172;
  llvm::Instruction *v173;
  char *v174;
  uint64_t v175;
  llvm::Instruction *v176;
  char *v177;
  uint64_t v178;
  llvm::Instruction *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  llvm::ConstantPointerNull *v186;
  llvm::PointerType *v187;
  llvm::ConstantPointerNull *v188;
  llvm::PointerType *v189;
  uint64_t v190;
  _QWORD *v191;
  llvm::Type **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *v198;
  _QWORD *v199;
  unsigned int ABITypeAlignment;
  unint64_t v201;
  llvm::ConstantPointerNull *v202;
  llvm::PointerType *v203;
  llvm::PointerType *v204;
  uint64_t *v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  AGCLLVMUserObject *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  unint64_t v230;
  BOOL v231;
  BOOL v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t *v237;
  llvm::Value *v238;
  llvm::CmpInst **v239;
  uint64_t v240;
  uint64_t *v241;
  llvm::CmpInst **v242;
  uint64_t v243;
  llvm::Value *v244;
  uint64_t *v245;
  llvm::CmpInst **v246;
  uint64_t v247;
  llvm::Value *v248;
  llvm::Value *FCmpHelper;
  llvm::Value *v250;
  llvm::IRBuilderBase *v251;
  llvm::Value *v252;
  llvm::IRBuilderBase *v253;
  llvm::Value *v254;
  llvm::IRBuilderBase *v255;
  llvm::Value *v256;
  llvm::Value *v257;
  llvm::IRBuilderBase *v258;
  void **v259;
  AGCLLVMUserObject *v260;
  llvm::Instruction *v261;
  uint64_t v262;
  char *v263;
  AGCLLVMUserObject *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  AGCLLVMUserObject *v270;
  llvm::Type *v271;
  char *v272;
  AGCLLVMUserObject *v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  _QWORD *v286;
  unsigned int v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  llvm::Instruction *v299;
  llvm::IRBuilderBase *v300;
  llvm::Value *PointerCast;
  llvm::Value *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint8x8_t v308;
  _QWORD **v309;
  _QWORD *v310;
  unint64_t v311;
  float v312;
  float v313;
  _BOOL8 v314;
  unint64_t v315;
  unint64_t v316;
  int8x8_t prime;
  void *v318;
  void *v319;
  uint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  uint8x8_t v323;
  unint64_t v324;
  uint8x8_t v325;
  uint64_t v326;
  uint64_t *v327;
  char *v328;
  char *v329;
  __int128 v330;
  __int128 v331;
  char *v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  char *v336;
  char *v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  char *v343;
  char *v344;
  _QWORD *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  void *v351;
  uint64_t *ii;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  llvm::Instruction *v358;
  uint64_t v359;
  AGCLLVMUserObject *v360;
  uint64_t v361;
  uint64_t InsertValue;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  llvm::Module *v369;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v372;
  int v373;
  char *v374;
  char *v375;
  int v376;
  uint64_t v377;
  char *v378;
  char *v379;
  char *v380;
  int v381;
  uint64_t v382;
  char *v383;
  char *v384;
  AGCLLVMUserObject *v385;
  char *v386;
  uint64_t Value;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  llvm::Type *jj;
  uint64_t v411;
  uint64_t v412;
  llvm::Instruction *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t Cast;
  uint64_t v418;
  char *v419;
  _QWORD *v420;
  BOOL v421;
  int v422;
  BOOL v423;
  int v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  llvm::IRBuilderBase *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t Name;
  uint64_t v435;
  BOOL v436;
  BOOL v437;
  BOOL v438;
  uint64_t v439;
  llvm::Instruction *v440;
  uint64_t *v441;
  llvm::Type **GlobalBindingTableGlobal;
  llvm::Value *v443;
  llvm::Type *v444;
  uint64_t AlignedLoad;
  char *v446;
  uint64_t v447;
  uint64_t DylibBaseGetterFunc;
  AGCLLVMUserObject *v449;
  _BYTE *v450;
  uint64_t v451;
  uint64_t AccelerationStructureHeapGlobal;
  uint64_t v453;
  int v455;
  int v456;
  llvm::DataLayout *v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  char *v461;
  uint64_t *v462;
  unint64_t v463;
  char *v464;
  uint64_t *v465;
  uint64_t *v466;
  llvm::Function *v467;
  unint64_t v468;
  unint64_t v469;
  unsigned int v470;
  char *v471;
  char *v472;
  uint64_t *__dst;
  unsigned int v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  llvm::Value *ICmp;
  llvm::Value *v482;
  _QWORD *v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  llvm::Instruction *v487;
  llvm::Instruction *v488;
  llvm::Instruction *v489;
  uint64_t v490;
  llvm::Instruction **v491;
  uint64_t v492;
  llvm::Type *v493;
  unsigned int v494;
  _BYTE v496[16];
  uint64_t v497;
  _BYTE v498[16];
  uint64_t v499;
  _BYTE v500[16];
  uint64_t v501;
  _BYTE v502[16];
  uint64_t v503;
  __int128 v504;
  uint64_t v505;
  int v506;
  __int128 v507;
  uint64_t v508;
  int v509;
  __int128 v510;
  uint64_t v511;
  int v512;
  __int128 v513;
  uint64_t v514;
  int v515;
  __int128 v516;
  uint64_t v517;
  int v518;
  __int128 v519;
  uint64_t v520;
  int v521;
  __int128 v522;
  uint64_t v523;
  int v524;
  __int128 v525;
  uint64_t v526;
  int v527;
  __int128 v528;
  uint64_t v529;
  int v530;
  __int128 v531;
  uint64_t v532;
  int v533;
  __int128 v534;
  uint64_t v535;
  int v536;
  __int128 v537;
  uint64_t v538;
  int v539;
  __int128 v540;
  uint64_t v541;
  int v542;
  __int128 v543;
  uint64_t v544;
  int v545;
  __int128 v546;
  uint64_t v547;
  int v548;
  __int128 v549;
  uint64_t v550;
  int v551;
  __int128 v552;
  uint64_t v553;
  int v554;
  __int128 v555;
  uint64_t v556;
  int v557;
  __int128 v558;
  uint64_t v559;
  int v560;
  __int128 v561;
  uint64_t v562;
  int v563;
  std::string v564;
  void *v565[2];
  unsigned __int8 v566;
  std::string v567;
  void *v568[2];
  unsigned __int8 v569;
  std::string v570;
  std::string v571;
  std::string v572;
  void *__p;
  size_t v574;
  unsigned __int8 v575;
  std::string v576;
  unsigned int *p_k;
  unsigned int *v578;
  unsigned int *p_m;
  unsigned int *v580;
  unsigned int *v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int m;
  unsigned int v585;
  unsigned int k;
  unsigned int j;
  unsigned int v588;
  unsigned int i;
  std::string *v590;
  std::string *v591;
  std::string *v592;
  std::string *v593;
  std::string *v594;
  std::string *v595;
  void *v596;
  __int128 v597;
  _BYTE v598[128];
  void *v599;
  __int128 v600;
  _BYTE v601[128];
  void *v602;
  __int128 v603;
  _BYTE v604[128];
  void *v605;
  __int128 v606;
  _QWORD v607[16];
  void *v608;
  __int128 v609;
  _WORD v610[64];
  void *v611;
  __int128 v612;
  _WORD v613[64];
  void *v614;
  __int128 v615;
  uint64_t v616;
  __int16 v617;
  void *__src[4];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  uint64_t v623;
  _BYTE v624[24];
  void *v625[4];
  __int128 v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  llvm::CmpInst **v643;
  llvm::CmpInst **v644;
  _QWORD v645[2];
  uint64_t v646;
  _QWORD v647[3];
  _QWORD v648[3];
  _QWORD v649[3];
  _QWORD v650[3];
  _QWORD v651[3];
  _QWORD v652[3];
  _QWORD v653[3];
  __int128 v654;
  uint64_t v655[3];
  uint64_t v656[3];
  uint64_t v657[3];
  uint64_t v658[3];
  uint64_t v659[3];
  uint64_t v660[3];
  uint64_t v661[3];
  uint64_t v662[3];
  uint64_t v663[3];
  uint64_t v664[3];
  uint64_t v665[3];
  uint64_t v666[3];
  uint64_t v667[3];
  uint64_t v668[3];
  uint64_t v669[3];
  uint64_t v670[3];
  uint64_t v671[3];
  uint64_t v672[3];
  uint64_t v673[3];
  __int128 v674;

  v1 = this;
  *(_QWORD *)&v674 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1785)
    && !*((_BYTE *)this + 3712))
  {
    AGCLLVMUserObject::getRaytracingFunctionMap(this);
    if (!dword_1ED839104)
    {
      std::string::basic_string[abi:nn180100]<0>(v625, "air.get_intersection_params_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v625[3], "air.get_world_space_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v627, "air.get_world_space_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v630, "air.get_ray_min_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v633, "air.get_candidate_intersection_type_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v636, "air.get_candidate_triangle_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v639, "air.is_candidate_non_opaque_bounding_box_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v642, "air.get_candidate_geometry_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v645, "air.get_candidate_primitive_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v647, "air.get_candidate_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v648, "air.get_candidate_user_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v649, "air.get_candidate_instance_count_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v650, "air.get_candidate_object_to_world_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v651, "air.get_candidate_world_to_object_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v652, "air.get_candidate_triangle_barycentric_coord_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v653, "air.is_candidate_triangle_front_facing_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v654, "air.get_candidate_curve_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v655, "air.get_candidate_curve_parameter_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v656, "air.get_candidate_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v657, "air.get_candidate_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v658, "air.get_candidate_primitive_data_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v659, "air.get_committed_intersection_type_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v660, "air.get_committed_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v661, "air.get_committed_geometry_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v662, "air.get_committed_primitive_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v663, "air.get_committed_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v664, "air.get_committed_user_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v665, "air.get_committed_instance_count_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v666, "air.get_committed_object_to_world_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v667, "air.get_committed_world_to_object_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v668, "air.get_committed_triangle_barycentric_coord_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v669, "air.is_committed_triangle_front_facing_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v670, "air.get_committed_curve_parameter_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v671, "air.get_committed_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v672, "air.get_committed_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v673, "air.get_committed_primitive_data_intersection_query");
      v5 = 108;
      v593 = (std::string *)operator new(0x360uLL);
      v595 = v593 + 36;
      v594 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)v625, &v674, v593);
      do
      {
        if (SHIBYTE(v625[v5 - 1]) < 0)
          operator delete(*(void **)&v624[v5 * 8]);
        v5 -= 3;
      }
      while (v5 * 8);
      std::string::basic_string[abi:nn180100]<0>(v625, "air.get_type_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v625[3], "air.get_distance_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v627, "air.get_primitive_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v630, "air.get_geometry_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v633, "air.get_primitive_data_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v636, "air.get_instance_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v639, "air.get_user_instance_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v642, "air.get_instance_count_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v645, "air.get_triangle_barycentric_coord_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v647, "air.is_triangle_front_facing_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v648, "air.get_curve_parameter_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v649, "air.get_object_to_world_transform_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v650, "air.get_world_to_object_transform_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v651, "air.get_ray_origin_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v652, "air.get_ray_direction_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v653, "air.get_ray_min_distance_intersection_result");
      v6 = 48;
      v590 = (std::string *)operator new(0x180uLL);
      v592 = v590 + 16;
      v591 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)v625, &v654, v590);
      do
      {
        if (SHIBYTE(v625[v6 - 1]) < 0)
          operator delete(*(void **)&v624[v6 * 8]);
        v6 -= 3;
      }
      while (v6 * 8);
      v625[0] = &v625[3];
      *(_OWORD *)&v625[1] = xmmword_1C3E37F10;
      __src[0] = &__src[3];
      *(_OWORD *)&__src[1] = xmmword_1C3E37F10;
      v614 = &v616;
      v615 = xmmword_1C3E37F10;
      v611 = v613;
      v612 = xmmword_1C3E37F10;
      v608 = v610;
      v609 = xmmword_1C3E37F10;
      v605 = v607;
      v606 = xmmword_1C3E37F10;
      v602 = v604;
      v603 = xmmword_1C3E37F10;
      v599 = v601;
      v600 = xmmword_1C3E37F10;
      v596 = v598;
      v597 = xmmword_1C3E37F10;
      for (i = 0; i < 2; ++i)
      {
        v7 = 0;
        v588 = 0;
        do
        {
          v8 = v7 != 0;
          for (j = 0; j < 2; ++j)
          {
            for (k = 0; k < 2; ++k)
            {
              v585 = 0;
              do
              {
                for (m = 0; m < 2; ++m)
                {
                  v583 = 0;
                  do
                  {
                    LOWORD(v9) = 0;
                    v582 = 0;
                    do
                    {
                      v576.__r_.__value_.__r.__words[0] = (std::string::size_type)&i;
                      v576.__r_.__value_.__l.__size_ = (std::string::size_type)&v588;
                      v576.__r_.__value_.__r.__words[2] = (std::string::size_type)&j;
                      p_k = &k;
                      v578 = &v585;
                      p_m = &m;
                      v580 = &v583;
                      v581 = &v582;
                      v10 = v588 == 2;
                      v11 = v588 == 1;
                      v12 = j;
                      v13 = k;
                      v14 = v585;
                      v15 = m;
                      v16 = v583;
                      v17 = i;
                      std::string::basic_string[abi:nn180100]<0>(&v572, "air.intersect");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v576, &v572);
                      if ((v575 & 0x80u) == 0)
                        p_p = &__p;
                      else
                        p_p = __p;
                      v19 = v575;
                      if ((v575 & 0x80u) != 0)
                        v19 = v574;
                      v625[1] = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(v625, p_p, &p_p[v19]);
                      if ((char)v575 < 0)
                        operator delete(__p);
                      if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v572.__r_.__value_.__l.__data_);
                      v20 = v11 | (32 * v9) | (v10 << 6) | (8 * v12) | (v13 << 7) | (16 * v14) | (2 * v15) | (4 * v16) | (v17 << 8);
                      v21 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v625[0], (size_t)v625[1]);
                      *(_DWORD *)(v21 + 8) = 0;
                      *(_DWORD *)(v21 + 12) = v8;
                      *(_WORD *)(v21 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v571, "air.intersect_direct_access");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v576, &v571);
                      if ((v575 & 0x80u) == 0)
                        v22 = &__p;
                      else
                        v22 = __p;
                      v23 = v575;
                      if ((v575 & 0x80u) != 0)
                        v23 = v574;
                      v625[1] = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(v625, v22, &v22[v23]);
                      if ((char)v575 < 0)
                        operator delete(__p);
                      if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v571.__r_.__value_.__l.__data_);
                      v24 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v625[0], (size_t)v625[1]);
                      *(_DWORD *)(v24 + 8) = 1;
                      *(_DWORD *)(v24 + 12) = v8;
                      *(_WORD *)(v24 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v570, "air.release_intersection_result");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v576, &v570);
                      if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v570.__r_.__value_.__l.__data_);
                      if ((v575 & 0x80u) == 0)
                        v25 = &__p;
                      else
                        v25 = __p;
                      if ((v575 & 0x80u) == 0)
                        v26 = v575;
                      else
                        v26 = v574;
                      v27 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v25, v26);
                      *(_DWORD *)(v27 + 8) = 15;
                      *(_DWORD *)(v27 + 12) = v8;
                      *(_WORD *)(v27 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v567, "air.release_intersect_payload");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)v568, &v576, &v567);
                      if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v567.__r_.__value_.__l.__data_);
                      if ((v569 & 0x80u) == 0)
                        v28 = v568;
                      else
                        v28 = (void **)v568[0];
                      if ((v569 & 0x80u) == 0)
                        v29 = v569;
                      else
                        v29 = (size_t)v568[1];
                      v30 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v28, v29);
                      *(_DWORD *)(v30 + 8) = 16;
                      *(_DWORD *)(v30 + 12) = v8;
                      *(_WORD *)(v30 + 16) = v20;
                      v31 = v590;
                      v32 = v591;
                      while (v31 != v32)
                      {
                        if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v564, v31->__r_.__value_.__l.__data_, v31->__r_.__value_.__l.__size_);
                        }
                        else
                        {
                          v33 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
                          v564.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v33;
                        }
                        AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)v565, &v576, &v564);
                        if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v564.__r_.__value_.__l.__data_);
                        if ((v566 & 0x80u) == 0)
                          v34 = v565;
                        else
                          v34 = (void **)v565[0];
                        if ((v566 & 0x80u) == 0)
                          v35 = v566;
                        else
                          v35 = (size_t)v565[1];
                        v36 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v34, v35);
                        *(_DWORD *)(v36 + 8) = 14;
                        *(_DWORD *)(v36 + 12) = v8;
                        *(_WORD *)(v36 + 16) = v20;
                        if ((char)v566 < 0)
                          operator delete(v565[0]);
                        ++v31;
                      }
                      if ((char)v569 < 0)
                        operator delete(v568[0]);
                      if ((char)v575 < 0)
                        operator delete(__p);
                      v9 = v582 + 1;
                      v582 = v9;
                    }
                    while (v9 < 2);
                    ++v583;
                    v37 = v588 != 0;
                  }
                  while (v583 <= v37);
                }
                ++v585;
              }
              while (v585 <= v37);
              __src[1] = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(__src, "air.allocate_intersection_query", "");
              *(_QWORD *)&v615 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v614, "air.reset_intersection_query", "");
              *(_QWORD *)&v612 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v611, "air.next_intersection_query", "");
              *(_QWORD *)&v609 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v608, "air.abort_intersection_query", "");
              *(_QWORD *)&v606 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v605, "air.commit_triangle_intersection_intersection_query", "");
              *(_QWORD *)&v603 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v602, "air.commit_bounding_box_intersection_intersection_query", "");
              *(_QWORD *)&v600 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v599, "air.commit_curve_intersection_intersection_query", "");
              *(_QWORD *)&v597 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v596, "air.deallocate_intersection_query", "");
              if (v588)
              {
                if (v588 == 1)
                  v38 = ".instancing";
                else
                  v38 = ".multi_level_instancing";
                std::string::basic_string[abi:nn180100]<0>(&v576, v38);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v39 = &v576;
                else
                  v39 = (std::string *)v576.__r_.__value_.__r.__words[0];
                size = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v39, (_BYTE *)v39 + size);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v41 = &v576;
                else
                  v41 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v42 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v42 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v614, v41, (_BYTE *)v41 + v42);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v43 = &v576;
                else
                  v43 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v44 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v44 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v611, v43, (_BYTE *)v43 + v44);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v45 = &v576;
                else
                  v45 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v46 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v46 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v608, v45, (_BYTE *)v45 + v46);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v47 = &v576;
                else
                  v47 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v48 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v48 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v605, v47, (_BYTE *)v47 + v48);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v49 = &v576;
                else
                  v49 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v50 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v50 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v602, v49, (_BYTE *)v49 + v50);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v51 = &v576;
                else
                  v51 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v52 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v52 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v599, v51, (_BYTE *)v51 + v52);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53 = &v576;
                else
                  v53 = (std::string *)v576.__r_.__value_.__r.__words[0];
                v54 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v54 = v576.__r_.__value_.__l.__size_;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v596, v53, (_BYTE *)v53 + v54);
                if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v576.__r_.__value_.__l.__data_);
              }
              if (j)
              {
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v614, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v611, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v608, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v605, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v602, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v599, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v596, ".triangle_data", "");
              }
              v55 = k;
              if (k)
              {
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v614, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v611, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v608, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v605, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v602, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v599, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v596, ".curve_data", "");
                v55 = k;
              }
              v56 = (v588 == 1) | ((v588 == 2) << 6) | (8 * j) | (v55 << 7);
              v57 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(__src[0], (size_t)__src[1]);
              *(_DWORD *)(v57 + 8) = 2;
              *(_DWORD *)(v57 + 12) = v8;
              *(_WORD *)(v57 + 16) = v56;
              v58 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v614, v615);
              *(_DWORD *)(v58 + 8) = 3;
              *(_DWORD *)(v58 + 12) = v8;
              *(_WORD *)(v58 + 16) = v56;
              v59 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v611, v612);
              *(_DWORD *)(v59 + 8) = 4;
              *(_DWORD *)(v59 + 12) = v8;
              *(_WORD *)(v59 + 16) = v56;
              v60 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v608, v609);
              *(_DWORD *)(v60 + 8) = 5;
              *(_DWORD *)(v60 + 12) = v8;
              *(_WORD *)(v60 + 16) = v56;
              v61 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v605, v606);
              *(_DWORD *)(v61 + 8) = 6;
              *(_DWORD *)(v61 + 12) = v8;
              *(_WORD *)(v61 + 16) = v56;
              v62 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v602, v603);
              *(_DWORD *)(v62 + 8) = 7;
              *(_DWORD *)(v62 + 12) = v8;
              *(_WORD *)(v62 + 16) = v56;
              v63 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v599, v600);
              *(_DWORD *)(v63 + 8) = 8;
              *(_DWORD *)(v63 + 12) = v8;
              *(_WORD *)(v63 + 16) = v56;
              v64 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v596, v597);
              *(_DWORD *)(v64 + 8) = 10;
              *(_DWORD *)(v64 + 12) = v8;
              *(_WORD *)(v64 + 16) = v56;
              v65 = v593;
              v66 = v594;
              while (v65 != v66)
              {
                if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v576, v65->__r_.__value_.__l.__data_, v65->__r_.__value_.__l.__size_);
                }
                else
                {
                  v67 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                  v576.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v67;
                }
                v68 = v588;
                if (v588 == 1)
                {
                  std::string::append(&v576, ".instancing");
                  v68 = v588;
                }
                if (v68 == 2)
                  std::string::append(&v576, ".multi_level_instancing");
                if (j)
                  std::string::append(&v576, ".triangle_data");
                if (k)
                  std::string::append(&v576, ".curve_data");
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v69 = &v576;
                else
                  v69 = (std::string *)v576.__r_.__value_.__r.__words[0];
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v70 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
                else
                  v70 = v576.__r_.__value_.__l.__size_;
                v71 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v69, v70);
                *(_DWORD *)(v71 + 8) = 9;
                *(_DWORD *)(v71 + 12) = v8;
                *(_WORD *)(v71 + 16) = v56;
                if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v576.__r_.__value_.__l.__data_);
                ++v65;
              }
            }
          }
          v7 = v588 + 1;
          v588 = v7;
        }
        while (v7 < 3);
      }
      v72 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_size_intersection_function_table", 0x28uLL);
      *(_QWORD *)(v72 + 8) = 11;
      *(_WORD *)(v72 + 16) = 0;
      v73 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_buffer_intersection_function_table.p1i8", 0x2FuLL);
      *(_QWORD *)(v73 + 8) = 12;
      *(_WORD *)(v73 + 16) = 0;
      v74 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_buffer_intersection_function_table.p2i8", 0x2FuLL);
      *(_QWORD *)(v74 + 8) = 12;
      *(_WORD *)(v74 + 16) = 0;
      v75 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.set_buffer_intersection_function_table.p1i8", 0x2FuLL);
      *(_QWORD *)(v75 + 8) = 13;
      *(_WORD *)(v75 + 16) = 0;
      v76 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.set_buffer_intersection_function_table.p2i8", 0x2FuLL);
      *(_QWORD *)(v76 + 8) = 13;
      *(_WORD *)(v76 + 16) = 0;
      v77 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.intersect.gin1122SWWABvh", 0x1CuLL);
      *(_QWORD *)(v77 + 8) = 0;
      *(_WORD *)(v77 + 16) = 0;
      if (v596 != v598)
        free(v596);
      v1 = this;
      if (v599 != v601)
        free(v599);
      if (v602 != v604)
        free(v602);
      if (v605 != v607)
        free(v605);
      if (v608 != v610)
        free(v608);
      if (v611 != v613)
        free(v611);
      if (v614 != &v616)
        free(v614);
      if (__src[0] != &__src[3])
        free(__src[0]);
      if (v625[0] != &v625[3])
        free(v625[0]);
      v625[0] = &v590;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v625);
      v625[0] = &v593;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v625);
    }
    AGCLLVMUserObject::createSCSIFTHeapGlobal(v1);
    v78 = (AGCLLVMUserObject *)(*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1
                                                                             + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                 + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    if ((_DWORD)v78 != 29)
    {
      v79 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v80 = *((_QWORD *)v79 + 50);
      v81 = *((_QWORD *)v79 + 46);
      GlobalRayStridesGlobal = AGCLLVMUserObject::createGlobalRayStridesGlobal(this);
      v83 = *(_QWORD *(**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80 + 1288);
      v84 = v80;
      v1 = this;
      v78 = (AGCLLVMUserObject *)v83(v625, v84, v81, GlobalRayStridesGlobal);
      v85 = *(_OWORD *)&v625[2];
      *(_OWORD *)((char *)this + 3784) = *(_OWORD *)v625;
      *(_OWORD *)((char *)this + 3800) = v85;
      *(_OWORD *)((char *)this + 3816) = v626;
    }
    AGCLLVMUserObject::getRaytracingFunctionMap(v78);
    AGCLLVMUserObject::createAccelerationStructureHeapGlobal(v1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) != 8
      && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) != 29)
    {
      AGCLLVMUserObject::createSCSConfigurationBufferGlobal((char *)v1);
    }
    if (*(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1813))
    {
      v86 = (_BYTE *)*((_QWORD *)v1 + 294);
      if (v86[48])
        v87 = 1;
      else
        v87 = v86[50] != 0;
      (*(void (**)(AGCLLVMUserObject *, _BOOL8, _QWORD))(*(_QWORD *)v1 + 440))(v1, v87, v86[51]);
    }
    if (dword_1ED839100)
    {
      for (n = (_QWORD *)AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map; ; ++n)
      {
        v89 = !*n || *n == -8;
        if (!v89)
          break;
      }
    }
    else
    {
      n = (_QWORD *)AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
    }
    v90 = AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
        + 8 * dword_1ED839100;
    if (n != (_QWORD *)v90)
    {
      v468 = 0;
      v469 = 0;
      v470 = 0;
      v464 = (char *)v1 + 368;
      v471 = (char *)v1 + 336;
      v472 = (char *)v1 + 3784;
      v457 = (AGCLLVMUserObject *)((char *)v1 + 232);
      v91 = (_QWORD *)*n;
      v463 = 1;
      v458 = AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
           + 8 * dword_1ED839100;
      while (1)
      {
        v483 = v91 + 3;
        Function = llvm::Module::getFunction();
        if (Function)
        {
          v93 = *(_QWORD *)(Function + 8);
          if (v93)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            v97 = *((_WORD *)v91 + 8);
            v474 = v97 & 1;
            v494 = v97;
            v485 = v97 & 0x41;
            v467 = (llvm::Function *)Function;
            v493 = **(llvm::Type ***)(*(_QWORD *)(Function + 24) + 16);
            do
            {
              v98 = *(_QWORD *)(v93 + 24);
              if ((unint64_t)v95 >= v96)
              {
                v99 = (v95 - v94) >> 3;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 61)
LABEL_635:
                  abort();
                if ((uint64_t)(v96 - (_QWORD)v94) >> 2 > v100)
                  v100 = (uint64_t)(v96 - (_QWORD)v94) >> 2;
                if (v96 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                  v101 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v101 = v100;
                if (v101)
                {
                  v102 = v94;
                  v101 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v101);
                  v94 = v102;
                }
                else
                {
                  v103 = 0;
                }
                v104 = (char *)(v101 + 8 * v99);
                *(_QWORD *)v104 = v98;
                v105 = v104 + 8;
                while (v95 != v94)
                {
                  v106 = *((_QWORD *)v95 - 1);
                  v95 -= 8;
                  *((_QWORD *)v104 - 1) = v106;
                  v104 -= 8;
                }
                v96 = v101 + 8 * v103;
                if (v94)
                  operator delete(v94);
                v94 = v104;
                v95 = v105;
              }
              else
              {
                *(_QWORD *)v95 = v98;
                v95 += 8;
              }
              v93 = *(_QWORD *)(v93 + 8);
            }
            while (v93);
            if (v94 == v95)
            {
              v461 = v94;
              v465 = 0;
              v466 = 0;
              v1 = this;
              v90 = v458;
LABEL_551:
              llvm::Function::eraseFromParent(v467);
              if (v461)
                operator delete(v461);
              if (v466)
                operator delete(v466);
              if (v465)
                operator delete(v465);
              goto LABEL_557;
            }
            v465 = 0;
            v466 = 0;
            __dst = 0;
            v462 = 0;
            v479 = 0;
            v107 = 18;
            if (!v485)
              v107 = 16;
            v460 = v107;
            v461 = v94;
            v108 = 17;
            if (v485)
            {
              v109 = 6;
            }
            else
            {
              v108 = 15;
              v109 = 5;
            }
            if ((v494 & 6) != 0)
              ++v108;
            v475 = 0;
            v476 = v108;
            if ((v494 & 6) != 0)
              v110 = v109 + 1;
            else
              v110 = v109;
            v459 = v110;
            v111 = (llvm::Instruction **)v94;
            while (2)
            {
              v112 = *v111;
              v113 = *((_DWORD *)*v111 + 5);
              llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *v111);
              v114 = llvm::UndefValue::get();
              v115 = *((_DWORD *)v91 + 2);
              v491 = v111;
              v116 = (llvm::Instruction **)((char *)v112 - 32 * (v113 & 0x7FFFFFF));
              switch(v115)
              {
                case 0:
                case 1:
                  v89 = v115 == 1;
                  LOBYTE(v602) = v115 == 1;
                  v117 = 3;
                  if (v89)
                    v117 = 1;
                  if ((v494 & 0x40) == 0)
                    v117 = 0;
                  v118 = v476 + v117;
                  if ((v494 & 0x100) != 0)
                    v119 = v118 + 5;
                  else
                    v119 = v118;
                  v120 = *((_QWORD *)v467 + 12);
                  if ((v494 & 0x100) == 0)
                  {
                    IntersectionFunctionTableHeapGlobal = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(this);
                    AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v112, v459, IntersectionFunctionTableHeapGlobal, v122);
                  }
                  v625[0] = *v116;
                  v625[1] = v116[4];
                  v625[2] = v116[8];
                  v625[3] = v116[12];
                  *(_QWORD *)&v626 = v116[16];
                  if (v485)
                  {
                    v123 = (uint64_t *)(v116 + 24);
                    v124 = (uint64_t)v116[20];
                  }
                  else
                  {
                    v123 = (uint64_t *)(v116 + 20);
                    v124 = llvm::ConstantInt::get();
                  }
                  *((_QWORD *)&v626 + 1) = v124;
                  if ((v494 & 6) != 0)
                  {
                    v185 = *v123;
                    v123 += 4;
                    v184 = v185;
                  }
                  else
                  {
                    v184 = llvm::ConstantFP::get();
                  }
                  v488 = v112;
                  v627 = v184;
                  v186 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
                  v188 = v186;
                  if ((v494 & 0x100) != 0)
                  {
                    v628 = llvm::ConstantPointerNull::get(v186, v187);
                    v629 = *v123;
                    v630 = v123[4];
                    v631 = v123[8];
                    v191 = v123 + 16;
                    v190 = v123[12];
                  }
                  else
                  {
                    v628 = *v123;
                    v629 = llvm::ConstantPointerNull::get(v186, v187);
                    v630 = llvm::ConstantInt::get();
                    v631 = llvm::ConstantInt::get();
                    v190 = llvm::ConstantPointerNull::get(v188, v189);
                    v191 = v123 + 4;
                  }
                  v632 = v190;
                  v192 = (llvm::Type **)*v191;
                  v636 = *v191;
                  v193 = v191[4];
                  v637 = v193;
                  if (*(_BYTE *)(v193 + 16) == 16)
                    v194 = v193;
                  else
                    v194 = 0;
                  if (!v194)
                  {
                    LOBYTE(v635) = 0;
LABEL_311:
                    LODWORD(v638) = 1;
                    goto LABEL_312;
                  }
                  v195 = (uint64_t *)(v194 + 24);
                  if (*(_DWORD *)(v194 + 32) > 0x40u)
                  {
                    v197 = *(_QWORD *)*v195;
                    LOBYTE(v635) = v197 != 0;
                    if (!v197)
                      goto LABEL_311;
                    v195 = (uint64_t *)*v195;
                  }
                  else
                  {
                    v196 = (uint64_t *)*v195;
                    LOBYTE(v635) = *v195 != 0;
                    if (!v196)
                      goto LABEL_311;
                  }
                  v198 = (uint64_t *)*v195;
                  v199 = (_QWORD *)v468;
                  if (v468 <= (unint64_t)v198)
                    v199 = v198;
                  v468 = (unint64_t)v199;
                  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(v457, *v192);
                  LODWORD(v638) = ABITypeAlignment;
                  v201 = v463;
                  if (v463 <= ABITypeAlignment)
                    v201 = ABITypeAlignment;
                  v463 = v201;
LABEL_312:
                  v202 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
                  v639 = llvm::ConstantPointerNull::get(v202, v203);
                  v640 = llvm::ConstantPointerNull::get(v202, v204);
                  if ((v494 & 0x40) != 0)
                  {
                    v208 = v191[8];
                    v206 = 31;
                    v207 = v470;
                    if (v208 && *(_BYTE *)(v208 + 16) == 16)
                    {
                      v209 = (_QWORD *)(v208 + 24);
                      if (*(_DWORD *)(v208 + 32) >= 0x41u)
                        v209 = (_QWORD *)*v209;
                      v206 = *(_DWORD *)v209 - 1;
                    }
                    HIDWORD(v638) = v206;
                    if ((_BYTE)v602)
                    {
                      v205 = v191 + 12;
                    }
                    else
                    {
                      v639 = v191[12];
                      v205 = v191 + 20;
                      v640 = v191[16];
                    }
                  }
                  else
                  {
                    v205 = v191 + 8;
                    v206 = v474;
                    HIDWORD(v638) = v474;
                    v207 = v470;
                  }
                  if (v207 <= v206)
                    v207 = v206;
                  v470 = v207;
                  v641 = *v205;
                  v642 = v205[4];
                  v643 = (llvm::CmpInst **)v205[8];
                  v644 = (llvm::CmpInst **)v205[12];
                  v645[0] = v205[16];
                  v645[1] = v205[20];
                  if (v119 + 3 == v120)
                  {
                    v217 = v205[28];
                    v646 = v205[24];
                    v647[0] = v217;
                    v218 = v205 + 36;
                    v219 = v205[32];
                  }
                  else
                  {
                    v218 = v205 + 24;
                    v646 = llvm::ConstantInt::get();
                    v647[0] = llvm::ConstantInt::get();
                    v219 = llvm::ConstantInt::get();
                  }
                  v647[1] = v219;
                  if (v485)
                  {
                    v221 = *v218;
                    v218 += 4;
                    v220 = v221;
                  }
                  else
                  {
                    v220 = 0;
                  }
                  v647[2] = v220;
                  v648[0] = *v218;
                  if ((v494 & 0x100) != 0)
                  {
                    v633 = v218[4];
                    v223 = v218[8];
                    v222 = this;
                  }
                  else
                  {
                    v222 = this;
                    v633 = llvm::ConstantInt::get();
                    v223 = llvm::ConstantInt::get();
                  }
                  v634 = v223;
                  v224 = *(_QWORD *)&v464[*(_QWORD *)(*(_QWORD *)v222 - 24) + 32];
                  v225 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v224 + 960))(v224, HIDWORD(v638));
                  v226 = *((_QWORD *)v222 + 479);
                  if (v226 <= v225)
                    v226 = v225;
                  *((_QWORD *)v222 + 479) = v226;
                  v228 = (_QWORD *)(v194 + 24);
                  if (*(_DWORD *)(v194 + 32) >= 0x41u)
                    v228 = (_QWORD *)*v228;
                  v227 = *(_QWORD *)&v464[*(_QWORD *)(*(_QWORD *)v222 - 24) + 32];
                  v229 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v227 + 1272))(v227, *v228, 0, v494, HIDWORD(v638));
                  if (*v91 != 28
                    || (*v483 == 0x65746E692E726961 ? (v231 = v91[4] == 0x69672E7463657372) : (v231 = 0),
                        v231 ? (v232 = v91[5] == 0x575753323231316ELL) : (v232 = 0),
                        v232 ? (v233 = *((_DWORD *)v91 + 12) == 1752580673) : (v233 = 0),
                        !v233))
                  {
                    if (v469 <= v229)
                      v234 = v229;
                    else
                      v234 = v469;
                    v235 = v468;
                    if (v468 <= v230)
                      v235 = v230;
                    v468 = v235;
                    v469 = v234;
                  }
                  __src[0] = &v619;
                  __src[1] = &v619;
                  __src[2] = (void *)8;
                  LODWORD(__src[3]) = 0;
                  v236 = operator new(0x20uLL);
                  *v236 = &off_1E7EB9B30;
                  v236[1] = __src;
                  v236[2] = &v602;
                  v236[3] = &v605;
                  v607[0] = v236;
                  v237 = (uint64_t *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v238 = (llvm::Value *)v648[0];
                  v239 = (llvm::CmpInst **)v645[0];
                  v240 = llvm::ConstantInt::get();
                  v614 = "may_be_opaque";
                  v617 = 259;
                  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v237, 33, v239, v240, (uint64_t)&v614);
                  v241 = (uint64_t *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v242 = v644;
                  v243 = llvm::ConstantInt::get();
                  v614 = "opaque_not_culled";
                  v617 = 259;
                  v244 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v241, 33, v242, v243, (uint64_t)&v614);
                  v245 = (uint64_t *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v246 = v643;
                  v247 = llvm::ConstantInt::get();
                  v614 = "tris_not_culled";
                  v617 = 259;
                  v248 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v245, 33, v246, v247, (uint64_t)&v614);
                  llvm::ConstantFP::get();
                  v614 = "tmin_is_0";
                  v617 = 259;
                  FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
                  v614 = v488;
                  if (!v607[0])
                  {
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_637:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  (*(void (**)(_QWORD, void **))(*(_QWORD *)v607[0] + 48))(v607[0], &v614);
                  v250 = (llvm::Value *)llvm::ConstantInt::get();
                  v251 = (AGCLLVMUserObject *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v617 = 257;
                  v252 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v251, v244, v248, (const llvm::Twine *)&v614);
                  v253 = (AGCLLVMUserObject *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v617 = 257;
                  v254 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v253, v250, v238, (const llvm::Twine *)&v614);
                  v255 = (AGCLLVMUserObject *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v613[4] = 257;
                  v256 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v255, v252, FCmpHelper, (const llvm::Twine *)&v611);
                  v610[4] = 257;
                  v257 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v253, v254, v256, (const llvm::Twine *)&v608);
                  v258 = (AGCLLVMUserObject *)((char *)v222 + *(_QWORD *)(*(_QWORD *)v222 - 24) + 40);
                  v614 = "early_termination_allowed";
                  v617 = 259;
                  v648[1] = llvm::IRBuilderBase::CreateAnd(v258, v257, ICmp, (const llvm::Twine *)&v614);
                  v648[2] = v257;
                  v259 = (void **)v607[0];
                  if ((void **)v607[0] == &v605)
                  {
                    v259 = &v605;
                    v262 = 4;
                    v260 = this;
                    v261 = v488;
                  }
                  else
                  {
                    v260 = this;
                    v261 = v488;
                    if (!v607[0])
                      goto LABEL_366;
                    v262 = 5;
                  }
                  (*((void (**)(void))*v259 + v262))();
LABEL_366:
                  if (__src[1] != __src[0])
                    free(__src[1]);
                  if ((_BYTE)v602)
                  {
                    v263 = (char *)v260 + *(_QWORD *)(*(_QWORD *)v260 - 24);
                    v264 = v260;
                    v265 = *((_QWORD *)v263 + 50);
                    v561 = *(_OWORD *)(v263 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v263 + 40));
                    v563 = *((_DWORD *)v263 + 34);
                    v266 = (*(uint64_t (**)(uint64_t, __int128 *, void **, _QWORD, char *, _QWORD))(*(_QWORD *)v265 + 1024))(v265, &v561, v625, *((_QWORD *)v264 + 339), v472, v494);
                    v268 = v267;
                    if (v562)
                      llvm::MetadataTracking::untrack();
                    v269 = v475;
                    if (v475 >= v479)
                    {
                      v276 = v466;
                      v277 = 0xAAAAAAAAAAAAAAABLL * (v475 - v466) + 1;
                      if (v277 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_635;
                      if (0x5555555555555556 * (v479 - v466) > v277)
                        v277 = 0x5555555555555556 * (v479 - v466);
                      if (0xAAAAAAAAAAAAAAABLL * (v479 - v466) >= 0x555555555555555)
                        v278 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v278 = v277;
                      if (v278)
                      {
                        if (v278 > 0xAAAAAAAAAAAAAAALL)
                          goto LABEL_637;
                        v279 = (char *)operator new(24 * v278);
                        v276 = v466;
                        v269 = v475;
                      }
                      else
                      {
                        v279 = 0;
                      }
                      v327 = (uint64_t *)&v279[8 * (v475 - v466)];
                      *v327 = v266;
                      v327[1] = v268;
                      v327[2] = (uint64_t)v261;
                      if (v269 == v276)
                      {
                        v329 = &v279[8 * (v475 - v466)];
                        v116 = v491;
                        v271 = v493;
                      }
                      else
                      {
                        v328 = &v279[8 * (v475 - v466)];
                        v116 = v491;
                        v271 = v493;
                        do
                        {
                          v329 = v328 - 24;
                          v330 = *(_OWORD *)(v269 - 3);
                          *((_QWORD *)v328 - 1) = *(v269 - 1);
                          *(_OWORD *)(v328 - 24) = v330;
                          v269 -= 3;
                          v328 -= 24;
                        }
                        while (v269 != v276);
                      }
                      v479 = (uint64_t *)&v279[24 * v278];
                      v475 = v327 + 3;
                      if (v276)
                        operator delete(v276);
                      v466 = (uint64_t *)v329;
                      v270 = this;
                    }
                    else
                    {
                      *v475 = v266;
                      v475[1] = v268;
                      v475[2] = (uint64_t)v261;
                      v475 += 3;
                      v270 = this;
                      v116 = v491;
                      v271 = v493;
                    }
                  }
                  else
                  {
                    v623 = 0;
                    v622 = 0u;
                    v621 = 0u;
                    v620 = 0u;
                    v619 = 0u;
                    memset(__src, 0, sizeof(__src));
                    v272 = (char *)v260 + *(_QWORD *)(*(_QWORD *)v260 - 24);
                    v273 = v260;
                    v274 = *((_QWORD *)v272 + 50);
                    v558 = *(_OWORD *)(v272 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v272 + 40));
                    v560 = *((_DWORD *)v272 + 34);
                    (*(void (**)(void **__return_ptr, uint64_t, __int128 *, void **, _QWORD, char *, _QWORD))(*(_QWORD *)v274 + 1016))(__src, v274, &v558, v625, *((_QWORD *)v273 + 339), v472, v494);
                    if (v559)
                      llvm::MetadataTracking::untrack();
                    v275 = __dst;
                    v116 = v491;
                    if (__dst >= v462)
                    {
                      v282 = v465;
                      v283 = 0x6DB6DB6DB6DB6DB7 * (((char *)__dst - (char *)v465) >> 4) + 1;
                      if (v283 > 0x249249249249249)
                        goto LABEL_635;
                      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v462 - (char *)v465) >> 4) > v283)
                        v283 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v462 - (char *)v465) >> 4);
                      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v462 - (char *)v465) >> 4)) >= 0x124924924924924)
                        v284 = 0x249249249249249;
                      else
                        v284 = v283;
                      if (v284)
                      {
                        if (v284 > 0x249249249249249)
                          goto LABEL_637;
                        v285 = (char *)operator new(112 * v284);
                        v282 = v465;
                        v275 = __dst;
                      }
                      else
                      {
                        v285 = 0;
                      }
                      v331 = v622;
                      v332 = &v285[16 * (((char *)__dst - (char *)v465) >> 4)];
                      *((_OWORD *)v332 + 4) = v621;
                      *((_OWORD *)v332 + 5) = v331;
                      v333 = v623;
                      v334 = *(_OWORD *)&__src[2];
                      *(_OWORD *)v332 = *(_OWORD *)__src;
                      *((_OWORD *)v332 + 1) = v334;
                      v335 = v620;
                      *((_OWORD *)v332 + 2) = v619;
                      *((_OWORD *)v332 + 3) = v335;
                      *((_QWORD *)v332 + 12) = v333;
                      *((_QWORD *)v332 + 13) = v261;
                      if (v275 == v282)
                      {
                        v337 = &v285[16 * (((char *)__dst - (char *)v465) >> 4)];
                      }
                      else
                      {
                        v336 = &v285[16 * (((char *)__dst - (char *)v465) >> 4)];
                        do
                        {
                          v337 = v336 - 112;
                          v338 = *((_OWORD *)v275 - 7);
                          v339 = *((_OWORD *)v275 - 5);
                          *((_OWORD *)v336 - 6) = *((_OWORD *)v275 - 6);
                          *((_OWORD *)v336 - 5) = v339;
                          *((_OWORD *)v336 - 7) = v338;
                          v340 = *((_OWORD *)v275 - 4);
                          v341 = *((_OWORD *)v275 - 3);
                          v342 = *((_OWORD *)v275 - 1);
                          *((_OWORD *)v336 - 2) = *((_OWORD *)v275 - 2);
                          *((_OWORD *)v336 - 1) = v342;
                          *((_OWORD *)v336 - 4) = v340;
                          *((_OWORD *)v336 - 3) = v341;
                          v275 -= 14;
                          v336 -= 112;
                        }
                        while (v275 != v282);
                      }
                      v462 = (uint64_t *)&v285[112 * v284];
                      __dst = (uint64_t *)(v332 + 112);
                      if (v282)
                        operator delete(v282);
                      v465 = (uint64_t *)v337;
                    }
                    else
                    {
                      memmove(__dst, __src, 0x68uLL);
                      __dst[13] = (uint64_t)v261;
                      __dst += 14;
                    }
                    v270 = this;
                    v271 = v493;
                  }
                  v343 = (char *)v270 + *(_QWORD *)(*(_QWORD *)v270 - 24);
                  if (*(_BYTE *)(*((_QWORD *)v343 + 50) + 1813))
                  {
                    v344 = v343 + 32;
                    v555 = *(_OWORD *)(v343 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v343 + 40));
                    v557 = *((_DWORD *)v344 + 26);
                    AGCLLVMUserObject::buildRecordRaytraceForGin1122((uint64_t)this, &v555);
                    if (v556)
                      llvm::MetadataTracking::untrack();
                  }
                  goto LABEL_394;
                case 2:
                  v125 = v474;
                  if ((v494 & 0x40) != 0)
                  {
                    v126 = *v116;
                    if (*v116)
                      v127 = *((_BYTE *)*v116 + 16) == 16;
                    else
                      v127 = 0;
                    if (v127)
                    {
                      v286 = (_QWORD *)((char *)v126 + 24);
                      if (*((_DWORD *)v126 + 8) >= 0x41u)
                        v286 = (_QWORD *)*v286;
                      v125 = (*(_DWORD *)v286 - 1);
                    }
                    else
                    {
                      v125 = 31;
                    }
                  }
                  v489 = v112;
                  v287 = v470;
                  if (v470 <= v125)
                    v287 = v125;
                  v470 = v287;
                  v288 = *(_QWORD *)&v464[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                  v289 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v288 + 1272))(v288, 0, 1, v494, v125);
                  v290 = v469;
                  if (v469 <= v289)
                    v290 = v289;
                  v469 = v290;
                  v291 = *(_QWORD *)&v464[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                  v292 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 960))(v291, v125);
                  v293 = *((_QWORD *)this + 479);
                  if (v293 <= v292)
                    v293 = v292;
                  *((_QWORD *)this + 479) = v293;
                  v294 = (unint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v295 = *(_QWORD *)(v294 + 400);
                  v552 = *(_OWORD *)(v294 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v294 + 40));
                  v554 = *(_DWORD *)(v294 + 136);
                  v296 = (*(uint64_t (**)(uint64_t, __int128 *, char *, _QWORD, uint64_t))(*(_QWORD *)v295
                                                                                                 + 1056))(v295, &v552, v472, v494, v125);
                  if (v553)
                    llvm::MetadataTracking::untrack();
                  v297 = *(_QWORD *)(v296 + 32);
                  if (v297)
                    v298 = v297 == *(_QWORD *)(v296 + 40) + 40;
                  else
                    v298 = 1;
                  if (v298)
                    v299 = 0;
                  else
                    v299 = (llvm::Instruction *)(v297 - 24);
                  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v299);
                  v300 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                  LOWORD(v626) = 257;
                  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v300, (llvm::Type **)v296, v493, (const llvm::Twine *)v625);
                  v302 = PointerCast;
                  v303 = *((_QWORD *)this + 294);
                  v304 = 0x9DDFEA08EB382D69
                       * (((8 * (_DWORD)PointerCast) + 8) ^ ((unint64_t)PointerCast >> 32));
                  v305 = 0x9DDFEA08EB382D69 * (((unint64_t)PointerCast >> 32) ^ (v304 >> 47) ^ v304);
                  v306 = 0x9DDFEA08EB382D69 * (v305 ^ (v305 >> 47));
                  v307 = *(_QWORD *)(v303 + 16);
                  if (!v307)
                    goto LABEL_438;
                  v308 = (uint8x8_t)vcnt_s8((int8x8_t)v307);
                  v308.i16[0] = vaddlv_u8(v308);
                  if (v308.u32[0] > 1uLL)
                  {
                    v294 = 0x9DDFEA08EB382D69 * (v305 ^ (v305 >> 47));
                    if (v306 >= v307)
                      v294 = v306 % v307;
                  }
                  else
                  {
                    v294 = v306 & (v307 - 1);
                  }
                  v309 = *(_QWORD ***)(*(_QWORD *)(v303 + 8) + 8 * v294);
                  if (!v309)
                    goto LABEL_438;
                  v310 = *v309;
                  if (!*v309)
                    goto LABEL_438;
                  while (2)
                  {
                    v311 = v310[1];
                    if (v311 == v306)
                    {
                      if ((llvm::Value *)v310[2] != PointerCast)
                        goto LABEL_437;
                      v112 = v489;
                      goto LABEL_516;
                    }
                    if (v308.u32[0] > 1uLL)
                    {
                      if (v311 >= v307)
                        v311 %= v307;
                    }
                    else
                    {
                      v311 &= v307 - 1;
                    }
                    if (v311 == v294)
                    {
LABEL_437:
                      v310 = (_QWORD *)*v310;
                      if (!v310)
                        break;
                      continue;
                    }
                    break;
                  }
LABEL_438:
                  v310 = operator new(0x20uLL);
                  *v310 = 0;
                  v310[1] = v306;
                  v310[2] = v302;
                  v310[3] = 0;
                  v312 = (float)(unint64_t)(*(_QWORD *)(v303 + 32) + 1);
                  v313 = *(float *)(v303 + 40);
                  if (v307 && (float)(v313 * (float)v307) >= v312)
                    goto LABEL_506;
                  v314 = (v307 & (v307 - 1)) != 0;
                  if (v307 < 3)
                    v314 = 1;
                  v315 = v314 | (2 * v307);
                  v316 = vcvtps_u32_f32(v312 / v313);
                  if (v315 <= v316)
                    prime = (int8x8_t)v316;
                  else
                    prime = (int8x8_t)v315;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  }
                  v307 = *(_QWORD *)(v303 + 16);
                  if (*(_QWORD *)&prime > v307)
                    goto LABEL_450;
                  if (*(_QWORD *)&prime >= v307)
                    goto LABEL_501;
                  v324 = vcvtps_u32_f32((float)*(unint64_t *)(v303 + 32) / *(float *)(v303 + 40));
                  if (v307 < 3
                    || (v325 = (uint8x8_t)vcnt_s8((int8x8_t)v307), v325.i16[0] = vaddlv_u8(v325), v325.u32[0] > 1uLL))
                  {
                    v324 = std::__next_prime(v324);
                  }
                  else
                  {
                    v326 = 1 << -(char)__clz(v324 - 1);
                    if (v324 >= 2)
                      v324 = v326;
                  }
                  if (*(_QWORD *)&prime <= v324)
                    prime = (int8x8_t)v324;
                  if (*(_QWORD *)&prime >= v307)
                  {
                    v307 = *(_QWORD *)(v303 + 16);
                  }
                  else
                  {
                    if (!*(_QWORD *)&prime)
                    {
                      v351 = *(void **)(v303 + 8);
                      *(_QWORD *)(v303 + 8) = 0;
                      if (v351)
                        operator delete(v351);
                      v307 = 0;
                      *(_QWORD *)(v303 + 16) = 0;
                      goto LABEL_501;
                    }
LABEL_450:
                    if (*(_QWORD *)&prime >> 61)
                      goto LABEL_637;
                    v318 = operator new(8 * *(_QWORD *)&prime);
                    v319 = *(void **)(v303 + 8);
                    *(_QWORD *)(v303 + 8) = v318;
                    if (v319)
                      operator delete(v319);
                    v320 = 0;
                    *(int8x8_t *)(v303 + 16) = prime;
                    do
                      *(_QWORD *)(*(_QWORD *)(v303 + 8) + 8 * v320++) = 0;
                    while (*(_QWORD *)&prime != v320);
                    v321 = *(_QWORD **)(v303 + 24);
                    if (v321)
                    {
                      v322 = v321[1];
                      v323 = (uint8x8_t)vcnt_s8(prime);
                      v323.i16[0] = vaddlv_u8(v323);
                      if (v323.u32[0] > 1uLL)
                      {
                        if (v322 >= *(_QWORD *)&prime)
                          v322 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v322 &= *(_QWORD *)&prime - 1;
                      }
                      *(_QWORD *)(*(_QWORD *)(v303 + 8) + 8 * v322) = v303 + 24;
                      v345 = (_QWORD *)*v321;
                      if (*v321)
                      {
                        do
                        {
                          v346 = v345[1];
                          if (v323.u32[0] > 1uLL)
                          {
                            if (v346 >= *(_QWORD *)&prime)
                              v346 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v346 &= *(_QWORD *)&prime - 1;
                          }
                          if (v346 != v322)
                          {
                            v347 = *(_QWORD *)(v303 + 8);
                            if (!*(_QWORD *)(v347 + 8 * v346))
                            {
                              *(_QWORD *)(v347 + 8 * v346) = v321;
                              goto LABEL_497;
                            }
                            *v321 = *v345;
                            *v345 = **(_QWORD **)(*(_QWORD *)(v303 + 8) + 8 * v346);
                            **(_QWORD **)(*(_QWORD *)(v303 + 8) + 8 * v346) = v345;
                            v345 = v321;
                          }
                          v346 = v322;
LABEL_497:
                          v321 = v345;
                          v345 = (_QWORD *)*v345;
                          v322 = v346;
                        }
                        while (v345);
                      }
                    }
                    v307 = (unint64_t)prime;
                  }
LABEL_501:
                  if ((v307 & (v307 - 1)) != 0)
                  {
                    if (v306 >= v307)
                      v294 = v306 % v307;
                    else
                      v294 = v306;
                  }
                  else
                  {
                    v294 = (v307 - 1) & v306;
                  }
LABEL_506:
                  v348 = *(_QWORD *)(v303 + 8);
                  v349 = *(_QWORD **)(v348 + 8 * v294);
                  if (v349)
                  {
                    *v310 = *v349;
                    v112 = v489;
                  }
                  else
                  {
                    *v310 = *(_QWORD *)(v303 + 24);
                    *(_QWORD *)(v303 + 24) = v310;
                    *(_QWORD *)(v348 + 8 * v294) = v303 + 24;
                    v112 = v489;
                    if (!*v310)
                    {
LABEL_515:
                      ++*(_QWORD *)(v303 + 32);
LABEL_516:
                      v310[3] = v112;
                      v116 = v491;
                      if (v302)
                      {
LABEL_392:
                        llvm::Value::replaceAllUsesWith();
                        llvm::Instruction::eraseFromParent(v112);
                      }
LABEL_393:
                      v271 = v493;
LABEL_394:
                      v111 = v116 + 1;
                      if (v111 == (llvm::Instruction **)v95)
                      {
                        for (ii = v465; ii != __dst; ii += 14)
                        {
                          v353 = *ii;
                          v354 = ii[1];
                          v356 = ii[2];
                          v355 = ii[3];
                          v357 = ii[4];
                          v477 = ii[5];
                          v478 = ii[6];
                          v480 = ii[7];
                          v482 = (llvm::Value *)ii[8];
                          v484 = ii[9];
                          v486 = ii[10];
                          v358 = (llvm::Instruction *)ii[13];
                          v490 = ii[11];
                          v492 = ii[12];
                          v359 = llvm::UndefValue::get();
                          v360 = this;
                          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v358);
                          v361 = (uint64_t)v360 + *(_QWORD *)(*(_QWORD *)v360 - 24) + 40;
                          LODWORD(__src[0]) = 0;
                          LOWORD(v626) = 257;
                          InsertValue = llvm::IRBuilderBase::CreateInsertValue(v361, v359, v353, (uint64_t)__src, 1, (uint64_t)v625);
                          v363 = (uint64_t)v360 + *(_QWORD *)(*(_QWORD *)v360 - 24) + 40;
                          LODWORD(__src[0]) = 1;
                          LOWORD(v626) = 257;
                          v364 = llvm::IRBuilderBase::CreateInsertValue(v363, InsertValue, v354, (uint64_t)__src, 1, (uint64_t)v625);
                          v365 = (uint64_t)v360 + *(_QWORD *)(*(_QWORD *)v360 - 24) + 40;
                          LODWORD(__src[0]) = 2;
                          LOWORD(v626) = 257;
                          v366 = llvm::IRBuilderBase::CreateInsertValue(v365, v364, v356, (uint64_t)__src, 1, (uint64_t)v625);
                          v367 = (uint64_t)v360 + *(_QWORD *)(*(_QWORD *)v360 - 24) + 40;
                          LODWORD(__src[0]) = 3;
                          LOWORD(v626) = 257;
                          v368 = llvm::IRBuilderBase::CreateInsertValue(v367, v366, v355, (uint64_t)__src, 1, (uint64_t)v625);
                          v369 = *(llvm::Module **)&v471[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                          v625[0] = "air.version";
                          LOWORD(v626) = 259;
                          NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v369, (const llvm::Twine *)v625);
                          if (NamedMetadata && (Operand = llvm::NamedMDNode::getOperand(NamedMetadata)) != 0)
                          {
                            v372 = Operand;
                            LODWORD(__src[0]) = 0;
                            LODWORD(v614) = 0;
                            LODWORD(v625[0]) = 0;
                            parseMDInt(0, Operand, (unsigned int *)v625, __src);
                            LODWORD(v625[0]) = 1;
                            parseMDInt(0, v372, (unsigned int *)v625, &v614);
                            if (LODWORD(__src[0]) > 2 || (v373 = 4, LODWORD(__src[0]) == 2) && v614 >= 5)
                            {
                              v374 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                              LODWORD(v611) = 4;
                              LOWORD(v626) = 257;
                              v368 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v374, v368, v357, (uint64_t)&v611, 1, (uint64_t)v625);
                              v373 = 5;
                            }
                          }
                          else
                          {
                            v373 = 4;
                          }
                          if (v474)
                          {
                            v375 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            v376 = v373 + 1;
                            LODWORD(__src[0]) = v373;
                            LOWORD(v626) = 257;
                            v377 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v375, v368, v477, (uint64_t)__src, 1, (uint64_t)v625);
                            v378 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            v373 += 2;
                            LODWORD(__src[0]) = v376;
                            LOWORD(v626) = 257;
                            v368 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v378, v377, v478, (uint64_t)__src, 1, (uint64_t)v625);
                          }
                          if ((v494 & 0x40) != 0)
                          {
                            v379 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            LODWORD(__src[0]) = v373;
                            LOWORD(v626) = 257;
                            v368 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v379, v368, v480, (uint64_t)__src, 1, (uint64_t)v625);
                            ++v373;
                          }
                          if ((v494 & 8) != 0)
                          {
                            v380 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            v381 = v373 + 1;
                            LODWORD(__src[0]) = v373;
                            LOWORD(v626) = 257;
                            v382 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v380, v368, (uint64_t)v482, (uint64_t)__src, 1, (uint64_t)v625);
                            v383 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            v373 += 2;
                            LODWORD(__src[0]) = v381;
                            LOWORD(v626) = 257;
                            v368 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v383, v382, v484, (uint64_t)__src, 1, (uint64_t)v625);
                          }
                          if ((v494 & 0x80) != 0)
                          {
                            v384 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            LODWORD(__src[0]) = v373;
                            LOWORD(v626) = 257;
                            v368 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v384, v368, v486, (uint64_t)__src, 1, (uint64_t)v625);
                            ++v373;
                          }
                          if ((v494 & 0x10) != 0)
                          {
                            v385 = this;
                            v386 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                            LODWORD(v614) = 0;
                            LOWORD(v626) = 257;
                            Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v386, v490, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373;
                            LOWORD(v619) = 257;
                            v388 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v386, v368, Value, (uint64_t)&v611, 1, (uint64_t)__src);
                            v389 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 1;
                            LOWORD(v626) = 257;
                            v390 = llvm::IRBuilderBase::CreateExtractValue(v389, v490, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 1;
                            LOWORD(v619) = 257;
                            v391 = llvm::IRBuilderBase::CreateInsertValue(v389, v388, v390, (uint64_t)&v611, 1, (uint64_t)__src);
                            v392 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 2;
                            LOWORD(v626) = 257;
                            v393 = llvm::IRBuilderBase::CreateExtractValue(v392, v490, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 2;
                            LOWORD(v619) = 257;
                            v394 = llvm::IRBuilderBase::CreateInsertValue(v392, v391, v393, (uint64_t)&v611, 1, (uint64_t)__src);
                            v395 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 3;
                            LOWORD(v626) = 257;
                            v396 = llvm::IRBuilderBase::CreateExtractValue(v395, v490, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 3;
                            LOWORD(v619) = 257;
                            v397 = llvm::IRBuilderBase::CreateInsertValue(v395, v394, v396, (uint64_t)&v611, 1, (uint64_t)__src);
                            v398 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 0;
                            LOWORD(v626) = 257;
                            v399 = llvm::IRBuilderBase::CreateExtractValue(v398, v492, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 4;
                            LOWORD(v619) = 257;
                            v400 = llvm::IRBuilderBase::CreateInsertValue(v398, v397, v399, (uint64_t)&v611, 1, (uint64_t)__src);
                            v401 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 1;
                            LOWORD(v626) = 257;
                            v402 = llvm::IRBuilderBase::CreateExtractValue(v401, v492, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 5;
                            LOWORD(v619) = 257;
                            v403 = llvm::IRBuilderBase::CreateInsertValue(v401, v400, v402, (uint64_t)&v611, 1, (uint64_t)__src);
                            v404 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 2;
                            LOWORD(v626) = 257;
                            v405 = llvm::IRBuilderBase::CreateExtractValue(v404, v492, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 6;
                            LOWORD(v619) = 257;
                            v406 = llvm::IRBuilderBase::CreateInsertValue(v404, v403, v405, (uint64_t)&v611, 1, (uint64_t)__src);
                            v407 = (uint64_t)v385 + *(_QWORD *)(*(_QWORD *)v385 - 24) + 40;
                            LODWORD(v614) = 3;
                            LOWORD(v626) = 257;
                            v408 = llvm::IRBuilderBase::CreateExtractValue(v407, v492, (uint64_t)&v614, 1, (uint64_t)v625);
                            LODWORD(v611) = v373 + 7;
                            LOWORD(v619) = 257;
                            llvm::IRBuilderBase::CreateInsertValue(v407, v406, v408, (uint64_t)&v611, 1, (uint64_t)__src);
                          }
                          v271 = v493;
                          llvm::Value::replaceAllUsesWith();
                          llvm::Instruction::eraseFromParent(v358);
                        }
                        v409 = v466;
                        for (jj = v271; v409 != v475; v409 += 3)
                        {
                          v411 = *v409;
                          v412 = v409[1];
                          v413 = (llvm::Instruction *)v409[2];
                          v414 = llvm::UndefValue::get();
                          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v413);
                          v415 = **((_QWORD **)jj + 2);
                          v416 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                          LOWORD(v626) = 257;
                          Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v416, 48, v411, v415, (uint64_t)v625);
                          LODWORD(v614) = 0;
                          LOWORD(v619) = 257;
                          v418 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v416, v414, Cast, (uint64_t)&v614, 1, (uint64_t)__src);
                          v419 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                          LODWORD(__src[0]) = 1;
                          LOWORD(v626) = 257;
                          llvm::IRBuilderBase::CreateInsertValue((uint64_t)v419, v418, v412, (uint64_t)__src, 1, (uint64_t)v625);
                          llvm::Value::replaceAllUsesWith();
                          llvm::Instruction::eraseFromParent(v413);
                        }
                        v1 = this;
                        v90 = v458;
                        goto LABEL_551;
                      }
                      continue;
                    }
                    v350 = *(_QWORD *)(*v310 + 8);
                    if ((v307 & (v307 - 1)) != 0)
                    {
                      if (v350 >= v307)
                        v350 %= v307;
                    }
                    else
                    {
                      v350 &= v307 - 1;
                    }
                    v349 = (_QWORD *)(*(_QWORD *)(v303 + 8) + 8 * v350);
                  }
                  *v349 = v310;
                  goto LABEL_515;
                case 3:
                  v128 = *((_QWORD *)v467 + 12);
                  v625[0] = *v116;
                  v625[1] = v116[4];
                  v625[2] = v116[8];
                  v625[3] = v116[12];
                  *(_QWORD *)&v626 = v116[16];
                  *((_QWORD *)&v626 + 1) = v116[20];
                  if (v485)
                  {
                    v129 = (uint64_t *)(v116 + 28);
                    v130 = (uint64_t)v116[24];
                  }
                  else
                  {
                    v129 = (uint64_t *)(v116 + 24);
                    v130 = llvm::ConstantInt::get();
                  }
                  v627 = v130;
                  v628 = *v129;
                  v629 = v129[4];
                  v210 = v129[12];
                  v630 = v129[8];
                  v631 = v210;
                  v211 = v129[20];
                  v632 = v129[16];
                  v633 = v211;
                  if (v460 == v128)
                  {
                    v212 = v129[28];
                    v634 = v129[24];
                    v635 = v212;
                    v213 = v129 + 36;
                    v214 = v129[32];
                  }
                  else
                  {
                    v213 = v129 + 24;
                    v634 = llvm::ConstantInt::get();
                    v635 = llvm::ConstantInt::get();
                    v214 = llvm::ConstantInt::get();
                  }
                  v636 = v214;
                  v132 = v112;
                  if (v485)
                  {
                    v216 = *v213;
                    v213 += 4;
                    v215 = v216;
                  }
                  else
                  {
                    v215 = 0;
                  }
                  v637 = v215;
                  v638 = *v213;
                  v280 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v281 = *((_QWORD *)v280 + 50);
                  v549 = *(_OWORD *)(v280 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v280 + 40));
                  v551 = *((_DWORD *)v280 + 34);
                  (*(void (**)(uint64_t, __int128 *, void **, _QWORD, char *, _QWORD))(*(_QWORD *)v281 + 1064))(v281, &v549, v625, *((_QWORD *)this + 339), v472, v494);
                  if (v550)
                    goto LABEL_388;
                  goto LABEL_389;
                case 4:
                  v131 = *v116;
                  v132 = v112;
                  v133 = (*(uint64_t (**)(_QWORD, llvm::Instruction *))(**((_QWORD **)this + 294) + 16))(*((_QWORD *)this + 294), *v116);
                  v134 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v135 = *((_QWORD *)v134 + 50);
                  v546 = *(_OWORD *)(v134 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v134 + 40));
                  v548 = *((_DWORD *)v134 + 34);
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)v135 + 1072))(v135, &v546, v131, *((_QWORD *)this + 339), v472, v494, v133);
                  if (!v547)
                    goto LABEL_389;
                  goto LABEL_281;
                case 5:
                  v132 = v112;
                  v136 = *v116;
                  v137 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v138 = *((_QWORD *)v137 + 50);
                  v543 = *(_OWORD *)(v137 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v137 + 40));
                  v545 = *((_DWORD *)v137 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, char *, _QWORD))(*(_QWORD *)v138 + 1080))(v138, &v543, v136, v472, v494);
                  if (!v544)
                    goto LABEL_389;
                  goto LABEL_388;
                case 6:
                  v132 = v112;
                  v139 = *v116;
                  v140 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v141 = *((_QWORD *)v140 + 50);
                  v540 = *(_OWORD *)(v140 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v140 + 40));
                  v542 = *((_DWORD *)v140 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, char *, _QWORD))(*(_QWORD *)v141 + 1088))(v141, &v540, v139, *((_QWORD *)this + 339), v472, v494);
                  if (!v541)
                    goto LABEL_389;
                  goto LABEL_281;
                case 7:
                  v132 = v112;
                  v142 = *v116;
                  v143 = v116[4];
                  v144 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v145 = *((_QWORD *)v144 + 50);
                  v537 = *(_OWORD *)(v144 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v144 + 40));
                  v539 = *((_DWORD *)v144 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, llvm::Instruction *, char *, _QWORD))(*(_QWORD *)v145 + 1096))(v145, &v537, v142, v143, v472, v494);
                  if (!v538)
                    goto LABEL_389;
                  goto LABEL_281;
                case 8:
                  v132 = v112;
                  v176 = *v116;
                  v177 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v178 = *((_QWORD *)v177 + 50);
                  v534 = *(_OWORD *)(v177 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v177 + 40));
                  v536 = *((_DWORD *)v177 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, char *, _QWORD))(*(_QWORD *)v178 + 1112))(v178, &v534, v176, *((_QWORD *)this + 339), v472, v494);
                  if (v535)
                    goto LABEL_281;
                  goto LABEL_389;
                case 9:
                  v148 = *v116;
                  v147 = (uint64_t *)(v116 + 4);
                  v146 = v148;
                  v149 = llvm::ConstantInt::get();
                  v132 = v112;
                  if (v147 != (uint64_t *)llvm::CallBase::arg_end(v112))
                    v149 = *v147;
                  v150 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v151 = *((_QWORD *)v150 + 50);
                  v525 = *(_OWORD *)(v150 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v150 + 40));
                  v527 = *((_DWORD *)v150 + 34);
                  LOWORD(v456) = v494;
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, _QWORD *, _QWORD, llvm::Type *, uint64_t, char *, int))(*(_QWORD *)v151 + 1120))(v151, &v525, v146, *((_QWORD *)this + 339), v483, *v91, v493, v149, v472, v456);
                  if (!v526)
                    goto LABEL_389;
                  goto LABEL_281;
                case 10:
                  v132 = v112;
                  v179 = *v116;
                  v180 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v181 = *((_QWORD *)v180 + 50);
                  v531 = *(_OWORD *)(v180 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v180 + 40));
                  v533 = *((_DWORD *)v180 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, char *, _QWORD))(*(_QWORD *)v181 + 1104))(v181, &v531, v179, v472, v494);
                  if (v532)
                    llvm::MetadataTracking::untrack();
                  v182 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v116 = v491;
                  if (!*(_BYTE *)(*((_QWORD *)v182 + 50) + 1813))
                    goto LABEL_390;
                  v183 = v182 + 32;
                  v528 = *(_OWORD *)(v182 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v182 + 40));
                  v530 = *((_DWORD *)v183 + 26);
                  AGCLLVMUserObject::buildRecordRaytraceForGin1122((uint64_t)this, &v528);
                  if (!v529)
                    goto LABEL_391;
                  llvm::MetadataTracking::untrack();
                  if (!v114)
                    goto LABEL_393;
                  goto LABEL_392;
                case 11:
                  v132 = v112;
                  v152 = *v116;
                  v153 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v154 = *((_QWORD *)v153 + 50);
                  v522 = *(_OWORD *)(v153 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v153 + 40));
                  v524 = *((_DWORD *)v153 + 34);
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD))(*(_QWORD *)v154 + 1304))(v154, &v522, v152, *((_QWORD *)this + 318));
                  if (!v523)
                    goto LABEL_389;
                  goto LABEL_388;
                case 12:
                  v132 = v112;
                  v155 = *v116;
                  v156 = v116[4];
                  v157 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v158 = *((_QWORD *)v157 + 50);
                  v519 = *(_OWORD *)(v157 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v157 + 40));
                  v521 = *((_DWORD *)v157 + 34);
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, llvm::Instruction *, llvm::Type *))(*(_QWORD *)v158 + 1312))(v158, &v519, v155, *((_QWORD *)this + 318), v156, v493);
                  if (!v520)
                    goto LABEL_389;
                  goto LABEL_281;
                case 13:
                  v132 = v112;
                  v159 = *v116;
                  v160 = v116[4];
                  v487 = v116[8];
                  v161 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v162 = *((_QWORD *)v161 + 50);
                  v516 = *(_OWORD *)(v161 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v161 + 40));
                  v518 = *((_DWORD *)v161 + 34);
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, _QWORD, llvm::Instruction *, llvm::Instruction *))(*(_QWORD *)v162 + 1320))(v162, &v516, v159, *((_QWORD *)this + 318), v160, v487);
                  if (v517)
                    goto LABEL_281;
                  goto LABEL_389;
                case 14:
                  v165 = *v116;
                  v164 = (uint64_t *)(v116 + 4);
                  v163 = v165;
                  v166 = llvm::ConstantInt::get();
                  v132 = v112;
                  if (v164 != (uint64_t *)llvm::CallBase::arg_end(v112))
                    v166 = *v164;
                  v167 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v168 = *((_QWORD *)v167 + 50);
                  v513 = *(_OWORD *)(v167 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v167 + 40));
                  v515 = *((_DWORD *)v167 + 34);
                  LOWORD(v455) = v494;
                  v114 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Instruction *, uint64_t, _QWORD *, _QWORD, llvm::Type *, char *, int))(*(_QWORD *)v168 + 1032))(v168, &v513, v163, v166, v483, *v91, v493, v472, v455);
                  if (!v514)
                    goto LABEL_389;
                  goto LABEL_388;
                case 15:
                  v132 = v112;
                  v169 = *v116;
                  v170 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v171 = *((_QWORD *)v170 + 50);
                  v510 = *(_OWORD *)(v170 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v170 + 40));
                  v512 = *((_DWORD *)v170 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, char *, _QWORD))(*(_QWORD *)v171 + 1040))(v171, &v510, v169, v472, v494);
                  if (!v511)
                    goto LABEL_389;
LABEL_388:
                  llvm::MetadataTracking::untrack();
                  goto LABEL_389;
                case 16:
                  v132 = v112;
                  v172 = *v116;
                  v173 = v116[4];
                  v174 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v175 = *((_QWORD *)v174 + 50);
                  v507 = *(_OWORD *)(v174 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v174 + 40));
                  v509 = *((_DWORD *)v174 + 34);
                  (*(void (**)(uint64_t, __int128 *, llvm::Instruction *, llvm::Instruction *, char *, _QWORD))(*(_QWORD *)v175 + 1048))(v175, &v507, v172, v173, v472, v494);
                  if (v508)
LABEL_281:
                    llvm::MetadataTracking::untrack();
LABEL_389:
                  v116 = v491;
LABEL_390:
                  v112 = v132;
                  goto LABEL_391;
                default:
LABEL_391:
                  if (v114)
                    goto LABEL_392;
                  goto LABEL_393;
              }
            }
          }
          v1 = this;
        }
        do
        {
LABEL_557:
          v420 = (_QWORD *)n[1];
          ++n;
          v91 = v420;
          if (v420)
            v421 = v91 + 1 == 0;
          else
            v421 = 1;
        }
        while (v421);
        if (n == (_QWORD *)v90)
          goto LABEL_4;
      }
    }
  }
  v470 = 0;
  v468 = 0;
  v469 = 0;
  v463 = 1;
LABEL_4:
  v2 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + v2 + 400) + 1785)
    && !*((_BYTE *)v1 + 3712)
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1 + v2) + 64))((char *)v1 + v2) != 29)
  {
    v3 = (_BYTE *)*((_QWORD *)v1 + 294);
    if (v3[48])
      v4 = 1;
    else
      v4 = v3[50] != 0;
    v422 = v3[51];
    v423 = v3[51] == 0;
    v424 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v425 = v423 & ~v4;
    v1 = this;
    if ((v425 & 1) == 0 && v424 != 8)
    {
      v426 = *(_QWORD *)(*((_QWORD *)this + 21) + 80);
      if (v426)
        v427 = v426 - 24;
      else
        v427 = 0;
      v428 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v431 = *(_QWORD **)(v427 + 40);
      v429 = (_QWORD *)(v427 + 40);
      v430 = v431;
      if (v431 != v429)
      {
        while (1)
        {
          v432 = v430 ? (uint64_t)(v430 - 3) : 0;
          if (*(_BYTE *)(v432 + 16) == 84
            && (v433 = *(_QWORD *)(v432 - 32)) != 0
            && !*(_BYTE *)(v433 + 16)
            && *(_QWORD *)(v433 + 24) == *(_QWORD *)(v432 + 72)
            && (Name = llvm::Value::getName((llvm::Value *)v433), v435 == 18))
          {
            v436 = *(_QWORD *)Name == 0x7867612E6D766C6CLL && *(_QWORD *)(Name + 8) == 0x6C6C612E736C742ELL;
            v437 = v436 && *(_WORD *)(Name + 16) == 25455;
            v438 = v437;
          }
          else
          {
            v438 = 0;
          }
          if (*(_BYTE *)(v432 + 16) == 59 || v438)
            break;
          v430 = (_QWORD *)*v430;
          if (v430 == v429)
            goto LABEL_593;
        }
        v429 = v430;
      }
LABEL_593:
      v439 = v429[1];
      if (v439)
        v440 = (llvm::Instruction *)(v439 - 24);
      else
        v440 = 0;
      llvm::IRBuilderBase::SetInsertPoint(v428, v440);
      if (!*((_QWORD *)this + 297))
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 0);
      if (!*((_QWORD *)this + 300))
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 1);
      if (!*((_QWORD *)this + 303))
        AGCLLVMUserObject::buildImageTextureBufferLength(this, 0);
      if (!*((_QWORD *)this + 309))
        AGCLLVMUserObject::createSamplerHeapGlobal(this);
      AGCLLVMUserObject::createAccelerationStructureHeapGlobal(this);
      AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(this);
      AGCLLVMUserObject::createSCSConfigurationBufferGlobal((char *)this);
      if (v468 || v422)
        AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
      AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
      v441 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      GlobalBindingTableGlobal = (llvm::Type **)AGCLLVMUserObject::createGlobalBindingTableGlobal(this);
      LOWORD(v626) = 257;
      v444 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBindingTableGlobal, v443);
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v441 + 5, v444, (uint64_t)GlobalBindingTableGlobal, 0, (uint64_t)v625);
      v446 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v447 = *((_QWORD *)v446 + 50);
      v504 = *(_OWORD *)(v446 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v446 + 40));
      v506 = *((_DWORD *)v446 + 34);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v502, 2u, (_QWORD *)this + 307);
      DylibBaseGetterFunc = AGCLLVMUserObject::createDylibBaseGetterFunc(this);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v500, 2u, (_QWORD *)this + 337);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v498, 2u, (_QWORD *)this + 333);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v496, 2u, (_QWORD *)this + 325);
      (*(void (**)(void **__return_ptr, uint64_t, __int128 *, char *, char *, _BYTE *, uint64_t, _BYTE *, _BYTE *, _BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _BOOL4))(*(_QWORD *)v447 + 1000))(v625, v447, &v504, (char *)this + 3784, (char *)this + 2360, v502, DylibBaseGetterFunc, v500, v498, v496, *((_QWORD *)this + 312), *((_QWORD *)this + 315), *((_QWORD *)this + 321), *((_QWORD *)this + 324), AlignedLoad, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), v4);
      if (v497 != -8192 && v497 != -4096 && v497)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v496);
      if (v499 != -8192 && v499 != -4096 && v499)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v498);
      if (v501 != -8192 && v501 != -4096 && v501)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v500);
      if (v503 != -8192 && v503 != -4096 && v503)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v502);
      if (v505)
        llvm::MetadataTracking::untrack();
      if (v625[2])
        llvm::MetadataTracking::untrack();
      v1 = this;
    }
    if (v4)
    {
      *((_QWORD *)v1 + 480) = v469;
      *((_QWORD *)v1 + 481) = v468;
      *((_QWORD *)v1 + 482) = v463;
      *((_DWORD *)v1 + 966) = v470;
    }
  }
  (*(void (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 4);
  v449 = v1;
  v450 = *(_BYTE **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400);
  if (v450[1785] && !*((_BYTE *)v449 + 3712))
  {
    AccelerationStructureHeapGlobal = AGCLLVMUserObject::createAccelerationStructureHeapGlobal(v449);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v450 + 1368))(v450, (_BYTE *)v449 + 3784, AccelerationStructureHeapGlobal);
    v450 = *(_BYTE **)((char *)v449 + *(_QWORD *)(*(_QWORD *)v449 - 24) + 400);
    v451 = 1;
  }
  else
  {
    v451 = 0;
  }
  v453 = AGCLLVMUserObject::createAccelerationStructureHeapGlobal(this);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v450 + 1360))(v450, v453, v451);
}

uint64_t AGCLLVMUserObject::createAccelerationStructureHeapGlobal(AGCLLVMUserObject *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  char *v7;
  llvm::ValueHandleBase *v8;
  llvm::Type *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::ValueHandleBase *v12;
  llvm::Value *GlobalBufferBinding;
  llvm::Type *v14;
  _QWORD v16[2];
  uint64_t v17;
  __int16 v18;

  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v3 = 74;
  v4 = 34;
  if (v2 == 29)
    v4 = 89;
  if ((v2 - 7) >= 2 && v2 != 22)
    v3 = v4;
  v6 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824)
                            + 8 * v3))();
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1785)
    && !*((_BYTE *)this + 3712))
  {
    v7 = (char *)this + 2712;
    if (!*((_QWORD *)this + 339))
    {
      v14 = (llvm::Type *)llvm::PointerType::get();
      v16[0] = "agc.bvh_state_words_heap.";
      v17 = v6;
      v18 = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v14, (const llvm::Twine *)v16, v6, 0, 5, 1);
      v12 = (AGCLLVMUserObject *)((char *)this + 2696);
      goto LABEL_14;
    }
  }
  else
  {
    v7 = (char *)this + 2712;
    if (!*((_QWORD *)this + 339))
    {
      v8 = (AGCLLVMUserObject *)((char *)this + 2696);
      llvm::PointerType::get();
      v9 = (llvm::Type *)llvm::PointerType::get();
      v16[0] = "agc.sw_ads_heap.";
      v17 = v6;
      v18 = 2051;
      v10 = AGCLLVMUserObject::createGlobalBufferBinding(this, v9, (const llvm::Twine *)v16, v6, 0, 5, 0);
      llvm::GlobalValue::setLinkage((uint64_t)v10, 10);
      *((_BYTE *)v10 + 80) &= ~1u;
      llvm::Constant::getNullValue(*((llvm::Constant **)v10 + 3), v11);
      llvm::GlobalVariable::setInitializer();
      v12 = v8;
      GlobalBufferBinding = v10;
LABEL_14:
      llvm::ValueHandleBase::operator=(v12, (uint64_t)GlobalBufferBinding);
    }
  }
  return *(_QWORD *)v7;
}

uint64_t AGCLLVMUserObject::needsDylibResources(AGCLLVMUserObject *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (!*(_BYTE *)(*(_QWORD *)((char *)this + v1 + 400) + 1784)
    || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + v1) + 64))((char *)this + v1)
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 1
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 2
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 3
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 4
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 5
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 6
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 7
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 8
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 29
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 9)
  {
    return 0;
  }
  if (*((_BYTE *)this + 3656))
    return 1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 104))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::replacePayloadSupportFunctions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Function;
  llvm::Function *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  llvm::Function *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm::Instruction *v15;
  uint64_t v16;
  llvm::Function *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  llvm::Instruction *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  char v29;
  uint64_t v30;
  std::string *v31;
  char v32;
  void **v33;
  uint64_t v34;
  const char **v35;
  llvm::IRBuilderBase *v36;
  std::string *v37;
  uint64_t v38;
  llvm::Function *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  llvm::Function **v43;
  llvm::Function **v44;
  uint64_t v45;
  unsigned int v46;
  llvm::Function **v47;
  uint64_t v48;
  llvm::Function **v49;
  llvm::Function *v50;
  llvm::Function *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::CallBase *v54;
  llvm::Type *v55;
  uint64_t v56;
  _DWORD *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  uint64_t v60;
  llvm::Value *Cast;
  uint64_t v62;
  llvm::BasicBlock *v63;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v65;
  llvm::Type **Alloca;
  llvm::Type *v67;
  const char *v68;
  size_t v69;
  const char *v70;
  size_t v71;
  _QWORD *v72;
  llvm::IRBuilderBase *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::Instruction *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Type *v82;
  llvm::Type *v83;
  llvm::Type **v84;
  llvm::Value *PointerCast;
  llvm::Type **v86;
  llvm::Value *v87;
  uint64_t v88;
  uint64_t v89;
  std::string *v90;
  void *__p;
  std::string *v92;
  char *v93;
  llvm::Function *v94;
  llvm::Function *v95;
  std::string *v96;
  char *v97;
  uint64_t v98;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  char v103[32];
  __int16 v104;
  llvm::Function **v105;
  llvm::Function **v106;
  uint64_t v107;
  int v108;
  _WORD v109[16];
  std::string v110;
  std::string::value_type v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  void *v117;
  uint64_t v118;
  _BYTE v119[32];
  char *v120[2];
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[72];
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v6 = (llvm::Function *)Function;
    v7 = *(_QWORD *)(Function + 8);
    if (v7)
    {
      do
      {
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(llvm::Instruction **)(v7 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v9);
        v7 = v8;
      }
      while (v8);
    }
    llvm::Function::eraseFromParent(v6);
  }
  v10 = llvm::Module::getFunction();
  if (v10)
  {
    v11 = (llvm::Function *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = (unsigned __int8 *)a1;
    if (v12)
    {
      do
      {
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(v13, 6, 1uLL, 0);
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(llvm::Instruction **)(v12 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v15);
        v12 = v14;
      }
      while (v14);
    }
    llvm::Function::eraseFromParent(v11);
    a1 = (uint64_t)v13;
  }
  v16 = llvm::Module::getFunction();
  if (v16)
  {
    v17 = (llvm::Function *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = (unsigned __int8 *)a1;
    if (v18)
    {
      do
      {
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(v19, 5, 0, 0);
        v20 = *(_QWORD *)(v18 + 8);
        v21 = *(llvm::Instruction **)(v18 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v21);
        v18 = v20;
      }
      while (v20);
    }
    llvm::Function::eraseFromParent(v17);
    a1 = (uint64_t)v19;
  }
  v22 = llvm::Module::getFunction();
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      do
      {
        v24 = *(_QWORD *)(v23 + 8);
        v25 = *(llvm::Instruction **)(v23 + 24);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), v25);
        v26 = *((_QWORD *)v25 - 4 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
        v27 = *(_QWORD *)(a1 + 144);
        v112 = a3;
        v113 = v26;
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.update.bvh", 20, v27, (uint64_t)&v112, 2uLL);
        llvm::Instruction::eraseFromParent(v25);
        v23 = v24;
      }
      while (v24);
    }
  }
  v102 = (uint64_t *)a1;
  std::string::basic_string[abi:nn180100]<0>(&v112, "agc.query.allocate");
  LOBYTE(v115) = 1;
  std::string::basic_string[abi:nn180100]<0>(v116, "agc.query.deallocate");
  LOBYTE(v118) = 0;
  v28 = (std::string *)operator new(0x40uLL);
  v29 = 0;
  v30 = 0;
  v31 = v28;
  do
  {
    v32 = v29;
    v33 = &v112 + 4 * v30;
    if (*((char *)v33 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)*v33, (std::string::size_type)v33[1]);
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)v33;
      v31->__r_.__value_.__r.__words[2] = (std::string::size_type)v33[2];
    }
    v31[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)v33 + 24);
    v31 = (std::string *)((char *)v31 + 32);
    v29 = 1;
    v30 = 1;
  }
  while ((v32 & 1) == 0);
  v34 = 0;
  v89 = ((char *)v31 - (char *)v28) >> 5;
  v35 = (const char **)v102;
  do
  {
    if (*((char *)&v117 + v34 * 8 + 7) < 0)
      operator delete((void *)v116[v34]);
    v34 -= 4;
  }
  while (v34 != -8);
  v98 = (uint64_t)a3;
  v90 = v28;
  if (v31 != v28)
  {
    v36 = (llvm::IRBuilderBase *)(v102 + 1);
    v37 = v28;
    v92 = (std::string *)((char *)v28 + 32 * v89);
    do
    {
      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v110, v37->__r_.__value_.__l.__data_, v37->__r_.__value_.__l.__size_);
      else
        v110 = *v37;
      v111 = v37[1].__r_.__value_.__s.__data_[0];
      v38 = llvm::Module::getFunction();
      if (v38)
      {
        v39 = (llvm::Function *)v38;
        v105 = (llvm::Function **)v109;
        v106 = (llvm::Function **)v109;
        v107 = 4;
        v108 = 0;
        v40 = *(_QWORD *)(v38 + 8);
        v96 = v37;
        if (v40)
        {
          do
          {
            v41 = *(_QWORD *)(v40 + 8);
            v42 = (void *)llvm::Instruction::getFunction(*(llvm::Instruction **)(v40 + 24));
            llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v112, (llvm::SmallPtrSetImplBase *)&v105, v42);
            v40 = v41;
          }
          while (v41);
          v44 = v105;
          v43 = v106;
          v46 = v107;
          LODWORD(v45) = HIDWORD(v107);
        }
        else
        {
          LODWORD(v45) = 0;
          v46 = 4;
          v43 = (llvm::Function **)v109;
          v44 = (llvm::Function **)v109;
        }
        if (v43 == v44)
          v45 = v45;
        else
          v45 = v46;
        v47 = v43;
        if ((_DWORD)v45)
        {
          v48 = 8 * v45;
          v47 = v43;
          while ((unint64_t)*v47 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v47;
            v48 -= 8;
            if (!v48)
              goto LABEL_56;
          }
        }
        v49 = &v43[v45];
        if (v47 != v49)
        {
          v50 = *v47;
          do
          {
            v51 = v39;
            v52 = *((_QWORD *)v50 + 1);
            while (v52)
            {
              v52 = *(_QWORD *)(v52 + 8);
              v112 = 0;
              v113 = 0;
              v116[0] = 0;
              v116[1] = 0;
              v115 = 0;
              v117 = v119;
              v118 = 0x400000000;
              v120[0] = (char *)&v121;
              v120[1] = (char *)0x800000000;
              v122 = v124;
              v123 = 0x800000000;
              v124[64] = 1;
              llvm::InlineFunction();
              if (v122 != v124)
                free(v122);
              llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v120);
              if (v117 != v119)
                free(v117);
            }
            llvm::Function::eraseFromParent(v50);
            ++v47;
            v39 = v51;
            if (v47 == v49)
              break;
            while (1)
            {
              v50 = *v47;
              if ((unint64_t)*v47 < 0xFFFFFFFFFFFFFFFELL)
                break;
              if (++v47 == v49)
                goto LABEL_56;
            }
          }
          while (v47 != v49);
        }
LABEL_56:
        v94 = v39;
        v53 = *((_QWORD *)v39 + 1);
        v35 = (const char **)v102;
        while (v53)
        {
          v54 = *(llvm::CallBase **)(v53 + 24);
          v53 = *(_QWORD *)(v53 + 8);
          v55 = **(llvm::Type ***)(**((_QWORD **)v54 - 4 * (*((_DWORD *)v54 + 5) & 0x7FFFFFF)) + 16);
          v56 = llvm::CallBase::arg_end(v54);
          v57 = (_DWORD *)((char *)v54 - 32 * (*((_DWORD *)v54 + 5) & 0x7FFFFFF));
          if (((v56 - (_QWORD)v57) & 0x1FFFFFFFC0) != 0)
            v58 = (llvm::Value *)*((_QWORD *)v57 + 4);
          else
            v58 = 0;
          llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(v102 + 47), v55);
          llvm::IRBuilderBase::SetInsertPoint(v36, v54);
          v59 = (llvm::Value *)llvm::ConstantInt::get();
          if (v58)
          {
            v60 = v102[26];
            LOWORD(v116[0]) = 257;
            Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v36, 39, (uint64_t)v58, v60, (uint64_t)&v112);
            v104 = 257;
            llvm::IRBuilderBase::CreateMul(v36, v59, Cast, (const llvm::Twine *)v103);
          }
          if (v111)
          {
            v62 = *(_QWORD *)(llvm::Instruction::getFunction(v54) + 80);
            if (v62)
              v63 = (llvm::BasicBlock *)(v62 - 24);
            else
              v63 = 0;
            FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v63);
            if (FirstInsertionPt)
              v65 = (llvm::Instruction *)(FirstInsertionPt - 24);
            else
              v65 = 0;
            llvm::IRBuilderBase::SetInsertPoint(v36, v65);
            LOWORD(v116[0]) = 257;
            Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v36, v55, v58, (const llvm::Twine *)&v112);
            llvm::IRBuilderBase::SetInsertPoint(v36, v54);
            llvm::IRBuilderBase::CreateLifetimeStart();
            v67 = *(llvm::Type **)v54;
            LOWORD(v116[0]) = 257;
            llvm::IRBuilderBase::CreatePointerCast(v36, Alloca, v67, (const llvm::Twine *)&v112);
            llvm::Value::replaceAllUsesWith();
          }
          else
          {
            llvm::IRBuilderBase::SetInsertPoint(v36, v54);
            llvm::IRBuilderBase::CreateLifetimeEnd();
          }
          llvm::Instruction::eraseFromParent(v54);
        }
        llvm::Function::eraseFromParent(v94);
        if (v106 != v105)
          free(v106);
        v37 = v96;
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v37 = (std::string *)((char *)v37 + 32);
    }
    while (v37 != v92);
  }
  v68 = v35[170];
  if (v68)
    v69 = strlen(v35[170]);
  else
    v69 = 0;
  v70 = v35[171];
  if (v70)
    v71 = strlen(v35[171]);
  else
    v71 = 0;
  v72 = operator new(0x50uLL);
  *v72 = "agc.intersect.ray";
  v72[1] = 17;
  v72[2] = v68;
  v72[3] = v69;
  *((_BYTE *)v72 + 32) = 1;
  v72[5] = "agc.continue.ray";
  v72[6] = 16;
  v93 = (char *)(v72 + 10);
  v73 = (llvm::IRBuilderBase *)(v35 + 1);
  v72[7] = v70;
  v72[8] = v71;
  v74 = (char *)v72;
  __p = v72;
  *((_BYTE *)v72 + 72) = 0;
  do
  {
    v75 = *((_QWORD *)v74 + 3);
    v101 = *((_QWORD *)v74 + 2);
    v100 = v74[32];
    v76 = llvm::Module::getFunction();
    if (v76)
    {
      v95 = (llvm::Function *)v76;
      v97 = v74;
      v77 = *(_QWORD *)(v76 + 8);
      while (v77)
      {
        v78 = *(llvm::Instruction **)(v77 + 24);
        v77 = *(_QWORD *)(v77 + 8);
        llvm::IRBuilderBase::SetInsertPoint(v73, v78);
        v112 = &v114;
        v113 = 0x1000000000;
        if (v100)
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v98);
        v79 = (uint64_t *)((char *)v78 - 32 * (*((_DWORD *)v78 + 5) & 0x7FFFFFF));
        v80 = llvm::CallBase::arg_end(v78);
        while (v79 != (uint64_t *)v80)
        {
          v81 = *v79;
          v79 += 4;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v81);
        }
        v82 = (llvm::Type *)llvm::PointerType::get();
        v83 = (llvm::Type *)llvm::PointerType::get();
        v84 = *(llvm::Type ***)(a2 + 24);
        v109[0] = 257;
        PointerCast = llvm::IRBuilderBase::CreatePointerCast(v73, v84, v82, (const llvm::Twine *)&v105);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, (uint64_t)PointerCast);
        v86 = *(llvm::Type ***)(a2 + 40);
        v109[0] = 257;
        v87 = llvm::IRBuilderBase::CreatePointerCast(v73, v86, v83, (const llvm::Twine *)&v105);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, (uint64_t)v87);
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)v102, v101, v75, v102[18], (uint64_t)v112, v113);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v78);
        if (v112 != &v114)
          free(v112);
      }
      llvm::Function::eraseFromParent(v95);
      v74 = v97;
    }
    v74 += 40;
  }
  while (v74 != v93);
  operator delete(__p);
  if (v31 != v90)
  {
    v88 = 32 * v89;
    do
    {
      if (v90->__r_.__value_.__s.__data_[v88 - 9] < 0)
        operator delete(*(void **)((char *)&v90[-1] + v88 - 8));
      v88 -= 32;
    }
    while (v88);
  }
  operator delete(v90);
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::~IntersectionQueryAnalysisGen6(AGCLLVMTargetLowerer::IntersectionQueryAnalysis *a1)
{
  *(_QWORD *)a1 = &off_1E7ECD7F0;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)a1 + 9));
  AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(a1);
  JUMPOUT(0x1CAA2D68CLL);
}

{
  *(_QWORD *)a1 = &off_1E7ECD7F0;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)a1 + 9));
  AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(a1);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createShaderCoreBindings@<X0>(llvm::ArrayType **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::ArrayType *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ArrayType *v13;
  uint64_t result;

  v8 = (llvm::ArrayType *)(*((uint64_t (**)(llvm::ArrayType **))*a1 + 236))(a1);
  v9 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(v8, (llvm::Type *)0x1000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v10 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(a1[23], (llvm::Type *)0x40000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v11 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(a1[23], (llvm::Type *)0x40000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v12 = llvm::User::operator new((llvm::User *)0x58);
  v13 = (llvm::ArrayType *)llvm::ArrayType::get(a1[23], (llvm::Type *)0x200);
  llvm::ArrayType::get(v13, (llvm::Type *)0x30);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  *a4 = v12;
  a4[1] = v9;
  a4[3] = v10;
  a4[5] = v11;
  result = (*((uint64_t (**)(llvm::ArrayType **, uint64_t))*a1 + 162))(a1, a2);
  a4[2] = result;
  a4[4] = a3;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRayCoreElementType()
{
  return llvm::StructType::create();
}

llvm::Function *AGCLLVMGen5TargetLowerer::replaceAccelerationStructureSupportFunctions(AGCLLVMGen5TargetLowerer *this, llvm::Type **a2)
{
  llvm::Function *result;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *Cast;
  llvm::Value *v11;
  llvm::Value *Mul;
  uint64_t v13;
  uint64_t v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type *v17;
  uint64_t AlignedLoad;
  llvm::Value *v19;
  uint64_t GEP;
  uint64_t v21;
  llvm::Type *v22;
  llvm::Function *v23;
  const char *v24;
  __int16 v25;
  char v26[32];
  __int16 v27;
  char v28[32];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;

  result = (llvm::Function *)llvm::Module::getFunction();
  if (result)
  {
    v23 = result;
    v5 = *((_QWORD *)result + 1);
    if (v5)
    {
      do
      {
        v6 = *(_QWORD *)(v5 + 8);
        v7 = *(llvm::Instruction **)(v5 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMGen5TargetLowerer *)((char *)this + 8), v7);
        v8 = *((_QWORD *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
        v9 = *((_QWORD *)this + 26);
        v30[0] = "ads_heap_index";
        v31 = 259;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 47, v8, v9, (uint64_t)v30);
        v11 = (llvm::Value *)llvm::ConstantInt::get();
        v30[0] = "heap_offset";
        v31 = 259;
        Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen5TargetLowerer *)((char *)this + 8), Cast, v11, (const llvm::Twine *)v30);
        v13 = llvm::PointerType::get();
        v14 = llvm::PointerType::get();
        v15 = (llvm::Type *)*((_QWORD *)this + 23);
        v31 = 257;
        v17 = AGCLLVMBuilder::tryDeducePointeeType(a2, v16);
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v17, (uint64_t)a2, 0, (uint64_t)v30);
        v29 = 257;
        v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, AlignedLoad, v13, (uint64_t)v28);
        v27 = 257;
        GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMGen5TargetLowerer *)((char *)this + 8), v15, v19, Mul, (const llvm::Twine *)v26);
        v24 = "heap_ptr";
        v25 = 259;
        v21 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v14, (uint64_t)&v24);
        v22 = (llvm::Type *)*((_QWORD *)this + 26);
        v31 = 257;
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v22, v21, 0, (uint64_t)v30);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v7);
        v5 = v6;
      }
      while (v6);
    }
    return (llvm::Function *)llvm::Function::eraseFromParent(v23);
  }
  return result;
}

void AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(AGCLLVMTargetLowerer::IntersectionQueryAnalysis *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = off_1E7EC0A60;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    operator delete(v4);
}

void AGCLLVMUserObject::getRaytracingFunctionMap(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map = 0;
      *(_QWORD *)&dword_1ED839100 = 0;
      qword_1ED839108 = 0x1800000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map, &dword_1C3C54000);
    }
  }
}

void AGCLLVMAGPFragmentShader::getFragmentVaryings(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v8;
  int Key;
  int8x8_t v10;
  int v11;
  int v12;
  uint8x8_t v13;
  const char *v14;
  const char *Value;
  const char *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  void *v21;
  size_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  std::string *p_p;
  std::string::size_type size;
  int v29;
  int v30;
  int v31;
  std::string __p;
  unsigned __int8 v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  _BYTE v39[40];
  void *v40;
  _QWORD v41[5];

  v41[3] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  AGCLLVMAGPFragmentShader::agpParseStageIOMetadata((AGCLLVMUserShader *)a1, a3, (uint64_t *)&v36, (int *)&v38 + 1, (int *)&v38, (int *)&v35 + 1, (unsigned int *)&v35, &v34);
  v6 = a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(a2 + 16);
  if ((_DWORD)v35 == 2 && v6 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 216))
    v8 = 5;
  else
    v8 = v35;
  v30 = v8;
  v31 = HIDWORD(v38);
  if ((HIDWORD(v38) & 0xFFFFFFFD) == 1)
    goto LABEL_20;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    goto LABEL_20;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 5888))
    goto LABEL_20;
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 5880) + 8 * Key) + 8);
  v12 = v11 >> 4;
  if (!(v11 >> 4))
    goto LABEL_20;
  v10.i32[0] = v11 >> 4;
  v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.i32[0] >= HIDWORD(v35))
  {
    LODWORD(v38) = 3;
    v31 = 1;
LABEL_20:
    v12 = 0;
    *a4 = a4 + 2;
    a4[1] = 0x400000000;
    goto LABEL_21;
  }
  *a4 = a4 + 2;
  a4[1] = 0x400000000;
  if (!MGGetBoolAnswer())
    goto LABEL_25;
  Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_VARYING_SPLITTING", v14);
  if (!Value || *Value == 48 || !atoi(Value))
    goto LABEL_25;
LABEL_21:
  if (MGGetBoolAnswer())
  {
    v17 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_VARYING_SPLITTING", v16);
    if (v17)
    {
      if (*v17 != 48 && atoi(v17))
      {
LABEL_25:
        v29 = v12;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v18 = **(_QWORD **)(a2 + 16);
        else
          v18 = a2;
        v19 = HIDWORD(v35);
        if (HIDWORD(v35))
        {
          v20 = 0;
          v21 = v36;
          v22 = v37;
          v23 = v38;
          v24 = v34;
          do
          {
            GenericVarying::getComponentSemantic(&__p, v21, v22, v20);
            if ((v29 & (1 << v20)) != 0)
              v25 = 1;
            else
              v25 = v31;
            if ((v29 & (1 << v20)) != 0)
              v26 = 3;
            else
              v26 = v23;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)v39, (_QWORD *)a1, v18, p_p, size, v25, v26, 1, v30, v24 != 0);
            llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back((uint64_t)a4, (unint64_t)v39);
            if (v40 != v41)
              free(v40);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v20;
          }
          while (v19 != v20);
        }
        return;
      }
    }
  }
  AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)v39, (_QWORD *)a1, a2, v36, v37, v31, v38, HIDWORD(v35), v30, v34);
  llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back((uint64_t)a4, (unint64_t)v39);
  if (v40 != v41)
    free(v40);
}

unint64_t llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  result = llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>(a1, a2);
  v4 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8);
  v5 = *(_OWORD *)result;
  v6 = *(_OWORD *)(result + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(result + 32);
  *(_OWORD *)v4 = v5;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 48) = 0x500000000;
  *(_QWORD *)(v4 + 40) = v4 + 56;
  v7 = v4 + 40;
  if (*(_DWORD *)(result + 48))
    result = llvm::SmallVectorImpl<unsigned int>::operator=(v7, result + 40);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v7)
    {
      if ((_DWORD)v7)
        memmove(*(void **)a1, v4, 4 * v7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v7)
    {
      if ((_DWORD)v8)
      {
        memmove(*(void **)a1, v4, 4 * v8);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v8 = 0;
LABEL_14:
    v9 = *(unsigned int *)(a2 + 8);
    if (v8 != v9)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v8), (const void *)(*(_QWORD *)a2 + 4 * v8), *(_QWORD *)a2 + 4 * v9 - (*(_QWORD *)a2 + 4 * v8));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v7;
LABEL_17:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow((uint64_t *)a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow((uint64_t *)a1);
    }
  }
  return v2;
}

uint64_t AGCLLVMAGPFragmentShader::agpParseStageIOMetadata(AGCLLVMUserShader *a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, int *a6, unsigned int *a7, _BYTE *a8)
{
  AGCLLVMUserShader *v14;
  AGCLLVMUserShader *v15;
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  char v22;
  _QWORD *String;
  int64_t v24;
  int64_t v25;
  int Key;
  int v30;
  BOOL v31;
  char *v33;
  unint64_t v34;
  int v38;
  BOOL v39;
  unsigned int v40;
  int *v41;
  _BYTE *v42;
  AGCLLVMUserShader *v43;
  unsigned int *v44;

  v14 = a1;
  AGCLLVMUserShader::getVaryingModeMap(a1);
  AGCLLVMUserShader::getInterpolationLocationMap(v15);
  result = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16));
  *a3 = result;
  a3[1] = v17;
  *a6 = 0;
  *a7 = 10;
  *a8 = 0;
  v18 = *(_DWORD *)(a2 + 8);
  if (v18 < 4)
  {
    *a4 = 1;
    goto LABEL_51;
  }
  v41 = a6;
  v42 = a8;
  v43 = v14;
  v44 = a7;
  v19 = 2;
  v20 = 3;
  v21 = 1;
  v22 = 1;
  do
  {
    String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * v18 + 8 * v20));
    v25 = v24;
    Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)dword_1ED839C90)
    {
      result = (uint64_t)llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v25);
      v21 = 0;
      v30 = *(_DWORD *)(*(_QWORD *)result + 8);
LABEL_22:
      *a4 = v30;
      goto LABEL_23;
    }
    result = llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1 && (int)result != (unint64_t)dword_1ED839CB0)
    {
      result = (uint64_t)llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(String, v25);
      v22 = 0;
      *a5 = *(_DWORD *)(*(_QWORD *)result + 8);
      goto LABEL_23;
    }
    if (v25 > 16)
    {
      if (v25 == 26)
      {
        if (*String == 0x65746E692E726961
          && String[1] == 0x6F6974616C6F7072
          && String[2] == 0x6974636E75665F6ELL
          && *((_WORD *)String + 12) == 28271)
        {
          *v42 = 1;
        }
      }
      else if (v25 == 17)
      {
        v31 = *String == 0x5F6772612E726961 && String[1] == 0x6D616E5F65707974;
        if (v31 && *((_BYTE *)String + 16) == 101)
        {
          v20 = v19 + 2;
          v33 = (char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                     - 8 * *(unsigned int *)(a2 + 8)
                                                                     + 8 * (v19 + 2)));
          result = AGCLLVMBuilder::getComponentType(v33, v34, v41);
          *v44 = result;
        }
      }
    }
    else if (v25 == 12)
    {
      if (!(*String ^ 0x5F6772612E726961 | *((unsigned int *)String + 2) ^ 0x656D616ELL))
        v20 = v19 + 2;
    }
    else if (v25 == 16 && *String == 0x747265762E726961 && String[1] == 0x65756C61765F7865)
    {
      v21 = 0;
      v30 = 5;
      goto LABEL_22;
    }
LABEL_23:
    v19 = v20++;
    v18 = *(_DWORD *)(a2 + 8);
  }
  while (v20 < v18);
  v40 = *v44;
  if ((v21 & 1) != 0)
    *a4 = v40 > 1;
  if ((v22 & 1) == 0)
  {
    v39 = *a5 == 3;
    v14 = v43;
    goto LABEL_59;
  }
  v14 = v43;
  if (v40 >= 2)
  {
LABEL_51:
    v38 = 3;
    v39 = 1;
    goto LABEL_52;
  }
  v39 = 0;
  v38 = 0;
LABEL_52:
  *a5 = v38;
LABEL_59:
  if (*a4 == 1 && !v39)
    *a5 = 3;
  if ((*(_BYTE *)(*((_QWORD *)v14 + 726) + 65) & 1) != 0)
  {
    result = llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1
      && (int)result != (unint64_t)*((unsigned int *)v14 + 1472)
      && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 735) + 8 * (int)result) + 8) & 0xF) == 3)
    {
      *a4 = 3;
    }
  }
  return result;
}

uint64_t *llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED839C98) = qword_1ED839C98 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_1ED839C94;
  for (i = (uint64_t *)(AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED839CB8) = qword_1ED839CB8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_1ED839CB4;
  for (i = (uint64_t *)(AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map));
        !*i || *i == -8;
  return i;
}

void AGCLLVMAGPFragmentShader::getFragmentVarying(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, size_t a5, int a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v17;
  int Key;
  int v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  __int128 __dst;
  uint64_t v29;
  _BYTE v30[24];
  __int128 __p;
  uint64_t v32;

  v17 = *((unsigned int *)a2 + 1480);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)a2 + 1472))
    v19 = 0;
  else
    v19 = *(_DWORD *)(*(_QWORD *)(a2[735] + 8 * Key) + 8) >> 31;
  GenericVarying::GenericVarying((uint64_t)v30, a8, a9, a6, a7, v17, v19);
  if (a4)
  {
    std::string::basic_string[abi:nn180100](&__dst, a4, a5);
  }
  else
  {
    __dst = 0uLL;
    v29 = 0;
  }
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  __p = __dst;
  v32 = v29;
  llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)(a2 + 739), (unint64_t)v30);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
  *(_DWORD *)a1 = a8;
  *(_DWORD *)(a1 + 4) = a6;
  *(_DWORD *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 12) = a9;
  *(_DWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = a3;
  if (a10)
  {
    v20 = (char *)a2 + 4 * a8;
    ++*((_DWORD *)v20 + 1612);
    v21 = &a2[4 * a8];
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)(v21 + 826), v17);
    v22 = (uint64_t)(v21 + 846);
    v23 = 1;
  }
  else
  {
    if (a6 != 5)
    {
      if (a6 == 3)
        v24 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, BOOL))(*a2 + 648))(a2, v17, a8, a9 == 1);
      else
        v24 = AGCLLVMUserFragmentShader::setupInterpolation(a2, 1, v17, a8);
      goto LABEL_18;
    }
    v20 = (char *)a2 + 4 * a8;
    ++*((_DWORD *)v20 + 1612);
    v25 = &a2[4 * a8];
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)(v25 + 826), v17);
    v22 = (uint64_t)(v25 + 846);
    v23 = 10;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v22, v23);
  v24 = 0;
  v26 = *((_DWORD *)v20 + 1617);
  *((_DWORD *)v20 + 1617) = v26 + 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a8) = v26;
LABEL_18:
  *(_QWORD *)(a1 + 32) = v24;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
}

uint64_t GenericVarying::GenericVarying(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7)
{
  BOOL v7;
  int v8;
  int v9;

  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a6;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_BYTE *)(result + 56) = a3 == 1;
  *(_BYTE *)(result + 57) = a7;
  *(_BYTE *)(result + 58) = 0;
  switch(a4)
  {
    case 0:
      v7 = a3 == 1;
      if (a7)
      {
        v8 = 10;
        v9 = 14;
        goto LABEL_22;
      }
      if (a3 == 1)
        v8 = 5;
      else
        v8 = 1;
      goto LABEL_24;
    case 1:
      v7 = a3 == 1;
      if (a7)
      {
        v8 = 11;
        v9 = 15;
      }
      else
      {
        v8 = 2;
        v9 = 6;
      }
      goto LABEL_22;
    case 2:
      v7 = a3 == 1;
      if (a7)
      {
        v8 = 12;
        v9 = 16;
      }
      else
      {
        v8 = 3;
        v9 = 7;
      }
      goto LABEL_22;
    case 3:
      if (a7)
        v8 = 20;
      else
        v8 = 18;
      if (a3 == 1)
        ++v8;
      goto LABEL_24;
    case 5:
      v7 = a3 == 1;
      if (a7)
      {
        v8 = 13;
        v9 = 17;
      }
      else
      {
        v8 = 4;
        v9 = 8;
      }
LABEL_22:
      if (v7)
        v8 = v9;
LABEL_24:
      *(_DWORD *)(result + 60) = v8;
      break;
    default:
      return result;
  }
  return result;
}

void AGCLLVMUserShader::getInterpolationLocationMap(AGCLLVMUserShader *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map = 0;
      *(_QWORD *)&dword_1ED839CB0 = 0;
      qword_1ED839CB8 = 0x1000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map, &dword_1C3C54000);
    }
  }
}

void AGCLLVMUserShader::getVaryingModeMap(AGCLLVMUserShader *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map = 0;
      *(_QWORD *)&dword_1ED839C90 = 0;
      qword_1ED839C98 = 0x1000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map, &dword_1C3C54000);
    }
  }
}

uint64_t AGCLLVMBuilder::getComponentType(char *a1, unint64_t a2, int *a3)
{
  int Key;
  uint64_t result;

  AGCLLVMBuilder::getVariableTypeMap((AGCLLVMBuilder *)a1);
  *a3 = 1;
  if ((a1[1] < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1[1] + 60) & 0x400) == 0)
    && (a1[a2 - 1] & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1[a2 - 1] + 60) & 0x400) != 0)
  {
    if (a2 >= a2 - 1)
      --a2;
    *a3 = atoi(&a1[a2]);
  }
  Key = llvm::StringMapImpl::FindKey();
  result = 10;
  if (Key != -1 && Key != (unint64_t)dword_1ED839A70)
    return *(unsigned int *)(*(_QWORD *)(AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map + 8 * Key) + 8);
  return result;
}

void AGCLLVMBuilder::getVariableTypeMap(AGCLLVMBuilder *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v3;
  _QWORD *v4;
  _QWORD v5[2];

  if ((v1 & 1) == 0
  {
    AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map = 0;
    *(_QWORD *)&dword_1ED839A70 = 0;
    qword_1ED839A78 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<ComponentType,llvm::MallocAllocator>::~StringMap, &AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map, &dword_1C3C54000);
  }
  v2 = atomic_load(&AGCLLVMBuilder::getVariableTypeMap(void)::flag);
  if (v2 != -1)
  {
    v5[0] = &v3;
    v5[1] = &AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map;
    v4 = v5;
    std::__call_once(&AGCLLVMBuilder::getVariableTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGCLLVMBuilder::getVariableTypeMap(void)::{lambda(llvm::StringMap<ComponentType,llvm::MallocAllocator> &)#1} &,llvm::StringMap<ComponentType,llvm::MallocAllocator> &>>);
  }
}

uint64_t AGCLLVMAGPFragmentShader::constructReply(AGCLLVMAGPFragmentShader *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  BOOL v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  BOOL v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const AGCLLVMTargetLowerer *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL VaryingSignature;
  const unsigned __int8 *v63;
  int v64;
  void *v65;
  int v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  int v71;
  char *v72;
  char *v73;
  int v74;
  flatbuffers::FlatBufferBuilder *v75;
  int v76;
  const char *v77;
  _QWORD *v78;
  _QWORD *v79;
  int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  std::string *v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type size;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  const std::string::value_type *p_p;
  std::string::size_type v98;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  __int128 __p;
  uint64_t v111;
  void *v112;
  _BYTE *v113;
  uint64_t v114;
  char *v115[2];
  _QWORD v116[65];
  char v117;
  _BYTE v118[124];
  int v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (!AGCDeserializedReply::deserialize((AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160)))return 0;
  AGCLLVMObject::validateBackendReply((AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  v101 = AGCLLVMUserObject::constructFlatReply(this);
  v102 = AGCLLVMUserFragmentShader::constructFlatReply(this);
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = v2 + 696;
  v4 = *((_QWORD *)v2 + 87);
  if (v4)
  {
    if (*((_QWORD *)v2 + 88))
      v5 = v2 + 696;
    else
      v5 = v2 + 1256;
  }
  else
  {
    v5 = v2 + 1256;
  }
  v8 = *(unsigned int **)v5;
  v7 = *((_QWORD *)v5 + 1);
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = (int *)((char *)v8 + *v8);
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (v12 = v11[4]) != 0)
  {
    v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    if (!v4)
    {
LABEL_17:
      v14 = v2 + 1256;
      goto LABEL_21;
    }
  }
  else
  {
    v13 = 0;
    if (!v4)
      goto LABEL_17;
  }
  v15 = *((_QWORD *)v2 + 88);
  v14 = v2 + 1256;
  if (v15)
    v14 = v3;
LABEL_21:
  v17 = *(unsigned int **)v14;
  v16 = *((_QWORD *)v14 + 1);
  if (v17)
    v18 = v16 == 0;
  else
    v18 = 1;
  if (v18)
    v19 = 0;
  else
    v19 = (int *)((char *)v17 + *v17);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 5u && (v21 = v20[2]) != 0)
    v22 = (int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
  else
    v22 = 0;
  v23 = (unsigned __int16 *)((char *)v22 - *v22);
  v24 = *v23;
  if (v24 < 0x25)
    goto LABEL_41;
  if (v23[18] && *((_BYTE *)v22 + v23[18]))
    goto LABEL_37;
  if (v24 < 0x27)
    goto LABEL_41;
  if (v23[19] && *((_BYTE *)v22 + v23[19]))
  {
LABEL_37:
    v25 = 1;
    goto LABEL_42;
  }
  if (v24 >= 0x29 && (v26 = v23[20]) != 0)
    v25 = *((unsigned __int8 *)v22 + v26) != 0;
  else
LABEL_41:
    v25 = 0;
LABEL_42:
  v100 = v25;
  (*(void (**)(AGCLLVMAGPFragmentShader *, unsigned int *))(*(_QWORD *)this + 544))(this, v13);
  v27 = *((unsigned int *)this + 1480);
  if ((_DWORD)v27)
  {
    v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(*((unsigned int *)this + 1480));
    memset(v28, 255, 4 * v27);
    v29 = &v28[4 * v27];
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v30 = (int)*v13;
  v31 = *(unsigned __int16 *)((char *)v13 - v30 + 8);
  if (*(_WORD *)((char *)v13 - v30 + 8))
  {
    v32 = *(unsigned int *)((char *)v13 + v31);
    v33 = (char *)v13 + v31 + v32;
  }
  else
  {
    v31 = 0;
    v33 = 0;
    v32 = *v13;
  }
  v34 = *(unsigned int *)((char *)v13 + v31 + v32);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 4 * v34;
    while (1)
    {
      v39 = *(unsigned int *)&v33[v35 + 4];
      v40 = &v33[v35 + v39];
      v41 = *((int *)v40 + 1);
      v42 = v39 - v41;
      v43 = &v33[v35 + v39 - v41];
      v44 = *((unsigned __int16 *)v43 + 2);
      if (v44 < 5)
      {
        v52 = v37;
      }
      else
      {
        v45 = -v41;
        v46 = *((unsigned __int16 *)v43 + 4);
        if (!v46)
          goto LABEL_62;
        v47 = v33[v35 + 4 + v39 + v46];
        v48 = v47 > 0xA;
        v49 = (1 << v47) & 0x602;
        if (v48 || v49 == 0)
          goto LABEL_62;
        if (v44 < 7)
        {
          v51 = 0;
        }
        else
        {
          v51 = *(unsigned __int16 *)&v33[v35 + 10 + v42];
          if (v51)
            v51 = *(unsigned int *)&v33[v35 + 4 + v39 + v51];
        }
        if (*(_DWORD *)&v28[4 * v51] != -1)
        {
LABEL_62:
          v52 = v37;
LABEL_63:
          v53 = v45 + v35;
          if (*(_WORD *)&v33[v39 + 8 + v53] && v33[v35 + 4 + v39 + *(unsigned __int16 *)&v33[v39 + 8 + v53]] == 5)
            v36 += 2;
          goto LABEL_66;
        }
        v52 = (v37 + 1);
        *(_DWORD *)&v28[4 * v51] = v37;
        v54 = *((int *)v40 + 1);
        if (*(unsigned __int16 *)&v33[v35 + 4 + v39 - v54] >= 5u)
        {
          v45 = -v54;
          goto LABEL_63;
        }
      }
LABEL_66:
      v35 += 4;
      v37 = v52;
      if (v38 == v35)
        goto LABEL_71;
    }
  }
  LODWORD(v52) = 0;
  v36 = 0;
LABEL_71:
  v55 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v56 = *((_BYTE *)v55 + 1762);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115[0] = (char *)v116;
  v115[1] = (char *)0x800000000;
  v116[64] = 0x1FFFFFFFFLL;
  v117 = v56;
  v119 = 0;
  memset(v118, 0, 122);
  v120 = 1;
  if ((*(_BYTE *)(*((_QWORD *)this + 726) + 64) & 1) != 0)
    v118[121] = 1;
  v57 = *((unsigned int *)this + 1480);
  if ((_DWORD)v57)
  {
    v58 = 0;
    v59 = 0;
    while (1)
    {
      v60 = *((_QWORD *)this + 739) + v58;
      v61 = *(_DWORD *)&v28[4 * *(unsigned int *)(v60 + 16)];
      if (v61 != -1)
        goto LABEL_78;
      if (*(_DWORD *)(v60 + 8) == 3)
        break;
LABEL_79:
      ++v59;
      v58 += 64;
      if (v59 >= v57)
      {
        v55 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        goto LABEL_81;
      }
    }
    v61 = v52;
    LODWORD(v52) = v52 + 1;
LABEL_78:
    *(_DWORD *)(v60 + 16) = v61;
    GenericVaryingAllocator::addVarying((uint64_t)&v112, v60);
    v57 = *((unsigned int *)this + 1480);
    goto LABEL_79;
  }
LABEL_81:
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v112, v55);
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v112, (AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v103 = 0;
  VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)&v112, (AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), (_DWORD *)&v103 + 1, &v103);
  if (v29 == v28)
    v63 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  else
    v63 = (const unsigned __int8 *)v28;
  v64 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v63, (v29 - v28) >> 2);
  if (v113 == v112)
    v65 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  else
    v65 = v112;
  v66 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v65, (v113 - (_BYTE *)v112) >> 2);
  v67 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v68 = v67 + 2472;
  v67[2542] = 1;
  v69 = *((_DWORD *)v67 + 626) - *((_DWORD *)v67 + 630) + *((_DWORD *)v67 + 628);
  if (VaryingSignature)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 4, SHIDWORD(v103));
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 6, v103);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 22, *((unsigned __int8 *)this + 45), 0);
  }
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 8, v64);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 10, v66);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 12, v118[120], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 14, *((unsigned __int8 *)this + 5845), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 16, *((unsigned __int8 *)this + 5844), 0);
  if (*((_BYTE *)this + 3560))
    v70 = v100;
  else
    v70 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 20, v70, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 18, v100, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 24, *((unsigned __int8 *)this + 6444), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 26, *((_DWORD *)this + 1610) == 1, 0);
  v71 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v68, v69);
  v72 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v73 = v72 + 2472;
  v72[2542] = 1;
  v74 = *((_DWORD *)v72 + 626) - *((_DWORD *)v72 + 630) + *((_DWORD *)v72 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v72 + 2472, v101);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v73, v102);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLFragmentInfo>(v73, v71);
  v75 = (AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
  v76 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v73, v74);
  flatbuffers::FlatBufferBuilder::Finish(v75, v76, v77);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v78 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  if (v78[87])
  {
    v79 = v78 + 87;
    if (!v78[88])
      v79 = v78 + 157;
  }
  else
  {
    v79 = v78 + 157;
  }
  v80 = (int *)(*v79 + *(unsigned int *)*v79);
  v81 = (unsigned int *)((char *)v80 + *(unsigned __int16 *)((char *)v80 - *v80 + 4));
  v82 = (unsigned int *)((char *)v81
                       + *v81
                       + *(unsigned __int16 *)((char *)v81 + *v81 - *(unsigned int *)((char *)v81 + *v81) + 8));
  if (*(unsigned int *)((char *)v82 + *v82) <= 0x20)
  {
    v83 = *(_DWORD *)(*(_QWORD *)(v78[58] + 32) + 48);
    if (v119 + v36 <= v83)
    {
      v6 = 1;
      goto LABEL_127;
    }
    v84 = (std::string *)(v78 + 1);
    std::to_string(&v105, v119 + v36);
    v85 = std::string::insert(&v105, 0, "Number of varying components(");
    v86 = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = std::string::append(&v106, ") ");
    v88 = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    v89 = std::string::append(&v107, "exceeds the limit (");
    v90 = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v104, v83);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = &v104;
    else
      v91 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      size = v104.__r_.__value_.__l.__size_;
    v93 = std::string::append(&v108, (const std::string::value_type *)v91, size);
    v94 = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v109.__r_.__value_.__r.__words[2] = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    v95 = std::string::append(&v109, ")");
    v96 = v95->__r_.__value_.__r.__words[2];
    __p = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v111 = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    if (v111 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v111 >= 0)
      v98 = HIBYTE(v111);
    else
      v98 = *((_QWORD *)&__p + 1);
    std::string::append(v84, p_p, v98);
    if (SHIBYTE(v111) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
  }
  v6 = 0;
LABEL_127:
  *(_QWORD *)&__p = v118;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v115);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v28)
    operator delete(v28);
  return v6;
}

void GenericVaryingAllocator::addVarying(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const std::string::value_type **v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  std::string::size_type size;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  size_t v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  size_t __n;
  std::string *v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  uint64_t v67;
  std::string v68;
  std::string v69;

  v6 = *(_QWORD *)(a1 + 24);
  v4 = a1 + 24;
  v5 = v6;
  v7 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v7)
  {
    v67 = v4;
    v8 = *(_DWORD *)(a1 + 556);
    v9 = *(unsigned __int8 *)(a1 + 689);
    v10 = (_OWORD *)(a2 + 24);
    v11 = v5;
    while (1)
    {
      v12 = v7 >> 1;
      v13 = v11 + (v7 >> 1 << 6);
      if (v9)
      {
        memset(&v69, 0, sizeof(v69));
        memset(&v68, 0, sizeof(v68));
      }
      else
      {
        v14 = (const std::string::value_type **)(v13 + 24);
        if (*(char *)(v13 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v69, *v14, *(_QWORD *)(v11 + (v12 << 6) + 32));
        }
        else
        {
          v15 = *(_OWORD *)v14;
          v69.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 40);
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v15;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *v10;
          v68.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
      }
      v16 = v11 + (v12 << 6);
      v17 = *(_DWORD *)(v16 + 8);
      v18 = *(_DWORD *)(a2 + 8);
      v20 = v18 != 3 || v17 == 3;
      if (v8)
      {
        if (!v20)
          goto LABEL_61;
        if (v17 == 3 && v18 != 3)
          goto LABEL_65;
        v22 = *(unsigned __int8 *)(v16 + 56);
        v23 = *(unsigned __int8 *)(a2 + 56);
        if (v22 < v23)
          goto LABEL_61;
        if (v23 < v22)
          goto LABEL_65;
        if (v17 < v18)
          goto LABEL_61;
        if (v18 < v17)
          goto LABEL_65;
        v24 = *(unsigned __int8 *)(v16 + 57);
        v25 = *(unsigned __int8 *)(a2 + 57);
        if (v24 < v25)
          goto LABEL_61;
        if (v25 < v24)
          goto LABEL_65;
      }
      else
      {
        if (!v20)
          goto LABEL_61;
        if (v17 == 3 && v18 != 3)
          goto LABEL_65;
        v27 = *(unsigned __int8 *)(v16 + 57);
        v28 = *(unsigned __int8 *)(a2 + 57);
        if (v27 < v28)
          goto LABEL_61;
        if (v28 < v27)
          goto LABEL_65;
        v29 = *(unsigned __int8 *)(v16 + 56);
        v30 = *(unsigned __int8 *)(a2 + 56);
        if (v29 < v30)
          goto LABEL_61;
        if (v30 < v29)
          goto LABEL_65;
        if (v17 < v18)
          goto LABEL_61;
        if (v18 < v17)
          goto LABEL_65;
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        size = v69.__r_.__value_.__l.__size_;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v69;
      else
        v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v33 = v68.__r_.__value_.__l.__size_;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v68;
      else
        v34 = (std::string *)v68.__r_.__value_.__r.__words[0];
      v65 = v33;
      v66 = size;
      if (v33 >= size)
        v35 = size;
      else
        v35 = v33;
      v63 = v34;
      v64 = v32;
      __n = v35;
      v36 = memcmp(v32, v34, v35);
      v37 = v66 < v65;
      if (v36)
        v37 = v36 < 0;
      if (!v37)
      {
        v39 = memcmp(v63, v64, __n);
        v40 = v65 < v66;
        if (v39)
          v40 = v39 < 0;
        if (!v40)
        {
          v38 = *(_DWORD *)(v16 + 16) < *(_DWORD *)(a2 + 16);
          goto LABEL_66;
        }
LABEL_65:
        v38 = 0;
        goto LABEL_66;
      }
LABEL_61:
      v38 = 1;
LABEL_66:
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (v38)
        v7 += ~v12;
      else
        v7 >>= 1;
      if (v38)
        v11 = v13 + 64;
      if (!v7)
      {
        v5 = *(_QWORD *)(a1 + 24);
        v41 = *(unsigned int *)(a1 + 32);
        v4 = v67;
        goto LABEL_79;
      }
    }
  }
  v41 = 0;
  v11 = v5 + (v7 << 6);
LABEL_79:
  if (v5 + (v41 << 6) == v11)
  {
    llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back(v4, a2);
  }
  else
  {
    v42 = v11 - v5;
    v43 = (v11 - v5) >> 6;
    v44 = llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(v4, a2);
    v45 = *(_QWORD *)(a1 + 24);
    v46 = v45 + v42;
    v47 = v45 + ((unint64_t)*(unsigned int *)(a1 + 32) << 6);
    *(_DWORD *)(v47 + 16) = *(_DWORD *)(v47 - 48);
    *(_OWORD *)v47 = *(_OWORD *)(v47 - 64);
    *(_OWORD *)(v47 + 24) = *(_OWORD *)(v47 - 40);
    *(_QWORD *)(v47 + 40) = *(_QWORD *)(v47 - 24);
    *(_QWORD *)(v47 - 40) = 0;
    *(_QWORD *)(v47 - 32) = 0;
    *(_QWORD *)(v47 - 24) = 0;
    *(_OWORD *)(v47 + 48) = *(_OWORD *)(v47 - 16);
    v48 = *(_QWORD *)(a1 + 24);
    v49 = *(unsigned int *)(a1 + 32);
    v50 = v48 + (v49 << 6) - 64;
    if (v50 != v46)
    {
      do
      {
        *(_OWORD *)v50 = *(_OWORD *)(v50 - 64);
        *(_DWORD *)(v50 + 16) = *(_DWORD *)(v50 - 48);
        v51 = (void **)(v50 + 24);
        if (*(char *)(v50 + 47) < 0)
          operator delete(*v51);
        v52 = *(_OWORD *)(v50 - 40);
        v53 = *(_QWORD *)(v50 - 24);
        *(_BYTE *)(v50 - 17) = 0;
        *(_BYTE *)(v50 - 40) = 0;
        *(_OWORD *)(v50 + 48) = *(_OWORD *)(v50 - 16);
        *(_OWORD *)v51 = v52;
        *(_QWORD *)(v50 + 40) = v53;
        v50 -= 64;
      }
      while (v50 != v46);
      LODWORD(v49) = *(_DWORD *)(a1 + 32);
      v48 = *(_QWORD *)(a1 + 24);
    }
    v54 = (v49 + 1);
    *(_DWORD *)(a1 + 32) = v54;
    v55 = v48 + (v54 << 6);
    v57 = v44 >= v46 && v44 < v55;
    v58 = v44 + (v57 << 6);
    v59 = *(_OWORD *)v58;
    *(_DWORD *)(v46 + 16) = *(_DWORD *)(v58 + 16);
    *(_OWORD *)v46 = v59;
    v60 = v45 + (v43 << 6);
    std::string::operator=((std::string *)(v60 + 24), (const std::string *)(v58 + 24));
    *(_OWORD *)(v60 + 48) = *(_OWORD *)(v58 + 48);
  }
  v61 = *(_DWORD *)(a1 + 552);
  if (v61 <= *(_DWORD *)(a2 + 16))
    v61 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 552) = v61;
  *(_DWORD *)(a1 + 692) += *(_DWORD *)a2;
}

__n128 llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __n128 result;

  v3 = llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1 + (v5 << 6);
  v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)v6 = v7;
  v8 = (std::string *)(v6 + 24);
  if (*(char *)(v3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v3 + 24), *(_QWORD *)(v3 + 32));
  }
  else
  {
    v9 = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(v3 + 40);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  result = *(__n128 *)(v3 + 48);
  *(__n128 *)(v4 + (v5 << 6) + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + (v3 << 6);
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<GenericVarying,false>::grow((uint64_t *)a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorTemplateBase<GenericVarying,false>::grow((uint64_t *)a1);
    }
  }
  return v2;
}

char **llvm::SmallVector<GenericVarying,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      if (v2[v4 - 17] < 0)
        operator delete(*(void **)&v2[v4 - 40]);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t AGCLLVMUserFragmentShader::constructFlatReply(AGCLLVMUserFragmentShader *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  BOOL v6;
  int *v7;
  unsigned __int16 *v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int *v12;
  _BOOL4 v13;
  char *v14;
  __int16 v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v25;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (*((_QWORD *)v2 + 87))
  {
    v3 = v2 + 696;
    if (!*((_QWORD *)v2 + 88))
      v3 = v2 + 1256;
  }
  else
  {
    v3 = v2 + 1256;
  }
  v5 = *(unsigned int **)v3;
  v4 = *((_QWORD *)v3 + 1);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (int *)((char *)v5 + *v5);
  v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 9u)
  {
    v9 = 0;
  }
  else
  {
    v9 = (int *)v8[4];
    if (v9)
      v9 = (int *)((char *)v9 + (_QWORD)v7 + *(unsigned int *)((char *)v9 + (_QWORD)v7));
  }
  v25 = 0;
  v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 0xDu && (v11 = v10[6]) != 0)
    v12 = (unsigned int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
  else
    v12 = 0;
  v13 = AGCLLVMObject::extractPhaseOffsets((uint64_t)v2, v12, &v25);
  v14 = AGCLLVMFragmentShader::constructFlatReply((AGCLLVMUserFragmentShader *)((char *)this + 4320));
  v16 = v15;
  v17 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v18 = v17[50];
  if (v17[92])
  {
    v19 = v17 + 92;
    v20 = v17[93];
    v21 = v17 + 162;
    if (v20)
      v21 = v19;
  }
  else
  {
    v21 = v17 + 162;
  }
  if (v21[1])
    v22 = *v21;
  else
    v22 = 0;
  v23 = (*(uint64_t (**)(uint64_t, BOOL, _QWORD, BOOL, BOOL, uint64_t))(*(_QWORD *)v18 + 624))(v18, *((_BYTE *)this + 5829) != 0, (*(_DWORD *)(*((_QWORD *)this + 614) + 32) >> 8) & 0xF, *((_BYTE *)this + 5830) != 0, *((_BYTE *)this + 5863) != 0, v22);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 4, v23, 0);
  if (v13)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v14, 10, v25);
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v14, 12, *((char *)this + 5836));
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, v16);
}

BOOL AGCLLVMGen3TargetLowerer::getDisableTriangleMerging(AGCLLVMGen3TargetLowerer *this, char a2, unsigned int a3, int a4, char a5, const unsigned __int8 *a6)
{
  char v6;
  _BOOL8 result;
  const unsigned __int8 *v8;

  if (a3 > 1)
    v6 = a2;
  else
    v6 = 0;
  result = 1;
  if ((v6 & 1) == 0 && (a5 & 1) == 0)
  {
    result = 0;
    if (a3 >= 2)
    {
      if (a4)
      {
        v8 = &a6[*(unsigned int *)a6 - *(int *)&a6[*(unsigned int *)a6]];
        return *(unsigned __int16 *)v8 >= 5u && *((unsigned __int16 *)v8 + 2) != 0;
      }
    }
  }
  return result;
}

void GenericVaryingAllocator::allocate(GenericVaryingAllocator *this, const AGCLLVMTargetLowerer *a2)
{
  GenericVaryingAllocator *v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  uint64_t v24;
  int v25;
  int v26;
  const std::string *v27;
  int *v28;
  uint64_t v29;
  int v30;
  int data;
  GenericVaryingAllocator *v32;
  unsigned int v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  char *v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  BOOL v43;
  int *v44;
  int v45;
  uint64_t *v46;

  v3 = this;
  v4 = (*((_DWORD *)this + 138) + 7);
  v5 = (int64x2_t *)((char *)this + 568);
  v6 = *((_QWORD *)this + 72);
  v7 = *((_QWORD *)this + 71);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 3);
  v9 = v4 - v8;
  if (v4 <= v8)
  {
    if (v4 < v8)
    {
      v21 = v7 + 40 * v4;
      while (v6 != v21)
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 40;
      }
      *((_QWORD *)v3 + 72) = v21;
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 73);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v6) >> 3) >= v9)
    {
      bzero(*((void **)this + 72), 40 * ((40 * v9 - 40) / 0x28) + 40);
      *((_QWORD *)v3 + 72) = v6 + 40 * ((40 * v9 - 40) / 0x28) + 40;
    }
    else
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 3);
      v12 = 0x999999999999999ALL * ((v10 - v7) >> 3);
      if (v12 > v4)
        v4 = v12;
      if (v11 >= 0x333333333333333)
        v4 = 0x666666666666666;
      if (v4 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = 5 * v4;
      v14 = (char *)operator new(40 * v4);
      v15 = &v14[8 * ((uint64_t)(v6 - v7) >> 3)];
      v16 = &v14[8 * v13];
      v17 = 40 * ((40 * v9 - 40) / 0x28) + 40;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v6 == v7)
      {
        v20 = vdupq_n_s64(v6);
      }
      else
      {
        do
        {
          *(_OWORD *)(v15 - 40) = *(_OWORD *)(v6 - 40);
          v19 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v15 - 1) = *(_QWORD *)(v6 - 8);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 40;
          *(_QWORD *)(v6 - 16) = 0;
          *(_QWORD *)(v6 - 8) = 0;
          *(_QWORD *)(v6 - 24) = 0;
          v6 -= 40;
        }
        while (v6 != v7);
        v20 = *v5;
      }
      *((_QWORD *)v3 + 71) = v15;
      *((_QWORD *)v3 + 72) = v18;
      *((_QWORD *)v3 + 73) = v16;
      v23 = (void **)v20.i64[1];
      v22 = (void **)v20.i64[0];
      while (v23 != v22)
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 5;
      }
      if (v22)
        operator delete(v22);
    }
  }
  v24 = *((unsigned int *)v3 + 8);
  v46 = (uint64_t *)v5;
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 0;
    v45 = *((unsigned __int8 *)a2 + 1737);
    v27 = (const std::string *)*((_QWORD *)v3 + 3);
    v28 = (int *)((char *)v27 + 64 * v24);
    v29 = v5->i64[0];
    v30 = 4;
    do
    {
      data = (int)v27->__r_.__value_.__l.__data_;
      v32 = v3;
      v33 = LODWORD(v27->__r_.__value_.__r.__words[2]) + 6;
      LODWORD(v27[2].__r_.__value_.__l.__data_) = v30;
      v34 = v29 + 40 * v33;
      *(_DWORD *)(v34 + 12) = v27->__r_.__value_.__r.__words[1];
      v35 = (int *)&v27[1];
      std::string::operator=((std::string *)(v34 + 16), v27 + 1);
      v36 = v27[2].__r_.__value_.__s.__data_[8];
      v29 = *v46;
      v37 = *v46 + 40 * v33;
      v3 = v32;
      *(_BYTE *)v37 = v36;
      *(_DWORD *)(v37 + 4) = v25 + 2 * (v26 + v45);
      *(_DWORD *)(v37 + 8) = 2 * (v26 + v45 + v25);
      v30 += data;
      v38 = (char *)v32 + 4 * LODWORD(v27->__r_.__value_.__r.__words[1]);
      v39 = (int *)(v38 + 592);
      if (v27[2].__r_.__value_.__s.__data_[9])
        v39 = (int *)(v38 + 640);
      v40 = (int *)(v38 + 616);
      v41 = (int *)(v38 + 664);
      if (v27[2].__r_.__value_.__s.__data_[9])
        v42 = v41;
      else
        v42 = v40;
      v43 = v36 == 0;
      if (v36)
        v44 = v42;
      else
        v44 = v39;
      if (v43)
        v26 += data;
      else
        v25 += data;
      HIDWORD(v27[2].__r_.__value_.__r.__words[0]) = *v44;
      *v44 += data;
      v27 = (const std::string *)((char *)v27 + 64);
    }
    while (v35 + 10 != v28);
  }
}

uint64_t AGCLLVMObject::validateBackendReply(AGCLLVMObject *this)
{
  const char *v2;
  uint64_t result;
  char *v4;
  int v5;

  v5 = 0;
  (*(void (**)(AGCLLVMObject *, int *))(*(_QWORD *)this + 160))(this, &v5);
  v2 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 56))(this);
  result = dumpShaderToFile(v2);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)this + 62))
    {
      v4 = (char *)this + 496;
      if (!*((_QWORD *)this + 63))
        v4 = (char *)this + 1056;
    }
    else
    {
      v4 = (char *)this + 1056;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, AGCLLVMObject *))(**((_QWORD **)this + 50) + 504))(*((_QWORD *)this + 50), *(_QWORD *)v4, *((_QWORD *)v4 + 1), this);
  }
  return result;
}

void AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  const char *v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  void *v29[2];
  char v30;
  _BYTE v31[320];
  uint64_t v32;
  unsigned __int8 v33;
  char v34;

  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (dumpShaderToFile(v4) && a2[8] - a2[12] + a2[10])
  {
    flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)v29);
    flatbuffers::Parser::Parser((flatbuffers::Parser *)v31, (const flatbuffers::IDLOptions *)v29);
    flatbuffers::IDLOptions::~IDLOptions(v29);
    v34 = 1;
    flatbuffers::Parser::Deserialize((flatbuffers::Parser *)v31, AGCCodeTranslator::CompileReplyBinarySchema::data(void)::bfbsData);
    v5 = v29;
    std::string::basic_string[abi:nn180100]<0>(v29, "Translator");
    __p[0] = 0;
    __p[1] = 0;
    v28 = 0;
    v6 = v33;
    if ((v33 & 0x80u) != 0)
      v6 = v32;
    if (v6)
      std::operator+<char>();
    flatbuffers::GenerateText();
    if (v30 >= 0)
      v7 = v29;
    else
      LOBYTE(v7) = v29[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ Start %s Metadata %s shader %d ------\n", v8, v9, v10, v11, v12, v13, (char)v7);
    if (v28 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if (v30 < 0)
      LOBYTE(v5) = v29[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ End %s Metadata %s shader %d ------\n", v21, v22, v23, v24, v25, v26, (char)v5);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    flatbuffers::Parser::~Parser((flatbuffers::Parser *)v31);
  }
}

uint64_t AGCLLVMCtx::compile(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, _BYTE *a6, int a7)
{
  const char *v13;
  const char *Value;
  char *v15;
  uint64_t i;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  llvm::AGX::TelemetryCollector *TelemetryCollector;
  void *Data;
  unsigned int v25;
  xpc_object_t v26;
  uint64_t v27;
  llvm **v28;
  uint64_t v29;
  llvm **v30;
  uint64_t v31;
  llvm *v32;
  llvm **v33;
  llvm **v34;
  llvm *v35;
  llvm *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::AGX::TelemetryCollector *v42;
  void *v43;
  void **v44;
  unint64_t v45;
  int String;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  const char *v62;
  llvm::AGX::Diagnostic ***Diagnostics;
  llvm::AGX::Diagnostic **v64;
  llvm::AGX::Diagnostic **v65;
  llvm::AGX::Diagnostic *v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  uint64_t Message;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t Binary;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unsigned int isValid;
  void *v98[2];
  unsigned __int8 v99;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  _BYTE v103[24];
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  void *__p;
  char v115;
  char v116[8];
  void *v117[2];
  char v118;
  _QWORD v119[2];
  llvm **v120;
  uint64_t v121;
  char v122;
  _QWORD v123[2];
  llvm **v124;
  unsigned int v125;
  uint64_t v126;
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  a6[1] = *(_BYTE *)(a1 + 377);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 47)
    || MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_UNSAFE_MATH", v13)) != 0
    && *Value != 48
    && atoi(Value))
  {
    *a6 = a4 & 1;
  }
  v15 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  std::string::basic_string[abi:nn180100]<0>(&__p, v15);
  llvm::AGX::CompileRequest::CompileRequest();
  if (v115 < 0)
    operator delete(__p);
  std::string::basic_string[abi:nn180100]<0>(v117, "__GPU_REMARKS_MD");
  std::string::basic_string[abi:nn180100]<0>(v119, "__GPU_LD_MD");
  std::string::basic_string[abi:nn180100]<0>(&v121, "__GPU_ARCH_LD_MD");
  std::string::basic_string[abi:nn180100]<0>(v123, "__GPU_STATS_MD");
  llvm::AGX::CompileRequest::addSegments();
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE((&v124)[i]) < 0)
      operator delete((void *)v123[i]);
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 88))(a2, v116);
  if (isValidToPrintMessage((char **)&AGCPrinter))
  {
    v17 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (dumpShaderToFile(v17))
      llvm::AGX::CompileRequest::setLoggingStream();
  }
  switch(a5)
  {
    case 1:
      v22 = *(unsigned __int8 *)(a1 + 378) == 0;
      if (a6[3] == 1)
        v18 = a1 + 104;
      else
        v18 = a1 + 80;
      v19 = a1;
      v20 = v18;
      v21 = 1;
      break;
    case 2:
      v18 = a1 + 128;
      v22 = *(_BYTE *)(a1 + 378) == 0;
      v19 = a1;
      v20 = a1 + 128;
      v21 = 2;
      break;
    case 3:
      v18 = a1 + 56;
      v19 = a1;
      v20 = a1 + 56;
      v21 = 3;
      v22 = 0;
      break;
    default:
      v18 = a1 + 128;
      goto LABEL_27;
  }
  AGCLLVMCtx::initializePlan(v19, v20, v21, v22, (std::string *)(a2 + 8));
LABEL_27:
  if (*(_BYTE *)(v18 + 16))
  {
    if (os_variant_has_internal_diagnostics())
    {
      TelemetryCollector = (llvm::AGX::TelemetryCollector *)llvm::AGX::CompileRequest::getTelemetryCollector((llvm::AGX::CompileRequest *)v116);
      llvm::AGX::TelemetryCollector::enable(TelemetryCollector);
      llvm::AGX::TelemetryCollector::startCollection(TelemetryCollector);
      llvm::AGX::AGXCompilePlan::collectConfiguration();
      Data = (void *)llvm::AGX::TelemetryCollector::fetchData(TelemetryCollector);
      xpc_dictionary_set_uint64(Data, "api", *(unsigned int *)(a2 + 3276));
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      if (v25 <= 0x21)
        xpc_dictionary_set_uint64(Data, "shader_kind", qword_1C3DF8428[v25]);
      v26 = xpc_copy(Data);
      analytics_send_event();
      xpc_release(v26);
    }
    v106 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v105 = MEMORY[0x1E0DE2AB0] + 16;
    v113 = a1 + 304;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v105);
    v27 = operator new();
    LOBYTE(v117[0]) = 0;
    v127 = 0;
    llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer();
    if (v127)
    {
      free(v117[0]);
      if ((_DWORD)v121)
      {
        v28 = v120;
        v29 = 8 * v121;
        v30 = v120;
        do
        {
          v31 = ((unint64_t)((char *)v28 - (char *)v120) >> 10) & 0x1FFFFFF;
          if (v31 >= 0x1E)
            LOBYTE(v31) = 30;
          v32 = *v30++;
          llvm::deallocate_buffer(v32, (void *)(4096 << v31));
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
      v33 = v124;
      if (v125)
      {
        v34 = &v124[2 * v125];
        do
        {
          v35 = *v33;
          v36 = v33[1];
          v33 += 2;
          llvm::deallocate_buffer(v35, v36);
        }
        while (v33 != v34);
        v33 = v124;
      }
      if (v33 != (llvm **)&v126)
        free(v33);
      if (v120 != (llvm **)&v122)
        free(v120);
    }
    v104 = v27;
    v103[0] = 0;
    v103[16] = 0;
    MEMORY[0x1CAA2CD2C](v117, &v104, v103);
    v37 = v104;
    v104 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (a7)
    {
      v38 = (_QWORD *)operator new();
      *v38 = v117;
      v102 = v38;
      llvm::LLVMContext::setLLVMRemarkStreamer();
      v39 = v102;
      v102 = 0;
      if (v39)
        MEMORY[0x1CAA2D68C](v39, 0x20C4093837F09);
    }
    v40 = mach_absolute_time();
    llvm::AGX::AGXCompilePlan::execute();
    v100 = 1;
    isValid = llvm::AGX::CompileReply::isValid((llvm::AGX::CompileReply *)&v101);
    v41 = mach_absolute_time() - v40;
    if (getTimebaseInfo(void)::once != -1)
      dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
    *(_QWORD *)(a2 + 448) = v41
                          * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                          / *(unsigned int *)algn_1ED839B44;
    if (os_variant_has_internal_diagnostics())
    {
      v42 = (llvm::AGX::TelemetryCollector *)llvm::AGX::CompileRequest::getTelemetryCollector((llvm::AGX::CompileRequest *)v116);
      llvm::AGX::TelemetryCollector::finishCollection(v42);
      v43 = (void *)llvm::AGX::TelemetryCollector::fetchData(v42);
      if (getTimebaseInfo(void)::once != -1)
        dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
      xpc_dictionary_set_uint64(v43, "time_total", v41* (unint64_t)getTimebaseInfo(void)::sTimebaseInfo/ *(unsigned int *)algn_1ED839B44/ 0x3E8);
      analytics_send_event();
    }
    std::string::basic_string[abi:nn180100]<0>(v98, "backend");
    if ((v99 & 0x80u) == 0)
      v44 = v98;
    else
      v44 = (void **)v98[0];
    if ((v99 & 0x80u) == 0)
      v45 = v99;
    else
      v45 = (unint64_t)v98[1];
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a2 + 2664), (const char *)v44, v45);
    *(_BYTE *)(a2 + 2734) = 1;
    v47 = *(_DWORD *)(a2 + 2696) - *(_DWORD *)(a2 + 2712) + *(_DWORD *)(a2 + 2704);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)(a2 + 2664), 4, String);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)(a2 + 2664), 6, v41, 0);
    v48 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a2 + 2664), v47);
    v49 = v48;
    v51 = *(char **)(a2 + 432);
    v50 = *(_QWORD *)(a2 + 440);
    if ((unint64_t)v51 >= v50)
    {
      v54 = *(char **)(a2 + 424);
      v55 = (v51 - v54) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        abort();
      v57 = v50 - (_QWORD)v54;
      if (v57 >> 1 > v56)
        v56 = v57 >> 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v58 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        if (v58 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v59 = (char *)operator new(4 * v58);
      }
      else
      {
        v59 = 0;
      }
      v60 = &v59[4 * v55];
      *(_DWORD *)v60 = v49;
      v52 = v60 + 4;
      while (v51 != v54)
      {
        v61 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v60 - 1) = v61;
        v60 -= 4;
      }
      *(_QWORD *)(a2 + 424) = v60;
      *(_QWORD *)(a2 + 432) = v52;
      *(_QWORD *)(a2 + 440) = &v59[4 * v58];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(_DWORD *)v51 = v48;
      v52 = v51 + 4;
    }
    *(_QWORD *)(a2 + 432) = v52;
    if ((char)v99 < 0)
      operator delete(v98[0]);
    llvm::AGX::CompileReply::CompileReply();
    v62 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (dumpShaderToFile(v62))
    {
      Diagnostics = (llvm::AGX::Diagnostic ***)llvm::AGX::CompileReply::getDiagnostics((llvm::AGX::CompileReply *)v98);
      v65 = *Diagnostics;
      v64 = Diagnostics[1];
      if (*Diagnostics != v64)
      {
        while (1)
        {
          v66 = *v65;
          v67 = *((_DWORD *)*v65 + 2);
          if (v67 == 3)
          {
            v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
            printMessage((char **)&AGCPrinter, "------ Start USC %s shader %u (compiler assembly) -------", v69, v70, v71, v72, v73, v74, v68);
            v66 = *v65;
            v67 = *((_DWORD *)*v65 + 2);
          }
          if (v67 != 5)
            goto LABEL_93;
          if (MGGetBoolAnswer())
          {
            v76 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE_TIMING", v75);
            if (v76)
            {
              if (*v76 != 48 && atoi(v76))
                break;
            }
          }
LABEL_97:
          if (*((_DWORD *)*v65 + 2) == 3)
          {
            v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
            printMessage((char **)&AGCPrinter, "------ End USC %s shader %u (compiler assembly) -------", v86, v87, v88, v89, v90, v91, v85);
          }
          if (++v65 == v64)
            goto LABEL_100;
        }
        v66 = *v65;
LABEL_93:
        Message = llvm::AGX::Diagnostic::getMessage(v66);
        if (*(char *)(Message + 23) >= 0)
          LOBYTE(v84) = Message;
        else
          v84 = *(_QWORD *)Message;
        printMessage((char **)&AGCPrinter, "Diag: %s \n", v78, v79, v80, v81, v82, v83, v84);
        goto LABEL_97;
      }
    }
LABEL_100:
    Binary = llvm::AGX::CompileReply::getBinary((llvm::AGX::CompileReply *)v98);
    v93 = *(unsigned __int8 *)(Binary + 23);
    if ((v93 & 0x80u) == 0)
      v94 = (_BYTE *)Binary;
    else
      v94 = *(_BYTE **)Binary;
    if ((v93 & 0x80u) != 0)
      v93 = *(_QWORD *)(Binary + 8);
    *(_QWORD *)(a1 + 160) = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>((_QWORD *)(a1 + 152), v94, &v94[v93]);
    if (a7)
      llvm::LLVMContext::setLLVMRemarkStreamer();
    llvm::AGX::CompileReply::~CompileReply((llvm::AGX::CompileReply *)v98);
    llvm::AGX::CompileReply::~CompileReply((llvm::AGX::CompileReply *)&v101);
    v53 = isValid;
    if (v122)
    {
      if (SHIBYTE(v121) < 0)
        operator delete((void *)v119[1]);
      v122 = 0;
    }
    v95 = v119[0];
    v119[0] = 0;
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
    if (v118)
      llvm::Regex::~Regex((llvm::Regex *)v117);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v105);
  }
  else
  {
    v53 = 0;
  }
  llvm::AGX::CompileRequest::~CompileRequest((llvm::AGX::CompileRequest *)v116);
  return v53;
}

uint64_t dumpShaderToFile(const char *a1)
{
  uint64_t result;
  const char *v3;

  result = isValidToPrintMessage((char **)&AGCPrinter);
  if ((_DWORD)result)
  {
    if (!strcmp(a1, "compute")
      || !strcmp(a1, "dynamic-library")
      || !strcmp(a1, "vertex")
      || !strcmp(a1, "Vertex")
      || !strcmp(a1, "fragment")
      || !strcmp(a1, "compute-program")
      || !strcmp(a1, "tile")
      || !strcmp(a1, "post-tessellation-vertex-sw")
      || !strcmp(a1, "post-tessellation-vertex-hw")
      || !strcmp(a1, "intersection-(user)")
      || !strcmp(a1, "mesh")
      || !strcmp(a1, "mesh_analysis")
      || !strcmp(a1, "object"))
    {
      return 1;
    }
    else
    {
      result = MGGetBoolAnswer();
      if ((_DWORD)result)
        return (uint64_t)AGCEnv::getBool((AGCEnv *)"AGC_STATUS_LOG_DRIVER_SHADERS", v3);
    }
  }
  return result;
}

BOOL isValidToPrintMessage(char **a1)
{
  char *v2;
  char *v3;
  unsigned __int8 v4;
  _QWORD v6[18];

  v6[17] = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    if (status_file_cap)
    {
      v2 = &(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 24)];
      if ((v2[32] & 5) == 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 32))(v6, *((_QWORD *)v2 + 5), 0, 1, 16);
        if (v6[16] >= (uint64_t)status_file_cap)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          v3 = *a1;
          if (*a1)
          {
            if (v3 != (char *)MEMORY[0x1E0DE4A50])
            {
              (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
              *a1 = 0;
              {
                getFilePath(void)::file_path = 0;
                qword_1EF8E8278 = 0;
                unk_1EF8E8280 = 0;
                __cxa_atexit(MEMORY[0x1E0DE44D0], &getFilePath(void)::file_path, &dword_1C3C54000);
              }
              if (byte_1EF8E8287 < 0)
              {
                *(_BYTE *)getFilePath(void)::file_path = 0;
                qword_1EF8E8278 = 0;
              }
              else
              {
                LOBYTE(getFilePath(void)::file_path) = 0;
                byte_1EF8E8287 = 0;
              }
            }
          }
        }
      }
    }
  }
  return *a1 != 0;
}

_QWORD *llvm::SmallVectorImpl<char>::append<char const*,void>(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  if (result[2] < (unint64_t)(v7 + a3 - __src))
  {
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  return llvm::raw_ostream::SetBufferAndMode();
}

uint64_t AGCLLVMCtx::initializePlan(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, std::string *a5)
{
  llvm::AGX::AGXCompiler *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  void **v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];

  if (!*(_BYTE *)(a2 + 16))
  {
    v7 = (llvm::AGX::AGXCompiler *)(result + 48);
    llvm::AGX::AGXCompiler::createCompilePlan();
    v22 = 1;
    if ((llvm::AGX::AGXCompilePlan::isValid((llvm::AGX::AGXCompilePlan *)v23) & 1) != 0)
    {
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      if (*(_BYTE *)(a2 + 16))
      {
        MEMORY[0x1CAA2CA38](a2);
        *(_BYTE *)(a2 + 16) = 0;
      }
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      *(_BYTE *)(a2 + 16) = 1;
      MEMORY[0x1CAA2CA38](v16);
    }
    else
    {
      llvm::AGX::AGXCompiler::getLastDiagnostics(v7);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"Create Plan failed:\n", 20);
      v8 = v20;
      v9 = v21;
      while (v8 != v9)
      {
        v8 += 8;
        v10 = (_QWORD *)llvm::AGX::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
      }
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v12 = v15;
      else
        v12 = (std::string::size_type)__p[1];
      std::string::append(a5, (const std::string::value_type *)v11, v12);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      v16[0] = *(void ***)MEMORY[0x1E0DE4F50];
      v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(void ***)((char *)v16 + (unint64_t)*(v16[0] - 3)) = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
      v17[0] = v13;
      v17[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v18 < 0)
        operator delete((void *)v17[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1CAA2D638](&v19);
      v16[0] = (void **)&v20;
      std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100](v16);
    }
    return MEMORY[0x1CAA2CA38](v23);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLFragmentInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 14, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 4, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t AGCLLVMUserObject::initCompile(AGCLLVMUserObject *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *Value;
  _BOOL8 v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *((_QWORD *)v2 + 46);
  v4 = *(_QWORD *)(*((_QWORD *)v2 + 58) + 32);
  v5 = *(void **)(v4 + 8);
  if (v5)
    v6 = strlen(*(const char **)(v4 + 8));
  else
    v6 = 0;
  llvm::Module::setTargetTriple(v3, v5, v6);
  v7 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 32);
  if (*(_QWORD *)(v7 + 16))
    strlen(*(const char **)(v7 + 16));
  llvm::Module::setDataLayout();
  AGCLLVMObject::disableConstantHoisting((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v25, (AGCLLVMUserObject *)((char *)this + 184));
  if ((v26 & 0x1000A0011000E00) != 0 && (v25 & v26) < (v26 & 0x1000A0011000E00))
    llvm::Module::getOrInsertNamedMetadata();
  llvm::Module::getOrInsertNamedMetadata();
  v28[2] = llvm::MDString::get();
  (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 272))(this);
  llvm::ConstantInt::get();
  v28[3] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::Module::getOrInsertNamedMetadata();
  (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 184))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  llvm::Type::getInt1Ty(*(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 392), v8);
  llvm::ConstantInt::get();
  v28[1] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if (!*(_BYTE *)(v9 + 1755) && !*(_DWORD *)(v9 + 1780))
  {
    AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v25, (AGCLLVMUserObject *)((char *)this + 184));
    if ((v26 & 0x1000A0011000E00) != 0
      && (v25 & v26) >= (v26 & 0x1000A0011000E00)
      && (!MGGetBoolAnswer()
       || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_BACKEND_TEXTURE_PROMOTION", v16)) == 0
       || *Value == 48
       || !atoi(Value)))
    {
      llvm::Module::getOrInsertNamedMetadata();
    }
  }
  if (*((_DWORD *)this + 10) >= 2u)
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 328), *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
  if (!*((_BYTE *)this + 15))
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
    if (v10)
      v11 = (llvm::BasicBlock *)(v10 - 24);
    else
      v11 = 0;
    v28[0] = llvm::BasicBlock::getFirstInsertionPt(v11);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v11, v28);
    v27 = 257;
    llvm::BasicBlock::splitBasicBlock();
    (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 56))(this);
  }
  v12 = *(_QWORD *)(*(_QWORD *)this - 24);
  v13 = *(_BYTE **)((char *)this + v12 + 400);
  if (v13[1785] && !*((_BYTE *)this + 3712))
  {
    v14 = *(_QWORD *)((char *)this + v12 + 368);
    if (*((_BYTE *)this + 15))
      v15 = 0;
    else
      v15 = *((_QWORD *)this + 22);
    v18 = *((unsigned __int8 *)this + 15) != 0;
    v19 = *((unsigned __int8 *)this + 3713);
    v20 = (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + v12) + 64))((char *)this + v12) == 29;
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t, uint64_t, _BOOL8, uint64_t, _BOOL8))(*(_QWORD *)v13 + 1392))(&v25, v13, v14, v15, v18, v19, v20);
    v21 = v25;
    v25 = 0;
    v22 = *((_QWORD *)this + 294);
    *((_QWORD *)this + 294) = v21;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = v25;
      v25 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    if (AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this))
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      v25 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  return 1;
}

double llvm::Module::setTargetTriple(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 232) = v12;
  return result;
}

void AGCLLVMUserObject::replaceBuiltinArguments(llvm::Function **this)
{
  llvm::Function *v2;
  uint64_t v3;
  llvm::Function *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *String;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int Key;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Instruction *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const std::string::value_type *v23;
  std::string *v24;
  std::string::size_type v25;
  void **v26;
  uint64_t v27;
  uint64_t inserted;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v34;
  char *v35;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  uint64_t v38;
  std::string __dst;
  __int16 v40;
  void *__p[2];
  uint64_t v42;

  AGCLLVMUserObject::getBuiltinArgMap((AGCLLVMUserObject *)this);
  v2 = this[22];
  if ((*((_WORD *)v2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this[22]);
    v4 = this[22];
    v3 = *((_QWORD *)v2 + 11);
    if ((*((_WORD *)v4 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(this[22]);
    v2 = v4;
  }
  else
  {
    v3 = *((_QWORD *)v2 + 11);
  }
  v5 = *((_QWORD *)v2 + 11) + 40 * *((_QWORD *)v2 + 12);
  if (v3 != v5)
  {
    v38 = *((_QWORD *)v2 + 11) + 40 * *((_QWORD *)v2 + 12);
    do
    {
      v6 = *((_QWORD *)this[11] + *(unsigned int *)(v3 + 32));
      if (v6 && *(_QWORD *)(v3 + 8))
      {
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
        v9 = v8;
        v10 = (*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) == 29
           && v9 == 15;
        if (!v10
          || (*String == 0x74736E692E726961
            ? (v11 = *(_QWORD *)((char *)String + 7) == 0x64695F65636E6174)
            : (v11 = 0),
              !v11))
        {
          Key = llvm::StringMapImpl::FindKey();
          v13 = Key;
          if (Key != -1 && Key != (unint64_t)dword_1ED839B58)
          {
            v15 = AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map;
            v16 = *((_QWORD *)this[22] + 10);
            if (v16)
              v17 = v16 - 24;
            else
              v17 = 0;
            v18 = *(_QWORD *)(v17 + 40);
            if (v18)
              v19 = (llvm::Instruction *)(v18 - 24);
            else
              v19 = 0;
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v19);
            v20 = *(_QWORD *)v3;
            if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
              v20 = **(_QWORD **)(v20 + 16);
            v21 = *(_QWORD *)(v15 + 8 * v13);
            v22 = *(void **)(v21 + 8);
            if (v22)
              std::string::basic_string[abi:nn180100](&__dst, v22, *(_QWORD *)(v21 + 16));
            else
              memset(&__dst, 0, sizeof(__dst));
            if ((llvm::Function *)v20 == *(llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 232))
              v23 = ".i32";
            else
              v23 = ".i16";
            v24 = std::string::append(&__dst, v23);
            v25 = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v42 = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v42 >= 0)
              v26 = __p;
            else
              v26 = (void **)__p[0];
            if (v42 >= 0)
              v27 = HIBYTE(v42);
            else
              v27 = (uint64_t)__p[1];
            if (*(_BYTE *)(v21 + 24))
            {
              inserted = AGCLLVMBuilder::getOrInsertFunction<>();
              v29 = (char *)this + *((_QWORD *)*this - 3) + 8;
              v40 = 257;
              llvm::IRBuilderBase::CreateCall((uint64_t)(v29 + 32), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&__dst);
            }
            else
            {
              v30 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *((_QWORD *)*this - 3) + 32, (uint64_t)v26, v27, v20, *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 232));
              if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
              {
                v31 = *(unsigned int *)(*(_QWORD *)v3 + 32);
                InsertElement = (llvm::Value *)llvm::UndefValue::get();
                if ((_DWORD)v31)
                {
                  for (i = 0; i != v31; ++i)
                  {
                    v34 = (llvm::Value *)(*((uint64_t (**)(llvm::Function **, uint64_t, uint64_t, uint64_t, uint64_t))*this
                                          + 38))(this, v30, v20, v6, i);
                    v35 = (char *)this + *((_QWORD *)*this - 3);
                    v40 = 257;
                    v36 = (llvm::IRBuilderBase *)(v35 + 40);
                    v37 = (llvm::Value *)llvm::ConstantInt::get();
                    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v36, InsertElement, v34, v37, (const llvm::Twine *)&__dst);
                  }
                }
              }
              else
              {
                (*((void (**)(llvm::Function **, uint64_t, uint64_t, uint64_t, _QWORD))*this + 38))(this, v30, v20, v6, 0);
              }
            }
            llvm::Value::replaceAllUsesWith();
            if (SHIBYTE(v42) < 0)
              operator delete(__p[0]);
            v5 = v38;
          }
        }
      }
      v3 += 40;
    }
    while (v3 != v5);
  }
}

void AGCLLVMUserObject::getBuiltinArgMap(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map = 0;
      *(_QWORD *)&dword_1ED839B58 = 0;
      qword_1ED839B60 = 0x2000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, &dword_1C3C54000);
    }
  }
}

uint64_t AGCLLVMObject::enableTempRegistersLimit(AGCLLVMObject *this)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  result = (*(uint64_t (**)(AGCLLVMObject *, int *))(*(_QWORD *)this + 160))(this, &v2);
  if ((_DWORD)result)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v3 = llvm::MDString::get();
    llvm::ConstantInt::get();
    v4 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    return llvm::NamedMDNode::addOperand();
  }
  return result;
}

void AGCTargetOS::AGCTargetOS(AGCTargetOS *this, const llvm::Triple *a2)
{
  __int16 OSVersion;
  uint64_t v5;
  int v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  OSVersion = llvm::Triple::getOSVersion(a2);
  v5 = llvm::Triple::getOSVersion(a2);
  llvm::Triple::getOSVersion(a2);
  if (v6 < 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = (unsigned __int16)((unint64_t)v5 >> 28) & (unsigned __int16)(v5 >> 63) & 0xFFF0u | (unsigned __int16)(OSVersion << 8) | v7;
  if ((*((_DWORD *)a2 + 9) & 0xFFFFFFF7) == 3)
    v9 = (unsigned __int16)((unint64_t)v5 >> 28) & (unsigned __int16)(v5 >> 63) & 0xFFF0u | (unsigned __int16)(OSVersion << 8) | v7;
  else
    v9 = 0;
  v10 = *(_QWORD *)this;
  v11 = v9 | *(_QWORD *)this & 0xFFFFFFFFFFFF0000;
  *(_QWORD *)this = v11;
  v12 = *((_DWORD *)a2 + 9);
  v13 = v12 == 28 || v12 == 7;
  v14 = v8 << 16;
  if (!v13)
    v14 = 0;
  v15 = v11 & 0xFFFFFFFF0000FFFFLL | v14;
  *(_QWORD *)this = v15;
  v16 = v8 << 32;
  if (*((_DWORD *)a2 + 9) != 29)
    v16 = 0;
  v17 = v15 & 0xFFFF0000FFFFFFFFLL | v16;
  v13 = v9 == 0;
  v18 = 0xFFFFLL;
  if (v13)
    v18 = 0;
  v13 = v14 == 0;
  v19 = 4294901760;
  if (v13)
    v19 = 0;
  v13 = v16 == 0;
  v20 = 0xFFFF00000000;
  if (v13)
    v20 = 0;
  v13 = HIWORD(v10) == 0;
  v21 = 0xFFFF000000000000;
  if (v13)
    v21 = 0;
  *(_QWORD *)this = v17;
  *((_QWORD *)this + 1) = v19 | v18 | v20 | v21;
}

uint64_t AGCLLVMObject::disableConstantHoisting(AGCLLVMObject *this)
{
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t AGCLLVMUserFragmentShader::getMaxSharedRegisters(AGCLLVMUserFragmentShader *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 848);
}

uint64_t AGCLLVMUserObject::setupShaderWrapper(AGCLLVMUserObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t FnAttrs;
  llvm::ConstantDataSequential *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  _QWORD *v10;
  llvm::Instruction *v11;
  _QWORD *v12;
  llvm::Instruction *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Instruction *v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Instruction *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  llvm::Type *v50;
  llvm::User *PHI;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unsigned int v55;
  llvm::User *v56;
  _BYTE v57[32];
  __int16 v58;
  uint64_t FirstInsertionPt;
  uint64_t v60;
  void *v61;
  unsigned int v62[2];
  _BYTE v63[16];
  __int16 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 80))(this);
  llvm::Module::getOrInsertFunction();
  *((_QWORD *)this + 21) = v2;
  v3 = *((_QWORD *)this + 22);
  if (*(_QWORD *)(v3 + 72) != v3 + 72)
  {
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v2 + 72, (uint64_t *)(v2 + 72), v3 + 72, *(uint64_t **)(v3 + 80), (uint64_t *)(v3 + 72));
    v3 = *((_QWORD *)this + 22);
  }
  v61 = *(void **)(v3 + 112);
  FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v61);
  v60 = FnAttrs;
  v5 = (llvm::ConstantDataSequential *)*((_QWORD *)this + 7);
  if (!v5 || (unint64_t)llvm::ConstantDataSequential::getElementAsInteger(v5) <= 0xD)
  {
    FnAttrs = llvm::AttributeSet::removeAttribute();
    v60 = FnAttrs;
  }
  if (FnAttrs)
  {
    v6 = *((_QWORD *)this + 21);
    LODWORD(v61) = -1;
    *(_QWORD *)v62 = FnAttrs;
    *(_QWORD *)(v6 + 112) = llvm::AttributeList::get();
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 21) + 80);
  if (v7)
    v8 = (llvm::BasicBlock *)(v7 - 24);
  else
    v8 = 0;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v8);
  AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v8, &FirstInsertionPt);
  v64 = 257;
  v9 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v10 = (_QWORD *)*((_QWORD *)v8 + 5);
  if (v10 == (_QWORD *)((char *)v8 + 40))
  {
    v13 = 0;
  }
  else
  {
    v11 = (llvm::Instruction *)(v10 - 3);
    if (v10)
      v12 = v10 - 3;
    else
      v12 = 0;
    if (*((unsigned __int8 *)v12 + 16) - 29 >= 0xB)
      v13 = 0;
    else
      v13 = v11;
  }
  llvm::Instruction::eraseFromParent(v13);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v14 + 11) = v8;
  *((_QWORD *)v14 + 12) = (char *)v8 + 40;
  v15 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 64))(this);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 400))(v16, *((_QWORD *)this + 21));
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v9);
    v61 = "wrapper_exit";
    v64 = 259;
    v17 = (llvm::BasicBlock *)operator new();
    v18 = llvm::BasicBlock::BasicBlock();
    v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v20 = v18 + 40;
    *((_QWORD *)v19 + 11) = v18;
    *((_QWORD *)v19 + 12) = v18 + 40;
    v21 = *((_QWORD *)this + 21);
    v22 = *(_QWORD *)(v21 + 72);
    v23 = *(_QWORD *)(*(_QWORD *)(v21 + 80) + 8);
    v24 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 22) + 24) + 16);
    v25 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v26 = v25[22];
    v61 = v63;
    *(_QWORD *)v62 = 0x500000000;
    if (v23 == v22)
    {
      v25[11] = v17;
      v25[12] = v20;
    }
    else
    {
      v55 = v15;
      do
      {
        if (v23)
          v27 = v23 - 24;
        else
          v27 = 0;
        v28 = *(_QWORD *)(v27 + 40);
        if (v28 != v27 + 40)
        {
          v29 = (llvm::Instruction *)(v28 - 24);
          v30 = v28 ? v28 - 24 : 0;
          v31 = *(unsigned __int8 *)(v30 + 16) - 40;
          v32 = v31 >= 0xFFFFFFF5 ? v29 : 0;
          if (v31 >= 0xFFFFFFF5 && *((_BYTE *)v32 + 16) == 29)
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v32);
            llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v17);
            if (v24 != v26)
            {
              v34 = *((_DWORD *)v32 + 5) & 0x7FFFFFF;
              if ((_DWORD)v34)
                v35 = *((_QWORD *)v32 - 4 * v34);
              else
                v35 = 0;
              v36 = v62[0];
              if (v62[0] >= (unint64_t)v62[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v36 = v62[0];
              }
              v37 = (char *)v61 + 16 * v36;
              *v37 = v35;
              v37[1] = v27;
              ++v62[0];
            }
            llvm::Instruction::eraseFromParent(v29);
          }
        }
        v23 = *(_QWORD *)(v23 + 8);
      }
      while (v23 != v22);
      v38 = v62[0];
      v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v39 + 11) = v17;
      *((_QWORD *)v39 + 12) = v20;
      v15 = v55;
      if (v24 != v26 && v38)
      {
        v40 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)"agc.finalize", 12, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 176), **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 22) + 24) + 16));
        v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        if (v62[0] != 1)
        {
          v50 = **(llvm::Type ***)(*(_QWORD *)(*((_QWORD *)this + 22) + 24) + 16);
          v58 = 257;
          PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v41 + 40), v50, v62[0], (const llvm::Twine *)v57);
          if (v62[0])
          {
            v52 = 0;
            v53 = 0;
            do
            {
              llvm::PHINode::addIncoming(PHI, *(llvm::Value **)((char *)v61 + v52), *(llvm::BasicBlock **)((char *)v61 + v52 + 8));
              ++v53;
              v52 += 16;
            }
            while (v53 < v62[0]);
          }
          v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v56 = PHI;
          v58 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)(v54 + 40), *(_QWORD *)(v40 + 24), v40, (uint64_t)&v56, 1, (uint64_t)v57);
          v15 = v55;
          goto LABEL_53;
        }
        v42 = v61;
        v43 = (uint64_t)(v41 + 40);
        v58 = 257;
        v44 = *(_QWORD *)(v40 + 24);
        v45 = v40;
        v46 = 1;
LABEL_52:
        llvm::IRBuilderBase::CreateCall(v43, v44, v45, (uint64_t)v42, v46, (uint64_t)v57);
LABEL_53:
        (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 72))(this);
        llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
        if (v61 != v63)
          free(v61);
        return v15;
      }
    }
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v45 = v47;
    v48 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v58 = 257;
    v44 = **(_QWORD **)(*(_QWORD *)v47 + 16);
    v43 = (uint64_t)(v48 + 40);
    v42 = 0;
    v46 = 0;
    goto LABEL_52;
  }
  return v15;
}

uint64_t llvm::IRBuilderBase::CreateBr(llvm::IRBuilderBase *this, llvm::BasicBlock *a2)
{
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v3 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  v6 = 257;
  llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v3, (uint64_t)v5);
  return v3;
}

uint64_t AGCLLVMUserObject::hoistAllocas(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Function;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 != a2 + 40)
  {
    v6 = 0;
    while (1)
    {
      if (v4)
        v7 = v4 - 24;
      else
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 == 59)
      {
        v9 = *a3;
        if (*a3)
          v10 = *a3 - 24;
        else
          v10 = 0;
        if (v4 - 24 == v10)
          goto LABEL_28;
      }
      else
      {
        Function = llvm::Module::getFunction();
        if (v8 == 84)
          v12 = v4 - 24;
        else
          v12 = 0;
        if (v8 != 84 || Function == 0)
          goto LABEL_30;
        v14 = *(_QWORD *)(v12 - 32);
        if (!v14 || *(_BYTE *)(v14 + 16) || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v12 + 72))
          v14 = 0;
        if (v14 != Function)
          goto LABEL_30;
        v9 = *a3;
        if (*a3)
          v15 = *a3 - 24;
        else
          v15 = 0;
        if (v12 == v15)
        {
LABEL_28:
          *a3 = *(_QWORD *)(v9 + 8);
          goto LABEL_29;
        }
      }
      llvm::Instruction::moveBefore();
LABEL_29:
      v6 = 1;
LABEL_30:
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v3)
        return v6 & 1;
    }
  }
  v6 = 0;
  return v6 & 1;
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t __src;
  void *v9[2];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  __src = a5;
  v9[0] = v10;
  v9[1] = (void *)0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v9, &__src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v6 = v5;
  if (v9[0] != v10)
    free(v9[0]);
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateRetVoid(llvm::IRBuilderBase *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v2 = *((_QWORD *)this + 8);
  v3 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CAA2C174](v3, v2, 0, 0);
  v6 = 257;
  llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v3, (uint64_t)v5);
  return v3;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != a5)
  {
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
    if (a4 != a5)
    {
      v9 = *a5;
      v10 = *a4;
      *(_QWORD *)(v10 + 8) = a5;
      *a5 = v10;
      v11 = *a2;
      *(_QWORD *)(v9 + 8) = a2;
      *a4 = v11;
      *(_QWORD *)(v11 + 8) = a4;
      *a2 = v9;
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::addWrapperPostfix(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Value *a2)
{
  uint64_t result;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  int *i;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  llvm::Type **v13;
  llvm::Type *v14;
  uint64_t AlignedLoad;
  char *v16;
  llvm::Type **Cast;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  llvm::Value *v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  llvm::Value *v46;
  int v47;
  __int16 v48;

  result = AGCLLVMUserFragmentShader::addWrapperPostfix(this, a2);
  if (*((_DWORD *)this + 1746))
  {
    v5 = *((unsigned int *)this + 1748);
    if ((_DWORD)v5)
    {
      v6 = 40 * v5;
      for (i = (int *)*((_QWORD *)this + 872); *i >= 0xFFFFFFFE; i += 10)
      {
        v6 -= 40;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (int *)*((_QWORD *)this + 872);
    }
    v8 = *((_QWORD *)this + 872) + 40 * v5;
    if (i != (int *)v8)
    {
      v9 = (char *)this + 8;
      v32 = (char *)this + 368;
      v10 = *i;
LABEL_10:
      v11 = *((_QWORD *)i + 1);
      v12 = &v9[*(_QWORD *)(*(_QWORD *)this - 24)];
      v13 = (llvm::Type **)*((_QWORD *)i + 4);
      v48 = 257;
      v14 = AGCLLVMBuilder::tryDeducePointeeType(v13, v4);
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v12 + 4, v14, (uint64_t)v13, 0, (uint64_t)&v45);
      v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v48 = 257;
      Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v16, 49, AlignedLoad, v11, (uint64_t)&v45);
      v18 = *((_WORD *)this + 1781);
      v45 = 0uLL;
      v47 = 0;
      v46 = 0;
      v19 = *(_QWORD *)&v32[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 680))(v19);
      if (*(_BYTE *)(v11 + 8) == 15)
        v11 = **(_QWORD **)(v11 + 16);
      if ((unsigned __int16)(v18 + v10)
         % (unint64_t)llvm::DataLayout::getABITypeAlignment((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 232), (llvm::Type *)v11))
      {
        v20 = *(_QWORD *)&v32[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 680))(v20);
        v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v39 = *(_OWORD *)(v22 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 40));
        v41 = *((_DWORD *)v22 + 34);
        LODWORD(v22) = *(unsigned __int16 *)(*((_QWORD *)this + 614) + 32) >> 12;
        v23 = *((unsigned __int16 *)this + 2156);
        v24 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v42, v21, &v39, 0, v22, v23, Cast, v24, 0, 0);
        v45 = v42;
        result = (uint64_t)llvm::TrackingMDRef::operator=(&v46, &v43);
        v47 = v44;
        if (v43)
          result = llvm::MetadataTracking::untrack();
        v9 = (char *)this + 8;
        if (v40)
LABEL_20:
          result = llvm::MetadataTracking::untrack();
      }
      else
      {
        v25 = *(_QWORD *)&v32[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 680))(v25);
        v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v36 = *(_OWORD *)(v27 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v27 + 40));
        v38 = *((_DWORD *)v27 + 34);
        LODWORD(v27) = *(unsigned __int16 *)(*((_QWORD *)this + 614) + 32) >> 12;
        v28 = *((unsigned __int16 *)this + 2156);
        v29 = llvm::ConstantInt::get();
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v32[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 680))(*(_QWORD *)&v32[*(_QWORD *)(*(_QWORD *)this - 24) + 32]);
        AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v42, v26, &v36, 0, 0, v27, v28, Cast, v29, *(_BYTE *)(v30 + 1770), 0, 0, 0);
        v45 = v42;
        result = (uint64_t)llvm::TrackingMDRef::operator=(&v46, &v43);
        v47 = v44;
        if (v43)
          result = llvm::MetadataTracking::untrack();
        v9 = (char *)this + 8;
        if (v37)
          goto LABEL_20;
      }
      if ((_QWORD)v45)
      {
        v31 = *(_QWORD *)(*(_QWORD *)this - 24);
        v33 = v45;
        v34 = v46;
        if (v46)
          llvm::MetadataTracking::track();
        v35 = v47;
        result = AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v33, (uint64_t)&v9[v31 + 32]);
        if (v34)
          result = llvm::MetadataTracking::untrack();
      }
      v4 = v46;
      if (v46)
        result = llvm::MetadataTracking::untrack();
      while (1)
      {
        i += 10;
        if (i == (int *)v8)
          break;
        v10 = *i;
        if (*i < 0xFFFFFFFE)
        {
          if (i != (int *)v8)
            goto LABEL_10;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _WORD v22[22];
  unsigned int v23;
  _QWORD v24[3];
  _QWORD *v25;
  void *v26[2];
  _QWORD v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  AGCLLVMAGPFragmentShader::addWrapperPrefix(this);
  v2 = *((_QWORD *)this + 21);
  v3 = v2 + 72;
  v4 = *(_QWORD *)(v2 + 80);
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return 1;
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 != v5 + 40)
    {
      v7 = v6 - 24;
      v8 = v6 ? v6 - 24 : 0;
      v9 = *(unsigned __int8 *)(v8 + 16) - 29 >= 0xB ? 0 : v7;
      if (v9 && *(_BYTE *)(v9 + 16) == 29)
        break;
    }
  }
  v10 = *(_DWORD *)(v9 + 20);
  v11 = v10 & 0x7FFFFFF;
  if ((v10 & 0x7FFFFFF) != 0)
  {
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v13 = *(_QWORD *)(v9 - 32 * v11);
      if (v13)
      {
        v23 = 0;
        v14 = *(_DWORD *)(v12 + 8);
        if (v14)
        {
          v15 = 0;
          while (1)
          {
            v16 = *(_QWORD *)(v12 - 8 * v14 + 8 * v15);
            if (v16)
            {
              if (isStringMDNode(*(llvm::MDString **)(v16 - 8 * *(unsigned int *)(v16 + 8)), "air.imageblock_data"))
                break;
            }
LABEL_31:
            v15 = v23 + 1;
            v23 = v15;
            v12 = *((_QWORD *)this + 9);
            v14 = *(_DWORD *)(v12 + 8);
            if (v15 >= v14)
              return 1;
          }
          v26[0] = v27;
          v26[1] = (void *)0x500000000;
          v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v22[16] = 257;
          v18 = *(_QWORD *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, v13, (uint64_t)&v23, 1, (uint64_t)v22);
          v24[0] = &off_1E7E68278;
          v24[1] = this;
          v25 = v24;
          AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v18, (uint64_t)v26, (uint64_t)this + 6952, 0, 1, (uint64_t)v24);
          v19 = v25;
          if (v25 == v24)
          {
            v19 = v24;
            v20 = 4;
          }
          else
          {
            if (!v25)
              goto LABEL_29;
            v20 = 5;
          }
          (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_29:
          if (v26[0] != v27)
            free(v26[0]);
          goto LABEL_31;
        }
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::wrapperFunctionType(AGCLLVMUserFragmentShader *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMAGPFragmentShader::addWrapperPrefix(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v2;
  const char *v3;
  const char *Value;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  AGCLLVMUserFragmentShader::addWrapperPrefix(this);
  if (*((_DWORD *)this + 1610) == 1)
  {
    v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (!*(_BYTE *)(v2 + 1744) || *((_BYTE *)this + 5845) && *((_BYTE *)this + 5862))
    {
      *(_BYTE *)(v2 + 1744) = 0;
      if (!MGGetBoolAnswer()
        || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_STUB_MOVMSK", v3)) == 0
        || *Value == 48
        || !atoi(Value))
      {
        v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v6 = *((_QWORD *)v5 + 50);
        v9 = *(_OWORD *)(v5 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
        v11 = *((_DWORD *)v5 + 34);
        v7 = llvm::ConstantInt::get();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v6 + 616))(v6, &v9, v7);
        if (v10)
          llvm::MetadataTracking::untrack();
      }
    }
    *((_BYTE *)this + 5468) = 1;
  }
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::addWrapperPrefix(AGCLLVMUserFragmentShader *this)
{
  char *v2;
  uint64_t v3;
  llvm::Type *v4;
  llvm::BasicBlock **v5;
  uint64_t Alloca;
  llvm::Type *v7;
  llvm::BasicBlock **v8;
  uint64_t v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  llvm::Type *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::Type **v21;
  char *v22;
  llvm::Type *v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Type **v26;
  uint64_t v27;
  char *v28;
  llvm::Type *v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::Type **v32;
  llvm::GlobalVariable *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  llvm::Value *v38;
  llvm::Type *v39;
  llvm::Value *AlignedLoad;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  _QWORD v49[4];
  __int16 v50;

  v2 = (char *)this + 5208;
  v3 = -256;
  do
  {
    v4 = *(llvm::Type **)&v2[v3];
    if (v4)
    {
      v5 = (llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v50 = 257;
      Alloca = llvm::IRBuilderBase::CreateAlloca(v5, v4, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v2[v3 + 8], Alloca);
    }
    v7 = *(llvm::Type **)((char *)this + v3 + 5464);
    if (v7)
    {
      v8 = (llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v50 = 257;
      v9 = llvm::IRBuilderBase::CreateAlloca(v8, v7, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v2[v3 + 264], v9);
    }
    v3 += 32;
  }
  while (v3);
  v10 = (char *)this + 5464;
  v11 = *((_BYTE *)this + 5464);
  if ((v11 & 4) != 0)
  {
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = *(_OWORD *)(v12 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v12 + 40));
    v48 = *((_DWORD *)v12 + 34);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40, *(_QWORD *)(*((_QWORD *)this + 708) + 40), *(_QWORD *)(*((_QWORD *)this + 708) + 32));
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v14 = (llvm::Type *)*((_QWORD *)v13 + 25);
    v50 = 257;
    v15 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v13 + 5, v14, 0, (const llvm::Twine *)v49);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5472), v15);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *((llvm::Type ***)this + 708), *((_QWORD *)this + 686), 0);
    v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v43 = v46;
    v44 = v47;
    if (v47)
      llvm::MetadataTracking::track();
    v45 = v48;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v43, (uint64_t)(v16 + 8));
    if (v44)
      llvm::MetadataTracking::untrack();
    if (v47)
      llvm::MetadataTracking::untrack();
    v11 = *v10;
    if ((*v10 & 8) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0)
        goto LABEL_10;
LABEL_20:
      v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v23 = (llvm::Type *)*((_QWORD *)v22 + 29);
      v50 = 257;
      v24 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v22 + 5, v23, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5520), v24);
      v25 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v26 = (llvm::Type **)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateAlignedStore(v25, v26, *((_QWORD *)this + 692), 0);
      if ((*v10 & 1) == 0)
        return 1;
      goto LABEL_21;
    }
  }
  else if ((*((_BYTE *)this + 5464) & 8) == 0)
  {
    goto LABEL_9;
  }
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v18 = (llvm::Type *)*((_QWORD *)v17 + 28);
  v50 = 257;
  v19 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v17 + 5, v18, 0, (const llvm::Twine *)v49);
  llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5496), v19);
  v20 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v21 = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateAlignedStore(v20, v21, *((_QWORD *)this + 689), 0);
  v11 = *v10;
  if ((*v10 & 2) != 0)
    goto LABEL_20;
LABEL_10:
  if ((v11 & 1) == 0)
    return 1;
LABEL_21:
  if ((*(_BYTE *)(*((_QWORD *)this + 725) + 1) & 8) != 0)
  {
    v33 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v49[0] = "agc.alpha_test_ref";
    v50 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v35 = *((_QWORD *)v34 + 47);
    v36 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v34 + 32), v33);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v35, v36);
    v37 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v50 = 257;
    v39 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v33, v38);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v37 + 5, v39, (uint64_t)v33, 0, (uint64_t)v49);
    v41 = AGCLLVMUserFragmentShader::buildAlphaQuantize(this, AlignedLoad);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5568), v41);
  }
  else
  {
    v27 = llvm::ConstantFP::get();
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5568), v27);
    *((_DWORD *)this + 1398) = 6;
    v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v29 = (llvm::Type *)*((_QWORD *)v28 + 25);
    v50 = 257;
    v30 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v28 + 5, v29, 0, (const llvm::Twine *)v49);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5544), v30);
    v31 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v32 = (llvm::Type **)llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateAlignedStore(v31, v32, *((_QWORD *)this + 695), 0);
  }
  return 1;
}

uint64_t AGCLLVMBuilder::createAllocaInEntryBlock(AGCLLVMBuilder *this, llvm::Type *a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v8;
  uint64_t Alloca;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = (AGCLLVMBuilder *)((char *)this + 8);
  v16 = *(_OWORD *)((char *)this + 56);
  v5 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 80);
  if (v5)
    v6 = (llvm::BasicBlock *)(v5 - 24);
  else
    v6 = 0;
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMBuilder *)((char *)this + 8));
  v18 = *((_DWORD *)this + 26);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
  if (FirstInsertionPt)
    v8 = (llvm::Instruction *)(FirstInsertionPt - 24);
  else
    v8 = 0;
  llvm::IRBuilderBase::SetInsertPoint(v4, v8);
  v15 = 257;
  Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v4, a2, 0, (const llvm::Twine *)v14);
  v11 = v16;
  v12 = v17;
  if (v17)
    llvm::MetadataTracking::track();
  v13 = v18;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v11, (uint64_t)v4);
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v17)
    llvm::MetadataTracking::untrack();
  return Alloca;
}

uint64_t llvm::IRBuilderBase::CreateAlloca(llvm::BasicBlock **this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;

  Module = (llvm::Module *)llvm::BasicBlock::getModule(this[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  v9 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  (*(void (**)(llvm::BasicBlock *, uint64_t, const llvm::Twine *, llvm::BasicBlock *, llvm::BasicBlock *))(*(_QWORD *)this[10] + 16))(this[10], v9, a4, this[6], this[7]);
  v10 = *((unsigned int *)this + 2);
  if ((_DWORD)v10)
  {
    v11 = *this;
    v12 = (llvm::BasicBlock *)((char *)v11 + 16 * v10);
    do
    {
      llvm::Instruction::setMetadata();
      v11 = (llvm::BasicBlock *)((char *)v11 + 16);
    }
    while (v11 != v12);
  }
  return v9;
}

uint64_t AGCLLVMObject::getTempRegistersLimit(AGCLLVMObject *this, unsigned int *a2)
{
  uint64_t result;

  *a2 = *(_DWORD *)(*((_QWORD *)this + 50) + 884);
  result = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 96))(this);
  if ((_DWORD)result)
  {
    *a2 = result;
    return (_DWORD)result != *(_DWORD *)(*((_QWORD *)this + 50) + 884);
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit(AGCLLVMAGPFragmentShaderGen3 *this, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 96))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[50] + 884);
  }
  if (*((_DWORD *)this + 1816))
  {
    v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
    AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(v7, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464), *((_DWORD *)this + 1816));
    return 1;
  }
  return result;
}

const char *AGCLLVMObject::getMaxTempRegistersOverride(AGCLLVMObject *this)
{
  const char *result;
  const char *v2;

  result = (const char *)MGGetBoolAnswer();
  if ((_DWORD)result)
  {
    result = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_TEMP_REGS_IN_BYTES", v2);
    if (result)
    {
      if (*result == 48)
        return 0;
      else
        return (const char *)((atoi(result) + 3) >> 2);
    }
  }
  return result;
}

BOOL AGCLLVMUserObject::allocateTexturesAndSamplers(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  AGCLLVMUserObject *v2;
  AGCLLVMUserObject *v3;
  AGCLLVMUserObject *v4;
  AGCLLVMUserObject *v5;
  int v6;
  BOOL v7;
  int v8;
  const char *v9;
  const char *Value;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  BOOL v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int Key;
  BOOL v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int isTextureOrSamplerType;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  _BOOL4 v65;
  int v66;
  char v67;
  int v68;
  uint64_t *v69;
  char v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  unsigned int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  unsigned int v88;
  unint64_t v89;
  _QWORD *v90;
  llvm::GlobalVariable *v91;
  char v92;
  char v93;
  uint64_t (***v94)();
  char *v95;
  uint64_t v96;
  uint64_t v97;
  llvm::GlobalVariable *NullValue;
  char v99;
  char v100;
  uint64_t (***v101)();
  llvm::Constant *v102;
  llvm::Type *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  llvm::GlobalVariable *v107;
  char v108;
  char v109;
  uint64_t (***v110)();
  char *v111;
  uint64_t v112;
  uint64_t v113;
  llvm::GlobalVariable *v114;
  char v115;
  char v116;
  uint64_t (***v117)();
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  llvm::Value *v122;
  char v123;
  char v124;
  uint64_t (***v125)();
  unint64_t *v126;
  _QWORD *v127;
  _QWORD **v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  BOOL v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (***v138)();
  uint64_t v139;
  _BOOL8 v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  int *v151;
  int v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (***v179)();
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t *v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  char v193;
  _QWORD *v194;
  char v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  char v206;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  BOOL v231;
  char v232;
  _BOOL4 v233;
  _BOOL4 v234;
  int v235;
  int v236;
  int v237;
  int v238;
  char *v239;
  _DWORD *v240;
  AGCLLVMUserObject *v241;
  _QWORD **v242;
  _QWORD *v243[2];
  _QWORD *v244;
  _QWORD v245[2];
  _QWORD *v246;
  _QWORD v247[2];
  _QWORD **v248;
  _QWORD *v249[2];
  _QWORD *v250;
  _QWORD v251[2];
  _QWORD *v252;
  _QWORD v253[2];
  char v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t v257;
  int v258;
  _BYTE v259[64];
  unsigned int v260;
  uint64_t v261;
  _QWORD v262[3];
  _QWORD *v263;
  _QWORD v264[3];
  _QWORD *v265;
  _QWORD v266[3];
  _QWORD *v267;
  _QWORD v268[3];
  _QWORD *v269;
  _QWORD v270[3];
  _QWORD *v271;
  void *__p;
  unsigned int v273[8];
  int v274;
  char v275[24];
  _QWORD *v276;
  _QWORD v277[3];
  _QWORD *v278;
  void *v279;
  uint64_t v280;
  unint64_t *v281;
  void **v282;
  char v283;
  char v284;
  _QWORD v285[3];
  _QWORD *v286;
  _QWORD v287[3];
  _QWORD *v288;
  _BYTE v289[24];
  _BYTE *v290;
  _QWORD v291[3];
  _QWORD *v292;
  _QWORD v293[3];
  _QWORD *v294;
  _BYTE v295[24];
  _BYTE *v296;
  _BYTE v297[24];
  _BYTE *v298;
  _QWORD v299[3];
  _QWORD *v300;
  _QWORD v301[3];
  _QWORD *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _QWORD v305[3];
  _QWORD *v306;
  _QWORD v307[3];
  _QWORD *v308;
  __int128 v309;
  __int128 v310;
  int v311;
  _QWORD v312[3];
  _QWORD *v313;
  _QWORD v314[3];
  _QWORD *v315;
  unint64_t TypeAllocSize;
  void **v317;
  const char *v318;
  unint64_t *p_TypeAllocSize;
  __int16 v320;
  uint64_t (**v321)();
  void **v322;
  unint64_t v323;
  uint64_t (***v324)();
  char v325;
  char v326;
  uint64_t (**v327)();
  _QWORD **v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;

  v1 = this;
  v331 = *MEMORY[0x1E0C80C00];
  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v3);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v4);
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v5);
  v255 = (uint64_t *)v259;
  v256 = (uint64_t *)v259;
  v257 = 8;
  v258 = 0;
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
  v230 = v6;
  if (*((_BYTE *)v1 + 15))
    v7 = 1;
  else
    v7 = v6 == 29;
  v8 = v7;
  v237 = v8;
  v11 = MGGetBoolAnswer()
     && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v9)) != 0
     && *Value != 48
     && atoi(Value)
     || *(_DWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1780) != 0;
  v233 = v11;
  v14 = MGGetBoolAnswer()
     && (v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS", v12)) != 0
     && *v13 != 48
     && atoi(v13)
     || *(_DWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1780) != 0;
  v231 = v14;
  v234 = 0;
  if (MGGetBoolAnswer())
  {
    v16 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS_HEAP", v15);
    if (v16)
    {
      if (*v16 != 48 && atoi(v16))
        v234 = 1;
    }
  }
  v236 = *((_DWORD *)v1 + 829);
  v235 = *((_DWORD *)v1 + 832);
  v17 = *(_QWORD *)(*(_QWORD *)v1 - 24) + 32;
  v18 = *(_QWORD *)((char *)v1 + v17 + 336);
  v19 = v18 + 24;
  v20 = *(_QWORD *)(v18 + 32);
  v239 = (char *)v1 + 368;
  v241 = v1;
  if (v20 != v18 + 24)
  {
    v238 = 0;
    v21 = 0;
    v240 = (_DWORD *)((char *)v1 + 3568);
    v22 = &AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map;
    while (1)
    {
      v23 = v20 - 56;
      v7 = v20 == 0;
      v20 = *(_QWORD *)(v20 + 8);
      v24 = v7 ? 0 : v23;
      llvm::Value::getName((llvm::Value *)v24);
      Key = llvm::StringMapImpl::FindKey();
      v26 = Key == -1 || dword_1ED839B78 == (uint64_t)Key;
      v27 = !v26;
      llvm::Value::getName((llvm::Value *)v24);
      v28 = llvm::StringMapImpl::FindKey();
      if (v28 != -1 && v28 != (unint64_t)*((unsigned int *)v22 + 2))
        break;
      llvm::Value::getName((llvm::Value *)v24);
      v36 = llvm::StringMapImpl::FindKey();
      if (v36 != -1 && v36 != (unint64_t)dword_1ED839B98
        || (llvm::Value::getName((llvm::Value *)v24), v37 = llvm::StringMapImpl::FindKey(), v37 != -1)
        && v37 != (unint64_t)dword_1ED839BD8
        || (llvm::Value::getName((llvm::Value *)v24), v38 = llvm::StringMapImpl::FindKey(), v38 != -1)
        && v38 != (unint64_t)dword_1ED839B78
        && (__p = (void *)llvm::Value::getName((llvm::Value *)v24), *(_QWORD *)v273 = v39, llvm::StringRef::find() == -1))
      {
        if ((*(_WORD *)(v24 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v24);
        __p = **(void ***)(v24 + 88);
        v43 = __p;
        llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&__p);
        if (v43 && *((_BYTE *)v43 + 8) == 15)
        {
          v279 = (void *)**((_QWORD **)v43 + 2);
          llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&v279);
        }
        v32 = 0;
        goto LABEL_72;
      }
      llvm::Value::getName((llvm::Value *)v24);
      v40 = llvm::StringMapImpl::FindKey();
      if (v40 != -1 && v40 != (unint64_t)dword_1ED839128)
      {
        if ((*(_WORD *)(v24 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v24);
        __p = **(void ***)(v24 + 88);
        v41 = __p;
        llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&__p);
        if (v41 && *((_BYTE *)v41 + 8) == 15)
        {
          v279 = (void *)**((_QWORD **)v41 + 2);
          llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&v279);
        }
        if ((*(_QWORD *)(v24 + 8) != 0) | v238 & 1)
        {
          v42 = *(_QWORD *)(*(_QWORD *)v241 - 24);
          if (!*(_BYTE *)(*(_QWORD *)&v239[v42 + 32] + 1795))
          {
            std::string::append((std::string *)((char *)v241 + v42 + 8), "Texture atomics not supported on device architecture.");
            v140 = 0;
            goto LABEL_369;
          }
          v32 = 0;
          v238 = 1;
        }
        else
        {
          v32 = 0;
          v238 = 0;
        }
        goto LABEL_72;
      }
LABEL_74:
      v21 |= v27;
      if (v20 == v19)
      {
        v1 = v241;
        v17 = *(_QWORD *)(*(_QWORD *)v241 - 24) + 32;
        goto LABEL_78;
      }
    }
    v29 = v19;
    v30 = v22;
    v31 = *(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * v28);
    v32 = *(unsigned __int8 *)(v31 + 38);
    v33 = *(unsigned __int8 *)(v31 + 39);
    if ((*(_WORD *)(v24 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v24);
    __p = *(void **)(*(_QWORD *)(v24 + 88) + 40 * v32);
    v34 = __p;
    llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&__p);
    if (v34)
      v35 = *((_BYTE *)v34 + 8) == 15;
    else
      v35 = 0;
    if (v35)
    {
      v279 = (void *)**((_QWORD **)v34 + 2);
      llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v240, (uint64_t *)&v279);
    }
    if ((*(_WORD *)(v24 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v24);
    *((_QWORD *)v241 + 453) = *(_QWORD *)(*(_QWORD *)(v24 + 88) + 40 * v33);
    v22 = v30;
    v19 = v29;
LABEL_72:
    for (i = *(_QWORD *)(v24 + 8); i; i = *(_QWORD *)(i + 8))
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__p, (llvm::SmallPtrSetImplBase *)&v255, *(void **)(*(_QWORD *)(i + 24) - 32 * (*(_DWORD *)(*(_QWORD *)(i + 24) + 20) & 0x7FFFFFF) + 32 * v32));
    goto LABEL_74;
  }
  v21 = 0;
  v238 = 0;
LABEL_78:
  v45 = *(_QWORD *)((char *)v1 + v17 + 336);
  v46 = v45 + 24;
  v47 = *(_QWORD *)(v45 + 32);
  if (v47 != v45 + 24)
  {
    v48 = 0;
    v49 = 0;
    while (1)
    {
      v50 = v47 - 56;
      if (!v47)
        v50 = 0;
      v51 = v50 + 72;
      for (j = *(_QWORD *)(v50 + 80); j != v51; j = *(_QWORD *)(j + 8))
      {
        v53 = j - 24;
        if (!j)
          v53 = 0;
        v54 = *(_QWORD *)(v53 + 48);
        if (v54 != v53 + 40)
        {
          while (1)
          {
LABEL_117:
            if (j == v51)
              goto LABEL_118;
            v55 = (uint64_t *)(v54 - 24);
            if (v54)
              v56 = v54 - 24;
            else
              v56 = 0;
            v57 = *(unsigned __int8 *)(v56 + 16);
            if (v54 && v57 == 60)
              goto LABEL_93;
            if (v54 && v57 == 77)
            {
              v58 = **(_QWORD **)(v56 - 32);
              v59 = *(_DWORD *)(v58 + 8);
              if (v59 == 15)
                goto LABEL_99;
              goto LABEL_104;
            }
            if (v54 && v57 == 75)
            {
LABEL_93:
              v55 = *(uint64_t **)(v56 - 32);
            }
            else if (!v54 || v57 != 76)
            {
              goto LABEL_104;
            }
            v58 = *v55;
            if (v58)
            {
              v59 = *(_DWORD *)(v58 + 8);
LABEL_99:
              if ((v59 >> 8) - 1 <= 1)
              {
                isTextureOrSamplerType = AGCLLVMUserObject::isTextureOrSamplerType(v241, **(llvm::Type ***)(v58 + 16));
                v48 |= isTextureOrSamplerType & 1;
                v49 |= (isTextureOrSamplerType >> 8) & 1;
                if ((!*((_DWORD *)v241 + 900) || v48) && (!*((_QWORD *)v241 + 453) || v49))
                  goto LABEL_121;
              }
            }
LABEL_104:
            v54 = *(_QWORD *)(v54 + 8);
            v61 = j - 24;
            if (!j)
              v61 = 0;
            if (v54 == v61 + 40)
            {
              while (1)
              {
                j = *(_QWORD *)(j + 8);
                if (j == v51)
                  goto LABEL_118;
                v62 = j - 24;
                if (!j)
                  v62 = 0;
                v54 = *(_QWORD *)(v62 + 48);
                if (v54 != v62 + 40)
                  goto LABEL_117;
              }
            }
          }
        }
      }
LABEL_118:
      v47 = *(_QWORD *)(v47 + 8);
      if (v47 == v46)
        goto LABEL_121;
    }
  }
  v49 = 0;
  LOBYTE(v48) = 0;
LABEL_121:
  v63 = (*((_BYTE *)v241 + 3658) != 0) | v48;
  *((_BYTE *)v241 + 3658) = (*((_BYTE *)v241 + 3658) != 0) | v48 & 1;
  *((_BYTE *)v241 + 3659) = (*((unsigned __int8 *)v241 + 3659) | v49) != 0;
  if (*(_BYTE *)(*(_QWORD *)((char *)v241 + *(_QWORD *)(*(_QWORD *)v241 - 24) + 400) + 1755))
  {
    v64 = 0;
  }
  else if (v63 & 1 | ((v235 + v236) > 0x30) || (AGCLLVMUserObject::needsDylibResources(v241) & 1) != 0)
  {
    v64 = 1;
  }
  else
  {
    v64 = (*((_BYTE *)v241 + 15) != 0) | v238 | (v231 || v234);
  }
  if (!*(_BYTE *)(*(_QWORD *)((char *)v241 + *(_QWORD *)(*(_QWORD *)v241 - 24) + 400) + 1755))
  {
    if (*((_BYTE *)v241 + 3659) || ((AGCLLVMUserObject::needsDylibResources(v241) | v233) & 1) != 0)
    {
      v65 = 1;
      if ((v64 & 1) != 0)
        goto LABEL_133;
    }
    else
    {
      v65 = *((_BYTE *)v241 + 15) != 0;
      if ((v64 & 1) != 0)
        goto LABEL_133;
    }
LABEL_140:
    v67 = 0;
    goto LABEL_141;
  }
  v65 = 0;
  if ((v64 & 1) == 0)
    goto LABEL_140;
LABEL_133:
  if (*((_BYTE *)v241 + 3658) || (AGCLLVMUserObject::needsDylibResources(v241) & 1) != 0)
    goto LABEL_140;
  v66 = v234;
  if (*((_BYTE *)v241 + 15))
    v66 = 1;
  if (((v66 | v238) & 1) != 0)
    goto LABEL_140;
  v67 = (v230 != 29) & ~v21;
LABEL_141:
  *((_BYTE *)v241 + 3566) = v67;
  if (!v65
    || *((_BYTE *)v241 + 3659)
    || (AGCLLVMUserObject::needsDylibResources(v241) & 1) != 0
    || *((_BYTE *)v241 + 15))
  {
    LOBYTE(v68) = 0;
  }
  else
  {
    v68 = *(_DWORD *)(*(_QWORD *)((char *)v241 + *(_QWORD *)(*(_QWORD *)v241 - 24) + 400) + 1780);
    if (v68)
      LOBYTE(v68) = (v230 != 29) & ~v21;
  }
  *((_BYTE *)v241 + 3696) = v68;
  v254 = 1;
  if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v241 + 400))(v241) & 1) == 0)
  {
    v71 = v253;
    v253[0] = 0;
    v253[1] = 0;
    v252 = v253;
    v69 = (uint64_t *)v241;
    std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v252, *((_QWORD **)v241 + 122), (_QWORD *)v241 + 123);
    __p = &v273[2];
    *(_QWORD *)v273 = 0x400000000;
    v327 = &off_1E7EB7E00;
    v328 = &v329;
    v329 = 0;
    v330 = 0;
    v314[0] = &off_1E7EB84F8;
    v314[1] = &v327;
    v315 = v314;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v314);
    v72 = v315;
    if (v315 == v314)
    {
      v73 = 4;
      v72 = v314;
    }
    else
    {
      if (!v315)
        goto LABEL_159;
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_159:
    v312[0] = &off_1E7EB8588;
    v312[1] = &v327;
    v313 = v312;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 383), (uint64_t)v312);
    v75 = v313;
    if (v313 == v312)
    {
      v76 = 4;
      v75 = v312;
    }
    else
    {
      if (!v313)
        goto LABEL_164;
      v76 = 5;
    }
    (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_164:
    v232 = v64;
    v310 = 0u;
    v309 = 0u;
    v311 = 1065353216;
    v77 = v328;
    if (v328 != &v329)
    {
      while (1)
      {
        v78 = (_QWORD *)v253[0];
        if (!v253[0])
          break;
        v79 = *((_DWORD *)v77 + 9);
        v80 = v71;
        do
        {
          v81 = v78;
          v82 = v80;
          v83 = *((_DWORD *)v78 + 9) + *((_DWORD *)v78 + 8);
          v84 = v78 + 1;
          if (v83 > v79)
          {
            v84 = v81;
            v80 = v81;
          }
          v78 = (_QWORD *)*v84;
        }
        while (v78);
        if (v80 == v71)
          break;
        if (v83 > v79)
        {
          v85 = (uint64_t)(v81 + 4);
        }
        else
        {
          v81 = v82;
          v85 = (uint64_t)(v82 + 4);
        }
        if (v79 < *((_DWORD *)v81 + 8))
          break;
        v86 = *((_DWORD *)v77 + 7);
        if (*((_DWORD *)v77 + 8) != v86)
          break;
        v87 = v71;
        AGCLLVMUserObject::Sampler::getAllocationInfo((uint64_t)&v260, v85, v86);
        v88 = v260;
        v89 = ((unint64_t)v260 >> 20) & 0x7FF;
        v90 = (_QWORD *)(v260 & 0xFFFFFLL);
        v91 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v88 & 0x80000000) != 0)
        {
          TypeAllocSize = v89;
          v318 = ".";
          v320 = 776;
          v92 = 2;
          v93 = 8;
          v94 = &v321;
          v321 = (uint64_t (**)())&TypeAllocSize;
          v323 = (unint64_t)v90;
        }
        else
        {
          LODWORD(v321) = (_DWORD)v90;
          v92 = 8;
          v93 = 1;
          v94 = (uint64_t (***)())v321;
        }
        v325 = v92;
        v326 = v93;
        v279 = "agc.sampler_words";
        v281 = (unint64_t *)v94;
        v283 = 3;
        v284 = v92;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v91 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        v95 = (char *)v69 + *(_QWORD *)(*v69 - 24);
        v96 = *((_QWORD *)v95 + 47);
        v97 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v95 + 32), v91);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v96, v97);
        if ((*(unsigned int (**)(uint64_t *))(*v69 + 368))(v69))
        {
          NullValue = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          if ((v88 & 0x80000000) != 0)
          {
            TypeAllocSize = v89;
            v318 = ".";
            v320 = 776;
            v321 = (uint64_t (**)())&TypeAllocSize;
            v323 = v90;
            v99 = 2;
            v100 = 8;
            v101 = &v321;
          }
          else
          {
            LODWORD(v321) = (_DWORD)v90;
            v99 = 8;
            v100 = 1;
            v101 = (uint64_t (***)())v321;
          }
          v325 = v99;
          v326 = v100;
          v279 = "agc.es1_sampler_lod_bias";
          v281 = (unint64_t *)v101;
          v282 = v322;
          v283 = 3;
          v284 = v99;
          llvm::GlobalVariable::GlobalVariable();
          *((_BYTE *)NullValue + 80) |= 1u;
          llvm::GlobalObject::setSection();
          v104 = (char *)v69 + *(_QWORD *)(*v69 - 24);
          v105 = *((_QWORD *)v104 + 47);
          v106 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v104 + 32), NullValue);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v105, v106);
        }
        else
        {
          v102 = (llvm::Constant *)llvm::PointerType::get();
          NullValue = (llvm::GlobalVariable *)llvm::Constant::getNullValue(v102, v103);
        }
        v107 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v88 & 0x80000000) != 0)
        {
          TypeAllocSize = v89;
          v318 = ".";
          v320 = 776;
          v321 = (uint64_t (**)())&TypeAllocSize;
          v323 = v90;
          v108 = 2;
          v109 = 8;
          v110 = &v321;
        }
        else
        {
          LODWORD(v321) = (_DWORD)v90;
          v108 = 8;
          v109 = 1;
          v110 = (uint64_t (***)())v321;
        }
        v325 = v108;
        v326 = v109;
        v279 = "agc.sampler_unique_id";
        v281 = (unint64_t *)v110;
        v283 = 3;
        v284 = v108;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v107 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v111 = (char *)v69 + *(_QWORD *)(*v69 - 24);
        v112 = *((_QWORD *)v111 + 47);
        v113 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v111 + 32), v107);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v112, v113);
        v114 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v88 & 0x80000000) != 0)
        {
          TypeAllocSize = v89;
          v318 = ".";
          v320 = 776;
          v321 = (uint64_t (**)())&TypeAllocSize;
          v323 = v90;
          v115 = 2;
          v116 = 8;
          v117 = &v321;
        }
        else
        {
          LODWORD(v321) = (_DWORD)v90;
          v115 = 8;
          v116 = 1;
          v117 = (uint64_t (***)())v321;
        }
        v325 = v115;
        v326 = v116;
        v279 = "agc.sampler_heap_index";
        v281 = (unint64_t *)v117;
        v283 = 3;
        v284 = v115;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v114 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v118 = (char *)v69 + *(_QWORD *)(*v69 - 24);
        v119 = *((_QWORD *)v118 + 47);
        v120 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v118 + 32), v114);
        v121 = v119;
        v69 = (uint64_t *)v241;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v121, v120);
        if ((*(_BYTE *)(v261 + 9) & 1) == 0)
        {
          v279 = (void *)llvm::PointerType::get();
          v280 = llvm::PointerType::get();
          v281 = (unint64_t *)llvm::PointerType::get();
          llvm::StructType::setBody();
        }
        v279 = v91;
        v280 = (uint64_t)NullValue;
        v281 = (unint64_t *)v107;
        llvm::ConstantStruct::get();
        v122 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
        if ((v88 & 0x80000000) != 0)
        {
          TypeAllocSize = v89;
          v318 = ".";
          v320 = 776;
          v321 = (uint64_t (**)())&TypeAllocSize;
          v323 = v90;
          v123 = 2;
          v124 = 8;
          v125 = &v321;
        }
        else
        {
          LODWORD(v321) = (_DWORD)v90;
          v123 = 8;
          v124 = 1;
          v125 = (uint64_t (***)())v321;
        }
        v71 = v87;
        v325 = v123;
        v326 = v124;
        v279 = "agc.sampler_state_struct_ptr";
        v281 = (unint64_t *)v125;
        v283 = 3;
        v284 = v123;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v122 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        *(_DWORD *)llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v241 + 696, v122) = (_DWORD)v90;
        v279 = (void *)4;
        v280 = 0;
        v281 = (unint64_t *)v122;
        v126 = (unint64_t *)v122;
        if (v122 != (llvm::Value *)-8192)
        {
          v126 = (unint64_t *)v122;
          if (v122 != (llvm::Value *)-4096)
          {
            v126 = (unint64_t *)v122;
            if (v122)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v279);
              v126 = v281;
            }
          }
        }
        std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>((uint64_t *)v241 + 103, (unint64_t)v126, &v279);
        if (v281 != (unint64_t *)-8192 && v281 != (unint64_t *)-4096 && v281)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v279);
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v309, *((_DWORD *)v77 + 7), (_DWORD *)v77 + 7)[3] = v122;
        v127 = v77[1];
        if (v127)
        {
          do
          {
            v128 = (_QWORD **)v127;
            v127 = (_QWORD *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v128 = (_QWORD **)v77[2];
            v7 = *v128 == v77;
            v77 = v128;
          }
          while (!v7);
        }
        v77 = v128;
        if (v128 == &v329)
          goto LABEL_210;
      }
      v133 = 0;
      v64 = v232;
      goto LABEL_229;
    }
LABEL_210:
    TypeAllocSize = (unint64_t)&v309;
    LOBYTE(v260) = 1;
    v279 = &off_1E7EB8618;
    v280 = (uint64_t)&v260;
    v281 = &TypeAllocSize;
    v282 = &v279;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[371], (uint64_t)&v279);
    v131 = v282;
    if (v282 == &v279)
    {
      v132 = 4;
      v131 = &v279;
      v64 = v232;
    }
    else
    {
      v64 = v232;
      if (!v282)
        goto LABEL_223;
      v132 = 5;
    }
    (*((void (**)(void **, uint64_t, uint64_t))*v131 + v132))(v131, v129, v130);
LABEL_223:
    v321 = &off_1E7EB86A8;
    v322 = (void **)&v260;
    v323 = (unint64_t)&TypeAllocSize;
    v324 = &v321;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[383], (uint64_t)&v321);
    v138 = v324;
    if (v324 == &v321)
    {
      v139 = 4;
      v138 = &v321;
    }
    else
    {
      if (!v324)
      {
LABEL_228:
        v133 = (_BYTE)v260 != 0;
LABEL_229:
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)&v309);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v329);
        if (__p != &v273[2])
          free(__p);
        v254 = v133;
        v74 = (_QWORD *)v253[0];
        goto LABEL_232;
      }
      v139 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v138)[v139])(v138, v136, v137);
    goto LABEL_228;
  }
  if (v237)
  {
    v69 = (uint64_t *)v241;
    v70 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v241, 0);
    v254 = v70;
    __p = v241;
    v307[0] = &off_1E7EB88A0;
    v307[1] = &__p;
    v308 = v307;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 383), (uint64_t)v307);
    v134 = v308;
    if (v308 == v307)
    {
      v135 = 4;
      v134 = v307;
    }
    else
    {
      if (!v308)
        goto LABEL_219;
      v135 = 5;
    }
    (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_219:
    if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v241 + 384))(v241) & 1) == 0)
    {
LABEL_297:
      if (v254)
      {
        v169 = (uint64_t)(v69 + 362);
        v247[0] = 0;
        v247[1] = 0;
        v246 = v247;
        std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v246, *((_QWORD **)v241 + 119), (_QWORD *)v241 + 120);
        v69 = (uint64_t *)v241;
        v254 = AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(v241, v169, (uint64_t)v241 + 2992, (uint64_t)&v246);
        v170 = (_QWORD *)v247[0];
LABEL_299:
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v170);
        goto LABEL_368;
      }
      goto LABEL_315;
    }
    goto LABEL_292;
  }
  if (!v65)
  {
    v251[0] = 0;
    v251[1] = 0;
    v250 = v251;
    std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v250, *((_QWORD **)v241 + 122), (_QWORD *)v241 + 123);
    v69 = (uint64_t *)v241;
    v254 = AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>((uint64_t)v241, (uint64_t)v241 + 2944, (uint64_t)v241 + 3040, (uint64_t)&v250);
    v74 = (_QWORD *)v251[0];
LABEL_232:
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v74);
    goto LABEL_290;
  }
  v69 = (uint64_t *)v241;
  if (*((_BYTE *)v241 + 3696))
  {
    v282 = 0;
    v281 = 0;
    v280 = (uint64_t)&v281;
    v279 = &off_1E7EB7E00;
    __p = &v273[2];
    *(_QWORD *)v273 = 0x400000000;
    if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v241))
      v254 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v241, 0);
    v305[0] = &off_1E7EB8B28;
    v305[1] = &v279;
    v306 = v305;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v305);
    v143 = v306;
    if (v306 == v305)
    {
      v144 = 4;
      v143 = v305;
    }
    else
    {
      if (!v306)
        goto LABEL_248;
      v144 = 5;
    }
    (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_248:
    addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v279, (uint64_t)&__p, (uint64_t)v241 + 976);
    AGCLLVMUserObject::createSamplerHeapIndexArray(v241, (uint64_t)&__p);
    v321 = (uint64_t (**)())v241;
    v145 = operator new(0x20uLL);
    *v145 = &off_1E7EB8BB8;
    v145[1] = &v254;
    v145[2] = &v279;
    v145[3] = &v321;
    v304 = v145;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v303);
    v146 = v304;
    if (v304 == v303)
    {
      v147 = 4;
      v146 = v303;
    }
    else
    {
      if (!v304)
        goto LABEL_253;
      v147 = 5;
    }
    (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_253:
    v148 = v273[0];
    v149 = (unsigned int *)__p;
    if (v273[0])
    {
      v150 = *((_QWORD *)v241 + 463);
      v151 = (int *)__p;
      do
      {
        v152 = *v151;
        v151 += 6;
        v150 |= 1 << v152;
        *((_QWORD *)v241 + 463) = v150;
        --v148;
      }
      while (v148);
    }
    goto LABEL_287;
  }
  if (*(_DWORD *)(*(_QWORD *)((char *)v241 + *(_QWORD *)(*(_QWORD *)v241 - 24) + 400) + 1780))
  {
    v282 = 0;
    v281 = 0;
    v280 = (uint64_t)&v281;
    v279 = &off_1E7EB7E00;
    __p = &v273[2];
    *(_QWORD *)v273 = 0x400000000;
    if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v241))
      v254 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v241, 0);
    v301[0] = &off_1E7EB8C48;
    v301[1] = &v279;
    v302 = v301;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v301);
    v153 = v302;
    if (v302 == v301)
    {
      v154 = 4;
      v153 = v301;
    }
    else
    {
      if (!v302)
        goto LABEL_264;
      v154 = 5;
    }
    (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_264:
    v299[0] = &off_1E7EB8CD8;
    v299[1] = &v279;
    v300 = v299;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 395), (uint64_t)v299);
    v155 = v300;
    if (v300 == v299)
    {
      v156 = 4;
      v155 = v299;
    }
    else
    {
      if (!v300)
        goto LABEL_269;
      v156 = 5;
    }
    (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_269:
    addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v279, (uint64_t)&__p, (uint64_t)v241 + 976);
    AGCLLVMUserObject::createSamplerHeapIndexArray(v241, (uint64_t)&__p);
    if (*((_QWORD *)v241 + 396))
      AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(v241, (uint64_t *)&__p, (uint64_t)v241 + 1960);
    v321 = (uint64_t (**)())v241;
    v157 = operator new(0x20uLL);
    *v157 = &off_1E7EB8D68;
    v157[1] = &v254;
    v157[2] = &v279;
    v157[3] = &v321;
    v298 = v157;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v297);
    v158 = v298;
    if (v298 == v297)
    {
      v159 = 4;
      v158 = v297;
    }
    else
    {
      if (!v298)
        goto LABEL_276;
      v159 = 5;
    }
    (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_276:
    TypeAllocSize = (unint64_t)v241;
    v160 = operator new(0x20uLL);
    *v160 = &off_1E7EB8DF8;
    v160[1] = &v254;
    v160[2] = &v279;
    v160[3] = &TypeAllocSize;
    v296 = v160;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 395), (uint64_t)v295);
    v161 = v296;
    if (v296 == v295)
    {
      v162 = 4;
      v161 = v295;
    }
    else
    {
      if (!v296)
        goto LABEL_281;
      v162 = 5;
    }
    (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_281:
    *(_QWORD *)&v309 = v241;
    v293[0] = &off_1E7EB8E88;
    v293[1] = &v254;
    v293[2] = &v309;
    v294 = v293;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 383), (uint64_t)v293);
    v163 = v294;
    if (v294 == v293)
    {
      v164 = 4;
      v163 = v293;
    }
    else
    {
      if (!v294)
      {
LABEL_286:
        v149 = (unsigned int *)__p;
LABEL_287:
        if (v149 != &v273[2])
          free(v149);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v281);
        goto LABEL_290;
      }
      v164 = 5;
    }
    (*(void (**)(void))(*v163 + 8 * v164))();
    goto LABEL_286;
  }
  if (v233)
  {
    v282 = 0;
    v281 = 0;
    v280 = (uint64_t)&v281;
    v279 = &off_1E7EB7E00;
    __p = &v273[2];
    *(_QWORD *)v273 = 0x400000000;
    v291[0] = &off_1E7EB8F18;
    v291[1] = &v279;
    v292 = v291;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v291);
    v141 = v292;
    if (v292 == v291)
    {
      v142 = 4;
      v141 = v291;
    }
    else
    {
      if (!v292)
        goto LABEL_408;
      v142 = 5;
    }
    (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_408:
    addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v279, (uint64_t)&__p, (uint64_t)v241 + 976);
    AGCLLVMUserObject::createSamplerArrays((uint64_t)v241, (uint64_t)&__p);
    v321 = (uint64_t (**)())v241;
    v225 = operator new(0x20uLL);
    *v225 = &off_1E7EB8FA8;
    v225[1] = &v254;
    v225[2] = &v279;
    v225[3] = &v321;
    v290 = v225;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 371), (uint64_t)v289);
    v226 = v290;
    if (v290 == v289)
    {
      v227 = 4;
      v226 = v289;
    }
    else
    {
      if (!v290)
      {
LABEL_414:
        if (__p != &v273[2])
          free(__p);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v281);
        goto LABEL_417;
      }
      v227 = 5;
    }
    (*(void (**)(void))(*v226 + 8 * v227))();
    goto LABEL_414;
  }
  if (*((_BYTE *)v241 + 3656))
  {
    v254 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v241, 1);
  }
  else
  {
    __p = &unk_1C3E4D9BB;
    memset(v273, 0, sizeof(v273));
    v274 = 1065353216;
    v249[0] = 0;
    v249[1] = 0;
    v248 = v249;
    std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v248, *((_QWORD **)v241 + 122), (_QWORD *)v241 + 123);
    v69 = (uint64_t *)v241;
    v254 = AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>((uint64_t)v241, (uint64_t)v241 + 2944, (uint64_t)&__p, (uint64_t)&v248);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v249[0]);
    std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)v273);
  }
LABEL_417:
  __p = v69;
  v287[0] = &off_1E7EB9038;
  v287[1] = &v254;
  v287[2] = &__p;
  v288 = v287;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[383], (uint64_t)v287);
  v228 = v288;
  if (v288 == v287)
  {
    v229 = 4;
    v228 = v287;
  }
  else
  {
    if (!v288)
      goto LABEL_290;
    v229 = 5;
  }
  (*(void (**)(void))(*v228 + 8 * v229))();
LABEL_290:
  if (((*(uint64_t (**)(uint64_t *))(*v69 + 384))(v69) & 1) == 0)
    goto LABEL_297;
  if (!v237)
  {
    if ((v64 & 1) != 0)
    {
      if (*((_BYTE *)v69 + 3566))
      {
        if (&v255 != (uint64_t **)(v69 + 125))
          llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v69 + 125), (const llvm::SmallPtrSetImplBase *)&v255);
        v323 = 0;
        v324 = 0;
        v321 = &off_1E7EB7E00;
        v322 = (void **)&v323;
        __p = &v273[2];
        *(_QWORD *)v273 = 0x400000000;
        v279 = &v281;
        v280 = 0x400000000;
        TypeAllocSize = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(v69 + 29), *(llvm::Type **)(*(uint64_t *)((char *)v69 + *(_QWORD *)(*v69 - 24) + 400) + 1672));
        v317 = v171;
        LODWORD(v309) = llvm::TypeSize::operator unsigned long long();
        if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings((AGCLLVMUserObject *)v69))
          AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>((AGCLLVMUserObject *)v69);
        v277[0] = &off_1E7EB9740;
        v277[1] = &v321;
        v278 = v277;
        AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[365], (uint64_t)v277);
        v174 = v278;
        if (v278 == v277)
        {
          v175 = 4;
          v174 = v277;
        }
        else
        {
          if (!v278)
          {
LABEL_331:
            addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v321, (uint64_t)&__p, (uint64_t)(v69 + 119));
            TypeAllocSize = (unint64_t)v69;
            v317 = (void **)&v309;
            v185 = operator new(0x20uLL);
            v186 = v69;
            v187 = v185;
            *v185 = &off_1E7EB97D0;
            v185[1] = &v254;
            v185[2] = &v321;
            v185[3] = &TypeAllocSize;
            v276 = v185;
            AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v186[365], (uint64_t)v275);
            (*(void (**)(_QWORD *))(*v187 + 40))(v187);
            v188 = v273[0];
            if (!v273[0])
            {
LABEL_350:
              v69 = (uint64_t *)v241;
              if ((_DWORD)v280)
              {
                v199 = *(_QWORD *)((char *)v241 + *(_QWORD *)(*(_QWORD *)v241 - 24) + 400);
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v199 + 192))(v199, &v279);
              }
              AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v241, (uint64_t)&__p);
              *((_BYTE *)v241 + 2344) = 1;
              if (v279 != &v281)
                free(v279);
              if (__p != &v273[2])
                free(__p);
              std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((_QWORD *)v323);
              goto LABEL_368;
            }
            v189 = 0;
            v190 = 0;
            while (1)
            {
              v191 = (char *)__p;
              if ((*(_DWORD *)((_BYTE *)__p + v189) & 0xFFFFFu) > 0x3F)
              {
                v192 = 1 << *((_BYTE *)__p + v189);
                v195 = *((_BYTE *)__p + v189 + 8);
                if ((v195 & 1) != 0)
                  *((_QWORD *)v241 + 459) |= v192;
                v194 = (_QWORD *)((char *)v241 + 3688);
                if ((v195 & 2) == 0)
                  goto LABEL_342;
              }
              else
              {
                v192 = 1 << *((_BYTE *)__p + v189);
                v193 = *((_BYTE *)__p + v189 + 8);
                if ((v193 & 1) != 0)
                  *((_QWORD *)v241 + 458) |= v192;
                v194 = (_QWORD *)((char *)v241 + 3680);
                if ((v193 & 2) == 0)
                  goto LABEL_342;
              }
              *v194 |= v192;
LABEL_342:
              v196 = *(unsigned int *)&v191[v189 + 4];
              if ((_DWORD)v196 != -1)
              {
                if (*(_DWORD *)(*(_QWORD *)&v239[*(_QWORD *)(*(_QWORD *)v241 - 24) + 32] + 1780))
                  v197 = 1;
                else
                  v197 = v309;
                v198 = v280;
                if (v280 >= (unint64_t)HIDWORD(v280))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v198 = v280;
                }
                *((_QWORD *)v279 + v198) = (v197 * v190) | (unint64_t)(v196 << 32);
                LODWORD(v280) = v280 + 1;
                v188 = v273[0];
              }
              ++v190;
              v189 += 32;
              if (v190 >= v188)
                goto LABEL_350;
            }
          }
          v175 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v174 + 8 * v175))(v174, v172, v173);
        goto LABEL_331;
      }
      if (!*(_DWORD *)(*(uint64_t *)((char *)v69 + *(_QWORD *)(*v69 - 24) + 400) + 1780))
      {
        if (v254)
        {
          v208 = v256;
          if (v256 == v255)
            v209 = (uint64_t *)((char *)&v257 + 4);
          else
            v209 = &v257;
          v210 = *(unsigned int *)v209;
          v211 = &v256[v210];
          if ((_DWORD)v210)
          {
            v212 = 8 * v210;
            while ((unint64_t)*v208 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v208;
              v212 -= 8;
              if (!v212)
              {
                v208 = v211;
                break;
              }
            }
          }
          std::vector<llvm::Value *>::vector<llvm::SmallPtrSetIterator<llvm::Value *>,0>(&__p, v208, v211, v211);
          AGCLLVMUserObject::allocateBindlessTextures(v69, (uint64_t *)&__p, (uint64_t)(v69 + 374), (uint64_t)(v69 + 362), v69 + 386);
          v254 = 1;
          if (__p)
          {
            *(_QWORD *)v273 = __p;
            operator delete(__p);
          }
        }
        goto LABEL_368;
      }
      if (&v255 != (uint64_t **)(v69 + 125))
        llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v69 + 125), (const llvm::SmallPtrSetImplBase *)&v255);
      __p = &v273[2];
      *(_QWORD *)v273 = 0x800000000;
      v282 = 0;
      v281 = 0;
      v280 = (uint64_t)&v281;
      v279 = &off_1E7EB7E00;
      if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings((AGCLLVMUserObject *)v69))
        AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>((AGCLLVMUserObject *)v69);
      v270[0] = &off_1E7EB9860;
      v270[1] = &v279;
      v271 = v270;
      AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[365], (uint64_t)v270);
      v183 = v271;
      if (v271 == v270)
      {
        v184 = 4;
        v183 = v270;
      }
      else
      {
        if (!v271)
          goto LABEL_385;
        v184 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v183 + 8 * v184))(v183, v181, v182);
LABEL_385:
      v268[0] = &off_1E7EB98F0;
      v268[1] = &v279;
      v269 = v268;
      AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[389], (uint64_t)v268);
      v215 = v269;
      if (v269 == v268)
      {
        v216 = 4;
        v215 = v268;
      }
      else
      {
        if (!v269)
          goto LABEL_390;
        v216 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v215 + 8 * v216))(v215, v213, v214);
LABEL_390:
      addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v279, (uint64_t)&__p, (uint64_t)(v69 + 119));
      AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v69, (uint64_t)&__p);
      if (v69[390])
        AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(v69, (uint64_t *)&__p, (uint64_t)(v69 + 221));
      v321 = (uint64_t (**)())v69;
      v266[0] = &off_1E7EB9980;
      v266[1] = &v279;
      v266[2] = &v321;
      v267 = v266;
      AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[365], (uint64_t)v266);
      v219 = v267;
      if (v267 == v266)
      {
        v220 = 4;
        v219 = v266;
      }
      else
      {
        if (!v267)
          goto LABEL_397;
        v220 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v219 + 8 * v220))(v219, v217, v218);
LABEL_397:
      TypeAllocSize = (unint64_t)v69;
      v264[0] = &off_1E7EB9A10;
      v264[1] = &v279;
      v264[2] = &TypeAllocSize;
      v265 = v264;
      AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[389], (uint64_t)v264);
      v223 = v265;
      if (v265 == v264)
      {
        v224 = 4;
        v223 = v264;
      }
      else
      {
        if (!v265)
          goto LABEL_402;
        v224 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v223 + 8 * v224))(v223, v221, v222);
LABEL_402:
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v281);
      if (__p != &v273[2])
        free(__p);
      __p = v69;
      v262[0] = &off_1E7EB9AA0;
      v262[1] = &__p;
      v263 = v262;
      AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[377], (uint64_t)v262);
      v167 = v263;
      if (v263 == v262)
      {
        v168 = 4;
        v167 = v262;
        goto LABEL_310;
      }
      goto LABEL_295;
    }
    if (AGCLLVMUserObject::allTextureUsesAreDirect((uint64_t)v69, v69[365])
      && AGCLLVMUserObject::allTextureUsesAreDirect((uint64_t)v69, v69[377]))
    {
      if (v254)
      {
        v176 = (uint64_t)(v69 + 362);
        v245[0] = 0;
        v245[1] = 0;
        v244 = v245;
        std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v244, *((_QWORD **)v241 + 119), (_QWORD *)v241 + 120);
        v69 = (uint64_t *)v241;
        v254 = AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(v241, v176, (uint64_t)v241 + 2992, (uint64_t)&v244);
        v170 = (_QWORD *)v245[0];
        goto LABEL_299;
      }
LABEL_315:
      v254 = 0;
      goto LABEL_368;
    }
    if (!v254)
    {
      v254 = 0;
LABEL_367:
      *((_BYTE *)v69 + 2344) = 1;
      goto LABEL_368;
    }
    v243[0] = 0;
    v243[1] = 0;
    v242 = v243;
    std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v242, (_QWORD *)v69[119], v69 + 120);
    v282 = 0;
    v281 = 0;
    v280 = (uint64_t)&v281;
    v279 = &off_1E7EB7E00;
    __p = &v273[2];
    *(_QWORD *)v273 = 0x400000000;
    v321 = &off_1E7EB9500;
    v322 = &v279;
    v324 = &v321;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[365], (uint64_t)&v321);
    v179 = v324;
    if (v324 == &v321)
    {
      v180 = 4;
      v179 = &v321;
    }
    else
    {
      if (!v324)
        goto LABEL_359;
      v180 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v179)[v180])(v179, v177, v178);
LABEL_359:
    TypeAllocSize = (unint64_t)&off_1E7EB9590;
    v317 = &v279;
    p_TypeAllocSize = &TypeAllocSize;
    AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 377), (uint64_t)&TypeAllocSize);
    v202 = p_TypeAllocSize;
    if (p_TypeAllocSize == &TypeAllocSize)
    {
      v203 = 4;
      v202 = &TypeAllocSize;
    }
    else
    {
      if (!p_TypeAllocSize)
      {
LABEL_364:
        addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v279, (uint64_t)&__p, (uint64_t)&v242);
        AGCLLVMUserObject::createTextureArrays(v241, (uint64_t)&__p);
        AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v241, (uint64_t)&__p);
        v314[0] = v241;
        LOBYTE(v312[0]) = 1;
        v204 = operator new(0x20uLL);
        *v204 = &off_1E7EB9620;
        v204[1] = v312;
        v204[2] = &v279;
        v204[3] = v314;
        *((_QWORD *)&v310 + 1) = v204;
        AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 365), (uint64_t)&v309);
        (*(void (**)(_QWORD *))(*v204 + 40))(v204);
        v205 = operator new(0x20uLL);
        *v205 = &off_1E7EB96F8;
        v205[1] = v312;
        v205[2] = &v279;
        v205[3] = v314;
        v330 = v205;
        AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v241 + 377), (uint64_t)&v327);
        (*(void (**)(_QWORD *))(*v205 + 40))(v205);
        v206 = v312[0];
        if (__p != &v273[2])
          free(__p);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v281);
        v254 = v206;
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v243[0]);
        v69 = (uint64_t *)v241;
        goto LABEL_367;
      }
      v203 = 5;
    }
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(*v202 + 8 * v203))(v202, v200, v201);
    goto LABEL_364;
  }
LABEL_292:
  if (&v255 != (uint64_t **)(v69 + 125))
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v69 + 125), (const llvm::SmallPtrSetImplBase *)&v255);
  AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>((AGCLLVMUserObject *)v69);
  __p = v69;
  v285[0] = &off_1E7EB9470;
  v285[1] = &__p;
  v286 = v285;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(v69[377], (uint64_t)v285);
  v167 = v286;
  if (v286 == v285)
  {
    v168 = 4;
    v167 = v285;
    goto LABEL_310;
  }
LABEL_295:
  if (v167)
  {
    v168 = 5;
LABEL_310:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v167 + 8 * v168))(v167, v165, v166);
  }
LABEL_368:
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 362));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 368));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 374));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 380));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 386));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v69 + 392));
  v140 = v254 != 0;
LABEL_369:
  if (v256 != v255)
    free(v256);
  return v140;
}

void AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *this)
{
  uint64_t **i;
  uint64_t v3;
  uint64_t j;

  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    llvm::Function::eraseFromParent((llvm::Function *)i[5]);
  if (*((_QWORD *)this + 4))
  {
    std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(*((_QWORD **)this + 3));
    *((_QWORD *)this + 3) = 0;
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      for (j = 0; j != v3; ++j)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * j) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
}

void AGCLLVMUserObject::getTextureAtomicFunctionSet(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set = 0;
      *(_QWORD *)&dword_1ED839128 = 0;
      qword_1ED839130 = 0x800000000;
      __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, &dword_1C3C54000);
    }
  }
}

void AGCLLVMUserObject::getIsNullTextureFunctionSet(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set = 0;
      *(_QWORD *)&dword_1ED839BD8 = 0;
      qword_1ED839BE0 = 0x800000000;
      __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set, &dword_1C3C54000);
    }
  }
}

void AGCLLVMUserObject::getDimensionFunctionMap(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map = 0;
      *(_QWORD *)&dword_1ED839B98 = 0;
      qword_1ED839BA0 = 0x1800000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map, &dword_1C3C54000);
    }
  }
}

void AGCLLVMUserObject::getUniqueIDFunctionSet(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set = 0;
      *(_QWORD *)&dword_1ED839B78 = 0;
      qword_1ED839B80 = 0x800000000;
      __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, &dword_1C3C54000);
    }
  }
}

BOOL AGCLLVMUserObject::areIndirectSamplersSupported(AGCLLVMUserObject *this)
{
  return !*((_BYTE *)this + 14)
      || *(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1751) != 0;
}

BOOL AGCLLVMUserObject::areIndirectTexturesSupported(AGCLLVMUserObject *this)
{
  return !*((_BYTE *)this + 14)
      || *(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1751) != 0;
}

void AGCLLVMUserObject::createTextureHeapIndexArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 2348) = *(_DWORD *)(a2 + 8);
  v18 = 0;
  LOWORD(v17) = 0;
  v16 = (void *)0xFFFFFFFF00400000;
  v19 = 0;
  v4 = (uint64_t)&v16;
  v5 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)&v16);
  v6 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
  v7 = v5[1];
  *v6 = *v5;
  v6[1] = v7;
  ++*(_DWORD *)(a2 + 8);
  v8 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>((_QWORD *)a1, (uint64_t *)a2, a1 + 1704);
  v16 = &v18;
  v17 = 0x800000000;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v11 = 0;
    v12 = 0;
    v13 = 4;
    do
    {
      v14 = *(unsigned int *)(*(_QWORD *)a2 + v13);
      if ((_DWORD)v14 != -1)
      {
        v4 = v4 & 0xFFFFFF0000000000 | 4;
        llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v16, v11 + v14, v4);
        v9 = *(unsigned int *)(a2 + 8);
      }
      ++v12;
      v11 += 0x400000000;
      v13 += 32;
    }
    while (v12 < v9);
    if ((_DWORD)v17)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v15 + 184))(v15, v10, &v16);
    }
  }
  if (v16 != &v18)
    free(v16);
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 32 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

void AGCLLVMUserObject::createSamplerHeapIndexArray(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;

  AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 253));
  v4 = a1 + 83;
  llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>((uint64_t)v4, *(unsigned int *)(a2 + 8));
  if (*(_DWORD *)(a2 + 8))
  {
    v5 = 0;
    v6 = *(int **)a2;
    v7 = *v4;
    do
    {
      v8 = *v6;
      v6 += 6;
      *(_DWORD *)(v7 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(a2 + 8));
  }
}

void llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 4 * v2), 4 * a2 - 4 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Impl;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  _QWORD v18[2];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  v7 = llvm::User::operator new((llvm::User *)0x58);
  if (**(_BYTE **)(a3 + 24))
  {
    v17[0] = *(void **)(a3 + 24);
    v18[0] = "_indirect";
    v8 = 771;
  }
  else
  {
    v17[0] = "_indirect";
    v8 = 259;
  }
  v19 = v8;
  llvm::GlobalVariable::GlobalVariable();
  if (*(_QWORD *)(a3 + 40))
    strlen(*(const char **)(a3 + 40));
  llvm::GlobalObject::setSection();
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, v9);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v10 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v10)
  {
    v11 = *a2;
    v12 = 24 * v10;
    do
    {
      v11 += 24;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, Impl);
      v12 -= 24;
    }
    while (v12);
  }
  v14 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 376);
  v15 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14, v15);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)a3, v7);
  *(_QWORD *)(a3 + 48) = v6;
  if (v17[0] != v18)
    free(v17[0]);
  return v7;
}

unint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _BYTE v20[32];

  v3 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)(result + 16);
  if (v3 != (_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_13;
      v8 = *((_DWORD *)v3 + 9);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        v11 = v10 > v8;
        if (v10 <= v8)
          v12 = (uint64_t *)(v7 + 8);
        else
          v12 = (uint64_t *)v7;
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_13:
        v9 = v6;
      *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
      v13 = *((_DWORD *)v3 + 7);
      if (v13 <= *((_DWORD *)v3 + 8))
      {
        v14 = (uint64_t)(v9 + 4);
        do
        {
          AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)v20, v14, v13);
          result = llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)v20);
          v15 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
          v16 = *(_OWORD *)(result + 16);
          *v15 = *(_OWORD *)result;
          v15[1] = v16;
          ++*(_DWORD *)(a2 + 8);
          ++v13;
        }
        while (v13 <= *((_DWORD *)v3 + 8));
      }
      v17 = (_QWORD *)v3[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v3[2];
          v19 = *v18 == (_QWORD)v3;
          v3 = v18;
        }
        while (!v19);
      }
      v3 = v18;
    }
    while (v18 != v4);
  }
  return result;
}

uint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  _BYTE *v23;
  _BYTE v24[24];

  v3 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)(result + 16);
  if (v3 != (_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_13;
      v8 = *((_DWORD *)v3 + 9);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        v11 = v10 > v8;
        if (v10 <= v8)
          v12 = (uint64_t *)(v7 + 8);
        else
          v12 = (uint64_t *)v7;
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_13:
        v9 = v6;
      v13 = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v3 + 9) = v13;
      v14 = *((_DWORD *)v3 + 7);
      if (v14 <= *((_DWORD *)v3 + 8))
      {
        v18 = (uint64_t)(v9 + 4);
        do
        {
          v19 = v24;
          result = AGCLLVMUserObject::Sampler::getAllocationInfo((uint64_t)v24, v18, v14);
          v20 = *(_QWORD *)a2;
          if (v13 >= *(_DWORD *)(a2 + 12))
          {
            if (v20 <= (unint64_t)v24 && v20 + 24 * v13 > (unint64_t)v24)
            {
              v23 = &v24[-v20];
              result = llvm::SmallVectorBase<unsigned int>::grow_pod();
              v20 = *(_QWORD *)a2;
              v19 = &v23[*(_QWORD *)a2];
            }
            else
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod();
              v20 = *(_QWORD *)a2;
              v19 = v24;
            }
          }
          v21 = v20 + 24 * *(unsigned int *)(a2 + 8);
          v22 = *(_OWORD *)v19;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v21 = v22;
          v13 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v13;
          ++v14;
        }
        while (v14 <= *((_DWORD *)v3 + 8));
      }
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v3[2];
          v17 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v17);
      }
      v3 = v16;
    }
    while (v16 != v4);
  }
  return result;
}

uint64_t AGCLLVMUserObject::Texture::getAllocationInfo(uint64_t this, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 232);
    v5 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD **)(v3 + 16);
      v7 = &v6[4 * v5];
      v8 = (a3 & 0xFFFFF) - *(_DWORD *)(v3 + 236);
      do
      {
        v9 = v6[2];
        v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(_QWORD *)v6 + 28) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFF00000 | v4 & 0xFFFFF;
  }
  *(_QWORD *)(this + 16) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(this + 8) = *(_BYTE *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(this + 9) = *(_DWORD *)(a2 + 16) == 1;
  *(_DWORD *)this = a3;
  *(_DWORD *)(this + 4) = v11;
  *(_BYTE *)(this + 24) = *(_BYTE *)(a2 + 40);
  return this;
}

BOOL llvm::SmallPtrSetImplBase::erase_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  const void **imp;
  uint64_t v4;
  uint64_t v5;
  const void **v6;

  imp = llvm::SmallPtrSetImplBase::find_imp(this, a2);
  v4 = *((_QWORD *)this + 1);
  v5 = 16;
  if (v4 == *(_QWORD *)this)
    v5 = 20;
  v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)this + v5));
  if (imp != v6)
  {
    *imp = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return imp != v6;
}

uint64_t AGCLLVMUserObject::isTextureOrSamplerType(AGCLLVMUserObject *this, llvm::Type *a2)
{
  unsigned int v4;
  int v5;
  char *v6;
  int v7;
  unsigned int v8;
  llvm::Type *v9;
  int v10;
  llvm::Type *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  llvm::Type **v24;
  uint64_t v25;
  llvm::Type *v26;
  unsigned int v27;
  unsigned int isTextureOrSamplerType;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;

  v4 = a2 >> 4;
  if ((*((_BYTE *)this + 3568) & 1) != 0)
  {
    v6 = (char *)this + 3576;
    v5 = 2;
  }
  else
  {
    v5 = *((_DWORD *)this + 896);
    if (!v5)
    {
      v10 = 0;
      goto LABEL_7;
    }
    v6 = (char *)*((_QWORD *)this + 447);
  }
  v7 = v5 - 1;
  v8 = (v4 ^ (a2 >> 9)) & v7;
  v9 = *(llvm::Type **)&v6[8 * v8];
  if (v9 == a2)
  {
    v10 = 1;
  }
  else
  {
    v19 = 1;
    do
    {
      v10 = v9 != (llvm::Type *)-4096;
      if (v9 == (llvm::Type *)-4096)
        break;
      v20 = v8 + v19++;
      v8 = v20 & v7;
      v9 = *(llvm::Type **)&v6[8 * v8];
      v10 = 1;
    }
    while (v9 != a2);
  }
LABEL_7:
  v11 = (llvm::Type *)*((_QWORD *)this + 453);
  v12 = v11 == a2;
  if ((*((_DWORD *)a2 + 2) & 0xFE) != 0x10)
    return v10 | ((v11 == a2) << 8);
  v13 = *((unsigned int *)this + 912);
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)this + 454);
    LODWORD(v15) = (v4 ^ (a2 >> 9)) & (v13 - 1);
    v16 = v14 + 16 * v15;
    v17 = *(llvm::Type **)v16;
    if (*(llvm::Type **)v16 == a2)
    {
LABEL_10:
      if (v16 != v14 + 16 * v13)
        return *(unsigned __int16 *)(v16 + 8);
    }
    else
    {
      v21 = 1;
      while (v17 != (llvm::Type *)-4096)
      {
        v22 = v15 + v21++;
        v15 = v22 & (v13 - 1);
        v17 = *(llvm::Type **)(v14 + 16 * v15);
        if (v17 == a2)
        {
          v16 = v14 + 16 * v15;
          goto LABEL_10;
        }
      }
    }
  }
  if (*((_DWORD *)a2 + 2) == 17)
  {
    isTextureOrSamplerType = AGCLLVMUserObject::isTextureOrSamplerType(this, **((llvm::Type ***)a2 + 2));
    LOBYTE(v10) = isTextureOrSamplerType & 1;
    v12 = (isTextureOrSamplerType >> 8) & 1;
  }
  else if (*((_DWORD *)a2 + 2) == 16)
  {
    v23 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v23)
    {
      v24 = (llvm::Type **)*((_QWORD *)a2 + 2);
      v25 = 8 * v23;
      do
      {
        v26 = *v24++;
        v27 = AGCLLVMUserObject::isTextureOrSamplerType(this, v26);
        LOBYTE(v10) = v27 & 1 | v10;
        v12 |= (v27 >> 8) & 1;
        v25 -= 8;
      }
      while (v25);
    }
  }
  v18 = v10 | (v12 << 8);
  v33 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((_QWORD *)this + 454), *((_DWORD *)this + 912), (uint64_t)a2, &v33) & 1) == 0)
  {
    v29 = *((_DWORD *)this + 910);
    v30 = *((_DWORD *)this + 912);
    if (4 * v29 + 4 >= 3 * v30)
    {
      v30 *= 2;
    }
    else if (v30 + ~v29 - *((_DWORD *)this + 911) > v30 >> 3)
    {
LABEL_32:
      v31 = v33;
      ++*((_DWORD *)this + 910);
      if (*(_QWORD *)v31 != -4096)
        --*((_DWORD *)this + 911);
      *(_QWORD *)v31 = a2;
      *(_WORD *)(v31 + 8) = v18;
      return v18;
    }
    llvm::DenseMap<llvm::Type *,std::pair<BOOL,BOOL>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::pair<BOOL,BOOL>>>::grow((uint64_t)this + 3632, v30);
    v33 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((_QWORD *)this + 454), *((_DWORD *)this + 912), (uint64_t)a2, &v33);
    goto LABEL_32;
  }
  return v18;
}

uint64_t AGCLLVMUserObject::Sampler::getAllocationInfo(uint64_t this, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 232);
    v5 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD **)(v3 + 16);
      v7 = &v6[4 * v5];
      v8 = (a3 & 0xFFFFF) - *(_DWORD *)(v3 + 236);
      do
      {
        v9 = v6[2];
        v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(_QWORD *)v6 + 28) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFF00000 | v4 & 0xFFFFF;
  }
  *(_QWORD *)(this + 8) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)this = a3;
  *(_BYTE *)(this + 16) = *(_BYTE *)(a2 + 24);
  return this;
}

char *AGCLLVMFragmentShader::constructFlatReply(AGCLLVMFragmentShader *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  BOOL v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int *v11;
  char *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)this;
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (*((_QWORD *)v3 + 87))
  {
    v4 = v3 + 696;
    if (!*((_QWORD *)v3 + 88))
      v4 = v3 + 1256;
  }
  else
  {
    v4 = v3 + 1256;
  }
  v6 = *(unsigned int **)v4;
  v5 = *((_QWORD *)v4 + 1);
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = (int *)((char *)v6 + *v6);
  v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
    v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  else
    v11 = 0;
  v12 = v3 + 2472;
  v3[2542] = 1;
  v13 = (unsigned __int16 *)((char *)v11 - *v11);
  v14 = *v13;
  if (v14 < 0x11)
  {
    v15 = 0;
  }
  else
  {
    if (v13[8])
      v15 = *(_QWORD *)((char *)v11 + v13[8]);
    else
      v15 = 0;
    if (v14 >= 0x15)
    {
      v16 = v13[10];
      if (v16)
      {
        v17 = *(_QWORD *)((char *)v11 + v16);
        goto LABEL_25;
      }
    }
  }
  v17 = 0;
LABEL_25:
  v18 = *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24) + 400);
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 576))(v18, *((_QWORD *)this + 74), v15, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v12, 8, *((_QWORD *)this + 76) & v19, 0);
  v20 = 0;
  v21 = 0;
  v22 = (unsigned __int16 *)((char *)v11 - *v11);
  v23 = *v22;
  if (v23 >= 0xF)
  {
    if (v22[7])
      v20 = *(_QWORD *)((char *)v11 + v22[7]);
    else
      v20 = 0;
    if (v23 >= 0x13 && (v24 = v22[9]) != 0)
      v21 = *(_QWORD *)((char *)v11 + v24);
    else
      v21 = 0;
  }
  v25 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v25 + 576))(v25, *((_QWORD *)this + 74), v20, v21);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v12, 6, *((_QWORD *)this + 75) & v26, 0);
  return v12;
}

BOOL AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  llvm::CallBase *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v32[4];
  __int16 v33;
  uint64_t *Value;
  unsigned int v35;
  _QWORD v36[3];
  _QWORD *v37;
  void *__dst[2];
  _QWORD v39[6];

  v39[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 680))(v2);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = *((_QWORD *)this + 614);
  do
  {
    if (((1 << v4) & *(unsigned __int8 *)(v7 + 32)) != 0)
    {
      v8 = *(_DWORD *)(v7 + 4 * v4);
      v9 = (v8 & 0x1F) - 2;
      if (v9 > 0x14)
      {
        v10 = 0;
        v11 = 0;
      }
      else
      {
        v10 = qword_1C3DF8868[v9] | qword_1C3DF87C0[v9];
        v11 = qword_1C3DF8910[v9] | qword_1C3DF8718[v9];
      }
      v12 = 0;
      v13 = 0;
      v32[0] = v10;
      v32[1] = v11;
      v14 = *(_DWORD *)(v3 + 868);
      do
      {
        if ((((-1 << (v8 >> 5)) >> v12) & 1) == 0)
          v13 |= *((unsigned int *)v32 + v12);
        ++v12;
      }
      while (v12 != 4);
      __dst[0] = (void *)v13;
      __dst[1] = 0;
      std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)__dst, v14 * (v8 >> 12));
      v6 |= (unint64_t)__dst[0];
      v5 |= (unint64_t)__dst[1];
    }
    ++v4;
  }
  while (v4 != 8);
  v15 = *(llvm::CallBase **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
  v16 = llvm::CallBase::arg_end(v15);
  v17 = (uint64_t **)((char *)v15 - 32 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
  if (((v16 - (_QWORD)v17) & 0x1FFFFFFFE0) != 0)
  {
    v18 = *v17;
    v19 = **v17;
    if (v19)
      v20 = *(_BYTE *)(v19 + 8) == 16;
    else
      v20 = 0;
    if (v20)
      llvm::DataLayout::getStructLayout();
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v15);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v35 = 0;
      v22 = *(_DWORD *)(v21 + 8);
      if (v22)
      {
        v23 = 0;
        while (1)
        {
          v24 = *(_QWORD *)(v21 - 8 * v22 + 8 * v23);
          if (v24)
          {
            if (isStringMDNode(*(llvm::MDString **)(v24 - 8 * *(unsigned int *)(v24 + 8)), "air.imageblock_data"))
              break;
          }
LABEL_34:
          v23 = v35 + 1;
          v35 = v23;
          v21 = *((_QWORD *)this + 9);
          v22 = *(_DWORD *)(v21 + 8);
          if (v23 >= v22)
            goto LABEL_35;
        }
        v25 = *(_QWORD *)this;
        v26 = *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 868)
            * (*(_WORD *)(*((_QWORD *)this + 614) + 34) & 0x1FF);
        if (v26 > 0x40)
        {
          v6 = -1;
          __dst[0] = (void *)~(-1 << v26);
          __dst[1] = 0;
          std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)__dst, 0x40uLL);
          v5 |= (unint64_t)__dst[1];
          v25 = *(_QWORD *)this;
        }
        else
        {
          v6 |= ~(-1 << v26);
        }
        __dst[0] = v39;
        __dst[1] = (void *)0x500000000;
        Value = 0;
        v27 = (char *)this + *(_QWORD *)(v25 - 24) + 40;
        v33 = 257;
        Value = (uint64_t *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v27, (uint64_t)v18, (uint64_t)&v35, 1, (uint64_t)v32);
        v28 = *Value;
        v36[0] = &unk_1E7E68308;
        v36[1] = this;
        v36[2] = &Value;
        v37 = v36;
        AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v28, (uint64_t)__dst, (uint64_t)this + 6952, 0, 1, (uint64_t)v36);
        v29 = v37;
        if (v37 == v36)
        {
          v29 = v36;
          v30 = 4;
        }
        else
        {
          if (!v37)
            goto LABEL_32;
          v30 = 5;
        }
        (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_32:
        llvm::MDNode::replaceOperandWith();
        if (__dst[0] != v39)
          free(__dst[0]);
        goto LABEL_34;
      }
LABEL_35:
      __dst[0] = (void *)v6;
      __dst[1] = 0;
      std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](__dst);
      __dst[0] = (void *)v6;
      __dst[1] = (void *)v5;
      std::bitset<128ul>::operator>>=[abi:nn180100]((char *)__dst, 0x40uLL);
      std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](__dst);
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      __dst[0] = (void *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::ConstantInt::get();
      __dst[0] = (void *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  return AGCLLVMUserFragmentShader::setupShaderOutputs(this);
}

uint64_t AGCLLVMGen3TargetLowerer::convertRegisterMaskToMRTMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  int8x16_t v17;
  char v18;
  int8x16_t v20;
  __int128 __src;
  __int128 __dst;

  __src = a4;
  std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)&__src, 0x40uLL);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  *(_QWORD *)&__src = __src | a3;
  do
  {
    if (((1 << v7) & *(unsigned __int8 *)(a2 + 32)) != 0)
    {
      v10 = (*(_DWORD *)(a2 + v8) & 0x1F) - 2;
      if (v10 > 0x14)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v11 = qword_1C3DF8718[v10];
        v12 = qword_1C3DF8910[v10];
        v13 = qword_1C3DF8868[v10] | qword_1C3DF87C0[v10];
        v14 = v12 | v11;
      }
      v15.i64[0] = v13;
      v15.i64[1] = v14;
      v20 = v15;
      v16 = *(_DWORD *)(a1 + 868) * (*(_DWORD *)(a2 + v8) >> 12);
      __dst = __src;
      std::bitset<128ul>::operator>>=[abi:nn180100]((char *)&__dst, v16);
      __dst = __dst;
      v17 = vbicq_s8((int8x16_t)xmmword_1C3E37F50, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](&__dst)), v20)));
      *(int8x8_t *)v17.i8 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      v18 = *(_DWORD *)(a2 + v8) >> 5;
      v9 |= ((-1 << v18) & ((int)(((v17.i32[0] | v17.i32[1]) & ~(-1 << v18)) >> (v18 - 1) << 31) >> 31) & 0xF | (v17.i32[0] | v17.i32[1]) & ~(-1 << v18)) << v8;
    }
    v8 += 4;
    ++v7;
  }
  while (v8 != 32);
  return v9;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::initCompile(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t j;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t String;
  uint64_t v44;
  BOOL v45;
  unsigned int k;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type size;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  const std::string::value_type *p_p;
  std::string::size_type v70;
  int v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  __int128 __p;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int __val;
  void *v84;
  uint64_t v85;
  _QWORD v86[20];
  _OWORD v87[2];
  void *v88;
  uint64_t v89;
  _QWORD v90[24];
  void *v91[2];
  _QWORD v92[19];

  v92[16] = *MEMORY[0x1E0C80C00];
  inited = 0;
  if (validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1816), 0, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1816))
  {
    inited = AGCLLVMAGPFragmentShader::initCompile(this);
    if (*((_BYTE *)this + 14) || (*(_BYTE *)(*((_QWORD *)this + 726) + 64) & 2) != 0)
    {
      v5 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, *((_QWORD *)this + 614));
    }
    else
    {
      AGCLLVMUserShader::initLIBAliasOffset((uint64_t *)this, *((_QWORD *)this + 614));
      v91[0] = v92;
      v91[1] = (void *)0x2000000000;
      llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v91, 0, -1);
      v3 = *((_QWORD *)this + 22);
      if ((*(_WORD *)(v3 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
        v7 = *((_QWORD *)this + 22);
        v4 = *(_QWORD *)(v3 + 88);
        if ((*(_WORD *)(v7 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
        v3 = v7;
      }
      else
      {
        v4 = *(_QWORD *)(v3 + 88);
      }
      v8 = *(_QWORD *)(v3 + 88) + 40 * *(_QWORD *)(v3 + 96);
      if (v4 != v8)
      {
        v3 = (unint64_t)this + 7000;
        do
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v4 + 32));
          if (v9
            && isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8), "air.imageblock_data"))
          {
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 7000, *(_DWORD *)(v4 + 32));
            v88 = 0;
            v89 = 0;
            v90[0] = 0x3000000000;
            v84 = 0;
            v85 = 0;
            v86[0] = 0x3000000000;
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 2u, (_WORD *)this + 1782, v9, *((_QWORD *)this + 614), (llvm::StringMapImpl *)&v88, (llvm::StringMapImpl *)&v84)|| (HIDWORD(v85) ? (v10 = (uint64_t *)&v84) : (v10 = (uint64_t *)&v88), !AGCLLVMAGPFragmentShaderGen3::setupROGTable((uint64_t)this, (uint64_t)v91, *((unsigned __int16 *)this + 1782), v10)|| !AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap((uint64_t *)v88, v89, (llvm::StringMapImpl *)&v84, (uint64_t)this + 6928)))
            {
LABEL_42:
              llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v84);
              llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v88);
              goto LABEL_43;
            }
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v84);
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v88);
          }
          v4 += 40;
        }
        while (v4 != v8);
      }
      v11 = *((_QWORD *)this + 9);
      if (v11)
      {
        v3 = 0;
        do
        {
          v12 = *(unsigned int *)(v11 + 8);
          if (v3 >= v12)
            break;
          v13 = *(unsigned __int8 **)(v11 - 8 * v12 + 8 * v3);
          v14 = *v13;
          v15 = v14 > 0x22 || ((0x7FFFFFFF0uLL >> v14) & 1) == 0;
          if (!v15 && isStringMDNode(*(llvm::MDString **)&v13[-8 * *((unsigned int *)v13 + 2)], "air.imageblock_data"))
          {
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 7048, v3);
            v88 = 0;
            v89 = 0;
            v90[0] = 0x3000000000;
            v84 = 0;
            v85 = 0;
            v86[0] = 0x3000000000;
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 1u, (_WORD *)this + 1781, (uint64_t)v13, *((_QWORD *)this + 614), (llvm::StringMapImpl *)&v88, (llvm::StringMapImpl *)&v84))goto LABEL_42;
            v16 = (uint64_t *)(HIDWORD(v85) ? &v84 : &v88);
            if (!AGCLLVMAGPFragmentShaderGen3::setupROGTable((uint64_t)this, (uint64_t)v91, *((unsigned __int16 *)this + 1781), v16)|| !AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap((uint64_t *)v88, v89, (llvm::StringMapImpl *)&v84, (uint64_t)this + 6952))
            {
              goto LABEL_42;
            }
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v84);
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v88);
          }
          ++v3;
          v11 = *((_QWORD *)this + 9);
        }
        while (v11);
      }
      v17 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 680))(v17);
      if (AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v18, *((_DWORD *)this + 1814)))
      {
        if (*((_DWORD *)this + 1814) == 3)
        {
          v19 = 1;
        }
        else
        {
          v88 = v90;
          v89 = 0x1000000000;
          if (*((_DWORD *)this + 1752) || *((_DWORD *)this + 1764))
          {
            v20 = v91[0];
            v21 = *(unsigned int *)v91[0];
            v22 = *((_DWORD *)this + 1078);
            if (v22 < 2)
            {
              v24 = 0;
            }
            else
            {
              v23 = 0;
              v24 = 0;
              for (i = 1; i < v22; ++i)
              {
                if (v20[i] != v21)
                {
                  if (v21 != 0xFFFFFFFFLL)
                  {
                    v3 = v3 & 0xFFFFFFFF00000000 | v21;
                    llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back((uint64_t)&v88, v23 + v24, v3);
                    v20 = v91[0];
                    v22 = *((_DWORD *)this + 1078);
                  }
                  v21 = v20[i];
                  v24 = i;
                }
                v23 += 0x100000000;
              }
            }
            if (v21 != 0xFFFFFFFFLL)
            {
              llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back((uint64_t)&v88, v24 | ((unint64_t)(v22 - 1) << 32), v21);
              v22 = *((_DWORD *)this + 1078);
            }
            if (v22)
            {
              v26 = 0;
              v27 = (unsigned int *)v91[0];
              do
              {
                v28 = v27[v26];
                if ((_DWORD)v28 != -1)
                {
                  v29 = v26 - 64;
                  if (v26 >= 0x40)
                  {
                    v30 = (char *)this + 7160;
                  }
                  else
                  {
                    v29 = v26;
                    v30 = (char *)this + 7096;
                  }
                  *(_QWORD *)&v30[8 * v28] |= 1 << v29;
                  *((_BYTE *)this + 7224) = 1;
                }
                ++v26;
              }
              while (v22 != v26);
            }
          }
          v87[0] = xmmword_1C3E37B70;
          v87[1] = xmmword_1C3E37B80;
          v84 = v86;
          v85 = 0xA00000000;
          v31 = *((_QWORD *)this + 22);
          if ((*(_BYTE *)(v31 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
            v33 = *((_QWORD *)this + 22);
            v32 = *(_QWORD *)(v31 + 88);
            if ((*(_WORD *)(v33 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
            v31 = v33;
          }
          else
          {
            v32 = *(_QWORD *)(v31 + 88);
          }
          v34 = *(_QWORD *)(v31 + 88) + 40 * *(_QWORD *)(v31 + 96);
          while (v32 != v34)
          {
            v35 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v32 + 32));
            if (v35)
              llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v84, v35, 1);
            v32 += 40;
          }
          v36 = *((_QWORD *)this + 9);
          if (v36)
          {
            v37 = *(unsigned int *)(v36 + 8);
            if ((_DWORD)v37)
            {
              for (j = 0; j < v37; ++j)
              {
                llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v84, *(_QWORD *)(v36 - 8 * v37 + 8 * j), 0);
                v36 = *((_QWORD *)this + 9);
                v37 = *(unsigned int *)(v36 + 8);
              }
            }
          }
          if ((_DWORD)v85)
          {
            v39 = 0;
            v71 = 0;
            do
            {
              v40 = (unsigned __int8 *)v84 + 16 * v39;
              v41 = *(_QWORD *)v40;
              v42 = v40[8];
              String = llvm::MDString::getString(*(llvm::MDString **)(*(_QWORD *)v40
                                                                    - 8 * *(unsigned int *)(*(_QWORD *)v40 + 8)
                                                                    + 8 * v42));
              if (v44 == 17)
              {
                v45 = *(_QWORD *)String == 0x646E65722E726961 && *(_QWORD *)(String + 8) == 0x65677261745F7265;
                if (v45 && *(_BYTE *)(String + 16) == 116)
                {
                  __val = 0;
                  LODWORD(__p) = v42 + 1;
                  parseMDInt(0, v41, (unsigned int *)&__p, &__val);
                  for (k = v42 | 2; ; k = v82 + 1)
                  {
                    v82 = k;
                    if (k >= *(_DWORD *)(v41 + 8))
                      break;
                    v81 = -1;
                    if (parseMDInt("air.raster_order_group", v41, &v82, &v81))
                    {
                      if (v81 >= 7)
                        v48 = 7;
                      else
                        v48 = v81;
                      v49 = 1 << __val;
                      if (((1 << __val) & v71) == 0 || (v50 = *((_DWORD *)v87 + __val), v48 == v50))
                      {
                        *((_DWORD *)v87 + __val) = v48;
                        v71 |= v49;
                        break;
                      }
                      std::to_string(&v74, __val);
                      v55 = std::string::insert(&v74, 0, "Inconsistent raster_order_group() for color[");
                      v56 = v55->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                      v75.__r_.__value_.__r.__words[2] = v56;
                      v55->__r_.__value_.__l.__size_ = 0;
                      v55->__r_.__value_.__r.__words[2] = 0;
                      v55->__r_.__value_.__r.__words[0] = 0;
                      v57 = std::string::append(&v75, "] : ");
                      v58 = v57->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                      v76.__r_.__value_.__r.__words[2] = v58;
                      v57->__r_.__value_.__l.__size_ = 0;
                      v57->__r_.__value_.__r.__words[2] = 0;
                      v57->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v73, v48);
                      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v59 = &v73;
                      else
                        v59 = (std::string *)v73.__r_.__value_.__r.__words[0];
                      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
                      else
                        size = v73.__r_.__value_.__l.__size_;
                      v61 = std::string::append(&v76, (const std::string::value_type *)v59, size);
                      v62 = v61->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
                      v77.__r_.__value_.__r.__words[2] = v62;
                      v61->__r_.__value_.__l.__size_ = 0;
                      v61->__r_.__value_.__r.__words[2] = 0;
                      v61->__r_.__value_.__r.__words[0] = 0;
                      v63 = std::string::append(&v77, " and ");
                      v64 = v63->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                      v78.__r_.__value_.__r.__words[2] = v64;
                      v63->__r_.__value_.__l.__size_ = 0;
                      v63->__r_.__value_.__r.__words[2] = 0;
                      v63->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v72, v50);
                      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v65 = &v72;
                      else
                        v65 = (std::string *)v72.__r_.__value_.__r.__words[0];
                      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v66 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
                      else
                        v66 = v72.__r_.__value_.__l.__size_;
                      v67 = std::string::append(&v78, (const std::string::value_type *)v65, v66);
                      v68 = v67->__r_.__value_.__r.__words[2];
                      __p = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
                      v80 = v68;
                      v67->__r_.__value_.__l.__size_ = 0;
                      v67->__r_.__value_.__r.__words[2] = 0;
                      v67->__r_.__value_.__r.__words[0] = 0;
                      if (v80 >= 0)
                        p_p = (const std::string::value_type *)&__p;
                      else
                        p_p = (const std::string::value_type *)__p;
                      if (v80 >= 0)
                        v70 = HIBYTE(v80);
                      else
                        v70 = *((_QWORD *)&__p + 1);
                      std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), p_p, v70);
                      if (SHIBYTE(v80) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v72.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v78.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v77.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v73.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v76.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v75.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v74.__r_.__value_.__l.__data_);
                      v19 = 0;
                      goto LABEL_105;
                    }
                  }
                }
              }
              ++v39;
            }
            while (v39 < v85);
          }
          v51 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 680))(v51);
          AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(v52, *((_QWORD *)this + 614), (uint64_t)v87, (uint64_t)&v88);
          v53 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 680))(v53);
          AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(v54, (uint64_t)&v88);
          v19 = 1;
LABEL_105:
          if (v84 != v86)
            free(v84);
          if (v88 != v90)
            free(v88);
        }
      }
      else
      {
LABEL_43:
        v19 = 0;
      }
      if (v91[0] != v92)
        free(v91[0]);
      return inited & v19;
    }
  }
  return inited;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

BOOL AGCLLVMUserFragmentShader::setupShaderOutputs(AGCLLVMUserFragmentShader *this)
{
  llvm::CallBase *v2;
  uint64_t v3;
  llvm::Value **v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 *v10;
  unint64_t v11;
  llvm::MDString *v13;
  uint64_t String;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  unsigned int ScalarSizeInBits;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::IRBuilderBase *v30;
  llvm::Value *v31;
  llvm::CmpInst **v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t Select;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::IRBuilderBase *v39;
  llvm::Value *v40;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v42;
  llvm::Type **Cast;
  llvm::Type **v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  llvm::Function *v51;
  uint64_t v52;
  llvm::Instruction *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *i;
  _QWORD *v74;
  llvm::Instruction *v75;
  uint64_t v76;
  unsigned int v77;
  llvm::Instruction *v78;
  int NumSuccessors;
  int v80;
  int j;
  llvm::BasicBlock *Successor;
  uint64_t v83;
  llvm::BasicBlock *v84;
  llvm::BasicBlock *v85;
  llvm::Function *Function;
  llvm::Value *v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  int v92;
  void *v93;
  uint64_t v94;
  _WORD v95[16];
  void *v96;
  uint64_t v97;
  _BYTE v98[16];
  __int16 v99;
  void *v100[2];
  _QWORD v101[10];

  v101[8] = *MEMORY[0x1E0C80C00];
  Function = (llvm::Function *)llvm::Module::getFunction();
  v2 = *(llvm::CallBase **)(*((_QWORD *)Function + 1) + 24);
  v3 = llvm::CallBase::arg_end(v2);
  v4 = (llvm::Value **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (_QWORD)v4) & 0x1FFFFFFFE0) != 0)
  {
    v88 = *v4;
    v5 = *(_QWORD *)*v4;
    v6 = *(_DWORD *)(*((_QWORD *)this + 9) + 8);
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v88 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v2);
  v7 = v6;
  v100[0] = v101;
  v100[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v100, v6, 0);
  if (v6)
  {
    if (*(_BYTE *)(v5 + 8) == 16)
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v88, (uint64_t)v100);
    else
      *(_QWORD *)v100[0] = v88;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(unsigned __int8 **)(*((_QWORD *)this + 9) - 8 * *(unsigned int *)(*((_QWORD *)this + 9) + 8) + 8 * v8);
      if (v10)
      {
        v11 = *v10;
        if (v11 <= 0x22 && ((0x7FFFFFFF0uLL >> v11) & 1) != 0)
        {
          v13 = *(llvm::MDString **)&v10[-8 * *((unsigned int *)v10 + 2)];
          if (v13)
          {
            if (!*(_BYTE *)v13)
            {
              String = llvm::MDString::getString(v13);
              v16 = String;
              v17 = v15;
              v18 = *((_QWORD *)v100[0] + v8);
              switch(v15)
              {
                case 9:
                  if (*(_QWORD *)String != 0x747065642E726961 || *(_BYTE *)(String + 8) != 104)
                    goto LABEL_43;
                  v20 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                  v21 = *((_QWORD *)this + 686);
                  goto LABEL_52;
                case 11:
                  if (*(_QWORD *)String != 0x6E6574732E726961 || *(_QWORD *)(String + 3) != 0x6C69636E6574732ELL)
                    goto LABEL_43;
                  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v18);
                  v24 = *(_QWORD *)(*(_QWORD *)this - 24);
                  v25 = *(_QWORD *)((char *)this + v24 + 224);
                  v99 = 257;
                  if (ScalarSizeInBits > 0x10)
                    v26 = 38;
                  else
                    v26 = 39;
                  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + v24 + 40, v26, v18, v25, (uint64_t)&v96);
                  v20 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                  v21 = *((_QWORD *)this + 689);
                  goto LABEL_53;
                case 12:
                  if (*(_QWORD *)String == 0x65766F632E726961 && *(_DWORD *)(String + 8) == 1701273970)
                    break;
                  goto LABEL_43;
                case 17:
                  if (*(_QWORD *)String != 0x646E65722E726961
                    || *(_QWORD *)(String + 8) != 0x65677261745F7265
                    || *(_BYTE *)(String + 16) != 116)
                  {
                    goto LABEL_43;
                  }
                  v92 = 0;
                  LODWORD(v93) = 0;
                  LODWORD(v96) = 1;
                  if (!parseMDInt(0, (uint64_t)v10, (unsigned int *)&v96, &v93))
                    goto LABEL_115;
                  LODWORD(v96) = 2;
                  if (!parseMDInt(0, (uint64_t)v10, (unsigned int *)&v96, &v92))
                    goto LABEL_115;
                  v44 = (llvm::Type **)AGCLLVMBuilder::extendVector((AGCLLVMUserFragmentShader *)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 24)+ 32), (llvm::Value *)v18, 4);
                  v47 = (char *)this + 32 * v93;
                  v48 = v47 + 4952;
                  v49 = v47 + 5208;
                  if (v92)
                    v50 = v49;
                  else
                    v50 = v48;
                  if (!*((_QWORD *)v50 + 3))
                    break;
                  Cast = AGCLLVMObject::buildConvertColor((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), v44, *(llvm::Type **)v50, *((unsigned __int8 *)this + 72 * v93 + 4378), *((unsigned __int8 *)this + 72 * v93 + 4377), *((unsigned int *)this + 18 * v93 + 1101), v45, v46);
                  v20 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                  v21 = *((_QWORD *)v50 + 3);
LABEL_53:
                  llvm::IRBuilderBase::CreateAlignedStore(v20, Cast, v21, 0);
                  break;
                default:
LABEL_43:
                  if (!AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)String, v15))
                    break;
                  if (AGCLLVMUserFragmentShader::getEffectiveFragmentRate(*((_DWORD *)this + 1468), v16, v17))
                  {
                    if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)this + 614) + 32) >> 12 == 1)
                    {
                      v30 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v31 = (llvm::Value *)llvm::ConstantInt::get();
                      v99 = 257;
                      v32 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v30, (llvm::Value *)v18, v31, (const llvm::Twine *)&v96);
                      v33 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v34 = llvm::ConstantInt::get();
                      v99 = 257;
                      llvm::IRBuilderBase::CreateICmp(v33, 32, v32, v34, (uint64_t)&v96);
                      llvm::ConstantInt::get();
                      llvm::ConstantInt::get();
                      v99 = 257;
                      Select = llvm::IRBuilderBase::CreateSelect();
                    }
                    else
                    {
                      v36 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v37 = (llvm::Value *)llvm::ConstantInt::get();
                      v99 = 257;
                      v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v36, (llvm::Value *)v18, v37, (const llvm::Twine *)&v96);
                      v39 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v40 = (llvm::Value *)llvm::ConstantInt::get();
                      v99 = 257;
                      Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v39, v38, v40, (const llvm::Twine *)&v96);
                      v42 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v99 = 257;
                      Select = llvm::IRBuilderBase::CreateOr(v42, Shl, v38, (const llvm::Twine *)&v96);
                    }
                    v18 = Select;
                  }
                  if (*(unsigned __int8 *)(v18 + 16) - 11 <= 1)
                    v18 = llvm::ConstantInt::get();
                  v20 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                  v21 = *((_QWORD *)this + 692);
LABEL_52:
                  Cast = (llvm::Type **)v18;
                  goto LABEL_53;
              }
            }
          }
        }
      }
      v9 = ++v8 >= v7;
    }
    while (v7 != v8);
  }
  if (v88)
    EraseInstructionChain(v88);
  llvm::Instruction::eraseFromParent(v2);
  llvm::Function::eraseFromParent(Function);
  if (*((_BYTE *)this + 5845))
  {
    v96 = v98;
    v97 = 0x400000000;
    v51 = (llvm::Function *)*((_QWORD *)this + 731);
    v52 = *((_QWORD *)v51 + 1);
    if (v52)
    {
      do
      {
        v53 = *(llvm::Instruction **)(v52 + 24);
        v52 = *(_QWORD *)(v52 + 8);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v53);
        v54 = *(_QWORD *)(*(_QWORD *)this - 24);
        if (*((_BYTE *)this + 5862))
        {
          v55 = (char *)this + v54;
          v56 = *(_QWORD *)((char *)this + v54 + 400);
          v89 = *(_OWORD *)((char *)this + v54 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserFragmentShader *)((char *)this + v54 + 40));
          v91 = *((_DWORD *)v55 + 34);
          v57 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v56 + 616))(v56, &v89, v57);
          if (v90)
            llvm::MetadataTracking::untrack();
        }
        else
        {
          v58 = *(_QWORD *)((char *)this + v54 + 88);
          v95[8] = 257;
          v59 = llvm::BasicBlock::splitBasicBlock();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v96, v59);
          v60 = *(_QWORD *)(v58 + 40);
          if (v60 == v58 + 40)
          {
            v63 = 0;
          }
          else
          {
            v61 = v60 - 24;
            if (v60)
              v62 = v60 - 24;
            else
              v62 = 0;
            if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
              v63 = 0;
            else
              v63 = v61;
          }
          v64 = *((_QWORD *)this + 702);
          v65 = (_QWORD *)(v63 - 32);
          if (*(_QWORD *)(v63 - 32))
          {
            **(_QWORD **)(v63 - 16) = *(_QWORD *)(v63 - 24);
            v66 = *(_QWORD *)(v63 - 24);
            if (v66)
              *(_QWORD *)(v66 + 16) = *(_QWORD *)(v63 - 16);
          }
          *v65 = v64;
          if (v64)
          {
            v69 = *(_QWORD *)(v64 + 8);
            v67 = (_QWORD *)(v64 + 8);
            v68 = v69;
            *(_QWORD *)(v63 - 24) = v69;
            if (v69)
              *(_QWORD *)(v68 + 16) = v63 - 24;
            *(_QWORD *)(v63 - 16) = v67;
            *v67 = v65;
          }
        }
        llvm::Instruction::eraseFromParent(v53);
      }
      while (v52);
      v51 = (llvm::Function *)*((_QWORD *)this + 731);
    }
    llvm::Function::eraseFromParent(v51);
    v93 = v95;
    v94 = 0x400000000;
    v70 = v97;
    if ((_DWORD)v97)
    {
      do
      {
        v71 = (_QWORD *)*((_QWORD *)v96 + v70 - 1);
        LODWORD(v97) = v70 - 1;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v93, (uint64_t)v71);
        v72 = v71 + 5;
        for (i = (_QWORD *)v71[6]; i != v72; i = (_QWORD *)i[1])
        {
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
        v74 = (_QWORD *)*v72;
        if ((_QWORD *)*v72 != v72)
        {
          v75 = (llvm::Instruction *)(v74 - 3);
          v76 = v74 ? (uint64_t)(v74 - 3) : 0;
          v77 = *(unsigned __int8 *)(v76 + 16) - 29;
          v78 = v77 >= 0xB ? 0 : v75;
          if (v77 <= 0xA)
          {
            NumSuccessors = llvm::Instruction::getNumSuccessors(v75);
            if (NumSuccessors)
            {
              v80 = NumSuccessors;
              for (j = 0; j != v80; ++j)
              {
                Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v78);
                if (llvm::BasicBlock::getSinglePredecessor(Successor))
                {
                  v83 = llvm::Instruction::getSuccessor(v78);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v96, v83);
                }
                v84 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v78);
                llvm::BasicBlock::removePredecessor(v84, (llvm::BasicBlock *)v71);
              }
            }
          }
        }
        llvm::BasicBlock::dropAllReferences((llvm::BasicBlock *)v71);
        v70 = v97;
      }
      while ((_DWORD)v97);
      while ((_DWORD)v94)
      {
        v85 = (llvm::BasicBlock *)*((_QWORD *)v93 + v94 - 1);
        LODWORD(v94) = v94 - 1;
        llvm::BasicBlock::eraseFromParent(v85);
      }
    }
    if (v93 != v95)
      free(v93);
    if (v96 != v98)
      free(v96);
  }
  v9 = 1;
LABEL_115:
  if (v100[0] != v101)
    free(v100[0]);
  return v9;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::assign(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v5 = result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v8 = *(unsigned int *)(result + 8);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *(unsigned int *)(result + 8);
    if (v9)
    {
      v10 = *(_QWORD **)result;
      do
      {
        *v10++ = a3;
        --v9;
      }
      while (v9);
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * v8);
      do
        *v12++ = a3;
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_QWORD **)v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

void AGCLLVMBuilder::unboxStruct(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t Value;
  _WORD v14[22];
  unsigned int v15;

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 12);
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 != (_DWORD)v6)
  {
    if (v7 <= v6)
    {
      if (*(_DWORD *)(a3 + 12) < v6)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(a3 + 8);
      }
      if (v7 != (_DWORD)v6)
        bzero((void *)(*(_QWORD *)a3 + 8 * v7), 8 * v6 - 8 * v7);
    }
    *(_DWORD *)(a3 + 8) = v6;
  }
  if (a2[16] == 93)
  {
    v8 = a2;
    do
    {
      if (*((_DWORD *)v8 + 18) != 1)
        break;
      v9 = **((unsigned int **)v8 + 8);
      if (!*(_QWORD *)(*(_QWORD *)a3 + 8 * v9))
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = *((_QWORD *)v8 - 4);
      v8 = (_BYTE *)*((_QWORD *)v8 - 8);
    }
    while (v8[16] == 93 && v8 != 0);
  }
  v15 = 0;
  if ((_DWORD)v6)
  {
    v11 = 0;
    v12 = a1 + 8;
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)a3 + 8 * v11))
      {
        v14[16] = 257;
        Value = llvm::IRBuilderBase::CreateExtractValue(v12, (uint64_t)a2, (uint64_t)&v15, 1, (uint64_t)v14);
        v11 = v15;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = Value;
      }
      v15 = ++v11;
    }
    while (v11 < v6);
  }
}

uint64_t EraseInstructionChain(llvm::Value *a1)
{
  uint64_t v1;
  int v2;
  llvm::Value *v3;
  llvm::Value *v4;

  v1 = 0;
  if (a1 && *((unsigned __int8 *)a1 + 16) >= 0x1Cu)
  {
    if (*((_QWORD *)a1 + 1))
    {
      return 0;
    }
    else
    {
      LODWORD(v1) = 0;
      while (1)
      {
        v2 = *((_DWORD *)a1 + 5);
        if ((v2 & 0x7FFFFFF) == 0)
          break;
        v3 = (v2 & 0x40000000) != 0
           ? (llvm::Value *)*((_QWORD *)a1 - 1)
           : (llvm::Value *)((char *)a1 - 32 * (v2 & 0x7FFFFFF));
        v4 = *(llvm::Value **)v3;
        if (*(unsigned __int8 *)(*(_QWORD *)v3 + 16) <= 0x1Bu)
          break;
        llvm::Instruction::eraseFromParent(a1);
        v1 = (v1 + 1);
        a1 = v4;
        if (*((_QWORD *)v4 + 1))
          return v1;
      }
      llvm::Instruction::eraseFromParent(a1);
      return (v1 + 1);
    }
  }
  return v1;
}

void AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t Impl;
  void *v7[2];
  _QWORD v8[17];

  v8[16] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 2432) && *(_DWORD *)(a2 + 8))
  {
    v7[0] = v8;
    v7[1] = (void *)0x1000000000;
    v3 = llvm::MDString::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v7, v3);
    if (*(_DWORD *)(a2 + 8))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::MDString::get();
        if (*(_DWORD *)(*(_QWORD *)a2 + v4 + 8) >= 9u
          || (llvm::ConstantInt::get(),
              llvm::ValueAsMetadata::get(),
              llvm::MDString::get(),
              *(_DWORD *)(*(_QWORD *)a2 + v4 + 8) >= 9u))
        {
          abort();
        }
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v7, Impl);
        ++v5;
        v4 += 12;
      }
      while (v5 < *(unsigned int *)(a2 + 8));
    }
    llvm::Module::getOrInsertNamedMetadata();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (v7[0] != v8)
      free(v7[0]);
  }
}

uint64_t AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t i;
  unsigned int v10;
  int v11;
  uint64_t v12;

  if (!*(_BYTE *)(result + 2432) && *(_BYTE *)(a2 + 32))
  {
    v8 = result;
    for (i = 0; i != 8; ++i)
    {
      if (((1 << i) & *(unsigned __int8 *)(a2 + 32)) != 0)
      {
        v10 = *(_DWORD *)(a2 + 4 * i);
        v11 = v10 >> 5;
        switch(v10 & 0x1F)
        {
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            break;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x16u:
            v11 *= 2;
            break;
          case 0xAu:
          case 0xBu:
          case 0x11u:
            v11 *= 4;
            break;
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
            v11 = 4;
            break;
          default:
            v11 = 0;
            break;
        }
        v12 = (v10 >> 12) * *(_DWORD *)(v8 + 868);
        v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(a3 + 4 * i);
        result = llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back(a4, v12 | ((unint64_t)(v12 + v11 - 1) << 32), v4);
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = *(_QWORD *)v5 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::setupFixedPRIDS(uint64_t a1, int a2)
{
  const char *v3;
  const char *Value;
  const char *v5;
  const char *v6;
  int v8;

  if (*(_BYTE *)(a1 + 2432))
    return 1;
  switch(a2)
  {
    case 2:
      if (MGGetBoolAnswer())
      {
        Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_TILE_FRAGMENT_SYNC", v3);
        if (Value)
        {
          if (*Value != 48)
            atoi(Value);
        }
      }
      break;
    default:
      goto LABEL_7;
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (!MGGetBoolAnswer())
    return 1;
LABEL_7:
  v6 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_TILE_FRAGMENT_SYNC", v5);
  if (v6 && *v6 != 48 && (v8 = atoi(v6), (a2 - 3) <= 3) && v8)
    return 0;
  else
    return 1;
}

uint64_t AGCLLVMAGPFragmentShader::initCompile(AGCLLVMAGPFragmentShader *this)
{
  uint64_t inited;

  inited = AGCLLVMUserFragmentShader::initCompile(this);
  if ((_DWORD)inited && *(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1754))
    AGCLLVMUserShader::setUniformAtomicsMode(this);
  return inited;
}

uint64_t AGCLLVMUserFragmentShader::initCompile(AGCLLVMUserFragmentShader *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  BOOL v24;
  char v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  AGCLLVMUserObject::initCompile(this);
  result = AGCLLVMFragmentShader::initCompile((AGCLLVMUserFragmentShader *)((char *)this + 4320));
  if ((_DWORD)result)
  {
    v3 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 22) + 24) + 16);
    if (v3 != *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 176))
    {
      v4 = *(unsigned int *)(*((_QWORD *)this + 9) + 8);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 8 * v4;
        while (1)
        {
          v7 = *(unsigned __int8 *)(v3 + 8);
          v8 = v3;
          if (v7 == 16)
          {
            v8 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + v5);
            v7 = *(_DWORD *)(v8 + 8);
          }
          if ((v7 & 0xFE) == 0x12)
            v8 = **(_QWORD **)(v8 + 16);
          v9 = *(_QWORD *)(*((_QWORD *)this + 9) - 8 * *(unsigned int *)(*((_QWORD *)this + 9) + 8) + v5);
          if (isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8)), "air.render_target"))
          {
            v44 = 0;
            LODWORD(v43) = 1;
            if (!parseMDInt(0, v9, (unsigned int *)&v43, (_DWORD *)&v44 + 1))
              return 0;
            LODWORD(v43) = 2;
            if (!parseMDInt(0, v9, (unsigned int *)&v43, &v44))
              return 0;
            v11 = v44;
            v10 = BYTE4(v44);
            if ((_DWORD)v44 != 1)
              break;
            v12 = *((_QWORD *)this + 727);
            v13 = (unsigned int *)(v12 ? v12 + 16 : *((_QWORD *)this + 726) + 4 * HIDWORD(v44) + 24);
            v14 = *v13;
            if ((v14 & 1) != 0
              && (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v14), (int8x16_t)xmmword_1C3E37DC0), (int32x4_t)xmmword_1C3E37DD0))) & 1) != 0)
            {
              break;
            }
          }
LABEL_35:
          v5 += 8;
          if (v6 == v5)
            goto LABEL_40;
        }
        v15 = (char *)this + 32 * HIDWORD(v44);
        v16 = v15 + 4952;
        v17 = v15 + 5208;
        if (!(_DWORD)v44)
          v17 = v16;
        v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v19 = v18 + 32;
        v20 = *((_QWORD *)v18 + 25);
        if (*((_BYTE *)this + 72 * HIDWORD(v44) + 4377))
        {
          if (v8 == v20)
            goto LABEL_30;
          if (v8 != v19[19])
            v8 = v20;
        }
        if (v8 != v20)
        {
          if (v8 == v19[19])
          {
            if (*(_QWORD *)v17 == v19[36])
              goto LABEL_32;
            v21 = v19 + 35;
          }
          else if (v8 == v19[25])
          {
            v21 = v19 + 39;
          }
          else
          {
            if (v8 != v19[24] || *(_QWORD *)v17 == v19[39])
            {
LABEL_32:
              if (!v11)
              {
                v22 = 1 << v10;
                if ((v22 & *(_DWORD *)(*((_QWORD *)this + 614) + 32)) != 0)
                  *((_BYTE *)this + 4944) |= v22;
              }
              goto LABEL_35;
            }
            v21 = v19 + 38;
          }
LABEL_31:
          *(_QWORD *)v17 = *v21;
          goto LABEL_32;
        }
LABEL_30:
        v21 = v19 + 36;
        goto LABEL_31;
      }
    }
LABEL_40:
    v23 = **((_DWORD **)this + 725);
    if (*((_BYTE *)this + 5844))
      v24 = 0;
    else
      v24 = (**((_DWORD **)this + 725) & 4) == 0;
    v25 = v23 & 1;
    if (!v24)
      v25 = 1;
    *((_BYTE *)this + 5844) = v25;
    result = (*(uint64_t (**)(AGCLLVMUserFragmentShader *))(*(_QWORD *)this + 536))(this);
    if ((_DWORD)result)
    {
      if ((v23 & 0x800) != 0)
      {
        v28 = *((_BYTE *)this + 5464) | 1;
      }
      else
      {
        v26 = *((unsigned __int8 *)this + 5835);
        if (*((_BYTE *)this + 5835) || *((_BYTE *)this + 5857))
        {
          if (*((_BYTE *)this + 5845))
          {
            v27 = *((_BYTE *)this + 5464);
          }
          else
          {
            v27 = *((_BYTE *)this + 5464);
            if (!*((_BYTE *)this + 5844))
            {
              v30 = 0;
              v29 = 1;
              goto LABEL_55;
            }
          }
          v29 = 0;
          v30 = 2;
LABEL_55:
          v31 = v27 & 0xF1 | v30 | (4 * v26);
          v32 = *((unsigned __int8 *)this + 5857);
          v33 = v31 & 0xF7 | (8 * v32);
          *((_BYTE *)this + 5464) = v33;
          if ((v29 & 1) == 0 && !v26 && v32)
          {
            *((_BYTE *)this + 5464) = v33 | 4;
            *((_BYTE *)this + 5835) = 1;
            *(_QWORD *)((char *)this + 5836) = 0x100000000;
          }
          goto LABEL_59;
        }
        if (!*((_BYTE *)this + 5844)
          && (!*((_BYTE *)this + 5845) || (**((_BYTE **)this + 725) & 0x10) != 0 && !*((_BYTE *)this + 5862)))
        {
LABEL_59:
          if ((*(_BYTE *)(*((_QWORD *)this + 614) + 33) & 0xEE) != 0)
          {
            llvm::Module::getOrInsertNamedMetadata();
            llvm::ConstantInt::get();
            v43 = llvm::ValueAsMetadata::get();
            llvm::MDTuple::getImpl();
            llvm::NamedMDNode::addOperand();
            v34 = *((_QWORD *)this + 614);
            *((_DWORD *)this + 1456) = ~(-1 << (BYTE1(*(_DWORD *)(v34 + 32)) & 0xF));
            if ((((*(_DWORD *)(v34 + 32) >> 8) ^ (*(_DWORD *)(v34 + 32) >> 12)) & 0xF) != 0)
            {
              llvm::Module::getOrInsertNamedMetadata();
              llvm::ConstantInt::get();
              v43 = llvm::ValueAsMetadata::get();
              llvm::MDTuple::getImpl();
              llvm::NamedMDNode::addOperand();
              llvm::Module::getOrInsertNamedMetadata();
              v35 = *((_DWORD *)this + 1468) > 1u ? 0 : llvm::MDString::get();
              v43 = v35;
              llvm::MDTuple::getImpl();
              llvm::NamedMDNode::addOperand();
              if (*((_DWORD *)this + 1468) == 1)
              {
                llvm::Module::getOrInsertNamedMetadata();
                llvm::ConstantInt::get();
                v43 = llvm::ValueAsMetadata::get();
                llvm::MDTuple::getImpl();
                llvm::NamedMDNode::addOperand();
              }
            }
          }
          else
          {
            *((_DWORD *)this + 1456) = 1;
          }
          *((_QWORD *)this + 617) = llvm::Module::getOrInsertNamedMetadata();
          v36 = *(_QWORD *)(*(_QWORD *)this - 24);
          v37 = *(_QWORD *)((char *)this + v36 + 368);
          v38 = v37 + 8;
          for (i = *(_QWORD *)(v37 + 16); ; i = *(_QWORD *)(i + 8))
          {
            if (i == v38)
              return 1;
            v40 = (uint64_t *)(i - 56);
            if (!i)
              v40 = 0;
            v41 = *v40;
            if (*v40)
            {
              v42 = *(_DWORD *)(v41 + 8);
              if ((v42 & 0xFE) == 0x12)
                v42 = *(_DWORD *)(**(_QWORD **)(v41 + 16) + 8);
              if ((v42 & 0xFFFFFF00) == 0x300 && v40[1])
                break;
            }
          }
          std::string::append((std::string *)((char *)this + v36 + 8), "Fragment shaders do not support shader declared threadgroup variables");
          return 0;
        }
        v28 = *((_BYTE *)this + 5464) | 2;
      }
      *((_BYTE *)this + 5464) = v28;
      goto LABEL_59;
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::detectSideEffects(AGCLLVMAGPFragmentShaderGen3 *this)
{
  if (*((_DWORD *)this + 1814) == 2)
    return AGCLLVMAGPFragmentShader::detectSideEffects(this);
  else
    return 1;
}

uint64_t AGCLLVMUserShader::setUniformAtomicsMode(AGCLLVMUserShader *this)
{
  const char *v1;
  const char *Value;

  llvm::Module::getOrInsertNamedMetadata();
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_ATOMIC_OPTIMIZATIONS", v1);
    if (Value)
    {
      if (*Value != 48)
        atoi(Value);
    }
  }
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t *AGCLLVMUserShader::initLIBAliasOffset(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  int v6;
  int v7;

  if (a2)
  {
    v2 = *(_DWORD *)(a2 + 32);
    if ((_BYTE)v2)
    {
      v3 = *result;
      v4 = *(_DWORD *)(*(uint64_t *)((char *)result + *(_QWORD *)(*result - 24) + 400) + 868) * (HIWORD(v2) & 0x1FF);
      *((_WORD *)result + 1782) = v4;
      *((_WORD *)result + 1781) = v4;
      *((_DWORD *)result + 1078) = v4;
      v5 = *(uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 400);
      LODWORD(v3) = *(_DWORD *)(a2 + 4 * (31 - __clz(*(unsigned __int8 *)(a2 + 32))));
      v6 = (v3 >> 12) * *(_DWORD *)(v5 + 868);
      LODWORD(v5) = (v3 & 0x1F) - 2;
      v7 = v3 >> 5;
      switch((int)v5)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          break;
        case 4:
        case 5:
        case 6:
        case 7:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 20:
          v7 *= 2;
          break;
        case 8:
        case 9:
        case 15:
          v7 *= 4;
          break;
        case 16:
        case 17:
        case 18:
        case 19:
          v7 = 4;
          break;
        default:
          v7 = 0;
          break;
      }
      *((_DWORD *)result + 1079) = v7 + v6;
    }
  }
  return result;
}

uint64_t validateMaxTotalThreadsPerThreadgroup(unsigned int a1, unsigned int a2, unsigned int a3, std::string *a4, unsigned int *a5)
{
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type size;
  BOOL v16;
  std::string *p_p;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  __int128 v38;
  uint64_t v39;

  if (a2 && a1 != a2 && a1)
  {
    std::to_string(&v33, a1);
    v8 = std::string::insert(&v33, 0, ": Kernel specified max total threads per threadgroup (");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v34, ") ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v35, "must match compute pipeline specified max total threads per threadgroup (");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!a1)
      a1 = a2;
    if (a1 <= a3)
    {
      *a5 = a1;
      return 1;
    }
    std::to_string(&v33, a1);
    v18 = std::string::insert(&v33, 0, ": Specified total max threads per threadgroup (");
    v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v34, ") ");
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v35, "exceeds the maximum total threads per threadgroup supported (");
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
    v24 = size;
  else
    v24 = v14;
  v25 = std::string::append(&v36, (const std::string::value_type *)p_p, v24);
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v37, ")");
  v28 = v27->__r_.__value_.__r.__words[2];
  v38 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v39 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v39 >= 0)
    v29 = (const std::string::value_type *)&v38;
  else
    v29 = (const std::string::value_type *)v38;
  if (v39 >= 0)
    v30 = HIBYTE(v39);
  else
    v30 = *((_QWORD *)&v38 + 1);
  std::string::append(a4, v29, v30);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t MTLCompilerBuildRequestWithOptions(_QWORD *a1, char *a2, unint64_t a3, char a4, llvm::Module *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, char **a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  char *InternalErrorMessage;
  char **v32;
  char *v33;
  int v34;

  *a9 = 0;
  *a11 = 0;
  v19 = mach_absolute_time();
  v34 = 0;
  v26 = AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, 0, 0, a5, &v34, a6, a7);
  if ((a4 & 2) != 0)
  {
    *a11 = 32;
    v27 = mach_absolute_time() - v19;
    if (getTimebaseInfo(void)::once != -1)
      dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
    v28 = v27 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1ED839B44;
    v29 = v28 - a1[7];
    a1[5] = v28;
    a1[6] = v29;
    *a10 = a1 + 4;
  }
  if (v26)
  {
    result = 0;
    *a12 = 0;
  }
  else
  {
    v33 = (char *)a1[2];
    v32 = (char **)(a1 + 2);
    InternalErrorMessage = v33;
    if (!v33)
      InternalErrorMessage = generateInternalErrorMessage(v32, v34);
    *a12 = InternalErrorMessage;
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", v20, v21, v22, v23, v24, v25, (char)InternalErrorMessage);
    return 1;
  }
  return result;
}

uint64_t AGCCodeGenServiceBuildRequestInternal(_QWORD *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, llvm::Module *a6, _DWORD *a7, _QWORD *a8, _QWORD *a9)
{
  _DWORD *v11;
  const unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  int v21;
  int64_t v22;
  unint64_t v23;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  flatbuffers::Table *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned int *v36;
  const unsigned __int8 *v37;
  int v38;
  unsigned int v39;
  _BOOL4 v41;
  unsigned int v43;
  const unsigned __int8 *v44;
  unint64_t v45;
  flatbuffers::Table *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  llvm::Module *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(void);
  void (*v62)(void);
  void *v63;
  void *v64;
  llvm::LLVMContext **v65;
  llvm::LLVMContext **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  AGCLLVMCtx *v70;
  llvm::LLVMContext *v71;
  uint64_t v72;
  uint64_t v73;
  AGCLLVMBuilder *v74;
  int v75;
  BOOL v76;
  int v77;
  const char *v78;
  uint64_t (*v79)(void);
  char v80;
  AGCLLVMContextSwitchProgram *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *FragmentShader;
  uint64_t v86;
  _QWORD *AGPVertexShaderObject;
  uint64_t NamedMetadata;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  AGCLLVMCtx *v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  AGCLLVMClearVertexDataShader *v105;
  unsigned __int8 v106;
  AGCLLVMUtilityProgram *v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned int v110;
  void *v111;
  __int128 *v112;
  size_t v113;
  const char *p_dst;
  char *v115;
  size_t v116;
  void **v117;
  uint64_t v118;
  void *v119;
  size_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t Function;
  llvm::Function *v124;
  llvm::Instruction *v125;
  llvm::GlobalVariable *v126;
  uint64_t v127;
  uint64_t v128;
  llvm::GlobalVariable *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::Function *v134;
  uint64_t v135;
  uint64_t v136;
  llvm::Function *v137;
  uint64_t v138;
  uint64_t v139;
  llvm::Function *v140;
  uint64_t v141;
  llvm::Instruction *v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  uint64_t v146;
  const char *v147;
  FILE *v149;
  char *v150;
  __int128 v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  _DWORD *v155;
  _BYTE *v156;
  unsigned __int8 *v157;
  _DWORD *v158;
  _DWORD *v159;
  uint64_t v160;
  _DWORD *v161;
  unsigned int *v162;
  _DWORD *v163;
  uint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v171;
  uint64_t v172;
  _DWORD *v175;
  char v178[8];
  void *__p[2];
  uint64_t v180;
  int v181;
  void *__dst;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  llvm::GlobalVariable *v189;
  __int16 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  __int16 v204;
  char v205;
  char v206;
  uint64_t v207;
  char v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  int v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  char *v218[2];
  _QWORD v219[24];

  v172 = 0;
  v169 = 0;
  v11 = 0;
  v167 = 0;
  v168 = 0;
  v165 = 0;
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v164 = 0;
  v171 = 0;
  v12 = 0;
  v166 = 0;
  v13 = 0;
  v14 = 0;
  v219[21] = *MEMORY[0x1E0C80C00];
  v15 = (unint64_t)&a2[a3];
  v16 = a2;
  v175 = a7;
  while (2)
  {
    v17 = (uint64_t)v12;
    v18 = *(unsigned int *)v16;
    if (a3 <= 4 * (v18 >> 8) || (v19 = &a2[4 * (v18 >> 8)], (unint64_t)(v19 - 4) >= v15))
    {
LABEL_142:
      v20 = 0;
      goto LABEL_147;
    }
    v20 = 0;
    v21 = *(_DWORD *)v16;
    v22 = v19 - v16;
    v23 = v19 - v16 - 4;
    switch(*(_DWORD *)v16)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0x34u:
        *a7 = v21;
        ++v13;
        v14 = 2;
        goto LABEL_123;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
        *a7 = v21;
        ++v13;
        v14 = 1;
        goto LABEL_123;
      case 0x3Au:
        v27 = *a7;
        if (*a7 > 0x1Fu || ((1 << v27) & 0xF200800A) == 0)
        {
          v28 = v27 - 90;
          if (v28 > 5 || ((1 << v28) & 0x35) == 0)
            goto LABEL_142;
        }
        if (v23 < 0x60)
          goto LABEL_142;
        goto LABEL_121;
      case 0x3Bu:
        if (*a7 > 0x32u || ((1 << *a7) & 0x4000000007814) == 0)
          goto LABEL_142;
        goto LABEL_120;
      case 0x3Cu:
        v38 = *a7;
        if (*a7 > 0x1Fu || ((1 << v38) & 0xF200800A) == 0)
        {
          v39 = v38 - 90;
          if (v39 > 5 || ((1 << v39) & 0x35) == 0)
            goto LABEL_142;
        }
        if (v19 - v16 == 4)
          goto LABEL_142;
        goto LABEL_121;
      case 0x3Du:
        v41 = *a7 == 9 || *a7 == 26;
        if (v19 - v16 == 4 || !v41)
          goto LABEL_142;
        goto LABEL_121;
      case 0x3Eu:
        if (v19 - v16 == 4 || *a7 != 10)
          goto LABEL_142;
        goto LABEL_121;
      case 0x3Fu:
        v29 = *a7;
        if (*a7 <= 0x32u && ((1 << v29) & 0x4000000007814) != 0)
        {
          if (v23 < 0x48)
            goto LABEL_142;
        }
        else if (v23 < 0x48 || v29 != 5)
        {
          goto LABEL_142;
        }
LABEL_121:
        v11 = v16 + 4;
LABEL_122:
        ++v13;
        goto LABEL_123;
      case 0x40u:
        if (v23 < 0x84)
          goto LABEL_142;
        v168 = (uint64_t)(v16 + 4);
        goto LABEL_122;
      case 0x41u:
        if (v23 < 0x40)
          goto LABEL_142;
        v169 = (uint64_t)(v16 + 4);
        goto LABEL_123;
      case 0x42u:
        v155 = v11;
        v43 = *a7;
        if (*a7 <= 0x32u && ((1 << v43) & 0x4000000007834) != 0)
        {
          if (v23 < 0x28)
            goto LABEL_141;
        }
        else
        {
          v51 = v15;
          v52 = v14;
          v53 = isComputeShader(v43);
          if (v23 < 0x28 || (a7 = v175, v14 = v52, v15 = v51, !v53))
          {
LABEL_141:
            v20 = 0;
            v11 = v155;
            goto LABEL_147;
          }
        }
        v172 = (uint64_t)(v16 + 4);
        ++v13;
        v12 = (const unsigned __int8 *)v17;
        v11 = v155;
LABEL_123:
        v16 = v19;
        if (v21 != 96)
          continue;
        if ((v13 - 2) >= 8)
          v20 = 0;
        else
          v20 = v14;
        v17 = (uint64_t)v12;
LABEL_147:
        v54 = (uint64_t)v11;
        v55 = 0;
        v56 = a6;
        v57 = a1;
        v58 = a1[8];
        if (!a6 && v20 != 1)
          v55 = (***(uint64_t (****)(_QWORD))(v58 + 32))(*(_QWORD *)(v58 + 32));
        *(_BYTE *)(v58 + 377) = v55;
        if ((v20 - 1) >= 2)
        {
          v68 = 0;
          a1[2] = strdup("compiler plugin input state failed validation");
          return v68;
        }
        MEMORY[0x1CAA2C330](v178);
        if (a6)
          goto LABEL_161;
        if (a5)
        {
          v59 = OGLCodeGenService::oglCodeGenService;
          if (!OGLCodeGenService::oglCodeGenService)
          {
            v59 = operator new();
            v60 = dlopen("/System/Library/Frameworks/OpenGLES.framework/libGLVMPlugin.dylib", 5);
            *(_QWORD *)v59 = v60;
            if (v60
              && (v61 = (void (*)(void))dlsym(v60, "oglCodeGenServiceInitialize")) != 0
              && (v62 = v61,
                  v63 = dlsym(*(void **)v59, "oglCodeGenServiceTerminate"),
                  (*(_QWORD *)(v59 + 8) = v63) != 0)
              && (v64 = dlsym(*(void **)v59, "oglCodeGenServiceGenerateIR"), (*(_QWORD *)(v59 + 16) = v64) != 0))
            {
              v62();
            }
            else
            {
              v149 = (FILE *)*MEMORY[0x1E0C80C10];
              v150 = dlerror();
              fprintf(v149, "AGX: ERROR: %s\n", v150);
            }
            OGLCodeGenService::oglCodeGenService = v59;
          }
          v56 = (llvm::Module *)(*(uint64_t (**)(char *, uint64_t))(v59 + 16))(v178, a4);
LABEL_161:
          v65 = (llvm::LLVMContext **)AGCGetReplacementIR(v56, (llvm::LLVMContext *)v178);
          if (v65)
          {
            v66 = v65;
            if (v56)
            {
              v67 = MEMORY[0x1CAA2CC9C](v56);
              MEMORY[0x1CAA2D68C](v67, 0x10B2C407FF26C1CLL);
            }
          }
          else
          {
            v66 = (llvm::LLVMContext **)v56;
          }
        }
        else
        {
          v66 = (llvm::LLVMContext **)AGCGetReplacementIR(0, (llvm::LLVMContext *)v178);
        }
        break;
      case 0x43u:
        if (v23 < 8 || *a7 != 5)
          goto LABEL_142;
        goto LABEL_122;
      case 0x44u:
        if (*a7 <= 0x32u && ((1 << *a7) & 0x4000000007814) != 0 && v23 < 8)
          goto LABEL_142;
        v165 = (unsigned int *)(v16 + 4);
        goto LABEL_122;
      case 0x45u:
        if (v23 < 0x50)
          goto LABEL_142;
        v160 = (uint64_t)(v16 + 4);
        goto LABEL_122;
      case 0x46u:
        if (v23 < 4)
          goto LABEL_142;
        v163 = v16 + 4;
        goto LABEL_122;
      case 0x47u:
        if (v23 < 4)
          goto LABEL_142;
        v161 = v16 + 4;
        goto LABEL_122;
      case 0x48u:
        if (v23 < 4)
          goto LABEL_142;
        v162 = (unsigned int *)(v16 + 4);
        goto LABEL_122;
      case 0x49u:
        if (v23 < 4)
          goto LABEL_142;
        v157 = (unsigned __int8 *)(v16 + 4);
        goto LABEL_122;
      case 0x4Au:
        if (v23 < 4)
          goto LABEL_142;
        v167 = (unsigned int *)(v16 + 4);
        goto LABEL_122;
      case 0x4Bu:
        v153 = v15;
        v154 = v14;
        v155 = v11;
        v12 = (const unsigned __int8 *)(v16 + 4);
        *(_QWORD *)&v209 = v16 + 4;
        *((_QWORD *)&v209 + 1) = v19 - v16 - 4;
        v210 = xmmword_1C3E37B40;
        *(_QWORD *)&v211 = 0;
        BYTE8(v211) = 1;
        if (v23 < 5)
          goto LABEL_141;
        v30 = *(unsigned int *)v12;
        if ((int)v30 < 1)
          goto LABEL_141;
        if (v22 - 5 < v30)
          goto LABEL_141;
        v31 = (flatbuffers::Table *)&v12[v30];
        if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v209, &v12[v30])
          || !flatbuffers::Table::VerifyOffset(v31, (const flatbuffers::Verifier *)&v209))
        {
          goto LABEL_141;
        }
        v32 = *(int *)v31;
        if (*(unsigned __int16 *)((char *)v31 - v32) < 5u)
          goto LABEL_65;
        if (!*(_WORD *)((char *)v31 - v32 + 4))
          goto LABEL_57;
        if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v209, (const unsigned __int8 *)v31+ *(unsigned __int16 *)((char *)v31 - v32 + 4)+ *(unsigned int *)((char *)v31 + *(unsigned __int16 *)((char *)v31 - v32 + 4)), 4uLL, 0))goto LABEL_141;
        v32 = *(int *)v31;
        if (*(unsigned __int16 *)((char *)v31 - v32) < 5u)
          goto LABEL_65;
LABEL_57:
        v33 = *(unsigned __int16 *)((char *)v31 - v32 + 4);
        if (!v33)
          goto LABEL_65;
        v34 = (_DWORD *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33));
        if (!*v34)
          goto LABEL_65;
        v35 = 0;
        v36 = v34 + 1;
        v152 = *((_QWORD *)&v209 + 1);
        v151 = v209 + __PAIR128__(-1, 0);
        do
        {
          v37 = (const unsigned __int8 *)v36 + *v36;
          __dst = 0;
          if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v209, v37, 1uLL, (unint64_t *)&__dst)|| v152 < 2|| *((_QWORD *)&v151 + 1) < (unint64_t)__dst|| *((_BYTE *)__dst + v151))
          {
            goto LABEL_141;
          }
          ++v35;
          ++v36;
        }
        while (v35 < *v34);
LABEL_65:
        ++v13;
LABEL_107:
        v11 = v155;
        a7 = v175;
        v14 = v154;
        v15 = v153;
        goto LABEL_123;
      case 0x4Cu:
        v153 = v15;
        v154 = v14;
        v155 = v11;
        v44 = (const unsigned __int8 *)(v16 + 4);
        *(_QWORD *)&v209 = v16 + 4;
        *((_QWORD *)&v209 + 1) = v19 - v16 - 4;
        v210 = xmmword_1C3E37B40;
        *(_QWORD *)&v211 = 0;
        BYTE8(v211) = 1;
        if (v23 < 5)
          goto LABEL_141;
        v45 = *(unsigned int *)v44;
        if ((int)v45 < 1)
          goto LABEL_141;
        if (v22 - 5 < v45)
          goto LABEL_141;
        v46 = (flatbuffers::Table *)&v44[v45];
        if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v209, &v44[v45]))
          goto LABEL_141;
        if (!flatbuffers::Table::VerifyOffset(v46, (const flatbuffers::Verifier *)&v209))
          goto LABEL_141;
        v47 = (unsigned __int16 *)((char *)v46 - *(int *)v46);
        if (*v47 >= 5u)
        {
          v48 = v47[2];
          if (v48)
          {
            if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v209, (const unsigned __int8 *)v46 + v48 + *(unsigned int *)((char *)v46 + v48), 4uLL, 0))goto LABEL_141;
          }
        }
        ++v13;
        v166 = (uint64_t)v44;
        goto LABEL_107;
      case 0x4Du:
        if (v23 < 4)
          goto LABEL_142;
        v159 = v16 + 4;
        goto LABEL_122;
      case 0x4Eu:
        v49 = *a7;
        if ((*a7 > 0x1Bu || ((1 << v49) & 0x8070040) == 0) && v49 != 93 && v49 != 91)
          goto LABEL_142;
LABEL_120:
        if (v23 >= 0x18)
          goto LABEL_121;
        goto LABEL_142;
      case 0x4Fu:
        if (v23 < 4 || *a7 != 8)
          goto LABEL_142;
        goto LABEL_121;
      case 0x50u:
        if (v23 < 0x20)
          goto LABEL_142;
        v164 = (uint64_t)(v16 + 4);
        goto LABEL_123;
      case 0x51u:
        if (v23 < 4)
          goto LABEL_142;
        v171 = v16 + 4;
        goto LABEL_122;
      case 0x53u:
        if (v23 < 4)
          goto LABEL_142;
        v158 = v16 + 4;
        goto LABEL_122;
      case 0x54u:
        if (v23 < 4)
          goto LABEL_142;
        goto LABEL_122;
      case 0x55u:
        if (v23 < 4)
          goto LABEL_142;
        goto LABEL_122;
      case 0x56u:
        if (v23 < 4)
          goto LABEL_142;
        goto LABEL_122;
      case 0x57u:
        if (v23 < 4)
          goto LABEL_142;
        v156 = v16 + 4;
        goto LABEL_122;
      case 0x58u:
        if (v23 < 4)
          goto LABEL_142;
        goto LABEL_122;
      case 0x60u:
        goto LABEL_122;
      default:
        goto LABEL_147;
    }
    break;
  }
  v69 = *v175;
  v70 = (AGCLLVMCtx *)a1[8];
  AGCLLVMCtx::createGraphicsPasses(v70);
  v68 = 0;
  switch(v69)
  {
    case 1:
      v84 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMGLVertexShader::AGCLLVMGLVertexShader(v84, v70, v66, v54, v168, v169);
      goto LABEL_232;
    case 2:
      *(_QWORD *)&v209 = &off_1E7ECEBF8;
      *((_QWORD *)&v209 + 1) = v54;
      *(_QWORD *)&v210 = 0;
      *((_QWORD *)&v210 + 1) = v54;
      v86 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMGLFragmentShader::AGCLLVMGLFragmentShader(v86, v70, (uint64_t)v66, (uint64_t)&v209, v168, v169, v172, v164);
      goto LABEL_232;
    case 3:
      AGPVertexShaderObject = AGCLLVMAGPVertexShader::createAGPVertexShaderObject((uint64_t)v70, (llvm::Module *)v66, v54, v17, v166);
      goto LABEL_311;
    case 4:
      *(_QWORD *)&v209 = &off_1E7ECEBF8;
      *((_QWORD *)&v209 + 1) = v54;
      v210 = (unint64_t)v54;
      AGPVertexShaderObject = (_QWORD *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v70 + 4) + 64))(*((_QWORD **)v70 + 4));
      goto LABEL_311;
    case 5:
      __dst = &off_1E7ECEBF8;
      v183 = v54;
      v184 = (unint64_t)v54;
      *(_QWORD *)&v209 = "air.kernel";
      LOWORD(v211) = 259;
      NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v66, (const llvm::Twine *)&v209);
      v89 = (uint64_t *)*((_QWORD *)v70 + 4);
      v90 = *v89;
      if (NamedMetadata)
      {
        v79 = *(uint64_t (**)(void))(v90 + 56);
LABEL_247:
        AGPVertexShaderObject = (_QWORD *)v79();
      }
      else
      {
        AGPVertexShaderObject = (_QWORD *)(*(uint64_t (**)(uint64_t *))(v90 + 64))(v89);
      }
LABEL_311:
      v72 = (uint64_t)AGPVertexShaderObject;
      if (AGPVertexShaderObject)
        goto LABEL_312;
      v68 = 0;
      goto LABEL_326;
    case 6:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 48);
      goto LABEL_247;
    case 7:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 208);
      goto LABEL_247;
    case 8:
      v91 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMUserDynamicLibrary::AGCLLVMUserDynamicLibrary(v91, v70, v66, v54);
      goto LABEL_232;
    case 9:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 96);
      goto LABEL_247;
    case 10:
      v92 = **((_QWORD **)v70 + 4);
      if ((*(_BYTE *)(v54 + 16) & 0x80) != 0)
        v79 = *(uint64_t (**)(void))(v92 + 120);
      else
        v79 = *(uint64_t (**)(void))(v92 + 112);
      goto LABEL_247;
    case 11:
      v93 = (uint64_t *)operator new();
      FragmentShader = AGCLLVMClearFragmentShader::AGCLLVMClearFragmentShader(v93, v70, (llvm::LLVMContext *)v178, v159, v172);
      goto LABEL_232;
    case 12:
      v94 = operator new();
      v95 = v70;
      v96 = (_DWORD *)v172;
      v97 = 0;
      v98 = 12;
      goto LABEL_198;
    case 13:
      v99 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMBackgroundObjectFragmentShader::AGCLLVMBackgroundObjectFragmentShader(v99, v70, (llvm::LLVMContext *)v178, v172, v165);
      goto LABEL_232;
    case 14:
      v94 = operator new();
      v95 = v70;
      v96 = (_DWORD *)v172;
      v97 = (uint64_t)v163;
      v98 = 14;
LABEL_198:
      FragmentShader = (_QWORD *)AGCLLVMTextureFetchFragmentShader::AGCLLVMTextureFetchFragmentShader(v94, v95, (llvm::LLVMContext *)v178, v96, v97, v98);
      goto LABEL_232;
    case 15:
      v100 = (uint64_t *)operator new();
      FragmentShader = AGCLLVMTABlitVertexShader::AGCLLVMTABlitVertexShader(v100, v70, (llvm::LLVMContext *)v178, v161);
      goto LABEL_232;
    case 16:
      v101 = operator new();
      FragmentShader = AGCLLVMDriverCDMBlitShader::AGCLLVMDriverCDMBlitShader(v101, v70, (llvm::LLVMContext *)v178, v172, v162);
      goto LABEL_232;
    case 17:
      v83 = (uint64_t)AGCLLVMDriverSparseShaders::create(v70, (AGCLLVMCtx *)v178, (llvm::LLVMContext *)*v157);
      goto LABEL_181;
    case 18:
      v83 = (uint64_t)AGCLLVMDriverFastClearShaders::create(v70, (uint64_t)v178, *v167);
      goto LABEL_181;
    case 19:
      v102 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMEndOfTileProgram::AGCLLVMEndOfTileProgram(v102, v70, (llvm::LLVMContext *)v178, v160);
      goto LABEL_232;
    case 20:
      v83 = AGCLLVMDriverExecuteIndirectESLGenerationShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 21:
      v83 = AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 22:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 152);
      goto LABEL_247;
    case 23:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 144);
      goto LABEL_247;
    case 24:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 176);
      goto LABEL_247;
    case 25:
      v103 = *v156 & 3;
      if (v103 == 2)
        v104 = ((v103 - 1) < 2) | 2;
      else
        v104 = (v103 - 1) < 2;
      AGPVertexShaderObject = (_QWORD *)(*(uint64_t (**)(_QWORD *, AGCLLVMCtx *, char *, _QWORD))(**((_QWORD **)v70 + 4) + 40))(*((_QWORD **)v70 + 4), v70, v178, v104 | *v156 & 4u);
      goto LABEL_311;
    case 26:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 104);
      goto LABEL_247;
    case 28:
      v105 = (AGCLLVMClearVertexDataShader *)operator new();
      AGCLLVMClearVertexDataShader::AGCLLVMClearVertexDataShader(v105, v70, (llvm::LLVMContext *)v178);
      goto LABEL_232;
    case 29:
    case 30:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 32);
      goto LABEL_247;
    case 31:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 32);
      goto LABEL_247;
    case 32:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 32);
      goto LABEL_247;
    case 33:
    case 35:
      v80 = v69 == 35;
      v81 = v70;
      v82 = 1;
      goto LABEL_180;
    case 34:
    case 36:
      v80 = v69 == 36;
      v81 = v70;
      v82 = 0;
LABEL_180:
      v83 = AGCLLVMContextSwitchProgram::create(v81, (AGCLLVMCtx *)v178, (llvm::LLVMContext *)v82, v80);
      goto LABEL_181;
    case 37:
    case 38:
    case 39:
      v72 = operator new();
      AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)v72, v70, (llvm::LLVMContext *)v178);
      *(_QWORD *)v73 = &off_1E7EBA050;
      *(_QWORD *)(v73 + 32) = &unk_1E7EBA140;
      v74 = (AGCLLVMBuilder *)(v73 + 32);
      v75 = *(_DWORD *)(*((_QWORD *)v70 + 4) + 28);
      v76 = v75 == 8 && v69 == 39;
      v212 = 0;
      if (v76)
        v77 = 37;
      else
        v77 = v69;
      v210 = 0u;
      v211 = 0u;
      v209 = 0u;
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      v216 = 0u;
      v217 = 0;
      v218[0] = (char *)v219;
      v218[1] = (char *)0x400000000;
      *(_DWORD *)(v73 + 3320) = v77;
      if (v77 == 37)
      {
        v78 = "define agx_clcc void @agc.flush() {\n"
              "   ret void\n"
              "}\n"
              "!agx.compute_attribs = !{!0}\n"
              "!agx.compute_driver_bindings = !{!1}\n"
              "!0 = !{void ()* @agc.flush}\n"
              "!1 = !{void ()* @agc.flush}\n";
      }
      else if (v77 == 38)
      {
        v78 = "define agx_clcc void @agc.flush.fw_interrupt() {\n"
              "   call void @llvm.agx1.nop.dbg(i16 2)\n"
              "   ret void\n"
              "}\n"
              "declare void @llvm.agx1.nop.dbg(i16) nounwind\n"
              "!agx.compute_attribs = !{!0}\n"
              "!agx.compute_driver_bindings = !{!1}\n"
              "!0 = !{void ()* @agc.flush.fw_interrupt}\n"
              "!1 = !{void ()* @agc.flush.fw_interrupt}\n";
      }
      else
      {
        v110 = v75 - 4;
        if (v110 > 3)
          v78 = "@shared_mem = external addrspace(64) constant i32 addrspace(1)*, section \"buffer_bindings\", align 8\n"
                "define agx_clcc void @agc.fence() {\n"
                "\t%1 = load i32 addrspace(1)*, i32 addrspace(1)* addrspace(64)* @shared_mem\n"
                "\tstore  i32 0, i32 addrspace(1)* %1\n"
                "\t%2 = bitcast i32 addrspace(1)* %1 to i8 addrspace(1)*\n"
                "\t%3 = call <4 x float> @texture2d()\n"
                "\t%4 = extractelement <4 x float> %3, i32 0\t%5 = bitcast float %4 to i32\tstore  i32 %5, i32 addrspace("
                "1)* %1\tcall void @idf(i8 addrspace(1)* %2)\n"
                "\tcall void @memfence(i8 addrspace(1)* %2)\n"
                "\tret void\n"
                "}\n"
                "declare void @idf(i8 addrspace(1)*);\n"
                "declare <4 x float> @texture2d();\n"
                "declare void @memfence(i8 addrspace(1)*)\n";
        else
          v78 = off_1E7EBA148[v110];
      }
      strlen(v78);
      llvm::parseAssemblyString();
      v111 = __dst;
      *(_QWORD *)(v72 + 368) = __dst;
      if (!v111)
      {
        if ((SBYTE7(v214) & 0x80u) == 0)
          v112 = &v213;
        else
          v112 = (__int128 *)v213;
        if (v112)
        {
          if ((SBYTE7(v214) & 0x80u) == 0)
            v113 = BYTE7(v214);
          else
            v113 = *((_QWORD *)&v213 + 1);
          std::string::basic_string[abi:nn180100](&__dst, v112, v113);
          if ((SBYTE7(v184) & 0x80u) == 0)
            p_dst = (const char *)&__dst;
          else
            p_dst = (const char *)__dst;
        }
        else
        {
          __dst = 0;
          v183 = 0;
          p_dst = (const char *)&__dst;
          *(_QWORD *)&v184 = 0;
        }
        printf("AssemblerError: error message is :%s\n", p_dst);
        if (v215 >= 0)
          v115 = (char *)&v214 + 8;
        else
          v115 = (char *)*((_QWORD *)&v214 + 1);
        if (v115)
        {
          if (v215 >= 0)
            v116 = HIBYTE(v215);
          else
            v116 = v215;
          std::string::basic_string[abi:nn180100](__p, v115, v116);
          if (v180 >= 0)
            v117 = __p;
          else
            v117 = (void **)__p[0];
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v117 = __p;
          v180 = 0;
        }
        printf("AssemblerError: line content is  :%s\n", (const char *)v117);
        if (SHIBYTE(v180) < 0)
          operator delete(__p[0]);
        if (SBYTE7(v184) < 0)
          operator delete(__dst);
        v111 = *(void **)(v72 + 368);
      }
      v118 = *(_QWORD *)(*(_QWORD *)(v72 + 464) + 32);
      v119 = *(void **)(v118 + 8);
      if (v119)
        v120 = strlen(*(const char **)(v118 + 8));
      else
        v120 = 0;
      llvm::Module::setTargetTriple((uint64_t)v111, v119, v120);
      v121 = *(_QWORD *)(*(_QWORD *)(v72 + 464) + 32);
      if (*(_QWORD *)(v121 + 16))
        strlen(*(const char **)(v121 + 16));
      llvm::Module::setDataLayout();
      v122 = *(_QWORD **)(v72 + 400);
      v122[42] = *(_QWORD *)(v72 + 368);
      v122[43] = v72 + 2776;
      v122[44] = v72 + 2856;
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v124 = (llvm::Function *)Function;
        v125 = *(llvm::Instruction **)(*(_QWORD *)(Function + 8) + 24);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(v72 + 40), v125);
        v126 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __dst = "image_words";
        LOWORD(v185) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        *((_BYTE *)v126 + 80) |= 1u;
        v127 = *(_QWORD *)(v72 + 376);
        v128 = AGCLLVMBuilder::buildGlobalMetadata(v74, v126);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v127, v128);
        v129 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __dst = "sampler_words";
        LOWORD(v185) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        *((_BYTE *)v129 + 80) |= 1u;
        v130 = *(_QWORD *)(v72 + 376);
        v131 = AGCLLVMBuilder::buildGlobalMetadata(v74, v129);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v130, v131);
        __dst = (void *)0x100000000;
        *(_QWORD *)&v184 = 0;
        *(_DWORD *)((char *)&v184 + 7) = 0;
        v185 = 0u;
        v186 = 0u;
        v187 = 0u;
        v188 = 0;
        v190 = 0;
        v191 = 0u;
        v192 = 0u;
        v193 = 0u;
        v194 = 0;
        v204 = 0;
        v205 = 0;
        v197 = 0u;
        v198 = 0u;
        v199 = 0;
        v202 = 0;
        v201 = 0;
        v203 = 0;
        v206 = 1;
        v207 = 0;
        v208 = 0;
        LODWORD(v183) = 0;
        *(_QWORD *)&v186 = v126;
        v189 = v129;
        llvm::ConstantInt::get();
        *(_QWORD *)&v193 = llvm::ConstantDataVector::getSplat();
        v195 = 1;
        v196 = llvm::ConstantFP::get();
        v200 = 0;
        BYTE6(v184) = 0;
        v132 = *(_QWORD *)(v72 + 400);
        *(_OWORD *)__p = *(_OWORD *)(v72 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v72 + 40));
        v181 = *(_DWORD *)(v72 + 136);
        (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v132 + 272))(v132, __p, &__dst);
        if (v180)
          llvm::MetadataTracking::untrack();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v125);
        llvm::Function::eraseFromParent(v124);
        v57 = a1;
      }
      v133 = llvm::Module::getFunction();
      if (v133)
      {
        v134 = (llvm::Function *)v133;
        v135 = *(_QWORD *)(v72 + 400);
        if (*(_QWORD *)(v135 + 1656))
          strlen(*(const char **)(v135 + 1656));
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        llvm::Function::eraseFromParent(v134);
      }
      v136 = llvm::Module::getFunction();
      if (v136)
      {
        v137 = (llvm::Function *)v136;
        v138 = *(_QWORD *)(v72 + 400);
        if (*(_QWORD *)(v138 + 928))
          strlen(*(const char **)(v138 + 928));
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        llvm::Function::eraseFromParent(v137);
      }
      v139 = llvm::Module::getFunction();
      if (v139)
      {
        v140 = (llvm::Function *)v139;
        v141 = *(_QWORD *)(v72 + 400);
        if (*(_QWORD *)(v141 + 960))
        {
          strlen(*(const char **)(v141 + 960));
          llvm::Module::getOrInsertFunction();
          llvm::Value::replaceAllUsesWith();
        }
        else
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v139 + 8) + 24) + 16) <= 0x1Bu)
            v142 = 0;
          else
            v142 = *(llvm::Instruction **)(*(_QWORD *)(v139 + 8) + 24);
          llvm::Instruction::eraseFromParent(v142);
        }
        llvm::Function::eraseFromParent(v140);
      }
      AGCLLVMObject::disableConstantHoisting((AGCLLVMObject *)v72);
      llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v218);
      if ((_QWORD)v216)
      {
        *((_QWORD *)&v216 + 1) = v216;
        operator delete((void *)v216);
      }
      if (SHIBYTE(v215) < 0)
        operator delete(*((void **)&v214 + 1));
      if (SBYTE7(v214) < 0)
        operator delete((void *)v213);
      if (SBYTE7(v211) < 0)
        operator delete((void *)v210);
      goto LABEL_312;
    case 40:
      if ((v106 & 1) == 0
      {
        pluginCreateLLVMObject(AGCLLVMCtx &,_AGCStreamToken,llvm::LLVMContext &,llvm::Module *,CompilationState &)::computeCS = 0;
        *(_QWORD *)algn_1EF8E8248 = 0;
        qword_1EF8E8250 = 0;
      }
      v83 = (uint64_t)AGCLLVMDriverTGSizeOptimizationShader::create(v70, (uint64_t)v178);
      goto LABEL_181;
    case 41:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 160);
      goto LABEL_247;
    case 42:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 168);
      goto LABEL_247;
    case 43:
      v83 = (uint64_t)AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::create(v70, (uint64_t)v178, v171);
      goto LABEL_181;
    case 44:
      v83 = (uint64_t)AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::create(v70, (uint64_t)v178, v171);
      goto LABEL_181;
    case 45:
      v83 = AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 46:
      v83 = (uint64_t)AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::create(v70, (uint64_t)v178, v171);
      goto LABEL_181;
    case 47:
      v83 = (uint64_t)AGCLLVMDriverVDMNOPDBGShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 48:
      v83 = AGCLLVMDriverTessellationClearInstanceCountsShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 49:
      v107 = (AGCLLVMUtilityProgram *)operator new();
      AGCLLVMUtilityProgram::AGCLLVMUtilityProgram(v107, v70, (llvm::LLVMContext *)v178);
      goto LABEL_232;
    case 50:
      v108 = (uint64_t *)operator new();
      FragmentShader = AGCLLVMDummyFeedbackFragmentShader::AGCLLVMDummyFeedbackFragmentShader(v108, v70, (llvm::LLVMContext *)v178);
      goto LABEL_232;
    case 52:
      v109 = operator new();
      FragmentShader = (_QWORD *)AGCLLVMDriverIntersectionShader::AGCLLVMDriverIntersectionShader(v109, v70, (llvm::LLVMContext *)v178, v158);
LABEL_232:
      v72 = (uint64_t)FragmentShader + *(_QWORD *)(*FragmentShader - 24);
      goto LABEL_312;
    case 54:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 184);
      goto LABEL_247;
    case 55:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 192);
      goto LABEL_247;
    case 56:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 200);
      goto LABEL_247;
    case 90:
      v83 = (uint64_t)AGCLLVMDriverGPUGatherVertexShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 91:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 128);
      goto LABEL_247;
    case 92:
      v83 = (uint64_t)AGCLLVMDriverPDSPatchUpVertexShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 93:
      v79 = *(uint64_t (**)(void))(**((_QWORD **)v70 + 4) + 136);
      goto LABEL_247;
    case 94:
      v83 = (uint64_t)AGCLLVMDriverVRRPatchVertexShader::create(v70, (AGCLLVMCtx *)v178, v71);
      goto LABEL_181;
    case 95:
      v83 = (uint64_t)AGCLLVMDriverFastClearVertexShaders::create(v70, (uint64_t)v178, *v167);
LABEL_181:
      v72 = v83;
LABEL_312:
      if (((**(uint64_t (***)(uint64_t))v72)(v72) & 1) != 0)
      {
        *((_QWORD *)&v210 + 1) = 0;
        v68 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *, __int128 *))(*(_QWORD *)v72 + 8))(v72, v57, v57 + 1, v57 + 4, &v209);
        v145 = (__int128 *)*((_QWORD *)&v210 + 1);
        if (*((__int128 **)&v210 + 1) == &v209)
        {
          v146 = 4;
          v145 = &v209;
        }
        else
        {
          if (!*((_QWORD *)&v210 + 1))
            goto LABEL_325;
          v146 = 5;
        }
        (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v145 + 8 * v146))(v145, v143, v144);
        goto LABEL_325;
      }
      v147 = (const char *)(v72 + 8);
      if ((*(char *)(v72 + 31) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v72 + 31))
          goto LABEL_324;
LABEL_323:
        v68 = 0;
        v57[2] = strdup(v147);
        goto LABEL_325;
      }
      if (*(_QWORD *)(v72 + 16))
      {
        v147 = *(const char **)v147;
        goto LABEL_323;
      }
LABEL_324:
      v68 = 0;
LABEL_325:
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
LABEL_326:
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v178);
      *a8 = *v57;
      *a9 = v57[1];
      return v68;
    default:
      goto LABEL_326;
  }
}

uint64_t `virtual thunk to'AGCLLVMUserObject::compile(AGCLLVMUserObject *this)
{
  return AGCLLVMUserObject::compile((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

BOOL flatbuffers::Verifier::VerifyVectorOrString(flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 < 5 || v5 - 4 < v4)
    return 0;
  v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7)
    return 0;
  v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    v5 = *((_QWORD *)this + 1);
  }
  v9 = v5 > v8;
  v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL flatbuffers::Table::VerifyOffset(flatbuffers::Table *this, const flatbuffers::Verifier *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;

  v2 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v2 < 5u
      || (v3 = v2[2]) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v3 - *(_QWORD *)a2) != 0;
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  if ((a2 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (v2 < 5 || v2 - 4 < a2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)this + a2);
  if ((int)v4 < 1)
    return 0;
  if (v2 - 1 >= v4 + a2)
    return v4;
  return 0;
}

uint64_t AGCLLVMObject::composeCompilerReply(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  flatbuffers::FlatBufferBuilder *v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *Value;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  unsigned int v70;
  _QWORD v71[3];
  _QWORD *v72;
  int v73[6];
  int *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a4 + 24) = *(_QWORD *)(a1 + 448);
  v9 = (flatbuffers::FlatBufferBuilder *)(a1 + 2664);
  v10 = *(char **)(a1 + 424);
  v11 = *(_BYTE **)(a1 + 432);
  *(_BYTE *)(a1 + 2734) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(a1 + 2664), v11 - v10, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(v9, v11 - v10, 4uLL);
  v12 = v11 - v10;
  if (v11 == v10)
    v13 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>> const&)::t;
  else
    v13 = v10;
  if (v11 != v10)
  {
    v14 = v12 >> 2;
    v15 = v13 - 4;
    do
    {
      v16 = v14 - 1;
      v17 = *(_DWORD *)&v15[4 * v14];
      flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v9, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v17 + 4);
      v14 = v16;
    }
    while (v16);
  }
  *(_BYTE *)(a1 + 2734) = 0;
  v18 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v9, (unint64_t)v12 >> 2);
  v73[0] = 0;
  if (*(_QWORD *)(a1 + 496))
  {
    v19 = a1 + 496;
    if (!*(_QWORD *)(a1 + 504))
      v19 = a1 + 1056;
  }
  else
  {
    v19 = a1 + 1056;
  }
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, int *))(**(_QWORD **)(a1 + 400) + 512))(*(_QWORD *)(a1 + 400), *(_QWORD *)v19, *(unsigned int *)(v19 + 8), v73);
  *(_BYTE *)(a1 + 2734) = 1;
  v21 = *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v9, 4, v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v9, 6, v73[0]);
  v22 = flatbuffers::FlatBufferBuilder::EndTable(v9, v21);
  *(_BYTE *)(a1 + 2734) = 1;
  v23 = *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704);
  if (v18)
  {
    flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v9, 8, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v18 + 4);
  }
  if (v22)
  {
    flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v9, 6, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v22 + 4);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v9, 4, *(_QWORD *)(a1 + 416), 0);
  v24 = flatbuffers::FlatBufferBuilder::EndTable(v9, v23);
  flatbuffers::FlatBufferBuilder::Finish(v9, v24, v25);
  v26 = *(_QWORD *)(a1 + 464);
  v27 = v26 + 304;
  if (*(char *)(v26 + 327) < 0)
    v27 = *(_QWORD *)(v26 + 304);
  *(_QWORD *)(a1 + 1456) = v27;
  v28 = *(unsigned __int8 *)(v26 + 327);
  v29 = *(_QWORD *)(v26 + 312);
  if ((v28 & 0x80u) == 0)
    v29 = v28;
  *(_QWORD *)(a1 + 1464) = v29;
  v30 = *(_QWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 1496) = v30;
  *(_QWORD *)(a1 + 1504) = (*(_DWORD *)(a1 + 2504) - v30 + *(_DWORD *)(a1 + 2512));
  v31 = *(_QWORD *)(a1 + 2616);
  v32 = (*(_DWORD *)(a1 + 2600) - v31 + *(_DWORD *)(a1 + 2608));
  *(_QWORD *)(a1 + 1544) = v32;
  if ((_DWORD)v32)
    *(_QWORD *)(a1 + 1536) = v31;
  v33 = *(_QWORD *)(a1 + 2712);
  v34 = (*(_DWORD *)(a1 + 2696) - v33 + *(_DWORD *)(a1 + 2704));
  *(_QWORD *)(a1 + 1584) = v34;
  if ((_DWORD)v34)
    *(_QWORD *)(a1 + 1576) = v33;
  v35 = 0;
  v36 = (*(_DWORD *)(a1 + 480) + 7) & 0xFFFFFFF8;
  *(_QWORD *)v73 = &off_1E7EC07D8;
  v74 = v73;
  v37 = v36;
  do
  {
    v69 = *(_QWORD *)(a1 + v35 + 896);
    if (v69)
    {
      LODWORD(v71[0]) = v37;
      if (!v74)
        goto LABEL_64;
      (*(void (**)(int *, uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v74 + 48))(v74, a1 + v35 + 1456, &v69, v71);
      v37 += *(_DWORD *)(v69 + 40);
    }
    v35 += 40;
  }
  while (v35 != 160);
  v38 = v74;
  if (v74 == v73)
  {
    v39 = 4;
    v38 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_34;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_34:
  if (v37 != v36)
  {
    v42 = *(_QWORD *)(a1 + 488);
    v43 = *(_QWORD *)(v42 + 32) + v37 - v36;
    *(_QWORD *)(v42 + 32) = v43;
    *(_QWORD *)(v42 + 48) = v43;
    v41 = v37;
    v40 = malloc_type_calloc(1uLL, v37, 0x8D1C5FA6uLL);
    memcpy(v40, *(const void **)(a1 + 472), *(_QWORD *)(a1 + 480));
    v44 = 0;
    v71[0] = &off_1E7EC0820;
    v71[1] = v40;
    v72 = v71;
    do
    {
      v69 = *(_QWORD *)(a1 + v44 + 896);
      if (v69)
      {
        v70 = v37;
        if (!v72)
          goto LABEL_64;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, unsigned int *))(*v72 + 48))(v72, a1 + v44 + 1456, &v69, &v70);
        v37 += *(_DWORD *)(v69 + 40);
      }
      v44 += 40;
    }
    while (v44 != 160);
    v45 = v72;
    if (v72 == v71)
    {
      v46 = 4;
      v45 = v71;
    }
    else
    {
      if (!v72)
      {
LABEL_46:
        *a2 = (uint64_t)v40;
        goto LABEL_47;
      }
      v46 = 5;
    }
    (*(void (**)(void))(*v45 + 8 * v46))();
    goto LABEL_46;
  }
  v40 = *(void **)(a1 + 472);
  *a2 = (uint64_t)v40;
  v41 = *(_QWORD *)(a1 + 480);
LABEL_47:
  *a3 = v41;
  if (v40)
    v47 = v41 == 0;
  else
    v47 = 1;
  v48 = !v47;
  if (!v47)
  {
    v49 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (dumpShaderToFile(v49))
    {
      if (MGGetBoolAnswer())
      {
        Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DUMP_MACHO", v50);
        if (Value)
        {
          if (*Value != 48 && atoi(Value))
          {
            v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
            printMessage((char **)&AGCPrinter, "------ Start dump mach-O for %s shader %u ------\n", v53, v54, v55, v56, v57, v58, v52);
            printHexDump((char **)&AGCPrinter, *a2, *a3, 0x20u, (const char *)&unk_1C3E4D9BB, 0);
            v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
            printMessage((char **)&AGCPrinter, "\n\n------ End dump mach-O for %s shader %u ------\n", v60, v61, v62, v63, v64, v65, v59);
          }
        }
      }
    }
    if (*(_QWORD *)(a5 + 24))
    {
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v67 = *(_QWORD *)(a5 + 24);
      if (!v67)
LABEL_64:
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 48))(v67, v66);
    }
  }
  return v48;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4;

  v4 = *a3;
  *(_DWORD *)(v4 + 48) = *a4;
  *(_QWORD *)(v4 + 40) = (*(_QWORD *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
}

void *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return memcpy((void *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(*(_QWORD *)a3 + 48)), *(const void **)a2, *(_QWORD *)(a2 + 8));
}

uint64_t AGCLLVMGen3TargetLowerer::countInstructions(AGCLLVMGen3TargetLowerer *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *(int *)a2;
  v7 = *((_DWORD *)this + 5);
  v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

AGCLLVMCtx *AGCLLVMCtx::createGraphicsPasses(AGCLLVMCtx *this)
{
  AGCLLVMCtx *v1;
  uint64_t i;
  llvm::legacy::PassManager *PassManager;
  llvm::Pass *AlwaysInlinerLegacyPass;
  llvm *v5;
  llvm::legacy::PassManager *v6;
  llvm::Pass *GlobalOptimizerPass;
  llvm *v8;
  llvm::legacy::PassManager *v9;
  llvm::Pass *GlobalDCEPass;
  llvm *v11;
  llvm::Pass *DeadCodeEliminationPass;

  if (!*((_QWORD *)this + 44))
  {
    v1 = this;
    for (i = 328; i != 352; i += 8)
    {
      PassManager = AGCLLVMCtx::createPassManager(v1);
      *(_QWORD *)((char *)v1 + i) = PassManager;
      AlwaysInlinerLegacyPass = (llvm::Pass *)llvm::createAlwaysInlinerLegacyPass(0);
      v5 = (llvm *)AGCLLVMCtx::addPass(v1, PassManager, AlwaysInlinerLegacyPass);
    }
    v6 = (llvm::legacy::PassManager *)*((_QWORD *)v1 + 42);
    GlobalOptimizerPass = (llvm::Pass *)llvm::createGlobalOptimizerPass(v5);
    v8 = (llvm *)AGCLLVMCtx::addPass(v1, v6, GlobalOptimizerPass);
    v9 = (llvm::legacy::PassManager *)*((_QWORD *)v1 + 43);
    GlobalDCEPass = (llvm::Pass *)llvm::createGlobalDCEPass(v8);
    AGCLLVMCtx::addPass(v1, v9, GlobalDCEPass);
    v11 = AGCLLVMCtx::createPassManager(v1);
    *((_QWORD *)v1 + 44) = v11;
    DeadCodeEliminationPass = (llvm::Pass *)llvm::createDeadCodeEliminationPass(v11);
    return (AGCLLVMCtx *)AGCLLVMCtx::addPass(v1, v11, DeadCodeEliminationPass);
  }
  return this;
}

void *AGCGetReplacementIR(llvm::Module *this, llvm::LLVMContext *a2)
{
  void *v3;
  uint64_t v4;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  char *String;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  __int128 *v15;
  size_t v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char *v23;
  size_t v24;
  unsigned int v25;
  void **v26;
  std::string::size_type v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  void *v32;
  std::string::size_type v33;
  uint64_t v34;
  std::string __dst;
  std::string v36;
  std::string v37;
  std::string v38;
  void *v39[2];
  std::string::size_type v40;
  void *__p[2];
  char v42;
  void *v43[2];
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52[2];
  _QWORD v53[22];

  v53[21] = *MEMORY[0x1E0C80C00];
  v3 = 0;
  {
    {
      v43[0] = "air.requestHash";
      LOWORD(v45) = 259;
      NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v43);
      if (NamedMetadata)
      {
        Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
        String = (char *)llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
        std::string::basic_string[abi:nn180100]<0>(__p, String);
        v10 = *(_QWORD **)(v4 + 8);
        v8 = v4 + 8;
        v9 = v10;
        if (!v10)
          goto LABEL_14;
        v11 = (_QWORD *)v8;
        do
        {
          v12 = std::less<std::string>::operator()[abi:nn180100](v9 + 4, __p);
          v13 = v9 + 1;
          if (!v12)
          {
            v13 = v9;
            v11 = v9;
          }
          v9 = (_QWORD *)*v13;
        }
        while (*v13);
        if (v11 == (_QWORD *)v8 || std::less<std::string>::operator()[abi:nn180100](__p, v11 + 4))
        {
LABEL_14:
          v3 = 0;
        }
        else
        {
          v46 = 0;
          v44 = 0u;
          v45 = 0u;
          *(_OWORD *)v43 = 0u;
          v47 = 0u;
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v51 = 0;
          v52[0] = (char *)v53;
          v52[1] = (char *)0x400000000;
          llvm::parseAssemblyString();
          v3 = v39[0];
          if (!v39[0])
          {
            if ((SBYTE7(v48) & 0x80u) == 0)
              v15 = &v47;
            else
              v15 = (__int128 *)v47;
            if (v15)
            {
              if ((SBYTE7(v48) & 0x80u) == 0)
                v16 = BYTE7(v48);
              else
                v16 = *((_QWORD *)&v47 + 1);
              std::string::basic_string[abi:nn180100](&__dst, v15, v16);
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
            }
            v17 = std::string::insert(&__dst, 0, "AssemblerError: error message is: ");
            v18 = v17->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
            v36.__r_.__value_.__r.__words[2] = v18;
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v17->__r_.__value_.__r.__words[0] = 0;
            v19 = std::string::append(&v36, "\n");
            v20 = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            v21 = std::string::append(&v37, "AssemblerError: line content is: ");
            v22 = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__r.__words[2] = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (v49 >= 0)
              v23 = (char *)&v48 + 8;
            else
              v23 = (char *)*((_QWORD *)&v48 + 1);
            if (v23)
            {
              if (v49 >= 0)
                v24 = HIBYTE(v49);
              else
                v24 = v49;
              std::string::basic_string[abi:nn180100](&v32, v23, v24);
              v25 = HIBYTE(v34);
              v26 = (void **)v32;
              v27 = v33;
            }
            else
            {
              v27 = 0;
              v26 = 0;
              v25 = 0;
              v32 = 0;
              v33 = 0;
              v34 = 0;
            }
            if ((v25 & 0x80u) == 0)
              v28 = &v32;
            else
              v28 = v26;
            if ((v25 & 0x80u) == 0)
              v29 = v25;
            else
              v29 = v27;
            v30 = std::string::append(&v38, (const std::string::value_type *)v28, v29);
            v31 = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)v39 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            v40 = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v34) < 0)
              operator delete(v32);
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v38.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v36.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v40) < 0)
              operator delete(v39[0]);
          }
          llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v52);
          if ((_QWORD)v50)
          {
            *((_QWORD *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          if (SHIBYTE(v49) < 0)
            operator delete(*((void **)&v48 + 1));
          if (SBYTE7(v48) < 0)
            operator delete((void *)v47);
          if (SBYTE7(v45) < 0)
            operator delete((void *)v44);
        }
        if (v42 < 0)
          operator delete(__p[0]);
        return v3;
      }
      std::string::basic_string[abi:nn180100]<0>(v43, "Unable to find air.requestHash metadata");
      if (SBYTE7(v44) < 0)
        operator delete(v43[0]);
    }
    return 0;
  }
  return v3;
}

void `virtual thunk to'AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E660F0;
  v1[933] = &off_1E7E664A0;
  v1[937] = &off_1E7E66590;
  v1[540] = &off_1E7E663A0;
  v2 = (_QWORD *)v1[915];
  if (v2 != v1 + 917)
    free(v2);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E660F0;
  v1[933] = &off_1E7E664A0;
  v1[937] = &off_1E7E66590;
  v1[540] = &off_1E7E663A0;
  v2 = (_QWORD *)v1[915];
  if (v2 != v1 + 917)
    free(v2);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
}

uint64_t AGCLLVMGen6TargetConfig::createMetalFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8, _DWORD *a9)
{
  _QWORD *v16;
  _QWORD *v17;

  v16 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v16 + 933), a2, *a3);
  v17 = (_QWORD *)AGCLLVMAGPFragmentShaderGen3::AGCLLVMAGPFragmentShaderGen3((uint64_t)v16, (uint64_t *)off_1E7E62128, (llvm::Module *)a3, a4, a5, a6, a7, a8, a9);
  v16[915] = v16 + 917;
  v16[916] = 0x800000000;
  *v16 = &off_1E7E61C70;
  v16[933] = &unk_1E7E62020;
  v16[937] = &unk_1E7E62110;
  v16[540] = &unk_1E7E61F20;
  return newObjectArrayWithIntersectionShadersIfNeeded<_AGCFragmentContextStateAGP>(v17, (uint64_t)a2, (llvm::Module *)a3, *(_QWORD *)(a4 + 16));
}

void AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  llvm *v11;
  llvm::ValueHandleBase *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[21];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[22];
  *((_QWORD *)this + 540) = a2[23];
  v5 = *((_QWORD *)this + 914);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7296));
  v6 = *((_QWORD *)this + 911);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7272));
  v7 = *((_QWORD *)this + 906);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7232));
  v8 = (char *)*((_QWORD *)this + 881);
  if (v8 != (char *)this + 7064)
    free(v8);
  v9 = (char *)*((_QWORD *)this + 875);
  if (v9 != (char *)this + 7016)
    free(v9);
  v10 = *((unsigned int *)this + 1748);
  v11 = (llvm *)*((_QWORD *)this + 872);
  if ((_DWORD)v10)
  {
    v12 = (llvm *)((char *)v11 + 16);
    v13 = 40 * v10;
    do
    {
      if (*((_DWORD *)v12 - 4) <= 0xFFFFFFFD)
      {
        v14 = *((_QWORD *)v12 + 2);
        if (v14 != -8192 && v14 != -4096 && v14 != 0)
          llvm::ValueHandleBase::RemoveFromUseList(v12);
      }
      v12 = (llvm::ValueHandleBase *)((char *)v12 + 40);
      v13 -= 40;
    }
    while (v13);
    v11 = (llvm *)*((_QWORD *)this + 872);
    v16 = 40 * *((unsigned int *)this + 1748);
  }
  else
  {
    v16 = 0;
  }
  llvm::deallocate_buffer(v11, (void *)v16);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 870));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 867));
  AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(this, a2 + 1);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::AGCLLVMAGPFragmentShaderGen3(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8, _DWORD *a9)
{
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v12 = (_BYTE *)(a1 + 5845);
  v13 = AGCLLVMAGPFragmentShader::AGCLLVMAGPFragmentShader(a1, a2 + 1, a3, a4, a5, a6, a7);
  v14 = *a2;
  *(_QWORD *)v13 = *a2;
  *(_QWORD *)(v13 + *(_QWORD *)(v14 - 24)) = a2[21];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 - 24) + v13 + 32) = a2[22];
  *(_QWORD *)(v13 + 4320) = a2[23];
  *(_OWORD *)(v13 + 6936) = 0u;
  *(_QWORD *)(v13 + 6928) = v13 + 6936;
  *(_OWORD *)(v13 + 6960) = 0u;
  *(_QWORD *)(v13 + 6952) = v13 + 6960;
  *(_OWORD *)(v13 + 6976) = 0u;
  *(_DWORD *)(v13 + 6992) = 0;
  *(_QWORD *)(v13 + 7000) = v13 + 7016;
  *(_QWORD *)(v13 + 7008) = 0x800000000;
  *(_QWORD *)(v13 + 7048) = v13 + 7064;
  *(_QWORD *)(v13 + 7056) = 0x800000000;
  *(_OWORD *)(v13 + 7096) = 0u;
  *(_OWORD *)(v13 + 7112) = 0u;
  *(_OWORD *)(v13 + 7128) = 0u;
  *(_OWORD *)(v13 + 7144) = 0u;
  *(_OWORD *)(v13 + 7160) = 0u;
  *(_OWORD *)(v13 + 7176) = 0u;
  *(_OWORD *)(v13 + 7192) = 0u;
  *(_OWORD *)(v13 + 7208) = 0u;
  *(_BYTE *)(v13 + 7224) = 0;
  *(_QWORD *)(v13 + 7232) = 4;
  *(_QWORD *)(v13 + 7248) = 0;
  *(_QWORD *)(v13 + 7240) = 0;
  *(_DWORD *)(v13 + 7256) = a8;
  v15 = a8 == 3;
  v12[1415] = v15;
  *(_DWORD *)(v13 + 7264) = 0;
  *(_QWORD *)(v13 + 7272) = 4;
  *(_QWORD *)(v13 + 7280) = 0;
  *(_QWORD *)(v13 + 7288) = 0;
  *(_QWORD *)(v13 + 7296) = 4;
  *(_QWORD *)(v13 + 7312) = 0;
  *(_QWORD *)(v13 + 7304) = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 - 24) + v13 + 400) + 1749))
  {
    v16 = *(_OWORD **)(a1 + 904);
    v17 = *(_QWORD *)(a1 + 912);
    if ((unint64_t)v16 >= v17)
    {
      v19 = *(_QWORD *)(a1 + 896);
      v20 = ((uint64_t)v16 - v19) >> 4;
      if ((unint64_t)(v20 + 1) >> 60)
        goto LABEL_48;
      v21 = v17 - v19;
      v22 = v21 >> 3;
      if (v21 >> 3 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v23);
      else
        v24 = 0;
      v25 = (_OWORD *)(v23 + 16 * v20);
      v26 = v23 + 16 * v24;
      *v25 = xmmword_1C3E37BE0;
      v18 = v25 + 1;
      v27 = *(char **)(a1 + 904);
      v28 = *(char **)(a1 + 896);
      if (v27 != v28)
      {
        do
        {
          *--v25 = *((_OWORD *)v27 - 1);
          v27 -= 16;
        }
        while (v27 != v28);
        v27 = *(char **)(a1 + 896);
      }
      *(_QWORD *)(a1 + 896) = v25;
      *(_QWORD *)(a1 + 904) = v18;
      *(_QWORD *)(a1 + 912) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v16 = xmmword_1C3E37BE0;
      v18 = v16 + 1;
    }
    *(_QWORD *)(a1 + 904) = v18;
    v29 = *(char **)(a1 + 928);
    v30 = *(_QWORD *)(a1 + 936);
    if ((unint64_t)v29 < v30)
    {
      *(_OWORD *)v29 = xmmword_1C3E37BE0;
      v31 = v29 + 16;
LABEL_33:
      *(_QWORD *)(a1 + 928) = v31;
      v15 = v12[1415];
      goto LABEL_34;
    }
    v32 = *(char **)(a1 + 920);
    v33 = (v29 - v32) >> 4;
    v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 60))
    {
      v35 = v30 - (_QWORD)v32;
      if (v35 >> 3 > v34)
        v34 = v35 >> 3;
      v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0;
      v37 = 0xFFFFFFFFFFFFFFFLL;
      if (!v36)
        v37 = v34;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v37);
        v29 = *(char **)(a1 + 928);
        v32 = *(char **)(a1 + 920);
      }
      else
      {
        v38 = 0;
      }
      v39 = (_OWORD *)(v37 + 16 * v33);
      v40 = v37 + 16 * v38;
      *v39 = xmmword_1C3E37BE0;
      v31 = v39 + 1;
      if (v29 != v32)
      {
        do
        {
          *--v39 = *((_OWORD *)v29 - 1);
          v29 -= 16;
        }
        while (v29 != v32);
        v32 = *(char **)(a1 + 920);
      }
      *(_QWORD *)(a1 + 920) = v39;
      *(_QWORD *)(a1 + 928) = v31;
      *(_QWORD *)(a1 + 936) = v40;
      if (v32)
        operator delete(v32);
      goto LABEL_33;
    }
LABEL_48:
    abort();
  }
LABEL_34:
  if (v15)
    *(_DWORD *)(a1 + 7264) = *a9;
  if (*v12)
  {
    v12[17] = 1;
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 5848) + 8);
    if (v41)
    {
      do
      {
        v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 40) + 40);
        v43 = v42 - 24;
        if (v42)
          v44 = v42 - 24;
        else
          v44 = 0;
        if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
          v45 = 0;
        else
          v45 = v43;
        v46 = *(unsigned __int8 *)(v45 + 16);
        if (v46 == 35)
          break;
        v41 = *(_QWORD *)(v41 + 8);
      }
      while (v41);
      v12[17] = v46 != 35;
    }
  }
  return a1;
}

void AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(AGCLLVMUserFragmentShader *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t j;
  uint64_t v22;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[14];
  *((_QWORD *)this + 540) = a2[15];
  v5 = *((_QWORD *)this + 723);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5768));
  v6 = *((_QWORD *)this + 720);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5744));
  v7 = *((_QWORD *)this + 717);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5720));
  v8 = *((_QWORD *)this + 714);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5696));
  v9 = *((_QWORD *)this + 711);
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5672));
  v10 = *((_QWORD *)this + 708);
  if (v10 != -8192 && v10 != -4096 && v10)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5648));
  v11 = *((_QWORD *)this + 705);
  if (v11 != -8192 && v11 != -4096 && v11)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5624));
  v12 = *((_QWORD *)this + 702);
  if (v12 != -8192 && v12 != -4096 && v12)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5600));
  v13 = *((_QWORD *)this + 698);
  if (v13 != -8192 && v13 != -4096 && v13)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5568));
  v14 = *((_QWORD *)this + 695);
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5544));
  v15 = *((_QWORD *)this + 692);
  if (v15 != -8192 && v15 != -4096 && v15)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5520));
  v16 = *((_QWORD *)this + 689);
  if (v16 != -8192 && v16 != -4096 && v16)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5496));
  v17 = *((_QWORD *)this + 686);
  if (v17 != -8192 && v17 != -4096 && v17)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5472));
  for (i = 0; i != -256; i -= 32)
  {
    v19 = *(_QWORD *)((char *)this + i + 5456);
    if (v19 != -8192 && v19 != -4096 && v19 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + i + 5440));
  }
  for (j = 0; j != -256; j -= 32)
  {
    v22 = *(_QWORD *)((char *)this + j + 5200);
    if (v22 != -8192 && v22 != -4096 && v22 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + j + 5184));
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 1);
}

void AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t i;
  char *v9;
  uint64_t j;
  uint64_t v11;

  v4 = 0;
  v5 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[17];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[18];
  *((_QWORD *)this + 540) = a2[19];
  v6 = (char *)this + 6912;
  do
  {
    v7 = *(char **)((char *)this + v4 + 6896);
    if (&v6[v4] != v7)
      free(v7);
    v4 -= 32;
  }
  while (v4 != -160);
  for (i = 0; i != -160; i -= 32)
  {
    v9 = *(char **)((char *)this + i + 6736);
    if ((char *)this + i + 6752 != v9)
      free(v9);
  }
  for (j = 0; j != -120; j -= 24)
  {
    v11 = *(_QWORD *)((char *)this + j + 6600);
    if (v11 != -8192 && v11 != -4096 && v11 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShader *)((char *)this + j + 6584));
  }
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 739);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 5880);
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, a2 + 1);
}

uint64_t llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

llvm::Value *AGCLLVMFragmentShader::buildReadFramebuffer(AGCLLVMFragmentShader *this, unsigned int a2)
{
  char v4;
  llvm::Value *result;
  unsigned int v6[11];
  int v7;

  v4 = 4 * a2;
  v7 = (*((_QWORD *)this + 75) >> (4 * a2)) & 0xF;
  AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs((uint64_t)v6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, *((_QWORD *)this + 74), *((_QWORD *)this + 74) + 4 * a2);
  result = AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)this, v6, (uint64_t)this + 72 * a2 + 16, &v7, 0, 0);
  *((_QWORD *)this + 75) |= (v7 << v4);
  return result;
}

llvm::Value *AGCLLVMStatelessFragmentShader::buildReadFramebuffer(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, char a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t NextNonDebugInstruction;
  llvm::IRBuilderBase *v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  if ((a6 & 1) == 0)
    *a4 |= 0xFu;
  if (*(int *)(a1 + 8) <= 0)
    *(_DWORD *)(a1 + 8) = 1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v11 = *(_QWORD *)(v10 + 400);
  v33 = *(_OWORD *)(v10 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v10 + 40));
  v35 = *(_DWORD *)(v10 + 136);
  v12 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, _QWORD))(*(_QWORD *)v11 + 216))(v11, &v33, a2, *(_QWORD *)a3);
  if (v34)
    llvm::MetadataTracking::untrack();
  NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v12);
  v14 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
  if (NextNonDebugInstruction)
  {
    v15 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v12);
    llvm::IRBuilderBase::SetInsertPoint(v14, v15);
  }
  else
  {
    v16 = *((_QWORD *)v12 + 5);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 88) = v16;
    *((_QWORD *)v14 + 7) = v16 + 40;
  }
  v17 = AGCLLVMObject::buildOutputFormatConversion(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v12, *(_QWORD *)(a3 + 24), *(_DWORD *)(a3 + 36));
  v18 = (llvm::Value *)AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle(a1, v17, 0, a2[3]);
  if ((a5 & 1) == 0)
  {
    if (*(_BYTE *)(a3 + 60) && *(_BYTE *)(a3 + 40))
    {
      v19 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v20 = *(_QWORD *)(v19 + 400);
      if (*(_BYTE *)(v20 + 1731) && *(_BYTE *)(a3 + 64) == 0)
      {
        v22 = v19 + 32;
        v30 = *(_OWORD *)(v19 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
        v32 = *(_DWORD *)(v22 + 104);
        v18 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v20, (uint64_t)&v30, v18, a3 + 44, 1);
        if (v31)
          llvm::MetadataTracking::untrack();
      }
    }
    if (a2[3] == 6)
      v23 = 8;
    else
      v23 = ~(-1 << a2[1]);
    v18 = AGCLLVMBuilder::fillUnwrittenChannels((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v18, v23);
    if (*((_BYTE *)a2 + 16))
    {
      v24 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v25 = *(_QWORD *)(v24 + 400);
      v27 = *(_OWORD *)(v24 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
      v29 = *(_DWORD *)(v24 + 136);
      v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD))(*(_QWORD *)v25 + 592))(v25, &v27, v18, *a2);
      if (v28)
        llvm::MetadataTracking::untrack();
    }
  }
  return v18;
}

_QWORD *AGCLLVMFragmentShader::buildWriteFramebuffer(AGCLLVMFragmentShader *this, llvm::Type **a2, unsigned int a3, int a4, llvm::Value *a5)
{
  char v9;
  _QWORD *result;
  unsigned int v11[10];
  int v12;
  int v13;

  v9 = 4 * a3;
  v12 = (*((_QWORD *)this + 75) >> (4 * a3)) & 0xF;
  v13 = a4;
  AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs((uint64_t)v11, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, *((_QWORD *)this + 74), *((_QWORD *)this + 74) + 4 * a3);
  result = AGCLLVMStatelessFragmentShader::buildWriteFramebuffer((uint64_t *)this, v11, (_QWORD *)this + 9 * a3 + 2, a2, &v13, &v12, a5);
  *((_QWORD *)this + 76) |= (v13 << v9);
  *((_QWORD *)this + 75) |= (v12 << v9);
  return result;
}

uint64_t AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = *(_DWORD *)a4 & 0x1F;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a4 >> 5;
  *(_DWORD *)(a1 + 8) = (unsigned __int16)*(_DWORD *)(a3 + 32) >> 12;
  *(_DWORD *)(a1 + 12) = (*(_DWORD *)a4 >> 9) & 7;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a4 + 1) & 1;
  *(_BYTE *)(a1 + 17) = (*(_DWORD *)(a3 + 32) & 0x2000000) == 0;
  *(_QWORD *)(a1 + 24) = llvm::ConstantInt::get();
  *(_QWORD *)(a1 + 32) = llvm::ConstantInt::get();
  return a1;
}

_QWORD *AGCLLVMStatelessFragmentShader::buildWriteFramebuffer(uint64_t *a1, unsigned int *a2, _QWORD *a3, llvm::Type **a4, int *a5, _DWORD *a6, llvm::Value *a7)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  unsigned int v28;
  llvm::Type **Select;
  uint64_t i;
  char *v31;
  llvm::IRBuilderBase *v32;
  AGCLLVMBuilder *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *result;
  uint64_t v46;
  int v47;
  unsigned int v48;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v12 = a2[1];
  v13 = (-1 << v12) & 0xF;
  v14 = *a1;
  v15 = *(unsigned int *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 868);
  LOBYTE(v16) = 4;
  switch(*a2)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      LODWORD(v16) = (v15 + v12 - 1) & -(int)v15;
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      v16 = (((2 * v12) + v15 - 1) & (unint64_t)-v15) >> 1;
      break;
    case 0xAu:
    case 0xBu:
    case 0x11u:
      v16 = (((4 * v12) + v15 - 1) & (unint64_t)-v15) >> 2;
      break;
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
      break;
    default:
      LOBYTE(v16) = 0;
      break;
  }
  v17 = ~(-1 << v16);
  if (a2[3] == 6)
    v18 = *a5 >> 3;
  else
    v18 = *a5;
  if ((v18 & (1 << (v12 - 1))) == 0)
    v13 = 0;
  v19 = (v18 | v13) & ~(-1 << v16);
  *a5 = v19;
  v20 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 24) + 400);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 568))(v20);
  if (*((_BYTE *)a2 + 16))
  {
    v47 = v17;
    v48 = v19;
    v24 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v25 = *((_QWORD *)v24 + 50);
    v60 = *(_OWORD *)(v24 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
    v62 = *((_DWORD *)v24 + 34);
    v26 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type **, _QWORD, uint64_t))(*(_QWORD *)v25 + 600))(v25, &v60, a4, *a2, (uint64_t)a3 + 44);
    if (v61)
      llvm::MetadataTracking::untrack();
    v19 = v48;
    a4 = (llvm::Type **)v26;
    v17 = v47;
  }
  v27 = AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a4, (llvm::Type *)a3[3], *((unsigned __int8 *)a3 + 42), *((unsigned __int8 *)a3 + 41), *((unsigned int *)a3 + 17), v21, v22);
  if (a2[3] == 6)
    v28 = 8;
  else
    v28 = ~(-1 << v12);
  Select = (llvm::Type **)AGCLLVMBuilder::fillUnwrittenChannels((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), (llvm::Value *)v27, v28);
  if ((v17 & ~v23) != 0)
  {
    *(_QWORD *)&v63 = llvm::ConstantInt::get();
    *((_QWORD *)&v63 + 1) = llvm::ConstantInt::get();
    *(_QWORD *)&v64 = llvm::ConstantInt::get();
    *((_QWORD *)&v64 + 1) = llvm::ConstantInt::get();
    llvm::ConstantVector::get();
    AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)a1, a2, (uint64_t)a3, a6, 1, 1);
    v59 = 257;
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v19 = 15;
  }
  if (a7)
  {
    if (v12 <= 3)
    {
      v63 = 0u;
      v64 = 0u;
      if ((_DWORD)v12)
      {
        for (i = 0; i != v12; ++i)
          *((_QWORD *)&v63 + i) = llvm::ConstantInt::get();
      }
      do
        *((_QWORD *)&v63 + v12++) = llvm::ConstantInt::get();
      while ((_DWORD)v12 != 4);
      v31 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v32 = (llvm::IRBuilderBase *)(v31 + 40);
      v33 = (AGCLLVMBuilder *)(v31 + 32);
      v34 = (llvm::Value *)llvm::ConstantInt::get();
      v35 = AGCLLVMBuilder::splat(v33, 4, v34);
      v36 = (llvm::Value *)llvm::ConstantVector::get();
      v59 = 257;
      llvm::IRBuilderBase::CreateShuffleVector(v32, a7, v35, v36, (const llvm::Twine *)&v56);
      v19 = v19;
    }
    AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)a1, a2, (uint64_t)a3, a6, 1, 0);
    AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(_QWORD *)(*a1 - 24), Select, (llvm::Type *)a3[3], *((unsigned __int8 *)a3 + 42), *((unsigned __int8 *)a3 + 41), *((unsigned int *)a3 + 17), v37, v38);
    v59 = 257;
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  }
  v39 = AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle((uint64_t)a1, (uint64_t)Select, v19, a2[3]);
  v41 = v40;
  v42 = AGCLLVMObject::buildOutputFormatConversion((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v39, *a3, *((_DWORD *)a3 + 8));
  v43 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v44 = *((_QWORD *)v43 + 50);
  v53 = *(_OWORD *)(v43 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v43 + 40));
  v55 = *((_DWORD *)v43 + 34);
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, __int128 *, unsigned int *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v44 + 208))(&v56, v44, &v53, a2, *a3, v42, v41, *((unsigned int *)a3 + 17));
  if (v54)
    result = (_QWORD *)llvm::MetadataTracking::untrack();
  if ((_QWORD)v56)
  {
    v46 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32;
    v50 = v56;
    v51 = v57;
    if (v57)
      llvm::MetadataTracking::track();
    v52 = v58;
    result = (_QWORD *)AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v50, v46 + 8);
    if (v51)
      result = (_QWORD *)llvm::MetadataTracking::untrack();
  }
  if (v57)
    return (_QWORD *)llvm::MetadataTracking::untrack();
  return result;
}

llvm::CmpInst **AGCLLVMObject::buildConvertColor(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::CmpInst **v8;
  llvm::Type *v9;
  llvm::Value *InsertElement;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t Element;
  llvm::Value *v20;
  llvm::Value *v21;
  unsigned int ScalarSizeInBits;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v32;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Type *v35;
  unsigned int v36;
  uint64_t v39;
  llvm::Type *v40;
  char v42;
  int v43;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  _BYTE v51[32];
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v8 = a2;
  v9 = *a2;
  if (*a2 == a3)
    return v8;
  if (!(_DWORD)a5)
  {
    if ((*((_DWORD *)v9 + 2) & 0xFE) == 0x12)
      v14 = *(unsigned __int8 *)(**((_QWORD **)v9 + 2) + 8);
    else
      v14 = *((_DWORD *)v9 + 2);
    if (v14 != 13)
    {
      printMessage((char **)&AGCPrinter, "Warning (Undefined behavior): integer drawbuffer format, but shader is writing floating point", (uint64_t)a3, a4, a5, a6, a7, a8, v42);
      return (llvm::CmpInst **)llvm::UndefValue::get();
    }
    ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
    v23 = llvm::Type::getScalarSizeInBits(a3);
    if (ScalarSizeInBits <= v23)
    {
      v25 = a1 + 40;
      v52 = 257;
      if ((_DWORD)a4)
        v26 = 40;
      else
        v26 = 39;
      v24 = (uint64_t)v8;
    }
    else
    {
      v24 = AGCLLVMBuilder::clampToWidth((AGCLLVMBuilder *)(a1 + 32), v8, v23, a4);
      v25 = a1 + 40;
      v52 = 257;
      v26 = 38;
    }
    return (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(v25, v26, v24, (uint64_t)a3, (uint64_t)v51);
  }
  v43 = a6;
  if (v9 == *(llvm::Type **)(a1 + 328) || v9 == *(llvm::Type **)(a1 + 336))
  {
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    v15 = 0;
    if (v9 == *(llvm::Type **)(a1 + 328))
      v16 = 8;
    else
      v16 = 16;
    do
    {
      v17 = *(_QWORD *)(a1 + 400);
      v53 = *(_OWORD *)(a1 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 40));
      v55 = *(_DWORD *)(a1 + 136);
      v52 = 257;
      v18 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 40), (llvm::Value *)v8, v18, (const llvm::Twine *)v51);
      v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 96))(v17, &v53, Element, v16, a4, 32);
      if (v54)
        llvm::MetadataTracking::untrack();
      v52 = 257;
      v21 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v20, v21, (const llvm::Twine *)v51);
      ++v15;
    }
    while (v15 != 4);
  }
  else if (v9 == *(llvm::Type **)(a1 + 312))
  {
    v35 = *(llvm::Type **)(a1 + 320);
    v52 = 257;
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 40), (llvm::Value *)a2, v35, (const llvm::Twine *)v51);
  }
  else
  {
    InsertElement = (llvm::Value *)a2;
  }
  if (*(llvm::Type **)(a1 + 328) == a3)
  {
    v28 = 8;
    goto LABEL_28;
  }
  if (*(llvm::Type **)(a1 + 336) == a3)
  {
    v28 = 16;
LABEL_28:
    v8 = (llvm::CmpInst **)llvm::UndefValue::get();
    for (i = 0; i != 4; ++i)
    {
      v30 = *(_QWORD *)(a1 + 400);
      v48 = *(_OWORD *)(a1 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 40));
      v50 = *(_DWORD *)(a1 + 136);
      v52 = 257;
      v31 = (llvm::Value *)llvm::ConstantInt::get();
      v32 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v31, (const llvm::Twine *)v51);
      v33 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 88))(v30, &v48, v32, v28, a4, 1);
      if (v49)
        llvm::MetadataTracking::untrack();
      v52 = 257;
      v34 = (llvm::Value *)llvm::ConstantInt::get();
      v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 40), (llvm::Value *)v8, v33, v34, (const llvm::Twine *)v51);
    }
    return v8;
  }
  if (*(llvm::Type **)(a1 + 312) == a3)
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    if (v36 <= 0x1D && ((1 << v36) & 0x200002C1) != 0 && (v43 & 0xFFFFFFFE) == 2)
    {
      v39 = *(_QWORD *)(a1 + 400);
      v45 = *(_OWORD *)(a1 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 40));
      v47 = *(_DWORD *)(a1 + 136);
      InsertElement = (llvm::Value *)AGCLLVMTargetLowerer::buildRTZF16Value(v39, (uint64_t)&v45, (uint64_t *)InsertElement, v43 == 3);
      if (v46)
        llvm::MetadataTracking::untrack();
    }
    v40 = *(llvm::Type **)(a1 + 312);
    v52 = 257;
    return (llvm::CmpInst **)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v40, (const llvm::Twine *)v51);
  }
  return (llvm::CmpInst **)InsertElement;
}

uint64_t AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
    __asm { BR              X14 }
  return a2;
}

llvm::Value *AGCLLVMBuilder::fillUnwrittenChannels(AGCLLVMBuilder *this, llvm::Value *a2, unsigned int a3)
{
  llvm::Value *InsertElement;
  uint64_t v6;
  llvm::Constant *v7;
  uint64_t NullValue;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t i;
  llvm::Value *v13;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;

  InsertElement = a2;
  v6 = *(_QWORD *)a2;
  v7 = *(llvm::Constant **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = **(llvm::Constant ***)(v6 + 16);
  NullValue = llvm::Constant::getNullValue(v7, a2);
  if (*((_DWORD *)v7 + 2) > 6u)
    v9 = llvm::ConstantInt::get();
  else
    v9 = llvm::ConstantFP::get();
  v10 = (llvm::Value *)v9;
  v11 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      if (((a3 >> i) & 1) == 0)
      {
        if (i == 3)
          v13 = v10;
        else
          v13 = (llvm::Value *)NullValue;
        v17 = 257;
        v14 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v13, v14, (const llvm::Twine *)v16);
      }
    }
  }
  return InsertElement;
}

uint64_t AGCLLVMObject::buildOutputFormatConversion(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Cast;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _BYTE v22[32];
  __int16 v23;

  v4 = a2;
  if (a4 == 2)
  {
    v12 = *(_QWORD *)(a1 + 232);
    v23 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 40, 49, a2, v12, (uint64_t)v22);
    v14 = *(_QWORD *)(a1 + 400);
    v16 = *(_OWORD *)(a1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 40));
    v18 = *(_DWORD *)(a1 + 136);
    v4 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14
                                                                                                  + 112))(v14, &v16, 6, *(_QWORD *)(a1 + 224), Cast, 0, 0);
    if (v17)
      llvm::MetadataTracking::untrack();
  }
  else if (a4 == 1)
  {
    v7 = a1 + 40;
    v8 = *(_QWORD *)(a1 + 336);
    v23 = 257;
    v9 = llvm::IRBuilderBase::CreateCast(a1 + 40, 38, a2, v8, (uint64_t)v22);
    v10 = *(_QWORD *)(a1 + 400);
    v19 = *(_OWORD *)(a1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 40));
    v21 = *(_DWORD *)(a1 + 136);
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 104))(v10, &v19, 6, *(_QWORD *)(a1 + 224), v9, 0, 0);
    if (v20)
      llvm::MetadataTracking::untrack();
    v23 = 257;
    return llvm::IRBuilderBase::CreateCast(v7, 49, v11, a3, (uint64_t)v22);
  }
  return v4;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromState@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t Mul;
  __int16 v19;
  _BYTE v20[32];
  __int16 v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;
  int v25;

  if (a5)
  {
    v11 = result;
    if (*a3 - 20 >= 2)
    {
      v12 = a5;
      if (*a3 == 18)
        v12 = 3;
    }
    else
    {
      v12 = 7;
    }
    v23 = *(_OWORD *)a2;
    v24 = *(_QWORD *)(a2 + 16);
    if (v24)
      llvm::MetadataTracking::track();
    v25 = *(_DWORD *)(a2 + 24);
    AGCLLVMTargetLowerer::SetIP(v11, &v23);
    if (v24)
      llvm::MetadataTracking::untrack();
    v22[0] = 0;
    v22[1] = llvm::FixedVectorType::get();
    v13 = *a3;
    LOWORD(v22[0]) = AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*a3, *((unsigned __int8 *)a3 + 16));
    WORD1(v22[0]) = v13;
    WORD2(v22[0]) = v12;
    HIWORD(v22[0]) = a3[1];
    v14 = *((unsigned __int16 *)a3 + 4);
    v15 = *((_QWORD *)a3 + 3);
    v16 = (llvm::Value *)llvm::ConstantInt::get();
    v17 = (llvm::Value *)*((_QWORD *)a3 + 4);
    v21 = 257;
    Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(v11 + 8), v16, v17, (const llvm::Twine *)v20);
    HIBYTE(v19) = *((_BYTE *)a3 + 17);
    LOBYTE(v19) = a6 == 1;
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int16))(*(_QWORD *)v11 + 1608))(v11, v22, v14, v15, a4, Mul, 0, 0, 0, v19);
  }
  else
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 24) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 88))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMGen3TargetLowerer::emulatedColorMask(AGCLLVMGen3TargetLowerer *this, int a2, unsigned int a3)
{
  if ((a2 - 18) >= 4)
    return 15;
  else
    return a3;
}

uint64_t AGCLLVMGen3TargetLowerer::getUSCFormatFromState(AGCLLVMGen3TargetLowerer *this, int a2)
{
  int v2;
  uint64_t result;

  v2 = (_DWORD)this - 1;
  result = 5;
  switch(v2)
  {
    case 0:
      result = 10;
      break;
    case 1:
      return result;
    case 2:
      if (a2)
        result = 10;
      else
        result = 4;
      break;
    case 5:
      result = 7;
      break;
    case 6:
      result = 6;
      break;
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 21:
      result = 1;
      break;
    case 9:
    case 10:
    case 16:
      result = 2;
      break;
    case 18:
      result = 8;
      break;
    case 19:
      result = 13;
      break;
    case 20:
      result = 12;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromState(AGCLLVMBuilder *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  llvm::Value *v8;
  llvm::Value *v9;
  uint64_t Mul;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  _WORD v19[4];
  uint64_t v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Value *)*((_QWORD *)a3 + 4);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  Mul = llvm::IRBuilderBase::CreateMul((AGCLLVMBuilder *)((char *)a1 + 8), v8, v9, (const llvm::Twine *)v21);
  v11 = *(_DWORD *)(a4 + 8);
  v12 = a4;
  if ((v11 & 0xFE) == 0x12)
  {
    v12 = **(_QWORD **)(a4 + 16);
    v11 = *(_DWORD *)(v12 + 8);
  }
  if ((v11 & 0xFFFFF0FF) == 0xD)
    v12 = *((_QWORD *)a1 + 24);
  if (*(_DWORD *)(a4 + 32) >= a3[1])
    v13 = a3[1];
  else
    v13 = *(_DWORD *)(a4 + 32);
  if (v13 - 2 <= 2)
    v12 = llvm::FixedVectorType::get();
  v20 = v12;
  v14 = *a3;
  v19[0] = AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*a3, *((unsigned __int8 *)a3 + 16));
  v19[1] = v14;
  v19[2] = ~(unsigned __int16)(-1 << v13);
  v19[3] = v13;
  v15 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _BYTE))(*(_QWORD *)a1 + 1600))(a1, v19, *((unsigned __int16 *)a3 + 4), *((_QWORD *)a3 + 3), v12, Mul, 0, 0, *((_BYTE *)a3 + 17));
  v16 = AGCLLVMBuilder::extendVector(a1, v15, *(_DWORD *)(a4 + 32));
  if ((*a3 & 0xFFFFFFFE) == 4)
  {
    v17 = *((_QWORD *)a1 + 37);
    v22 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 38, (uint64_t)v16, v17, (uint64_t)v21);
  }
  return (uint64_t)v16;
}

void AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(uint64_t a1@<X0>, llvm::Type *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, llvm::Value *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, unsigned __int8 a12)
{
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t inserted;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::BasicBlock *v43;
  uint64_t v44;
  llvm::Instruction *v45;
  uint64_t v46;
  llvm::Instruction *v47;
  uint64_t ICmp;
  uint64_t FirstInsertionPt;
  const char *v50;
  __int16 v51;
  llvm::Type *v52[4];
  uint64_t *v53;
  llvm::Value **v54;
  char *v55;
  __int16 *v56;
  llvm::CmpInst ***p_Cast;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD v60[9];
  llvm::Value *v61;
  char v62;
  char v63;
  uint64_t v64;
  llvm::CmpInst **Cast;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;

  v68 = a3;
  v67 = a4;
  v64 = a7;
  v63 = a8;
  v62 = a11;
  if (*(_BYTE *)(a6 + 16) == 16)
    v16 = a6;
  else
    v16 = 0;
  if (*(_BYTE *)(a4 + 16) == 16)
    v17 = a4;
  else
    v17 = 0;
  if (v16)
    v18 = v17 == 0;
  else
    v18 = 1;
  v19 = !v18;
  if (v18)
  {
    v23 = 0;
    v21 = 0;
  }
  else
  {
    v20 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v20 = (_QWORD *)*v20;
    v21 = *(_DWORD *)v20;
    v22 = (_QWORD *)(v17 + 24);
    if (*(_DWORD *)(v17 + 32) >= 0x41u)
      v22 = (_QWORD *)*v22;
    v23 = *(_DWORD *)v22;
  }
  v24 = a12;
  v25 = *(_QWORD *)(a1 + 192);
  LOWORD(v53) = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a6, v25, (uint64_t)v52);
  v26 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, a5, 4);
  v27 = (uint64_t)v26;
  v66 = (uint64_t)v26;
  v28 = *(_DWORD *)(*(_QWORD *)v26 + 8);
  if ((v28 & 0xFE) == 0x12)
    v28 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
  if (v28 == 13)
  {
    v29 = v28 >> 8;
    v30 = *((_QWORD *)a2 + 1);
    v31 = *(_DWORD *)(v30 + 8);
    if ((v31 & 0xFE) == 0x12)
      v31 = *(_DWORD *)(**(_QWORD **)(v30 + 16) + 8);
    if (v29 >= v31 >> 8)
    {
      v34 = v31 >> 8;
      if (v29 <= v34)
        goto LABEL_30;
      v27 = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v26, 0, 4 / (v29 / v34), 1);
      v30 = *((_QWORD *)a2 + 1);
      LOWORD(v53) = 257;
      v32 = a1 + 8;
      v33 = 49;
    }
    else
    {
      LOWORD(v53) = 257;
      v32 = a1 + 8;
      v33 = 39;
    }
    v66 = llvm::IRBuilderBase::CreateCast(v32, v33, v27, v30, (uint64_t)v52);
  }
LABEL_30:
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  LOWORD(v53) = 257;
  v61 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v52);
  v60[0] = a1;
  v60[1] = a2;
  v60[2] = &v62;
  v60[3] = &v66;
  v60[4] = &v64;
  v60[5] = &v61;
  v60[6] = &v63;
  v60[7] = &a10;
  v60[8] = &Cast;
  v52[0] = (llvm::Type *)a1;
  v52[1] = a2;
  v52[2] = (llvm::Type *)&v62;
  v52[3] = (llvm::Type *)&v66;
  v53 = &v64;
  v54 = &v61;
  v55 = &v63;
  v56 = &v68;
  p_Cast = &Cast;
  v58 = &v67;
  v59 = &a10;
  if (((v19 | v24) & 1) != 0)
  {
    if (v21 < v23)
      v36 = v19;
    else
      v36 = 0;
    if ((v36 & 1) != 0 || v24)
      AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_0::operator()(v60);
    else
      AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_1::operator()(v52);
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_DWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 16) = 0;
  }
  else
  {
    v37 = *(_QWORD *)(a1 + 56);
    v38 = operator new();
    llvm::BasicBlock::BasicBlock();
    v50 = "OffsetGreaterThanSize_Write";
    v51 = 259;
    v39 = operator new();
    llvm::BasicBlock::BasicBlock();
    v41 = v37 + 40;
    v40 = *(_QWORD *)(v37 + 40);
    if (v40 == v37 + 40
      || (v40 ? (v42 = v40 - 24) : (v42 = 0), *(unsigned __int8 *)(v42 + 16) - 29 > 0xA))
    {
      v50 = "OffsetLessThanSizeEnd_Write";
      v51 = 259;
      v43 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
    }
    else
    {
      v50 = "OffsetLessThanSizeEnd_Write";
      v51 = 259;
      v43 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
      v44 = *(_QWORD *)(v37 + 40);
      if (v44 == v41)
      {
        v47 = 0;
      }
      else
      {
        v45 = (llvm::Instruction *)(v44 - 24);
        if (v44)
          v46 = v44 - 24;
        else
          v46 = 0;
        if (*(unsigned __int8 *)(v46 + 16) - 29 >= 0xB)
          v47 = 0;
        else
          v47 = v45;
      }
      llvm::Instruction::eraseFromParent(v47);
      *(_QWORD *)(a1 + 56) = v37;
      *(_QWORD *)(a1 + 64) = v41;
    }
    v51 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 36, Cast, v67, (uint64_t)&v50);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)(a1 + 8), ICmp, v38, v39);
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v38 + 40;
    AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_0::operator()(v60);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v43);
    *(_QWORD *)(a1 + 56) = v39;
    *(_QWORD *)(a1 + 64) = v39 + 40;
    if (*(_BYTE *)(a1 + 1741))
      AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_1::operator()(v52);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v43);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v43);
    llvm::IRBuilderBase::SetInsertPoint(a1 + 8, (uint64_t)v43, FirstInsertionPt);
    *(_OWORD *)a9 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    *(_DWORD *)(a9 + 24) = *(_DWORD *)(a1 + 104);
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer *a1, unsigned __int16 *a2, __int16 a3, uint64_t a4, llvm::Type ***a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  llvm::Type *v20;
  llvm::Type *v21;
  uint64_t inserted;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  llvm::BasicBlock *v27;
  llvm::BasicBlock *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  llvm::Instruction *v34;
  uint64_t v35;
  llvm::Instruction *v36;
  llvm::Type ***v37;
  llvm::User *PHI;
  uint64_t ICmp;
  llvm::Value *v40;
  uint64_t v41;
  llvm::Value *v42;
  unsigned int v44;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 *v49;
  unsigned __int16 *v50;
  llvm::CmpInst ***v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *p_Cast;
  _QWORD v55[9];
  uint64_t Cast;
  BOOL v57;
  llvm::Value *v58;
  llvm::Type *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  llvm::CmpInst **v63;
  uint64_t v64;
  __int16 v65;

  v65 = a3;
  v63 = (llvm::CmpInst **)a6;
  v64 = a4;
  v61 = a8;
  v62 = a7;
  if (*(_BYTE *)(a6 + 16) == 16)
    v13 = a6;
  else
    v13 = 0;
  if (*(_BYTE *)(a4 + 16) == 16)
    v14 = a4;
  else
    v14 = 0;
  if (v13)
    v15 = v14 == 0;
  else
    v15 = 1;
  v16 = !v15;
  if (v15)
  {
    v19 = 0;
    v44 = 0;
  }
  else
  {
    v17 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v44 = *(_DWORD *)v17;
    v18 = (_QWORD *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v18 = (_QWORD *)*v18;
    v19 = *(_DWORD *)v18;
  }
  v60 = (*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 1592))(a1, *a2, *((_QWORD *)a2 + 1), 0, 0, 0);
  v20 = (llvm::Type *)*((_QWORD *)a2 + 1);
  v59 = v20;
  if ((_BYTE)v60)
  {
    v21 = (llvm::Type *)*((_QWORD *)a1 + 19);
    if ((*((_DWORD *)v20 + 2) & 0xFE) == 0x12)
      v21 = (llvm::Type *)llvm::FixedVectorType::get();
    v59 = v21;
  }
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  LOWORD(v49) = 257;
  v58 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v48);
  v57 = a7 != 0;
  v23 = *((_QWORD *)a1 + 24);
  LOWORD(v49) = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, a6, v23, (uint64_t)v48);
  v55[0] = a1;
  v55[1] = &v59;
  v55[2] = a2;
  v55[3] = &v60;
  v55[4] = &v62;
  v55[5] = &v58;
  v55[6] = &v57;
  v55[7] = &v61;
  v55[8] = &Cast;
  v48[0] = a1;
  v48[1] = &v62;
  v48[2] = &v58;
  v48[3] = &v57;
  v49 = &v65;
  v50 = a2;
  v51 = &v63;
  v52 = &v64;
  v53 = &v61;
  p_Cast = &Cast;
  if (((v16 | a9) & 1) != 0)
  {
    llvm::UndefValue::get();
    if (v44 < v19)
      v24 = v16;
    else
      v24 = 0;
    if ((v24 & 1) != 0 || a9)
      v25 = (uint64_t)AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((uint64_t)v55);
    else
      v25 = AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_1::operator()((uint64_t)v48);
    PHI = (llvm::User *)v25;
    v37 = a5;
  }
  else
  {
    v26 = *((_QWORD *)a1 + 7);
    v27 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v46[0] = "OffsetGreaterThanSize_Read";
    v47 = 259;
    v28 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v30 = v26 + 40;
    v29 = *(_QWORD *)(v26 + 40);
    if (v29 == v26 + 40
      || (v29 ? (v31 = v29 - 24) : (v31 = 0), *(unsigned __int8 *)(v31 + 16) - 29 > 0xA))
    {
      v46[0] = "OffsetLessThanSizeEnd_Read";
      v47 = 259;
      v32 = (uint64_t *)operator new();
      llvm::BasicBlock::BasicBlock();
      v37 = a5;
    }
    else
    {
      v46[0] = "OffsetLessThanSizeEnd_Read";
      v47 = 259;
      v32 = (uint64_t *)llvm::BasicBlock::splitBasicBlock();
      v33 = *(_QWORD *)(v26 + 40);
      if (v33 == v30)
      {
        v36 = 0;
      }
      else
      {
        v34 = (llvm::Instruction *)(v33 - 24);
        if (v33)
          v35 = v33 - 24;
        else
          v35 = 0;
        if (*(unsigned __int8 *)(v35 + 16) - 29 >= 0xB)
          v36 = 0;
        else
          v36 = v34;
      }
      v37 = a5;
      llvm::Instruction::eraseFromParent(v36);
      *((_QWORD *)a1 + 7) = v26;
      *((_QWORD *)a1 + 8) = v30;
    }
    v47 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)a1 + 1, 36, v63, v64, (uint64_t)v46);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)a1 + 1, ICmp, (uint64_t)v27, (uint64_t)v28);
    *((_QWORD *)a1 + 7) = v27;
    *((_QWORD *)a1 + 8) = (char *)v27 + 40;
    llvm::UndefValue::get();
    v40 = AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((uint64_t)v55);
    llvm::IRBuilderBase::CreateBr((AGCLLVMGen3TargetLowerer *)((char *)a1 + 8), (llvm::BasicBlock *)v32);
    *((_QWORD *)a1 + 7) = v28;
    *((_QWORD *)a1 + 8) = (char *)v28 + 40;
    v41 = llvm::UndefValue::get();
    if (*((_BYTE *)a1 + 1741))
      v41 = AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_1::operator()((uint64_t)v48);
    v42 = (llvm::Value *)v41;
    llvm::IRBuilderBase::CreateBr((AGCLLVMGen3TargetLowerer *)((char *)a1 + 8), (llvm::BasicBlock *)v32);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + 8, (uint64_t)v32, v32[6]);
    v47 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((AGCLLVMGen3TargetLowerer *)((char *)a1 + 8), v59, 2, (const llvm::Twine *)v46);
    llvm::PHINode::addIncoming(PHI, v40, v27);
    llvm::PHINode::addIncoming(PHI, v42, v28);
  }
  return AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR(a1, v37, *((llvm::Type **)a2 + 1), PHI);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v12;

  v5 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (*(_BYTE *)(a1 + 1770))
  {
    v6 = a3;
    if (v5 == 18)
      v6 = **(_QWORD **)(a3 + 16);
    if (a2 == 1)
      v7 = 3;
    else
      v7 = a2;
    if (a2 == 12)
      v8 = 16;
    else
      v8 = v7;
    if (a2 == 13)
      v9 = 15;
    else
      v9 = v8;
    if ((a5 & 1) != 0)
      v9 = a2;
    if (v6 == *(_QWORD *)(a1 + 168) && a4 != 0)
      a2 = v9;
  }
  if (v5 == 18)
    a3 = **(_QWORD **)(a3 + 16);
  v12 = a2 == 1 && a3 == *(_QWORD *)(a1 + 168);
  return v12 | (a2 << 16);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v11;
  llvm::Value *v12;
  llvm::Value *v13;
  _WORD v15[20];
  std::string __p;
  std::string v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[56];
  void *v21[2];
  _QWORD v22[8];

  v22[7] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a1;
  std::string::basic_string[abi:nn180100]<0>(&v17, *(char **)(*(_QWORD *)a1 + 1520));
  AGCLLVMGen3TargetLowerer::getReadSuffix(&__p, (llvm::Type *)v2, **(_QWORD **)(a1 + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 6));
  v21[0] = v22;
  v21[1] = (void *)0x700000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  v18 = v20;
  v19 = 0x700000000;
  v3 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v3);
  v4 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v4);
  v5 = **(_QWORD **)(a1 + 32);
  if (!v5)
    v5 = **(_QWORD **)(a1 + 40);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v5);
  v6 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v6);
  if (**(_QWORD **)(a1 + 56))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[30]);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, **(_QWORD **)(a1 + 56));
    std::string::append(&v17, "coords.");
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v2[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, **(_QWORD **)(a1 + 64));
  v7 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v7);
  v8 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v15[16] = 257;
  v12 = llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), *(_QWORD *)(v11 + 24), v11, (uint64_t)v18, v19, (uint64_t)v15);
  v13 = AGCLLVMGen3TargetLowerer::convertFromF16((AGCLLVMGen3TargetLowerer *)v2, v12, **(unsigned __int8 **)(a1 + 24));
  if (v18 != v20)
    free(v18);
  if (v21[0] != v22)
    free(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v13;
}

llvm::Value *AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR(AGCLLVMGen3TargetLowerer *this, llvm::Type ***a2, llvm::Type *a3, llvm::Value *a4)
{
  llvm::Type *v6;
  int v7;
  llvm::Type **v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int ScalarSizeInBits;
  unsigned int v13;
  int v14;
  AGCLLVMGen3TargetLowerer *v15;
  unsigned int v16;
  llvm::Value *v17;
  llvm::Value *v18;
  char v21[32];
  __int16 v22;

  v6 = (llvm::Type *)a2;
  v7 = *((unsigned __int8 *)a2 + 8);
  if (v7 == 15)
  {
    v8 = a2[2];
    v6 = *v8;
    v7 = *((unsigned __int8 *)*v8 + 8);
  }
  if ((v7 & 0xFE) == 0x12)
    v9 = *((_DWORD *)v6 + 8);
  else
    v9 = 1;
  v10 = *((_DWORD *)a3 + 2);
  if ((v10 & 0xFE) == 0x12)
    v11 = *((_DWORD *)a3 + 8);
  else
    v11 = 1;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v6);
  v13 = llvm::Type::getScalarSizeInBits(a3);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**((_QWORD **)v6 + 2) + 8);
  if (v7 != 13
    || ((v10 & 0xFE) != 0x12 ? (v14 = v10) : (v14 = *(unsigned __int8 *)(**((_QWORD **)a3 + 2) + 8)),
        v14 != 13 || v13 * v11 != ScalarSizeInBits * v9))
  {
    if (v9 >= v11)
    {
      if (v11 >= v9)
      {
        v15 = this;
LABEL_23:
        if (ScalarSizeInBits < v13)
        {
          v22 = 257;
          return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v15 + 8, 38, (uint64_t)a4, (uint64_t)v6, (uint64_t)v21);
        }
        return a4;
      }
      v15 = this;
      v16 = v13;
      v18 = AGCLLVMBuilder::extendVector(this, a4, v9);
      v17 = AGCLLVMBuilder::fillUnwrittenChannels(this, v18, ~(-1 << v11));
    }
    else
    {
      v15 = this;
      v16 = v13;
      v17 = (llvm::Value *)AGCLLVMBuilder::subrangeVector(this, a4, 0, v9, 1);
    }
    a4 = v17;
    v13 = v16;
    goto LABEL_23;
  }
  return a4;
}

llvm::Value *AGCLLVMGen3TargetLowerer::convertFromF16(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, int a3)
{
  uint64_t v5;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v8;
  llvm::Value *Element;
  llvm::Type *v10;
  llvm::Value *FPExt;
  llvm::Value *v12;
  llvm::Type *v13;
  _WORD v15[20];
  _BYTE v16[32];
  __int16 v17;

  if (!a3)
    return a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v5 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v17 = 257;
        v8 = (llvm::Value *)llvm::ConstantInt::get();
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a2, v8, (const llvm::Twine *)v16);
        v10 = (llvm::Type *)*((_QWORD *)this + 21);
        v15[16] = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMGen3TargetLowerer *)((char *)this + 8), Element, v10, (const llvm::Twine *)v15);
        v17 = 257;
        v12 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), InsertElement, FPExt, v12, (const llvm::Twine *)v16);
      }
    }
  }
  else
  {
    v13 = (llvm::Type *)*((_QWORD *)this + 21);
    v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a2, v13, (const llvm::Twine *)v16);
  }
  return InsertElement;
}

void AGCLLVMGen3TargetLowerer::getReadSuffix(std::string *this, llvm::Type *a2, uint64_t a3, int a4)
{
  const std::string::value_type *v5;
  char *v6;
  std::string *v7;
  std::string v8;

  v5 = AGCLLVMGen3TargetLowerer::getReadSuffix(llvm::Type *,unsigned short)::num_str[a4];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  if (*((_QWORD *)a2 + 24) == a3)
  {
    v6 = "i16";
  }
  else if (*((_QWORD *)a2 + 25) == a3)
  {
    v6 = "i32";
  }
  else if (*((_QWORD *)a2 + 19) == a3)
  {
    v6 = "f16";
  }
  else
  {
    v6 = "f32";
  }
  std::string::basic_string[abi:nn180100]<0>(&v8, v6);
  v7 = std::string::insert(&v8, 0, v5);
  *this = *v7;
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void AGCLLVMUserShader::~AGCLLVMUserShader(AGCLLVMUserShader *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  llvm *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;
  uint64_t v50;
  uint64_t k;
  uint64_t v52;
  uint64_t m;
  uint64_t v55;
  uint64_t n;
  uint64_t v58;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  char *v64;
  char *v65;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[5];
  v5 = *((_QWORD *)this + 538);
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4288));
  v7 = *((_QWORD *)this + 535);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4264));
  v8 = *((_QWORD *)this + 532);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4240));
  v9 = a2[1];
  *(_QWORD *)this = v9;
  *(_QWORD *)((char *)this + *(_QWORD *)(v9 - 24)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[3];
  v10 = *((_QWORD *)this + 118);
  if (v10)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(_QWORD **)(v10 + 8));
    MEMORY[0x1CAA2D68C](v10, 0x1020C4062D53EE8);
  }
  for (i = 0; i != -96; i -= 32)
  {
    if (*((char *)this + i + 4231) < 0)
      operator delete(*(void **)((char *)this + i + 4208));
  }
  v12 = (char *)*((_QWORD *)this + 484);
  if (v12 != (char *)this + 3888)
    free(v12);
  v13 = *((_QWORD *)this + 469);
  if (v13)
  {
    v14 = *((_QWORD *)this + 470);
    v15 = (void *)*((_QWORD *)this + 469);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 9) < 0)
          operator delete(*(void **)(v14 - 32));
        v14 -= 32;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 469);
    }
    *((_QWORD *)this + 470) = v13;
    operator delete(v15);
  }
  llvm::deallocate_buffer(*((llvm **)this + 454), (void *)(16 * *((unsigned int *)this + 912)));
  v16 = (char *)*((_QWORD *)this + 449);
  if (v16 != (char *)this + 3608)
    free(v16);
  if ((*((_BYTE *)this + 3568) & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)this + 447), (void *)(8 * *((unsigned int *)this + 896)));
  v17 = *((_QWORD *)this + 444);
  if (v17 != -8192 && v17 != -4096 && v17)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 3536));
  llvm::deallocate_buffer(*((llvm **)this + 439), (void *)(16 * *((unsigned int *)this + 882)));
  llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range(*((_QWORD *)this + 417), *((_QWORD *)this + 417) + 40 * *((unsigned int *)this + 836));
  v18 = (char *)*((_QWORD *)this + 417);
  if (v18 != (char *)this + 3352)
    free(v18);
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 3264);
  v19 = *((unsigned int *)this + 814);
  v20 = (llvm *)*((_QWORD *)this + 405);
  if ((_DWORD)v19)
  {
    v21 = (uint64_t *)((char *)v20 + 24);
    v22 = 48 * v19;
    do
    {
      v23 = *v21;
      if (*v21 != -8192 && v23 != -4096 && v23 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v21 - 2));
      v21 += 6;
      v22 -= 48;
    }
    while (v22);
    v20 = (llvm *)*((_QWORD *)this + 405);
    LODWORD(v19) = *((_DWORD *)this + 814);
  }
  llvm::deallocate_buffer(v20, (void *)(48 * v19));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 403));
  v25 = (char *)*((_QWORD *)this + 398);
  v26 = *((unsigned int *)this + 798);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    v28 = v25 - 8;
    do
    {
      std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>::reset[abi:nn180100]((uint64_t *)&v28[v27]);
      v27 -= 8;
    }
    while (v27);
    v25 = (char *)*((_QWORD *)this + 398);
  }
  if (v25 != (char *)this + 3200)
    free(v25);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3144);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3096);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3048);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3000);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 2952);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 2904);
  v29 = (char *)*((_QWORD *)this + 359);
  if (v29 != (char *)this + 2888)
    free(v29);
  v30 = *((_QWORD *)this + 358);
  if (v30 != -8192 && v30 != -4096 && v30)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2848));
  v31 = *((_QWORD *)this + 354);
  if (v31 != -8192 && v31 != -4096 && v31)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2816));
  v32 = *((_QWORD *)this + 351);
  if (v32 != -8192 && v32 != -4096 && v32)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2792));
  v33 = *((_QWORD *)this + 348);
  if (v33 != -8192 && v33 != -4096 && v33)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2768));
  v34 = *((_QWORD *)this + 345);
  if (v34 != -8192 && v34 != -4096 && v34)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2744));
  v35 = *((_QWORD *)this + 342);
  if (v35 != -8192 && v35 != -4096 && v35)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2720));
  v36 = *((_QWORD *)this + 339);
  if (v36 != -8192 && v36 != -4096 && v36)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2696));
  v37 = *((_QWORD *)this + 335);
  if (v37 != -8192 && v37 != -4096 && v37)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2664));
  v38 = *((_QWORD *)this + 331);
  if (v38 != -8192 && v38 != -4096 && v38)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2632));
  v39 = *((_QWORD *)this + 327);
  if (v39 != -8192 && v39 != -4096 && v39)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2600));
  v40 = *((_QWORD *)this + 324);
  if (v40 != -8192 && v40 != -4096 && v40)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2576));
  v41 = *((_QWORD *)this + 321);
  if (v41 != -8192 && v41 != -4096 && v41)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2552));
  v42 = *((_QWORD *)this + 318);
  if (v42 != -8192 && v42 != -4096 && v42)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2528));
  v43 = *((_QWORD *)this + 315);
  if (v43 != -8192 && v43 != -4096 && v43)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2504));
  v44 = *((_QWORD *)this + 312);
  if (v44 != -8192 && v44 != -4096 && v44)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2480));
  v45 = *((_QWORD *)this + 309);
  if (v45 != -8192 && v45 != -4096 && v45)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2456));
  v46 = *((_QWORD *)this + 306);
  if (v46 != -8192 && v46 != -4096 && v46)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2432));
  for (j = 0; j != -72; j -= 24)
  {
    v48 = *(_QWORD *)((char *)this + j + 2424);
    if (v48 != -8192 && v48 != -4096 && v48 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + j + 2408));
  }
  v50 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  for (k = 0; k != -256; k -= 64)
  {
    v52 = *(_QWORD *)((char *)this + k + 2296);
    if (v52 != -8192 && v52 != -4096 && v52 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + k + 2280));
  }
  for (m = 0; m != -256; m -= 64)
  {
    v55 = *(_QWORD *)((char *)this + m + 2040);
    if (v55 != -8192 && v55 != -4096 && v55 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + m + 2024));
  }
  for (n = 0; n != -640; n -= 64)
  {
    v58 = *(_QWORD *)((char *)this + n + 1784);
    if (v58 != -8192 && v58 != -4096 && v58 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + n + 1768));
  }
  v60 = (void *)*((_QWORD *)this + 138);
  if (v60 != *((void **)this + 137))
    free(v60);
  v61 = (void *)*((_QWORD *)this + 126);
  if (v61 != *((void **)this + 125))
    free(v61);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 123));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 120));
  v62 = (void *)*((_QWORD *)this + 115);
  if (v62)
  {
    *((_QWORD *)this + 116) = v62;
    operator delete(v62);
  }
  v63 = (void *)*((_QWORD *)this + 112);
  if (v63)
  {
    *((_QWORD *)this + 113) = v63;
    operator delete(v63);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 110));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 107));
  std::__tree<llvm::WeakVH>::destroy(*((_QWORD **)this + 104));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 784);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)this + 760);
  llvm::deallocate_buffer(*((llvm **)this + 95), (void *)(48 * *((unsigned int *)this + 194)));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 720);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)this + 696);
  llvm::deallocate_buffer(*((llvm **)this + 87), (void *)(48 * *((unsigned int *)this + 178)));
  v64 = (char *)*((_QWORD *)this + 83);
  if (v64 != (char *)this + 680)
    free(v64);
  MEMORY[0x1CAA2C150]((char *)this + 232);
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  v65 = (char *)*((_QWORD *)this + 11);
  if (v65 != (char *)this + 104)
    free(v65);
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = v2[5];
      if (v3 != -8192 && v3 != -4096 && v3 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 + 3));
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 16);
    v3 = *(llvm **)result;
    if ((_DWORD)v2)
    {
      v4 = (_QWORD *)((char *)v3 + 8);
      v5 = 16 * v2;
      do
      {
        if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*v4)
            llvm::MetadataTracking::untrack();
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v3 = *(llvm **)v1;
      v6 = (void *)(16 * *(unsigned int *)(v1 + 16));
    }
    else
    {
      v6 = 0;
    }
    result = llvm::deallocate_buffer(v3, v6);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceTexturesAndSamplers(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  AGCLLVMUserObject *v2;
  AGCLLVMUserObject *v3;
  AGCLLVMUserObject *v4;
  AGCLLVMUserObject *v5;
  AGCLLVMUserObject *v6;
  AGCLLVMUserObject *ConstantSamplers;
  char *v8;
  llvm::Value **v9;
  llvm::Value **v10;
  llvm::Value *v11;
  char *isConstantSampler;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  AGCLLVMUserObject *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int Key;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ConstantSamplerGlobal;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  std::string *v53;
  const std::string::value_type *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t Impl;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Value *v68;
  llvm::Value *v69;
  uint64_t *v70;
  llvm::Value *v71;
  llvm::Value *v72;
  AGCLLVMUserObject *v73;
  AGCLLVMUserObject *v74;
  AGCLLVMUserObject *v75;
  AGCLLVMUserObject *v76;
  llvm::Type *v77;
  uint64_t v78;
  llvm::Instruction *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BOOL4 v88;
  int v90;
  llvm::Type *v91;
  int v92;
  uint64_t v93;
  llvm::Function *v94;
  llvm::Function *v95;
  llvm::Value *v96;
  llvm::Value *v97;
  int v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Instruction *v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t Element;
  uint64_t *v107;
  llvm::Type **v108;
  llvm::Value *v109;
  llvm::Type *v110;
  llvm::Value *AlignedLoad;
  char *v112;
  llvm::IRBuilderBase *v113;
  llvm::Value *v114;
  llvm::Value *v115;
  uint64_t v116;
  llvm::Type ***v117;
  AGCLLVMUserObject *v118;
  llvm::Value *v119;
  llvm::IRBuilderBase *v120;
  llvm::CmpInst **LShr;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  llvm::Type **v125;
  llvm::Value *v126;
  llvm::Type *v127;
  llvm::Value *v128;
  char *v129;
  llvm::IRBuilderBase *v130;
  llvm::Value *v131;
  AGCLLVMUserObject *v132;
  uint64_t *v133;
  AGCLLVMUserObject *v134;
  unsigned int v135;
  llvm::Type **v136;
  llvm::Value *v137;
  llvm::Type *v138;
  int v140;
  std::string::size_type v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Instruction *v145;
  unsigned __int8 *v146;
  uint64_t *v147;
  llvm::Type **v148;
  llvm::Value *v149;
  llvm::Type *v150;
  int v151;
  uint64_t v152;
  llvm::Instruction *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  uint64_t inserted;
  char *v157;
  int v158;
  int v159;
  uint64_t v160;
  llvm::Instruction *v161;
  unsigned __int8 *v162;
  llvm::Constant **v163;
  uint64_t *v164;
  llvm::Type *v165;
  uint64_t NullValue;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  llvm::Module *v171;
  llvm::legacy::PassManager *v172;
  llvm *PassManager;
  llvm::Pass *DeadCodeEliminationPass;
  llvm *v175;
  llvm::legacy::PassManager *v176;
  llvm::Pass *GlobalDCEPass;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  void *Name;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::string::size_type v199;
  AGCLLVMUserObject *v200;
  int v201;
  llvm **v202;
  uint64_t v203;
  int v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  llvm *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  llvm::GlobalObject *v220;
  _QWORD *v221;
  uint64_t v222;
  BOOL v223;
  _QWORD *v224;
  uint64_t v225;
  BOOL v226;
  _QWORD *SectionImpl;
  uint64_t v228;
  BOOL v229;
  _QWORD *v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  llvm::Value *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 v241;
  BOOL v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v256;
  uint64_t i;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t Function;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  llvm::Value *v268;
  int v269;
  unint64_t v270;
  uint64_t v271;
  const char *v272;
  std::string *v273;
  std::string::size_type v274;
  std::string *v275;
  std::string::size_type v276;
  char *v277;
  const std::string::value_type *p_dst;
  std::string::size_type v279;
  llvm::LLVMContext *v280;
  llvm::Value *v281;
  uint64_t *j;
  uint64_t v283;
  uint64_t Int16Ty;
  llvm::Function *v285;
  uint64_t v286;
  unint64_t v287;
  llvm::Function *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  AGCLLVMUserObject *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  llvm::BasicBlock *v325;
  uint64_t v326;
  llvm::Instruction *v327;
  uint64_t v328;
  llvm::Instruction *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  AGCLLVMUserObject *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  std::string *v345;
  std::string::size_type v346;
  std::string *v347;
  std::string::size_type v348;
  std::string *p_p;
  std::string::size_type size;
  char v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t Cast;
  unsigned int v362;
  uint64_t v363;
  llvm::BasicBlock *v364;
  llvm::Function *v365;
  llvm::Function *v366;
  llvm::Function *v367;
  llvm::Value *v368;
  llvm::Function *v369;
  char *v370;
  char v371;
  uint64_t v372;
  llvm::Value *v373;
  llvm::Value *v374;
  llvm::Value *v375;
  AGCLLVMUserObject *v376;
  _QWORD v377[4];
  __int16 v378;
  std::string v379;
  void *__dst;
  std::string::size_type v381;
  uint64_t v382;
  __n128 v383;
  void *__src;
  size_t __len;
  __n128 v386;
  void *v387[2];
  _BYTE v388[64];
  void *v389;
  llvm::Type *v390;
  _BYTE v391[64];
  void *v392;
  uint64_t v393;
  _BYTE v394[64];
  std::string __p;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  int v400;
  std::string *v401;
  std::string v402;
  std::string v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;

  v1 = this;
  v406 = *MEMORY[0x1E0C80C00];
  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v3);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v4);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v5);
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v6);
  v392 = v394;
  v393 = 0x800000000;
  ConstantSamplers = (AGCLLVMUserObject *)AGCLLVMUserObject::extractConstantSamplers(v1, (uint64_t)&v392);
  v389 = v391;
  v390 = (llvm::Type *)0x800000000;
  v387[0] = v388;
  v387[1] = (void *)0x800000000;
  v8 = (char *)v1 + 368;
  v376 = v1;
  v355 = (char *)v1 + 368;
  if (!(_DWORD)v393)
    goto LABEL_74;
  v9 = (llvm::Value **)v392;
  v10 = (llvm::Value **)((char *)v392 + 8 * v393);
  do
  {
    v11 = *v9;
    v403.__r_.__value_.__r.__words[0] = 0;
    v402.__r_.__value_.__r.__words[0] = 0;
    isConstantSampler = (char *)AGCLLVMUserObject::isConstantSampler(v1, v11, (unint64_t *)&v403, (unint64_t *)&v402);
    v13 = v403.__r_.__value_.__r.__words[0];
    v14 = v402.__r_.__value_.__r.__words[0];
    v15 = (char *)*((_QWORD *)v1 + 116);
    v16 = *((_QWORD *)v1 + 117);
    if ((unint64_t)v15 >= v16)
    {
      isConstantSampler = (char *)*((_QWORD *)v1 + 115);
      v18 = (v15 - isConstantSampler) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        abort();
      v20 = v16 - (_QWORD)isConstantSampler;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
      v22 = 0xFFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v19;
      if (v22)
      {
        v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v22);
        v15 = (char *)*((_QWORD *)v1 + 116);
        isConstantSampler = (char *)*((_QWORD *)v1 + 115);
      }
      else
      {
        v23 = 0;
      }
      v24 = (uint64_t *)(v22 + 16 * v18);
      *v24 = v13;
      v24[1] = v14;
      v25 = v24;
      if (v15 != isConstantSampler)
      {
        do
        {
          *((_OWORD *)v25 - 1) = *((_OWORD *)v15 - 1);
          v25 -= 2;
          v15 -= 16;
        }
        while (v15 != isConstantSampler);
        isConstantSampler = (char *)*((_QWORD *)v1 + 115);
      }
      *((_QWORD *)v1 + 115) = v25;
      v17 = v24 + 2;
      *((_QWORD *)v1 + 116) = v24 + 2;
      *((_QWORD *)v1 + 117) = v22 + 16 * v23;
      if (isConstantSampler)
        operator delete(isConstantSampler);
    }
    else
    {
      *(_QWORD *)v15 = v403.__r_.__value_.__r.__words[0];
      *((_QWORD *)v15 + 1) = v14;
      v17 = v15 + 16;
    }
    *((_QWORD *)v1 + 116) = v17;
    v26 = *(_QWORD *)v1;
    if (*(_DWORD *)(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32] + 1780))
    {
LABEL_48:
      v38 = (*(uint64_t (**)(AGCLLVMUserObject *))(v26 + 400))(v1);
      v39 = *(_QWORD *)(*(_QWORD *)v1 - 24);
      if (v38)
      {
        if (*(_DWORD *)(*(_QWORD *)&v8[v39 + 32] + 1780))
        {
          AGCLLVMUserObject::getBindlessConstantSampler((uint64_t)v1, v13, v14, *(_QWORD *)v11);
          ConstantSamplers = (AGCLLVMUserObject *)llvm::Value::replaceAllUsesWith();
        }
        else
        {
          v40 = *((_QWORD *)v1 + 113);
          v41 = *((_QWORD *)v1 + 112);
          v42 = v390;
          if (v390 >= HIDWORD(v390))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v42 = v390;
          }
          *((_QWORD *)v389 + v42) = ((unint64_t)(v40 - v41) >> 4) | 0x100000000;
          LODWORD(v390) = (_DWORD)v390 + 1;
          v43 = llvm::ConstantInt::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v387, v43);
          ConstantSamplerGlobal = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal((uint64_t)v1, v13, v14);
          if (*((_BYTE *)v1 + 15) || *((_BYTE *)v1 + 3656))
          {
            v45 = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)v1, ConstantSamplerGlobal, 0);
            v46 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
            v47 = *(_QWORD *)v11;
            LOWORD(v397) = 257;
            v48 = 50;
          }
          else
          {
            v49 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
            v45 = llvm::ConstantInt::get();
            v47 = *(_QWORD *)v11;
            LOWORD(v397) = 257;
            v46 = v49;
            v48 = 48;
          }
          llvm::IRBuilderBase::CreateCast(v46, v48, v45, v47, (uint64_t)&__p);
          ConstantSamplers = (AGCLLVMUserObject *)llvm::Value::replaceAllUsesWith();
          v8 = v355;
        }
        goto LABEL_57;
      }
      v53 = (std::string *)((char *)v1 + v39 + 8);
      v54 = "Indirect samplers are not supported";
      goto LABEL_201;
    }
    AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)isConstantSampler);
    AGCLLVMUserObject::getUniqueIDFunctionSet(v27);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = 0x2000000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, (uint64_t)v11);
    v28 = __p.__r_.__value_.__r.__words[1];
    if (!LODWORD(__p.__r_.__value_.__r.__words[1]))
    {
LABEL_42:
      v37 = 0;
      goto LABEL_44;
    }
    while (1)
    {
      v29 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v28-- - 8);
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v28;
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
        break;
LABEL_41:
      v1 = v376;
      if (!v28)
        goto LABEL_42;
    }
    while (1)
    {
      v31 = *(_QWORD *)(v30 + 24);
      v32 = *(unsigned __int8 *)(v31 + 16);
      if (v32 <= 0x1B)
      {
        if (v32 != 5 || *(_WORD *)(v31 + 18) != 49)
          goto LABEL_43;
        goto LABEL_27;
      }
      if (v32 == 84)
        break;
      if (v32 != 77)
        goto LABEL_43;
LABEL_27:
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v31);
LABEL_28:
      v30 = *(_QWORD *)(v30 + 8);
      if (!v30)
      {
        v28 = __p.__r_.__value_.__r.__words[1];
        goto LABEL_41;
      }
    }
    v33 = *(_QWORD *)(v31 - 32);
    if (v33 && !*(_BYTE *)(v33 + 16) && *(_QWORD *)(v33 + 24) == *(_QWORD *)(v31 + 72))
    {
      llvm::Value::getName((llvm::Value *)v33);
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1ED839C70)
        goto LABEL_28;
      v35 = llvm::StringMapImpl::FindKey();
      v36 = v35 == (unint64_t)dword_1ED839B78 || v35 == -1;
      if (!v36)
        goto LABEL_28;
    }
LABEL_43:
    v37 = 1;
    v1 = v376;
LABEL_44:
    ConstantSamplers = (AGCLLVMUserObject *)__p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
      free(__p.__r_.__value_.__l.__data_);
    if (v37)
    {
      v26 = *(_QWORD *)v1;
      goto LABEL_48;
    }
LABEL_57:
    ++v9;
  }
  while (v9 != v10);
  if ((_DWORD)v390 && !*(_DWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1780))
  {
    v50 = llvm::ArrayType::get(*((llvm::ArrayType **)v1 + 265), (llvm::Type *)v390);
    v51 = llvm::User::operator new((llvm::User *)0x58);
    if (**((_BYTE **)v1 + 264))
    {
      __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v1 + 264);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"_indirect";
      v52 = 771;
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"_indirect";
      v52 = 259;
    }
    LOWORD(v397) = v52;
    llvm::GlobalVariable::GlobalVariable();
    if (*((_QWORD *)v1 + 266))
      strlen(*((const char **)v1 + 266));
    llvm::GlobalObject::setSection();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = 0x2000000000;
    v55 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v55);
    llvm::ConstantInt::get();
    v56 = llvm::ValueAsMetadata::get();
    if ((_DWORD)v390)
    {
      v57 = v56;
      v58 = (char *)v389;
      v59 = 8 * v390;
      do
      {
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = (unint64_t)v57;
        v58 += 8;
        llvm::ConstantInt::get();
        v403.__r_.__value_.__l.__size_ = llvm::ValueAsMetadata::get();
        Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, Impl);
        v59 -= 8;
      }
      while (v59);
    }
    v61 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 376);
    v62 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v61, v62);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)v1 + 2088), v51);
    *((_QWORD *)v1 + 267) = v50;
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
      free(__p.__r_.__value_.__l.__data_);
    v63 = llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 240), (llvm::Type *)v390);
    v64 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 240), (llvm::Type *)v390);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.constant_sampler_unique_id";
    LOWORD(v397) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v64 + 80) |= 1u;
    llvm::ConstantArray::get();
    llvm::GlobalVariable::setInitializer();
    ConstantSamplers = (AGCLLVMUserObject *)llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)v1 + 2216), v64);
    *((_QWORD *)v1 + 283) = v63;
  }
LABEL_74:
  AGCLLVMUserObject::getGetNullTextureFunctionSet(ConstantSamplers);
  v65 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  v66 = v65 + 32;
  v67 = *(_QWORD *)((char *)v1 + v65 + 368);
  v68 = (llvm::Value *)(v67 + 24);
  v69 = *(llvm::Value **)(v67 + 32);
  if (v69 == (llvm::Value *)(v67 + 24))
    goto LABEL_119;
  v368 = (llvm::Value *)(v67 + 24);
  v70 = &qword_1ED839000;
  while (2)
  {
    v71 = (llvm::Value *)((char *)v69 - 56);
    v36 = v69 == 0;
    v69 = (llvm::Value *)*((_QWORD *)v69 + 1);
    if (v36)
      v72 = 0;
    else
      v72 = v71;
    llvm::Value::getName(v72);
    v73 = (AGCLLVMUserObject *)llvm::StringMapImpl::FindKey();
    if ((_DWORD)v73 != -1 && (int)v73 != (unint64_t)*((unsigned int *)v70 + 766))
    {
      AGCLLVMUserObject::getSampleFunctionMap(v73);
      AGCLLVMUserObject::getDimensionFunctionMap(v74);
      AGCLLVMUserObject::getIsNullTextureFunctionSet(v75);
      AGCLLVMUserObject::getUniqueIDFunctionSet(v76);
      v373 = v69;
      if (*(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1755)
        || *((_BYTE *)v1 + 2344))
      {
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getIntToPtr();
      }
      else
      {
        llvm::Constant::getNullValue(**(llvm::Constant ***)(*((_QWORD *)v72 + 3) + 16), v77);
      }
      v78 = *((_QWORD *)v72 + 1);
      if (!v78)
        goto LABEL_115;
      while (1)
      {
        v79 = *(llvm::Instruction **)(v78 + 24);
        v78 = *(_QWORD *)(v78 + 8);
        v80 = *((_QWORD *)v79 + 1);
        if (!v80)
          goto LABEL_114;
        do
        {
          v81 = *(_QWORD *)(v80 + 24);
          v80 = *(_QWORD *)(v80 + 8);
          if (v81)
          {
            if (*(_BYTE *)(v81 + 16) == 84)
            {
              v82 = *(_QWORD *)(v81 - 32);
              if (v82)
              {
                if (!*(_BYTE *)(v82 + 16) && *(_QWORD *)(v82 + 24) == *(_QWORD *)(v81 + 72))
                {
                  llvm::Value::getName(*(llvm::Value **)(v81 - 32));
                  v83 = llvm::StringMapImpl::FindKey();
                  v84 = v83;
                  if (v83 == -1)
                    v84 = dword_1ED839C70;
                  v85 = AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * v84;
                  llvm::Value::getName((llvm::Value *)v82);
                  v86 = llvm::StringMapImpl::FindKey();
                  v88 = v86 != -1 && v86 != (unint64_t)dword_1ED839B98;
                  if (v85 != AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                            + 8 * dword_1ED839C70
                    || v88)
                  {
                    llvm::UndefValue::get();
LABEL_110:
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v81);
                    continue;
                  }
                  llvm::Value::getName((llvm::Value *)v82);
                  v90 = llvm::StringMapImpl::FindKey();
                  if (v90 != -1 && v90 != (unint64_t)dword_1ED839B78)
                  {
                    llvm::Constant::getNullValue(*(llvm::Constant **)v81, v91);
                    goto LABEL_110;
                  }
                  llvm::Value::getName((llvm::Value *)v82);
                  v92 = llvm::StringMapImpl::FindKey();
                  if (v92 != -1 && v92 != (unint64_t)dword_1ED839BD8)
                  {
                    llvm::ConstantInt::get();
                    goto LABEL_110;
                  }
                }
              }
            }
          }
        }
        while (v80);
        if (*((_QWORD *)v79 + 1))
          llvm::Value::replaceAllUsesWith();
LABEL_114:
        llvm::Instruction::eraseFromParent(v79);
        if (!v78)
        {
LABEL_115:
          llvm::Function::eraseFromParent(v72);
          v69 = v373;
          v1 = v376;
          v68 = v368;
          v70 = &qword_1ED839000;
          break;
        }
      }
    }
    if (v69 != v68)
      continue;
    break;
  }
  v65 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  v66 = v65 + 32;
LABEL_119:
  v93 = *(_QWORD *)((char *)v1 + v66 + 336);
  v94 = (llvm::Function *)(v93 + 24);
  if (*(_QWORD *)(v93 + 32) == v93 + 24)
  {
    v351 = 0;
    goto LABEL_212;
  }
  v371 = 0;
  v351 = 0;
  v365 = (llvm::Function *)(v93 + 24);
  v374 = (AGCLLVMUserObject *)((char *)v1 + 8);
  v95 = *(llvm::Function **)(v93 + 32);
  do
  {
    v96 = (llvm::Function *)((char *)v95 - 56);
    v36 = v95 == 0;
    v95 = (llvm::Function *)*((_QWORD *)v95 + 1);
    if (v36)
      v97 = 0;
    else
      v97 = v96;
    llvm::Value::getName(v97);
    v98 = llvm::StringMapImpl::FindKey();
    if (v98 != -1 && v98 != (unint64_t)dword_1ED839C70)
    {
      if (!AGCLLVMUserObject::replaceSamplerFunctionUses((uint64_t)v376, (uint64_t)v97, (int *)(*(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map+ 8 * v98)+ 8)))goto LABEL_202;
      if (!*((_QWORD *)v97 + 1))
        goto LABEL_194;
LABEL_193:
      v371 = 1;
      continue;
    }
    llvm::Value::getName(v97);
    v100 = llvm::StringMapImpl::FindKey();
    if (v100 != -1 && v100 != (unint64_t)dword_1ED839B98)
    {
      v101 = *((_QWORD *)v97 + 1);
      if (v101)
      {
        v102 = *(_QWORD *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map + 8 * v100);
        v369 = v95;
        while (1)
        {
          v103 = *(llvm::Instruction **)(v101 + 24);
          v101 = *(_QWORD *)(v101 + 8);
          v104 = (unsigned __int8 *)*((_QWORD *)v103 - 4 * (*((_DWORD *)v103 + 5) & 0x7FFFFFF));
          if (v104[16] - 11 > 1)
          {
            if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v376 + 384))(v376) & 1) == 0
              && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v104) + 16) > 0x14u)
            {
              goto LABEL_136;
            }
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 40), v103);
            v105 = *(_DWORD *)(v102 + 12);
            switch(v105)
            {
              case 0:
              case 1:
              case 2:
                if (v105 || !*(_BYTE *)(v102 + 16))
                {
                  v107 = (uint64_t *)((char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24));
                  v108 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(v376, (AGCLLVMUserObject *)v104, 2u);
                  LOWORD(v397) = 257;
                  v110 = AGCLLVMBuilder::tryDeducePointeeType(v108, v109);
                  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v107 + 4, v110, (uint64_t)v108, 0, (uint64_t)&__p);
                  v112 = (char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24);
                  LOWORD(v397) = 257;
                  v113 = (llvm::IRBuilderBase *)(v112 + 40);
                  v114 = (llvm::Value *)llvm::ConstantInt::get();
                  Element = llvm::IRBuilderBase::CreateExtractElement(v113, AlignedLoad, v114, (const llvm::Twine *)&__p);
                }
                else
                {
                  Element = AGCLLVMUserObject::buildImageTextureBufferLength(v376, (llvm::Value *)v104);
                }
                v115 = (llvm::Value *)Element;
                v116 = llvm::CallBase::arg_end(v103);
                v117 = (llvm::Type ***)((char *)v103 - 32 * (*((_DWORD *)v103 + 5) & 0x7FFFFFF));
                if (((v116 - (_QWORD)v117) & 0x1FFFFFFFE0) == 0x40)
                {
                  v118 = v376;
                  v119 = AGCLLVMBuilder::i32Extend((AGCLLVMUserObject *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 32), v117[4], 0);
                  v120 = (AGCLLVMUserObject *)((char *)v118 + *(_QWORD *)(*(_QWORD *)v118 - 24) + 40);
                  LOWORD(v397) = 257;
                  LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v120, v115, v119, (const llvm::Twine *)&__p);
                  v122 = llvm::ConstantInt::get();
                  llvm::ConstantInt::get();
                  v123 = (uint64_t *)((char *)v118 + *(_QWORD *)(*(_QWORD *)v118 - 24) + 40);
                  LOWORD(v397) = 257;
                  llvm::IRBuilderBase::CreateICmp(v123, 32, LShr, v122, (uint64_t)&__p);
                  LOWORD(v397) = 257;
                  v95 = v369;
                  llvm::IRBuilderBase::CreateSelect();
                }
                break;
              case 3:
                v124 = (uint64_t *)((char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24));
                v125 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(v376, (AGCLLVMUserObject *)v104, 2u);
                LOWORD(v397) = 257;
                v127 = AGCLLVMBuilder::tryDeducePointeeType(v125, v126);
                v128 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v124 + 4, v127, (uint64_t)v125, 0, (uint64_t)&__p);
                v129 = (char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24);
                LOWORD(v397) = 257;
                v130 = (llvm::IRBuilderBase *)(v129 + 40);
                v131 = (llvm::Value *)llvm::ConstantInt::get();
                llvm::IRBuilderBase::CreateExtractElement(v130, v128, v131, (const llvm::Twine *)&__p);
                break;
              case 4:
                v132 = v376;
                v133 = (uint64_t *)((char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24));
                v134 = (AGCLLVMUserObject *)v104;
                v135 = 5;
                goto LABEL_150;
              case 5:
                v132 = v376;
                v133 = (uint64_t *)((char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24));
                v134 = (AGCLLVMUserObject *)v104;
                v135 = 6;
LABEL_150:
                v136 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(v132, v134, v135);
                LOWORD(v397) = 257;
                v138 = AGCLLVMBuilder::tryDeducePointeeType(v136, v137);
                llvm::IRBuilderBase::CreateAlignedLoad(v133 + 4, v138, (uint64_t)v136, 0, (uint64_t)&__p);
                break;
              default:
                break;
            }
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v103);
LABEL_136:
          if (!v101)
            goto LABEL_192;
        }
      }
LABEL_194:
      llvm::Function::eraseFromParent(v97);
      continue;
    }
    llvm::Value::getName(v97);
    v140 = llvm::StringMapImpl::FindKey();
    if (v140 != -1 && v140 != (unint64_t)dword_1ED839B78)
    {
      __p.__r_.__value_.__r.__words[0] = llvm::Value::getName(v97);
      __p.__r_.__value_.__l.__size_ = v141;
      v142 = llvm::StringRef::find();
      v143 = *((_QWORD *)v97 + 1);
      if (!v143)
        goto LABEL_194;
      v144 = v142;
      do
      {
        v145 = *(llvm::Instruction **)(v143 + 24);
        v143 = *(_QWORD *)(v143 + 8);
        v146 = (unsigned __int8 *)*((_QWORD *)v145 - 4 * (*((_DWORD *)v145 + 5) & 0x7FFFFFF));
        if (v146[16] - 11 > 1)
        {
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 40), v145);
          if (v144 == -1)
          {
            v147 = (uint64_t *)((char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24));
            v148 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(v376, (AGCLLVMUserObject *)v146, 9u);
            LOWORD(v397) = 257;
            v150 = AGCLLVMBuilder::tryDeducePointeeType(v148, v149);
            llvm::IRBuilderBase::CreateAlignedLoad(v147 + 4, v150, (uint64_t)v148, 0, (uint64_t)&__p);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = 0;
            if (AGCLLVMUserObject::isConstantSampler(v376, (llvm::Value *)v146, (unint64_t *)&__p, (unint64_t *)&v403)&& !*(_DWORD *)(*(_QWORD *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 400) + 1780))
            {
              llvm::ConstantInt::get();
            }
            else
            {
              AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)v376, (uint64_t)v146, 2u);
            }
          }
        }
        else
        {
          llvm::UndefValue::get();
        }
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v145);
      }
      while (v143);
      goto LABEL_192;
    }
    llvm::Value::getName(v97);
    v151 = llvm::StringMapImpl::FindKey();
    if (v151 != -1 && v151 != (unint64_t)dword_1ED839BB8)
    {
      v152 = *((_QWORD *)v97 + 1);
      if (!v152)
        goto LABEL_194;
      while (1)
      {
        v153 = *(llvm::Instruction **)(v152 + 24);
        v152 = *(_QWORD *)(v152 + 8);
        v154 = (unsigned __int8 *)*((_QWORD *)v153 - 4 * (*((_DWORD *)v153 + 5) & 0x7FFFFFF));
        if (v154[16] - 11 > 1)
        {
          if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v376 + 384))(v376) & 1) == 0
            && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v154) + 16) > 0x14u)
          {
            goto LABEL_179;
          }
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 40), v153);
          v155 = *(_QWORD *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 400);
          if (*(_QWORD *)(v155 + 968))
            strlen(*(const char **)(v155 + 968));
          inserted = AGCLLVMBuilder::getOrInsertFunction<>();
          v157 = (char *)v374 + *(_QWORD *)(*(_QWORD *)v376 - 24);
          LOWORD(v397) = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)(v157 + 32), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&__p);
        }
        else
        {
          llvm::UndefValue::get();
        }
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v153);
LABEL_179:
        if (!v152)
          goto LABEL_192;
      }
    }
    llvm::Value::getName(v97);
    v158 = llvm::StringMapImpl::FindKey();
    if (v158 != -1 && v158 != (unint64_t)dword_1ED839BD8)
    {
      v160 = *((_QWORD *)v97 + 1);
      if (!v160)
        goto LABEL_194;
      do
      {
        v161 = *(llvm::Instruction **)(v160 + 24);
        v160 = *(_QWORD *)(v160 + 8);
        v162 = (unsigned __int8 *)*((_QWORD *)v161 - 4 * (*((_DWORD *)v161 + 5) & 0x7FFFFFF));
        if (v162[16] - 11 > 1)
        {
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 40), v161);
          v163 = (llvm::Constant **)AGCLLVMUserObject::buildImageHeapIndex(v376, (llvm::Value *)v162);
          v164 = (uint64_t *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 40);
          LOWORD(v397) = 257;
          NullValue = llvm::Constant::getNullValue(*v163, v165);
          llvm::IRBuilderBase::CreateICmp(v164, 32, v163, NullValue, (uint64_t)&__p);
        }
        else
        {
          llvm::UndefValue::get();
        }
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v161);
      }
      while (v160);
LABEL_192:
      v94 = v365;
      if (*((_QWORD *)v97 + 1))
        goto LABEL_193;
      goto LABEL_194;
    }
    llvm::Value::getName(v97);
    v159 = llvm::StringMapImpl::FindKey();
    if (v159 != -1 && v159 != (unint64_t)dword_1ED839128)
    {
      if (*((_QWORD *)v97 + 1))
      {
        v351 = 1;
        continue;
      }
      goto LABEL_194;
    }
  }
  while (v95 != v94);
  v1 = v376;
  v167 = *(_QWORD *)v376;
  if ((v371 & 1) != 0)
  {
    if ((*(unsigned int (**)(AGCLLVMUserObject *))(v167 + 384))(v376))
      v54 = "Could not statically determine the target of a texture write";
    else
      v54 = "Could not resolve texture/sampler references";
    v53 = (std::string *)((char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24) + 8);
LABEL_201:
    std::string::append(v53, v54);
LABEL_202:
    v168 = 0;
    goto LABEL_203;
  }
  v65 = *(_QWORD *)(v167 - 24);
  v66 = v65 + 32;
LABEL_212:
  v170 = *(_QWORD *)((char *)v1 + v65 + 464);
  if (!*(_BYTE *)(v170 + 378))
  {
    v171 = *(llvm::Module **)((char *)v1 + v66 + 336);
    v172 = *(llvm::legacy::PassManager **)(v170 + 368);
    if (!v172)
    {
      PassManager = AGCLLVMCtx::createPassManager((AGCLLVMCtx *)v170);
      *(_QWORD *)(v170 + 368) = PassManager;
      DeadCodeEliminationPass = (llvm::Pass *)llvm::createDeadCodeEliminationPass(PassManager);
      v175 = (llvm *)AGCLLVMCtx::addPass((AGCLLVMCtx *)v170, PassManager, DeadCodeEliminationPass);
      v176 = *(llvm::legacy::PassManager **)(v170 + 368);
      GlobalDCEPass = (llvm::Pass *)llvm::createGlobalDCEPass(v175);
      AGCLLVMCtx::addPass((AGCLLVMCtx *)v170, v176, GlobalDCEPass);
      v172 = *(llvm::legacy::PassManager **)(v170 + 368);
    }
    llvm::legacy::PassManager::run(v172, v171);
  }
  v178 = (_QWORD *)*((_QWORD *)v1 + 103);
  v179 = (_QWORD *)((char *)v1 + 832);
  if (v178 != (_QWORD *)((char *)v1 + 832))
  {
    v180 = MEMORY[0x1E0DE2AB0] + 16;
    do
    {
      v181 = v178[6];
      if (v181)
      {
        if (*(_QWORD *)(v181 + 8))
        {
          Name = (void *)llvm::Value::getName((llvm::Value *)v178[6]);
          if (Name)
            std::string::basic_string[abi:nn180100](&__p, Name, v183);
          else
            memset(&__p, 0, sizeof(__p));
          printMessage((char **)&AGCPrinter, "%s: image or sample GV %s still has references: \n", v184, v185, v186, v187, v188, v189, (char)"void AGCLLVMUserObject::cleanupSamplerGlobalVariables()");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v192 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            do
            {
LABEL_234:
              v181 = *(_QWORD *)(v181 + 8);
              if (!v181)
                goto LABEL_223;
              memset(&v403, 0, sizeof(v403));
              LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
              v398 = 0;
              v399 = 0;
              v400 = 1;
              v396 = 0;
              v397 = 0;
              __p.__r_.__value_.__r.__words[2] = 0;
              __p.__r_.__value_.__r.__words[0] = v180;
              v401 = &v403;
              llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&__p);
              llvm::Value::print(*(llvm::Value **)(v181 + 24), (llvm::raw_ostream *)&__p);
              LOBYTE(v199) = (_BYTE)v401;
              if (SHIBYTE(v401->__r_.__value_.__r.__words[2]) < 0)
                v199 = v401->__r_.__value_.__r.__words[0];
              printMessage((char **)&AGCPrinter, "\t%s\n", v193, v194, v195, v196, v197, v198, v199);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
            }
            while ((SHIBYTE(v403.__r_.__value_.__r.__words[2]) & 0x80000000) == 0);
            v192 = (void *)v403.__r_.__value_.__r.__words[0];
          }
          operator delete(v192);
          goto LABEL_234;
        }
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v178[6]);
      }
LABEL_223:
      v190 = (_QWORD *)v178[1];
      if (v190)
      {
        do
        {
          v191 = v190;
          v190 = (_QWORD *)*v190;
        }
        while (v190);
      }
      else
      {
        do
        {
          v191 = (_QWORD *)v178[2];
          v36 = *v191 == (_QWORD)v178;
          v178 = v191;
        }
        while (!v36);
      }
      v178 = v191;
    }
    while (v191 != v179);
  }
  v200 = v376;
  std::__tree<llvm::WeakVH>::destroy(*((_QWORD **)v376 + 104));
  *((_QWORD *)v376 + 103) = v179;
  *((_OWORD *)v376 + 52) = 0u;
  v201 = *((_DWORD *)v376 + 192);
  if (v201 || *((_DWORD *)v376 + 193))
  {
    v202 = (llvm **)((char *)v376 + 760);
    v203 = *((unsigned int *)v376 + 194);
    if (v203 <= 4 * v201 || v203 < 0x41)
    {
      v396 = -4096;
      v404 = -8192;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 2uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E7EB7DA8;
      v397 = 0;
      *(_OWORD *)&v403.__r_.__value_.__r.__words[1] = 2uLL;
      v403.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E7EB7DA8;
      v405 = 0;
      if ((_DWORD)v203)
      {
        v208 = *v202;
        v209 = 48 * v203;
        v210 = (_QWORD *)((char *)v208 + 32);
        do
        {
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v210 - 3), &__p.__r_.__value_.__l.__size_);
          *v210 = v397;
          v210 += 6;
          v209 -= 48;
        }
        while (v209);
        v211 = v404;
        *((_QWORD *)v376 + 96) = 0;
        if (v211 != -8192 && v211 != -4096 && v211 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v403.__r_.__value_.__r.__words[1]);
      }
      else
      {
        *((_QWORD *)v376 + 96) = 0;
      }
      if (v396 != -8192 && v396 != -4096 && v396)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&__p.__r_.__value_.__r.__words[1]);
    }
    else
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)v376 + 760);
      v204 = 1 << (33 - __clz(v201 - 1));
      if (v204 <= 64)
        v204 = 64;
      if (v201)
        v205 = v204;
      else
        v205 = 0;
      if (v205 != *((_DWORD *)v376 + 194))
      {
        llvm::deallocate_buffer(*v202, (void *)(48 * v203));
        if (!v205)
        {
          *v202 = 0;
          *((_QWORD *)v376 + 96) = 0;
          *((_DWORD *)v376 + 194) = 0;
          goto LABEL_267;
        }
        v206 = (4 * v205 / 3u + 1) | ((unint64_t)(4 * v205 / 3u + 1) >> 1);
        v207 = v206 | (v206 >> 2) | ((v206 | (v206 >> 2)) >> 4);
        LODWORD(v207) = (((v207 | (v207 >> 8)) >> 16) | v207 | (v207 >> 8)) + 1;
        *((_DWORD *)v376 + 194) = v207;
        *((_QWORD *)v376 + 95) = MEMORY[0x1CAA2C6C0](48 * v207, 8);
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty((uint64_t)v376 + 760);
    }
  }
LABEL_267:
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v376 + 784);
  if (*((_QWORD *)v376 + 112) != *((_QWORD *)v376 + 113))
  {
    v213 = *(_QWORD *)(*(_QWORD *)v376 - 24) + 32;
    v214 = *(_QWORD *)((char *)v376 + v213 + 336);
    v215 = v214 + 8;
    v216 = *(_QWORD *)(v214 + 16);
    if (v216 == v214 + 8)
    {
      v217 = 0;
      v233 = 0;
    }
    else
    {
      v217 = 0;
      v218 = 0;
      v219 = 0;
      do
      {
        if (v216)
          v220 = (llvm::GlobalObject *)(v216 - 56);
        else
          v220 = 0;
        if (*((_QWORD *)v220 + 1))
        {
          if ((*((_BYTE *)v220 + 34) & 0x40) != 0
            && (v221 = (_QWORD *)llvm::GlobalObject::getSectionImpl(v220), v222 == 11)
            && (*v221 == 0x74735F6567616D69
              ? (v223 = *(_QWORD *)((char *)v221 + 3) == 0x65746174735F6567)
              : (v223 = 0),
                v223))
          {
            if (*(_BYTE *)(*(_QWORD *)v220 + 8) == 17)
              v217 = (v217 + *(_DWORD *)(*(_QWORD *)v220 + 32));
            else
              v217 = (v217 + 1);
          }
          else if ((*((_BYTE *)v220 + 34) & 0x40) != 0
                 && (v224 = (_QWORD *)llvm::GlobalObject::getSectionImpl(v220), v225 == 13)
                 && (*v224 == 0x5F72656C706D6173
                   ? (v226 = *(_QWORD *)((char *)v224 + 5) == 0x65746174735F7265)
                   : (v226 = 0),
                     v226))
          {
            ++v219;
          }
          else if ((*((_BYTE *)v220 + 34) & 0x40) != 0
                 && (SectionImpl = (_QWORD *)llvm::GlobalObject::getSectionImpl(v220), v228 == 15)
                 && (*SectionImpl == 0x746E6174736E6F63
                   ? (v229 = *(_QWORD *)((char *)SectionImpl + 7) == 0x7265766972645F74)
                   : (v229 = 0),
                     v229)
                 || (*((_BYTE *)v220 + 34) & 0x40) != 0
                 && (v230 = (_QWORD *)llvm::GlobalObject::getSectionImpl(v220), v231 == 16)
                 && (*v230 == 0x746E6174736E6F63 ? (v232 = v230[1] == 0x72656C706D61735FLL) : (v232 = 0), v232))
          {
            ++v218;
          }
        }
        v216 = *(_QWORD *)(v216 + 8);
      }
      while (v216 != v215);
      v200 = v376;
      v213 = *(_QWORD *)(*(_QWORD *)v376 - 24) + 32;
      v233 = (v218 + v219);
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)v200 + v213 + 368) + 496))(*(_QWORD *)((char *)v200 + v213 + 368), v217, v233) & 1) == 0)
    {
      std::to_string(&v402, v233 + v217);
      v345 = std::string::insert(&v402, 0, "Total number of textures and samplers (");
      v346 = v345->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
      v403.__r_.__value_.__r.__words[2] = v346;
      v345->__r_.__value_.__l.__size_ = 0;
      v345->__r_.__value_.__r.__words[2] = 0;
      v345->__r_.__value_.__r.__words[0] = 0;
      v347 = std::string::append(&v403, ") exceeds GPU allowance.");
      v348 = v347->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v347->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v348;
      v347->__r_.__value_.__l.__size_ = 0;
      v347->__r_.__value_.__r.__words[2] = 0;
      v347->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 8), (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v402.__r_.__value_.__l.__data_);
      goto LABEL_202;
    }
  }
  if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v200 + 392))(v200) & 1) == 0)
  {
    v234 = *(_QWORD *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 368);
    v235 = *(_QWORD *)(v234 + 32);
    v353 = v234 + 24;
    if (v235 != v234 + 24)
    {
      v356 = (char *)v200 + 192;
      v236 = (char *)v200 + 8;
      v352 = (char *)v200 + 64;
      v370 = (char *)v200 + 8;
      do
      {
        v354 = *(_QWORD *)(v235 + 8);
        if (v235)
          v237 = (llvm::Value *)(v235 - 56);
        else
          v237 = 0;
        v238 = *(_QWORD *)&v355[*(_QWORD *)(*(_QWORD *)v200 - 24) + 32];
        v375 = v237;
        v239 = llvm::Value::getName(v237);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v238 + 896))(v238, v239, v240))
        {
          if (*(_BYTE *)(*(_QWORD *)&v355[*(_QWORD *)(*(_QWORD *)v200 - 24) + 32] + 1751)
            && llvm::Value::hasNUsesOrMore(v375))
          {
            if ((v241 & 1) == 0
            {
              AGCLLVMUserObject::replaceIndirectTextureWriteFunctionUses(llvm::Function *)::force_inline_env_var = 1;
            }
            v242 = AGCLLVMUserObject::replaceIndirectTextureWriteFunctionUses(llvm::Function *)::force_inline_env_var != 0;
          }
          else
          {
            v242 = 1;
          }
          v357 = v242;
          v243 = *((_QWORD *)v375 + 1);
          if (v243)
          {
            v366 = 0;
            do
            {
              v244 = 0;
              v245 = *(_QWORD *)(v243 + 24);
              v360 = *(_QWORD *)(v243 + 8);
              v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v402.__r_.__value_.__r.__words[2];
              v402.__r_.__value_.__l.__size_ = 0x1000000000;
              while (1)
              {
                v246 = llvm::CallBase::arg_end((llvm::CallBase *)v245);
                v247 = v245 - 32 * (*(_DWORD *)(v245 + 20) & 0x7FFFFFF);
                if (v244 >= ((unint64_t)(v246 - v247) >> 5))
                {
                  v363 = 0;
                  v249 = 0;
                  LODWORD(v244) = 0;
                  goto LABEL_341;
                }
                v248 = *(_QWORD *)(v247 + 32 * v244);
                v249 = *(_QWORD *)v248;
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v402, v248);
                v250 = *(unsigned __int8 *)(v248 + 16);
                do
                {
                  if (v250 != 77)
                    break;
                  v248 = *(_QWORD *)(v248 - 32);
                  v250 = *(unsigned __int8 *)(v248 + 16);
                }
                while (v248);
                if (v250 == 84)
                {
                  v251 = *(_QWORD *)(v248 - 32);
                  if (v251)
                  {
                    if (!*(_BYTE *)(v251 + 16) && *(_QWORD *)(v251 + 24) == *(_QWORD *)(v248 + 72))
                    {
                      v252 = (_QWORD *)llvm::Value::getName((llvm::Value *)v251);
                      if (v253 == 21)
                      {
                        v254 = *v252 == 0x7867612E6D766C6CLL && v252[1] == 0x657275747865742ELL;
                        if (v254 && *(_QWORD *)((char *)v252 + 13) == 0x6574617453657275)
                          break;
                      }
                    }
                  }
                }
                ++v244;
              }
              v363 = *(_QWORD *)(v248 - 32 * (*(_DWORD *)(v248 + 20) & 0x7FFFFFF) + 32);
LABEL_341:
              v256 = (v244 + 1);
              for (i = v245 + 32 * v256; ; i += 32)
              {
                v258 = llvm::CallBase::arg_end((llvm::CallBase *)v245);
                v259 = *(_DWORD *)(v245 + 20) & 0x7FFFFFF;
                if (v256 >= ((v258
                                                         - (v245
                                                          + 32 * (unint64_t)-(int)v259)) >> 5))
                  break;
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v402, *(_QWORD *)(i - 32 * v259));
                LODWORD(v256) = v256 + 1;
              }
              v260 = v363;
              if (v363 && *(unsigned __int8 *)(v363 + 16) >= 0x15u)
              {
                Function = (uint64_t)v366;
                v262 = v357;
                if (v366)
                  v262 = 1;
                v372 = v249;
                if ((v262 & 1) == 0)
                {
                  v263 = llvm::Value::getName(v375);
                  v264 = *(_QWORD *)&v355[*(_QWORD *)(*(_QWORD *)v200 - 24) + 32];
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v264 + 904))(v264, v263, v265))
                  {
                    v266 = *(_QWORD *)(v245 - 32 * (*(_DWORD *)(v245 + 20) & 0x7FFFFFF));
                    v267 = (_QWORD *)(v266 + 24);
                    if (*(_DWORD *)(v266 + 32) >= 0x41u)
                      v267 = (_QWORD *)*v267;
                    v268 = v375;
                    v269 = *(_DWORD *)v267;
                  }
                  else
                  {
                    v269 = -1;
                    v268 = v375;
                  }
                  v386.n128_u64[0] = llvm::Value::getName(v268);
                  v386.n128_u64[1] = v270;
                  if (v269 < 0)
                    v271 = 8;
                  else
                    v271 = 9;
                  if (v269 < 0)
                    v272 = "llvm.agx";
                  else
                    v272 = "llvm.agx2";
                  llvm::StringRef::split(&v383, &v386, (uint64_t)v272, v271);
                  if (__src)
                  {
                    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
                  }
                  else
                  {
                    __dst = 0;
                    v381 = 0;
                    v382 = 0;
                  }
                  v358 = v269;
                  if (v269 < 0)
                  {
                    v277 = v356;
                    std::string::basic_string[abi:nn180100]<0>(&v379, "agx.air.indirect");
                  }
                  else
                  {
                    std::string::basic_string[abi:nn180100]<0>(&__p, "agx2.air.indirect.format");
                    std::to_string(&v403, v269);
                    if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v273 = &v403;
                    else
                      v273 = (std::string *)v403.__r_.__value_.__r.__words[0];
                    if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v274 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
                    else
                      v274 = v403.__r_.__value_.__l.__size_;
                    v275 = std::string::append(&__p, (const std::string::value_type *)v273, v274);
                    v276 = v275->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v379.__r_.__value_.__l.__data_ = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
                    v379.__r_.__value_.__r.__words[2] = v276;
                    v275->__r_.__value_.__l.__size_ = 0;
                    v275->__r_.__value_.__r.__words[2] = 0;
                    v275->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v403.__r_.__value_.__l.__data_);
                    v277 = v356;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (v382 >= 0)
                    p_dst = (const std::string::value_type *)&__dst;
                  else
                    p_dst = (const std::string::value_type *)__dst;
                  if (v382 >= 0)
                    v279 = HIBYTE(v382);
                  else
                    v279 = v381;
                  std::string::append(&v379, p_dst, v279);
                  Function = llvm::Module::getFunction();
                  if (!Function)
                  {
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
                    __p.__r_.__value_.__l.__size_ = 0x1000000000;
                    v281 = v375;
                    if ((*((_BYTE *)v375 + 18) & 1) != 0)
                    {
                      llvm::Function::BuildLazyArguments(v375);
                      v281 = v375;
                    }
                    for (j = (uint64_t *)*((_QWORD *)v281 + 11); ; j += 5)
                    {
                      if ((*((_WORD *)v281 + 9) & 1) != 0)
                      {
                        llvm::Function::BuildLazyArguments(v375);
                        v281 = v375;
                      }
                      if (j == (uint64_t *)(*((_QWORD *)v281 + 11) + 40 * *((_QWORD *)v281 + 12)))
                        break;
                      v283 = *j;
                      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v283);
                      v281 = v375;
                    }
                    Int16Ty = llvm::Type::getInt16Ty(*(llvm::Type **)&v352[*(_QWORD *)(*(_QWORD *)v200 - 24) + 40], v280);
                    *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v244) = Int16Ty;
                    llvm::FunctionType::get();
                    llvm::Module::getOrInsertFunction();
                    v403.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403.__r_.__value_.__r.__words[2];
                    v403.__r_.__value_.__l.__size_ = 0x1000000000;
                    v367 = v285;
                    if (*((_QWORD *)v285 + 12))
                    {
                      v286 = 0;
                      v287 = 0;
                      do
                      {
                        if ((*((_WORD *)v285 + 9) & 1) != 0)
                        {
                          llvm::Function::BuildLazyArguments(v367);
                          v285 = v367;
                        }
                        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v403, *((_QWORD *)v285 + 11) + v286);
                        v285 = v367;
                        ++v287;
                        v286 += 40;
                      }
                      while (v287 < *((_QWORD *)v367 + 12));
                    }
                    v377[0] = "entry";
                    v378 = 259;
                    v288 = v285;
                    operator new();
                    v289 = llvm::BasicBlock::BasicBlock();
                    v290 = (char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24);
                    v291 = v289 + 40;
                    *((_QWORD *)v290 + 11) = v289;
                    *((_QWORD *)v290 + 12) = v289 + 40;
                    v292 = v289;
                    v377[0] = "cleanup";
                    v378 = 259;
                    operator new();
                    v293 = llvm::BasicBlock::BasicBlock();
                    v294 = (char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24);
                    v364 = (llvm::BasicBlock *)v293;
                    *((_QWORD *)v294 + 11) = v293;
                    *((_QWORD *)v294 + 12) = v293 + 40;
                    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserObject *)((char *)v200
                                                                           + *(_QWORD *)(*(_QWORD *)v200 - 24)
                                                                           + 40));
                    v295 = (char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24);
                    *((_QWORD *)v295 + 11) = v292;
                    *((_QWORD *)v295 + 12) = v291;
                    v296 = *(_QWORD *)(*(_QWORD *)v200 - 24);
                    v297 = v296;
                    if ((*((_WORD *)v288 + 9) & 1) != 0)
                    {
                      llvm::Function::BuildLazyArguments(v288);
                      v297 = *(_QWORD *)(*(_QWORD *)v200 - 24);
                    }
                    v298 = *((_QWORD *)v288 + 11) + 40 * v244;
                    v299 = v244;
                    v300 = *(_QWORD *)&v277[v297 + 32];
                    v378 = 257;
                    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v200 + v296 + 40, 38, v298, v300, (uint64_t)v377);
                    v362 = *((_DWORD *)v200 + 829);
                    llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40), Cast, (uint64_t)v364, v362);
                    if (v358 < 0)
                    {
                      v305 = (uint64_t)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40;
                      v359 = llvm::ConstantInt::get();
                      v306 = llvm::PointerType::get();
                      v378 = 257;
                      v307 = llvm::IRBuilderBase::CreateCast(v305, 48, v359, v306, (uint64_t)v377);
                      *(_QWORD *)(v403.__r_.__value_.__r.__words[0] + 8) = v307;
                      v308 = (uint64_t)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40;
                      v309 = llvm::ConstantInt::get();
                      v310 = llvm::PointerType::get();
                      v378 = 257;
                      v311 = llvm::IRBuilderBase::CreateCast(v308, 48, v309, v310, (uint64_t)v377);
                      *(_QWORD *)(v403.__r_.__value_.__r.__words[0] + 16) = v311;
                    }
                    else
                    {
                      *(_QWORD *)v403.__r_.__value_.__l.__data_ = llvm::ConstantInt::get();
                      v301 = (uint64_t)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40;
                      v302 = llvm::ConstantInt::get();
                      v303 = llvm::PointerType::get();
                      v378 = 257;
                      v304 = llvm::IRBuilderBase::CreateCast(v301, 48, v302, v303, (uint64_t)v377);
                      *(_QWORD *)(v403.__r_.__value_.__r.__words[0] + 24) = v304;
                    }
                    if (v362)
                    {
                      v312 = 0;
                      do
                      {
                        llvm::ConstantInt::get();
                        v313 = v299;
                        v314 = llvm::ConstantInt::get();
                        v377[0] = "indirect.switch.case";
                        v378 = 259;
                        v315 = operator new();
                        llvm::BasicBlock::BasicBlock();
                        llvm::SwitchInst::addCase();
                        v316 = (char *)v376 + *(_QWORD *)(*(_QWORD *)v376 - 24);
                        *((_QWORD *)v316 + 11) = v315;
                        *((_QWORD *)v316 + 12) = v315 + 40;
                        v317 = (AGCLLVMUserObject *)v314;
                        v299 = v313;
                        v200 = v376;
                        v318 = AGCLLVMUserObject::buildImageArgumentPointer(v376, v317, 1u);
                        v319 = (uint64_t)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40;
                        v378 = 257;
                        v320 = llvm::IRBuilderBase::CreateCast(v319, 49, v318, v249, (uint64_t)v377);
                        *(_QWORD *)(v403.__r_.__value_.__r.__words[0] + 8 * v313) = v320;
                        v321 = (uint64_t)&v370[*(_QWORD *)(*(_QWORD *)v376 - 24) + 32];
                        v378 = 257;
                        llvm::IRBuilderBase::CreateCall(v321, *((_QWORD *)v375 + 3), (uint64_t)v375, (uint64_t)v403.__r_.__value_.__l.__data_, LODWORD(v403.__r_.__value_.__r.__words[1]), (uint64_t)v377);
                        llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40), v364);
                        ++v312;
                      }
                      while (v362 > (unsigned __int16)v312);
                    }
                    llvm::Function::addFnAttr();
                    if ((std::string::size_type *)v403.__r_.__value_.__l.__data_ != &v403.__r_.__value_.__r.__words[2])
                      free(v403.__r_.__value_.__l.__data_);
                    v236 = v370;
                    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
                      free(__p.__r_.__value_.__l.__data_);
                    Function = (uint64_t)v367;
                  }
                  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v322 = Function;
                    operator delete(v379.__r_.__value_.__l.__data_);
                    Function = v322;
                  }
                  if (SHIBYTE(v382) < 0)
                  {
                    v323 = Function;
                    operator delete(__dst);
                    Function = v323;
                  }
                  v260 = v363;
                }
                v366 = (llvm::Function *)Function;
                v324 = *(_QWORD *)(v245 + 40);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.tex.write.end";
                LOWORD(v397) = 259;
                v325 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
                v326 = *(_QWORD *)(v324 + 40);
                if (v326 == v324 + 40)
                {
                  v329 = 0;
                }
                else
                {
                  v327 = (llvm::Instruction *)(v326 - 24);
                  if (v326)
                    v328 = v326 - 24;
                  else
                    v328 = 0;
                  if (*(unsigned __int8 *)(v328 + 16) - 29 >= 0xB)
                    v329 = 0;
                  else
                    v329 = v327;
                }
                llvm::Instruction::eraseFromParent(v329);
                v330 = (char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24);
                *((_QWORD *)v330 + 11) = v324;
                *((_QWORD *)v330 + 12) = v324 + 40;
                v331 = *(_QWORD *)(*(_QWORD *)v200 - 24);
                v332 = *(_QWORD *)&v356[v331 + 32];
                LOWORD(v397) = 257;
                v333 = llvm::IRBuilderBase::CreateCast((uint64_t)v200 + v331 + 40, 38, v260, v332, (uint64_t)&__p);
                if ((v357 & 1) != 0)
                {
                  v334 = *((_DWORD *)v200 + 829);
                  llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40), v333, (uint64_t)v325, v334);
                  if (v334)
                  {
                    v335 = 0;
                    do
                    {
                      llvm::ConstantInt::get();
                      v336 = llvm::ConstantInt::get();
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.case";
                      LOWORD(v397) = 259;
                      v337 = operator new();
                      llvm::BasicBlock::BasicBlock();
                      llvm::SwitchInst::addCase();
                      v338 = (char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24);
                      *((_QWORD *)v338 + 11) = v337;
                      *((_QWORD *)v338 + 12) = v337 + 40;
                      v339 = (AGCLLVMUserObject *)v336;
                      v236 = v370;
                      v340 = AGCLLVMUserObject::buildImageArgumentPointer(v200, v339, 1u);
                      v341 = (uint64_t)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40;
                      LOWORD(v397) = 257;
                      v342 = llvm::IRBuilderBase::CreateCast(v341, 49, v340, v372, (uint64_t)&__p);
                      *(_QWORD *)(v402.__r_.__value_.__r.__words[0] + 8 * v244) = v342;
                      v343 = (uint64_t)&v370[*(_QWORD *)(*(_QWORD *)v200 - 24) + 32];
                      LOWORD(v397) = 257;
                      llvm::IRBuilderBase::CreateCall(v343, *((_QWORD *)v375 + 3), (uint64_t)v375, (uint64_t)v402.__r_.__value_.__l.__data_, LODWORD(v402.__r_.__value_.__r.__words[1]), (uint64_t)&__p);
                      llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40), v325);
                      ++v335;
                    }
                    while (v334 > (unsigned __int16)v335);
                  }
                }
                else
                {
                  *(_QWORD *)(v402.__r_.__value_.__r.__words[0] + 8 * v244) = v333;
                  v344 = (uint64_t)&v236[*(_QWORD *)(*(_QWORD *)v200 - 24) + 32];
                  LOWORD(v397) = 257;
                  llvm::IRBuilderBase::CreateCall(v344, *((_QWORD *)v366 + 3), (uint64_t)v366, (uint64_t)v402.__r_.__value_.__l.__data_, LODWORD(v402.__r_.__value_.__r.__words[1]), (uint64_t)&__p);
                  llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)v200 + *(_QWORD *)(*(_QWORD *)v200 - 24) + 40), v325);
                }
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent((llvm::Instruction *)v245);
              }
              v243 = v360;
              if ((std::string::size_type *)v402.__r_.__value_.__l.__data_ != &v402.__r_.__value_.__r.__words[2])
                free(v402.__r_.__value_.__l.__data_);
            }
            while (v360);
          }
        }
        v235 = v354;
      }
      while (v354 != v353);
    }
  }
  if ((v351 & 1) != 0)
  {
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)v200, 0, 0);
    v168 = 1;
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)v200, 0, 1);
    AGCLLVMUserObject::buildImageTextureBufferLength(v200, 0);
  }
  else
  {
    v168 = 1;
  }
LABEL_203:
  if (v387[0] != v388)
    free(v387[0]);
  if (v389 != v391)
    free(v389);
  if (v392 != v394)
    free(v392);
  return v168;
}

void std::__tree<llvm::WeakVH>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<llvm::WeakVH>::destroy(*a1);
    std::__tree<llvm::WeakVH>::destroy(a1[1]);
    v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 4));
    operator delete(a1);
  }
}

BOOL AGCLLVMUserObject::areIndirectTextureWritesSupported(AGCLLVMUserObject *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  return (!*((_BYTE *)this + 14) || *(_BYTE *)(v1 + 1751)) && *(_BYTE *)(v1 + 1738) != 0;
}

void AGCLLVMUserObject::getGetNullTextureFunctionSet(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set = 0;
      *(_QWORD *)&dword_1ED839BF8 = 0;
      qword_1ED839C00 = 0x800000000;
      __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set, &dword_1C3C54000);
    }
  }
}

void AGCLLVMUserObject::getTextureFenceFunctionSet(AGCLLVMUserObject *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set = 0;
      *(_QWORD *)&dword_1ED839BB8 = 0;
      qword_1ED839BC0 = 0x800000000;
      __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, &dword_1C3C54000);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

BOOL AGCLLVMGen2TargetLowerer::checkMaxTexturesAndSamplers(AGCLLVMGen2TargetLowerer *this, int a2, int a3)
{
  return (2 * a3 + 8 * a2) < 0x1000;
}

uint64_t AGCLLVMUserVertexShader::setupShaderOutputs(AGCLLVMUserVertexShader *this)
{
  AGCLLVMUserVertexShader *v1;
  llvm::CallBase *v2;
  uint64_t v3;
  llvm::Value **v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int8x8_t v8;
  char *v9;
  int v10;
  uint8x8_t v11;
  llvm::Value *v12;
  uint64_t *v13;
  llvm::Type **v14;
  llvm::Type *v15;
  llvm::Value *AlignedLoad;
  llvm::Type *v17;
  llvm::Value *v18;
  llvm::IRBuilderBase *v19;
  llvm::Type **GEP;
  uint64_t *v21;
  llvm::Value *v22;
  llvm::Type *v23;
  _BYTE *v24;
  llvm::Type *v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v30;
  llvm::Value *v31;
  llvm::Type *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40;
  GenericVaryingAllocator *v41;
  char *v42;
  uint64_t v43;
  const llvm::Type **v44;
  int ComponentType;
  int v46;
  unint64_t v47;
  uint64_t v48;
  llvm::BasicBlock *v49;
  uint64_t v50;
  llvm::Value *v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Type **v54;
  llvm::Value *DriverGlobalConstant;
  llvm::Type **v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t String;
  uint64_t v66;
  uint64_t v67;
  llvm::Value *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v74;
  BOOL v75;
  BOOL v79;
  BOOL v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  const char *v86;
  const char *Value;
  const char *v88;
  const char *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  const std::string::value_type *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Value *v100;
  uint64_t v101;
  llvm::Value *Mul;
  int v103;
  uint64_t v104;
  llvm::IRBuilderBase *v105;
  int v106;
  llvm::IRBuilderBase *v107;
  llvm::Value *v108;
  llvm::Value *v109;
  llvm::IRBuilderBase *v110;
  llvm::Value *v111;
  llvm::Value *v112;
  llvm::IRBuilderBase *v113;
  llvm::Value *v114;
  llvm::Value *v115;
  llvm::IRBuilderBase *v116;
  llvm::Value *v117;
  llvm::Value *v118;
  llvm::IRBuilderBase *v119;
  llvm::Value *v120;
  llvm::Value *v121;
  llvm::IRBuilderBase *v122;
  llvm::Value *v123;
  llvm::Value *v124;
  llvm::IRBuilderBase *v125;
  llvm::Value *v126;
  llvm::Value *v127;
  llvm::IRBuilderBase *v128;
  llvm::Value *v129;
  llvm::Value *v130;
  llvm::IRBuilderBase *v131;
  llvm::Value *v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  llvm::Value *SinglePredecessor;
  int *v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t i;
  unsigned int *v165;
  _DWORD *v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int *v172;
  unsigned int *v173;
  llvm::Instruction *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  unsigned int v181;
  llvm::Value *v182;
  unsigned int v183;
  llvm *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  _QWORD *v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  unsigned int *v195;
  _DWORD *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int *v200;
  unsigned int *v201;
  llvm::Instruction *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  llvm::Value *v213;
  llvm::Value *v214;
  unint64_t v215;
  unsigned int v216;
  llvm::Value *v217;
  llvm::IRBuilderBase *v218;
  llvm::Value *v219;
  llvm::Value *v220;
  llvm::IRBuilderBase *v221;
  llvm::Value *v222;
  llvm::Value *v223;
  llvm::IRBuilderBase *v224;
  llvm::Value *v225;
  llvm::Value *v226;
  llvm::IRBuilderBase *v227;
  llvm::Value *v228;
  llvm::Value *v229;
  llvm::IRBuilderBase *v230;
  llvm::Value *v231;
  llvm::Value *v232;
  llvm::IRBuilderBase *v233;
  llvm::Value *v234;
  llvm::Value *v235;
  llvm::IRBuilderBase *v236;
  llvm::Value *v237;
  llvm::Value *v238;
  llvm::IRBuilderBase *v239;
  llvm::Value *v240;
  llvm::Value *v241;
  llvm::IRBuilderBase *v242;
  llvm::Value *v243;
  llvm::IRBuilderBase *v244;
  llvm::Value *v245;
  llvm::Value *Sub;
  llvm::Value *v247;
  uint64_t v248;
  llvm::Value *v249;
  llvm::IRBuilderBase *v250;
  char *v251;
  llvm::Value *v252;
  llvm::Value *v253;
  llvm::IRBuilderBase *v254;
  llvm::Value *v255;
  llvm::Value *v256;
  int v257;
  uint64_t v258;
  llvm::IRBuilderBase *v259;
  uint64_t v260;
  BOOL v261;
  llvm::Value *v262;
  llvm::Value *v263;
  int v264;
  uint64_t v265;
  llvm::IRBuilderBase *v266;
  _BOOL4 v267;
  llvm::Value *v268;
  uint64_t v269;
  llvm::Value *v270;
  llvm::IRBuilderBase *v271;
  uint64_t v272;
  llvm::IRBuilderBase *v273;
  llvm::Value *v274;
  int v275;
  uint64_t v276;
  llvm::IRBuilderBase *v277;
  llvm::IRBuilderBase *v278;
  llvm::Value *v279;
  llvm::Value *v280;
  int v281;
  uint64_t v282;
  llvm::IRBuilderBase *v283;
  int v284;
  llvm::IRBuilderBase *v285;
  llvm::Value *v286;
  llvm::Value *v287;
  llvm::Value *v288;
  llvm::Value *v289;
  llvm::Value *v290;
  llvm::Value *v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  _BOOL4 v296;
  unint64_t v297;
  unsigned int v298;
  _QWORD *v299;
  unint64_t v300;
  _DWORD *v301;
  _QWORD *v302;
  unsigned int v303;
  llvm::IRBuilderBase *v304;
  _QWORD *v305;
  llvm::Value *v306;
  llvm::Value *v307;
  llvm::Value *v308;
  llvm::Value *v309;
  llvm::Value *v310;
  unsigned __int8 *v311;
  BOOL v312;
  uint64_t v313;
  llvm::IRBuilderBase *v314;
  llvm::Value *v315;
  llvm::Value *v316;
  int v317;
  llvm::Value **v318;
  _QWORD *v319;
  llvm::IRBuilderBase *v320;
  llvm::Value *v321;
  llvm::Type *v322;
  uint64_t v323;
  llvm::Value *v324;
  int v325;
  uint64_t v326;
  llvm::IRBuilderBase *v327;
  llvm::Value *v328;
  uint64_t InsertElement;
  uint64_t v330;
  uint64_t v331;
  unsigned __int8 *v332;
  uint64_t v333;
  unsigned __int8 *v334;
  llvm::Constant **v335;
  llvm::Value *v336;
  llvm::Value *v337;
  char *v338;
  uint64_t v339;
  unsigned __int8 *v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  llvm::Instruction *v359;
  llvm::Type **v360;
  char *v361;
  llvm::IRBuilderBase *v362;
  uint64_t v363;
  uint64_t v364;
  llvm::Value *v365;
  llvm::Value *v366;
  llvm::IRBuilderBase *v367;
  uint64_t v368;
  uint64_t v369;
  llvm::Value *v370;
  llvm::Value *v371;
  uint64_t v372;
  llvm::Type *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  llvm::Value *v377;
  llvm::IRBuilderBase *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  llvm::Value *v383;
  uint64_t v384;
  llvm::Instruction *v385;
  uint64_t v386;
  llvm::Instruction *v387;
  char *v388;
  llvm::GlobalVariable *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  llvm::Value *v395;
  llvm::Type *v396;
  llvm::CmpInst **v397;
  uint64_t v398;
  uint64_t ICmp;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  unsigned __int8 *v404;
  llvm::IRBuilderBase *v405;
  llvm::Value *v406;
  llvm::Value *v407;
  llvm::Value *v408;
  llvm::Value *v409;
  llvm::Value *v410;
  uint64_t v411;
  _BYTE *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  llvm::IRBuilderBase *v417;
  llvm::Value *v418;
  llvm::Value *v419;
  llvm::Value *v420;
  llvm::Value *v421;
  llvm::Value *v422;
  llvm::Value *v423;
  llvm::IRBuilderBase *v424;
  llvm::Value *v425;
  llvm::Value *v426;
  llvm::Value *v427;
  llvm::Value *v428;
  llvm::Value *v429;
  int v430;
  uint64_t v431;
  unsigned __int8 *v432;
  int v433;
  llvm::Value *v434;
  AGCLLVMBuilder *v435;
  llvm::Value *v436;
  llvm::Value *v437;
  llvm::Value *v438;
  llvm::IRBuilderBase *v439;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v441;
  llvm::Value *v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  AGCLLVMBuilder *v446;
  llvm::Value *v447;
  llvm::Value *v448;
  llvm::Value *v449;
  llvm::IRBuilderBase *v450;
  llvm::Value *v451;
  llvm::IRBuilderBase *v452;
  llvm::Value *v453;
  llvm::Value *v454;
  llvm::IRBuilderBase *v455;
  llvm::Value *v456;
  llvm::IRBuilderBase *v457;
  llvm::IRBuilderBase *v458;
  llvm::Value *v459;
  llvm::Value *v460;
  llvm::Value *v461;
  llvm::Value *v462;
  uint64_t v463;
  int v464;
  int v465;
  llvm::Value *v466;
  llvm::IRBuilderBase *v467;
  llvm::Value *v468;
  llvm::Value *v469;
  llvm::Value *v470;
  llvm::Value *v471;
  llvm::Value *v472;
  llvm::Value *v473;
  uint64_t *v474;
  uint64_t v475;
  const std::string::value_type *p_dst;
  std::string::size_type v478;
  uint64_t v479;
  llvm::Function *Function;
  llvm::Value *v481;
  llvm::Value *v482;
  uint64_t *v483;
  llvm::Type **NullValue;
  llvm::Type **Add;
  uint64_t v486;
  char *v487;
  llvm::Value *v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  llvm::BasicBlock *v494;
  llvm::BasicBlock *v495;
  llvm::BasicBlock *v496;
  unsigned __int8 *v497;
  llvm::Value *v498;
  llvm::Value *v499;
  uint64_t v500;
  llvm::Value *v501;
  llvm::Value *v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  int v508;
  int v509;
  _BYTE v510[32];
  __int16 v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  void *__p;
  uint64_t v516;
  uint64_t v517;
  _BYTE v518[8];
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  char v522;
  char v523;
  const char *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  char v531;
  const char *v532;
  uint64_t v533;
  llvm::Type **v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char v538;
  char v539;
  const char *v540;
  uint64_t v541;
  llvm::Type **v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546[2];
  _BYTE v547[64];
  _OWORD v548[4];
  void *v549;
  uint64_t v550;
  _BYTE v551[64];
  void *v552;
  uint64_t v553;
  _BYTE v554[256];
  llvm::Value *v555[2];
  uint64_t v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  __int128 __dst;
  __int128 v561;
  uint64_t v562;
  uint64_t v563;
  char v564;
  uint64_t v565;

  v1 = this;
  v565 = *MEMORY[0x1E0C80C00];
  v504 = (char *)this + 4880;
  Function = (llvm::Function *)llvm::Module::getFunction();
  v2 = *(llvm::CallBase **)(*((_QWORD *)Function + 1) + 24);
  v3 = llvm::CallBase::arg_end(v2);
  v483 = (uint64_t *)v2;
  v4 = (llvm::Value **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (_QWORD)v4) & 0x1FFFFFFFE0) == 0)
  {
    v6 = 0;
    v481 = 0;
    v5 = 0;
    v552 = v554;
    v553 = 0x1000000000;
    v549 = v551;
    v550 = 0x1000000000;
LABEL_6:
    v7 = 1;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)*v4;
  v481 = *v4;
  if (*(_BYTE *)(v5 + 8) == 16)
  {
    v6 = *(unsigned int *)(v5 + 12);
    v552 = v554;
    v553 = 0x1000000000;
    v549 = v551;
    v550 = 0x1000000000;
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else
  {
    v552 = v554;
    v553 = 0x1000000000;
    v549 = v551;
    v550 = 0x1000000000;
    v6 = 1;
  }
  llvm::SmallVectorImpl<unsigned int>::append((uint64_t)&v549, v6);
  v7 = 0;
LABEL_9:
  memset(v548, 0, sizeof(v548));
  v509 = 0;
  NullValue = (llvm::Type **)llvm::ConstantInt::get();
  Add = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v483);
  v546[0] = v547;
  v546[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v546, v6, 0);
  v505 = (uint64_t)v1;
  if ((v7 & 1) == 0)
  {
    if (*(_BYTE *)(v5 + 8) == 16)
      AGCLLVMBuilder::unboxStruct((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32, v481, (uint64_t)v546);
    else
      *(_QWORD *)v546[0] = v481;
    v63 = 0;
    v482 = 0;
    v497 = 0;
    v500 = (uint64_t)v1 + 4320;
    v9 = v504;
    while (1)
    {
      v64 = *(_QWORD *)(*((_QWORD *)v1 + 9) - 8 * *(unsigned int *)(*((_QWORD *)v1 + 9) + 8) + 8 * v63);
      String = llvm::MDString::getString(*(llvm::MDString **)(v64 - 8 * *(unsigned int *)(v64 + 8)));
      v67 = v66;
      v68 = (llvm::Value *)*((_QWORD *)v546[0] + v63);
      if (v9[202])
      {
        v69 = 1;
        do
        {
          v70 = *(unsigned int *)(v64 + 8);
          if (v69 >= v70)
            break;
          if (isStringMDNode(*(llvm::MDString **)(v64 - 8 * v70 + 8 * v69), "air.shared"))
            goto LABEL_59;
          ++v69;
        }
        while (v9[202]);
        v71 = 1;
      }
      else
      {
LABEL_59:
        v71 = 0;
      }
      if (v67 <= 16)
      {
        if (v67 == 12)
        {
          v82 = *(_QWORD *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
          v1 = (AGCLLVMUserVertexShader *)v505;
          if (v82)
          {
            v504[212] = v71;
            v9 = v504;
            v83 = *(unsigned int *)(v64 + 8);
            if (v83 >= 2)
            {
              v84 = 1;
              while (!isStringMDNode(*(llvm::MDString **)(v64 - 8 * v83 + 8 * v84), "air.invariant"))
              {
                ++v84;
                v83 = *(unsigned int *)(v64 + 8);
                if (v84 >= v83)
                  goto LABEL_143;
              }
              v504[179] = 1;
            }
LABEL_143:
            v497 = (unsigned __int8 *)v68;
            goto LABEL_122;
          }
          goto LABEL_121;
        }
        if (v67 != 14)
        {
LABEL_120:
          v1 = (AGCLLVMUserVertexShader *)v505;
LABEL_121:
          v9 = v504;
          goto LABEL_122;
        }
        v75 = *(_QWORD *)String == 0x6E696F702E726961 && *(_QWORD *)(String + 6) == 0x657A69735F746E69;
        v1 = (AGCLLVMUserVertexShader *)v505;
        if (!v75)
          goto LABEL_121;
        v504[213] = v71;
        v9 = v504;
        v482 = v68;
      }
      else
      {
        switch(v67)
        {
          case 17:
            if (*(_QWORD *)String == 0x70696C632E726961
              && *(_QWORD *)(String + 8) == 0x636E61747369645FLL
              && *(_BYTE *)(String + 16) == 101)
            {
              v1 = (AGCLLVMUserVertexShader *)v505;
              v85 = (*(uint64_t (**)(uint64_t, llvm::Value *, uint64_t, _OWORD *, int *))(*(_QWORD *)v505 + 488))(v505, v68, v64, v548, &v509);
              v504[216] = v71;
              v9 = v504;
              if ((v85 & 1) == 0)
              {
                v479 = 0;
                goto LABEL_441;
              }
              break;
            }
            v79 = *(_QWORD *)String == 0x747265762E726961
               && *(_QWORD *)(String + 8) == 0x757074756F5F7865
               && *(_BYTE *)(String + 16) == 116;
            v1 = (AGCLLVMUserVertexShader *)v505;
            if (v79)
            {
              __p = 0;
              v516 = 0;
              v517 = 0;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v505 + 496))(v505, v5, v63, v64, &v512, v71))
              {
                llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v552, v514, (uint64_t)v68);
                GenericVaryingAllocator::addVarying(v500, (unint64_t)&v512);
              }
              else if ((*(_DWORD *)(*(_QWORD *)v68 + 8) & 0xFE) == 0x12
                     && (!MGGetBoolAnswer()
                      || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_VARYING_SPLITTING", v86)) == 0
                      || *Value == 48
                      || !atoi(Value))
                     || MGGetBoolAnswer()
                     && (v89 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_VARYING_SPLITTING", v88)) != 0
                     && *v89 != 48
                     && atoi(v89))
              {
                __dst = 0u;
                v561 = 0u;
                v90 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)v505 - 24) + v505 + 32), v68, (llvm::Value **)&__dst);
                if (v90)
                {
                  v91 = 0;
                  v92 = v90;
                  do
                  {
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v505 + 504))(v505, v5, v63, v64, &v512, v71, v91))
                    {
                      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v552, v514, *((_QWORD *)&__dst + v91));
                      GenericVaryingAllocator::addVarying(v500, (unint64_t)&v512);
                    }
                    ++v91;
                  }
                  while (v92 != v91);
                }
              }
              if (SHIBYTE(v517) < 0)
                operator delete(__p);
            }
            goto LABEL_121;
          case 24:
            v81 = *(_QWORD *)String == 0x776569762E726961
               && *(_QWORD *)(String + 8) == 0x7272615F74726F70
               && *(_QWORD *)(String + 16) == 0x7865646E695F7961;
            v1 = (AGCLLVMUserVertexShader *)v505;
            if (!v81)
              goto LABEL_121;
            v504[214] = v71;
            v9 = v504;
            v504[153] = 1;
            NullValue = (llvm::Type **)v68;
            break;
          case 29:
            v74 = *(_QWORD *)String == 0x646E65722E726961
               && *(_QWORD *)(String + 8) == 0x65677261745F7265
               && *(_QWORD *)(String + 16) == 0x5F79617272615F74
               && *(_QWORD *)(String + 21) == 0x7865646E695F7961;
            v1 = (AGCLLVMUserVertexShader *)v505;
            if (!v74)
              goto LABEL_121;
            v504[215] = v71;
            v9 = v504;
            v504[154] = 1;
            Add = (llvm::Type **)v68;
            break;
          default:
            goto LABEL_120;
        }
      }
LABEL_122:
      if (++v63 == v6)
        goto LABEL_11;
    }
  }
  v482 = 0;
  v497 = 0;
  v9 = v504;
LABEL_11:
  v10 = *((_DWORD *)v1 + 1262) & v509;
  *((_DWORD *)v1 + 1262) = v10;
  v8.i32[0] = v10;
  v11 = (uint8x8_t)vcnt_s8(v8);
  v11.i16[0] = vaddlv_u8(v11);
  *((_DWORD *)v1 + 1261) = v11.i32[0];
  if (v10 && (v9[216] || v9[212]))
  {
    v9[216] = 1;
    v9[212] = 1;
  }
  v9[152] = (*(uint64_t (**)(AGCLLVMUserVertexShader *, llvm::Value *))(*(_QWORD *)v1 + 528))(v1, v482);
  if (v9[202])
  {
    if (!v9[200])
    {
      *((_QWORD *)v1 + 633) = AGCLLVMUserVertexShader::getVertexAmpId(v1, *((_DWORD *)v1 + 1272));
      v9[200] = 1;
    }
    if (!v9[201])
    {
      *((_QWORD *)v1 + 634) = AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x54);
      v9[201] = 1;
    }
    v13 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    v14 = (llvm::Type **)*((_QWORD *)v1 + 650);
    LOWORD(v516) = 257;
    v15 = AGCLLVMBuilder::tryDeducePointeeType(v14, v12);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)v14, 0, (uint64_t)&v512);
    v17 = (llvm::Type *)*((_QWORD *)v1 + 651);
    v18 = (llvm::Value *)*((_QWORD *)v1 + 633);
    v19 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v516) = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v19, v17, AlignedLoad, v18, (const llvm::Twine *)&v512);
    v21 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    LOWORD(v516) = 257;
    v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    v24 = (_BYTE *)llvm::IRBuilderBase::CreateAlignedLoad(v21 + 5, v23, (uint64_t)GEP, 0, (uint64_t)&v512);
    v512 = &v514;
    v513 = 0x800000000;
    AGCLLVMBuilder::unboxStruct((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32, v24, (uint64_t)&v512);
    if (!v9[153])
    {
      NullValue = (llvm::Type **)llvm::Constant::getNullValue(**((llvm::Constant ***)v1 + 652), v25);
      v9[153] = 1;
    }
    v9[214] = 1;
    v26 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), *(llvm::Value **)v512, *NullValue);
    *((_QWORD *)v1 + 652) = v26;
    v27 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
    v28 = *(_QWORD *)v26;
    LOWORD(v562) = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v27, 39, (uint64_t)NullValue, v28, (uint64_t)&__dst);
    v30 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v31 = (llvm::Value *)*((_QWORD *)v1 + 652);
    LOWORD(v562) = 257;
    NullValue = (llvm::Type **)llvm::IRBuilderBase::CreateAdd(v30, Cast, v31, (const llvm::Twine *)&__dst);
    if (!v9[154])
    {
      Add = (llvm::Type **)llvm::Constant::getNullValue(**((llvm::Constant ***)v1 + 653), v32);
      v9[154] = 1;
    }
    v9[215] = 1;
    v33 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), *((llvm::Value **)v512 + 1), *Add);
    *((_QWORD *)v1 + 653) = v33;
    v34 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
    v35 = *(_QWORD *)v33;
    LOWORD(v562) = 257;
    v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v34, 39, (uint64_t)Add, v35, (uint64_t)&__dst);
    v37 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v38 = (llvm::Value *)*((_QWORD *)v1 + 653);
    LOWORD(v562) = 257;
    Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd(v37, v36, v38, (const llvm::Twine *)&__dst);
    if (v512 != &v514)
      free(v512);
  }
  v39 = 0;
  v40 = 0;
  LOBYTE(v512) = 1;
  BYTE1(v512) = v9[200];
  v513 = (uint64_t)"air.amplification_id";
  v514 = 20;
  __p = (void *)*((_QWORD *)v1 + 633);
  v519 = 0;
  v520 = 0;
  v521 = 0;
  v522 = 0;
  v523 = v9[201];
  v524 = "air.amplification_count";
  v525 = 23;
  v526 = *((_QWORD *)v1 + 634);
  v527 = 0;
  v528 = 0;
  v529 = 0;
  v530 = v9[214];
  v531 = v9[153];
  v532 = "air.viewport_array_index";
  v533 = 24;
  v534 = NullValue;
  v535 = 0;
  v537 = 0;
  v536 = 0;
  v538 = v9[215];
  v539 = v9[154];
  v540 = "air.render_target_array_index";
  v541 = 29;
  v542 = Add;
  v543 = 0;
  v41 = (AGCLLVMUserVertexShader *)((char *)v1 + 4320);
  v544 = 0;
  v545 = 0;
  do
  {
    v42 = (char *)&v512 + v39;
    if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, _QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)v1 + 512))(v1, *(void **)((char *)&v512 + v39 + 8), *(uint64_t *)((char *)&v514 + v39), (char *)&v516 + v39, *((unsigned __int8 *)&v512 + v39)))
    {
      v43 = *(_QWORD *)(*(_QWORD *)v1 - 24);
      v44 = (const llvm::Type **)*((_QWORD *)v42 + 3);
      ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)v1 + v43 + 32), *v44, (unsigned int *)&__dst);
      if (v42[1])
      {
        v46 = *(_DWORD *)((char *)&v516 + v39 + 4);
        if (v46 >= ComponentType)
        {
          if (v46 > ComponentType)
          {
            v93 = (const std::string::value_type *)*((_QWORD *)v42 + 1);
            if (v93)
            {
              v94 = *(&v514 + 12 * v40);
              v95 = 4;
              if (v94 < 4)
                v95 = *(&v514 + 12 * v40);
              std::string::basic_string[abi:nn180100](&__dst, (void *)&v93[v95], v94 - v95);
              v96 = BYTE7(v561);
              v97 = *((_QWORD *)&__dst + 1);
              v93 = (const std::string::value_type *)__dst;
              v43 = *(_QWORD *)(*(_QWORD *)v1 - 24);
            }
            else
            {
              v97 = 0;
              v96 = 0;
              __dst = 0uLL;
              *(_QWORD *)&v561 = 0;
            }
            if ((v96 & 0x80u) == 0)
              p_dst = (const std::string::value_type *)&__dst;
            else
              p_dst = v93;
            if ((v96 & 0x80u) == 0)
              v478 = v96;
            else
              v478 = v97;
            std::string::append((std::string *)((char *)v1 + v43 + 8), p_dst, v478);
            if (SBYTE7(v561) < 0)
              operator delete((void *)__dst);
            std::string::append((std::string *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8), " type does not match between vertex and fragment function");
            v479 = 0;
            goto LABEL_437;
          }
        }
        else
        {
          *((_QWORD *)v42 + 3) = AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)v1 + v43 + 32), (llvm::Value *)v44, v46);
        }
      }
      GenericVaryingAllocator::addVarying((uint64_t)v1 + 4320, (unint64_t)&v516 + v39);
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v552, *(unsigned int *)&v518[v39], *((_QWORD *)v42 + 3));
      v9 = v504;
    }
    ++v40;
    v39 += 96;
  }
  while (v40 != 4);
  *((_QWORD *)&v561 + 1) = 0;
  v562 = 0;
  v563 = 0;
  if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, __int128 *))(*(_QWORD *)v1 + 520))(v1, &__dst))
  {
    do
      GenericVaryingAllocator::addVarying((uint64_t)v1 + 4320, (unint64_t)&__dst);
    while (((*(uint64_t (**)(AGCLLVMUserVertexShader *, __int128 *))(*(_QWORD *)v1 + 520))(v1, &__dst) & 1) != 0);
  }
  if (SHIBYTE(v563) < 0)
    operator delete(*((void **)&v561 + 1));
  v47 = 126 - 2 * __clz(v553);
  if ((_DWORD)v553)
    v48 = v47;
  else
    v48 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>((unint64_t)v552, (unint64_t)v552 + 16 * v553, v48, 1);
  GenericVaryingAllocator::allocate((AGCLLVMUserVertexShader *)((char *)v1 + 4320), *(const AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400));
  v49 = (llvm::BasicBlock *)v483[5];
  v50 = llvm::ConstantInt::get();
  v51 = (llvm::Value *)llvm::ConstantInt::get();
  *((_DWORD *)v9 + 39) = 0;
  *((_DWORD *)v9 + 40) = 0;
  v52 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + v52 + 400) + 1753))
  {
    v53 = (llvm::Value *)v50;
    if (v9[200])
    {
      v54 = (llvm::Type **)((char *)v1 + v52 + 32);
      DriverGlobalConstant = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x54);
      v51 = AGCLLVMBuilder::truncateToSmall(v54, DriverGlobalConstant, *(llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 2768));
      v56 = (llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32);
      if (*((_DWORD *)v1 + 1272))
        v57 = 85;
      else
        v57 = 84;
      v555[0] = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)v57);
      v58 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v59 = (uint64_t)(v58 + 32);
      v60 = *((_QWORD *)v58 + 50);
      v61 = *(_QWORD *)(v60 + 1488);
      if (v61)
        v62 = strlen(*(const char **)(v60 + 1488));
      else
        v62 = 0;
      v98 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v59, v61, v62, *(_QWORD *)(v59 + 200), *(_QWORD *)(v59 + 200));
      v99 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
      LOWORD(v562) = 257;
      v100 = llvm::IRBuilderBase::CreateCall(v99, *(_QWORD *)(v98 + 24), v98, (uint64_t)v555, 1, (uint64_t)&__dst);
      v53 = AGCLLVMBuilder::truncateToSmall(v56, v100, *(llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 2768));
      v9 = v504;
    }
  }
  else
  {
    v53 = (llvm::Value *)v50;
  }
  *((_QWORD *)v1 + 654) = llvm::ConstantInt::get();
  v101 = llvm::ConstantInt::get();
  Mul = (llvm::Value *)v101;
  *((_QWORD *)v1 + 655) = v101;
  v103 = v9[212];
  if (v9[212])
    v104 = (uint64_t)v53;
  else
    v104 = v50;
  *((_QWORD *)v1 + 656) = v104;
  if (v103)
  {
    v105 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v562) = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v105, Mul, v51, (const llvm::Twine *)&__dst);
    v106 = v9[212];
    *((_QWORD *)v1 + 657) = Mul;
    if (v106)
    {
      *((_DWORD *)v1 + 1260) += 4;
      goto LABEL_158;
    }
  }
  else
  {
    *((_QWORD *)v1 + 657) = v101;
  }
  *((_DWORD *)v9 + 39) += 4;
LABEL_158:
  v107 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v108 = (llvm::Value *)*((_QWORD *)v1 + 654);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 658) = llvm::IRBuilderBase::CreateAdd(v107, v108, Mul, (const llvm::Twine *)&__dst);
  v109 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 659) = v109;
  *((_QWORD *)v1 + 660) = v50;
  *((_QWORD *)v1 + 661) = v109;
  v110 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v111 = (llvm::Value *)*((_QWORD *)v1 + 658);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 662) = llvm::IRBuilderBase::CreateAdd(v110, v111, v109, (const llvm::Twine *)&__dst);
  v112 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 663) = v112;
  *((_QWORD *)v1 + 664) = v50;
  *((_QWORD *)v1 + 665) = v112;
  v113 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v114 = (llvm::Value *)*((_QWORD *)v1 + 662);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 666) = llvm::IRBuilderBase::CreateAdd(v113, v114, v112, (const llvm::Twine *)&__dst);
  v115 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 667) = v115;
  *((_QWORD *)v1 + 668) = v50;
  *((_QWORD *)v1 + 669) = v115;
  v116 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v117 = (llvm::Value *)*((_QWORD *)v1 + 666);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 670) = llvm::IRBuilderBase::CreateAdd(v116, v117, v115, (const llvm::Twine *)&__dst);
  v118 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 671) = v118;
  *((_QWORD *)v1 + 672) = v50;
  *((_QWORD *)v1 + 673) = v118;
  v119 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v120 = (llvm::Value *)*((_QWORD *)v1 + 670);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 674) = llvm::IRBuilderBase::CreateAdd(v119, v120, v118, (const llvm::Twine *)&__dst);
  v121 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 675) = v121;
  *((_QWORD *)v1 + 676) = v50;
  *((_QWORD *)v1 + 677) = v121;
  v122 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v123 = (llvm::Value *)*((_QWORD *)v1 + 674);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 678) = llvm::IRBuilderBase::CreateAdd(v122, v123, v121, (const llvm::Twine *)&__dst);
  v124 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 679) = v124;
  *((_QWORD *)v1 + 680) = v50;
  *((_QWORD *)v1 + 681) = v124;
  v125 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v126 = (llvm::Value *)*((_QWORD *)v1 + 678);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 682) = llvm::IRBuilderBase::CreateAdd(v125, v126, v124, (const llvm::Twine *)&__dst);
  v127 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 683) = v127;
  *((_QWORD *)v1 + 684) = v50;
  *((_QWORD *)v1 + 685) = v127;
  v128 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v129 = (llvm::Value *)*((_QWORD *)v1 + 682);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 686) = llvm::IRBuilderBase::CreateAdd(v128, v129, v127, (const llvm::Twine *)&__dst);
  v130 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 687) = v130;
  *((_QWORD *)v1 + 688) = v50;
  *((_QWORD *)v1 + 689) = v130;
  v131 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v132 = (llvm::Value *)*((_QWORD *)v1 + 686);
  LOWORD(v562) = 257;
  v133 = llvm::IRBuilderBase::CreateAdd(v131, v132, v130, (const llvm::Twine *)&__dst);
  *((_QWORD *)v1 + 690) = v133;
  v501 = v53;
  v494 = v51;
  if (!*((_DWORD *)v1 + 1298) || *(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1735))
    goto LABEL_285;
  if (!v481)
    goto LABEL_250;
  LODWORD(v561) = 128;
  *(_QWORD *)&__dst = MEMORY[0x1CAA2C6C0](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty((uint64_t)&__dst);
  BYTE8(v561) = 0;
  v564 = 0;
  if (*((_BYTE *)v481 + 16) == 83)
  {
    v134 = *((_DWORD *)v481 + 5);
    v135 = v134 & 0x7FFFFFF;
    if ((v134 & 0x7FFFFFF) != 0)
    {
      v136 = 0;
      v137 = 0;
      do
      {
        if ((v134 & 0x40000000) != 0)
          v138 = (char *)*((_QWORD *)v481 - 1);
        else
          v138 = (char *)v481 - 32 * v135;
        v139 = *(_QWORD *)&v138[v136];
        *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, *(llvm::Value **)&v138[32 * *((unsigned int *)v481 + 15) + 8 * v137++]) = v139;
        v134 = *((_DWORD *)v481 + 5);
        v135 = v134 & 0x7FFFFFF;
        v136 += 32;
      }
      while (v137 < v135);
    }
  }
  else
  {
    SinglePredecessor = (llvm::Value *)llvm::BasicBlock::getSinglePredecessor(v49);
    *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, SinglePredecessor) = v481;
  }
  v141 = (int *)*((_QWORD *)v1 + 638);
  v142 = (int *)*((_QWORD *)v1 + 639);
  if (v141 != v142)
  {
    while (1)
    {
      v143 = *((_QWORD *)v141 + 3);
      if (!v143)
        goto LABEL_200;
      v144 = **(_QWORD **)(v143 - 64);
      v145 = (*(_DWORD *)(v144 + 8) & 0xFE) == 0x12 ? *(unsigned int *)(v144 + 32) : 1;
      v146 = *v141;
      v147 = v141[1];
      v148 = llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, *(llvm::Value **)(v143 + 40));
      v149 = *v148;
      if (*(unsigned __int8 *)(*v148 + 16) - 11 < 2)
        break;
      while (*(_QWORD *)(v149 - 32) != *(_QWORD *)(v143 - 64))
      {
        v149 = *(_QWORD *)(v149 - 64);
        if (*(unsigned __int8 *)(v149 + 16) - 11 <= 1)
          goto LABEL_191;
      }
      v150 = **(unsigned int **)(v149 + 64);
      v151 = *(_QWORD *)(*(_QWORD *)(v505 + 72) - 8 * *(unsigned int *)(*(_QWORD *)(v505 + 72) + 8) + 8 * v150);
      v152 = llvm::MDString::getString(*(llvm::MDString **)(v151 - 8 * *(unsigned int *)(v151 + 8)));
      if (v153 == 17)
      {
        if (*(_QWORD *)v152 != 0x747265762E726961
          || *(_QWORD *)(v152 + 8) != 0x757074756F5F7865
          || *(_BYTE *)(v152 + 16) != 116)
        {
          break;
        }
        v557 = 0;
        v558 = 0;
        v559 = 0;
        if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, llvm::Value **, _QWORD))(*(_QWORD *)v505 + 496))(v505, *(_QWORD *)v481, v150, v151, v555, 0))
        {
          v160 = *(unsigned int *)(v505 + 4352);
          if ((_DWORD)v160)
          {
            v161 = *(_QWORD *)(v505 + 4344);
            v162 = v160 << 6;
            while (*(_DWORD *)(v161 + 16) != (_DWORD)v556)
            {
              v161 += 64;
              v162 -= 64;
              if (!v162)
                goto LABEL_207;
            }
            v154 = *(_DWORD *)(v161 + 48);
          }
          else
          {
LABEL_207:
            v154 = 0xFFFF;
          }
        }
        else
        {
          v154 = -2;
        }
        if (SHIBYTE(v559) < 0)
          operator delete(v557);
      }
      else
      {
        if (v153 != 12)
          break;
        if (*(_QWORD *)v152 ^ 0x69736F702E726961 | *(unsigned int *)(v152 + 8) ^ 0x6E6F6974)
          v154 = -2;
        else
          v154 = 0;
      }
LABEL_192:
      if (v145)
      {
        v157 = *(_QWORD *)(*(_QWORD *)(v505 + 8 * v147 + 5128) + 8);
        while (1)
        {
          v158 = *(_DWORD *)(v157 + 4 * v146);
          if (v158 != -2)
          {
            v159 = v154;
            if (v158 == -1)
              goto LABEL_198;
            if (v154 != v158)
              break;
          }
LABEL_199:
          ++v154;
          ++v146;
          if (!--v145)
            goto LABEL_200;
        }
        v159 = -2;
LABEL_198:
        *(_DWORD *)(v157 + 4 * v146) = v159;
        goto LABEL_199;
      }
LABEL_200:
      v141 += 8;
      if (v141 == v142)
        goto LABEL_212;
    }
LABEL_191:
    v154 = -2;
    goto LABEL_192;
  }
LABEL_212:
  v1 = (AGCLLVMUserVertexShader *)v505;
  v163 = *(unsigned int *)(v505 + 5192);
  if (v163 >= 2)
  {
    for (i = 0; i < v163; ++i)
    {
      v165 = *(unsigned int **)(v505 + 8 * i + 5128);
      v166 = (_DWORD *)*((_QWORD *)v165 + 1);
      v167 = *v165;
      if (*v166 < 0xFFFFFFFE)
      {
        if (v167 < 2)
          continue;
        v168 = *v166 + 1;
        if (v166[1] == v168)
        {
          v169 = 0;
          while (v167 - 2 != v169)
          {
            v170 = v169;
            v171 = v166[v169++ + 2];
            if (v168 + (_DWORD)v169 != v171)
            {
              if (v170 + 2 < v167)
                goto LABEL_215;
              goto LABEL_217;
            }
          }
          continue;
        }
      }
LABEL_215:
      memset_pattern4(v166, &TFBufferMap::MAP_CONFLICT, 4 * v167);
      v163 = *(unsigned int *)(v505 + 5192);
LABEL_217:
      ;
    }
  }
  v172 = *(unsigned int **)(v505 + 5104);
  v173 = *(unsigned int **)(v505 + 5112);
  while (v172 != v173)
  {
    v174 = (llvm::Instruction *)*((_QWORD *)v172 + 3);
    if (!v174)
      goto LABEL_238;
    v175 = *v172;
    v176 = **((_QWORD **)v174 - 8);
    if ((*(_DWORD *)(v176 + 8) & 0xFE) == 0x12)
    {
      v177 = *(unsigned int *)(v176 + 32);
      if (!(_DWORD)v177)
        goto LABEL_237;
    }
    else
    {
      v177 = 1;
    }
    v178 = *(_QWORD *)(*(_QWORD *)(v505 + 8 * v172[1] + 5128) + 8);
    if (*(_DWORD *)(v178 + 4 * v175) > 0xFFFFFFFD)
      goto LABEL_238;
    v179 = 0;
    v180 = v175 + 1;
    while (v177 - 1 != v179)
    {
      v181 = *(_DWORD *)(v178 + 4 * (v180 + v179++));
      if (v181 >= 0xFFFFFFFE)
      {
        if (v179 < v177)
          goto LABEL_238;
        break;
      }
    }
LABEL_237:
    v182 = (llvm::Value *)*((_QWORD *)v174 - 4);
    llvm::Instruction::eraseFromParent(v174);
    EraseInstructionChain(v182);
LABEL_238:
    v172 += 8;
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v561 + 8);
  v183 = v561;
  v184 = (llvm *)__dst;
  if ((_DWORD)v561)
  {
    v185 = (uint64_t *)(__dst + 24);
    v186 = 48 * v561;
    do
    {
      v187 = *v185;
      if (*v185 != -8192 && v187 != -4096 && v187 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v185 - 2));
      v185 += 6;
      v186 -= 48;
    }
    while (v186);
    v184 = (llvm *)__dst;
    v183 = v561;
  }
  llvm::deallocate_buffer(v184, (void *)(48 * v183));
  v133 = *(_QWORD *)(v505 + 5520);
LABEL_250:
  if (*(_BYTE *)(v133 + 16) == 16)
    v189 = v133;
  else
    v189 = 0;
  v190 = (_QWORD *)(v189 + 24);
  if (*(_DWORD *)(v189 + 32) >= 0x41u)
    v190 = (_QWORD *)*v190;
  v191 = *(_DWORD *)v190;
  v192 = *((unsigned int *)v1 + 1298);
  if (v192 < 2)
  {
    v194 = 0;
  }
  else
  {
    v193 = 0;
    v194 = 0;
    do
    {
      v195 = (unsigned int *)*((_QWORD *)v1 + v193 + 641);
      v196 = (_DWORD *)*((_QWORD *)v195 + 1);
      if (*v196 >= 0xFFFFFFFE)
      {
        v197 = *v195;
        if ((_DWORD)v197)
        {
          v198 = v191;
          v199 = v197;
          do
          {
            *v196++ = v198++;
            --v199;
          }
          while (v199);
          v192 = *((unsigned int *)v1 + 1298);
        }
        v191 += v197;
        v194 += v197;
      }
      ++v193;
    }
    while (v193 < v192);
  }
  v200 = (unsigned int *)*((_QWORD *)v1 + 638);
  v201 = (unsigned int *)*((_QWORD *)v1 + 639);
  if (v200 != v201)
  {
    while (2)
    {
      v202 = (llvm::Instruction *)*((_QWORD *)v200 + 3);
      if (v202)
      {
        v203 = *v200;
        v204 = v200[1];
        v205 = (unsigned __int8 *)*((_QWORD *)v202 - 8);
        v206 = **(_QWORD **)(**((_QWORD **)v202 - 4) + 16);
        if ((*(_DWORD *)(v206 + 8) & 0xFE) == 0x12)
        {
          v207 = *(_DWORD *)(v206 + 32);
          v208 = *(_QWORD *)(v505 + 8 * v204 + 5128);
          if (!v207)
            goto LABEL_276;
        }
        else
        {
          v208 = *(_QWORD *)(v505 + 8 * v204 + 5128);
          v207 = 1;
        }
        v209 = *(_QWORD *)(v208 + 8);
        if (*(_DWORD *)(v209 + 4 * v203) <= 0xFFFFFFFD)
        {
          v215 = 0;
          while (v207 - 1 != v215)
          {
            v216 = *(_DWORD *)(v209 + 4 * (v203 + 1 + v215++));
            if (v216 >= 0xFFFFFFFE)
            {
              if (v215 < v207)
                goto LABEL_273;
              break;
            }
          }
        }
        else
        {
LABEL_273:
          v210 = v191;
          v211 = *v200;
          v212 = v207;
          do
          {
            *(_DWORD *)(v209 + 4 * v211++) = v210++;
            --v212;
          }
          while (v212);
          v191 += v207;
          v194 += v207;
        }
LABEL_276:
        v213 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMUserVertexShader::replaceOutputUses(v505, v205, v213, 1, 0, 4u);
        v214 = (llvm::Value *)*((_QWORD *)v202 - 4);
        llvm::Instruction::eraseFromParent(v202);
        EraseInstructionChain(v214);
      }
      v200 += 8;
      if (v200 == v201)
        break;
      continue;
    }
  }
  v1 = (AGCLLVMUserVertexShader *)v505;
  *(_DWORD *)(v505 + 5028) += v194;
  v53 = v501;
LABEL_285:
  v217 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 691) = v217;
  *((_QWORD *)v1 + 692) = v50;
  *((_QWORD *)v1 + 693) = v217;
  *((_DWORD *)v1 + 1259) += *((_DWORD *)v1 + 1257) + GenericVaryingAllocator::getTotalSharedComponentWords(v41);
  v218 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v219 = (llvm::Value *)*((_QWORD *)v1 + 690);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 694) = llvm::IRBuilderBase::CreateAdd(v218, v219, v217, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 695) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 696) = v53;
  v220 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 697) = v220;
  v221 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v222 = (llvm::Value *)*((_QWORD *)v1 + 694);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 698) = llvm::IRBuilderBase::CreateAdd(v221, v222, v220, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 699) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 700) = v53;
  v223 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 701) = v223;
  v224 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v225 = (llvm::Value *)*((_QWORD *)v1 + 698);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 702) = llvm::IRBuilderBase::CreateAdd(v224, v225, v223, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 703) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 704) = v53;
  v226 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 705) = v226;
  v227 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v228 = (llvm::Value *)*((_QWORD *)v1 + 702);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 706) = llvm::IRBuilderBase::CreateAdd(v227, v228, v226, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 707) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 708) = v53;
  v229 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 709) = v229;
  v230 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v231 = (llvm::Value *)*((_QWORD *)v1 + 706);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 710) = llvm::IRBuilderBase::CreateAdd(v230, v231, v229, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 711) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 712) = v53;
  v232 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 713) = v232;
  v233 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v234 = (llvm::Value *)*((_QWORD *)v1 + 710);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 714) = llvm::IRBuilderBase::CreateAdd(v233, v234, v232, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 715) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 716) = v501;
  v235 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 717) = v235;
  v236 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v237 = (llvm::Value *)*((_QWORD *)v1 + 714);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 718) = llvm::IRBuilderBase::CreateAdd(v236, v237, v235, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 719) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 720) = v501;
  v238 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 721) = v238;
  v239 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v240 = (llvm::Value *)*((_QWORD *)v1 + 718);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 722) = llvm::IRBuilderBase::CreateAdd(v239, v240, v238, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((_QWORD *)v1 + 723) = llvm::ConstantInt::get();
  *((_QWORD *)v1 + 724) = v501;
  v241 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 725) = v241;
  v242 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  v243 = (llvm::Value *)llvm::ConstantInt::get();
  v244 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v245 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v562) = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v244, v494, v245, (const llvm::Twine *)&__dst);
  LOWORD(v558) = 257;
  v247 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v242, v243, Sub, (const llvm::Twine *)v555);
  v511 = 257;
  *((_QWORD *)v1 + 725) = llvm::IRBuilderBase::CreateAdd(v242, v241, v247, (const llvm::Twine *)v510);
  *((_DWORD *)v1 + 1260) += GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  v248 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
  v249 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v562) = 257;
  v250 = (llvm::IRBuilderBase *)v248;
  v251 = v504;
  v252 = v501;
  v253 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v250, v249, v494, (const llvm::Twine *)&__dst);
  v254 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v255 = (llvm::Value *)*((_QWORD *)v1 + 694);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 742) = llvm::IRBuilderBase::CreateAdd(v254, v255, v253, (const llvm::Twine *)&__dst);
  v256 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 743) = v256;
  v257 = v504[213];
  if (v504[213])
    v258 = (uint64_t)v501;
  else
    v258 = v50;
  *((_QWORD *)v1 + 744) = v258;
  if (v257)
  {
    v259 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v562) = 257;
    v256 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v259, v256, v494, (const llvm::Twine *)&__dst);
  }
  *((_QWORD *)v1 + 745) = v256;
  if (v504[152])
  {
    if (v504[213])
      ++*((_DWORD *)v1 + 1260);
    else
      ++*((_DWORD *)v504 + 39);
  }
  v260 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + v260 + 400) + 1748))
  {
    if (v504[153])
      v261 = 1;
    else
      v261 = v504[154] != 0;
    if (v504[214])
      v267 = 1;
    else
      v267 = v504[215] != 0;
    v268 = (llvm::Value *)*((_QWORD *)v1 + 742);
    LOWORD(v562) = 257;
    *((_QWORD *)v1 + 746) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserVertexShader *)((char *)v1 + v260 + 40), v268, v256, (const llvm::Twine *)&__dst);
    v269 = llvm::ConstantInt::get();
    v270 = (llvm::Value *)v269;
    *((_QWORD *)v1 + 747) = v269;
    if (v267)
    {
      v252 = v501;
      *((_QWORD *)v1 + 748) = v501;
      v271 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      LOWORD(v562) = 257;
      v270 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v271, v270, v494, (const llvm::Twine *)&__dst);
      v272 = *((_QWORD *)v1 + 748);
      *((_QWORD *)v1 + 749) = v270;
      *((_OWORD *)v1 + 375) = *((_OWORD *)v1 + 373);
      *((_QWORD *)v1 + 752) = v272;
      *((_QWORD *)v1 + 753) = v270;
      if (v261)
        ++*((_DWORD *)v1 + 1260);
      v251 = v504;
      goto LABEL_326;
    }
    *((_QWORD *)v1 + 748) = v50;
    *((_QWORD *)v1 + 749) = v269;
    *((_QWORD *)v1 + 750) = *((_QWORD *)v1 + 746);
    *((_QWORD *)v1 + 751) = v269;
    *((_QWORD *)v1 + 752) = v50;
    *((_QWORD *)v1 + 753) = v269;
    if (!v261)
    {
      v252 = v501;
      v251 = v504;
      goto LABEL_326;
    }
    v252 = v501;
    v251 = v504;
LABEL_325:
    ++*((_DWORD *)v251 + 39);
    goto LABEL_326;
  }
  v262 = (llvm::Value *)*((_QWORD *)v1 + 742);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 746) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserVertexShader *)((char *)v1 + v260 + 40), v262, v256, (const llvm::Twine *)&__dst);
  v263 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 747) = v263;
  v264 = v504[214];
  if (v504[214])
    v265 = (uint64_t)v501;
  else
    v265 = v50;
  *((_QWORD *)v1 + 748) = v265;
  if (v264)
  {
    v266 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v562) = 257;
    v263 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v266, v263, v494, (const llvm::Twine *)&__dst);
  }
  *((_QWORD *)v1 + 749) = v263;
  if (v504[153])
  {
    if (v504[214])
      ++*((_DWORD *)v1 + 1260);
    else
      ++*((_DWORD *)v504 + 39);
  }
  v273 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v274 = (llvm::Value *)*((_QWORD *)v1 + 746);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 750) = llvm::IRBuilderBase::CreateAdd(v273, v274, v263, (const llvm::Twine *)&__dst);
  v270 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 751) = v270;
  v275 = v504[215];
  if (v504[215])
    v276 = (uint64_t)v501;
  else
    v276 = v50;
  *((_QWORD *)v1 + 752) = v276;
  if (v275)
  {
    v277 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v562) = 257;
    v270 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v277, v270, v494, (const llvm::Twine *)&__dst);
  }
  *((_QWORD *)v1 + 753) = v270;
  if (v504[154])
  {
    if (v504[215])
    {
      ++*((_DWORD *)v1 + 1260);
      goto LABEL_326;
    }
    goto LABEL_325;
  }
LABEL_326:
  v278 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v279 = (llvm::Value *)*((_QWORD *)v1 + 750);
  LOWORD(v562) = 257;
  *((_QWORD *)v1 + 754) = llvm::IRBuilderBase::CreateAdd(v278, v279, v270, (const llvm::Twine *)&__dst);
  v280 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)v1 + 755) = v280;
  v281 = v251[212];
  if (v251[212])
    v282 = (uint64_t)v252;
  else
    v282 = v50;
  *((_QWORD *)v1 + 756) = v282;
  if (v281)
  {
    v283 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    LOWORD(v562) = 257;
    v280 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v283, v280, v494, (const llvm::Twine *)&__dst);
  }
  *((_QWORD *)v1 + 757) = v280;
  v284 = *((_DWORD *)v1 + 1261);
  if (!v284)
  {
LABEL_334:
    if (!v497)
      goto LABEL_336;
    goto LABEL_335;
  }
  if (v251[212])
  {
    *((_DWORD *)v1 + 1260) += v284;
    goto LABEL_334;
  }
  *((_DWORD *)v251 + 39) += v284;
  if (v497)
  {
LABEL_335:
    v285 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v286 = (llvm::Value *)*((_QWORD *)v1 + 654);
    v287 = (llvm::Value *)*((_QWORD *)v1 + 656);
    v288 = (llvm::Value *)*((_QWORD *)v1 + 655);
    LOWORD(v562) = 257;
    v289 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v285, v287, v288, (const llvm::Twine *)&__dst);
    LOWORD(v558) = 257;
    v290 = v286;
    v251 = v504;
    v291 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v285, v290, v289, (const llvm::Twine *)v555);
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, v497, v291, 0, v504[212], 4u);
  }
LABEL_336:
  v292 = *((unsigned int *)v1 + 1088);
  if ((_DWORD)v292)
  {
    v293 = 0;
    v490 = 0;
    v492 = 0;
    v495 = 0;
    v294 = 0;
    v295 = *((_QWORD *)v1 + 543);
    v486 = v295 + (v292 << 6);
    v487 = (char *)v1 + 200;
    do
    {
      if (*v251)
        v296 = *(_BYTE *)(v295 + 56) != 0;
      else
        v296 = 0;
      v297 = v553;
      if ((_DWORD)v553)
      {
        v298 = *(_DWORD *)(v295 + 16);
        v299 = v552;
        do
        {
          v300 = v297 >> 1;
          v301 = &v299[2 * (v297 >> 1)];
          v303 = *v301;
          v302 = v301 + 4;
          v297 += ~(v297 >> 1);
          if (v303 < v298)
            v299 = v302;
          else
            v297 = v300;
        }
        while (v297);
        if (v299 != (_QWORD *)((char *)v552 + 16 * v553) && *(_DWORD *)v299 == v298)
        {
          v304 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
          v498 = (llvm::Value *)*(unsigned int *)(v295 + 60);
          v502 = (llvm::Value *)v294;
          v305 = (_QWORD *)((char *)v1 + 32 * (_QWORD)v498);
          v306 = (llvm::Value *)v305[654];
          v307 = (llvm::Value *)v305[656];
          v308 = (llvm::Value *)v305[655];
          LOWORD(v562) = 257;
          v309 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v304, v307, v308, (const llvm::Twine *)&__dst);
          LOWORD(v558) = 257;
          v310 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v304, v306, v309, (const llvm::Twine *)v555);
          v311 = (unsigned __int8 *)v299[1];
          if (!v296)
          {
            v314 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
            v315 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v562) = 257;
            v316 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v314, v310, v315, (const llvm::Twine *)&__dst);
            AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, v311, v316, 1, *(unsigned __int8 *)(v295 + 57), *(_DWORD *)v295);
            v251 = v504;
            goto LABEL_372;
          }
          v555[1] = 0;
          v556 = 0;
          v557 = 0;
          v555[0] = (llvm::Value *)v311;
          if (*(_QWORD *)v311)
            v312 = *(_BYTE *)(*(_QWORD *)v311 + 8) == 18;
          else
            v312 = 0;
          if (!v312)
          {
            LODWORD(v313) = 1;
LABEL_360:
            v317 = *(_DWORD *)(v295 + 52);
            v313 = v313;
            v318 = v555;
            v488 = v310;
            v489 = v295;
            while (2)
            {
              v319 = (_QWORD *)v505;
              v320 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v505 - 24) + v505 + 40);
              v321 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v562) = 257;
              v323 = llvm::IRBuilderBase::CreateAdd(v320, v310, v321, (const llvm::Twine *)&__dst);
              v324 = *v318;
              v325 = *(unsigned __int8 *)(v295 + 57);
              if (v502)
              {
                v326 = *(_QWORD *)(*(_QWORD *)v505 - 24);
                if (v293 == (_DWORD)v498 && v490 == (v317 & 0xFFFFFFFE))
                {
                  LOWORD(v562) = 257;
                  v327 = (llvm::IRBuilderBase *)(v326 + v505 + 40);
                  v328 = (llvm::Value *)llvm::ConstantInt::get();
                  InsertElement = llvm::IRBuilderBase::CreateInsertElement(v327, v502, v324, v328, (const llvm::Twine *)&__dst);
                  if (InsertElement)
                  {
                    v330 = *(_QWORD *)(*(_QWORD *)v505 - 24);
                    v331 = *(_QWORD *)&v487[v330 + 32];
                    LOWORD(v562) = 257;
                    v332 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast(v330 + v505 + 40, 49, InsertElement, v331, (uint64_t)&__dst);
                    AGCLLVMUserVertexShader::replaceOutputUses(v505, v332, v495, 1, v492 != 0, 4u);
                    v502 = 0;
                    v495 = 0;
                  }
                  else
                  {
                    v502 = 0;
                  }
                  v251 = v504;
                  v295 = v489;
LABEL_370:
                  v310 = v488;
                  ++v317;
                  ++v318;
                  v293 = (int)v498;
                  if (!--v313)
                  {
                    v293 = (int)v498;
                    v1 = (AGCLLVMUserVertexShader *)v505;
                    goto LABEL_372;
                  }
                  continue;
                }
                v319 = (_QWORD *)v505;
                v333 = *(_QWORD *)&v487[v326 + 32];
                LOWORD(v562) = 257;
                v334 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast(v326 + v505 + 40, 49, (uint64_t)v502, v333, (uint64_t)&__dst);
                AGCLLVMUserVertexShader::replaceOutputUses(v505, v334, v495, 1, v492 != 0, 4u);
              }
              break;
            }
            v335 = (llvm::Constant **)((char *)v319 + *(_QWORD *)(*v319 - 24));
            v336 = (llvm::Value *)llvm::Constant::getNullValue(v335[31], v322);
            LOWORD(v562) = 257;
            v337 = (llvm::Value *)llvm::ConstantInt::get();
            v502 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v335 + 5), v336, v324, v337, (const llvm::Twine *)&__dst);
            v495 = (llvm::BasicBlock *)v323;
            v492 = v325;
            v490 = v317;
            v251 = v504;
            v295 = v489;
            goto LABEL_370;
          }
          if (*(_DWORD *)v295 >= *(_DWORD *)(*(_QWORD *)v311 + 32))
            LODWORD(v313) = *(_DWORD *)(*(_QWORD *)v311 + 32);
          else
            LODWORD(v313) = *(_DWORD *)v295;
          AGCLLVMBuilder::unboxVector((AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), (llvm::Value *)v311, v555);
          v251 = v504;
          if ((_DWORD)v313)
            goto LABEL_360;
LABEL_372:
          v294 = (uint64_t)v502;
        }
      }
      v295 += 64;
    }
    while (v295 != v486);
    if (v294)
    {
      v338 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v339 = *((_QWORD *)v338 + 29);
      LOWORD(v562) = 257;
      v340 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)(v338 + 40), 49, v294, v339, (uint64_t)&__dst);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, v340, v495, 1, v492 != 0, 4u);
    }
  }
  v341 = *(_QWORD *)v1;
  if (*((_DWORD *)v1 + 1298))
  {
    v342 = (char *)v1 + *(_QWORD *)(v341 - 24);
    if (*(_BYTE *)(*((_QWORD *)v342 + 50) + 1735))
    {
      v343 = *((_QWORD *)v342 + 11);
      *(_QWORD *)&__dst = "return_block";
      LOWORD(v562) = 259;
      v344 = llvm::BasicBlock::splitBasicBlock();
      *(_QWORD *)&__dst = "tf_write_block";
      LOWORD(v562) = 259;
      v493 = v343;
      operator new();
      v496 = (llvm::BasicBlock *)v344;
      v345 = llvm::BasicBlock::BasicBlock();
      v346 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v491 = v345;
      *((_QWORD *)v346 + 11) = v345;
      *((_QWORD *)v346 + 12) = v345 + 40;
      v347 = *((_QWORD *)v1 + 21);
      if ((*(_BYTE *)(v347 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*((llvm::Function **)v1 + 21));
      v348 = *((_DWORD *)v1 + 1299);
      if (v348)
        v349 = 40 * (v348 - 1) + 40;
      else
        v349 = 0;
      v350 = *(_QWORD *)(v347 + 88) + v349;
      v351 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v352 = (uint64_t)(v351 + 40);
      v353 = *((_QWORD *)v351 + 29);
      LOWORD(v562) = 257;
      v354 = llvm::IRBuilderBase::CreateCast((uint64_t)(v351 + 40), 49, v350, v353, (uint64_t)&__dst);
      v355 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 240);
      LOWORD(v558) = 257;
      v356 = llvm::IRBuilderBase::CreateCast(v352, 39, v354, v355, (uint64_t)v555);
      v357 = *((_QWORD *)v1 + 638);
      v499 = (llvm::Value *)v356;
      v503 = *((_QWORD *)v1 + 639);
      if (v357 != v503)
      {
        v358 = (char *)v1 + 208;
        do
        {
          v359 = *(llvm::Instruction **)(v357 + 24);
          if (v359)
          {
            v360 = (llvm::Type **)*((_QWORD *)v359 - 8);
            v361 = (char *)v1 + 8 * *(unsigned int *)(v357 + 4);
            v362 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
            v363 = llvm::ConstantInt::get();
            v364 = *(_QWORD *)&v358[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
            LOWORD(v562) = 257;
            v365 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v362, 39, v363, v364, (uint64_t)&__dst);
            LOWORD(v558) = 257;
            v366 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v362, v499, v365, (const llvm::Twine *)v555);
            v367 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
            v368 = llvm::ConstantInt::get();
            v369 = *(_QWORD *)&v358[*(_QWORD *)(*(_QWORD *)v505 - 24) + 32];
            LOWORD(v562) = 257;
            v370 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v367, 39, v368, v369, (uint64_t)&__dst);
            LOWORD(v558) = 257;
            v371 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v367, v366, v370, (const llvm::Twine *)v555);
            v372 = *(_QWORD *)(*(_QWORD *)v505 - 24) + v505;
            v373 = *(llvm::Type **)(v372 + 200);
            v374 = v372 + 40;
            v375 = *((_QWORD *)v361 + 645);
            v376 = llvm::PointerType::get();
            LOWORD(v562) = 257;
            v377 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v374, 49, v375, v376, (uint64_t)&__dst);
            LOWORD(v558) = 257;
            v378 = (llvm::IRBuilderBase *)v374;
            v1 = (AGCLLVMUserVertexShader *)v505;
            v379 = llvm::IRBuilderBase::CreateGEP(v378, v373, v377, v371, (const llvm::Twine *)v555);
            v380 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
            v381 = **((_QWORD **)v359 - 4);
            LOWORD(v562) = 257;
            v382 = llvm::IRBuilderBase::CreateCast(v380, 49, v379, v381, (uint64_t)&__dst);
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v360, v382, 0);
            v383 = (llvm::Value *)*((_QWORD *)v359 - 4);
            llvm::Instruction::eraseFromParent(v359);
            EraseInstructionChain(v383);
          }
          v357 += 32;
        }
        while (v357 != v503);
      }
      llvm::IRBuilderBase::CreateBr((AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v496);
      v384 = *(_QWORD *)(v493 + 40);
      if (v384 == v493 + 40)
      {
        v387 = 0;
      }
      else
      {
        v385 = (llvm::Instruction *)(v384 - 24);
        if (v384)
          v386 = v384 - 24;
        else
          v386 = 0;
        if (*(unsigned __int8 *)(v386 + 16) - 29 >= 0xB)
          v387 = 0;
        else
          v387 = v385;
      }
      llvm::Instruction::eraseFromParent(v387);
      v388 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      *((_QWORD *)v388 + 11) = v493;
      *((_QWORD *)v388 + 12) = v493 + 40;
      v389 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      *(_QWORD *)&__dst = "agc.tf_writes_enable";
      LOWORD(v562) = 259;
      v390 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v390 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v391 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v392 = *((_QWORD *)v391 + 47);
      v393 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v391 + 32), v389);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v392, v393);
      v394 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      LOWORD(v562) = 257;
      v396 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v389, v395);
      v397 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v394, v396, (uint64_t)v389, 0, (uint64_t)&__dst);
      v398 = llvm::ConstantInt::get();
      LOWORD(v558) = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp(v394, 33, v397, v398, (uint64_t)v555);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), ICmp, v491, (uint64_t)v496);
      v341 = *(_QWORD *)v1;
      v251 = v504;
    }
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(v341 - 24) + 40), (llvm::Instruction *)v483);
  if (v251[152])
  {
    v400 = (*(uint64_t (**)(AGCLLVMUserVertexShader *, llvm::Value *))(*(_QWORD *)v1 + 536))(v1, v482);
    v401 = llvm::ConstantFP::get();
    v402 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v403 = *((_QWORD *)v402 + 50);
    v506 = *(_OWORD *)(v402 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v402 + 40));
    v508 = *((_DWORD *)v402 + 34);
    v404 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v403 + 48))(v403, &v506, v400, v401, 0);
    if (v507)
      llvm::MetadataTracking::untrack();
    v405 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v406 = (llvm::Value *)*((_QWORD *)v1 + 742);
    v407 = (llvm::Value *)*((_QWORD *)v1 + 744);
    v408 = (llvm::Value *)*((_QWORD *)v1 + 743);
    LOWORD(v562) = 257;
    v409 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v405, v407, v408, (const llvm::Twine *)&__dst);
    LOWORD(v558) = 257;
    v410 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v405, v406, v409, (const llvm::Twine *)v555);
    v251 = v504;
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, v404, v410, 2, v504[213], 4u);
  }
  v411 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  v412 = *(_BYTE **)((char *)v1 + v411 + 400);
  if (v412[1748])
  {
    if (v251[153] || v251[154])
    {
      v413 = llvm::ConstantInt::get();
      if (v251[153])
      {
        v414 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v415 = *((_QWORD *)v414 + 29);
        if (*NullValue == (llvm::Type *)v415)
        {
          v435 = (AGCLLVMBuilder *)(v414 + 32);
          v436 = (llvm::Value *)llvm::ConstantInt::get();
          v416 = AGCLLVMBuilder::buildICmpSel(v435, NullValue, v436, 36);
        }
        else
        {
          LOWORD(v562) = 257;
          v416 = llvm::IRBuilderBase::CreateCast((uint64_t)(v414 + 40), 39, (uint64_t)NullValue, v415, (uint64_t)&__dst);
        }
        v437 = (llvm::Value *)v416;
        v438 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x6C);
        v439 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v439, v437, v438, (const llvm::Twine *)&__dst);
        v441 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        v442 = (llvm::Value *)llvm::ConstantInt::get();
        v434 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v441, Shl, v442, (const llvm::Twine *)&__dst);
        v251 = v504;
      }
      else
      {
        v434 = (llvm::Value *)v413;
      }
      if (v251[154])
      {
        v443 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v444 = *((_QWORD *)v443 + 29);
        if (*Add == (llvm::Type *)v444)
        {
          v446 = (AGCLLVMBuilder *)(v443 + 32);
          v447 = (llvm::Value *)llvm::ConstantInt::get();
          v445 = AGCLLVMBuilder::buildICmpSel(v446, Add, v447, 36);
        }
        else
        {
          LOWORD(v562) = 257;
          v445 = llvm::IRBuilderBase::CreateCast((uint64_t)(v443 + 40), 39, (uint64_t)Add, v444, (uint64_t)&__dst);
        }
        v448 = (llvm::Value *)v445;
        v449 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x6C);
        v450 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        v451 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v450, v448, v449, (const llvm::Twine *)&__dst);
        v452 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        v453 = (llvm::Value *)llvm::ConstantInt::get();
        v454 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v452, v451, v453, (const llvm::Twine *)&__dst);
        v455 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        v456 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v455, v434, v454, (const llvm::Twine *)&__dst);
        v457 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
        LOWORD(v562) = 257;
        v434 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v457, v456, v448, (const llvm::Twine *)&__dst);
      }
      v458 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v459 = (llvm::Value *)*((_QWORD *)v1 + 746);
      v460 = (llvm::Value *)*((_QWORD *)v1 + 748);
      v461 = (llvm::Value *)*((_QWORD *)v1 + 747);
      LOWORD(v562) = 257;
      v462 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v458, v460, v461, (const llvm::Twine *)&__dst);
      LOWORD(v558) = 257;
      v429 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v458, v459, v462, (const llvm::Twine *)v555);
      if (v504[214])
        v430 = 1;
      else
        v430 = v504[215] != 0;
      v431 = (uint64_t)v1;
      v432 = (unsigned __int8 *)v434;
      v433 = 4;
LABEL_427:
      AGCLLVMUserVertexShader::replaceOutputUses(v431, v432, v429, v433, v430, 4u);
    }
  }
  else
  {
    if (v412[1746] && v251[153])
    {
      v417 = (AGCLLVMUserVertexShader *)((char *)v1 + v411 + 40);
      v418 = (llvm::Value *)*((_QWORD *)v1 + 746);
      v419 = (llvm::Value *)*((_QWORD *)v1 + 748);
      v420 = (llvm::Value *)*((_QWORD *)v1 + 747);
      LOWORD(v562) = 257;
      v421 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v417, v419, v420, (const llvm::Twine *)&__dst);
      LOWORD(v558) = 257;
      v422 = v418;
      v251 = v504;
      v423 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v417, v422, v421, (const llvm::Twine *)v555);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, (unsigned __int8 *)NullValue, v423, 4, v504[214], 4u);
      v411 = *(_QWORD *)(*(_QWORD *)v1 - 24);
      v412 = *(_BYTE **)((char *)v1 + v411 + 400);
    }
    if (v412[1747] && v251[154])
    {
      v424 = (AGCLLVMUserVertexShader *)((char *)v1 + v411 + 40);
      v425 = (llvm::Value *)*((_QWORD *)v1 + 750);
      v426 = (llvm::Value *)*((_QWORD *)v1 + 752);
      v427 = (llvm::Value *)*((_QWORD *)v1 + 751);
      LOWORD(v562) = 257;
      v428 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v424, v426, v427, (const llvm::Twine *)&__dst);
      LOWORD(v558) = 257;
      v429 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v424, v425, v428, (const llvm::Twine *)v555);
      v430 = v504[215];
      v431 = (uint64_t)v1;
      v432 = (unsigned __int8 *)Add;
      v433 = 5;
      goto LABEL_427;
    }
  }
  v463 = 0;
  v464 = 0;
  v465 = 1;
  do
  {
    if ((*((_DWORD *)v1 + 1262) & v465) != 0)
    {
      v466 = (llvm::Value *)llvm::ConstantInt::get();
      v467 = (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v468 = (llvm::Value *)*((_QWORD *)v1 + 754);
      v469 = (llvm::Value *)*((_QWORD *)v1 + 756);
      v470 = (llvm::Value *)*((_QWORD *)v1 + 755);
      LOWORD(v562) = 257;
      v471 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v467, v469, v470, (const llvm::Twine *)&__dst);
      LOWORD(v558) = 257;
      v472 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v467, v468, v471, (const llvm::Twine *)v555);
      v511 = 257;
      v473 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v467, v466, v472, (const llvm::Twine *)v510);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)v1, *(unsigned __int8 **)((char *)v548 + v463), v473, 3, v504[212], 4u);
      ++v464;
    }
    v465 *= 2;
    v463 += 8;
  }
  while (v463 != 64);
  if (v481)
    EraseInstructionChain(v481);
  v474 = v483 + 3;
  if (!v483)
    v474 = 0;
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40, v483[5], v474[1]);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v483);
  llvm::Function::eraseFromParent(Function);
  v479 = 1;
LABEL_437:
  v475 = 384;
  do
  {
    if ((char)v510[v475 + 23] < 0)
      operator delete(*(void **)&v510[v475]);
    v475 -= 96;
  }
  while (v475);
LABEL_441:
  if (v546[0] != v547)
    free(v546[0]);
  if (v549 != v551)
    free(v549);
  if (v552 != v554)
    free(v552);
  return v479;
}

uint64_t llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5)
{
  int Key;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  void **v16;
  llvm *v18;
  __int128 __dst;
  uint64_t v20;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  v11 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 9432))
    return 0;
  v12 = *(_QWORD *)(a1 + 9424);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 8 * Key) + 10);
  if ((v13 - 2) > 3)
    return 0;
  v14 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v14;
  if (a5)
    v15 = 11;
  else
    v15 = 2;
  *(_DWORD *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v13;
  *(_QWORD *)(a4 + 8) = 0x300000001;
  *(_DWORD *)(a4 + 16) = v14;
  v16 = (void **)(a4 + 24);
  if (*(char *)(a4 + 47) < 0)
    operator delete(*v16);
  *(_BYTE *)(a4 + 56) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_BYTE *)(a4 + 57) = a5;
  *(_BYTE *)(a4 + 58) = 0;
  *(_DWORD *)(a4 + 60) = v15;
  if (a2)
  {
    std::string::basic_string[abi:nn180100](&__dst, a2, a3);
    if (*(char *)(a4 + 47) < 0)
      operator delete(*v16);
  }
  else
  {
    __dst = 0uLL;
    v20 = 0;
  }
  *(_OWORD *)v16 = __dst;
  *(_QWORD *)(a4 + 40) = v20;
  v18 = *(llvm **)(v12 + 8 * v11);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v18, (void *)(*(_QWORD *)v18 + 17));
  return 1;
}

llvm::Value *AGCLLVMUserVertexShader::replaceOutputUses(uint64_t a1, unsigned __int8 *a2, llvm::Value *a3, int a4, int a5, unsigned int a6)
{
  unsigned __int8 *v8;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  uint64_t v25;
  const char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  AGCLLVMBuilder *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::IRBuilderBase *v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::CmpInst **v42;
  uint64_t v43;
  llvm::Value **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Value *Select;
  uint64_t v50;
  llvm::IRBuilderBase *v51;
  uint64_t v52;
  llvm::Type *v53;
  llvm::Value *v54;
  llvm::Value *Cast;
  llvm::Value *v56;
  llvm::CmpInst **v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::IRBuilderBase *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  uint64_t Add;
  uint64_t v69;
  __int16 v70;
  llvm::Value *v71[2];
  __int128 v72;
  uint64_t v73;

  v8 = a2;
  v73 = *MEMORY[0x1E0C80C00];
  v10 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v10 = (llvm::Type *)**((_QWORD **)v10 + 2);
  v11 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v12 = v11 + a1 + 32;
  v13 = v10 == *(llvm::Type **)(v11 + a1 + 200) || v10 == *(llvm::Type **)(v11 + a1 + 184);
  switch(a4)
  {
    case 0:
      v14 = *(_QWORD *)(v11 + a1 + 400);
      v15 = a5 == 0;
      v16 = 1392;
      v17 = 1448;
      goto LABEL_22;
    case 1:
      v22 = *(_QWORD *)(v11 + a1 + 400);
      v23 = 1376;
      if (v13)
        v23 = 1384;
      v24 = (const char **)(v22 + v23);
      v25 = 1432;
      if (v13)
        v25 = 1440;
      v26 = (const char **)(v22 + v25);
      if (!a5)
        v26 = v24;
      goto LABEL_25;
    case 2:
      v14 = *(_QWORD *)(v11 + a1 + 400);
      v15 = a5 == 0;
      v16 = 1400;
      v17 = 1456;
      goto LABEL_22;
    case 3:
      v14 = *(_QWORD *)(v11 + a1 + 400);
      v15 = a5 == 0;
      v16 = 1408;
      v17 = 1464;
      goto LABEL_22;
    case 4:
      v14 = *(_QWORD *)(v11 + a1 + 400);
      v15 = a5 == 0;
      v16 = 1416;
      v17 = 1472;
      goto LABEL_22;
    case 5:
      v14 = *(_QWORD *)(v11 + a1 + 400);
      v15 = a5 == 0;
      v16 = 1424;
      v17 = 1480;
LABEL_22:
      if (!v15)
        v16 = v17;
      v26 = (const char **)(v14 + v16);
LABEL_25:
      v18 = *v26;
      v15 = !v13;
      v27 = 200;
      if (!v15)
        v27 = 168;
      v21 = *(_QWORD *)(v12 + v27);
      if (v18)
        v19 = strlen(v18);
      else
        v19 = 0;
      break;
    default:
      v18 = 0;
      v19 = 0;
      v15 = !v13;
      v20 = 200;
      if (!v15)
        v20 = 168;
      v21 = *(_QWORD *)(v12 + v20);
      break;
  }
  v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v11 + a1 + 32, (uint64_t)v18, v19, *(_QWORD *)(v11 + a1 + 176), *(_QWORD *)(a1 + v11 + 2768), v21);
  v29 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 && *(_BYTE *)(v29 + 8) == 18)
  {
    v30 = *(_DWORD *)(v29 + 32);
    if (v30 >= a6)
      v31 = a6;
    else
      v31 = v30;
    *(_OWORD *)v71 = 0u;
    v72 = 0u;
    v32 = v8[16];
    v33 = (AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32);
    if (v32 < 0x15 || (v32 & 0xFE) == 0x5A)
    {
      AGCLLVMBuilder::unboxVector(v33, (llvm::Value *)v8, v71);
      if (!(_DWORD)v31)
        return (llvm::Value *)EraseInstructionChain((llvm::Value *)v8);
      v45 = v71;
      v46 = v31;
      do
      {
        *v45 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), *v45, v10, 1);
        ++v45;
        --v46;
      }
      while (v46);
    }
    else
    {
      v8 = (unsigned __int8 *)AGCLLVMBuilder::extendFromSmall((llvm::Type **)v33, (llvm::Value *)v8, v10, 1);
      AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), (llvm::Value *)v8, v71);
    }
    if ((_DWORD)v31)
    {
      v62 = v28;
      v47 = 0;
      v48 = a1 + 8;
      v63 = v31;
      do
      {
        Select = v71[v47];
        v50 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        if (v10 == *(llvm::Type **)(v50 + a1 + 200))
        {
          if (*(_BYTE *)(a1 + 5061))
          {
            v51 = (llvm::IRBuilderBase *)(v50 + a1 + 40);
            v52 = *(_QWORD *)(v50 + a1 + 232);
            v67 = 257;
            v53 = v10;
            v54 = a3;
            Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v51, 49, (uint64_t)Select, v52, (uint64_t)v66);
            v56 = (llvm::Value *)llvm::ConstantInt::get();
            v70 = 257;
            v57 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v51, Cast, v56, (const llvm::Twine *)&Add);
            v58 = llvm::ConstantInt::get();
            v65 = 257;
            llvm::IRBuilderBase::CreateICmp((uint64_t *)v51, 34, v57, v58, (uint64_t)v64);
            llvm::ConstantFP::get();
            v31 = v63;
            a3 = v54;
            v10 = v53;
            v28 = v62;
            v48 = a1 + 8;
            Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
          }
        }
        v59 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v67 = 257;
        Add = llvm::IRBuilderBase::CreateAdd(v60, a3, v59, (const llvm::Twine *)v66);
        v69 = (uint64_t)Select;
        v61 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v48 + 32;
        v67 = 257;
        llvm::IRBuilderBase::CreateCall(v61, *(_QWORD *)(v28 + 24), v28, (uint64_t)&Add, 2, (uint64_t)v66);
        ++v47;
      }
      while (v31 != v47);
    }
    return (llvm::Value *)EraseInstructionChain((llvm::Value *)v8);
  }
  v34 = (uint64_t)AGCLLVMBuilder::extendFromSmall((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), (llvm::Value *)v8, v10, 1);
  v35 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v36 = v35 + 32;
  v37 = a1 + v35 + 32;
  if (v10 == *(llvm::Type **)(v37 + 168) && *(_BYTE *)(a1 + 5061))
  {
    v38 = (llvm::IRBuilderBase *)(v35 + a1 + 40);
    v39 = *(_QWORD *)(v37 + 200);
    v67 = 257;
    v40 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v38, 49, v34, v39, (uint64_t)v66);
    v41 = (llvm::Value *)llvm::ConstantInt::get();
    v70 = 257;
    v42 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v38, v40, v41, (const llvm::Twine *)&Add);
    v43 = llvm::ConstantInt::get();
    v65 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v38, 34, v42, v43, (uint64_t)v64);
    llvm::ConstantFP::get();
    v34 = llvm::IRBuilderBase::CreateSelect();
    v36 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
  }
  Add = (uint64_t)a3;
  v69 = v34;
  v67 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + v36 + 8, *(_QWORD *)(v28 + 24), v28, (uint64_t)&Add, 2, (uint64_t)v66);
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD __src[2];
  void *v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  __src[0] = a5;
  __src[1] = a6;
  v10[0] = v11;
  v10[1] = (void *)0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v10, __src, v10);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v7 = v6;
  if (v10[0] != v11)
    free(v10[0]);
  return v7;
}

llvm::Value *AGCLLVMBuilder::extendFromSmall(llvm::Type **this, llvm::Value *a2, llvm::Type *a3, int a4)
{
  llvm::Value *v5;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  llvm::IRBuilderBase *v10;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v5 = a2;
  if (this[19] == a3)
  {
    v7 = (uint64_t *)(this + 21);
  }
  else
  {
    if (this[24] != a3 && this[23] != a3 && this[22] != a3)
      return v5;
    v7 = (uint64_t *)(this + 25);
  }
  v8 = *v7;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v8 = llvm::FixedVectorType::get();
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  else
    v9 = *(_DWORD *)(v8 + 8);
  v10 = (llvm::IRBuilderBase *)(this + 1);
  if (v9 > 6)
  {
    v15 = 257;
    if (a4)
      v12 = 40;
    else
      v12 = 39;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, v12, (uint64_t)v5, v8, (uint64_t)v14);
  }
  else
  {
    v15 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v10, v5, (llvm::Type *)v8, (const llvm::Twine *)v14);
  }
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  void *String;
  size_t v12;
  size_t v13;
  const llvm::Type *v14;
  int ComponentType;
  int v16;
  unsigned int v18;

  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  v13 = v12;
  v14 = *(const llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * a3);
  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), v14, &v18);
  if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12)
    v16 = *((_DWORD *)v14 + 8);
  else
    v16 = 1;
  return AGCLLVMAGPVertexShader::getGenericVaryingInfo((uint64_t)a1, ComponentType, v16, String, v13, a5, a6);
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(uint64_t a1, int a2, int a3, void *a4, size_t a5, uint64_t a6, int a7)
{
  int Key;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  void **v19;
  llvm *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  v15 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 9432))
    return 0;
  v16 = *(_QWORD *)(a1 + 9424);
  v17 = *(_DWORD *)(*(_QWORD *)(v16 + 8 * Key) + 8);
  if (a2 != BYTE2(v17))
    return 0;
  if ((HIBYTE(v17) & 0x7F) != a3)
  {
    a3 = HIBYTE(v17) & 0x7F;
    if (!*(_BYTE *)(a1 + 10049))
      return 0;
  }
  v18 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v18;
  GenericVarying::GenericVarying((uint64_t)&v22, a3, a2, v17 & 0xF, BYTE1(v17), v18, a7);
  *(_OWORD *)a6 = v22;
  *(_DWORD *)(a6 + 16) = v23;
  v19 = (void **)(a6 + 24);
  if (*(char *)(a6 + 47) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v24;
  *(_QWORD *)(a6 + 40) = v25;
  *(_OWORD *)(a6 + 48) = v26;
  if (a4)
  {
    std::string::basic_string[abi:nn180100](&v22, a4, a5);
  }
  else
  {
    v22 = 0uLL;
    v23 = 0;
  }
  if (*(char *)(a6 + 47) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v22;
  *(_QWORD *)(a6 + 40) = v23;
  v21 = *(llvm **)(v16 + 8 * v15);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v21, (void *)(*(_QWORD *)v21 + 17));
  return 1;
}

uint64_t AGCLLVMBuilder::getComponentType(int8x16_t *this, const llvm::Type *a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *a3 = 1;
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    *a3 = *((_DWORD *)a2 + 8);
    a2 = (const llvm::Type *)**((_QWORD **)a2 + 2);
  }
  result = 0;
  v5 = this[9].i64[1];
  v6 = this[11].i64[0];
  v7[0] = this[10].i64[1];
  v7[1] = v5;
  v7[2] = v6;
  v8 = vextq_s8(this[12], this[12], 8uLL);
  v9 = this[11].i64[1];
  while (a2 != (const llvm::Type *)v7[result])
  {
    if (++result == 6)
      return 10;
  }
  return result;
}

uint64_t AGCLLVMUserObject::compile(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *Value;
  char *v10;
  _QWORD *v11;
  llvm::Module *v12;
  uint64_t NamedMetadata;
  uint64_t v14;
  llvm::Function *v15;
  llvm::DILocalScope *Subprogram;
  llvm::Module *v17;
  llvm::NamedMDNode *v18;
  llvm::NamedMDNode *v19;
  uint64_t Operand;
  char String;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Module *v40;
  llvm::NamedMDNode *v41;
  llvm::NamedMDNode *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int DefaultRoundingMode;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::GlobalVariable *GlobalVariable;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  llvm::GlobalValue *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  unsigned int v152;
  unint64_t *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t *v158;
  uint64_t v159;
  llvm::Use *v160;
  unint64_t v161;
  unsigned int v162;
  _QWORD *i;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  unint64_t *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  llvm::Instruction **v187;
  llvm::Instruction *v188;
  llvm::Instruction **v189;
  llvm::Instruction *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  BOOL TexturesAndSamplers;
  int v211;
  uint64_t v212;
  char v213;
  int v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  char v220;
  int v221;
  const char *v222;
  const char *v223;
  const char *v224;
  const char *v225;
  uint64_t v226;
  int v227;
  int v228;
  char v229;
  char v230;
  char v231;
  int v232;
  unsigned int v233;
  uint64_t v235;
  llvm::Constant *v236;
  llvm::NamedMDNode *inserted;
  llvm::NamedMDNode *v238;
  int NumOperands;
  unint64_t v240;
  uint64_t v241;
  int v242;
  int v244;
  uint64_t *v245;
  char *v246;
  uint64_t v247;
  char v248;
  char v249;
  char v250;
  char v251;
  AGCLLVMUserObject *v252;
  _BOOL4 v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  _QWORD *v258;
  _QWORD *v259;
  int v260;
  unint64_t *v261;
  _QWORD **v262;
  _QWORD *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  llvm *v268[2];
  unsigned int v269;
  uint64_t v270;
  uint64_t Function;
  char v272;
  int v273;
  char __str[8];
  uint64_t v275;
  _BYTE v276[7];
  char v277;
  __int16 v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD v281[6];

  v281[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 37))
  {
    v1 = this;
    v253 = MGGetBoolAnswer()
        && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEBUG_LLVM_IR", v2)) != 0
        && *Value != 48
        && atoi(Value) != 0;
    v10 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v11 = v10 + 3224;
    if (v10[3247] < 0)
      v11 = (_QWORD *)*v11;
    printMessage((char **)&AGCPrinter, "------ Compiling function : %s ------\n", v3, v4, v5, v6, v7, v8, (char)v11);
    v12 = *(llvm::Module **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 368);
    *(_QWORD *)__str = "llvm.dbg.cu";
    v278 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)__str);
    v14 = *(_QWORD *)v1;
    v252 = v1;
    if (NamedMetadata)
    {
      *((_BYTE *)v1 + *(_QWORD *)(v14 - 24) + 2760) = 1;
      v15 = (llvm::Function *)*((_QWORD *)v1 + 22);
      if (v15)
      {
        Subprogram = (llvm::DILocalScope *)llvm::Function::getSubprogram(v15);
        v14 = *(_QWORD *)v1;
        if (Subprogram)
        {
          llvm::DILocalScope::getNonLexicalBlockFileScope(Subprogram);
          *((_QWORD *)v1 + 6) = llvm::DILocation::getImpl();
          v14 = *(_QWORD *)v1;
        }
      }
    }
    v17 = *(llvm::Module **)((char *)v1 + *(_QWORD *)(v14 - 24) + 368);
    *(_QWORD *)__str = "air.requestHash";
    v278 = 259;
    v18 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v17, (const llvm::Twine *)__str);
    if (v18)
    {
      v19 = v18;
      Operand = llvm::NamedMDNode::getOperand(v18);
      String = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
      printMessage((char **)&AGCPrinter, "------ Build Request Info ------", v22, v23, v24, v25, v26, v27, v249);
      v250 = String;
      v1 = v252;
      printMessage((char **)&AGCPrinter, "hash: %s", v28, v29, v30, v31, v32, v33, v250);
      printMessage((char **)&AGCPrinter, "------ End Build Request Info ------\n", v34, v35, v36, v37, v38, v39, v251);
      llvm::NamedMDNode::eraseFromParent(v19);
    }
    v40 = *(llvm::Module **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 368);
    *(_QWORD *)__str = "air.shaderSource";
    v278 = 259;
    v41 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v40, (const llvm::Twine *)__str);
    if (v41)
    {
      v42 = v41;
      v43 = llvm::NamedMDNode::getOperand(v41);
      v44 = llvm::MDString::getString(*(llvm::MDString **)(v43 - 8 * *(unsigned int *)(v43 + 8)));
      if (v44)
      {
        v45 = v44;
        v46 = (_DWORD *)((char *)v252 + *(_QWORD *)(*(_QWORD *)v252 - 24));
        v47 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 56))(v46);
        if (dumpShaderToFile(v47))
        {
          v48 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 56))(v46);
          snprintf(__str, 0x80uLL, "%s shader %u (shader source)", v48, v46[818]);
          v49 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 56))(v46);
          if (!strcmp(v49, "compute") || !strcmp(v49, "compute-program"))
            v56 = "Compute";
          else
            v56 = "Graphics";
          printMessage((char **)&AGCPrinter, "------ Start %s %s -------\n", v50, v51, v52, v53, v54, v55, (char)v56);
          printMessage((char **)&AGCPrinter, "%s\n", v58, v59, v60, v61, v62, v63, v45);
          printMessage((char **)&AGCPrinter, "------ End %s %s -------\n", v64, v65, v66, v67, v68, v69, (char)v56);
        }
      }
      llvm::NamedMDNode::eraseFromParent(v42);
      v1 = v252;
    }
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "generic", 0);
    v70 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 56))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    printMessage((char **)&AGCPrinter, "------ Compilation flags for %s shader %u ------", v71, v72, v73, v74, v75, v76, v70);
    printMessage((char **)&AGCPrinter, "Object fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v77, v78, v79, v80, v81, v82, (*(_DWORD *)((_BYTE *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 136) & 2) != 0);
    printMessage((char **)&AGCPrinter, "Target fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v83, v84, v85, v86, v87, v88, (*(_DWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 104) & 2) != 0);
    printMessage((char **)&AGCPrinter, "Codegen fast-math options: { finite-math=%d, unsafe-fp-math=%d, less_pecise_fmad=%d}", v89, v90, v91, v92, v93, v94, *((_BYTE *)v1 + 34));
    v95 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 56))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    printMessage((char **)&AGCPrinter, "------ End compilation flags for %s shader %u ------", v96, v97, v98, v99, v100, v101, v95);
    v102 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 56))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v103, v104, v105, v106, v107, v108, v102);
    (*(void (**)(char *__return_ptr))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 120))(__str);
    if (v277 >= 0)
      v115 = __str;
    else
      LOBYTE(v115) = __str[0];
    printMessage((char **)&AGCPrinter, "%s", v109, v110, v111, v112, v113, v114, (char)v115);
    if (v277 < 0)
      operator delete(*(void **)__str);
    v116 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 56))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v117, v118, v119, v120, v121, v122, v116);
    DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMUserObject *)((char *)v1
                                                                                    + *(_QWORD *)(*(_QWORD *)v1 - 24)));
    printMessage((char **)&AGCPrinter, "Default rounding mode: %s", v124, v125, v126, v127, v128, v129, (char)_AGCFPRoundingModeStrings[DefaultRoundingMode]);
    GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (GlobalVariable)
      llvm::GlobalVariable::eraseFromParent(GlobalVariable);
    if (*((_BYTE *)v1 + 45))
    {
      v138 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 368);
      v139 = *(_QWORD *)(v138 + 32);
      v255 = v138 + 24;
      if (v139 != v138 + 24)
      {
        v140 = 0;
        while (1)
        {
          v256 = v139;
          if (v139)
            v141 = (llvm::GlobalValue *)(v139 - 56);
          else
            v141 = 0;
          if ((llvm::GlobalValue::isDeclaration(v141) & 1) == 0)
          {
            v254 = v140;
            *(_QWORD *)__str = v276;
            v275 = 0x1000000000;
            v142 = *((_QWORD *)v141 + 10);
            if (v142)
              v143 = v142 - 24;
            else
              v143 = 0;
            v144 = v143 + 40;
            v145 = *(_QWORD *)(v143 + 48);
            if (v145 == v143 + 40)
            {
              v148 = 0;
              v147 = v276;
            }
            else
            {
              do
              {
                if (v145)
                  v146 = v145 - 24;
                else
                  v146 = 0;
                if (v145 && *(_BYTE *)(v146 + 16) == 59)
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__str, v146);
                v145 = *(_QWORD *)(v145 + 8);
              }
              while (v145 != v144);
              v147 = *(_QWORD **)__str;
              v148 = v275;
            }
            v265 = &v267;
            v266 = 0x100000000;
            v268[0] = 0;
            v268[1] = 0;
            v269 = 0;
            v273 = 0;
            v270 = 0;
            Function = 0;
            v272 = 0;
            v149 = 0;
            if (v148)
            {
              v258 = &v147[v148];
              while (1)
              {
                v150 = *v147;
                v279 = v281;
                v280 = 0x400000001;
                v281[0] = v150;
                v264 = 0;
                v262 = &v263;
                v151 = operator new(0x28uLL);
                v151[4] = v150;
                *v151 = 0;
                v151[1] = 0;
                v151[2] = &v263;
                v262 = (_QWORD **)v151;
                v263 = v151;
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v151, v151);
                ++v264;
                v152 = v280;
                if ((_DWORD)v280)
                  break;
                LODWORD(v186) = 0;
LABEL_146:
                std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v263);
                if (v279 != v281)
                  free(v279);
                v149 += v186;
                if (++v147 == v258)
                  goto LABEL_157;
              }
              v259 = v147;
              v260 = v149;
              v153 = 0;
              v154 = 0;
              v155 = 0;
              v156 = 0;
              v157 = 0;
              v158 = 0;
              v257 = 0;
              do
              {
                v159 = v279[--v152];
                LODWORD(v280) = v152;
                v160 = *(llvm::Use **)(v159 + 8);
                if (v160)
                {
                  while (1)
                  {
                    v161 = *((_QWORD *)v160 + 3);
                    v162 = *(unsigned __int8 *)(v161 + 16);
                    if (v162 < 0x1C || v161 == 0)
                      goto LABEL_140;
                    if (*(unsigned __int8 *)(v161 + 16) > 0x3Du)
                      break;
                    if (v162 == 60)
                    {
                      if (*(_QWORD *)(v161 - 32) != v159 || (*(_WORD *)(v161 + 18) & 1) != 0)
                        goto LABEL_140;
                      if (v156 >= v157)
                      {
                        v261 = v158;
                        v172 = v159;
                        v173 = v154;
                        v174 = v156 - v155;
                        v175 = v174 + 1;
                        if ((unint64_t)(v174 + 1) >> 61)
LABEL_352:
                          abort();
                        if (((char *)v157 - (char *)v155) >> 2 > v175)
                          v175 = ((char *)v157 - (char *)v155) >> 2;
                        if ((unint64_t)((char *)v157 - (char *)v155) >= 0x7FFFFFFFFFFFFFF8)
                          v176 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v176 = v175;
                        if (v176)
                        {
                          if (v176 >> 61)
LABEL_353:
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          v177 = (char *)operator new(8 * v176);
                        }
                        else
                        {
                          v177 = 0;
                        }
                        v181 = (unint64_t *)&v177[8 * v174];
                        *v181 = v161;
                        v182 = v181 + 1;
                        while (v156 != v155)
                        {
                          v183 = *--v156;
                          *--v181 = v183;
                        }
                        v157 = (unint64_t *)&v177[8 * v176];
                        if (v155)
                          operator delete(v155);
                        v155 = v181;
                        v156 = v182;
                        v154 = v173;
                        v159 = v172;
                        v158 = v261;
                      }
                      else
                      {
                        *v156++ = v161;
                      }
                      goto LABEL_127;
                    }
                    if (v162 != 61 || *(_QWORD *)(v161 - 32) != v159 || (*(_WORD *)(v161 + 18) & 1) != 0)
                      goto LABEL_140;
                    if (v153 >= v154)
                    {
                      v167 = v157;
                      v168 = v153 - v158;
                      v169 = v168 + 1;
                      if ((unint64_t)(v168 + 1) >> 61)
                        goto LABEL_352;
                      if (((char *)v154 - (char *)v158) >> 2 > v169)
                        v169 = ((char *)v154 - (char *)v158) >> 2;
                      if ((unint64_t)((char *)v154 - (char *)v158) >= 0x7FFFFFFFFFFFFFF8)
                        v170 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v170 = v169;
                      if (v170)
                      {
                        if (v170 >> 61)
                          goto LABEL_353;
                        v171 = (char *)operator new(8 * v170);
                      }
                      else
                      {
                        v171 = 0;
                      }
                      v178 = (unint64_t *)&v171[8 * v168];
                      *v178 = v161;
                      v179 = v178 + 1;
                      if (v153 != v158)
                      {
                        do
                        {
                          v180 = *--v153;
                          *--v178 = v180;
                        }
                        while (v153 != v158);
                        v153 = v158;
                      }
                      v158 = v178;
                      v154 = (unint64_t *)&v171[8 * v170];
                      if (v153)
                        operator delete(v153);
                      v153 = v179;
LABEL_126:
                      v157 = v167;
                      goto LABEL_127;
                    }
                    *v153++ = v161;
LABEL_127:
                    v160 = (llvm::Use *)*((_QWORD *)v160 + 1);
                    if (!v160)
                    {
                      v152 = v280;
                      goto LABEL_129;
                    }
                  }
                  if (v162 == 62)
                    goto LABEL_65;
                  if (v162 != 84)
                  {
                    if (v162 != 77)
                      goto LABEL_140;
LABEL_65:
                    for (i = v263; i; i = (_QWORD *)*i)
                    {
                      v165 = i[4];
                      if (v161 >= v165)
                      {
                        if (v165 >= v161)
                          goto LABEL_127;
                        ++i;
                      }
                    }
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v279, *((_QWORD *)v160 + 3));
                    std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>((uint64_t *)&v262, v161, v161);
                    goto LABEL_127;
                  }
                  if ((llvm::AttributeList::hasFnAttr() & 1) != 0
                    || (llvm::CallBase::hasReadingOperandBundles((llvm::CallBase *)v161) & 1) == 0
                    && (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) != 0)
                  {
                    goto LABEL_127;
                  }
                  if (*(_BYTE *)(*(_QWORD *)v161 + 8) != 7)
                    goto LABEL_140;
                  v166 = *(_QWORD *)(v161 - 32);
                  if (v166)
                  {
                    if (!*(_BYTE *)(v166 + 16)
                      && *(_QWORD *)(v166 + 24) == *(_QWORD *)(v161 + 72)
                      && (*(_BYTE *)(v166 + 33) & 0x20) != 0
                      && (*(_DWORD *)(v166 + 36) - 167) < 2)
                    {
                      goto LABEL_127;
                    }
                  }
                  v167 = v157;
                  llvm::Use::getOperandNo(v160);
                  if (!llvm::CallBase::paramHasAttr())
                    goto LABEL_140;
                  if ((llvm::CallBase::paramHasAttr() & 1) != 0)
                  {
                    v257 = 1;
                  }
                  else if ((llvm::CallBase::paramHasAttr() & 1) == 0)
                  {
                    goto LABEL_140;
                  }
                  goto LABEL_126;
                }
LABEL_129:
                ;
              }
              while (v152);
              v184 = (char *)v153 - (char *)v158;
              if ((v155 != v156) | v257 & 1)
              {
                if (v184 != 8 || (v185 = *(_QWORD *)(*v158 - 32), llvm::UndefValue::get(), v155 == v156))
                {
LABEL_140:
                  LODWORD(v186) = 0;
                }
                else
                {
                  LODWORD(v186) = 0;
                  v187 = (llvm::Instruction **)v155;
                  do
                  {
                    v188 = *v187;
                    if (*((_QWORD *)*v187 - 4) == v185)
                    {
                      if (!(_DWORD)v266)
                      {
                        Function = llvm::Instruction::getFunction(v188);
                        llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
                      }
                      llvm::DominatorTree::dominates();
                      llvm::Value::replaceAllUsesWith();
                      llvm::Instruction::eraseFromParent(v188);
                      LODWORD(v186) = v186 + 1;
                    }
                    ++v187;
                  }
                  while (v187 != (llvm::Instruction **)v156);
                }
                v149 = v260;
                v147 = v259;
                if (v155)
LABEL_142:
                  operator delete(v155);
              }
              else
              {
                v186 = v184 >> 3;
                v149 = v260;
                v147 = v259;
                if (v158 == v153)
                {
                  v158 = v153;
                }
                else
                {
                  v189 = (llvm::Instruction **)v158;
                  do
                  {
                    v190 = *v189++;
                    llvm::Instruction::eraseFromParent(v190);
                  }
                  while (v189 != (llvm::Instruction **)v153);
                }
                if (v155)
                  goto LABEL_142;
              }
              if (v158)
                operator delete(v158);
              goto LABEL_146;
            }
LABEL_157:
            llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((uint64_t)v268);
            llvm::deallocate_buffer(v268[0], (void *)(16 * v269));
            if (v265 != &v267)
              free(v265);
            if (*(_BYTE **)__str != v276)
              free(*(void **)__str);
            v140 = v149 + v254;
          }
          v139 = *(_QWORD *)(v256 + 8);
          if (v139 == v255)
            goto LABEL_165;
        }
      }
      LOBYTE(v140) = 0;
LABEL_165:
      printMessage((char **)&AGCPrinter, "RemoveAndForwardAllocaStores: removed %u instructions", v132, v133, v134, v135, v136, v137, v140);
      if (!v253)
      {
        v1 = v252;
        AGCLLVMUserObject::markFunctionsInline(v252, v191, v192, v193, v194, v195, v196, v197);
        (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 40))(v1);
        goto LABEL_177;
      }
      v1 = v252;
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v252 + *(_QWORD *)(*(_QWORD *)v252 - 24)), "after RemoveAndForwardAllocaStores", 0);
    }
    AGCLLVMUserObject::markFunctionsInline(v1, v131, v132, v133, v134, v135, v136, v137);
    (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 40))(v1);
    if (v253)
    {
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after simplifyGenericIR", 0);
      v198 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 48))(v1);
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after initCompile", 0);
      v199 = *(_QWORD *)v1;
      if ((v198 & 1) != 0)
      {
        v200 = (*(uint64_t (**)(AGCLLVMUserObject *))(v199 + 120))(v1);
        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupShaderInputs", 0);
        if ((v200 & 1) != 0)
        {
          v201 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 200))(v1);
          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupBufferAliasInfo", 0);
          if ((v201 & 1) != 0)
          {
            v202 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 208))(v1);
            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupStackOOBCheck", 0);
            if ((v202 & 1) != 0)
            {
              v203 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 160))(v1);
              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupInterpolationFunctions", 0);
              if ((v203 & 1) != 0)
              {
                v204 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 136))(v1);
                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupGlobalBindings", 0);
                if ((v204 & 1) != 0)
                {
                  v205 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 312))(v1);
                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupArgumentBuffers", 0);
                  if ((v205 & 1) == 0)
                    goto LABEL_197;
LABEL_184:
                  AGCLLVMUserObject::setupDylibRequirements((uint64_t)v1);
                  v206 = AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(v1);
                  v207 = v206;
                  if (v253)
                  {
                    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupAtomicWaitNotify", 0);
                    if ((v207 & 1) != 0)
                    {
                      AGCLLVMUserObject::setupThreadLocalStorage(v1);
                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupThreadLocalStorage", 0);
                      v208 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 112))(v1);
                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupShaderWrapper", 0);
                      if ((v208 & 1) != 0)
                      {
                        v209 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 128))(v1);
                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupShaderOutputs", 0);
                        if ((v209 & 1) != 0)
                        {
                          AGCLLVMUserObject::lowerGlobalBindings(v1);
                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after LowerGlobalBindings", 0);
                          AGCLLVMUserObject::cleanupShaderIR(v1);
                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after cleanupShaderIR", 0);
                          (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 152))(v1);
                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "After setupIndirectSamplers", 0);
                          TexturesAndSamplers = AGCLLVMUserObject::allocateTexturesAndSamplers(v1);
                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "After allocateTexturesAndSamplers", 0);
                          if (TexturesAndSamplers)
                          {
                            v211 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 144))(v1);
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupImageBlocks", 0);
                            if (v211)
                              LOBYTE(v211) = AGCLLVMUserObject::replaceTexturesAndSamplers(v1);
LABEL_202:
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceTexturesAndSamplers", 0);
                            AGCLLVMUserObject::replaceTrigIdentities(v1);
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after simplifyTrigIdentities", 0);
                            (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 216))(v1);
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after optimizeThreadgroupBarriers", 0);
                            v212 = *(_QWORD *)v1;
                            if ((v211 & 1) != 0)
                            {
                              v213 = (*(uint64_t (**)(AGCLLVMUserObject *))(v212 + 232))(v1);
                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after markInvariantOutputs", 0);
                              if ((v213 & 1) != 0)
                              {
                                AGCLLVMUserObject::replaceFunctionGroups(v1);
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceFunctionGroups", 0);
                                AGCLLVMUserObject::replaceSimdgroupAsyncCopy(v1);
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupAsyncCopy", 0);
                                v214 = AGCLLVMUserObject::replaceSimdgroupMatrices(v1);
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupMatrices", 0);
                                if (v214)
                                  v214 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 168))(v1);
                                goto LABEL_208;
                              }
                            }
                            else
                            {
                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(v212 - 24)), "after markInvariantOutputs", 0);
                            }
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceFunctionGroups", 0);
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupAsyncCopy", 0);
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupMatrices", 0);
                            v214 = 0;
LABEL_208:
                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replacePreRuntimeLinkBuiltins", 0);
                            goto LABEL_220;
                          }
LABEL_201:
                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupImageBlocks", 0);
                          LOBYTE(v211) = 0;
                          goto LABEL_202;
                        }
LABEL_200:
                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after LowerGlobalBindings", 0);
                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after cleanupShaderIR", 0);
                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "After setupIndirectSamplers", 0);
                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "After allocateTexturesAndSamplers", 0);
                        goto LABEL_201;
                      }
LABEL_199:
                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupShaderOutputs", 0);
                      goto LABEL_200;
                    }
LABEL_198:
                    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupThreadLocalStorage", 0);
                    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupShaderWrapper", 0);
                    goto LABEL_199;
                  }
                  if ((v206 & 1) != 0)
                  {
                    AGCLLVMUserObject::setupThreadLocalStorage(v1);
                    if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 112))(v1) & 1) != 0
                      && ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 128))(v1) & 1) != 0)
                    {
                      AGCLLVMUserObject::lowerGlobalBindings(v1);
                      AGCLLVMUserObject::cleanupShaderIR(v1);
                      (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 152))(v1);
                      if (AGCLLVMUserObject::allocateTexturesAndSamplers(v1))
                      {
                        if ((*(unsigned int (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 144))(v1))
                        {
                          v215 = AGCLLVMUserObject::replaceTexturesAndSamplers(v1);
                          AGCLLVMUserObject::replaceTrigIdentities(v1);
                          (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 216))(v1);
                          if ((v215 & 1) != 0)
                          {
                            if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 232))(v1) & 1) != 0
                              && (AGCLLVMUserObject::replaceFunctionGroups(v252),
                                  AGCLLVMUserObject::replaceSimdgroupAsyncCopy(v252),
                                  AGCLLVMUserObject::replaceSimdgroupMatrices(v252)))
                            {
                              v1 = v252;
                              v214 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v252 + 168))(v252);
                            }
                            else
                            {
                              v214 = 0;
                              v1 = v252;
                            }
LABEL_220:
                            if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1
                                                                                    + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                        + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) == 29)
                            {
                              if (v214)
                                v214 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 4);
                              if (v253)
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking rt runtime", 0);
                            }
                            if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1
                                                                                    + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                        + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) == 3
                              || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1
                                                                                    + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                        + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) == 4)
                            {
                              if (v214)
                                v214 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 6);
                              if (v253)
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking gpe runtime", 0);
                            }
                            v216 = *(_QWORD *)v1;
                            v217 = *(_QWORD *)(*(_QWORD *)v1 - 24);
                            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((char *)v1 + v217 + 400) + 816) + 45))
                            {
                              if (!v214)
                              {
                                if (v253)
                                {
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + v217), "after linking ei runtime", 0);
LABEL_243:
                                  v217 = *(_QWORD *)(*(_QWORD *)v1 - 24);
LABEL_245:
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + v217), "after linking vf runtime", 0);
LABEL_246:
                                  v219 = 0;
                                  goto LABEL_247;
                                }
                                goto LABEL_250;
                              }
                              v218 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(v216 + 256))(v1, 2);
                              v219 = v218;
                              if (v253)
                              {
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking ei runtime", 0);
                                if (v219)
                                {
                                  v220 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 3);
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking vf runtime", 0);
                                  if ((v220 & 1) == 0)
                                    goto LABEL_246;
                                  goto LABEL_240;
                                }
                                goto LABEL_243;
                              }
                              if (v218)
                              {
                                if (((*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 3) & 1) == 0)
                                {
LABEL_250:
                                  v219 = 0;
                                  goto LABEL_253;
                                }
                                goto LABEL_252;
                              }
                            }
                            else
                            {
                              if ((v214 & 1) == 0)
                              {
                                if (v253)
                                  goto LABEL_245;
                                goto LABEL_250;
                              }
                              v221 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(v216 + 256))(v1, 3);
                              v219 = v221;
                              if (v253)
                              {
                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking vf runtime", 0);
                                if (!v219)
                                {
LABEL_247:
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking texture atomic runtime", 0);
                                  AGCLLVMUserObject::replaceLateTextureBufferLength((uint64_t)v1);
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceLateTextureBufferLength", 0);
                                  goto LABEL_254;
                                }
LABEL_240:
                                v219 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 7);
                                goto LABEL_247;
                              }
                              if (v221)
LABEL_252:
                                v219 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 256))(v1, 7);
                            }
LABEL_253:
                            AGCLLVMUserObject::replaceLateTextureBufferLength((uint64_t)v1);
LABEL_254:
                            if (!*((_BYTE *)v1 + 14) && MGGetBoolAnswer())
                            {
                              v223 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_F16_FASTMATH_BUILTINS", v222);
                              if (!v223 || *v223 == 48)
                              {
                                if ((v219 & 1) == 0)
                                {
                                  v219 = 0;
                                  goto LABEL_267;
                                }
                                goto LABEL_266;
                              }
                              if (atoi(v223))
                              {
                                if (!v219)
                                {
                                  if (!v253)
                                  {
                                    v219 = 0;
                                    goto LABEL_269;
                                  }
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replace f16 builtins", 0);
                                  goto LABEL_330;
                                }
                                v219 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 184))(v1);
                                if (v253)
                                {
                                  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replace f16 builtins", 0);
                                  if ((v219 & 1) != 0)
                                  {
LABEL_266:
                                    v219 = (*(uint64_t (**)(AGCLLVMUserObject *, _QWORD))(*(_QWORD *)v1 + 248))(v1, 0);
LABEL_267:
                                    if (!v253)
                                    {
LABEL_269:
                                      if (MGGetBoolAnswer())
                                      {
                                        v225 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_PRECISE_MATH", v224);
                                        if (v225)
                                        {
                                          if (*v225 != 48
                                            && atoi(v225)
                                            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v1
                                                                                 + *(_QWORD *)(*(_QWORD *)v1 - 24)
                                                                                 + 400)
                                                                     + 816)
                                                         + 32))
                                          {
                                            if (v219)
                                              v219 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(_QWORD *)v1 + 248))(v1, 1);
                                            if (v253)
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking precise metal runtime", 0);
                                          }
                                        }
                                      }
                                      v226 = *(_QWORD *)(*(_QWORD *)v1 - 24);
                                      if (*(_BYTE *)(*(_QWORD *)((char *)v1 + v226 + 400) + 1755))
                                      {
                                        if ((v219 & 1) != 0)
                                        {
                                          AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
                                          if (!v253)
                                          {
LABEL_311:
                                            AGCLLVMUserObject::replaceRaytracingFunctions(v1);
                                            if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 176))(v1) & 1) != 0
                                              && ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 264))(v1) & 1) != 0
                                              && (*(unsigned int (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 224))(v1))
                                            {
LABEL_314:
                                              if (!*((_BYTE *)v1 + 15))
                                              {
                                                v235 = *((_QWORD *)v1 + 21);
                                                *(_WORD *)(v235 + 18) = *(_WORD *)(v235 + 18) & 0xC00F | (16 * (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 88))(v1));
                                                v236 = (llvm::Constant *)(*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 96))(v1);
                                                if (v236)
                                                  llvm::Function::setPrefixData(*((llvm::Function **)v1 + 21), v236);
                                              }
                                              inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
                                              if (inserted)
                                              {
                                                v238 = inserted;
                                                NumOperands = llvm::NamedMDNode::getNumOperands(inserted);
                                                *(_QWORD *)__str = v276;
                                                v275 = 0x400000000;
                                                if (NumOperands)
                                                  v240 = (NumOperands - 1) + 1;
                                                else
                                                  v240 = 0;
                                                if (v240 < 5)
                                                {
                                                  v241 = 0;
                                                  v242 = 0;
                                                }
                                                else
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                  v241 = v275;
                                                  v242 = v275;
                                                }
                                                if (NumOperands)
                                                {
                                                  v244 = 0;
                                                  v245 = (uint64_t *)(*(_QWORD *)__str + 8 * v241);
                                                  do
                                                  {
                                                    *v245++ = llvm::NamedMDNode::getOperand(v238);
                                                    ++v244;
                                                  }
                                                  while (NumOperands != v244);
                                                  v242 = v275;
                                                }
                                                LODWORD(v275) = v242 + v240;
                                                llvm::Module::eraseNamedMetadata(*(llvm::Module **)((char *)v252+ *(_QWORD *)(*(_QWORD *)v252 - 24)+ 368), v238);
                                                llvm::Module::getOrInsertNamedMetadata();
                                                v246 = *(char **)__str;
                                                if ((_DWORD)v275)
                                                {
                                                  v247 = 8 * v275;
                                                  do
                                                  {
                                                    if (*(_QWORD *)(*(_QWORD *)v246
                                                                   - 8 * *(unsigned int *)(*(_QWORD *)v246 + 8)))
                                                      llvm::NamedMDNode::addOperand();
                                                    v246 += 8;
                                                    v247 -= 8;
                                                  }
                                                  while (v247);
                                                  v246 = *(char **)__str;
                                                }
                                                if (v246 != v276)
                                                  free(v246);
                                              }
                                              v1 = v252;
                                              if (v253)
                                              {
                                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v252+ *(_QWORD *)(*(_QWORD *)v252 - 24)), "after prunePRIDsOfDeletedGlobals", 0);
                                                AGCLLVMUserObject::bindDylibResources((AGCLLVMUserObject **)v252);
                                                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v252+ *(_QWORD *)(*(_QWORD *)v252 - 24)), "after bindDylibResources", 0);
                                              }
                                              else
                                              {
                                                AGCLLVMUserObject::bindDylibResources((AGCLLVMUserObject **)v252);
                                              }
                                              v57 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)((char *)v252 + *(_QWORD *)(*(_QWORD *)v252 - 24))
                                                                                              + 168))((char *)v252 + *(_QWORD *)(*(_QWORD *)v252 - 24), *((_QWORD *)v252 + 21));
                                              if (!v253)
                                              {
                                                AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v252);
                                                AGCLLVMUserObject::overrideExternallyInitializedLinkage(v252);
                                                if ((v57 & 1) != 0)
                                                {
                                                  v248 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v252 + 328))(v252);
                                                  AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v252);
                                                  if ((v248 & 1) == 0)
                                                    goto LABEL_325;
                                                  goto LABEL_301;
                                                }
LABEL_324:
                                                AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v1);
                                                goto LABEL_325;
                                              }
LABEL_298:
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after finalizeDriverBindings", 0);
                                              AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v1);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after overrideFunctionAttributesAndLinkage", 0);
                                              AGCLLVMUserObject::overrideExternallyInitializedLinkage(v1);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after overrideExternallyInitializedLinkage", 0);
                                              if ((_DWORD)v57)
                                                v57 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 328))(v1);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after generateAuxiliaryShaders", 0);
                                              AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v1);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceTextureStatePtr", 0);
                                              if (!(_DWORD)v57)
                                                goto LABEL_326;
LABEL_301:
                                              if ((*(unsigned int (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 240))(v1))
                                              {
                                                *(_WORD *)__str = 0;
                                                v232 = 1;
                                                __str[2] = 1;
                                                *(_DWORD *)&__str[4] = 0;
                                                v233 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                                         + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
                                                if (v233 > 0x1E || ((1 << v233) & 0x60400180) == 0)
                                                  v232 = 2;
                                                __str[3] = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                                             + 72))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
                                                if (AGCLLVMCtx::compile(*(_QWORD *)((char *)v1+ *(_QWORD *)(*(_QWORD *)v1 - 24)+ 464), (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), *(_QWORD *)((char *)v1+ *(_QWORD *)(*(_QWORD *)v1 - 24)+ 368), *(_DWORD *)((char *)v1 + 33), v232, __str, *((unsigned __int8 *)v1 + 44)))
                                                {
                                                  v57 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24))
                                                                                          + 136))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
LABEL_326:
                                                  *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 416) = mach_absolute_time() - *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 408);
                                                  return v57;
                                                }
                                              }
LABEL_325:
                                              v57 = 0;
                                              goto LABEL_326;
                                            }
LABEL_323:
                                            AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v1);
                                            AGCLLVMUserObject::overrideExternallyInitializedLinkage(v1);
                                            goto LABEL_324;
                                          }
LABEL_286:
                                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceCommandBufferPrivateData", 0);
                                          AGCLLVMUserObject::replaceRaytracingFunctions(v1);
                                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceRaytracingFunctions", 0);
                                          v229 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 176))(v1);
                                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceBuiltins", 0);
                                          if ((v229 & 1) != 0)
                                          {
                                            v230 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 264))(v1);
                                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after promoteGlobalConstants", 0);
                                            if ((v230 & 1) != 0)
                                            {
                                              v231 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 224))(v1);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after improveDMAPromotionOpportunity", 0);
                                              if ((v231 & 1) != 0)
                                                goto LABEL_314;
LABEL_297:
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after prunePRIDsOfDeletedGlobals", 0);
                                              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after bindDylibResources", 0);
                                              v57 = 0;
                                              goto LABEL_298;
                                            }
LABEL_296:
                                            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after improveDMAPromotionOpportunity", 0);
                                            goto LABEL_297;
                                          }
LABEL_295:
                                          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after promoteGlobalConstants", 0);
                                          goto LABEL_296;
                                        }
                                        if (!v253)
                                          goto LABEL_323;
                                      }
                                      else if (v219)
                                      {
                                        v227 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 192))(v1);
                                        v228 = v227;
                                        if (!v253)
                                        {
                                          if (!v227)
                                            goto LABEL_323;
                                          AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
                                          goto LABEL_311;
                                        }
                                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceIndirectResources", 0);
                                        if (v228)
                                        {
                                          AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
                                          goto LABEL_286;
                                        }
                                      }
                                      else
                                      {
                                        if (!v253)
                                          goto LABEL_323;
                                        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + v226), "after replaceIndirectResources", 0);
                                      }
                                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceCommandBufferPrivateData", 0);
                                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceRaytracingFunctions", 0);
                                      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceBuiltins", 0);
                                      goto LABEL_295;
                                    }
LABEL_268:
                                    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after linking metal runtime", 0);
                                    goto LABEL_269;
                                  }
LABEL_330:
                                  v219 = 0;
                                  goto LABEL_268;
                                }
                              }
                            }
                            if (!v219)
                              goto LABEL_267;
                            goto LABEL_266;
                          }
LABEL_219:
                          v214 = 0;
                          goto LABEL_220;
                        }
                      }
                    }
                  }
LABEL_218:
                  AGCLLVMUserObject::replaceTrigIdentities(v1);
                  (*(void (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 216))(v1);
                  goto LABEL_219;
                }
LABEL_196:
                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupArgumentBuffers", 0);
LABEL_197:
                AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after replaceSimdgroupAtomicWaitNotify", 0);
                goto LABEL_198;
              }
LABEL_195:
              AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupGlobalBindings", 0);
              goto LABEL_196;
            }
LABEL_194:
            AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupInterpolationFunctions", 0);
            goto LABEL_195;
          }
LABEL_193:
          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupStackOOBCheck", 0);
          goto LABEL_194;
        }
      }
      else
      {
        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(v199 - 24)), "after setupShaderInputs", 0);
      }
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)), "after setupBufferAliasInfo", 0);
      goto LABEL_193;
    }
LABEL_177:
    if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 48))(v1) & 1) == 0
      || ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 120))(v1) & 1) == 0
      || ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 200))(v1) & 1) == 0
      || ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 208))(v1) & 1) == 0
      || ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 160))(v1) & 1) == 0
      || ((*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 136))(v1) & 1) == 0
      || !(*(unsigned int (**)(AGCLLVMUserObject *))(*(_QWORD *)v1 + 312))(v1))
    {
      goto LABEL_218;
    }
    goto LABEL_184;
  }
  return 0;
}

uint64_t AGCLLVMObject::getRelocModel(AGCLLVMObject *this)
{
  return 0;
}

void AGCLLVMObject::printIR(AGCLLVMObject *this, const char *a2, const llvm::Module *a3)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  void **v51;
  void *__p[2];
  uint64_t v53;
  char __str[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 56))(this);
  if (dumpShaderToFile(v5))
  {
    v6 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 56))(this);
    snprintf(__str, 0x80uLL, "%s shader %u (%s)", v6, *((_DWORD *)this + 818), a2);
    __p[0] = 0;
    __p[1] = 0;
    v53 = 0;
    v44 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v43 = MEMORY[0x1E0DE2AB0] + 16;
    v51 = __p;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v43);
    llvm::Module::print();
    v13 = *((_QWORD *)this + 46);
    v14 = v13 + 24;
    v15 = *(_QWORD *)(v13 + 32);
    if (v15 == v14)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        if (v15)
          v17 = v15 - 56;
        else
          v17 = 0;
        v18 = v17 + 72;
        for (i = *(_QWORD *)(v17 + 80); i != v18; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v20 = i - 24;
          else
            v20 = 0;
          v21 = v20 + 40;
          v22 = *(_QWORD *)(v20 + 48);
          if (v22 == v21)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            do
            {
              ++v23;
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22 != v21);
          }
          v16 += v23;
        }
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != v14);
    }
    printMessage((char **)&AGCPrinter, "------ Start LLVM IR %s -------\n", v7, v8, v9, v10, v11, v12, (char)__str);
    v30 = __p;
    if (v53 < 0)
      LOBYTE(v30) = __p[0];
    printMessage((char **)&AGCPrinter, "%s\n", v24, v25, v26, v27, v28, v29, (char)v30);
    printMessage((char **)&AGCPrinter, "; %u instructions", v31, v32, v33, v34, v35, v36, v16);
    printMessage((char **)&AGCPrinter, "------ End LLVM IR %s -------\n", v37, v38, v39, v40, v41, v42, (char)__str);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v43);
    if (SHIBYTE(v53) < 0)
      operator delete(__p[0]);
  }
}

uint64_t AGCLLVMUserObject::replaceLateTextureBufferLength(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  unint64_t v8;
  uint64_t v9;
  llvm::Type **v10;
  llvm::Instruction *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *Cast;
  uint64_t v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  uint64_t *v22;
  llvm::Type *v23;
  llvm::Type *v24;
  llvm::Value *AlignedLoad;
  llvm::Type **GEP;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Type *v29;
  uint64_t v30;
  uint64_t v31;
  char v32[32];
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 24) + this + 368);
  v2 = v1 + 24;
  v3 = *(_QWORD *)(v1 + 32);
  v30 = v2;
  if (v3 != v2)
  {
    v4 = (_QWORD *)this;
    v5 = this + 200;
    v6 = this + 8;
    do
    {
      v31 = *(_QWORD *)(v3 + 8);
      if (v3)
        v7 = (llvm::Value *)(v3 - 56);
      else
        v7 = 0;
      this = llvm::Value::getName(v7);
      if (v8 >= 0x26)
      {
        this = memcmp((const void *)this, "agx.texture_heap.texture_buffer_length", 0x26uLL);
        if (!(_DWORD)this)
        {
          this = llvm::Module::getGlobalVariable();
          v9 = *((_QWORD *)v7 + 1);
          if (v9)
          {
            v10 = (llvm::Type **)this;
            do
            {
              v11 = *(llvm::Instruction **)(v9 + 24);
              v9 = *(_QWORD *)(v9 + 8);
              if (*((_BYTE *)v11 + 16) == 84)
                v12 = v11;
              else
                v12 = 0;
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40), v12);
              v13 = *((_QWORD *)v12 - 4 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
              v14 = *(_QWORD *)(*v4 - 24);
              v15 = *(_QWORD *)(v14 + v5 + 32);
              v35 = 257;
              Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v14 + 40, 47, v13, v15, (uint64_t)v34);
              v18 = *(_QWORD *)(*v4 - 24);
              v19 = v18 + 32;
              if (!*(_DWORD *)(*(_QWORD *)((char *)v4 + v18 + 400) + 1780))
              {
                v20 = (llvm::IRBuilderBase *)((char *)v4 + v18 + 40);
                v21 = (llvm::Value *)llvm::ConstantInt::get();
                v35 = 257;
                Cast = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v20, Cast, v21, (const llvm::Twine *)v34);
                v19 = *(_QWORD *)(*v4 - 24) + 32;
              }
              v22 = (_QWORD *)((char *)v4 + v19);
              v23 = *(llvm::Type **)((char *)v4 + v19 + 200);
              v35 = 257;
              v24 = AGCLLVMBuilder::tryDeducePointeeType(v10, v16);
              AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(++v22, v24, (uint64_t)v10, 0, (uint64_t)v34);
              v33 = 257;
              GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v22, v23, AlignedLoad, Cast, (const llvm::Twine *)v32);
              v27 = *(_QWORD *)(*v4 - 24) + v6;
              v35 = 257;
              v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v28);
              llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v27 + 32), v29, (uint64_t)GEP, 0, (uint64_t)v34);
              llvm::Value::replaceAllUsesWith();
              this = llvm::Instruction::eraseFromParent(v12);
            }
            while (v9);
          }
        }
      }
      v3 = v31;
    }
    while (v31 != v30);
  }
  return this;
}

uint64_t AGCLLVMUserObject::replacePreRuntimeLinkBuiltins(AGCLLVMUserObject *this)
{
  return 1;
}

void AGCLLVMUserObject::setupIndirectSamplersAGP(AGCLLVMUserObject *this)
{
  char *v1;
  uint64_t v2;
  llvm::Module *v3;
  llvm::legacy::PassManager *v4;
  llvm *PassManager;
  llvm::Pass *SROAPass;
  llvm *v7;
  llvm::legacy::PassManager *v8;
  llvm::Pass *InstructionCombiningPass;

  if (*((_BYTE *)this + 14))
  {
    AGCLLVMUserObject::setupIndirectSamplersGL(this);
  }
  else
  {
    v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v2 = *((_QWORD *)v1 + 58);
    if (!*(_BYTE *)(v2 + 378))
    {
      v3 = (llvm::Module *)*((_QWORD *)v1 + 46);
      v4 = *(llvm::legacy::PassManager **)(v2 + 360);
      if (!v4)
      {
        PassManager = AGCLLVMCtx::createPassManager(*((AGCLLVMCtx **)v1 + 58));
        *(_QWORD *)(v2 + 360) = PassManager;
        SROAPass = (llvm::Pass *)llvm::createSROAPass(PassManager);
        v7 = (llvm *)AGCLLVMCtx::addPass((AGCLLVMCtx *)v2, PassManager, SROAPass);
        v8 = *(llvm::legacy::PassManager **)(v2 + 360);
        InstructionCombiningPass = (llvm::Pass *)llvm::createInstructionCombiningPass(v7);
        AGCLLVMCtx::addPass((AGCLLVMCtx *)v2, v8, InstructionCombiningPass);
        v4 = *(llvm::legacy::PassManager **)(v2 + 360);
      }
      llvm::legacy::PassManager::run(v4, v3);
    }
  }
}

uint64_t AGCLLVMUserObject::setupBufferAliasInfo(AGCLLVMUserObject *this)
{
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  int NumOperands;
  int v5;
  int i;
  uint64_t Operand;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t j;
  uint64_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v27;
  void *v28[2];
  _BYTE v29[128];
  void *v30;
  unsigned int v31;
  int v32;
  _BYTE v33[256];
  void *v34;
  uint64_t v35;
  _WORD v36[128];
  uint64_t *v37;
  uint64_t v38;
  _QWORD v39[18];

  v39[16] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 970))
  {
    v37 = v39;
    v38 = 0x1000000000;
    v2 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v34 = "agx.buffer.alias.scopes";
    v36[8] = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v34);
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v5 = NumOperands;
      for (i = 0; i != v5; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, Operand);
      }
    }
    v34 = v36;
    v35 = 0x2000000000;
    v30 = v33;
    v32 = 32;
    v8 = *((unsigned int *)this + 970);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 484);
      v27 = &v9[2 * v8];
      while (1)
      {
        v10 = *v9;
        v11 = (void *)v9[1];
        LODWORD(v35) = 0;
        v31 = 0;
        v12 = *(_QWORD *)(v10 + 8);
        if (!v12)
          goto LABEL_42;
        do
        {
          v13 = *(_QWORD *)(v12 + 24);
          v14 = *(unsigned __int8 *)(v13 + 16);
          if ((v14 - 60) < 2)
          {
            v15 = &v34;
            goto LABEL_13;
          }
          if (v14 == 77 || v14 == 62)
          {
            v15 = &v30;
LABEL_13:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v13);
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
LABEL_15:
        v16 = v31;
        while (v16)
        {
          v17 = *((_QWORD *)v30 + --v16);
          v31 = v16;
          v18 = *(unsigned __int8 *)(v17 + 16);
          if ((v18 - 60) < 2)
          {
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v34, v17);
            goto LABEL_15;
          }
          if (v18 == 62 || v18 == 77)
          {
            for (j = *(_QWORD *)(v17 + 8); j; j = *(_QWORD *)(j + 8))
            {
              v20 = *(_QWORD *)(j + 24);
              if (v20)
                v21 = *(unsigned __int8 *)(v20 + 16) >= 0x1Cu;
              else
                v21 = 0;
              if (v21)
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v30, v20);
            }
            goto LABEL_15;
          }
        }
        if ((_DWORD)v35)
        {
          v22 = (char *)v34;
          v23 = (char *)v34 + 8 * v35;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)v22 + 16) == 60)
            {
              v28[0] = v11;
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
            }
            else
            {
              v28[0] = v29;
              v28[1] = (void *)0x1000000000;
              if ((_DWORD)v38)
              {
                v24 = v37;
                v25 = 8 * v38;
                do
                {
                  if ((void *)*v24 != v11)
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v28, *v24);
                  ++v24;
                  v25 -= 8;
                }
                while (v25);
              }
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
              if (v28[0] != v29)
                free(v28[0]);
            }
            v22 += 8;
          }
          while (v22 != v23);
        }
LABEL_42:
        v9 += 2;
        if (v9 == v27)
        {
          if (v30 != v33)
            free(v30);
          break;
        }
      }
    }
    if (v34 != v36)
      free(v34);
    if (v37 != v39)
      free(v37);
  }
  return 1;
}

uint64_t AGCLLVMUserObject::setupGlobalBindings(AGCLLVMUserObject *this)
{
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v4;
  int NumOperands;
  int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t Operand;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::GlobalValue *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t String;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v21;
  const char *v23;
  size_t v24;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  AGCArgumentBuffer::Struct *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  char *v76;
  char *v77;
  char *v78;
  llvm::DataLayout *v79;
  char *v80;
  int v81;
  __int16 v82;
  unsigned int v83;
  char v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  const char *TypeAllocSize;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93[12];

  v2 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  TypeAllocSize = "air.global_bindings";
  LOWORD(v91) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&TypeAllocSize);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v6 = NumOperands;
      v7 = 0;
      v8 = (char *)this + 8;
      v9 = (char *)&v89;
      v79 = (AGCLLVMUserObject *)((char *)this + 232);
      v80 = (char *)this + 368;
      v81 = 1;
      while (1)
      {
        Operand = llvm::NamedMDNode::getOperand(v4);
        v11 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v12 = *(unsigned __int8 **)(v11 + 8);
        if (v12
          && *v12 - 1 <= 1
          && ((v13 = (llvm::GlobalValue *)*((_QWORD *)v12 + 16)) != 0 ? (v14 = *((_BYTE *)v13 + 16) == 3) : (v14 = 0),
              v14))
        {
          v15 = *(_QWORD *)(v11 + 16);
          String = llvm::MDString::getString(*(llvm::MDString **)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8));
          if (v17 <= 25)
          {
            switch(v17)
            {
              case 10:
                if (*(_QWORD *)String == 0x666675622E726961 && *(_WORD *)(String + 8) == 29285)
                {
LABEL_85:
                  *(_DWORD *)v93 = 0;
                  v87 = 0;
                  v86 = 0;
                  v85 = 0;
                  v84 = 0;
                  v83 = 0;
                  v82 = 0;
                  parseMDBuffer(v15, *(_DWORD *)(*(_QWORD *)v13 + 8) >> 8, v93, (_DWORD *)&v87 + 1, (unsigned int *)&v87, &v86, (uint64_t *)&v85, (char *)&v82, &v84, (int *)&v83, (char *)&v82 + 1);
                  if (HIBYTE(v82))
                  {
                    if (v86)
                      v39 = v87 / v86;
                    else
                      v39 = 0;
                    v42 = *(_QWORD *)(*(_QWORD *)this - 24);
                    if (*(_BYTE *)(*(_QWORD *)&v80[v42 + 32] + 1755))
                    {
                      std::string::append((std::string *)&v8[v42], "Tier 1 argument buffer global binding is not supported");
                      v41 = 0;
                    }
                    else
                    {
                      v74 = v85;
                      v77 = v9;
                      v69 = v82;
                      v70 = v83;
                      v43 = *(unsigned int *)v93;
                      v44 = (llvm::Type *)*((_QWORD *)v13 + 3);
                      v72 = **((_QWORD **)v44 + 2);
                      v71 = ((*((_QWORD *)this + 413) >> v93[0]) & 1) == 0;
                      TypeAllocSize = (const char *)llvm::DataLayout::getTypeAllocSize(v79, v44);
                      *(_QWORD *)&v89 = v45;
                      v46 = llvm::TypeSize::operator unsigned long long();
                      v47 = (*(uint64_t (**)(AGCLLVMUserObject *, llvm::GlobalValue *, llvm::Type *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 296))(this, v13, v44, v43, 0xFFFFFFFFLL, v39 * v46, v69, v70);
                      v48 = operator new();
                      v49 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                      v51 = *((_QWORD *)v49 + 49);
                      v50 = (AGCArgumentBuffer::Struct *)*((_QWORD *)v49 + 50);
                      *(_BYTE *)v48 = v71;
                      *(_WORD *)(v48 + 1) = 0;
                      *(_QWORD *)(v48 + 8) = v13;
                      *(_QWORD *)(v48 + 16) = v72;
                      AGCArgumentBuffer::AGCArgumentBuffer(v48 + 24, v50, v51, (uint64_t)v79, v74, v72, v43);
                      *(_QWORD *)(v48 + 112) = v47;
                      *(_QWORD *)(v48 + 120) = v47;
                      *(_BYTE *)(v48 + 3) = 1;
                      TypeAllocSize = (const char *)v48;
                      v52 = (uint64_t *)llvm::SmallVectorTemplateCommon<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>>((uint64_t)this + 3184, (unint64_t)&TypeAllocSize);
                      v53 = *((_QWORD *)this + 398);
                      v54 = *((unsigned int *)this + 798);
                      v55 = *v52;
                      *v52 = 0;
                      *(_QWORD *)(v53 + 8 * v54) = v55;
                      *((_DWORD *)this + 798) = v54 + 1;
                      v56 = TypeAllocSize;
                      TypeAllocSize = 0;
                      if (v56)
                      {
                        std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table((uint64_t)(v56 + 72));
                        MEMORY[0x1CAA2D68C](v56, 0x10A0C409CD0B977);
                      }
                      v9 = v77;
                      if (!*(_BYTE *)(*(_QWORD *)&v80[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 1755))
                        AGCLLVMUserObject::setupIndirectArgumentRogMetadata(this, v48);
                      v57 = *(_QWORD *)(v48 + 56);
                      *((_DWORD *)this + 833) += *(_DWORD *)(v57 + 76);
                      *(int32x2_t *)((char *)this + 3324) = vadd_s32(*(int32x2_t *)((char *)this + 3324), vrev64_s32(*(int32x2_t *)(v57 + 68)));
                      v41 = 1;
                    }
                  }
                  else
                  {
                    if (v84)
                      v40 = v83;
                    else
                      v40 = 0xFFFFFFFFLL;
                    if ((*(uint64_t (**)(AGCLLVMUserObject *, llvm::GlobalValue *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 296))(this, v13, **(_QWORD **)(*(_QWORD *)v13 + 16), *(unsigned int *)v93, 0xFFFFFFFFLL, v87, v82, v40))
                    {
                      llvm::Value::replaceAllUsesWith();
                      v41 = 1;
                    }
                    else
                    {
                      v41 = 0;
                    }
                  }
                  v81 &= v41;
                }
                break;
              case 11:
                if (*(_QWORD *)String == 0x747865742E726961 && *(_QWORD *)(String + 3) == 0x657275747865742ELL)
                {
                  if (*((_QWORD *)v13 + 1))
                  {
                    BYTE4(v87) = 0;
                    LOBYTE(v87) = 0;
                    LODWORD(v85) = 0;
                    *(_DWORD *)v93 = 0;
                    LODWORD(TypeAllocSize) = 0;
                    LOWORD(v89) = 0;
                    *(_QWORD *)((char *)&v89 + 4) = 0xFFFFFFFFLL;
                    v90 = 0;
                    v91 = 0;
                    v92 = 0;
                    v31 = parseMDTexture(v15, &v85, v93, v9, (BOOL *)&v87 + 4, (BOOL *)&v89 + 1, &v87, (int *)&v89 + 1);
                    if (v31)
                    {
                      v58 = *(_QWORD *)v13;
                      v75 = BYTE4(v87);
                      if (BYTE4(v87))
                      {
                        v59 = **(_QWORD **)(v58 + 16);
                        if (*(_BYTE *)(v59 + 8) == 16)
                          v59 = **(_QWORD **)(v59 + 16);
                        v58 = **(_QWORD **)(v59 + 16);
                      }
                      v60 = *(_DWORD *)(v58 + 8);
                      if ((v60 & 0x1FF) == 0x110)
                      {
                        v58 = **(_QWORD **)(v58 + 16);
                        LOBYTE(v60) = *(_BYTE *)(v58 + 8);
                      }
                      v78 = v9;
                      if (v60 == 15)
                      {
                        v61 = **(_QWORD **)(v58 + 16);
                        if ((*(_DWORD *)(v61 + 8) & 0x1FF) == 0x110)
                          v58 = **(_QWORD **)(v61 + 16);
                      }
                      v91 = **(_QWORD **)(v58 + 16);
                      v62 = (*(uint64_t (**)(AGCLLVMUserObject *, _QWORD))(*(_QWORD *)this + 280))(this, v85);
                      LODWORD(v85) = v62;
                      v63 = *(_DWORD *)v93;
                      *((_DWORD *)this + 829) += *(_DWORD *)v93;
                      *((_BYTE *)this + 3560) |= v87;
                      LODWORD(TypeAllocSize) = v62 & 0xFFFFF;
                      HIDWORD(TypeAllocSize) = v63;
                      v92 = 1;
                      std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>((uint64_t *)this + 119, v62 & 0xFFFFF, &TypeAllocSize);
                      if ((v89 & 2) != 0)
                      {
                        if (v75)
                        {
                          v65 = v63 + v62;
                          if (v63 + v62 >= 0x40)
                            v65 = 64;
                          v66 = v65 - v62;
                          if (v62 >= 0x40)
                            v66 = 0;
                          *((_QWORD *)this + 465) |= ~(-1 << v66) << v62;
                          if (v62 <= 0x40)
                            v67 = 64;
                          else
                            v67 = v62;
                          *((_QWORD *)this + 466) |= ~(-1 << (v63 - v66)) << v67;
                          v64 = 1;
                        }
                        else
                        {
                          v64 = 0;
                          if (v62 > 0x3F)
                            *((_QWORD *)this + 466) |= 1 << v62;
                          else
                            *((_QWORD *)this + 465) |= 1 << v62;
                        }
                      }
                      else
                      {
                        v64 = v75 != 0;
                      }
                      AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(this, v13, v62, v63, v64, (unsigned __int8 **)this + 362, (unsigned __int8 **)this + 386);
                      v9 = v78;
                    }
                    goto LABEL_130;
                  }
                }
                else
                {
                  if (*(_QWORD *)String != 0x706D61732E726961 || *(_QWORD *)(String + 3) != 0x72656C706D61732ELL)
                    break;
                  if (*((_QWORD *)v13 + 1))
                  {
                    LODWORD(v85) = 0;
                    *(_DWORD *)v93 = 0;
                    BYTE4(v87) = 0;
                    v31 = parseMDSampler(v15, &v85, v93, (BOOL *)&v87 + 4);
                    if (v31)
                    {
                      v32 = *(_QWORD *)v13;
                      v73 = BYTE4(v87);
                      if (BYTE4(v87))
                      {
                        v33 = **(_QWORD **)(v32 + 16);
                        if (*(_BYTE *)(v33 + 8) == 16)
                          v33 = **(_QWORD **)(v33 + 16);
                        v32 = **(_QWORD **)(v33 + 16);
                      }
                      v34 = *(_DWORD *)(v32 + 8);
                      if ((v34 & 0x1FF) == 0x110)
                      {
                        v32 = **(_QWORD **)(v32 + 16);
                        LOBYTE(v34) = *(_BYTE *)(v32 + 8);
                      }
                      if (v34 == 15)
                      {
                        v35 = **(_QWORD **)(v32 + 16);
                        if ((*(_DWORD *)(v35 + 8) & 0x1FF) == 0x110)
                          v32 = **(_QWORD **)(v35 + 16);
                      }
                      v9[16] = 0;
                      *(_QWORD *)v9 = 0;
                      *((_QWORD *)v9 + 1) = 0;
                      *((_QWORD *)&v89 + 1) = **(_QWORD **)(v32 + 16);
                      v36 = v85;
                      v76 = v9;
                      v37 = *(_DWORD *)v93;
                      LODWORD(TypeAllocSize) = v85 & 0xFFFFF;
                      HIDWORD(TypeAllocSize) = *(_DWORD *)v93;
                      LOBYTE(v90) = 1;
                      std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>((uint64_t *)this + 122, v85 & 0xFFFFF, &TypeAllocSize);
                      v38 = v37;
                      v9 = v76;
                      AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(this, v13, v36, v38, v73 != 0, (unsigned __int8 **)this + 368, (unsigned __int8 **)this + 392);
                    }
                    goto LABEL_130;
                  }
                }
                v31 = 1;
LABEL_130:
                v81 &= v31;
                break;
              case 19:
                v21 = *(_QWORD *)String == 0x69646E692E726961 && *(_QWORD *)(String + 8) == 0x6675625F74636572;
                if (v21 && *(_QWORD *)(String + 11) == 0x7265666675625F74)
                  goto LABEL_85;
                break;
            }
          }
          else if (v17 > 34)
          {
            if (v17 == 35)
            {
              v23 = "air.instance_acceleration_structure";
              v24 = 35;
            }
            else
            {
              if (v17 != 36)
                goto LABEL_11;
              v23 = "air.primitive_acceleration_structure";
              v24 = 36;
            }
            if (!memcmp((const void *)String, v23, v24))
              goto LABEL_85;
          }
          else if (v17 == 26)
          {
            if (*(_QWORD *)String == 0x697369762E726961
              && *(_QWORD *)(String + 8) == 0x636E75665F656C62
              && *(_QWORD *)(String + 16) == 0x6261745F6E6F6974
              && *(_WORD *)(String + 24) == 25964)
            {
              goto LABEL_85;
            }
          }
          else if (v17 == 31)
          {
            v18 = *(_QWORD *)String == 0x65746E692E726961 && *(_QWORD *)(String + 8) == 0x6E6F697463657372;
            v19 = v18 && *(_QWORD *)(String + 16) == 0x6F6974636E75665FLL;
            if (v19 && *(_QWORD *)(String + 23) == 0x656C6261745F6E6FLL)
              goto LABEL_85;
          }
        }
        else
        {
          std::string::append((std::string *)&v8[*(_QWORD *)(*(_QWORD *)this - 24)], "global binding variable is empty\n");
        }
LABEL_11:
        if (v6 == ++v7)
          return v81 & 1;
      }
    }
  }
  LOBYTE(v81) = 1;
  return v81 & 1;
}

uint64_t AGCLLVMUserObject::setupStackOOBCheck(AGCLLVMUserObject *this)
{
  const char *v1;
  const char *Value;

  if (!MGGetBoolAnswer()
    || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_DISABLE_STACK_OOB_CHECK", v1)) == 0
    || *Value == 48
    || !atoi(Value))
  {
    llvm::Module::getOrInsertNamedMetadata();
  }
  return 1;
}

uint64_t AGCLLVMUserObject::setupImageBlocks(AGCLLVMUserObject *this)
{
  return 1;
}

void AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(AGCLLVMUserObject *this)
{
  const char *v2;
  const char *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::GlobalValue *v7;
  llvm::GlobalValue *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::GlobalValue *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *j;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD v49[9];

  v49[8] = *MEMORY[0x1E0C80C00];
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_LATE_INLINING", v2);
    if (Value)
    {
      if (*Value != 48)
      {
        if (atoi(Value))
        {
          *((_DWORD *)this + 10) = 0;
          v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
          v5 = v4 + 24;
          v6 = *(_QWORD *)(v4 + 32);
          if (v6 != v4 + 24)
          {
            do
            {
              v7 = (llvm::GlobalValue *)(v6 - 56);
              v21 = v6 == 0;
              v6 = *(_QWORD *)(v6 + 8);
              if (v21)
                v8 = 0;
              else
                v8 = v7;
              if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
              {
                ++*((_DWORD *)this + 10);
                if (v8 != *((llvm::GlobalValue **)this + 21))
                {
                  llvm::Function::addFnAttr();
                  *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 8) & 0xFFFFBFC0 | 0x4007;
                }
              }
            }
            while (v6 != v5);
            if (*((_DWORD *)this + 10) > 1u)
              llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464)+ 328), *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
          }
        }
      }
    }
  }
  if (MGGetBoolAnswer())
  {
    v10 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_OPTSIZE", v9);
    if (v10)
    {
      if (*v10 != 48)
      {
        if (atoi(v10))
        {
          v11 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
          v12 = v11 + 24;
          v13 = *(_QWORD *)(v11 + 32);
          if (v13 != v12)
          {
            do
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v13)
                v15 = (llvm::GlobalValue *)(v13 - 56);
              else
                v15 = 0;
              if ((llvm::GlobalValue::isDeclaration(v15) & 1) == 0)
              {
                llvm::Function::removeFnAttr();
                llvm::Function::addFnAttr();
              }
              v13 = v14;
            }
            while (v14 != v12);
          }
        }
      }
    }
  }
  if (!MGGetBoolAnswer()
    || (v17 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_ENABLE_INTERSECTION_CALL", v16)) == 0
    || *v17 == 48
    || !atoi(v17))
  {
    v22 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v23 = v22 + 24;
    v24 = *(_QWORD *)(v22 + 32);
LABEL_41:
    while (v24 != v23)
    {
      v25 = v24 - 56;
      v21 = v24 == 0;
      v24 = *(_QWORD *)(v24 + 8);
      if (v21)
        v26 = 0;
      else
        v26 = v25;
      v27 = *(_WORD *)(v26 + 18);
      if ((v27 & 0x3FF0) == 0xFF0)
        *(_WORD *)(v26 + 18) = v27 & 0xC00F;
      v28 = v26 + 72;
      for (i = *(_QWORD *)(v26 + 80); i != v28; i = *(_QWORD *)(i + 8))
      {
        v30 = i - 24;
        if (!i)
          v30 = 0;
        v31 = v30 + 40;
        v32 = *(_QWORD *)(v30 + 48);
        if (v32 != v31)
        {
          while (i != v28)
          {
            if (v32)
            {
              if (*(_BYTE *)(v32 - 8) == 84)
              {
                v33 = *(_WORD *)(v32 - 6);
                if ((v33 & 0xFFC) == 0x3FC)
                  *(_WORD *)(v32 - 6) = v33 & 0xF003;
              }
            }
            v32 = *(_QWORD *)(v32 + 8);
            v34 = i - 24;
            if (!i)
              v34 = 0;
            v35 = v34 + 40;
            while (v32 == v35)
            {
              i = *(_QWORD *)(i + 8);
              if (i == v28)
                goto LABEL_41;
              v36 = i - 24;
              if (!i)
                v36 = 0;
              v35 = v36 + 40;
              v32 = *(_QWORD *)(v36 + 48);
            }
          }
          goto LABEL_41;
        }
      }
    }
  }
  if (!*((_BYTE *)this + 3713) && !*((_BYTE *)this + 15))
  {
    v48 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)this - 24);
    v19 = *(unsigned int *)((char *)this + v18 + 3296);
    if ((_DWORD)v19)
    {
      for (j = *(uint64_t **)((char *)this + v18 + 3288); ; ++j)
      {
        v21 = !*j || *j == -8;
        if (!v21)
          break;
      }
    }
    else
    {
      j = *(uint64_t **)((char *)this + v18 + 3288);
    }
    v37 = *(_QWORD *)((char *)this + v18 + 3288) + 8 * v19;
    if (j != (uint64_t *)v37)
    {
      v38 = 0;
      v39 = *j;
      do
      {
        v40 = *(unsigned __int8 **)(*(_QWORD *)(v39 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v39 + 8) + 8));
        if (v40 && *v40 - 1 <= 1)
        {
          v41 = *((_QWORD *)v40 + 16);
          if (*(_BYTE *)(v41 + 16))
            v42 = 0;
          else
            v42 = v41;
        }
        else
        {
          v42 = 0;
        }
        *(_DWORD *)(v42 + 32) = *(_DWORD *)(v42 + 32) & 0xFFFFBFC0 | 0x4007;
        if (v38 >= 8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = v48;
        }
        v49[v38] = v42;
        v38 = ++v48;
        do
        {
          v43 = j[1];
          ++j;
          v39 = v43;
          if (v43)
            v44 = v39 == -8;
          else
            v44 = 1;
        }
        while (v44);
      }
      while (j != (uint64_t *)v37);
    }
    llvm::appendToCompilerUsed();
  }
  v45 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v46 = v45 + 24;
  v47 = *(_QWORD *)(v45 + 32);
  if (v47 != v45 + 24)
  {
    do
    {
      if (llvm::Function::hasFnAttribute())
      {
        llvm::Function::removeFnAttr();
        llvm::Function::addFnAttr();
      }
      v47 = *(_QWORD *)(v47 + 8);
    }
    while (v47 != v46);
  }
}

llvm::NamedMDNode *AGCLLVMUserObject::overrideExternallyInitializedLinkage(AGCLLVMUserObject *this)
{
  llvm::Module *v1;
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v3;
  unsigned int i;
  uint64_t Operand;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  const char *v9;
  __int16 v10;

  v1 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v9 = "air.external_initializations";
  v10 = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v1, (const llvm::Twine *)&v9);
  if (result)
  {
    v3 = result;
    for (i = 0; ; ++i)
    {
      result = (llvm::NamedMDNode *)llvm::NamedMDNode::getNumOperands(v3);
      if (i >= result)
        break;
      Operand = llvm::NamedMDNode::getOperand(v3);
      v6 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v6 && *v6 - 1 <= 1)
      {
        v7 = *((_QWORD *)v6 + 16);
        if (v7)
          v8 = *(_BYTE *)(v7 + 16) == 3;
        else
          v8 = 0;
        if (v8 && (*(_DWORD *)(v7 + 32) & 0xF) == 7)
        {
          llvm::GlobalValue::setLinkage(v7, 0);
          llvm::GlobalValue::setVisibility(v7);
        }
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::generateAuxiliaryShaders(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::replaceTextureStatePtr(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Instruction *v15;
  llvm::Instruction *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v21;
  llvm::Value *v22;
  llvm::Value *Shl;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Type *v26;
  uint64_t AlignedLoad;
  llvm::Type **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  char *v35;
  llvm::Type *v36;
  uint64_t GEP;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];
  __int16 v44;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 24) + this + 368);
  v2 = v1 + 24;
  v3 = *(_QWORD *)(v1 + 32);
  v40 = v2;
  if (v3 != v2)
  {
    v4 = (_QWORD *)this;
    v5 = this + 200;
    v6 = this + 368;
    v7 = this + 8;
    do
    {
      v41 = *(_QWORD *)(v3 + 8);
      if (v3)
        v8 = (llvm::Value *)(v3 - 56);
      else
        v8 = 0;
      this = llvm::Value::getName(v8);
      if (v9 >= 0x1A)
      {
        v10 = *(_QWORD *)this == 0x646E69622E786761 && *(_QWORD *)(this + 8) == 0x7865742E7373656CLL;
        v11 = v10 && *(_QWORD *)(this + 16) == 0x702E65746174732ELL;
        if (v11 && *(_WORD *)(this + 24) == 29300)
        {
          this = llvm::Module::getGlobalVariable();
          v13 = *((_QWORD *)v8 + 1);
          if (v13)
          {
            v14 = (llvm::Type **)this;
            do
            {
              v42 = *(_QWORD *)(v13 + 8);
              v15 = *(llvm::Instruction **)(v13 + 24);
              if (*((_BYTE *)v15 + 16) == 84)
                v16 = v15;
              else
                v16 = 0;
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40), v16);
              v17 = *(_QWORD *)(*v4 - 24);
              v18 = *((_QWORD *)v16 - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
              v19 = *(_QWORD *)(v17 + v5 + 32);
              v44 = 257;
              Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v17 + 40, 47, v18, v19, (uint64_t)v43);
              v21 = (llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40);
              v44 = 257;
              v22 = (llvm::Value *)llvm::ConstantInt::get();
              Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v21, Cast, v22, (const llvm::Twine *)v43);
              v24 = *(_QWORD *)(*v4 - 24) + v7;
              v44 = 257;
              v26 = AGCLLVMBuilder::tryDeducePointeeType(v14, v25);
              AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v24 + 32), v26, (uint64_t)v14, 0, (uint64_t)v43);
              v28 = v14;
              v29 = v7;
              v30 = v6;
              v31 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
              v32 = llvm::PointerType::get();
              v44 = 257;
              v33 = v31;
              v6 = v30;
              v7 = v29;
              v14 = v28;
              v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v33, 49, AlignedLoad, v32, (uint64_t)v43);
              v35 = (char *)v4 + *(_QWORD *)(*v4 - 24);
              v36 = (llvm::Type *)*((_QWORD *)v35 + 27);
              v44 = 257;
              GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v35 + 40), v36, v34, Shl, (const llvm::Twine *)v43);
              v38 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
              v39 = *(_QWORD *)v16;
              v44 = 257;
              llvm::IRBuilderBase::CreateCast(v38, 49, GEP, v39, (uint64_t)v43);
              llvm::Value::replaceAllUsesWith();
              this = llvm::Instruction::eraseFromParent(v16);
              v13 = v42;
            }
            while (v42);
          }
        }
      }
      v3 = v41;
    }
    while (v41 != v40);
  }
  return this;
}

uint64_t AGCLLVMUserObject::promoteGlobalConstants(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::bindDylibResources(AGCLLVMUserObject **this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  llvm::Type *v8;
  AGCLLVMUserObject *GlobalBufferBinding;
  llvm::Value *v10;
  uint64_t Impl;
  llvm::Value *v12;
  AGCLLVMObject *v13;
  AGCLLVMUserObject *v14;
  uint64_t v15;
  AGCLLVMObject *v16;
  AGCLLVMUserObject *v17;
  llvm::Value *v18;
  uint64_t v19;
  AGCLLVMObject *v20;
  AGCLLVMUserObject *v21;
  llvm::Value *v22;
  uint64_t v23;
  AGCLLVMObject *v24;
  AGCLLVMUserObject *v25;
  llvm::Value *v26;
  uint64_t v27;
  AGCLLVMObject *v28;
  AGCLLVMUserObject *v29;
  llvm::Value *v30;
  uint64_t v31;
  llvm::Value *v32;
  AGCLLVMObject *v33;
  AGCLLVMUserObject *v34;
  uint64_t v35;
  llvm::GlobalVariable *v36;
  AGCLLVMObject *v37;
  uint64_t v38;
  llvm::GlobalVariable *v39;
  AGCLLVMObject *v40;
  uint64_t v41;
  llvm::GlobalVariable *v42;
  AGCLLVMObject *v43;
  uint64_t v44;
  AGCLLVMObject *v45;
  AGCLLVMUserObject *v46;
  uint64_t v47;
  AGCLLVMObject *v48;
  AGCLLVMUserObject *v49;
  llvm::Value *v50;
  uint64_t v51;
  llvm::Value *v52;
  llvm::GlobalVariable *v53;
  AGCLLVMObject *v54;
  uint64_t v55;
  int v56;
  llvm::Value *v57;
  uint64_t v58;
  AGCLLVMObject *v59;
  AGCLLVMUserObject *v60;
  llvm::Value *v61;
  llvm::GlobalVariable *v62;
  AGCLLVMObject *v63;
  uint64_t v64;
  void *v65[2];
  _QWORD v66[2];
  __int16 v67;
  uint64_t __src;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObject::needsDylibResources((AGCLLVMUserObject *)this);
  if ((_DWORD)result)
  {
    AGCLLVMUserObject::createDylibBaseGetterFunc((AGCLLVMUserObject *)this);
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 0);
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 1);
    AGCLLVMUserObject::buildImageTextureBufferLength((AGCLLVMUserObject *)this, 0);
    if (!this[309])
      AGCLLVMUserObject::createSamplerHeapGlobal((AGCLLVMUserObject *)this);
    AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal((AGCLLVMUserObject *)this);
    if ((*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) != 29)
      AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal((AGCLLVMUserObject *)this);
    if ((*(_BYTE **)((char *)this + *((_QWORD *)*this - 3) + 400))[1785] && !*((_BYTE *)this + 3712))
    {
      AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
    }
    AGCLLVMUserObject::createAccelerationStructureHeapGlobal((AGCLLVMUserObject *)this);
    AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal((AGCLLVMUserObject *)this);
    v3 = *((_QWORD *)*this - 3);
    if ((*(_BYTE **)((char *)this + v3 + 400))[1785] && !*((_BYTE *)this + 3712))
    {
      AGCLLVMUserObject::createSCSIFTHeapGlobal(this);
      AGCLLVMUserObject::createGlobalRayStridesGlobal((AGCLLVMUserObject *)this);
      v3 = *((_QWORD *)*this - 3);
    }
    if ((*(unsigned int (***)(char *))((char *)this + v3))[8]((char *)this + v3) != 8)
    {
      (*(void (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3));
      v4 = (*(uint64_t (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3));
      v5 = (v4 - 6) < 4 || v4 == 22;
      if (v5 && !this[358])
      {
        v6 = (*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) == 7
          || (*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) == 22
           ? 72
           : 37;
        v7 = (*(uint64_t (**)(void))(*(*(_QWORD ***)((char *)this + *((_QWORD *)*this - 3) + 400))[103] + 8 * v6))();
        v8 = (llvm::Type *)llvm::PointerType::get();
        v65[0] = "agc.stage_specific_dylib_global.";
        v66[0] = 0;
        v67 = 2307;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v8, (const llvm::Twine *)v65, v7, 0, 5, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v10);
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 356), (uint64_t)GlobalBufferBinding);
        __src = llvm::ValueAsMetadata::get();
        v65[0] = v66;
        v65[1] = (void *)0x100000000;
        llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v65, &__src, &v69);
        Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(this + 359), Impl);
        if (v65[0] != v66)
          free(v65[0]);
      }
    }
    if ((*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) != 29)
      AGCLLVMUserObject::createGlobalBindingTableGlobal((AGCLLVMUserObject *)this);
    v13 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v14 = this[297];
    AGCLLVMUserObject::setDylibLinkage(v14, v12);
    v15 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    AGCLLVMObject::addDylibBinding(v13, v14);
    v16 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v17 = this[300];
    AGCLLVMUserObject::setDylibLinkage(v17, v18);
    v19 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    AGCLLVMObject::addDylibBinding(v16, v17);
    v20 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v21 = this[303];
    AGCLLVMUserObject::setDylibLinkage(v21, v22);
    v23 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    AGCLLVMObject::addDylibBinding(v20, v21);
    v24 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v25 = this[309];
    AGCLLVMUserObject::setDylibLinkage(v25, v26);
    v27 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
    AGCLLVMObject::addDylibBinding(v24, v25);
    v28 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v29 = this[327];
    AGCLLVMUserObject::setDylibLinkage(v29, v30);
    v31 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 56))(v31);
    AGCLLVMObject::addDylibBinding(v28, v29);
    if ((*(unsigned int (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3)) != 29)
    {
      v33 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      v34 = this[331];
      AGCLLVMUserObject::setDylibLinkage(v34, v32);
      v35 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 64))(v35);
      AGCLLVMObject::addDylibBinding(v33, v34);
    }
    v36 = this[318];
    if (v36)
    {
      v37 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[318], v32);
      v38 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 96))(v38);
      AGCLLVMObject::addDylibBinding(v37, v36);
    }
    v39 = this[321];
    if (v39)
    {
      v40 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[321], v32);
      v41 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 104))(v41);
      AGCLLVMObject::addDylibBinding(v40, v39);
    }
    v42 = this[324];
    if (v42)
    {
      v43 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[324], v32);
      v44 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 120))(v44);
      AGCLLVMObject::addDylibBinding(v43, v42);
    }
    v45 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v46 = this[339];
    AGCLLVMUserObject::setDylibLinkage(v46, v32);
    v47 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 88))(v47);
    AGCLLVMObject::addDylibBinding(v45, v46);
    v48 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
    v49 = this[335];
    AGCLLVMUserObject::setDylibLinkage(v49, v50);
    v51 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 72))(v51);
    AGCLLVMObject::addDylibBinding(v48, v49);
    v53 = this[342];
    if (v53)
    {
      v54 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[342], v52);
      v55 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 112))(v55);
      AGCLLVMObject::addDylibBinding(v54, v53);
    }
    v56 = (*(uint64_t (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[8]((char *)this + *((_QWORD *)*this - 3));
    if (((v56 - 6) < 4 || v56 == 22) && this[358])
    {
      v58 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 128))(v58);
      v59 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      v60 = this[358];
      AGCLLVMUserObject::setDylibLinkage(v60, v61);
      AGCLLVMObject::addDylibBinding(v59, v60);
    }
    v62 = this[345];
    if (v62)
    {
      v63 = (AGCLLVMObject *)((char *)this + *((_QWORD *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[345], v57);
      v64 = (*(_QWORD **)((char *)this + *((_QWORD *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 80))(v64);
      AGCLLVMObject::addDylibBinding(v63, v62);
    }
    result = (*(uint64_t (***)(char *))((char *)this + *((_QWORD *)*this - 3)))[13]((char *)this + *((_QWORD *)*this - 3));
    if ((_DWORD)result)
    {
      AGCLLVMBuilder::getOrInsertFunction<>();
      v65[0] = "void_return";
      v67 = 259;
      operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::User::operator new((llvm::User *)0x40);
      return llvm::ReturnInst::ReturnInst();
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::wrapperPrefixData(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserFragmentShader::debugTraceBufferEnabled(AGCLLVMUserFragmentShader *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 726) + 64) >> 7;
}

void AGCLLVMAGPFragmentShaderGen4::simplifyGenericIR(AGCLLVMAGPFragmentShaderGen4 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Value **v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  llvm::Value *v54;
  unsigned int *v55;
  void *Name;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **p_p;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  _DWORD *v74;
  _DWORD *v75;
  BOOL v76;
  _QWORD *v77;
  void *v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **p_dst;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t *v89;
  llvm::Instruction *v90;
  _QWORD *v91;
  int NumSuccessors;
  int v93;
  int v94;
  const void *Successor;
  const void **v96;
  uint64_t v97;
  unsigned int *v98;
  const void **v99;
  _BOOL4 v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t j;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  llvm::Instruction *v117;
  char *v118;
  uint64_t v119;
  llvm::Value *v120;
  uint64_t k;
  llvm::Value **v122;
  unsigned int *v123;
  llvm::SmallPtrSetImplBase *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  llvm::Value **v128;
  char *v129;
  llvm::Value *v130;
  _QWORD *m;
  llvm::Value *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  llvm::Value **v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  llvm::Value **v144;
  llvm::Value **v145;
  llvm::Value *v146;
  _QWORD *v147;
  _QWORD *v148;
  llvm::SmallPtrSetImplBase *v149;
  _QWORD *v150;
  unsigned int v151;
  llvm::SmallPtrSetImplBase *v152;
  int v153;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  char *v160;
  uint64_t v161;
  llvm::Value *v162;
  const void **v163;
  const void **v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  char *v168;
  unsigned int v169;
  uint64_t v170;
  llvm::Instruction *v171;
  llvm::Value **v172;
  const void **v174;
  const void **v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  llvm::Value **v189;
  llvm::Value **v190;
  llvm::Value *v191;
  llvm::BasicBlock *v192;
  unsigned int v193;
  char *v194;
  llvm::BasicBlock *v195;
  char *v196;
  int v197;
  unsigned int v198;
  _QWORD *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::string *v208;
  uint64_t v209;
  llvm *v210;
  llvm *v211;
  llvm::Value **v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  llvm::Value **v217;
  llvm::Value **v218;
  llvm::Value *NearestCommonDominator;
  llvm::Value *v220;
  _QWORD *v221;
  llvm::Value **v222;
  uint64_t v223;
  uint64_t v224;
  llvm::Value *v225;
  _QWORD *v226;
  llvm::Instruction *v227;
  _QWORD *v228;
  llvm::Instruction *v229;
  llvm::BasicBlock *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  llvm::Value *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  llvm::Instruction *v241;
  llvm::Instruction *v242;
  uint64_t v243;
  llvm *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v250;
  char *v251;
  _QWORD *v252;
  llvm::Value **v253;
  llvm::Value *v254;
  uint64_t v255;
  char *v256;
  unsigned int *v257;
  _QWORD *v258;
  llvm::SmallPtrSetImplBase *v259;
  uint64_t v260;
  void **v261;
  llvm::Module *v262;
  llvm *v263[2];
  unsigned int v264;
  _BYTE v265[40];
  llvm *v266[2];
  unsigned int v267;
  _BYTE v268[40];
  llvm *v269[2];
  unsigned int v270;
  _BYTE v271[40];
  llvm *v272;
  unsigned int v273;
  _BYTE v274[40];
  llvm::Value **v275;
  llvm::Value **v276;
  uint64_t v277;
  int v278;
  _BYTE v279[32];
  std::string v280;
  void *v281[2];
  uint64_t v282;
  void *__p;
  void *v284;
  _QWORD v285[2];
  __int16 v286;
  llvm *v287[2];
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  int v292;
  void *v293;
  uint64_t v294;
  _BYTE v295[192];
  void *v296;
  void *v297;
  void *v298;
  uint64_t v299;
  _BYTE v300[192];
  llvm *v301;
  void *v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  void *v309[26];
  void *__dst;
  void *v311;
  uint64_t v312;
  int v313;
  _BYTE v314[64];
  void *v315;
  uint64_t v316;
  _BYTE v317[192];
  llvm *v318;
  void *v319;
  unsigned int v320;
  char v321[8];
  const void *v322;
  char v323;
  void *v324;
  uint64_t v325;
  _BYTE v326[192];
  void **v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  const void *v331;
  char v332;
  uint64_t v333;
  int v334;
  void **v335;
  void *v336;
  uint64_t v337;
  _QWORD v338[26];

  v338[24] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 55) & 0xFFFFFFF7) == 3
    && *((_BYTE *)this + 5845)
    && !*((_BYTE *)this + 5862)
    && (*(_BYTE *)(*((_QWORD *)this + 726) + 64) & 8) != 0)
  {
    v256 = (char *)this + 5845;
    v275 = (llvm::Value **)v279;
    v276 = (llvm::Value **)v279;
    v277 = 4;
    v278 = 0;
    v273 = 128;
    v272 = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v272);
    v274[0] = 0;
    v274[24] = 0;
    for (i = *(_QWORD *)(*((_QWORD *)this + 731) + 8); i; i = *(_QWORD *)(i + 8))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(i + 24) + 40);
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__p, (llvm::SmallPtrSetImplBase *)&v275, *(void **)(v11 + 56));
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v11 + 8);
        while (1)
        {
          v14 = *(_QWORD *)(v13 + 24);
          v15 = *(unsigned __int8 *)(v14 + 16);
          v13 = *(_QWORD *)(v13 + 8);
          v16 = v14 && v15 >= 0x1C;
          if (v16 && v15 - 29 <= 0xA)
            break;
          if (!v13)
            goto LABEL_77;
        }
        if (v13)
        {
          v18 = 1;
          do
          {
            v19 = *(_QWORD *)(v13 + 24);
            v20 = *(unsigned __int8 *)(v19 + 16);
            if (v19)
              v21 = v20 >= 0x1C;
            else
              v21 = 0;
            if (v21 && v20 - 29 < 0xB)
              ++v18;
            v13 = *(_QWORD *)(v13 + 8);
          }
          while (v13);
          if (v18 >= 2)
          {
            v23 = *(_QWORD *)(v12 + 24);
            if (!v23
              || ((v24 = *(unsigned __int8 *)(v23 + 16), v24 >= 0x1C) ? (v25 = v24 - 29 >= 0xB) : (v25 = 1), v25))
            {
              do
              {
                v12 = *(_QWORD *)(v12 + 8);
                v26 = *(_QWORD *)(v12 + 24);
                v27 = *(unsigned __int8 *)(v26 + 16);
                if (v26)
                  v28 = v27 >= 0x1C;
                else
                  v28 = 0;
              }
              while (!v28 || v27 - 29 > 0xA);
            }
            v30 = *(_QWORD *)(v12 + 8);
            if (v30)
            {
              while (1)
              {
                v31 = *(_QWORD *)(v30 + 24);
                v32 = *(unsigned __int8 *)(v31 + 16);
                v33 = v31 && v32 >= 0x1C;
                if (v33 && v32 - 29 <= 0xA)
                  break;
                v30 = *(_QWORD *)(v30 + 8);
                if (!v30)
                  goto LABEL_77;
              }
              do
              {
                v286 = 257;
                v35 = llvm::CloneBasicBlock();
                __p = v285;
                v285[0] = v35;
                v284 = (void *)0x100000001;
                llvm::remapInstructionsInBlocks();
                if (__p != v285)
                  free(__p);
                v36 = (_QWORD *)(v30 + 8);
                v37 = *(_QWORD *)(v30 + 8);
                if (v37)
                {
                  v38 = *(_QWORD *)(v30 + 8);
                  do
                  {
                    v39 = *(_QWORD *)(v38 + 24);
                    v40 = *(unsigned __int8 *)(v39 + 16);
                    if (v39)
                      v41 = v40 >= 0x1C;
                    else
                      v41 = 0;
                    if (v41 && v40 - 29 < 0xB)
                      break;
                    v38 = *(_QWORD *)(v38 + 8);
                  }
                  while (v38);
                }
                else
                {
                  v38 = 0;
                }
                if (*(_QWORD *)v30)
                {
                  **(_QWORD **)(v30 + 16) = v37;
                  v43 = *(_QWORD *)(v30 + 8);
                  if (v43)
                    *(_QWORD *)(v43 + 16) = *(_QWORD *)(v30 + 16);
                }
                *(_QWORD *)v30 = v35;
                if (v35)
                {
                  v46 = *(_QWORD *)(v35 + 8);
                  v45 = (_QWORD *)(v35 + 8);
                  v44 = v46;
                  *v36 = v46;
                  if (v46)
                    *(_QWORD *)(v44 + 16) = v36;
                  *(_QWORD *)(v30 + 16) = v45;
                  *v45 = v30;
                }
                v30 = v38;
              }
              while (v38);
            }
          }
        }
      }
LABEL_77:
      ;
    }
    v270 = 128;
    v269[0] = (llvm *)MEMORY[0x1CAA2C6C0](13312, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty((uint64_t)v269);
    v271[0] = 0;
    v271[24] = 0;
    if (v276 == v275)
      v47 = (uint64_t *)((char *)&v277 + 4);
    else
      v47 = &v277;
    v48 = *(unsigned int *)v47;
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      v50 = v276;
      while ((unint64_t)*v50 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v50;
        v49 -= 8;
        if (!v49)
          goto LABEL_223;
      }
    }
    else
    {
      v50 = v276;
    }
    v51 = (char *)&v276[v48];
    if (v50 == (llvm::Value **)v51)
      goto LABEL_223;
    v52 = (char *)this + 8;
    v53 = (uint64_t *)&v315;
    v54 = *v50;
    v251 = (char *)&v276[v48];
LABEL_89:
    v55 = (unsigned int *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v269, v54);
    Name = (void *)llvm::Value::getName(v54);
    if (Name)
    {
      std::string::basic_string[abi:nn180100](&__p, Name, v57);
      p_p = &__p;
      if (v285[0] < 0)
        LOBYTE(p_p) = (_BYTE)__p;
    }
    else
    {
      v284 = 0;
      __p = 0;
      p_p = &__p;
      v285[0] = 0;
    }
    printMessage((char **)&AGCPrinter, "Basic blocks of %s in post-order:\n", v58, v59, v60, v61, v62, v63, (char)p_p);
    if (SHIBYTE(v285[0]) < 0)
      operator delete(__p);
    v65 = *((_QWORD *)v54 + 10);
    if (v65)
      v66 = (_QWORD *)(v65 - 24);
    else
      v66 = 0;
    __dst = v314;
    v311 = v314;
    v312 = 8;
    v313 = 0;
    v315 = v317;
    v316 = 0x800000000;
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v327, (llvm::SmallPtrSetImplBase *)&__dst, v66);
    v67 = (_QWORD *)v66[5];
    if (v67 == v66 + 5)
    {
      v70 = 0;
    }
    else
    {
      v68 = v67 - 3;
      if (v67)
        v69 = v67 - 3;
      else
        v69 = 0;
      if (*((unsigned __int8 *)v69 + 16) - 29 >= 0xB)
        v70 = 0;
      else
        v70 = v68;
    }
    v327 = (void **)v66;
    v328 = v70;
    v329 = 0;
    v71 = llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>((uint64_t)v53, (unint64_t)&v327);
    v72 = (char *)v315 + 24 * v316;
    v73 = *(_OWORD *)v71;
    *((_QWORD *)v72 + 2) = *(_QWORD *)(v71 + 16);
    *(_OWORD *)v72 = v73;
    LODWORD(v316) = v316 + 1;
    llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild((uint64_t)&__dst);
    memset(&v309[1], 0, 200);
    v307 = 0u;
    v308 = 0;
    v305 = 0u;
    v306 = 0u;
    v304 = 0u;
    v301 = (llvm *)((char *)&v304 + 8);
    v302 = (char *)&v304 + 8;
    v303 = 8;
    v309[0] = &v309[2];
    HIDWORD(v309[1]) = 8;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v336 = v338;
    v337 = 0x800000000;
    if ((_DWORD)v316)
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v336, v53);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v324 = v326;
    v325 = 0x800000000;
    if (LODWORD(v309[1]))
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v324, (uint64_t *)v309);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v293 = v295;
    v294 = 0x800000000;
    if ((_DWORD)v337)
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v293, (uint64_t *)&v336);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v298 = v300;
    v299 = 0x800000000;
    if ((_DWORD)v325)
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v298, (uint64_t *)&v324);
    if (v324 != v326)
      free(v324);
    if (v319 != v318)
      free(v319);
    if (v336 != v338)
      free(v336);
    if (v328 != v327)
      free(v328);
    if (v309[0] != &v309[2])
      free(v309[0]);
    if (v302 != v301)
      free(v302);
    if (v315 != v317)
      free(v315);
    if (v311 != __dst)
      free(v311);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v327, &v331, (const llvm::SmallPtrSetImplBase *)&__p);
    v336 = v338;
    v337 = 0x800000000;
    if ((_DWORD)v294)
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t *)&v336, (uint64_t *)&v293);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v318, &v322, (const llvm::SmallPtrSetImplBase *)&v296);
    v324 = v326;
    v325 = 0x800000000;
    if ((_DWORD)v299)
      llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t *)&v324, (uint64_t *)&v298);
    while (1)
    {
      if ((_DWORD)v337 != (_DWORD)v325)
        goto LABEL_145;
      if (!(_DWORD)v337)
        break;
      v74 = v324;
      v75 = v336;
      while (1)
      {
        v76 = *(_QWORD *)v75 == *(_QWORD *)v74 && v75[4] == v74[4];
        if (!v76)
          break;
        v75 += 6;
        v74 += 6;
        if (v75 == (_DWORD *)((char *)v336 + 24 * v337))
          goto LABEL_184;
      }
LABEL_145:
      v77 = (_QWORD *)*((_QWORD *)v336 + 3 * v337 - 3);
      v78 = (void *)llvm::Value::getName((llvm::Value *)v77);
      if (v78)
      {
        std::string::basic_string[abi:nn180100](&__dst, v78, v79);
        p_dst = &__dst;
        if (v312 < 0)
          LOBYTE(p_dst) = (_BYTE)__dst;
      }
      else
      {
        v311 = 0;
        __dst = 0;
        p_dst = &__dst;
        v312 = 0;
      }
      printMessage((char **)&AGCPrinter, " %s\n", v80, v81, v82, v83, v84, v85, (char)p_dst);
      if (SHIBYTE(v312) < 0)
        operator delete(__dst);
      v88 = v77 + 5;
      v87 = (_QWORD *)v77[5];
      if (v87 == v77 + 5)
      {
        v100 = 1;
      }
      else
      {
        v89 = v53;
        v90 = (llvm::Instruction *)(v87 - 3);
        if (v87)
          v91 = v87 - 3;
        else
          v91 = 0;
        if (*((unsigned __int8 *)v91 + 16) - 29 <= 0xA
          && (NumSuccessors = llvm::Instruction::getNumSuccessors(v90)) != 0)
        {
          v93 = 0;
          v94 = NumSuccessors - 1;
          do
          {
            Successor = (const void *)llvm::Instruction::getSuccessor(v90);
            v96 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)v55, Successor);
            v97 = *((_QWORD *)v55 + 1);
            if (v97 == *(_QWORD *)v55)
              v98 = v55 + 5;
            else
              v98 = v55 + 4;
            v99 = (const void **)(v97 + 8 * *v98);
            v76 = v99 == v96;
            v100 = v99 != v96;
          }
          while (!v76 && v94 != v93++);
          v52 = (char *)this + 8;
          v51 = v251;
        }
        else
        {
          v100 = 1;
        }
        v53 = v89;
      }
      if (*v88)
        v102 = *v88 - 24;
      else
        v102 = 0;
      if (*(unsigned __int8 *)(v102 + 16) - 29 >= 0xB)
        v103 = 0;
      else
        v103 = *v88 - 24;
      v104 = *(unsigned __int8 *)(v103 + 16);
      if (v100 && v104 != 29)
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__dst, (llvm::SmallPtrSetImplBase *)v55, v77);
      LODWORD(v337) = v337 - 1;
      if ((_DWORD)v337)
        llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild((uint64_t)&v327);
    }
LABEL_184:
    if (v324 != v326)
      free(v324);
    if (v319 != v318)
      free(v319);
    if (v336 != v338)
      free(v336);
    if (v328 != v327)
      free(v328);
    if (v298 != v300)
      free(v298);
    if (v297 != v296)
      free(v297);
    if (v293 != v295)
      free(v293);
    if (v284 != __p)
      free(v284);
    v106 = (_QWORD *)*((_QWORD *)v54 + 10);
    if (v106 == (_QWORD *)((char *)v54 + 72))
    {
      v107 = 0;
    }
    else
    {
      v107 = 0;
      do
      {
        ++v107;
        v106 = (_QWORD *)v106[1];
      }
      while (v106 != (_QWORD *)((char *)v54 + 72));
    }
    v108 = llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v269, v54);
    if (v107 == *(_DWORD *)(v108 + 20) - *(_DWORD *)(v108 + 24))
    {
      for (j = *((_QWORD *)v54 + 1); j; j = *(_QWORD *)(j + 8))
      {
        v110 = *(_QWORD *)(j + 24);
        v111 = *(_WORD *)(v110 + 18);
        if ((v111 & 3u) - 1 <= 1)
          *(_WORD *)(v110 + 18) = v111 & 0xFFFC;
        v112 = *(_QWORD *)(v110 + 40);
        v113 = *(_QWORD *)(v112 + 40);
        if (v113 != v112 + 40)
        {
          v114 = v113 - 24;
          v115 = v113 ? v113 - 24 : 0;
          v116 = *(unsigned __int8 *)(v115 + 16) - 40;
          v117 = v116 >= 0xFFFFFFF5 ? (llvm::Instruction *)v114 : 0;
          if (v116 >= 0xFFFFFFF5 && *((_BYTE *)v117 + 16) == 35)
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v117);
            v118 = &v52[*(_QWORD *)(*(_QWORD *)this - 24)];
            v119 = *((_QWORD *)this + 731);
            v286 = 257;
            v120 = llvm::IRBuilderBase::CreateCall((uint64_t)(v118 + 32), **(_QWORD **)(*(_QWORD *)v119 + 16), v119, 0, 0, (uint64_t)&__p);
            *((_WORD *)v120 + 9) = *((_WORD *)v120 + 9) & 0xFFFC | 1;
          }
        }
      }
    }
    while (++v50 != (llvm::Value **)v51)
    {
      v54 = *v50;
      if ((unint64_t)*v50 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v50 != (llvm::Value **)v51)
          goto LABEL_89;
        break;
      }
    }
LABEL_223:
    v320 = 128;
    v318 = (llvm *)MEMORY[0x1CAA2C6C0](13312, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty((uint64_t)&v318);
    v321[0] = 0;
    v323 = 0;
    LODWORD(v312) = 128;
    __dst = (void *)MEMORY[0x1CAA2C6C0](13312, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty((uint64_t)&__dst);
    LOBYTE(v313) = 0;
    v314[16] = 0;
    for (k = *(_QWORD *)(*((_QWORD *)this + 731) + 8); k; k = *(_QWORD *)(k + 8))
    {
      v122 = *(llvm::Value ***)(*(_QWORD *)(k + 24) + 40);
      v123 = (unsigned int *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v269, v122[7]);
      v124 = (llvm::SmallPtrSetImplBase *)llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v318, (llvm::Value *)v122);
      AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(v122, v123, v124, (uint64_t)&__dst);
    }
    LODWORD(v303) = 128;
    v301 = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v301);
    LOBYTE(v304) = 0;
    BYTE8(v305) = 0;
    v267 = 128;
    v266[0] = (llvm *)MEMORY[0x1CAA2C6C0](6144, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty((uint64_t)v266);
    v268[0] = 0;
    v268[24] = 0;
    v264 = 128;
    v263[0] = (llvm *)MEMORY[0x1CAA2C6C0](6144, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty((uint64_t)v263);
    v265[0] = 0;
    v265[24] = 0;
    llvm::CloneModule();
    if (v276 == v275)
      v125 = (uint64_t *)((char *)&v277 + 4);
    else
      v125 = &v277;
    v126 = *(unsigned int *)v125;
    if ((_DWORD)v126)
    {
      v127 = 8 * v126;
      v128 = v276;
      while ((unint64_t)*v128 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v128;
        v127 -= 8;
        if (!v127)
          goto LABEL_407;
      }
    }
    else
    {
      v128 = v276;
    }
    v129 = (char *)&v276[v126];
    if (v128 != (llvm::Value **)v129)
    {
      v130 = *v128;
      v261 = (void **)(MEMORY[0x1E0DE2AB0] + 16);
      while (1)
      {
        for (m = (_QWORD *)*((_QWORD *)v130 + 10); m != (_QWORD *)((char *)v130 + 72); m = (_QWORD *)m[1])
        {
          if (m)
            v132 = (llvm::Value *)(m - 3);
          else
            v132 = 0;
          v133 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, v132);
          *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v266, (llvm::Value *)v133[2]) = v132;
        }
        v134 = (_QWORD *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v269, v130);
        if ((_DWORD)v311)
        {
          if ((_DWORD)v312)
          {
            v135 = 104 * v312;
            v136 = (char *)__dst;
            while ((*((_QWORD *)v136 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v136 += 104;
              v135 -= 104;
              if (!v135)
                goto LABEL_329;
            }
          }
          else
          {
            v136 = (char *)__dst;
          }
          v137 = (char *)__dst + 104 * v312;
          if (v136 != v137)
          {
            v138 = (llvm::Value **)*((_QWORD *)v136 + 3);
LABEL_251:
            if (v138[7] != v130)
              goto LABEL_252;
            v139 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, (llvm::Value *)v138);
            v140 = *((_QWORD *)v136 + 6);
            v141 = 56;
            if (v140 == *((_QWORD *)v136 + 5))
              v141 = 60;
            v142 = *(unsigned int *)&v136[v141];
            if ((_DWORD)v142)
            {
              v143 = 8 * v142;
              v144 = (llvm::Value **)*((_QWORD *)v136 + 6);
              while ((unint64_t)*v144 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v144;
                v143 -= 8;
                if (!v143)
                  goto LABEL_252;
              }
            }
            else
            {
              v144 = (llvm::Value **)*((_QWORD *)v136 + 6);
            }
            v145 = (llvm::Value **)(v140 + 8 * v142);
            if (v144 == v145)
              goto LABEL_252;
            v252 = (_QWORD *)(v139[2] + 40);
            v253 = v145;
            v146 = *v144;
            do
            {
              v147 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, v146);
              v148 = (_QWORD *)*v252;
              if ((_QWORD *)*v252 != v252)
              {
                v149 = (llvm::SmallPtrSetImplBase *)(v148 - 3);
                if (v148)
                  v150 = v148 - 3;
                else
                  v150 = 0;
                v151 = *((unsigned __int8 *)v150 + 16) - 40;
                if (v151 >= 0xFFFFFFF5)
                  v152 = v149;
                else
                  v152 = 0;
                v153 = *((unsigned __int8 *)v152 + 16);
                if (v153 == 30 && v151 >= 0xFFFFFFF5)
                {
                  v258 = v134;
                  v167 = 0;
                  v168 = (char *)v152 - 32;
                  do
                  {
                    v169 = v167;
                    v170 = *(_QWORD *)&v168[-32 * v167++];
                  }
                  while (v170 == v147[2]);
                  v260 = -32 * v169;
                  v171 = v152;
                  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v152);
                  llvm::IRBuilderBase::CreateBr((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *(llvm::BasicBlock **)&v168[v260]);
                  llvm::Instruction::eraseFromParent(v171);
                  v134 = v258;
                }
                else
                {
                  v254 = (llvm::Value *)v147[2];
                  if (v151 >= 0xFFFFFFF5 && v153 == 31)
                  {
                    v156 = *((_DWORD *)v152 + 5);
                    v259 = v152;
                    if (((v156 >> 1) & 0x3FFFFFF) == 1)
                    {
                      v158 = 0;
                    }
                    else
                    {
                      v257 = (unsigned int *)v134;
                      v157 = 0;
                      v158 = 0;
                      v255 = 2 * (((v156 >> 1) & 0x3FFFFFF) - 1);
                      do
                      {
                        v159 = *((_DWORD *)v152 + 5);
                        if ((v159 & 0x40000000) != 0)
                          v160 = (char *)*((_QWORD *)v152 - 1);
                        else
                          v160 = (char *)v152 - 32 * (v159 & 0x7FFFFFF);
                        v161 = (v157 + 3);
                        if (v157 == 0x1FFFFFFFCLL)
                          v161 = 1;
                        v162 = *(llvm::Value **)&v160[32 * v161];
                        v163 = (const void **)llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v266, v162);
                        v164 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)v257, *v163);
                        v165 = *((_QWORD *)v257 + 1);
                        if (v165 == *(_QWORD *)v257)
                          v166 = v257 + 5;
                        else
                          v166 = v257 + 4;
                        v152 = v259;
                        if ((const void **)(v165 + 8 * *v166) == v164)
                          v158 = (uint64_t)v162;
                        v157 += 2;
                      }
                      while (v255 != v157);
                      v156 = *((_DWORD *)v259 + 5);
                      v134 = v257;
                    }
                    if ((v156 & 0x40000000) != 0)
                      v172 = (llvm::Value **)*((_QWORD *)v152 - 1);
                    else
                      v172 = (llvm::Value **)((char *)v152 - 32 * (v156 & 0x7FFFFFF));
                    if (v254 == v172[4] && v158 != 0)
                    {
                      v174 = (const void **)llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v266, v254);
                      v175 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)v134, *v174);
                      v152 = v259;
                      v176 = v134[1];
                      v177 = v176 == *v134 ? (unsigned int *)((char *)v134 + 20) : (unsigned int *)(v134 + 2);
                      if ((const void **)(v176 + 8 * *v177) != v175)
                      {
                        llvm::SwitchInst::setDefaultDest((uint64_t)v259, v158);
                        v152 = v259;
                      }
                    }
                    v178 = *((_DWORD *)v152 + 5);
                    if ((v178 & 0x7FFFFFE) != 2)
                    {
                      v179 = 0;
                      v180 = (uint64_t)v152;
                      do
                      {
                        v181 = *(_DWORD *)(v180 + 20);
                        if ((v181 & 0x40000000) != 0)
                          v182 = *(_QWORD *)(v180 - 8);
                        else
                          v182 = v180 - 32 * (v181 & 0x7FFFFFF);
                        v183 = (2 * v179 + 3);
                        if ((_DWORD)v179 == -2)
                          v183 = 1;
                        if (*(llvm::Value **)(v182 + 32 * v183) == v254)
                        {
                          v180 = llvm::SwitchInst::removeCase();
                          v179 = v184;
                          v178 = *((_DWORD *)v259 + 5);
                        }
                        else
                        {
                          ++v179;
                        }
                      }
                      while (v179 != ((v178 >> 1) & 0x3FFFFFF) - 1);
                    }
                  }
                }
              }
              for (++v144; ; ++v144)
              {
                if (v144 == v253)
                  goto LABEL_252;
                v146 = *v144;
                if ((unint64_t)*v144 < 0xFFFFFFFFFFFFFFFELL)
                  break;
              }
            }
            while (v144 != v253);
LABEL_252:
            while (1)
            {
              v136 += 104;
              if (v136 == v137)
                break;
              v138 = (llvm::Value **)*((_QWORD *)v136 + 3);
              if (((unint64_t)v138 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v136 != v137)
                  goto LABEL_251;
                break;
              }
            }
          }
        }
LABEL_329:
        v185 = v134[1];
        if (v185 == *v134)
          v186 = (unsigned int *)v134 + 5;
        else
          v186 = (unsigned int *)(v134 + 2);
        v187 = *v186;
        if ((_DWORD)v187)
        {
          v188 = 8 * v187;
          v189 = (llvm::Value **)v134[1];
          while ((unint64_t)*v189 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v189;
            v188 -= 8;
            if (!v188)
              goto LABEL_359;
          }
        }
        else
        {
          v189 = (llvm::Value **)v134[1];
        }
        v190 = (llvm::Value **)(v185 + 8 * v187);
        if (v189 == v190)
          goto LABEL_359;
        v191 = *v189;
LABEL_340:
        v192 = (llvm::BasicBlock *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, v191)[2];
        if (v267)
        {
          v193 = ((v192 >> 4) ^ (v192 >> 9)) & (v267 - 1);
          v194 = (char *)v266[0] + 48 * v193;
          v195 = (llvm::BasicBlock *)*((_QWORD *)v194 + 3);
          if (v192 == v195)
          {
LABEL_342:
            v196 = (char *)v266[0] + 48 * v267;
            goto LABEL_348;
          }
          v197 = 1;
          while (v195 != (llvm::BasicBlock *)-4096)
          {
            v198 = v193 + v197++;
            v193 = v198 & (v267 - 1);
            v194 = (char *)v266[0] + 48 * v193;
            v195 = (llvm::BasicBlock *)*((_QWORD *)v194 + 3);
            if (v192 == v195)
              goto LABEL_342;
          }
        }
        v196 = (char *)v266[0] + 48 * v267;
        v194 = v196;
LABEL_348:
        if (v196 != v194)
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase((int32x2_t *)v266, (uint64_t)v194);
        __p = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v301, v303, (uint64_t)v191, &__p))v199 = __p;
        else
          v199 = (_QWORD *)((char *)v301 + 64 * (unint64_t)v303);
        if ((_QWORD *)((char *)v301 + 64 * (unint64_t)v303) != v199)
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase((int32x2_t *)&v301, v199);
        llvm::BasicBlock::eraseFromParent(v192);
        while (++v189 != v190)
        {
          v191 = *v189;
          if ((unint64_t)*v189 < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v189 != v190)
              goto LABEL_340;
            break;
          }
        }
LABEL_359:
        v200 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, v130)[2];
        __p = v285;
        v284 = (void *)0x400000000;
        v287[0] = 0;
        v287[1] = 0;
        v288 = 0;
        v292 = 0;
        v291 = 0;
        v289 = 0;
        v290 = v200;
        llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>();
        v281[1] = 0;
        v281[0] = 0;
        v282 = 0;
        LODWORD(v328) = 0;
        v332 = 0;
        v333 = 0;
        v334 = 1;
        v330 = 0;
        v331 = 0;
        v329 = 0;
        v327 = v261;
        v335 = v281;
        llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v327);
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::print();
        if (*((char *)v335 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v280, (const std::string::value_type *)*v335, (std::string::size_type)v335[1]);
        }
        else
        {
          v201 = *(_OWORD *)v335;
          v280.__r_.__value_.__r.__words[2] = (std::string::size_type)v335[2];
          *(_OWORD *)&v280.__r_.__value_.__l.__data_ = v201;
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v327);
        if (SHIBYTE(v282) < 0)
          operator delete(v281[0]);
        v208 = &v280;
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LOBYTE(v208) = v280.__r_.__value_.__s.__data_[0];
        printMessage((char **)&AGCPrinter, "%s\n", v202, v203, v204, v205, v206, v207, (char)v208);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v280.__r_.__value_.__l.__data_);
        if ((_DWORD)v319)
        {
          if (v320)
          {
            v209 = 104 * v320;
            v210 = v318;
            while ((*((_QWORD *)v210 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v210 = (llvm *)((char *)v210 + 104);
              v209 -= 104;
              if (!v209)
                goto LABEL_400;
            }
          }
          else
          {
            v210 = v318;
          }
          v211 = (llvm *)((char *)v318 + 104 * v320);
          if (v210 != v211)
          {
            v212 = (llvm::Value **)*((_QWORD *)v210 + 3);
LABEL_377:
            if (v212[7] != v130)
              goto LABEL_397;
            v213 = *((_QWORD *)v210 + 6);
            v214 = 56;
            if (v213 == *((_QWORD *)v210 + 5))
              v214 = 60;
            v215 = *(unsigned int *)((char *)v210 + v214);
            if ((_DWORD)v215)
            {
              v216 = 8 * v215;
              v217 = (llvm::Value **)*((_QWORD *)v210 + 6);
              while ((unint64_t)*v217 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v217;
                v216 -= 8;
                if (!v216)
                  goto LABEL_395;
              }
            }
            else
            {
              v217 = (llvm::Value **)*((_QWORD *)v210 + 6);
            }
            v218 = (llvm::Value **)(v213 + 8 * v215);
            if (v217 == v218)
            {
LABEL_395:
              NearestCommonDominator = 0;
            }
            else
            {
              NearestCommonDominator = 0;
              v220 = *v217;
LABEL_388:
              v221 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v301, v220);
              v222 = *(llvm::Value ***)(llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)v287[0], v288, v221[2])[1]+ 8);
              if (NearestCommonDominator)
                NearestCommonDominator = (llvm::Value *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator();
              else
                NearestCommonDominator = *v222;
              while (++v217 != v218)
              {
                v220 = *v217;
                if ((unint64_t)*v217 < 0xFFFFFFFFFFFFFFFELL)
                {
                  if (v217 != v218)
                    goto LABEL_388;
                  break;
                }
              }
            }
            v223 = *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v266, NearestCommonDominator);
            *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v263, (llvm::Value *)v212) = v223;
LABEL_397:
            while (1)
            {
              v210 = (llvm *)((char *)v210 + 104);
              if (v210 == v211)
                break;
              v212 = (llvm::Value **)*((_QWORD *)v210 + 3);
              if (((unint64_t)v212 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v210 != v211)
                  goto LABEL_377;
                break;
              }
            }
          }
        }
LABEL_400:
        llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((uint64_t)v287);
        llvm::deallocate_buffer(v287[0], (void *)(16 * v288));
        if (__p != v285)
          free(__p);
        if (++v128 != (llvm::Value **)v129)
        {
          while (1)
          {
            v130 = *v128;
            if ((unint64_t)*v128 < 0xFFFFFFFFFFFFFFFELL)
              break;
            if (++v128 == (llvm::Value **)v129)
              goto LABEL_407;
          }
          if (v128 != (llvm::Value **)v129)
            continue;
        }
        break;
      }
    }
LABEL_407:
    AGCLLVMObject::printIR((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), "after editClonedCFG", v262);
    v224 = *(_QWORD *)(*((_QWORD *)this + 731) + 8);
    while (v224)
    {
      v225 = *(llvm::Value **)(*(_QWORD *)(v224 + 24) + 40);
      v226 = (_QWORD *)*((_QWORD *)v225 + 5);
      if (v226 == (_QWORD *)((char *)v225 + 40))
      {
        v229 = 0;
      }
      else
      {
        v227 = (llvm::Instruction *)(v226 - 3);
        if (v226)
          v228 = v226 - 3;
        else
          v228 = 0;
        if (*((unsigned __int8 *)v228 + 16) - 29 >= 0xB)
          v229 = 0;
        else
          v229 = v227;
      }
      v224 = *(_QWORD *)(v224 + 8);
      v230 = (llvm::BasicBlock *)*llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v263, v225);
      if (v230)
      {
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v229);
        llvm::IRBuilderBase::CreateBr((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v230);
        llvm::Instruction::eraseFromParent(v229);
        v231 = llvm::BasicBlock::phis(v230);
        if (v231 != v232)
        {
          v233 = v231;
          v234 = v232;
          do
          {
            v235 = (llvm::Value *)llvm::UndefValue::get();
            llvm::PHINode::addIncoming((_DWORD *)v233, v235, v225);
            v236 = *(_QWORD *)(v233 + 32);
            v237 = v236 - 24;
            if (v236)
              v238 = v236 - 24;
            else
              v238 = 0;
            if (*(_BYTE *)(v238 + 16) == 83)
              v233 = v237;
            else
              v233 = 0;
          }
          while (v233 != v234);
        }
      }
      else
      {
        if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)v225 + 7) + 24) + 16) + 8) == 7)
          v239 = 0;
        else
          v239 = llvm::UndefValue::get();
        v240 = **(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
        v241 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x1CAA2C174](v241, v240, v239, 0);
        llvm::ReplaceInstWithInst(v229, v241, v242);
      }
    }
    AGCLLVMObject::printIR((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), "after editOriginalCFG", 0);
    v256[17] = 1;
    if (v262)
    {
      v243 = MEMORY[0x1CAA2CC9C]();
      MEMORY[0x1CAA2D68C](v243, 0x10B2C407FF26C1CLL);
    }
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v265);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll((uint64_t)v263[0], v264);
    llvm::deallocate_buffer(v263[0], (void *)(48 * v264));
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v268);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll((uint64_t)v266[0], v267);
    llvm::deallocate_buffer(v266[0], (void *)(48 * v267));
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v304);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v301, v303);
    llvm::deallocate_buffer(v301, (void *)((unint64_t)v303 << 6));
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v313);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll((uint64_t)__dst, v312);
    llvm::deallocate_buffer((llvm *)__dst, (void *)(104 * v312));
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v321);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll((uint64_t)v318, v320);
    llvm::deallocate_buffer(v318, (void *)(104 * v320));
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v271);
    v244 = v269[0];
    if (v270)
    {
      v245 = (uint64_t *)((char *)v269[0] + 24);
      v246 = 104 * v270;
      do
      {
        v247 = *v245;
        if ((*v245 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v248 = (void *)v245[3];
          if (v248 != (void *)v245[2])
          {
            free(v248);
            v247 = *v245;
          }
        }
        if (v247 != -8192 && v247 != -4096 && v247 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v245 - 2));
        v245 += 13;
        v246 -= 104;
      }
      while (v246);
      v244 = v269[0];
      v250 = 104 * v270;
    }
    else
    {
      v250 = 0;
    }
    llvm::deallocate_buffer(v244, (void *)v250);
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v274);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v272, v273);
    llvm::deallocate_buffer(v272, (void *)((unint64_t)v273 << 6));
    if (v276 != v275)
      free(v276);
  }
  SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::verifyLoweredIR(AGCLLVMAGPFragmentShaderGen3 *this)
{
  const char *v2;
  std::string *v3;
  std::string::size_type size;
  std::string v6;

  if (!*((_BYTE *)this + 7260))
    return AGCLLVMUserObject::verifyLoweredIR(this);
  memset(&v6, 0, sizeof(v6));
  if (*((_BYTE *)this + 5832))
  {
    v2 = "[[front_facing]]";
  }
  else if (*((_BYTE *)this + 5833))
  {
    v2 = "[[point_coord]]";
  }
  else if (*((_BYTE *)this + 5835))
  {
    v2 = "[[depth]]";
  }
  else if (*((_BYTE *)this + 5857))
  {
    v2 = "[[stencil]]";
  }
  else if (*((_BYTE *)this + 5830) || *((_BYTE *)this + 5844))
  {
    v2 = "[[sample_mask]]";
  }
  else if (*((_BYTE *)this + 5858))
  {
    v2 = "[[viewport_array_index]]";
  }
  else if (*((_BYTE *)this + 5860))
  {
    v2 = "[[amplification_id]]";
  }
  else if (*((_BYTE *)this + 5861))
  {
    v2 = "[[amplification_count]]";
  }
  else if (*((_BYTE *)this + 5828))
  {
    v2 = "interpolation of attributes";
  }
  else if (*((_BYTE *)this + 5845))
  {
    v2 = "discard_fragment()";
  }
  else
  {
    if (!*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 456))
      return AGCLLVMUserObject::verifyLoweredIR(this);
    v2 = "threadgroup_barrier()";
  }
  MEMORY[0x1CAA2D494](&v6, v2);
  if ((*((_BYTE *)&v6.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v6.__r_.__value_.__l.__size_)
      goto LABEL_17;
    operator delete(v6.__r_.__value_.__l.__data_);
    return AGCLLVMUserObject::verifyLoweredIR(this);
  }
  if (!*((_BYTE *)&v6.__r_.__value_.__s + 23))
    return AGCLLVMUserObject::verifyLoweredIR(this);
LABEL_17:
  std::string::append(&v6, " unsupported in fragment functions bound to tile pipelines");
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v6;
  else
    v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  else
    size = v6.__r_.__value_.__l.__size_;
  std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (const std::string::value_type *)v3, size);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::constructReply(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v2;
  int v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  _DWORD *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  flatbuffers::FlatBufferBuilder *v20;
  int v21;
  const char *v22;

  v2 = AGCLLVMAGPFragmentShader::constructReply(this);
  if ((_DWORD)v2)
  {
    if (*((_BYTE *)this + 7224))
    {
      v3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), (const unsigned __int8 *)this + 7096, 8);
      v4 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), (const unsigned __int8 *)this + 7160, 8);
      v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v6 = v5 + 2568;
      v5[2638] = 1;
      v7 = *((_DWORD *)v5 + 650) - *((_DWORD *)v5 + 654) + *((_DWORD *)v5 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v5 + 2568, 6, v4);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v6, 4, v3);
      v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v6, v7);
    }
    else
    {
      v8 = 0;
    }
    v9 = *(_QWORD *)(*(_QWORD *)this - 24);
    if (*(_BYTE *)(*(_QWORD *)((char *)this + v9 + 400) + 1744))
      v10 = *((_DWORD *)this + 1610) == 1;
    else
      v10 = 0;
    v11 = (_DWORD *)((char *)this + v9);
    v12 = (char *)this + v9 + 2568;
    v13 = *((unsigned __int8 *)this + 5856);
    v14 = *((_DWORD *)this + 1079);
    *((_BYTE *)this + v9 + 2638) = 1;
    v15 = *(_DWORD *)((char *)this + v9 + 2600)
        - *(_DWORD *)((char *)this + v9 + 2616)
        + *(_DWORD *)((char *)this + v9 + 2608);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 10, v14);
    if (v8)
    {
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)v12, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 8, v11[650] - v11[654] + v11[652] - v8 + 4);
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v12, 6, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v12, 4, v13, 0);
    v16 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v12, v15);
    v17 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v18[2638] = 1;
    v19 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
    if (v16)
    {
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v18 + 2568), 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18 + 2568, 6, *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652) - v16 + 4);
    }
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v18 + 2568, v17);
    v20 = (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v21 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v18 + 2568), v19);
    flatbuffers::FlatBufferBuilder::Finish(v20, v21, v22);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  }
  return v2;
}

uint64_t AGCLLVMAGPFragmentShader::setupInterpolationFunctions(AGCLLVMAGPFragmentShader *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  char *v3;
  char **v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char **v16;
  int v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char **v27;
  size_t v28;
  size_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char **v37;
  char *v38;
  size_t v39;
  size_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  size_t v47;
  int v48;
  uint64_t v49;
  llvm::Type ***v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  llvm::Value *v55;
  int Key;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  llvm::Instruction *v62;
  uint64_t v63;
  llvm::Value *v64;
  llvm::Instruction *v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::IRBuilderBase *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  llvm::Type **v73;
  llvm::Value *v74;
  llvm::Type *v75;
  llvm::Type **v76;
  llvm::Value *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *InsertElement;
  char *v81;
  llvm::Value *v82;
  llvm::Type *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  llvm::Value *v91;
  llvm::Type *v92;
  char *v93;
  llvm::Type **GEP;
  llvm::Value *v95;
  llvm::Type *v96;
  llvm::Value *AlignedLoad;
  llvm::IRBuilderBase *v98;
  llvm::Value *v99;
  uint64_t Element;
  llvm::IRBuilderBase *v101;
  uint64_t v102;
  llvm::Value *v103;
  llvm::Value *v104;
  char *v105;
  llvm::IRBuilderBase *v106;
  llvm::Value *v107;
  char *v108;
  llvm::Value *v109;
  llvm::Type *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  char **v128;
  unsigned int v129;
  char **v130;
  llvm::Instruction *v131;
  char **v132;
  unsigned __int8 v133[8];
  unsigned __int8 v134[8];
  __int128 v135;
  uint64_t v136;
  int v137;
  __int128 v138;
  uint64_t v139;
  int v140;
  uint64_t *v141;
  uint64_t v142;
  __int16 v143;
  uint64_t *v144[2];
  uint64_t *v145;
  uint64_t Cast;
  uint64_t *v147;
  __int128 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map = 0;
    *(_QWORD *)&dword_1ED839898 = 0;
    qword_1ED8398A0 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map, &dword_1C3C54000);
  }
  if (!dword_1ED83989C)
  {
    v2 = 0;
    v3 = "_center";
    v4 = &AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comp_type;
    do
    {
      v5 = 0;
      v128 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_loc)[2 * v2 + 1];
      v119 = v2;
      if ((v2 & 0xFFFFFFFE) == 2)
        v6 = 1;
      else
        v6 = -1;
      v126 = v6;
      v7 = "_perspective";
      do
      {
        v8 = 0;
        v121 = v5;
        v130 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_mode)[2 * v5 + 1];
        v9 = ".";
        do
        {
          v10 = 0;
          v124 = v8;
          v132 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v8 + 1];
          v11 = "f16";
          do
          {
            v147 = &v149;
            v148 = xmmword_1C3E37B50;
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, "air.interpolate", "");
            v12 = strlen(v3);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v3, &v3[v12]);
            v13 = strlen(v7);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v7, &v7[v13]);
            v14 = strlen(v9);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v9, &v9[v14]);
            v15 = strlen(v11);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v11, &v11[v15]);
            v16 = v4;
            v17 = (int)v4[2 * v10 + 1];
            v18 = *(_DWORD *)v128;
            v19 = *(_DWORD *)v130;
            v20 = *(_BYTE *)v132;
            v21 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v147, v148);
            *(_DWORD *)(v21 + 8) = v18;
            *(_DWORD *)(v21 + 12) = v19;
            *(_DWORD *)(v21 + 16) = v17;
            *(_BYTE *)(v21 + 20) = v20;
            *(_BYTE *)(v21 + 21) = 0;
            *(_BYTE *)(v21 + 22) = v126;
            if (v147 != &v149)
              free(v147);
            v22 = v10 + 1;
            v4 = v16;
            v11 = v16[2 * v10 + 2];
            v10 = 1;
          }
          while (v22 != 2);
          v8 = v124 + 1;
          v9 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v124 + 2];
        }
        while (v124 != 3);
        v7 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_mode)[2 * v121 + 2];
        v5 = 1;
      }
      while (v121 != 1);
      v2 = v119 + 1;
      v3 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_loc)[2 * v119 + 2];
    }
    while (v119 != 3);
    v23 = 0;
    v24 = ".";
    do
    {
      v25 = 0;
      v26 = "f16";
      v27 = v16;
      do
      {
        v147 = &v149;
        v148 = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, "air.get_vertex_value", "");
        v28 = strlen(v24);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v24, &v24[v28]);
        v29 = strlen(v26);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v26, &v26[v29]);
        v30 = (int)v27[2 * v25 + 1];
        v31 = (char)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v23 + 1];
        v32 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v147, v148);
        *(_QWORD *)(v32 + 8) = 0x500000000;
        *(_DWORD *)(v32 + 16) = v30;
        *(_BYTE *)(v32 + 20) = v31;
        *(_WORD *)(v32 + 21) = -256;
        if (v147 != &v149)
          free(v147);
        v33 = v25 + 1;
        v27 = v16;
        v26 = v16[2 * v25 + 2];
        v25 = 1;
      }
      while (v33 != 2);
      ++v23;
      v24 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v23];
    }
    while (v23 != 4);
    v34 = 0;
    v35 = ".";
    do
    {
      v36 = 0;
      *(_QWORD *)v133 = v34;
      v37 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v34 + 1];
      v38 = "i8";
      do
      {
        v147 = &v149;
        v148 = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, "air.get_vertex_value", "");
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, ".s", "");
        v39 = strlen(v35);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v35, &v35[v39]);
        v40 = strlen(v38);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v38, &v38[v40]);
        v41 = (int)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::s_pvv_comp_type)[v36 + 1];
        v42 = *(_BYTE *)v37;
        v43 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v147, v148);
        *(_QWORD *)(v43 + 8) = 0x500000000;
        *(_DWORD *)(v43 + 16) = v41;
        *(_BYTE *)(v43 + 20) = v42;
        *(_WORD *)(v43 + 21) = -256;
        if (v147 != &v149)
          free(v147);
        v38 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::s_pvv_comp_type)[v36 + 3];
        v36 += 3;
      }
      while (v36 != 9);
      v44 = 0;
      v45 = "i1";
      do
      {
        v147 = &v149;
        v148 = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, "air.get_vertex_value", "");
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, ".u", "");
        v46 = strlen(v35);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v35, &v35[v46]);
        v47 = strlen(v45);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v147, v45, &v45[v47]);
        v48 = (int)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::u_pvv_comp_type)[v44 + 1];
        v49 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v147, v148);
        *(_QWORD *)(v49 + 8) = 0x500000000;
        *(_DWORD *)(v49 + 16) = v48;
        *(_BYTE *)(v49 + 20) = v42;
        *(_WORD *)(v49 + 21) = -256;
        if (v147 != &v149)
          free(v147);
        v45 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::u_pvv_comp_type)[v44 + 3];
        v44 += 3;
      }
      while (v44 != 12);
      v34 = *(_QWORD *)v133 + 1;
      v35 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * *(_QWORD *)v133 + 2];
    }
    while (*(_QWORD *)v133 != 3);
  }
  v50 = (llvm::Type ***)this;
  v51 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v52 = *(_QWORD *)(v51 + 32);
  v115 = v51 + 24;
  if (v52 != v51 + 24)
  {
    v53 = (char *)this + 200;
    v54 = (char *)this + 8;
    while (1)
    {
      v55 = v52 ? (llvm::Value *)(v52 - 56) : 0;
      v117 = *(_QWORD *)(v52 + 8);
      llvm::Value::getName(v55);
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1ED839898)
      {
        v58 = *((_QWORD *)v55 + 1);
        if (v58)
          break;
      }
LABEL_75:
      v52 = v117;
      if (v117 == v115)
        return 1;
    }
    v59 = *(_QWORD *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                    + 8 * Key);
    v60 = *(_DWORD *)(v59 + 8);
    v125 = *(_DWORD *)(v59 + 12);
    v118 = *(unsigned __int8 *)(v59 + 22);
    v120 = *(unsigned __int8 *)(v59 + 21);
    *(_QWORD *)v134 = *(unsigned __int8 *)(v59 + 20);
    v122 = *(_DWORD *)(v59 + 16);
    v61 = (char *)this + 168;
    if (v122 >= 2)
      v61 = v53;
    v116 = v61;
    v129 = v60;
    while (1)
    {
      v62 = *(llvm::Instruction **)(v58 + 24);
      v63 = *(_QWORD *)(v58 + 8);
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v50 + (_QWORD)*(*v50 - 3) + 40), v62);
      v127 = v63;
      if (v60 == 4 || v60 == 1)
      {
        v64 = (llvm::Value *)*((_QWORD *)v62 + 4 * v118 + -4 * (*((_DWORD *)v62 + 5) & 0x7FFFFFF));
        if (v60 == 1 && v64)
        {
          v65 = v62;
          v66 = (uint64_t)v50 + (_QWORD)*(*v50 - 3) + 40;
          v67 = (llvm::Value *)llvm::ConstantInt::get();
          v150 = 257;
          v68 = (llvm::IRBuilderBase *)v66;
          v62 = v65;
          v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v68, v64, v67, (const llvm::Twine *)&v147);
        }
      }
      else
      {
        v64 = 0;
      }
      v145 = 0;
      Cast = 0;
      v145 = (uint64_t *)llvm::ConstantInt::get();
      v69 = (uint64_t)*(*v50 - 3);
      v131 = v62;
      v70 = *((_QWORD *)v62 + 4 * v120 + -4 * (*((_DWORD *)v62 + 5) & 0x7FFFFFF));
      v71 = *(_QWORD *)&v53[v69 + 32];
      v150 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v50 + v69 + 40, 47, v70, v71, (uint64_t)&v147);
      v72 = &v54[(_QWORD)*(*v50 - 3)];
      v73 = (llvm::Type **)*((_QWORD *)this + 3 * *(_QWORD *)v134 + 813);
      v150 = 257;
      v75 = AGCLLVMBuilder::tryDeducePointeeType(v73, v74);
      v76 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v72 + 32), (uint64_t)v75, (uint64_t *)v73, &v145, 2, (uint64_t)&v147);
      if (v129 == 4)
      {
        v77 = 0;
        v147 = 0;
        *(_QWORD *)&v148 = 0;
        v58 = v127;
        if (!v125)
        {
          v147 = (uint64_t *)AGCLLVMAGPFragmentShader::calculateInterpolationCoords((AGCLLVMAGPFragmentShader *)v50, 1u, v64);
          *(_QWORD *)&v148 = v78;
          v77 = (llvm::Value *)AGCLLVMAGPFragmentShader::interpolateAtOffset(v50, &v147, 1u, v50[711], 0);
        }
        v147 = (uint64_t *)AGCLLVMAGPFragmentShader::calculateInterpolationCoords((AGCLLVMAGPFragmentShader *)v50, *(unsigned int *)v134, v64);
        *(_QWORD *)&v148 = v79;
        InsertElement = (llvm::Value *)AGCLLVMAGPFragmentShader::interpolateAtOffset(v50, &v147, *(unsigned int *)v134, v76, v77);
      }
      else
      {
        if (v125 != 5)
        {
          if (v125)
          {
            v108 = (char *)v50 + (_QWORD)*(*v50 - 3);
            v141 = (uint64_t *)llvm::ConstantInt::get();
            v142 = llvm::ConstantInt::get();
            v150 = 257;
            v110 = AGCLLVMBuilder::tryDeducePointeeType(v76, v109);
            v111 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v108 + 40), (uint64_t)v110, (uint64_t *)v76, &v141, 2, (uint64_t)&v147);
            v112 = (char *)v50 + (_QWORD)*(*v50 - 3);
            v113 = *((_QWORD *)v112 + 50);
            v135 = *(_OWORD *)(v112 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v112 + 40));
            v137 = *((_DWORD *)v112 + 34);
            v60 = v129;
            InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned __int8 *, _QWORD, uint64_t, llvm::Value *, _QWORD))(*(_QWORD *)v113 + 264))(v113, &v135, *(unsigned __int8 **)v134, v129, v111, v64, 0);
            if (v136)
              llvm::MetadataTracking::untrack();
            v54 = (char *)this + 8;
          }
          else
          {
            v81 = (char *)v50 + (_QWORD)*(*v50 - 3);
            v141 = (uint64_t *)llvm::ConstantInt::get();
            v142 = llvm::ConstantInt::get();
            v150 = 257;
            v83 = AGCLLVMBuilder::tryDeducePointeeType(v76, v82);
            v84 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v81 + 40), (uint64_t)v83, (uint64_t *)v76, &v141, 2, (uint64_t)&v147);
            v85 = (char *)v50 + (_QWORD)*(*v50 - 3);
            v86 = *((_QWORD *)v85 + 50);
            v138 = *(_OWORD *)(v85 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v85 + 40));
            v140 = *((_DWORD *)v85 + 34);
            v60 = v129;
            InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned __int8 *, _QWORD, uint64_t, llvm::Value *, llvm::Type **))(*(_QWORD *)v86 + 264))(v86, &v138, *(unsigned __int8 **)v134, v129, v84, v64, v50[711]);
            if (v139)
              llvm::MetadataTracking::untrack();
          }
          v58 = v127;
          goto LABEL_71;
        }
        v87 = *(_QWORD *)&v116[(_QWORD)*(*v50 - 3) + 32];
        llvm::FixedVectorType::get();
        InsertElement = (llvm::Value *)llvm::UndefValue::get();
        if (*(_DWORD *)v134)
        {
          v88 = v87;
          v89 = 0;
          do
          {
            v90 = (uint64_t *)((char *)v50 + (_QWORD)*(*v50 - 3));
            v144[0] = (uint64_t *)llvm::ConstantInt::get();
            v144[1] = (uint64_t *)llvm::ConstantInt::get();
            v150 = 257;
            v92 = AGCLLVMBuilder::tryDeducePointeeType(v76, v91);
            v90 += 5;
            v93 = v53;
            GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v90, (uint64_t)v92, (uint64_t *)v76, v144, 2, (uint64_t)&v147);
            v143 = 257;
            v96 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v95);
            AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v90, v96, (uint64_t)GEP, 0, (uint64_t)&v141);
            v98 = (llvm::IRBuilderBase *)((char *)v50 + (_QWORD)*(*v50 - 3) + 40);
            v99 = (llvm::Value *)((_QWORD *)v131 - 4 * (*((_DWORD *)v131 + 5) & 0x7FFFFFF))[4];
            v150 = 257;
            Element = llvm::IRBuilderBase::CreateExtractElement(v98, AlignedLoad, v99, (const llvm::Twine *)&v147);
            v101 = (AGCLLVMAGPFragmentShader *)((char *)this + (_QWORD)*(*v50 - 3) + 40);
            v150 = 257;
            v102 = llvm::IRBuilderBase::CreateCast((uint64_t)v101, 49, Element, v88, (uint64_t)&v147);
            v143 = 257;
            v50 = (llvm::Type ***)this;
            v103 = (llvm::Value *)llvm::ConstantInt::get();
            v104 = (llvm::Value *)v102;
            v53 = v93;
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v101, InsertElement, v104, v103, (const llvm::Twine *)&v141);
            ++v89;
          }
          while (*(_QWORD *)v134 != v89);
          v58 = v127;
          v60 = v129;
          if (*(_DWORD *)v134 == 1)
          {
            v105 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v150 = 257;
            v106 = (llvm::IRBuilderBase *)(v105 + 40);
            v107 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v106, InsertElement, v107, (const llvm::Twine *)&v147);
          }
          v54 = (char *)this + 8;
          goto LABEL_71;
        }
        v58 = v127;
      }
      v60 = v129;
LABEL_71:
      AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)v50 + (_QWORD)*(*v50 - 3) + 32), InsertElement, v122);
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v131);
      if (!v58)
        goto LABEL_75;
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObject::markInvariantOutputs(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::verifyLoweredIR(AGCLLVMUserObject *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 v21;
  NSObject *v22;
  void *v23;
  size_t v24;
  std::string *v25;
  std::string::size_type v26;
  void **v27;
  std::string::size_type v28;
  void *Name;
  size_t v30;
  void **v31;
  void *__p[2];
  uint64_t v33;
  std::string __dst;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 8;
  v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v4 = v3 + 24;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    v6 = 0;
    do
    {
      while (1)
      {
        if (v5)
          v7 = v5 - 56;
        else
          v7 = 0;
        if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7))
        {
          if (*(_QWORD *)(v7 + 8))
          {
            if ((*(_BYTE *)(v7 + 33) & 0x20) == 0)
            {
              __p[0] = (void *)llvm::Value::getName((llvm::Value *)v7);
              __p[1] = v8;
              if (llvm::StringRef::find() != -1)
              {
                if ((v21 & 1) == 0
                {
                  AGCLLVMUserObject::verifyLoweredIR(void)::log = (uint64_t)os_log_create("com.apple.agx", "AGC");
                }
                v22 = AGCLLVMUserObject::verifyLoweredIR(void)::log;
                if (os_log_type_enabled((os_log_t)AGCLLVMUserObject::verifyLoweredIR(void)::log, OS_LOG_TYPE_FAULT))
                {
                  Name = (void *)llvm::Value::getName((llvm::Value *)v7);
                  if (Name)
                  {
                    std::string::basic_string[abi:nn180100](__p, Name, v30);
                    v31 = v33 >= 0 ? __p : (void **)__p[0];
                  }
                  else
                  {
                    __p[0] = 0;
                    __p[1] = 0;
                    v31 = __p;
                    v33 = 0;
                  }
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
                  _os_log_fault_impl(&dword_1C3C54000, v22, OS_LOG_TYPE_FAULT, "Encountered unlowered function call to %s", (uint8_t *)&__dst, 0xCu);
                  if (SHIBYTE(v33) < 0)
                    operator delete(__p[0]);
                }
                v23 = (void *)llvm::Value::getName((llvm::Value *)v7);
                if (v23)
                  std::string::basic_string[abi:nn180100](&__dst, v23, v24);
                else
                  memset(&__dst, 0, sizeof(__dst));
                v25 = std::string::insert(&__dst, 0, "Encountered unlowered function call to ");
                v26 = v25->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
                v33 = v26;
                v25->__r_.__value_.__l.__size_ = 0;
                v25->__r_.__value_.__r.__words[2] = 0;
                v25->__r_.__value_.__r.__words[0] = 0;
                if (v33 >= 0)
                  v27 = __p;
                else
                  v27 = (void **)__p[0];
                if (v33 >= 0)
                  v28 = HIBYTE(v33);
                else
                  v28 = (std::string::size_type)__p[1];
                std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (const std::string::value_type *)v27, v28);
                if (SHIBYTE(v33) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                return 0;
              }
            }
          }
        }
        if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7))
        {
          if (*(_QWORD *)(v7 + 8))
          {
            if ((*(_BYTE *)(v7 + 33) & 0x20) == 0)
            {
              v9 = (const void *)llvm::Value::getName((llvm::Value *)v7);
              if (v10 == 33 && !memcmp(v9, "agc.illegal_visible_function_call", 0x21uLL))
              {
                std::string::append((std::string *)&v2[*(_QWORD *)(*(_QWORD *)this - 24)], "Error: Encountered unsupported visible function call\n");
                v6 = 1;
              }
            }
          }
        }
        if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7))
          break;
        if (!*(_QWORD *)(v7 + 8))
          break;
        if ((*(_BYTE *)(v7 + 33) & 0x20) != 0)
          break;
        v11 = (const void *)llvm::Value::getName((llvm::Value *)v7);
        if (v12 != 36 || memcmp(v11, "agc.illegal_raytracing_function_call", 0x24uLL))
          break;
        std::string::append((std::string *)&v2[*(_QWORD *)(*(_QWORD *)this - 24)], "Error: Encountered unsupported ray tracing function call\n");
        v5 = *(_QWORD *)(v5 + 8);
        v6 = 1;
        if (v5 == v4)
          return 0;
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
    if ((v6 & 1) != 0)
      return 0;
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v4 = *(_QWORD *)(v3 + 32);
  }
  if (v4 != v3 + 24)
  {
    v14 = v4;
    while (1)
    {
      if (v14 != v4)
      {
        v15 = v14 ? v14 - 56 : 0;
        if (v15 == *((_QWORD *)this + 21))
          break;
      }
      v14 = *(_QWORD *)(v14 + 8);
      if (v14 == v3 + 24)
        return 1;
    }
    llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList();
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD **)(v15 + 64);
    *v17 = v16;
    *(_QWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 64) = 0;
    v18 = *((_QWORD *)this + 21);
    v19 = *(uint64_t **)(v3 + 32);
    llvm::SymbolTableListTraits<llvm::Function>::addNodeToList();
    v20 = *v19;
    *(_QWORD *)(v18 + 56) = *v19;
    *(_QWORD *)(v18 + 64) = v19;
    v18 += 56;
    *(_QWORD *)(v20 + 8) = v18;
    *v19 = v18;
  }
  return 1;
}

void AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  const char *v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  std::string v29;
  _BYTE v30[320];
  uint64_t v31;
  unsigned __int8 v32;
  char v33;

  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (dumpShaderToFile(v4) && a2[8] - a2[12] + a2[10])
  {
    flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)&v29);
    flatbuffers::Parser::Parser((flatbuffers::Parser *)v30, (const flatbuffers::IDLOptions *)&v29);
    flatbuffers::IDLOptions::~IDLOptions((void **)&v29.__r_.__value_.__l.__data_);
    v33 = 1;
    flatbuffers::Parser::Deserialize((flatbuffers::Parser *)v30, AGCCodeTranslatorG10::CompileReplyBinarySchema::data(void)::bfbsData);
    v5 = &v29;
    std::string::basic_string[abi:nn180100]<0>(&v29, "Translator");
    __p[0] = 0;
    __p[1] = 0;
    v28 = 0;
    std::string::insert(&v29, 0, "Target ");
    v6 = v32;
    if ((v32 & 0x80u) != 0)
      v6 = v31;
    if (v6)
      std::operator+<char>();
    flatbuffers::GenerateText();
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v29;
    else
      LOBYTE(v7) = v29.__r_.__value_.__s.__data_[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ Start %s Metadata %s shader %d ------\n", v8, v9, v10, v11, v12, v13, (char)v7);
    if (v28 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v5) = v29.__r_.__value_.__s.__data_[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ End %s Metadata %s shader %d ------\n", v21, v22, v23, v24, v25, v26, (char)v5);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    flatbuffers::Parser::~Parser((flatbuffers::Parser *)v30);
  }
}

llvm::Value *AGCLLVMAirBuiltins::buildAnyOrAll(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  unsigned int v5;
  llvm::Value *v6;
  llvm::IRBuilderBase *v7;
  uint64_t v8;
  llvm::Value **v9;
  llvm::Value *v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  llvm::Value *v15[2];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  v5 = AGCLLVMBuilder::unboxVector(this, a2, v15);
  v6 = v15[0];
  if (v5 >= 2)
  {
    v7 = (AGCLLVMAirBuiltins *)((char *)this + 8);
    v8 = v5 - 1;
    v9 = &v15[1];
    do
    {
      v10 = *v9;
      v14 = 257;
      if (a3)
        v11 = llvm::IRBuilderBase::CreateOr(v7, v6, v10, (const llvm::Twine *)v13);
      else
        v11 = llvm::IRBuilderBase::CreateAnd(v7, v6, v10, (const llvm::Twine *)v13);
      v6 = (llvm::Value *)v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMUserFragmentShader::setupShaderInputs(AGCLLVMUserFragmentShader *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::IRBuilderBase *v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inserted;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  llvm::Value *v20;
  char *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *InsertElement;
  char *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  char *v28;
  llvm::IRBuilderBase *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  llvm::Value *v35;
  char *v36;
  llvm::Value *v37;
  llvm::IRBuilderBase *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  char *v41;
  llvm::IRBuilderBase *v42;
  llvm::Value *v43;
  llvm::GlobalVariable *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t Cast;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Instruction *v72;
  uint64_t String;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  uint64_t v80;
  int v82;
  char *v84;
  llvm::Type *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v90;
  llvm::Type **Framebuffer;
  llvm::Type *v92;
  llvm::Type *v93;
  uint64_t v94;
  uint64_t v95;
  llvm::CmpInst **v96;
  llvm::Value *v97;
  int v98;
  uint64_t Element;
  uint64_t v102;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  llvm::Value *FPTrunc;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  llvm::Value *v115;
  llvm::Type *v116;
  llvm::IRBuilderBase *v117;
  llvm::Value *v118;
  char *v121;
  __int128 *v122;
  uint64_t v123;
  llvm::Value *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  llvm::Type *v128;
  llvm::IRBuilderBase *v129;
  llvm::Value *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  BOOL v137;
  llvm::Value *v138;
  uint64_t v139;
  llvm::Value *v140;
  char *v141;
  llvm::IRBuilderBase *v142;
  llvm::Value *v143;
  __int128 *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  llvm::IRBuilderBase *v148;
  llvm::Value *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  llvm::Value *v155;
  llvm::Type *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  llvm::IRBuilderBase *v160;
  llvm::Value *v161;
  llvm::Value *v162;
  uint64_t Function;
  uint64_t v164;
  uint64_t v165;
  llvm::CallBase *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  llvm::GlobalVariable *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  llvm::Instruction *v176;
  llvm::Value *v177;
  llvm::IRBuilderBase *v178;
  llvm::Value *v179;
  llvm::Value *v180;
  llvm::Value *Mul;
  uint64_t *v182;
  llvm::Type **v183;
  llvm::Value *v184;
  llvm::Type *v185;
  llvm::Value *AlignedLoad;
  char *v187;
  llvm::IRBuilderBase *v188;
  llvm::Value *v189;
  llvm::Value *v190;
  llvm::IRBuilderBase *v191;
  llvm::Value *v192;
  uint64_t Add;
  char *v194;
  uint64_t *v195;
  llvm::Type **v196;
  llvm::Value *v197;
  llvm::Type *v198;
  llvm::Value *v199;
  char *v200;
  llvm::IRBuilderBase *v201;
  llvm::Value *v202;
  std::string *v204;
  const std::string::value_type *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  int v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  __int128 v222;
  uint64_t v223;
  int v224;
  __int128 v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  uint64_t v229;
  int v230;
  __int128 v231;
  uint64_t v232;
  int v233;
  __int128 v234;
  uint64_t v235;
  int v236;
  uint64_t *v237;
  uint64_t v238;
  __int16 v239;
  unsigned int v240[4];
  __int128 v241;
  uint64_t v242;
  void *v243[2];
  _BYTE v244[24];
  void *v245[2];
  __int128 v246;
  uint64_t v247;
  void *v248[2];
  _BYTE v249[280];
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  void *v253[2];
  _BYTE v254[24];
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  void *v258[2];
  _QWORD v259[5];

  v259[3] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 5464;
  v3 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v6 = *(_QWORD *)(v4 + 40);
  if (v6)
    v7 = (llvm::Instruction *)(v6 - 24);
  else
    v7 = 0;
  llvm::IRBuilderBase::SetInsertPoint(v5, v7);
  if (v2[367] || (*v2 & 4) != 0)
  {
    v8 = AGCLLVMUserFragmentShader::setupInterpolation(this, 6, 0, 1u);
    if (v2[367])
    {
      v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v10 = *((_QWORD *)v9 + 50);
      v234 = *(_OWORD *)(v9 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 40));
      v236 = *((_DWORD *)v9 + 34);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 264))(v10, &v234, 1, 0, v8, 0, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5624), v11);
      if (v235)
        llvm::MetadataTracking::untrack();
    }
    if ((*v2 & 4) != 0)
    {
      v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v13 = *((_QWORD *)v12 + 50);
      v231 = *(_OWORD *)(v12 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v12 + 40));
      v233 = *((_DWORD *)v12 + 34);
      v14 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 264))(v13, &v231, 1, *((unsigned int *)this + 1460), v8, 0, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5648), v14);
      if (v232)
        llvm::MetadataTracking::untrack();
      if (*((_DWORD *)this + 1460) == 1 && *((int *)this + 1082) <= 1)
        *((_DWORD *)this + 1082) = 2;
    }
  }
  if (v2[367])
  {
    v15 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (*(_QWORD *)(v15 + 1576))
      strlen(*(const char **)(v15 + 1576));
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v17 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (*(_QWORD *)(v17 + 1584))
      strlen(*(const char **)(v17 + 1584));
    v18 = AGCLLVMBuilder::getOrInsertFunction<>();
    v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v20 = (llvm::Value *)llvm::UndefValue::get();
    v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    LOWORD(v247) = 257;
    v22 = llvm::IRBuilderBase::CreateCall((uint64_t)(v21 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v245);
    LOWORD(v257) = 257;
    v23 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v19 + 40), v20, v22, v23, (const llvm::Twine *)&v255);
    v25 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    LOWORD(v247) = 257;
    v26 = llvm::IRBuilderBase::CreateCall((uint64_t)(v25 + 40), **(_QWORD **)(*(_QWORD *)v18 + 16), v18, 0, 0, (uint64_t)v245);
    v27 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserFragmentShader *, llvm::Value *))(*(_QWORD *)this + 552))(this, v26);
    v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    LOWORD(v247) = 257;
    v29 = (llvm::IRBuilderBase *)(v28 + 40);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v29, InsertElement, v27, v30, (const llvm::Twine *)v245);
    v32 = AGCLLVMUserFragmentShader::setupInterpolation(this, 0, 0, 1u);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5672), v32);
    v33 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v34 = *((_QWORD *)v33 + 50);
    v228 = *(_OWORD *)(v33 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 40));
    v230 = *((_DWORD *)v33 + 34);
    v35 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v34 + 264))(v34, &v228, 1, 0, *((_QWORD *)this + 711), 0, 0);
    if (v229)
      llvm::MetadataTracking::untrack();
    v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v37 = (llvm::Value *)*((_QWORD *)this + 705);
    LOWORD(v247) = 257;
    v38 = (llvm::IRBuilderBase *)(v36 + 40);
    v39 = (llvm::Value *)llvm::ConstantInt::get();
    v40 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v38, v31, v37, v39, (const llvm::Twine *)v245);
    v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    LOWORD(v247) = 257;
    v42 = (llvm::IRBuilderBase *)(v41 + 40);
    v43 = (llvm::Value *)llvm::ConstantInt::get();
    v212 = llvm::IRBuilderBase::CreateInsertElement(v42, v40, v35, v43, (const llvm::Twine *)v245);
  }
  else
  {
    v212 = 0;
  }
  if (v2[368])
  {
    v44 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v245[0] = "agc.front_direction";
    LOWORD(v247) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = *((_QWORD *)v45 + 47);
    v47 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v45 + 32), v44);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v46, v47);
    v48 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v49 = *((_QWORD *)v48 + 50);
    v225 = *(_OWORD *)(v48 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v48 + 40));
    v227 = *((_DWORD *)v48 + 34);
    v211 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::GlobalVariable *))(*(_QWORD *)v49 + 520))(v49, &v225, v44);
    if (v226)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v211 = 0;
  }
  v50 = llvm::PointerType::get();
  if (v2[369] || v2[370] && (*(_BYTE *)(*((_QWORD *)this + 614) + 33) & 0xE) == 0)
  {
    v51 = AGCLLVMUserFragmentShader::setupInterpolation(this, 5, 0, 2u);
    v52 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v53 = *((_QWORD *)v52 + 50);
    v222 = *(_OWORD *)(v52 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v52 + 40));
    v224 = *((_DWORD *)v52 + 34);
    v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    LOWORD(v247) = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v54, 49, v51, v50, (uint64_t)v245);
    v56 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v53 + 264))(v53, &v222, 2, 0, Cast, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5696), v56);
    if (v223)
      llvm::MetadataTracking::untrack();
  }
  if (v2[370] && (*(_BYTE *)(*((_QWORD *)this + 614) + 33) & 0xE) != 0)
  {
    v57 = AGCLLVMUserFragmentShader::setupInterpolation(this, 5, 0, 2u);
    v58 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v59 = *((_QWORD *)v58 + 50);
    v219 = *(_OWORD *)(v58 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v58 + 40));
    v221 = *((_DWORD *)v58 + 34);
    v60 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    LOWORD(v247) = 257;
    v61 = llvm::IRBuilderBase::CreateCast((uint64_t)v60, 49, v57, v50, (uint64_t)v245);
    v62 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 264))(v59, &v219, 2, 1, v61, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5720), v62);
    if (v220)
      llvm::MetadataTracking::untrack();
    if (*((int *)this + 1082) <= 1)
      *((_DWORD *)this + 1082) = 2;
  }
  v63 = v259;
  v255 = 0uLL;
  LODWORD(v256) = 0;
  *((_QWORD *)&v256 + 1) = 0;
  v257 = 0;
  v258[0] = v259;
  v258[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v258, 5uLL, -559038737);
  v250 = 0uLL;
  LODWORD(v251) = 0;
  v252 = 0;
  *((_QWORD *)&v251 + 1) = 0;
  v253[0] = v254;
  v253[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v253, 5uLL, -559038737);
  v64 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v64 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v66 = *((_QWORD *)this + 22);
    v65 = *(_QWORD **)(v64 + 88);
    if ((*(_WORD *)(v66 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v64 = v66;
  }
  else
  {
    v65 = *(_QWORD **)(v64 + 88);
  }
  v67 = *(_QWORD *)(v64 + 88) + 40 * *(_QWORD *)(v64 + 96);
  v68 = (char *)this + 224;
  if (v65 == (_QWORD *)v67)
  {
LABEL_216:
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v164 = Function;
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      v165 = *(_QWORD *)(v164 + 8);
      while (v165)
      {
        v166 = *(llvm::CallBase **)(v165 + 24);
        v165 = *(_QWORD *)(v165 + 8);
        llvm::CallBase::arg_end(v166);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v166);
      }
    }
    v167 = llvm::Module::getFunction();
    if (v167)
    {
      v168 = v167;
      v169 = llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200), (llvm::Type *)(((unint64_t)*(unsigned int *)(*((_QWORD *)this + 614) + 32) >> 7) & 0x1E));
      v170 = 1;
      v171 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v245[0] = "agc.sample_positions";
      LOWORD(v247) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      v172 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v173 = *((_QWORD *)v172 + 47);
      v174 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v172 + 32), v171);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v173, v174);
      v175 = *(_QWORD *)(v168 + 8);
      if (v175)
      {
        v210 = v63;
        do
        {
          v215 = *(_QWORD *)(v175 + 8);
          v176 = *(llvm::Instruction **)(v175 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v176);
          v177 = (llvm::Value *)llvm::UndefValue::get();
          v178 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v179 = (llvm::Value *)*((_QWORD *)v176 - 4 * (*((_DWORD *)v176 + 5) & 0x7FFFFFF));
          v180 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v247) = 257;
          Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v178, v179, v180, (const llvm::Twine *)v245);
          v182 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
          v237 = (uint64_t *)llvm::ConstantInt::get();
          v238 = (uint64_t)Mul;
          v182 += 5;
          LOWORD(v247) = 257;
          v183 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v182, v169, (uint64_t *)v171, &v237, 2, (uint64_t)v245);
          LOWORD(v242) = 257;
          v185 = AGCLLVMBuilder::tryDeducePointeeType(v183, v184);
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v182, v185, (uint64_t)v183, 0, (uint64_t)v240);
          v187 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          LOWORD(v247) = 257;
          v188 = (llvm::IRBuilderBase *)(v187 + 40);
          v189 = (llvm::Value *)llvm::ConstantInt::get();
          v190 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v188, v177, AlignedLoad, v189, (const llvm::Twine *)v245);
          v191 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v170 = 1;
          v192 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v247) = 257;
          Add = llvm::IRBuilderBase::CreateAdd(v191, Mul, v192, (const llvm::Twine *)v245);
          v194 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v237 = (uint64_t *)llvm::ConstantInt::get();
          v238 = Add;
          v195 = (uint64_t *)(v194 + 40);
          LOWORD(v247) = 257;
          v196 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v194 + 40), v169, (uint64_t *)v171, &v237, 2, (uint64_t)v245);
          LOWORD(v242) = 257;
          v198 = AGCLLVMBuilder::tryDeducePointeeType(v196, v197);
          v199 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v195, v198, (uint64_t)v196, 0, (uint64_t)v240);
          v200 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          LOWORD(v247) = 257;
          v201 = (llvm::IRBuilderBase *)(v200 + 40);
          v202 = (llvm::Value *)llvm::ConstantInt::get();
          llvm::IRBuilderBase::CreateInsertElement(v201, v190, v199, v202, (const llvm::Twine *)v245);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v176);
          v175 = v215;
        }
        while (v215);
        v63 = v210;
      }
    }
    else
    {
      v170 = 1;
    }
  }
  else
  {
    v69 = 0;
    v208 = (char *)this + 368;
    v213 = (char *)this + 8;
    v214 = v67;
    while (2)
    {
      if (!v65[1])
        goto LABEL_213;
      v70 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *((unsigned int *)v65 + 8));
      v71 = *(_QWORD *)(v4 + 40);
      v72 = v71 ? (llvm::Instruction *)(v71 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v72, *((_QWORD *)this + 6));
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v65, *((_DWORD *)v65 + 8), v70) & 1) != 0)
        goto LABEL_213;
      String = llvm::MDString::getString(*(llvm::MDString **)(v70 - 8 * *(unsigned int *)(v70 + 8) + 8));
      v75 = (_QWORD *)String;
      v76 = v74;
      switch(v74)
      {
        case 12:
          v77 = *(_QWORD *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
          if (!v77)
            goto LABEL_123;
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12)
            v78 = *(unsigned __int8 *)(**(_QWORD **)(*v65 + 16) + 8);
          else
            v78 = *(_DWORD *)(*v65 + 8);
          v67 = v214;
          v126 = *(_QWORD *)(*(_QWORD *)this - 24);
          v77 = v78 == 0;
          v127 = (char *)this + 288;
          if (v77)
            v127 = (char *)this + 280;
          v128 = *(llvm::Type **)&v127[v126 + 32];
          v129 = (AGCLLVMUserFragmentShader *)((char *)this + v126 + 40);
          LOWORD(v247) = 257;
          v130 = (llvm::Value *)v212;
          goto LABEL_167;
        case 13:
          if (*(_QWORD *)String != 0x706D61732E726961 || *(_QWORD *)(String + 5) != 0x64695F656C706D61)
            goto LABEL_123;
          v80 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
          if (*(_QWORD *)(v80 + 1592))
            strlen(*(const char **)(v80 + 1592));
          v152 = AGCLLVMBuilder::getOrInsertFunction<>();
          v153 = *(_QWORD *)(*(_QWORD *)this - 24);
          v154 = (char *)this + v153 + 40;
          LOWORD(v247) = 257;
          v155 = llvm::IRBuilderBase::CreateCall((uint64_t)&v213[v153 + 32], **(_QWORD **)(*(_QWORD *)v152 + 16), v152, 0, 0, (uint64_t)v245);
          v156 = (llvm::Type *)*v65;
          LOWORD(v242) = 257;
          v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v154, 38, (uint64_t)v155, (uint64_t)v156, (uint64_t)v240);
          if (*((int *)this + 1082) <= 1)
            *((_DWORD *)this + 1082) = 2;
          goto LABEL_208;
        case 15:
          if (*(_QWORD *)String != 0x6E696F702E726961 || *(_QWORD *)(String + 7) != 0x64726F6F635F746ELL)
            goto LABEL_123;
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12)
            v82 = *(unsigned __int8 *)(**(_QWORD **)(*v65 + 16) + 8);
          else
            v82 = *(_DWORD *)(*v65 + 8);
          v67 = v214;
          v131 = *(_QWORD *)(*(_QWORD *)this - 24);
          v77 = v82 == 0;
          v132 = (char *)this + 216;
          if (!v77)
            v132 = v68;
          v128 = *(llvm::Type **)&v132[v131 + 32];
          v129 = (AGCLLVMUserFragmentShader *)((char *)this + v131 + 40);
          v130 = (llvm::Value *)*((_QWORD *)this + 714);
          LOWORD(v247) = 257;
LABEL_167:
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v129, v130, v128, (const llvm::Twine *)v245);
          goto LABEL_168;
        case 16:
          if (*(_QWORD *)String != 0x6E6F72662E726961 || *(_QWORD *)(String + 8) != 0x676E696361665F74)
            goto LABEL_123;
          v84 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v85 = (llvm::Type *)*v65;
          LOWORD(v247) = 257;
          v86 = 39;
          v87 = v211;
          goto LABEL_202;
        case 17:
          if (*(_QWORD *)String != 0x646E65722E726961
            || *(_QWORD *)(String + 8) != 0x65677261745F7265
            || *(_BYTE *)(String + 16) != 116)
          {
            goto LABEL_123;
          }
          v240[0] = 0;
          LODWORD(v245[0]) = 2;
          if (!parseMDInt(0, v70, (unsigned int *)v245, v240))
            goto LABEL_233;
          v90 = v240[0];
          Framebuffer = (llvm::Type **)AGCLLVMFragmentShader::buildReadFramebuffer((AGCLLVMUserFragmentShader *)((char *)this + 4320), v240[0]);
          v92 = (llvm::Type *)*v65;
          v93 = (llvm::Type *)llvm::FixedVectorType::get();
          v96 = AGCLLVMObject::buildConvertColor((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), Framebuffer, v93, *((unsigned __int8 *)this + 72 * v90 + 4378), *((unsigned __int8 *)this + 72 * v90 + 4377), *((unsigned int *)this + 18 * v90 + 1101), v94, v95);
          v97 = (llvm::Value *)v96;
          if ((*((_DWORD *)v92 + 2) & 0xFE) == 0x12)
          {
            v98 = *((_DWORD *)v92 + 8);
            if (v98 == *((_DWORD *)*v96 + 8))
              goto LABEL_194;
            Element = AGCLLVMBuilder::subrangeVector((AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), (llvm::Value *)v96, 0, v98, 1);
          }
          else
          {
            v147 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            LOWORD(v247) = 257;
            v148 = (llvm::IRBuilderBase *)(v147 + 40);
            v149 = (llvm::Value *)llvm::ConstantInt::get();
            Element = llvm::IRBuilderBase::CreateExtractElement(v148, v97, v149, (const llvm::Twine *)v245);
          }
          v97 = (llvm::Value *)Element;
LABEL_194:
          v68 = (char *)this + 224;
          goto LABEL_208;
        case 18:
          if (*(_QWORD *)String != 0x676172662E726961
            || *(_QWORD *)(String + 8) != 0x706E695F746E656DLL
            || *(_WORD *)(String + 16) != 29813)
          {
            goto LABEL_123;
          }
          v206 = v4;
          v2[364] = 1;
          (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD, uint64_t))(*(_QWORD *)this + 504))(v245, this, *v65, v70);
          v102 = LODWORD(v245[1]);
          if (LODWORD(v245[1]) < 2)
          {
            if (!LODWORD(v245[1]))
            {
              v97 = 0;
              v144 = (__int128 *)v245[0];
              v4 = v206;
              goto LABEL_205;
            }
            v209 = v63;
            v207 = v2;
            v97 = 0;
          }
          else
          {
            v209 = v63;
            v207 = v2;
            v97 = (llvm::Value *)llvm::UndefValue::get();
          }
          v133 = 0;
          v134 = 0;
          do
          {
            v135 = *(_OWORD *)((char *)v245[0] + v133 + 16);
            v136 = *(_QWORD *)((char *)v245[0] + v133 + 32);
            *(_OWORD *)v240 = *(_OWORD *)((char *)v245[0] + v133);
            v241 = v135;
            v242 = v136;
            v243[0] = v244;
            v243[1] = (void *)0x500000000;
            if (*(_DWORD *)((char *)v245[0] + v133 + 48))
              llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v243, (uint64_t)v245[0] + v133 + 40);
            v137 = v242 == 0;
            if (v240[1] || *((_QWORD *)this + 711))
            {
              if (v242)
                goto LABEL_177;
            }
            else
            {
              v139 = AGCLLVMUserFragmentShader::setupInterpolation(this, 0, 0, 1u);
              llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5672), v139);
              if (v242)
              {
LABEL_177:
                v138 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, v240);
                goto LABEL_180;
              }
            }
            v138 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserFragmentShader *, unsigned int *))(*(_QWORD *)this + 560))(this, v240);
LABEL_180:
            v140 = v138;
            if (v102 < 2)
            {
              v97 = v138;
            }
            else
            {
              v141 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              v239 = 257;
              v142 = (llvm::IRBuilderBase *)(v141 + 40);
              v143 = (llvm::Value *)llvm::ConstantInt::get();
              v97 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v142, v97, v140, v143, (const llvm::Twine *)&v237);
            }
            if (v243[0] != v244)
              free(v243[0]);
            v69 |= v137;
            ++v134;
            v133 += 80;
          }
          while (v102 != v134);
          v144 = (__int128 *)v245[0];
          if (LODWORD(v245[1]))
          {
            v145 = 5 * LODWORD(v245[1]);
            v2 = v207;
            v4 = v206;
            v63 = v209;
            v68 = (char *)this + 224;
            do
            {
              v146 = (char *)*((_QWORD *)&v144[v145 - 2] - 1);
              if ((char *)&v144[v145 - 1] - 8 != v146)
                free(v146);
              v145 -= 5;
            }
            while (v145 * 16);
            v144 = (__int128 *)v245[0];
          }
          else
          {
            v2 = v207;
            v4 = v206;
            v63 = v209;
            v68 = (char *)this + 224;
          }
LABEL_205:
          if (v144 != &v246)
          {
            v122 = v144;
LABEL_207:
            free(v122);
          }
LABEL_208:
          v67 = v214;
LABEL_209:
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*v65 + 32) == 1)
          {
            v158 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v159 = llvm::UndefValue::get();
            LOWORD(v247) = 257;
            v160 = (llvm::IRBuilderBase *)(v158 + 40);
            v68 = (char *)this + 224;
            v161 = (llvm::Value *)llvm::ConstantInt::get();
            v162 = (llvm::Value *)v159;
            v67 = v214;
            llvm::IRBuilderBase::CreateInsertElement(v160, v162, v97, v161, (const llvm::Twine *)v245);
          }
          llvm::Value::replaceAllUsesWith();
LABEL_213:
          v65 += 5;
          if (v65 == (_QWORD *)v67)
          {
            if ((v69 & 1) != 0)
              (*(void (**)(AGCLLVMUserFragmentShader *))(*(_QWORD *)this + 568))(this);
            goto LABEL_216;
          }
          continue;
        case 24:
          if (*(_QWORD *)String != 0x776569762E726961
            || *(_QWORD *)(String + 8) != 0x7272615F74726F70
            || *(_QWORD *)(String + 16) != 0x7865646E695F7961)
          {
            goto LABEL_123;
          }
          v2[394] = 1;
          (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD, const char *, uint64_t))(*(_QWORD *)this + 512))(v245, this, *v65, "air.viewport_array_index", 24);
          v97 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)v245);
          llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5744), (uint64_t)v97);
          goto LABEL_151;
        case 29:
          if (*(_QWORD *)String != 0x646E65722E726961
            || *(_QWORD *)(String + 8) != 0x65677261745F7265
            || *(_QWORD *)(String + 16) != 0x5F79617272615F74
            || *(_QWORD *)(String + 21) != 0x7865646E695F7961)
          {
            goto LABEL_123;
          }
          v2[395] = 1;
          v121 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          if (*(_BYTE *)(*((_QWORD *)v121 + 50) + 1747))
          {
            (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD, const char *, uint64_t))(*(_QWORD *)this + 512))(v245, this, *v65, "air.render_target_array_index", 29);
            v97 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)v245);
LABEL_151:
            v122 = (__int128 *)v248[0];
            if (v248[0] != v249)
              goto LABEL_207;
          }
          else
          {
            v157 = v121 + 40;
            v87 = llvm::ConstantInt::get();
            v85 = (llvm::Type *)*v65;
            LOWORD(v247) = 257;
            v84 = v157;
            v86 = 38;
LABEL_202:
            v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v84, v86, v87, (uint64_t)v85, (uint64_t)v245);
          }
          goto LABEL_208;
        default:
LABEL_123:
          if (AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)String, v74))
          {
            v108 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
            if (*(_QWORD *)(v108 + 1600))
              strlen(*(const char **)(v108 + 1600));
            v112 = AGCLLVMBuilder::getOrInsertFunction<>();
            v113 = *(_QWORD *)(*(_QWORD *)this - 24);
            v114 = (char *)this + v113 + 40;
            LOWORD(v247) = 257;
            v115 = llvm::IRBuilderBase::CreateCall((uint64_t)&v213[v113 + 32], **(_QWORD **)(*(_QWORD *)v112 + 16), v112, 0, 0, (uint64_t)v245);
            v116 = (llvm::Type *)*v65;
            LOWORD(v242) = 257;
            v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v114, 38, (uint64_t)v115, (uint64_t)v116, (uint64_t)v240);
            if (AGCLLVMUserFragmentShader::getEffectiveFragmentRate(*((_DWORD *)this + 1468), (uint64_t)v75, v76))
            {
              v117 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
              v118 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v247) = 257;
              v97 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v117, v97, v118, (const llvm::Twine *)v245);
            }
            v67 = v214;
            v68 = (char *)this + 224;
            v2[366] = 1;
            goto LABEL_209;
          }
          if (v76 == 21)
          {
            if (*v75 != 0x797261622E726961
              || v75[1] != 0x5F636972746E6563
              || *(_QWORD *)((char *)v75 + 13) != 0x64726F6F635F6369)
            {
              goto LABEL_148;
            }
            v123 = *(_QWORD *)&v208[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 856))(v123) & 1) != 0)
            {
              v2[399] = 1;
              if (!v252)
              {
                (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD, uint64_t))(*(_QWORD *)this + 528))(v245, this, *v65, v70);
                v250 = *(_OWORD *)v245;
                v251 = v246;
                v252 = v247;
                llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v253, (uint64_t)v248);
                if (v248[0] != v249)
                  free(v248[0]);
              }
              v124 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&v250);
              if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12)
                v125 = *(unsigned int *)(*v65 + 32);
              else
                v125 = 1;
              v150 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              v151 = *((_QWORD *)v150 + 50);
              v216 = *(_OWORD *)(v150 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v150 + 40));
              v218 = *((_DWORD *)v150 + 34);
              v97 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)v151 + 888))(v151, &v216, v124, v125);
              if (v217)
                llvm::MetadataTracking::untrack();
              v67 = v214;
              v68 = (char *)this + 224;
              goto LABEL_209;
            }
            v204 = (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8);
            v205 = "barycentric_coords not supported for this device";
          }
          else
          {
            if (v76 != 16
              || (*v75 == 0x6D6972702E726961 ? (v109 = v75[1] == 0x64695F6576697469) : (v109 = 0), !v109))
            {
LABEL_148:
              v97 = 0;
              goto LABEL_208;
            }
            v110 = *(_QWORD *)&v208[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 848))(v110) & 1) != 0)
            {
              v67 = v214;
              if (!v257)
              {
                (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD))(*(_QWORD *)this
                                                                                                 + 520))(v245, this, *v65);
                v255 = *(_OWORD *)v245;
                v256 = v246;
                v257 = v247;
                llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v258, (uint64_t)v248);
                if (v248[0] != v249)
                  free(v248[0]);
              }
              FPTrunc = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&v255);
LABEL_168:
              v97 = FPTrunc;
              goto LABEL_209;
            }
            v204 = (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8);
            v205 = "primitive_id not supported for this device";
          }
          std::string::append(v204, v205);
LABEL_233:
          v170 = 0;
          break;
      }
      break;
    }
  }
  if (v253[0] != v254)
    free(v253[0]);
  if (v258[0] != v63)
    free(v258[0]);
  return v170;
}

uint64_t AGCLLVMUserShader::replaceInputArgument(uint64_t a1, llvm::Type **a2, unsigned int a3, uint64_t a4)
{
  const char *String;
  uint64_t v9;
  llvm::Type *v12;
  llvm::Type **GlobalBufferBinding;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Type *v16;
  BOOL v17;
  BOOL v18;
  const char *v20;
  size_t v21;
  BOOL v23;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  llvm::GlobalVariable *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Type *v36;
  uint64_t AlignedLoad;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v47;
  size_t v48;
  unint64_t *v49;
  size_t v50;
  BOOL v52;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  llvm::MDString *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  llvm::Type *v66;
  llvm::Value *v67;
  llvm::Type **v68;
  uint64_t v69;
  llvm::Type *v70;
  llvm::Type *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  char v79;
  char v80;
  char v81;
  char v82;
  void *__p[2];
  uint64_t v84;
  _QWORD v85[4];
  __int16 v86;
  uint64_t v87;
  const char *v88;
  char v89[4];
  _BYTE v90[12];
  uint64_t v91;
  uint64_t v92;
  char v93;

  if (!a4)
  {
    String = "air.byval";
LABEL_11:
    if (*(_QWORD *)String == 0x617679622E726961 && String[8] == 108)
    {
      v12 = *a2;
      v88 = "agc.byval.";
      *(_QWORD *)&v90[4] = a3;
      LOWORD(v92) = 2051;
      GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v12, (const llvm::Twine *)&v88, a3, 0, 5, 0);
      v14 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v92) = 257;
      v16 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v15);
      llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v16, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v88);
LABEL_147:
      llvm::Value::replaceAllUsesWith();
      return 1;
    }
    goto LABEL_91;
  }
  String = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  if (v9 <= 25)
  {
    switch(v9)
    {
      case 9:
        goto LABEL_11;
      case 10:
        if (*(_QWORD *)String != 0x666675622E726961 || *((_WORD *)String + 4) != 29285)
          goto LABEL_91;
        goto LABEL_133;
      case 11:
        if (*(_QWORD *)String == 0x747865742E726961 && *(_QWORD *)(String + 3) == 0x657275747865742ELL)
        {
          if (a2[1])
          {
            BYTE4(v87) = 0;
            LOBYTE(v87) = 0;
            LODWORD(v85[0]) = 0;
            LODWORD(__p[0]) = 0;
            LODWORD(v88) = 0;
            *(_WORD *)v89 = 0;
            *(_QWORD *)v90 = 0xFFFFFFFFLL;
            v91 = 0;
            v92 = 0;
            v93 = 0;
            if (!parseMDTexture(a4, v85, __p, v89, (BOOL *)&v87 + 4, (BOOL *)&v89[1], &v87, (int *)v90))
              goto LABEL_91;
            v72 = *a2;
            v73 = BYTE4(v87);
            if (BYTE4(v87))
            {
              v74 = **((_QWORD **)v72 + 2);
              if (*(_BYTE *)(v74 + 8) == 16)
                v74 = **(_QWORD **)(v74 + 16);
              v72 = **(llvm::Type ***)(v74 + 16);
            }
            v75 = *((_DWORD *)v72 + 2);
            if ((v75 & 0x1FF) == 0x110)
            {
              v72 = (llvm::Type *)**((_QWORD **)v72 + 2);
              LOBYTE(v75) = *((_BYTE *)v72 + 8);
            }
            if (v75 == 15)
            {
              v76 = **((_QWORD **)v72 + 2);
              if ((*(_DWORD *)(v76 + 8) & 0x1FF) == 0x110)
                v72 = **(llvm::Type ***)(v76 + 16);
            }
            v92 = **((_QWORD **)v72 + 2);
            v77 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, LODWORD(v85[0]));
            v78 = __p[0];
            *(_DWORD *)(a1 + 3316) += LODWORD(__p[0]);
            *(_BYTE *)(a1 + 3560) |= v87;
            LODWORD(v88) = v77 & 0xFFFFF;
            HIDWORD(v88) = v78;
            std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>((uint64_t *)(a1 + 952), v77 & 0xFFFFF, &v88);
            if ((v89[0] & 2) != 0)
            {
              if (v73)
              {
                v80 = v78 + v77;
                if (v78 + v77 >= 0x40)
                  v80 = 64;
                v81 = v80 - v77;
                if (v77 >= 0x40)
                  v81 = 0;
                *(_QWORD *)(a1 + 3720) |= ~(-1 << v81) << v77;
                v82 = v77 <= 0x40 ? 64 : v77;
                *(_QWORD *)(a1 + 3728) |= ~(-1 << (v78 - v81)) << v82;
                v79 = 1;
              }
              else
              {
                v79 = 0;
                if (v77 > 0x3F)
                  *(_QWORD *)(a1 + 3728) |= 1 << v77;
                else
                  *(_QWORD *)(a1 + 3720) |= 1 << v77;
              }
            }
            else
            {
              v79 = v73 != 0;
            }
            if ((AGCLLVMUserObject::replaceTextureOrSamplerArgument((AGCLLVMUserObject *)a1, (llvm::Value *)a2, v77, v78, v79, (unsigned __int8 **)(a1 + 2896)) & 1) == 0)goto LABEL_91;
          }
        }
        else
        {
          v23 = *(_QWORD *)String == 0x706D61732E726961 && *(_QWORD *)(String + 3) == 0x72656C706D61732ELL;
          if (!v23 || (AGCLLVMUserObject::replaceSamplerInput<llvm::Argument>(a1, (llvm::Value *)a2, a4) & 1) == 0)
            goto LABEL_91;
        }
        break;
      case 17:
        if (*(_QWORD *)String != 0x666675622E726961
          || *((_QWORD *)String + 1) != 0x64697274735F7265
          || String[16] != 101)
        {
          goto LABEL_91;
        }
        v26 = 0;
        LODWORD(v85[0]) = 0;
        v27 = *(_DWORD *)(a4 + 8);
        LODWORD(v88) = 2;
        if (v27 >= 3)
        {
          do
          {
            if ((parseMDLocationIndex(a4, &v88, v85, __p) & 1) != 0)
              break;
            LODWORD(v88) = (_DWORD)v88 + 1;
          }
          while (v88 < v27);
          v26 = v85[0];
        }
        v28 = 1;
        v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v88 = "agc.dynamic_stride.";
        *(_QWORD *)&v90[4] = v26;
        LOWORD(v92) = 2051;
        v30 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v30 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v88, (const llvm::Triple *)(a1 + 184));
        v31 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v32 = *(_QWORD *)(v31 + 376);
        v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v29);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
        v34 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        LOWORD(v92) = 257;
        v36 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v29, v35);
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v34 + 40), v36, (uint64_t)v29, 0, (uint64_t)&v88);
        v38 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v39 = *(_QWORD *)(v38 + 240);
        LOWORD(v92) = 257;
        llvm::IRBuilderBase::CreateCast(v38 + 40, 39, AlignedLoad, v39, (uint64_t)&v88);
        llvm::Value::replaceAllUsesWith();
        return v28;
      case 19:
        if (*(_QWORD *)String != 0x69646E692E726961
          || *((_QWORD *)String + 1) != 0x6675625F74636572
          || *(_QWORD *)(String + 11) != 0x7265666675625F74)
        {
          goto LABEL_91;
        }
        goto LABEL_133;
      case 22:
        if (*(_QWORD *)String != 0x63616E692E726961
          || *((_QWORD *)String + 1) != 0x656C626973736563
          || *(_QWORD *)(String + 14) != 0x7475706E695F656CLL)
        {
          goto LABEL_91;
        }
        llvm::UndefValue::get();
        goto LABEL_147;
      default:
        goto LABEL_91;
    }
    return 1;
  }
  if (v9 > 34)
  {
    if (v9 == 35)
    {
      v20 = "air.instance_acceleration_structure";
      v21 = 35;
    }
    else
    {
      if (v9 != 36)
        goto LABEL_91;
      v20 = "air.primitive_acceleration_structure";
      v21 = 36;
    }
    if (!memcmp(String, v20, v21))
      goto LABEL_133;
LABEL_91:
    v47 = (unint64_t *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
    v49 = v47;
    v50 = v48;
    if (v48 == 11)
    {
      if (*v47 != 0x66696E752E726961 || *(unint64_t *)((char *)v47 + 3) != 0x6D726F66696E752ELL)
        return 0;
    }
    else
    {
      if (v48 != 19)
        return 0;
      v52 = *v47 == 0x616665642E726961 && v47[1] == 0x66696E755F746C75;
      if (!v52 || *(unint64_t *)((char *)v47 + 11) != 0x6D726F66696E755FLL)
        return 0;
    }
    v87 = 0;
    v54 = *(_DWORD *)(a4 + 8);
    if (v54 >= 3)
    {
      v55 = 2;
      do
      {
        v56 = v55 + 1;
        v57 = *(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v55);
        if (v57 && !*(_BYTE *)v57)
        {
          v58 = (_QWORD *)llvm::MDString::getString(v57);
          if (v59 == 11)
          {
            if (*v58 != 0x646E69622E726961 || *(_QWORD *)((char *)v58 + 3) != 0x676E69646E69622ELL)
              goto LABEL_111;
            LODWORD(v88) = v55 + 1;
            if (!parseMDInt(0, a4, (unsigned int *)&v88, &v87))
              return 0;
          }
          else
          {
            if (v59 != 15)
              goto LABEL_111;
            if (*v58 != 0x666675622E726961 || *(_QWORD *)((char *)v58 + 7) != 0x657A69735F726566)
              goto LABEL_111;
            LODWORD(v88) = v55 + 1;
            if ((parseMDInt(0, a4, (unsigned int *)&v88, (_DWORD *)&v87 + 1) & 1) == 0)
              return 0;
          }
          v56 = v55 + 2;
        }
LABEL_111:
        v55 = v56;
      }
      while (v56 < v54);
    }
    if (v50 == 11)
    {
      v62 = 0x6169722E756E6966;
      v63 = bswap64(*v49);
      if (v63 == 0x6169722E756E6966
        && (v62 = 0x2E756E69666F726DLL,
            v63 = bswap64(*(unint64_t *)((char *)v49 + 3)),
            v63 == 0x2E756E69666F726DLL))
      {
        v64 = 0;
      }
      else if (v63 < v62)
      {
        v64 = -1;
      }
      else
      {
        v64 = 1;
      }
      if (v64)
        v65 = 4;
      else
        v65 = 5;
    }
    else
    {
      v65 = 4;
    }
    v66 = *a2;
    v85[0] = "agc.buffer_pointers";
    v85[2] = ".";
    v86 = 771;
    if (v49)
    {
      std::string::basic_string[abi:nn180100](__p, v49, v50);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v84 = 0;
    }
    v88 = (const char *)v85;
    *(_QWORD *)&v90[4] = __p;
    LOWORD(v92) = 1026;
    v68 = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v66, (const llvm::Twine *)&v88, v87, SHIDWORD(v87), v65, 0);
    if (SHIBYTE(v84) < 0)
      operator delete(__p[0]);
    v69 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    LOWORD(v92) = 257;
    v70 = AGCLLVMBuilder::tryDeducePointeeType(v68, v67);
    if (!llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v69 + 40), v70, (uint64_t)v68, 0, (uint64_t)&v88))
      return 0;
    goto LABEL_147;
  }
  if (v9 == 26)
  {
    if (*(_QWORD *)String != 0x697369762E726961
      || *((_QWORD *)String + 1) != 0x636E75665F656C62
      || *((_QWORD *)String + 2) != 0x6261745F6E6F6974
      || *((_WORD *)String + 12) != 25964)
    {
      goto LABEL_91;
    }
  }
  else
  {
    if (v9 != 31)
      goto LABEL_91;
    v17 = *(_QWORD *)String == 0x65746E692E726961 && *((_QWORD *)String + 1) == 0x6E6F697463657372;
    v18 = v17 && *((_QWORD *)String + 2) == 0x6F6974636E75665FLL;
    if (!v18 || *(_QWORD *)(String + 23) != 0x656C6261745F6E6FLL)
      goto LABEL_91;
  }
LABEL_133:
  AGCLLVMUserObject::replaceBufferInputArgument(a1, (uint64_t *)a2, a3, a4, 0xFFFFFFFF);
  return 1;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::assign(uint64_t result, unint64_t a2, int a3)
{
  _DWORD **v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;

  v5 = (_DWORD **)result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v9 = *(_DWORD **)result;
    v8 = (_DWORD *)(result + 8);
    v10 = *(unsigned int *)(result + 8);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *(unsigned int *)(result + 8);
    if (v11)
    {
      v12 = *(_DWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
      v10 = *v8;
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t AGCLLVMUserFragmentShader::setupInterpolation(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  llvm::ArrayType *v5;
  uint64_t v6;

  v5 = *(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
  v6 = llvm::User::operator new((llvm::User *)0x58);
  if (a4 >= 2)
    llvm::ArrayType::get(v5, (llvm::Type *)a4);
  llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v6 + 80) |= 1u;
  llvm::GlobalObject::setAlignment();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return v6;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildInterpolate(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6, uint64_t a7)
{
  int v14;
  unsigned int v15;
  uint64_t v16;
  const char **v17;
  const char *v18;
  uint64_t inserted;
  llvm::Value *v20;
  uint64_t v21;
  llvm::Value *v22;
  int8x8_t v23;
  uint8x8_t v24;
  _BYTE v26[32];
  __int16 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[32];
  void *v34[2];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x1E0C80C00];
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
    llvm::MetadataTracking::track();
  v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v28);
  if (v29)
    llvm::MetadataTracking::untrack();
  v14 = a3;
  v15 = a3 - 1;
  if (v15)
    llvm::FixedVectorType::get();
  v16 = llvm::PointerType::get();
  v34[0] = v35;
  v34[1] = (void *)0x400000000;
  v31 = v33;
  v32 = 0x400000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, a5);
  if (a7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, v16);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, a7);
    v17 = (const char **)(a1 + 32 * a4 + 8 * v15 + 2104);
  }
  else
  {
    v17 = (const char **)(a1 + 32 * a4 + 8 * v15 + 2008);
  }
  v18 = *v17;
  if (a4 == 1)
  {
    if (!a6)
    {
      if (*(_QWORD *)(a1 + 1592))
        strlen(*(const char **)(a1 + 1592));
      inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      v27 = 257;
      a6 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v26);
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, *(_QWORD *)(a1 + 192));
    v20 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, a6, *(llvm::Type **)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, (uint64_t)v20);
  }
  if (v18)
    strlen(v18);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v27 = 257;
  v22 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v21 + 24), v21, (uint64_t)v31, v32, (uint64_t)v26);
  v23.i32[0] = v14;
  v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.i32[0] != 1)
    v22 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v22, 0, v14, 1);
  if (v31 != v33)
    free(v31);
  if (v34[0] != v35)
    free(v34[0]);
  return v22;
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<>()
{
  uint64_t v0;

  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  return v0;
}

void AGCLLVMUserObject::replaceBufferInputArgument(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  llvm::ArrayType *v11;
  unsigned int v12;
  llvm::Type *v13;
  unsigned int v14;
  uint64_t *GlobalBufferBinding;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  llvm::Value *v23;
  llvm::Type **v24;
  uint64_t v25;
  llvm::Type *v26;
  uint64_t v27;
  llvm::Type **GEP;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Instruction *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  llvm::Type *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  AGCArgumentBuffer::Struct *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Instruction *Cast;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  BOOL v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  BOOL v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm::Use **v111;
  uint64_t v112;
  void **v113;
  void **v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t **v123;
  const llvm::GetElementPtrInst *v124;
  AGCArgumentBuffer *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  unsigned __int8 v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t **v135;
  uint64_t **v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  char v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  llvm::Instruction *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value *v150;
  llvm::Value *v151;
  llvm::NamedMDNode *inserted;
  uint64_t Operand;
  uint64_t Impl;
  unsigned int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  char v165;
  unint64_t v166;
  unsigned __int8 v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  char v172;
  llvm::Use *v173[3];
  llvm::Use **v174;
  uint64_t v175;
  uint64_t v176;
  const llvm::GetElementPtrInst *v177;
  __int16 v178;
  void *v179[2];
  uint64_t v180;
  int v181;
  __int16 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v170 = 1;
  v171 = a3;
  v169 = 0;
  v168 = 0;
  v167 = 0;
  v166 = 0;
  v165 = 0;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*a2 + 16) + 8);
  v164 = 0;
  parseMDBuffer(a4, v8 >> 8, &v171, &v170, &v169, (_DWORD *)&v168 + 1, (uint64_t *)&v166, &v164, &v167, (int *)&v168, &v165);
  v9 = v167;
  *(_BYTE *)(a1 + 3560) |= v167;
  if (a5 != -1)
    v171 = a5;
  if (!v165)
  {
    v11 = **(llvm::ArrayType ***)(*a2 + 16);
    if (*((_BYTE *)v11 + 8) == 15)
    {
      v12 = v170;
      v13 = (llvm::Type *)llvm::ArrayType::get(v11, (llvm::Type *)v170);
      v14 = v171;
      *(_QWORD *)&v183 = "agc.buffer_pointers_array.";
      *(_QWORD *)&v184 = v171;
      LOWORD(v185) = 2051;
      v161 = (uint64_t)v13;
      GlobalBufferBinding = (uint64_t *)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v13, (const llvm::Twine *)&v183, v171 & 0xFFFFF, 0, 5, 0);
      v16 = *(_QWORD *)(a1 + 944);
      if (!v16)
      {
        v16 = operator new();
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)v16 = v16 + 8;
        *(_QWORD *)(a1 + 944) = v16;
      }
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v16, v14, &v171)+ 8) = v12;
      v17 = a2[1];
      if (v17)
      {
        v18 = a1 + 8;
        do
        {
          v19 = *(_QWORD *)(v17 + 24);
          v17 = *(_QWORD *)(v17 + 8);
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Instruction *)v19);
          if (*(_BYTE *)(v19 + 16) == 60)
          {
            v21 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v182 = 257;
            llvm::Type::getInt32Ty(*(llvm::Type **)(v21 + 104), v20);
            v175 = llvm::ConstantInt::get();
            llvm::Type::getInt32Ty(*(llvm::Type **)(v21 + 104), v22);
            v176 = llvm::ConstantInt::get();
            v24 = (llvm::Type **)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)(v21 + 112) + 48))(*(_QWORD *)(v21 + 112), 0, GlobalBufferBinding, &v175, 2, 0);
            if (!v24)
            {
              LOWORD(v185) = 257;
              v24 = (llvm::Type **)llvm::GetElementPtrInst::Create(0, GlobalBufferBinding, (uint64_t **)&v175, 2);
              llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)(v21 + 40), (uint64_t)v24, (uint64_t)v179);
            }
            v25 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v18;
            LOWORD(v185) = 257;
            v26 = AGCLLVMBuilder::tryDeducePointeeType(v24, v23);
            llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v25 + 32), v26, (uint64_t)v24, 0, (uint64_t)&v183);
            llvm::Value::replaceAllUsesWith();
          }
          else
          {
            v179[0] = 0;
            v179[1] = 0;
            v179[0] = (void *)llvm::ConstantInt::get();
            v179[1] = *(void **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
            v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v18 + 32;
            LOWORD(v185) = 257;
            GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v27, v161, GlobalBufferBinding, (uint64_t **)v179, 2, (uint64_t)&v183);
            v29 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v18;
            LOWORD(v185) = 257;
            v31 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v30);
            llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v29 + 32), v31, (uint64_t)GEP, 0, (uint64_t)&v183);
            v32 = *(_QWORD *)(v19 + 8);
            if (v32)
            {
              do
              {
                v33 = *(_QWORD *)(v32 + 8);
                v34 = *(llvm::Instruction **)(v32 + 24);
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent(v34);
                v32 = v33;
              }
              while (v33);
            }
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v19);
        }
        while (v17);
      }
    }
    else
    {
      v143 = v171;
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 288))(a1, a2, v171, 0xFFFFFFFFLL);
      v144 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
      if (v144)
        v145 = v144 - 24;
      else
        v145 = 0;
      v146 = *(_QWORD *)(v145 + 40);
      if (v146)
        v147 = (llvm::Instruction *)(v146 - 24);
      else
        v147 = 0;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v147);
      if (v9)
        v148 = v168;
      else
        v148 = 0xFFFFFFFFLL;
      v149 = AGCLLVMUserObject::setupBufferArgumentData((AGCLLVMUserObject *)a1, *a2, v143, 0xFFFFFFFF, v169, v164, v148);
      v151 = v150;
      llvm::Value::replaceAllUsesWith();
      if (llvm::Argument::hasAttribute())
      {
        inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
        if (!llvm::NamedMDNode::getNumOperands(inserted))
        {
          *(_QWORD *)&v183 = llvm::MDString::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
        }
        llvm::Module::getOrInsertNamedMetadata();
        Operand = llvm::NamedMDNode::getOperand(inserted);
        *(_QWORD *)&v183 = llvm::ValueAsMetadata::get();
        *((_QWORD *)&v183 + 1) = Operand;
        llvm::Value::getName(v151);
        *(_QWORD *)&v184 = llvm::MDString::get();
        Impl = llvm::MDTuple::getImpl();
        llvm::MDNode::replaceOperandWith();
        llvm::NamedMDNode::addOperand();
        v155 = *(_DWORD *)(a1 + 3880);
        if (v155 >= *(_DWORD *)(a1 + 3884))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v155 = *(_DWORD *)(a1 + 3880);
        }
        v156 = (uint64_t *)(*(_QWORD *)(a1 + 3872) + 16 * v155);
        *v156 = v149;
        v156[1] = Impl;
        ++*(_DWORD *)(a1 + 3880);
      }
    }
    return;
  }
  if (HIDWORD(v168))
    v10 = v169 / HIDWORD(v168);
  else
    v10 = 0;
  v35 = v171;
  v162 = v164;
  if (v9)
    v36 = v168;
  else
    v36 = 0xFFFFFFFFLL;
  v37 = v166;
  v38 = **(llvm::Type ***)(*a2 + 16);
  v39 = ((*(_QWORD *)(a1 + 3304) >> v171) & 1) == 0;
  v40 = operator new();
  v41 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v43 = *(_QWORD *)(v41 + 392);
  v42 = *(AGCArgumentBuffer::Struct **)(v41 + 400);
  *(_BYTE *)v40 = v39;
  *(_WORD *)(v40 + 1) = 0;
  v159 = a2;
  *(_QWORD *)(v40 + 8) = a2;
  *(_QWORD *)(v40 + 16) = v38;
  AGCArgumentBuffer::AGCArgumentBuffer(v40 + 24, v42, v43, a1 + 232, v37, (uint64_t)v38, v35);
  v157 = v40;
  *(_QWORD *)&v183 = v40;
  v44 = (uint64_t *)llvm::SmallVectorTemplateCommon<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>>(a1 + 3184, (unint64_t)&v183);
  v45 = *(_QWORD *)(a1 + 3184);
  v46 = *(unsigned int *)(a1 + 3192);
  v47 = *v44;
  *v44 = 0;
  *(_QWORD *)(v45 + 8 * v46) = v47;
  *(_DWORD *)(a1 + 3192) = v46 + 1;
  v48 = v183;
  *(_QWORD *)&v183 = 0;
  if (v48)
  {
    std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table(v48 + 72);
    MEMORY[0x1CAA2D68C](v48, 0x10A0C409CD0B977);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1755))
    v38 = *(llvm::Type **)(v40 + 64);
  *(_QWORD *)(v40 + 16) = v38;
  *(_QWORD *)&v183 = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 232), v38);
  *((_QWORD *)&v183 + 1) = v49;
  v50 = v10 * llvm::TypeSize::operator unsigned long long();
  v51 = llvm::PointerType::get();
  *(_QWORD *)(v40 + 112) = AGCLLVMUserObject::setupBufferArgumentData((AGCLLVMUserObject *)a1, v51, v35, 0xFFFFFFFF, v50, v162, v36);
  *(_QWORD *)(v40 + 120) = v52;
  v53 = (uint64_t)v159;
  v54 = v159[1];
  v55 = **(_QWORD **)(*v159 + 16);
  v184 = 0u;
  v185 = 0u;
  v183 = 0u;
  if (v54)
  {
    v160 = a1 + 8;
    do
    {
      v56 = *(unsigned __int8 **)(v54 + 24);
      v54 = *(_QWORD *)(v54 + 8);
      if (*(_BYTE *)(*(_QWORD *)v56 + 8) == 15)
      {
        v57 = v56[16];
        if (v57 == 77)
        {
          v58 = 0;
          if (v55)
          {
            v59 = **(_QWORD **)(*(_QWORD *)v56 + 16);
            if (v55 != v59)
            {
              v58 = 0;
              v60 = v55;
              do
              {
                v60 = **(_QWORD **)(v60 + 16);
                if ((*(_DWORD *)(v60 + 8) & 0xFE) == 0x10)
                  v61 = v60;
                else
                  v61 = 0;
                ++v58;
                if (v61)
                  v62 = v61 == v59;
                else
                  v62 = 1;
              }
              while (!v62);
            }
          }
          v63 = (v58 + 1);
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Instruction *)v56);
          v64 = llvm::ConstantInt::get();
          v179[0] = &v180;
          v179[1] = (void *)0x400000000;
          llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v179, v63, v64);
          v65 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v160 + 32;
          v178 = 257;
          v66 = llvm::IRBuilderBase::CreateGEP(v65, v55, v159, (uint64_t **)v179[0], LODWORD(v179[1]), (uint64_t)&v175);
          v67 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
          v68 = *(_QWORD *)v56;
          v178 = 257;
          Cast = (llvm::Instruction *)llvm::IRBuilderBase::CreateCast(v67, 49, v66, v68, (uint64_t)&v175);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v56);
          if (Cast && *((_BYTE *)Cast + 16) == 77)
          {
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), Cast);
            AGCLLVMUserObject::replacePointerLoadsFromBitcast((_QWORD *)a1, Cast);
          }
          if (v179[0] != &v180)
            free(v179[0]);
        }
        else
        {
          if (v57 == 62)
            v70 = v56;
          else
            v70 = 0;
          v179[0] = v70;
          if (v70)
            std::deque<llvm::MDNode const*>::push_back(&v183, v179);
        }
      }
    }
    while (v54);
    v71 = *((_QWORD *)&v185 + 1);
    if (*((_QWORD *)&v185 + 1))
    {
      v158 = v55;
      while (1)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v183 + 1) + (((unint64_t)v185 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v185 & 0x1FF));
        *(_QWORD *)&v185 = v185 + 1;
        *((_QWORD *)&v185 + 1) = v71 - 1;
        if ((unint64_t)v185 >= 0x400)
        {
          operator delete(**((void ***)&v183 + 1));
          *((_QWORD *)&v183 + 1) += 8;
          *(_QWORD *)&v185 = v185 - 512;
        }
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          v163 = v72 + 32;
          do
          {
            v74 = *(_QWORD *)(v73 + 24);
            v73 = *(_QWORD *)(v73 + 8);
            v75 = *(unsigned __int8 *)(v74 + 16);
            if (v74 && v75 == 62)
            {
              v76 = *(unsigned __int8 **)(v74 - 32 * (*(_DWORD *)(v74 + 20) & 0x7FFFFFF) + 32);
              if (v76)
                v77 = v76[16] > 0x14u;
              else
                v77 = 1;
              if (!v77)
              {
                if (llvm::Constant::isZeroValue((llvm::Constant *)v76))
                {
                  v78 = (char *)(v163 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF));
                  v179[0] = &v180;
                  v179[1] = (void *)0x400000000;
                  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)v179, v78, (char *)v72);
                  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)v179, (char *)(v74 - 32 * (*(_DWORD *)(v74 + 20) & 0x7FFFFFF) + 64), (char *)v74);
                  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Instruction *)v74);
                  v79 = *(uint64_t **)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF));
                  v80 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v160 + 32;
                  v178 = 257;
                  v175 = llvm::IRBuilderBase::CreateGEP(v80, v55, v79, (uint64_t **)v179[0], LODWORD(v179[1]), (uint64_t)&v175);
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent((llvm::Instruction *)v74);
                  std::deque<llvm::MDNode const*>::push_back(&v183, &v175);
                  if (v179[0] != &v180)
                    free(v179[0]);
                }
              }
            }
            else if (v74 && v75 == 77)
            {
              v81 = **(_QWORD **)(**(_QWORD **)(v74 - 32) + 16);
              if ((*(_DWORD *)(v81 + 8) & 0xFE) != 0x10)
                goto LABEL_111;
              v82 = **(_QWORD **)(*(_QWORD *)v74 + 16);
              if (v81 == v82)
                goto LABEL_111;
              LODWORD(v83) = 0;
              v84 = 1;
              do
              {
                v85 = v84;
                v81 = **(_QWORD **)(v81 + 16);
                if ((*(_DWORD *)(v81 + 8) & 0xFE) == 0x10)
                  v86 = v81;
                else
                  v86 = 0;
                v83 = (v83 + 1);
                ++v84;
                if (v86)
                  v87 = v86 == v82;
                else
                  v87 = 1;
              }
              while (!v87);
              if (!(_DWORD)v83)
                goto LABEL_111;
              v88 = (char *)(v163 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF));
              v179[0] = &v180;
              v179[1] = (void *)0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)v179, v88, (char *)v72);
              v89 = (char *)v179[0] + 8 * LODWORD(v179[1]);
              v90 = llvm::ConstantInt::get();
              v91 = v179[0];
              v92 = LODWORD(v179[1]);
              v93 = LODWORD(v179[1]) + (unint64_t)v83;
              if ((char *)v179[0] + 8 * LODWORD(v179[1]) == v89)
              {
                if (v93 > HIDWORD(v179[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v92 = LODWORD(v179[1]);
                  v91 = v179[0];
                }
                v103 = (uint64_t *)&v91[8 * v92];
                v104 = v83;
                do
                {
                  *v103++ = v90;
                  --v104;
                }
                while (v104);
                LODWORD(v179[1]) = v92 + v83;
              }
              else
              {
                v94 = (char *)v179[0];
                if (v93 > HIDWORD(v179[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v94 = (char *)v179[0];
                  v92 = LODWORD(v179[1]);
                }
                v95 = (v89 - v91) >> 3;
                v96 = (uint64_t *)&v94[8 * v95];
                v97 = (uint64_t *)&v94[8 * v92];
                v98 = (char *)v97 - (char *)v96;
                if (v83 <= v97 - v96)
                {
                  llvm::SmallVectorImpl<llvm::Value *>::append<std::move_iterator<llvm::Value **>,void>((uint64_t)v179, (char *)&v97[-v83], &v94[8 * v92]);
                  if (&v97[-v83] != v96)
                    memmove(&v96[v83], v96, (char *)&v97[-v83] - (char *)v96);
                  do
                  {
                    *v96++ = v90;
                    --v83;
                  }
                  while (v83);
                }
                else
                {
                  v99 = v98 >> 3;
                  LODWORD(v179[1]) = v92 + v83;
                  if (v95 != v92)
                  {
                    memcpy(&v94[8 * (v92 + v83) + -8 * v99], &v94[8 * v95], v98);
                    v100 = v99;
                    do
                    {
                      *v96++ = v90;
                      --v100;
                    }
                    while (v100);
                  }
                  if (v83 != v99)
                  {
                    v101 = v99 - v85;
                    do
                      *v97++ = v90;
                    while (!__CFADD__(v101++, 1));
                  }
                }
              }
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Instruction *)v74);
              v105 = *(uint64_t **)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF));
              v106 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v160 + 32;
              v178 = 257;
              v55 = v158;
              v107 = llvm::IRBuilderBase::CreateGEP(v106, v158, v105, (uint64_t **)v179[0], LODWORD(v179[1]), (uint64_t)&v175);
              v108 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
              v109 = *(_QWORD *)v74;
              v178 = 257;
              v110 = llvm::IRBuilderBase::CreateCast(v108, 49, v107, v109, (uint64_t)&v175);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v74);
              if (*(_BYTE *)(v110 + 16) == 77)
                v74 = v110;
              else
                v74 = 0;
              if (v179[0] != &v180)
                free(v179[0]);
              v53 = (uint64_t)v159;
              if (v74)
              {
LABEL_111:
                llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Instruction *)v74);
                AGCLLVMUserObject::replacePointerLoadsFromBitcast((_QWORD *)a1, (llvm::Instruction *)v74);
              }
            }
          }
          while (v73);
        }
        v174 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions();
        v111 = v174;
        if (v174 == v173)
          break;
        if (v174)
        {
          v112 = 5;
LABEL_117:
          (*((void (**)(void))*v111 + v112))();
        }
        v71 = *((_QWORD *)&v185 + 1);
        if (!*((_QWORD *)&v185 + 1))
          goto LABEL_119;
      }
      v111 = v173;
      v112 = 4;
      goto LABEL_117;
    }
  }
LABEL_119:
  v113 = (void **)*((_QWORD *)&v183 + 1);
  v114 = (void **)v184;
  *((_QWORD *)&v185 + 1) = 0;
  v115 = v184 - *((_QWORD *)&v183 + 1);
  if ((_QWORD)v184 - *((_QWORD *)&v183 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v113);
      v114 = (void **)v184;
      v113 = (void **)(*((_QWORD *)&v183 + 1) + 8);
      *((_QWORD *)&v183 + 1) = v113;
      v115 = v184 - (_QWORD)v113;
    }
    while ((_QWORD)v184 - (_QWORD)v113 > 0x10uLL);
  }
  v116 = v115 >> 3;
  if (v116 == 1)
  {
    v117 = 256;
    goto LABEL_125;
  }
  if (v116 == 2)
  {
    v117 = 512;
LABEL_125:
    *(_QWORD *)&v185 = v117;
  }
  if (v113 != v114)
  {
    do
    {
      v118 = *v113++;
      operator delete(v118);
    }
    while (v113 != v114);
    if ((_QWORD)v184 != *((_QWORD *)&v183 + 1))
      *(_QWORD *)&v184 = v184 + ((*((_QWORD *)&v183 + 1) - v184 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v183)
    operator delete((void *)v183);
  v119 = v157;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1755))
  {
    v172 = 0;
  }
  else
  {
    AGCLLVMUserObject::setupIndirectArgumentRogMetadata((_QWORD *)a1, v157);
    v120 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1755);
    v172 = 0;
    if (!v120)
    {
LABEL_177:
      v142 = *(_QWORD *)(v119 + 56);
      *(_DWORD *)(a1 + 3332) += *(_DWORD *)(v142 + 76);
      *(_DWORD *)(a1 + 3324) += *(_DWORD *)(v142 + 72);
      return;
    }
  }
  v121 = *(_QWORD *)(v53 + 8);
  if (!v121)
  {
    *(_WORD *)(v157 + 1) = 0;
    goto LABEL_177;
  }
  v122 = 0;
  v123 = (uint64_t **)(a1 + 3224);
  do
  {
    v124 = *(const llvm::GetElementPtrInst **)(v121 + 24);
    v121 = *(_QWORD *)(v121 + 8);
    if (!AGCLLVMUserObject::isAllocaStoreForDebugger(*(_BYTE *)(a1 + 45), (uint64_t)v124, v53))
    {
      v175 = 4;
      v176 = 0;
      v177 = v124;
      if (v124 != (const llvm::GetElementPtrInst *)-8192
        && v124 != (const llvm::GetElementPtrInst *)-4096
        && v124 != 0)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v175);
        v124 = v177;
      }
      v173[0] = 0;
      v126 = AGCArgumentBuffer::lookup(*(AGCArgumentBuffer **)(v119 + 56), v124, v173, (BOOL *)&v183);
      if (v126)
        v127 = (*((_DWORD *)v126 + 2) & 0xFFFFFFFC) == 4;
      else
        v127 = 0;
      if (v127)
      {
        v128 = (uint64_t)v126;
        v129 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_OWORD *)v179 = *(_OWORD *)(v129 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v129 + 40));
        v181 = *(_DWORD *)(v129 + 136);
        v130 = *(_DWORD *)(v128 + 8);
        if (v130 == 7 || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)v124 + 16) + 8) == 15)
        {
          *(_QWORD *)&v183 = &v184;
          *((_QWORD *)&v183 + 1) = 0x400000000;
          v131 = AGCLLVMUserObject::collectResourceCopyValues(a1, v128, (uint64_t)v124, (uint64_t)&v183, v130 == 7, &v172, 0);
          v132 = HIBYTE(v131);
          if ((_BYTE)v131)
          {
            v133 = *(_DWORD *)(v53 + 32);
            v134 = *v123;
            v135 = (uint64_t **)(a1 + 3224);
            v136 = (uint64_t **)(a1 + 3224);
            if (*v123)
            {
              while (1)
              {
                while (1)
                {
                  v136 = (uint64_t **)v134;
                  v137 = *((_DWORD *)v134 + 8);
                  if (v133 >= v137)
                    break;
                  v134 = *v136;
                  v135 = v136;
                  if (!*v136)
                    goto LABEL_159;
                }
                if (v137 >= v133)
                  break;
                v134 = v136[1];
                if (!v134)
                {
                  v135 = v136 + 1;
                  goto LABEL_159;
                }
              }
            }
            else
            {
LABEL_159:
              v138 = (uint64_t *)v136;
              v136 = (uint64_t **)operator new(0x30uLL);
              *((_DWORD *)v136 + 8) = v133;
              v136[5] = 0;
              *v136 = 0;
              v136[1] = 0;
              v136[2] = v138;
              *v135 = (uint64_t *)v136;
              v139 = **(_QWORD **)(a1 + 3216);
              v140 = (uint64_t *)v136;
              if (v139)
              {
                *(_QWORD *)(a1 + 3216) = v139;
                v140 = *v135;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 3224), v140);
              ++*(_QWORD *)(a1 + 3232);
              v53 = (uint64_t)v159;
            }
            v136[5] = (uint64_t *)v157;
          }
          if ((__int128 *)v183 != &v184)
            free((void *)v183);
          v122 = v132;
        }
        if (v180)
          llvm::MetadataTracking::untrack();
        v119 = v157;
      }
      if (v177 != (const llvm::GetElementPtrInst *)-8192 && v177 != (const llvm::GetElementPtrInst *)-4096)
      {
        if (v177)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v175);
      }
    }
  }
  while (v121);
  v141 = v172;
  *(_BYTE *)(v119 + 1) = v122;
  *(_BYTE *)(v119 + 2) = v141;
  if (!v122)
    goto LABEL_177;
}

uint64_t *std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>(uint64_t *result, unsigned int a2, _OWORD *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  __int128 v10;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x50uLL);
    v10 = a3[1];
    *((_OWORD *)v9 + 2) = *a3;
    *((_OWORD *)v9 + 3) = v10;
    *((_OWORD *)v9 + 4) = a3[2];
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t AGCLLVMUserObject::remapTexSampUnit(AGCLLVMUserObject *this, uint64_t a2)
{
  return a2;
}

void AGCLLVMAGPVertexShaderRegular::promoteInput(AGCLLVMAGPVertexShaderRegular *this, llvm::Value *a2, int a3, int a4)
{
  llvm::Type *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unsigned int v37;
  unint64_t v38;
  llvm::IRBuilderBase *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Instruction *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  llvm::Value *VIRead;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  llvm::Value *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t *Alloca;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::BasicBlock **v72;
  int v73;
  char *v74;
  llvm *v75;
  uint64_t v76;
  unint64_t v77;
  llvm::Instruction **v78;
  unint64_t v79;
  llvm::Instruction *v80;
  llvm *v81;
  llvm *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  void *v86;
  _DWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::Value *v93;
  llvm::Type **GEP;
  char *v95;
  uint64_t v96;
  char *v97;
  llvm::Type *v98;
  _BYTE *v99;
  _BYTE *v100;
  char *v101;
  uint64_t v102;
  llvm::Type **Cast;
  char *v104;
  llvm::Value *v105;
  llvm::Type *v106;
  llvm::Value *v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t *v112;
  llvm::ArrayType *v113;
  uint64_t InsertValue;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  llvm::Type **v121;
  AGCLLVMBuilder *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  llvm::Value *InsertElement;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  llvm::IRBuilderBase *v140;
  llvm::Value *v141;
  llvm::Value *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  llvm *v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  void *v154;
  uint64_t *v155;
  llvm::Value *v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  _DWORD v161[8];
  __int16 v162;
  unsigned int v163;
  llvm *v164;
  int v165;
  unsigned int v166;
  _BYTE v167[40];
  __int16 v168;
  char v169;
  uint64_t v170;
  BOOL v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  int v175;
  llvm::Type *v176;
  _BYTE v177[24];
  _BYTE *v178;
  void *v179;
  uint64_t v180;
  _BYTE v181[16];
  __int16 v182;
  void *v183;
  uint64_t v184;
  _BYTE v185[16];
  __int16 v186;
  void *TypeAllocSize;
  uint64_t v188;
  _WORD v189[32];
  uint64_t v190;
  void *v191[2];
  _BYTE v192[64];
  char __str[32];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1734)
    && *(_OWORD *)((char *)this + 10056) != 0)
  {
    if (a4 == -1)
      snprintf(__str, 0x20uLL, "arg%d");
    else
      snprintf(__str, 0x20uLL, "arg%d.%d");
    v8 = **(llvm::Type ***)(*(_QWORD *)a2 + 16);
    v176 = v8;
    v9 = (*((_DWORD *)v8 + 2) & 0xFE) == 0x12
       ? *(unsigned __int8 *)(**((_QWORD **)v8 + 2) + 8)
       : *((_DWORD *)v8 + 2);
    if (v9 != 15 && llvm::Type::isSized((uint64_t)v8))
    {
      TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)this + 232), v8);
      v188 = v10;
      v17 = llvm::TypeSize::operator unsigned long long();
      if ((v17 & 3) != 0)
      {
        printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : type size %u not a multiple of 4", v11, v12, v13, v14, v15, v16, (char)__str);
        return;
      }
      v175 = 0;
      v171 = 0;
      v170 = 0;
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v166 = 128;
      v164 = (llvm *)MEMORY[0x1CAA2C6C0](0x4000, 8);
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty((uint64_t)&v164);
      v167[0] = 0;
      v167[24] = 0;
      v168 = 1;
      v169 = 0;
      if ((AGCLLVMAGPVertexShaderRegular::canDMAPromote(this, (uint64_t)a2, (uint64_t)__str, &v175, (uint64_t)&v170, (uint64_t)&v164, v18, v19) & 1) != 0|| AGCLLVMAGPVertexShaderRegular::coerceStridedAccess(this, a2, __str, &v176, v20, v21, v22, v23)&& (v8 = v176, TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)this + 232), v176), v188 = v69, v17 = llvm::TypeSize::operator unsigned long long(), AGCLLVMAGPVertexShaderRegular::canDMAPromote(this, (uint64_t)a2, (uint64_t)__str,
                            &v175,
                            (uint64_t)&v170,
                            (uint64_t)&v164,
                            v70,
                            v71)))
      {
        v24 = v17 >> 2;
        v25 = llvm::UndefValue::get();
        v191[0] = v192;
        v191[1] = (void *)0x800000000;
        llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v191, v17 >> 2, v25);
        v26 = AGCLLVMAGPVertexShaderRegular::analyzeLoads((uint64_t)this, (uint64_t)v8, (uint64_t *)&v164);
        v34 = v33 + 3;
        v35 = (unint64_t)(v33 + 3) >> 2;
        v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v37 = *(_DWORD *)(*((_QWORD *)v36 + 50) + 888);
        if (v37 >= 0x80)
          v37 = 128;
        if (*((_DWORD *)this + 1256) + v35 - (v26 >> 2) >= v37 - 2)
        {
          printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : ran out of vi's, need %u, already allocated %u, limit %u", v27, v28, v29, v30, v31, v32, (char)__str);
        }
        else
        {
          v38 = v26;
          v159 = v26 >> 2;
          v160 = v35 - (v26 >> 2);
          v39 = (llvm::IRBuilderBase *)(v36 + 40);
          v40 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
          if (v40)
            v41 = v40 - 24;
          else
            v41 = 0;
          v42 = *(_QWORD *)(v41 + 40);
          if (v42)
            v43 = (llvm::Instruction *)(v42 - 24);
          else
            v43 = 0;
          llvm::IRBuilderBase::SetInsertPoint(v39, v43);
          v158 = *((_DWORD *)this + 1256);
          if (v17 >= 4)
          {
            v44 = 0;
            v45 = (v34 >> 2);
            v46 = (v38 >> 2);
            if (v24 <= 1)
              v47 = 1;
            else
              v47 = v24;
            do
            {
              if (v44 >= v46 && v44 < v45)
              {
                ++*((_DWORD *)this + 1256);
                VIRead = AGCLLVMUserVertexShader::createVIRead(this);
                *((_QWORD *)v191[0] + v44) = VIRead;
              }
              ++v44;
            }
            while (v47 != v44);
          }
          v49 = v168;
          v179 = "vertex_input";
          v182 = 259;
          v186 = 264;
          LODWORD(v183) = a3;
          llvm::operator+((uint64_t)&TypeAllocSize, (uint64_t *)&v179, (uint64_t *)&v183);
          v156 = AGCLLVMAGPVertexShaderRegular::materializeVertexAttribute(this, v8, v49, v191, (uint64_t)&TypeAllocSize);
          printMessage((char **)&AGCPrinter, "DMA promoting %s to VI, attribute size = %u words, only words [%u .. %u] actually used", v50, v51, v52, v53, v54, v55, (char)__str);
          v56 = v175 == 2;
          printMessage((char **)&AGCPrinter, "DMA Entry = {reg_offset: %u, size : %u, offset %u, stride; %u, instanced: %s, div: %u, base_after_divisor: %s}",
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v158);
          LODWORD(v170) = v158;
          v63 = a4;
          v64 = v156;
          _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&TypeAllocSize, a3, v63);
          HIDWORD(v170) = (_DWORD)TypeAllocSize;
          v172 = __PAIR64__(v159, v160);
          LODWORD(v173) = v24;
          v171 = v56;
          v65 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)this + 9464, (unint64_t)&v170);
          v66 = (_OWORD *)(*((_QWORD *)this + 1183) + 32 * *((unsigned int *)this + 2368));
          v67 = v65[1];
          *v66 = *v65;
          v66[1] = v67;
          ++*((_DWORD *)this + 2368);
          if (*((_BYTE *)v156 + 16) == 60)
          {
            Alloca = (uint64_t *)*((_QWORD *)v156 - 4);
          }
          else if (v169)
          {
            v72 = (llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
            v189[8] = 257;
            Alloca = (uint64_t *)llvm::IRBuilderBase::CreateAlloca(v72, v8, 0, (const llvm::Twine *)&TypeAllocSize);
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Type **)v156, (uint64_t)Alloca, 0);
          }
          else
          {
            Alloca = 0;
          }
          v73 = v165;
          if (v165)
          {
            v74 = (char *)this + 8;
            while (1)
            {
              v75 = v164;
              v76 = v166;
              if (v166)
              {
                v77 = (unint64_t)v166 << 7;
                v78 = (llvm::Instruction **)((char *)v164 + 24);
                v79 = v77;
                while (1)
                {
                  v80 = *v78;
                  if (((unint64_t)*v78 | 0x1000) != 0xFFFFFFFFFFFFF000)
                    break;
                  v78 += 16;
                  v79 -= 128;
                  if (!v79)
                  {
                    v80 = (llvm::Instruction *)*((_QWORD *)v164 + 16 * (unint64_t)v166 + 3);
                    break;
                  }
                }
                v81 = v164;
                while ((*((_QWORD *)v81 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v81 = (llvm *)((char *)v81 + 128);
                  v77 -= 128;
                  if (!v77)
                  {
                    v81 = (llvm *)((char *)v164 + 128 * (unint64_t)v166);
                    break;
                  }
                }
              }
              else
              {
                v80 = (llvm::Instruction *)*((_QWORD *)v164 + 3);
                v81 = v164;
              }
              TypeAllocSize = v189;
              v188 = 0x800000000;
              if (*((_DWORD *)v81 + 12))
              {
                llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)v81 + 40);
                v75 = v164;
                v73 = v165;
                v76 = v166;
              }
              v190 = *((_QWORD *)v81 + 15);
              v82 = (llvm *)((char *)v75 + 128 * v76);
              if (v73)
              {
                if ((_DWORD)v76)
                {
                  v83 = v76 << 7;
                  while ((*((_QWORD *)v75 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v75 = (llvm *)((char *)v75 + 128);
                    v83 -= 128;
                    if (!v83)
                    {
                      v75 = v82;
                      break;
                    }
                  }
                }
              }
              else
              {
                v75 = (llvm *)((char *)v75 + 128 * v76);
              }
              llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase((int32x2_t *)&v164, v75);
              v84 = v188;
              llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v80);
              if ((_DWORD)v84)
                break;
              if (HIDWORD(v190) == 3)
              {
                v101 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                v102 = llvm::PointerType::get();
                v182 = 257;
                Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v101, 49, (uint64_t)Alloca, v102, (uint64_t)&v179);
                v104 = &v74[*(_QWORD *)(*(_QWORD *)this - 24)];
                v182 = 257;
                v106 = AGCLLVMBuilder::tryDeducePointeeType(Cast, v105);
                llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v104 + 4, v106, (uint64_t)Cast, 0, (uint64_t)&v179);
              }
              else if (HIDWORD(v190) == 1)
              {
                AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v64, *(_DWORD *)(*(_QWORD *)v80 + 32));
              }
LABEL_104:
              v145 = *((_QWORD *)v80 - 4);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v80);
              if (!*(_QWORD *)(v145 + 8))
              {
                v178 = 0;
                llvm::RecursivelyDeleteTriviallyDeadInstructions();
                v146 = v178;
                if (v178 == v177)
                {
                  v146 = v177;
                  v147 = 4;
                  goto LABEL_109;
                }
                if (v178)
                {
                  v147 = 5;
LABEL_109:
                  (*(void (**)(void))(*v146 + 8 * v147))();
                }
              }
              if (TypeAllocSize != v189)
                free(TypeAllocSize);
              v73 = v165;
              if (!v165)
                goto LABEL_113;
            }
            if (!(_BYTE)v190)
            {
              v179 = v181;
              v180 = 0x800000000;
              llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v179, (v84 + 1), 0);
              v90 = llvm::ConstantInt::get();
              v91 = 0;
              *(_QWORD *)v179 = v90;
              do
              {
                *(_QWORD *)((char *)v179 + v91 + 8) = *(_QWORD *)((char *)TypeAllocSize + v91);
                v91 += 8;
              }
              while (8 * v84 != v91);
              v92 = (uint64_t)&v74[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
              v186 = 257;
              GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v92, (uint64_t)v176, Alloca, (uint64_t **)v179, v180, (uint64_t)&v183);
              if ((HIDWORD(v190) | 2) == 3)
              {
                v95 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                v96 = llvm::PointerType::get();
                v186 = 257;
                GEP = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v95, 49, (uint64_t)GEP, v96, (uint64_t)&v183);
              }
              v97 = &v74[*(_QWORD *)(*(_QWORD *)this - 24)];
              v186 = 257;
              v98 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v93);
              llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v97 + 4, v98, (uint64_t)GEP, 0, (uint64_t)&v183);
              v99 = v179;
              v100 = v181;
              goto LABEL_102;
            }
            v183 = v185;
            v184 = 0xC00000000;
            llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)&v183, v84, 0);
            v85 = (char *)TypeAllocSize;
            v86 = v183;
            v87 = v183;
            v88 = v84;
            do
            {
              v89 = (_QWORD *)(*(_QWORD *)v85 + 24);
              if (*(_DWORD *)(*(_QWORD *)v85 + 32) >= 0x41u)
                v89 = (_QWORD *)*v89;
              *v87++ = *v89;
              v85 += 8;
              --v88;
            }
            while (v88);
            switch(HIDWORD(v190))
            {
              case 0:
                AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v64, (uint64_t)v86, v184);
                goto LABEL_101;
              case 1:
                v107 = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v64, (uint64_t)v86, v184);
                AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v107, *(_DWORD *)(*(_QWORD *)v80 + 32));
                goto LABEL_101;
              case 2:
                llvm::DataLayout::getTypeSizeInBits((uint64_t)this + 232, *(_QWORD *)v80);
                v179 = (void *)((unint64_t)(v108 + 7) >> 3);
                v180 = v109 == 1;
                v110 = llvm::TypeSize::operator unsigned long long();
                v111 = v110 >> 2;
                if ((*(_DWORD *)(*(_QWORD *)v80 + 8) & 0xFE) == 0x10)
                {
                  v112 = Alloca;
                  v113 = *(llvm::ArrayType **)(**(_QWORD **)(*(_QWORD *)v80 + 16) + 24);
                  llvm::ArrayType::get(v113, (llvm::Type *)v111);
                  InsertValue = llvm::UndefValue::get();
                  v163 = 0;
                  if (v110 >= 4)
                  {
                    v127 = v183;
                    do
                    {
                      v128 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v64, (uint64_t)v127, v184);
                      v129 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                      v182 = 257;
                      v130 = llvm::IRBuilderBase::CreateCast((uint64_t)v129, 49, v128, (uint64_t)v113, (uint64_t)&v179);
                      v162 = 257;
                      InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v129, InsertValue, v130, (uint64_t)&v163, 1, (uint64_t)v161);
                      v127 = v183;
                      ++*((_DWORD *)v183 + (v84 - 1));
                      ++v163;
                    }
                    while (v163 < v111);
                  }
                  v131 = llvm::UndefValue::get();
                  v132 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                  v161[0] = 0;
                  v182 = 257;
                  llvm::IRBuilderBase::CreateInsertValue((uint64_t)v132, v131, InsertValue, (uint64_t)v161, 1, (uint64_t)&v179);
                  Alloca = v112;
                }
                else
                {
                  v123 = *((_QWORD *)v80 - 4);
                  if (*(_BYTE *)(v123 + 16) == 62)
                  {
                    v124 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v64, (uint64_t)v183, v184);
                    v125 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                    v126 = *(_QWORD *)v80;
                    v182 = 257;
                    llvm::IRBuilderBase::CreateCast((uint64_t)v125, 49, v124, v126, (uint64_t)&v179);
LABEL_101:
                    v99 = v183;
                    v100 = v185;
LABEL_102:
                    if (v99 != v100)
                      free(v99);
                    goto LABEL_104;
                  }
                  v155 = Alloca;
                  v133 = **(_QWORD **)(**(_QWORD **)(v123 - 32) + 16);
                  llvm::FixedVectorType::get();
                  InsertElement = (llvm::Value *)llvm::UndefValue::get();
                  if (v110 >= 4)
                  {
                    v135 = 0;
                    v136 = (v84 - 1);
                    if (v111 <= 1)
                      v137 = 1;
                    else
                      v137 = v111;
                    v157 = v137;
                    v138 = v183;
                    do
                    {
                      v139 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v64, (uint64_t)v138, v184);
                      v140 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                      v182 = 257;
                      v141 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v140, 49, v139, v133, (uint64_t)&v179);
                      v162 = 257;
                      v142 = (llvm::Value *)llvm::ConstantInt::get();
                      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v140, InsertElement, v141, v142, (const llvm::Twine *)v161);
                      v138 = v183;
                      ++*((_DWORD *)v183 + v136);
                      ++v135;
                    }
                    while (v157 != v135);
                  }
                  v143 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                  v144 = *(_QWORD *)v80;
                  v182 = 257;
                  llvm::IRBuilderBase::CreateCast((uint64_t)v143, 49, (uint64_t)InsertElement, v144, (uint64_t)&v179);
                  Alloca = v155;
                }
                v74 = (char *)this + 8;
                goto LABEL_101;
              case 3:
                v179 = v181;
                v180 = 0x800000000;
                llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v179, (v84 + 1), 0);
                v115 = llvm::ConstantInt::get();
                v116 = 0;
                *(_QWORD *)v179 = v115;
                do
                {
                  *(_QWORD *)((char *)v179 + v116 + 8) = *(_QWORD *)((char *)TypeAllocSize + v116);
                  v116 += 8;
                }
                while (8 * v84 != v116);
                v117 = (uint64_t)&v74[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                v162 = 257;
                v118 = llvm::IRBuilderBase::CreateGEP(v117, (uint64_t)v176, Alloca, (uint64_t **)v179, v180, (uint64_t)v161);
                v119 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                v120 = llvm::PointerType::get();
                v162 = 257;
                v121 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v119, 49, v118, v120, (uint64_t)v161);
                v122 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
                v162 = 257;
                AGCLLVMBuilder::CreateLoad(v122, v121, (const llvm::Twine *)v161);
                if (v179 != v181)
                  free(v179);
                goto LABEL_101;
              default:
                goto LABEL_101;
            }
          }
        }
LABEL_113:
        if (v191[0] != v192)
          free(v191[0]);
      }
      llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v167);
      v148 = v164;
      if (v166)
      {
        v149 = (char *)v164 + 56;
        v150 = (unint64_t)v166 << 7;
        do
        {
          v151 = *((_QWORD *)v149 - 4);
          if ((v151 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v152 = (char *)*((_QWORD *)v149 - 2);
            if (v149 != v152)
            {
              free(v152);
              v151 = *((_QWORD *)v149 - 4);
            }
          }
          if (v151 != -8192 && v151 != -4096 && v151 != 0)
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v149 - 48));
          v149 += 128;
          v150 -= 128;
        }
        while (v150);
        v148 = v164;
        v154 = (void *)((unint64_t)v166 << 7);
      }
      else
      {
        v154 = 0;
      }
      llvm::deallocate_buffer(v148, v154);
    }
  }
}

llvm::Value *AGCLLVMUserFragmentShader::replaceInterpolation(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Cast;
  unsigned int v13;
  uint64_t v14;
  llvm::Type **v15;
  llvm::Type *v16;
  llvm::Value *AlignedLoad;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  llvm::GlobalVariable *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  uint64_t FirstInsertionPt;
  uint64_t *v28;
  llvm::Value *v29;
  llvm::Type *v30;
  llvm::CmpInst **v31;
  uint64_t v32;
  uint64_t Select;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::IRBuilderBase *v38;
  uint64_t v39;
  llvm::Value *i;
  uint64_t v41;
  llvm::Type **ConstInBoundsGEP1_32;
  llvm::Value *v43;
  llvm::Type *v44;
  llvm::Value *v45;
  llvm::IRBuilderBase *v46;
  llvm::Value *v47;
  llvm::Value *Element;
  uint64_t v49;
  llvm::IRBuilderBase *v50;
  llvm::Value *v51;
  uint64_t v52;
  llvm::IRBuilderBase *v53;
  llvm::Value *v54;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  _BYTE v65[32];
  __int16 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  _QWORD v70[4];
  __int16 v71;

  v4 = a2[3];
  v5 = (llvm::Value *)*a2;
  if (a2[1] == 1)
  {
    *(_BYTE *)(a1 + 5829) = 1;
    v6 = 3;
  }
  else
  {
    v6 = a2[2];
    if ((_DWORD)v6 == 1)
    {
      if (*(int *)(a1 + 4328) <= 1)
        *(_DWORD *)(a1 + 4328) = 2;
      v6 = 1;
    }
  }
  v7 = llvm::PointerType::get();
  if (a2[1] == 3
    || (v9 = v7,
        v10 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40,
        v11 = *((_QWORD *)a2 + 4),
        v71 = 257,
        Cast = llvm::IRBuilderBase::CreateCast(v10, 49, v11, v9, (uint64_t)v70),
        v13 = a2[1],
        v13 == 5)
    || v13 == 3)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v15 = (llvm::Type **)*((_QWORD *)a2 + 4);
    v71 = 257;
    v16 = AGCLLVMBuilder::tryDeducePointeeType(v15, v8);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v16, (uint64_t)v15, 0, (uint64_t)v70);
    goto LABEL_11;
  }
  v20 = (llvm::Type *)Cast;
  if ((_DWORD)v6 != 3)
  {
    v35 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v36 = v35 + 32;
    v37 = *(_QWORD *)(v35 + 400);
    v38 = (llvm::IRBuilderBase *)(v35 + 40);
    if (v13)
    {
      v56 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(v38);
      v58 = *(_DWORD *)(v36 + 104);
      AlignedLoad = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, llvm::Type *, _QWORD, _QWORD))(*(_QWORD *)v37 + 264))(v37, &v56, v5, v6, v20, 0, 0);
      if (!v57)
        goto LABEL_11;
    }
    else
    {
      v59 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(v38);
      v61 = *(_DWORD *)(v36 + 104);
      AlignedLoad = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, llvm::Type *, _QWORD, _QWORD))(*(_QWORD *)v37 + 264))(v37, &v59, v5, v6, v20, 0, *(_QWORD *)(a1 + 5688));
      if (!v60)
        goto LABEL_11;
    }
    llvm::MetadataTracking::untrack();
    goto LABEL_11;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1768))
  {
    if (!llvm::Module::getGlobalVariable())
    {
      v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v70[0] = "agc.provoking_vertex_index";
      v71 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      AGCLLVMBuilder::setupGlobalMetadata((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v21);
      v22 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v67 = *(_OWORD *)(v22 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 40));
      v69 = *(_DWORD *)(v22 + 136);
      v23 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 56) + 80);
      if (v24)
        v25 = (llvm::BasicBlock *)(v24 - 24);
      else
        v25 = 0;
      v26 = v23 + 40;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v25);
      llvm::IRBuilderBase::SetInsertPoint(v26, (uint64_t)v25, FirstInsertionPt);
      v28 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
      v71 = 257;
      v30 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v21, v29);
      v31 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v28, v30, (uint64_t)v21, 0, (uint64_t)v70);
      v32 = llvm::ConstantInt::get();
      v66 = 257;
      llvm::IRBuilderBase::CreateICmp(v28, 33, v31, v32, (uint64_t)v65);
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      v71 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 5768), Select);
      v34 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32;
      v62 = v67;
      v63 = v68;
      if (v68)
        llvm::MetadataTracking::track();
      v64 = v69;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v62, v34 + 8);
      if (v63)
        llvm::MetadataTracking::untrack();
      if (v68)
        llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    v39 = llvm::ConstantInt::get();
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 5768), v39);
  }
  llvm::FixedVectorType::get();
  AlignedLoad = (llvm::Value *)llvm::UndefValue::get();
  if (!(_DWORD)v5)
  {
    if (v4 >= 2)
      goto LABEL_39;
    return AGCLLVMBuilder::truncateToSmall((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), AlignedLoad, v4);
  }
  for (i = 0; i != v5; i = (llvm::Value *)((char *)i + 1))
  {
    v41 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    ConstInBoundsGEP1_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP1_32((AGCLLVMBuilder *)(v41 + 32), v20, i);
    v71 = 257;
    v44 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP1_32, v43);
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v41 + 40), v44, (uint64_t)ConstInBoundsGEP1_32, 0, (uint64_t)v70);
    v46 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    v47 = *(llvm::Value **)(a1 + 5784);
    v71 = 257;
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v46, v45, v47, (const llvm::Twine *)v70);
    v49 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v71 = 257;
    v50 = (llvm::IRBuilderBase *)(v49 + 40);
    v51 = (llvm::Value *)llvm::ConstantInt::get();
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v50, AlignedLoad, Element, v51, (const llvm::Twine *)v70);
  }
  if ((_DWORD)v5 == 1)
  {
    v52 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v71 = 257;
    v53 = (llvm::IRBuilderBase *)(v52 + 40);
    v54 = (llvm::Value *)llvm::ConstantInt::get();
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v53, AlignedLoad, v54, (const llvm::Twine *)v70);
    if (v4 < 2)
      return AGCLLVMBuilder::truncateToSmall((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), AlignedLoad, v4);
    goto LABEL_13;
  }
LABEL_11:
  if (v4 >= 2)
  {
    if ((_DWORD)v5 == 1)
    {
LABEL_13:
      v18 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v19 = *(_QWORD *)(v18 + a1 + 232);
LABEL_40:
      v71 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v18 + a1 + 40, 49, (uint64_t)AlignedLoad, v19, (uint64_t)v70);
      return AGCLLVMBuilder::truncateToSmall((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), AlignedLoad, v4);
    }
LABEL_39:
    v19 = llvm::FixedVectorType::get();
    v18 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    goto LABEL_40;
  }
  return AGCLLVMBuilder::truncateToSmall((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), AlignedLoad, v4);
}

llvm::Value *AGCLLVMBuilder::truncateToSmall(uint64_t *a1, llvm::Value *a2, int a3)
{
  llvm::Value *v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  llvm::IRBuilderBase *v8;
  uint64_t Cast;
  _BYTE v11[32];
  __int16 v12;

  v3 = a2;
  switch(a3)
  {
    case 1:
      v5 = a1 + 19;
      goto LABEL_6;
    case 2:
      v5 = a1 + 22;
      goto LABEL_6;
    case 4:
    case 8:
      v5 = a1 + 24;
      goto LABEL_6;
    case 5:
    case 9:
      v5 = a1 + 23;
LABEL_6:
      v6 = *v5;
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
        v6 = llvm::FixedVectorType::get();
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
      else
        v7 = *(_DWORD *)(v6 + 8);
      v8 = (llvm::IRBuilderBase *)(a1 + 1);
      v12 = 257;
      if (v7 > 6)
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)v3, v6, (uint64_t)v11);
      else
        Cast = llvm::IRBuilderBase::CreateFPTrunc(v8, v3, (llvm::Type *)v6, (const llvm::Twine *)v11);
      v3 = (llvm::Value *)Cast;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t AGCLLVMAGPFragmentShader::adjustFragCoordY(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMObject::finalizeDriverBindings(AGCLLVMObject *this, llvm::Function *a2)
{
  unsigned int v4;
  int v6;
  const char *v7;
  const char *v8;
  const char *Value;
  int v10;
  char isBufferBoundsChecksEnabled;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  uint64_t v33;
  _BYTE v34[7];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 64))(this);
  if (v4 <= 0x1D && ((1 << v4) & 0x200002C1) != 0)
  {
    v6 = (*(uint64_t (**)(AGCLLVMObject *))(*(_QWORD *)this + 200))(this);
    if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_TG_BOUNDS_CHECKING", v7))
      v6 = MGGetBoolAnswer()
        && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_TG_BOUNDS_CHECKING", v8)) != 0
        && *Value != 48
        && atoi(Value) != 0;
    v10 = *(unsigned __int8 *)(*((_QWORD *)this + 50) + 1767);
    isBufferBoundsChecksEnabled = AGCLLVMObject::isBufferBoundsChecksEnabled(this);
    if (v10 || (isBufferBoundsChecksEnabled & 1) != 0 || v6)
    {
      llvm::Module::getOrInsertNamedMetadata();
      AGCLLVMObject::isBufferBoundsChecksEnabled(this);
      std::string::basic_string[abi:nn180100]<0>(&__p, "memorytocheck");
      v36 = llvm::MDString::get();
      llvm::ConstantInt::get();
      v37 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v35 < 0)
        operator delete(__p);
      if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 2
        || (*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 1)
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "hardware_support");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 2)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, "hardware_safety_check");
          v36 = llvm::MDString::get();
          goto LABEL_38;
        }
      }
      else if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 3
             || (*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 4)
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkdmapromotable");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        std::string::basic_string[abi:nn180100]<0>(&__p, "disableindexopt");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        std::string::basic_string[abi:nn180100]<0>(&__p, "useaddsatindex");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        std::string::basic_string[abi:nn180100]<0>(&__p, "fullptrcheck");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkstores");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkatomics");
        v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0)
          operator delete(__p);
        if ((*(unsigned int (**)(AGCLLVMObject *))(*(_QWORD *)this + 176))(this) == 3)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, "reporting");
          v36 = llvm::MDString::get();
LABEL_38:
          llvm::ConstantInt::get();
          v37 = llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
          if (v35 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if ((*((_WORD *)a2 + 9) & 0x3FF0) == 0x6A0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    __p = v34;
    v33 = 0x800000000;
    v12 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v12);
    v13 = (uint64_t *)*((_QWORD *)this + 347);
    v14 = *((unsigned int *)this + 696);
    v15 = v33;
    if (v14 + (unint64_t)v33 > HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v33;
    }
    if ((_DWORD)v14)
    {
      v16 = (char *)__p + 8 * v15;
      v17 = 8 * v14;
      do
      {
        v18 = *v13++;
        *v16++ = v18;
        v17 -= 8;
      }
      while (v17);
    }
    LODWORD(v33) = v15 + v14;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (__p != v34)
      free(__p);
  }
  else
  {
    llvm::Module::getOrInsertNamedMetadata();
    v19 = *((unsigned int *)this + 696);
    if ((_DWORD)v19)
    {
      v20 = *((_QWORD *)this + 347);
      v21 = 8 * v19;
      do
      {
        v20 += 8;
        llvm::NamedMDNode::addOperand();
        v21 -= 8;
      }
      while (v21);
    }
  }
  if (*((_DWORD *)this + 772))
  {
    llvm::Module::getOrInsertNamedMetadata();
    v22 = *((unsigned int *)this + 772);
    if ((_DWORD)v22)
    {
      v23 = *((_QWORD *)this + 385);
      v24 = 8 * v22;
      do
      {
        v23 += 8;
        llvm::NamedMDNode::addOperand();
        v24 -= 8;
      }
      while (v24);
    }
  }
  llvm::Module::getOrInsertNamedMetadata();
  v25 = *((unsigned int *)this + 716);
  if ((_DWORD)v25)
  {
    v26 = *((_QWORD *)this + 357);
    v27 = 8 * v25;
    do
    {
      v26 += 8;
      llvm::NamedMDNode::addOperand();
      v27 -= 8;
    }
    while (v27);
  }
  llvm::Module::getOrInsertNamedMetadata();
  v28 = *((unsigned int *)this + 736);
  if ((_DWORD)v28)
  {
    v29 = *((_QWORD *)this + 367);
    v30 = 8 * v28;
    do
    {
      v29 += 8;
      llvm::NamedMDNode::addOperand();
      v30 -= 8;
    }
    while (v30);
  }
  return 1;
}

uint64_t AGCLLVMObject::needsThreadgroupMemoryOOBChecks(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShader::setupShaderInputs(AGCLLVMAGPVertexShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Type **v13;
  llvm::Value *DriverGlobalConstant;
  llvm::Type **v15;
  llvm::Value *v16;
  llvm::Type **v17;
  llvm::Value *VertexAmpId;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t Function;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t FirstInsertionPt;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t VIRead;
  uint64_t v37;
  uint64_t Cast;
  llvm::Value *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inserted;
  uint64_t v45;
  llvm::IRBuilderBase *v46;
  llvm::Value *v47;
  uint64_t Add;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int *v67;
  llvm::Instruction *v68;
  uint64_t v69;
  llvm::Type **GlobalBufferBinding;
  llvm::Type *v71;
  char v72;
  char *v73;
  llvm::Value *v74;
  llvm::Type *v75;
  uint64_t AlignedLoad;
  char *v77;
  llvm::Type *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  llvm::Function *v83;
  char *v84;
  llvm::BasicBlock *v85;
  llvm::Function *v86;
  char *i;
  _QWORD *v88;
  char *v89;
  char *v90;
  _QWORD v91[4];
  __int16 v92;
  _QWORD v93[2];
  _QWORD v94[2];
  int v95;
  int v96;
  const char *v97;
  const char *v98;
  int v99;
  int v100;
  const char *v101;
  const char *v102;
  int v103;
  int v104;
  const char *v105;
  const char *v106;
  int v107;
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  AGCLLVMUserVertexShader::setupShaderInputs(this);
  v2 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v4 = *((_QWORD *)this + 22);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  for (i = (char *)this + 368; v3 != v5; v3 += 40)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
      v7 = v6 ? v6 - 24 : 0;
      v8 = *(_QWORD *)(v7 + 40);
      v9 = v8 ? (llvm::Instruction *)(v8 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v9, *((_QWORD *)this + 6));
      v10 = *(unsigned int *)(v3 + 32);
      v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v10);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v3, v10, v11) & 1) == 0)
      {
        if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_count"))
        {
          v12 = *(_QWORD *)(*(_QWORD *)this - 24);
          if (!*(_BYTE *)(*(_QWORD *)&i[v12 + 32] + 1753))
            goto LABEL_83;
          v13 = (llvm::Type **)((char *)this + v12 + 32);
          DriverGlobalConstant = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(this, (llvm::Value *)0x54);
          *((_QWORD *)this + 634) = AGCLLVMBuilder::truncateToSmall(v13, DriverGlobalConstant, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
          *((_BYTE *)this + 5081) = 1;
        }
        else if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_mask"))
        {
          v12 = *(_QWORD *)(*(_QWORD *)this - 24);
          if (!*(_BYTE *)(*(_QWORD *)&i[v12 + 32] + 1753))
            goto LABEL_83;
          v15 = (llvm::Type **)((char *)this + v12 + 32);
          v16 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(this, (llvm::Value *)0x55);
          *((_QWORD *)this + 634) = AGCLLVMBuilder::truncateToSmall(v15, v16, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
        }
        else if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_id"))
        {
          v12 = *(_QWORD *)(*(_QWORD *)this - 24);
          if (!*(_BYTE *)(*(_QWORD *)&i[v12 + 32] + 1753))
          {
LABEL_83:
            std::string::append((std::string *)((char *)this + v12 + 8), "Vertex amplification is not supported by target architecture.");
            return 0;
          }
          v17 = (llvm::Type **)((char *)this + v12 + 32);
          VertexAmpId = AGCLLVMUserVertexShader::getVertexAmpId(this, *((_DWORD *)this + 1272));
          *((_QWORD *)this + 633) = AGCLLVMBuilder::truncateToSmall(v17, VertexAmpId, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
          *((_BYTE *)this + 5080) = 1;
        }
      }
    }
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
  if (v22)
    v23 = (llvm::BasicBlock *)(v22 - 24);
  else
    v23 = 0;
  v89 = (char *)this + 200;
  v90 = (char *)this + 8;
  v84 = (char *)this + 5024;
  v85 = v23;
  do
  {
    if ((&off_1E7E6CBA8)[2 * v19])
      strlen((&off_1E7E6CBA8)[2 * v19]);
    Function = llvm::Module::getFunction();
    v25 = (char *)this + 368;
    if (Function)
    {
      v83 = (llvm::Function *)Function;
      v26 = *(_QWORD *)(Function + 8);
      if (v26)
      {
        v27 = LODWORD((&off_1E7E6CBA8)[2 * v19 + 1]);
        do
        {
          v28 = *(uint64_t **)(v26 + 24);
          v26 = *(_QWORD *)(v26 + 8);
          if (v28[1])
          {
            if ((_DWORD)v27 == 3)
              v29 = v20;
            else
              v29 = v21;
            if (!v29)
            {
              v30 = (uint64_t)&v90[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
              FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v85);
              llvm::IRBuilderBase::SetInsertPoint(v30, (uint64_t)v85, FirstInsertionPt);
              v32 = *(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
              v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 464))(v32);
              v34 = *(_QWORD *)(*(_QWORD *)this - 24);
              if (v33)
              {
                v35 = (char *)this + v34 + 40;
                VIRead = AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)v84, v27);
                v37 = *(_QWORD *)&v89[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                LOWORD(v98) = 257;
                Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v35, 49, VIRead, v37, (uint64_t)v94);
                v39 = (llvm::Value *)Cast;
                if ((_DWORD)v27 == 3)
                  v40 = (uint64_t)v21;
                else
                  v40 = Cast;
                v41 = v25;
                if ((_DWORD)v27 == 3)
                  v42 = Cast;
                else
                  v42 = (uint64_t)v20;
                v43 = *(_QWORD *)&v41[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 472))(v43, v27))
                {
                  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
                  v45 = *(_QWORD *)(*(_QWORD *)this - 24);
                  v46 = (AGCLLVMAGPVertexShader *)((char *)this + v45 + 40);
                  LOWORD(v98) = 257;
                  v47 = llvm::IRBuilderBase::CreateCall((uint64_t)&v90[v45 + 32], **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v94);
                  v92 = 257;
                  Add = llvm::IRBuilderBase::CreateAdd(v46, v39, v47, (const llvm::Twine *)v91);
                  if ((_DWORD)v27 == 3)
                    v20 = (_QWORD *)Add;
                  else
                    v21 = (_QWORD *)Add;
                }
                else
                {
                  v21 = (_QWORD *)v40;
                  v20 = (_QWORD *)v42;
                }
                v25 = (char *)this + 368;
              }
              else
              {
                v49 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)&v25[v34 + 32] + 440))(*(_QWORD *)&v25[v34 + 32], v84, v27);
                v50 = *((unsigned int *)this + 2500);
                if (v50 >= *((unsigned int *)this + 2501))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v50 = *((unsigned int *)this + 2500);
                }
                *(_QWORD *)(*((_QWORD *)this + 1249) + 8 * v50) = (v27 << 32) | v49;
                ++*((_DWORD *)this + 2500);
                v51 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
                v52 = AGCLLVMUserVertexShader::createVIRead(this);
                v53 = *(_QWORD *)&v89[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                LOWORD(v98) = 257;
                v54 = llvm::IRBuilderBase::CreateCast((uint64_t)v51, 49, (uint64_t)v52, v53, (uint64_t)v94);
                if ((_DWORD)v27 == 3)
                  v20 = (_QWORD *)v54;
                else
                  v21 = (_QWORD *)v54;
              }
            }
            if ((_DWORD)v27 == 3)
              v55 = v20;
            else
              v55 = v21;
            v56 = *v28;
            if (*v55 != *v28)
            {
              v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
              LOWORD(v98) = 257;
              llvm::IRBuilderBase::CreateCast((uint64_t)v57, 38, (uint64_t)v55, v56, (uint64_t)v94);
            }
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v28);
        }
        while (v26);
      }
      llvm::Function::eraseFromParent(v83);
    }
    ++v19;
  }
  while (v19 != 4);
  v94[0] = "air.get_base_vertex.i32";
  v94[1] = "base_vertex";
  v58 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 152))(v58);
  v96 = 0;
  v97 = "air.get_base_vertex.i16";
  v98 = "base_vertex";
  v59 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 152))(v59);
  v100 = 0;
  v101 = "air.get_base_instance.i32";
  v102 = "base_instance";
  v60 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 160))(v60);
  v104 = 1;
  v105 = "air.get_base_instance.i16";
  v106 = "base_instance";
  v61 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v62 = 0;
  v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 160))(v61);
  v108 = 1;
  v93[0] = 0;
  v93[1] = 0;
  do
  {
    if (v94[3 * v62])
      strlen((const char *)v94[3 * v62]);
    v63 = llvm::Module::getFunction();
    if (v63)
    {
      v86 = (llvm::Function *)v63;
      v64 = *(_QWORD *)(v63 + 8);
      if (v64)
      {
        v65 = &v94[3 * v62];
        v66 = (unsigned int *)v65 + 5;
        v88 = v65 + 1;
        v67 = (unsigned int *)(v65 + 2);
        do
        {
          v68 = *(llvm::Instruction **)(v64 + 24);
          v64 = *(_QWORD *)(v64 + 8);
          if (*((_QWORD *)v68 + 1))
          {
            v69 = *v66;
            GlobalBufferBinding = (llvm::Type **)v93[v69];
            if (!GlobalBufferBinding)
            {
              v71 = (llvm::Type *)llvm::PointerType::get();
              if (*(_BYTE *)*v88)
              {
                v91[2] = *v88;
                v72 = 3;
              }
              else
              {
                v72 = 1;
              }
              v91[0] = "agc.buffer_pointers.";
              LOBYTE(v92) = 3;
              HIBYTE(v92) = v72;
              GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(this, v71, (const llvm::Twine *)v91, *v67, 4, 5, 0);
              v93[v69] = GlobalBufferBinding;
            }
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v68);
            v73 = &v90[*(_QWORD *)(*(_QWORD *)this - 24)];
            v92 = 257;
            v75 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v74);
            AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v73 + 4, v75, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v91);
            v77 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v78 = (llvm::Type *)*((_QWORD *)v77 + 29);
            v92 = 257;
            v79 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v77 + 5, v78, AlignedLoad, 0, (uint64_t)v91);
            v80 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
            v81 = *(_QWORD *)v68;
            v92 = 257;
            llvm::IRBuilderBase::CreateCast((uint64_t)v80, 38, v79, v81, (uint64_t)v91);
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent(v68);
        }
        while (v64);
      }
      llvm::Function::eraseFromParent(v86);
    }
    ++v62;
  }
  while (v62 != 4);
  return 1;
}

uint64_t AGCLLVMUserObject::replaceSamplerFunctionUses(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  BOOL v10;
  std::string *v11;
  const std::string::value_type *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Instruction *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t ConstantSamplerGlobal;
  unsigned __int8 *v24;
  int isConstantSampler;
  char v26;
  llvm::Type *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  llvm::Value *Splat;
  uint64_t i;
  uint64_t AggregateElement;
  llvm::Value *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  llvm::IRBuilderBase *v44;
  llvm::Value *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int DefaultRoundingMode;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Type **v69;
  llvm::Value *v70;
  llvm::Type *v71;
  uint64_t *v72;
  uint64_t AlignedLoad;
  uint64_t GlobalVarValue;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  uint64_t GlobalVariable;
  uint64_t v79;
  llvm::Value *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  char v84;
  llvm::GlobalVariable *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::Value *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  llvm::Value *v94;
  int v95;
  _BOOL4 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Value *v103;
  uint64_t v104;
  uint64_t v105;
  llvm::Value *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  llvm::IRBuilderBase *v110;
  uint64_t FPExt;
  uint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::Instruction *v117;
  uint64_t v118;
  llvm::Instruction *v119;
  uint64_t v120;
  uint64_t v121;
  llvm::Value *v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  llvm::IRBuilderBase *v135;
  llvm::Type **v136;
  llvm::IRBuilderBase *v137;
  llvm::Type **v138;
  llvm::IRBuilderBase *v139;
  llvm::Type *v140;
  llvm::Value *TruncOrBitCast;
  llvm::IRBuilderBase *v142;
  llvm::Type *v143;
  llvm::Value *v144;
  llvm::Value *v145;
  uint64_t v146;
  llvm::IRBuilderBase *v147;
  llvm::Value *v148;
  llvm::Value *InsertElement;
  uint64_t v150;
  llvm::IRBuilderBase *v151;
  llvm::Value *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  BOOL v156;
  unsigned int v157;
  __int128 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t Value;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  llvm::Value *v165;
  uint64_t v166;
  llvm::Type **v167;
  llvm::Value *v168;
  llvm::Type *v169;
  llvm::Value *v170;
  uint64_t v171;
  llvm::IRBuilderBase *v172;
  llvm::Value *v173;
  llvm::Value *Element;
  llvm::Value *v175;
  llvm::Type **Sub;
  llvm::IRBuilderBase *v177;
  llvm::CmpInst **v178;
  llvm::Type *v179;
  llvm::Type **ZExtOrTrunc;
  llvm::Value *ICmp;
  uint64_t *v182;
  llvm::CmpInst **v183;
  uint64_t v184;
  llvm::Value *v185;
  llvm::Value *v186;
  uint64_t v187;
  llvm::IRBuilderBase *v188;
  llvm::Value *v189;
  llvm::Value *v190;
  uint64_t v191;
  llvm::Value *v192;
  llvm::Value *v193;
  uint64_t v194;
  void **v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  llvm::Value *v201;
  llvm::Type *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  _BOOL4 v208;
  uint64_t v209;
  int v210;
  llvm::Constant **v211;
  uint64_t v212;
  uint64_t v213;
  llvm::IRBuilderBase *v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  uint64_t *v218;
  BOOL v219;
  BOOL v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  llvm::Type **v224;
  llvm::Value *v225;
  llvm::Type *v226;
  llvm::Value *v227;
  uint64_t v228;
  llvm::IRBuilderBase *v229;
  llvm::Value *v230;
  uint64_t v231;
  llvm::Value *v232;
  uint64_t *LShr;
  uint64_t v234;
  uint64_t v235;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v237;
  uint64_t v238;
  llvm::Value *v239;
  llvm::IRBuilderBase *v240;
  llvm::Value *v241;
  uint64_t v242;
  uint64_t v243;
  AGCLLVMBuilder *v244;
  llvm::Type **v245;
  llvm::Value *Load;
  llvm::IRBuilderBase *v247;
  llvm::Value *v248;
  llvm::Value *UIToFP;
  llvm::IRBuilderBase *v250;
  llvm::Value *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  llvm::IRBuilderBase *v255;
  llvm::Value *v256;
  uint64_t *v257;
  llvm::Value *v258;
  uint64_t v259;
  llvm::Value *v260;
  uint64_t v261;
  llvm::IRBuilderBase *v262;
  llvm::Value *v263;
  uint64_t v264;
  uint64_t v265;
  llvm::CmpInst **v266;
  uint64_t *v267;
  llvm::Value *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  llvm::Value *v272;
  uint64_t PtrToInt;
  uint64_t v274;
  llvm::Type **v275;
  llvm::Value *v276;
  llvm::Type *v277;
  llvm::Value *v278;
  uint64_t v279;
  llvm::IRBuilderBase *v280;
  llvm::Value *v281;
  llvm::Value *v282;
  llvm::Value *v283;
  llvm::Value *v284;
  uint64_t v285;
  llvm::IRBuilderBase *v286;
  llvm::Value *v287;
  uint64_t v288;
  unsigned int *v289;
  BOOL v290;
  uint64_t v291;
  _QWORD *v292;
  const char *v293;
  std::string *v295;
  AGCLLVMBuilder *v296;
  void **v297;
  std::string::size_type v298;
  int v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  int v303;
  uint64_t v304;
  unsigned int v305;
  llvm::Value *v306;
  llvm::Value *v307;
  llvm::Value *v308;
  llvm::BasicBlock *v309;
  llvm::BasicBlock *NullValue;
  int v311;
  uint64_t v312;
  llvm::CmpInst **v313;
  int v314;
  llvm::Constant *v315;
  int v316;
  _BOOL4 v317;
  AGCLLVMUserObject *v318;
  uint64_t v319;
  int v320;
  int v321;
  int v322;
  llvm::Constant **v323;
  uint64_t v324;
  __int128 v325;
  llvm::Type *v326;
  int v327;
  __int128 v328;
  llvm::Type *v329;
  int v330;
  __int128 v331;
  uint64_t v332;
  int v333;
  __int128 v334;
  uint64_t v335;
  int v336;
  std::string v337;
  __int16 v338;
  void *__p[2];
  AGCLLVMBuilder *v340;
  __int16 v341;
  __int128 v342;
  uint64_t v343;
  int v344;
  __int128 v345;
  uint64_t v346;
  int v347;
  __int16 v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  _DWORD v354[4];
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int16 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  llvm::Type **v363;
  int v364;
  __int128 v365;
  _QWORD v366[4];
  uint64_t v367;
  uint64_t *Select;
  llvm::CmpInst **v369;
  BOOL v370;
  __int16 v371;
  char v372;
  char v373;
  uint64_t v374;
  char v375;
  void *v376[2];
  unint64_t v377;
  __int16 v378;
  uint64_t v379;

  v379 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v8 = *(_BYTE **)(v7 + a1 + 400);
  v9 = *a3;
  if (v8[1750])
    v10 = 0;
  else
    v10 = a3[1] == 2;
  if (v10)
  {
    if ((v9 & 0xFFFFFFFE) == 2)
    {
      v11 = (std::string *)(a1 + v7 + 8);
      v12 = "Read or write to cube texture not supported";
LABEL_393:
      std::string::append(v11, v12);
      return 0;
    }
  }
  else if (v9 == 3)
  {
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 392))(v8, *(_QWORD *)(a1 + 168));
    v6 = *(_QWORD *)a1;
    v9 = *a3;
    v8 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  }
  if (v8[1741])
    v13 = v9 == 8;
  else
    v13 = 0;
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t))(v6 + 432))(a1);
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 35) & 2) != 0)
      {
        v11 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
        v12 = "Large MRT not supported with image block write";
        goto LABEL_393;
      }
    }
  }
  v351 = llvm::PointerType::get();
  llvm::StructType::get();
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  v311 = *((unsigned __int8 *)a3 + 40);
  if (*((_BYTE *)a3 + 40))
    v317 = *(_BYTE *)(v15 + 1732) != 0;
  else
    v317 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = 1;
  if (!v16)
    return v17;
  v324 = a1 + 368;
  v303 = *(unsigned __int8 *)(v15 + 1739);
  v304 = a1 + 8;
  v316 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8);
  v305 = *a3 & 0xFFFFFFFE;
  while (1)
  {
    v18 = *(llvm::Instruction **)(v16 + 24);
    v16 = *(_QWORD *)(v16 + 8);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v18);
    v19 = *(_QWORD *)a3;
    memset(v354, 0, 11);
    v355 = 0u;
    v356 = 0u;
    v357 = 0u;
    v358 = 0u;
    v359 = 0;
    v360 = 0u;
    v361 = 0u;
    v362 = 0u;
    v363 = 0;
    v372 = 0;
    v365 = 0u;
    memset(v366, 0, 28);
    Select = 0;
    v369 = 0;
    v367 = 0;
    v373 = 1;
    v374 = 0;
    v375 = 0;
    v20 = a3[3];
    v370 = *((_BYTE *)a3 + 47) != 0;
    v371 = *((unsigned __int8 *)a3 + 46);
    v364 = 4;
    v21 = *((_DWORD *)v18 + 5) & 0x7FFFFFF;
    v351 = v19;
    v352 = v20;
    v22 = (_DWORD *)((char *)v18 - 32 * v21);
    ConstantSamplerGlobal = *((_BYTE *)a3 + 31) ? *(_QWORD *)&v22[8 * *((unsigned __int8 *)a3 + 31)] : 0;
    v24 = *(unsigned __int8 **)&v22[8 * *((unsigned __int8 *)a3 + 30)];
    if (!v24 || v24[16] - 11 >= 2)
    {
      if (!ConstantSamplerGlobal)
      {
        isConstantSampler = 0;
        v350 = 0;
        v349 = 0;
        if (!v24)
          goto LABEL_35;
        goto LABEL_33;
      }
      if (*(unsigned __int8 *)(ConstantSamplerGlobal + 16) - 11 >= 2)
        break;
    }
    llvm::UndefValue::get();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v18);
LABEL_371:
    if (!v16)
      return 1;
  }
  v350 = 0;
  v349 = 0;
  isConstantSampler = AGCLLVMUserObject::isConstantSampler((AGCLLVMUserObject *)a1, (llvm::Value *)ConstantSamplerGlobal, &v350, &v349);
  if (!v24)
    goto LABEL_35;
LABEL_33:
  if (*(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v24) + 16) >= 0x15u
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1))
  {
    goto LABEL_371;
  }
LABEL_35:
  if ((isConstantSampler & 1) == 0)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
    if (ConstantSamplerGlobal)
    {
      if ((v26 & 1) == 0
        && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)ConstantSamplerGlobal) + 16) > 0x14u)
      {
        goto LABEL_371;
      }
    }
  }
  if (((!v317 | isConstantSampler | (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1) ^ 1) & 1) != 0)
  {
    if ((llvm::AttributeList::hasFnAttr() & 1) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) != 0
      || a3[4] >= 2)
    {
      v375 = 1;
    }
    v348 = 0;
    if (isConstantSampler && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v324 + 32) + 1780))
    {
      v28 = v350;
      if (v317)
      {
        v29 = ((v350 >> 16) & 0xF) - 1;
        if (v29 > 7)
          LOBYTE(v30) = 0;
        else
          v30 = dword_1C3DF8538[v29];
        v348 = (32 * ((v350 & 0x6000) != 0)) | (((v350 & 0x6000) == 0x4000) << 6) | (((v350 & 0x1800) == 2048) << 7) | (((v350 & 0x600) == 512) << 8) | v30 & 0xF;
        v28 = v350 & 0xFFFFFFFFFFF0FFFFLL;
      }
      ConstantSamplerGlobal = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(a1, v28, v349);
    }
    BYTE1(v354[2]) = (*a3 - 9) < 2;
    v31 = *((unsigned __int8 *)a3 + 35);
    v318 = (AGCLLVMUserObject *)v24;
    v320 = isConstantSampler;
    v319 = v16;
    if (*((_BYTE *)a3 + 35))
    {
      v32 = (_DWORD *)((char *)v18 - 32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
      v33 = *(_QWORD *)&v32[8 * v31];
      v34 = (_QWORD *)(v33 + 24);
      if (*(_DWORD *)(v33 + 32) >= 0x41u)
        v34 = (_QWORD *)*v34;
      if (*v34)
      {
        v35 = *(unsigned __int8 **)&v32[8 * v31 + 8];
        if (!v35 || v35[16] > 0x14u)
        {
          Splat = *(llvm::Value **)&v32[8 * v31 + 8];
LABEL_70:
          *((_QWORD *)&v362 + 1) = Splat;
          v16 = v319;
          v24 = (unsigned __int8 *)v318;
          goto LABEL_71;
        }
        if ((llvm::Constant::isZeroValue((llvm::Constant *)v35) & 1) == 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)v35 + 8) & 0xFE) == 0x12)
          {
            v36 = *(unsigned int *)(*(_QWORD *)v35 + 32);
            llvm::ConstantInt::get();
            Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
            if ((_DWORD)v36)
            {
              for (i = 0; i != v36; ++i)
              {
                AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v35);
                v40 = (llvm::Value *)AggregateElement;
                v41 = *(_DWORD *)(AggregateElement + 32);
                if (v41 > 0x40)
                  v42 = **(_QWORD **)(AggregateElement + 24);
                else
                  v42 = (uint64_t)(*(_QWORD *)(AggregateElement + 24) << -(char)v41) >> -(char)v41;
                if ((unint64_t)(v42 - 8) <= 0xFFFFFFFFFFFFFFEFLL)
                  v40 = (llvm::Value *)llvm::ConstantInt::get();
                v43 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v44 = (llvm::IRBuilderBase *)(v43 + 40);
                v45 = (llvm::Value *)llvm::ConstantInt::get();
                Splat = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v44, Splat, v40, v45, (const llvm::Twine *)v376);
                isConstantSampler = v320;
              }
            }
          }
          else
          {
            v123 = *((_DWORD *)v35 + 8);
            if (v123 > 0x40)
              v124 = **((_QWORD **)v35 + 3);
            else
              v124 = (uint64_t)(*((_QWORD *)v35 + 3) << -(char)v123) >> -(char)v123;
            Splat = (llvm::Value *)v35;
            if ((unint64_t)(v124 - 8) <= 0xFFFFFFFFFFFFFFEFLL)
              Splat = (llvm::Value *)llvm::ConstantInt::get();
          }
          goto LABEL_70;
        }
      }
    }
LABEL_71:
    if (*((_BYTE *)a3 + 39) && BYTE1(v354[2]))
    {
      v46 = llvm::ConstantInt::get();
    }
    else
    {
      if (!*((_BYTE *)a3 + 39))
        goto LABEL_77;
      v46 = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 39) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
    }
    v363 = (llvm::Type **)v46;
LABEL_77:
    if (v316 == 16)
    {
      if (!v317)
        LOBYTE(v354[2]) = 1;
      if (*((_BYTE *)a3 + 45))
        v366[1] = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 45) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
    }
    v47 = *((unsigned __int8 *)a3 + 37);
    if (*((_BYTE *)a3 + 37))
    {
      *((_QWORD *)&v365 + 1) = *((_QWORD *)v18 + 4 * v47 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
      v366[0] = *((_QWORD *)v18 + 4 * v47 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 4);
      v364 = 2;
      goto LABEL_84;
    }
    if (*((_BYTE *)a3 + 36))
    {
      v63 = (uint64_t *)((char *)v18 + 32 * *((unsigned __int8 *)a3 + 36) + -32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
      v64 = *v63;
      *(_QWORD *)&v365 = v63[4];
      v65 = (_QWORD *)(v64 + 24);
      if (*(_DWORD *)(v64 + 32) >= 0x41u)
        v65 = (_QWORD *)*v65;
      v66 = (_QWORD *)*v65;
      v364 = *v65 != 0;
      if (HIDWORD(v351))
      {
        v67 = *(_QWORD *)a1;
        if (!v66)
        {
          if (!(*(unsigned int (**)(uint64_t))(v67 + 320))(a1))
          {
            v364 = 1;
            goto LABEL_84;
          }
          v67 = *(_QWORD *)a1;
        }
        if (!(*(unsigned int (**)(uint64_t))(v67 + 368))(a1))
          goto LABEL_84;
        v364 = 0;
        v68 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v304;
        v69 = (llvm::Type **)AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, ConstantSamplerGlobal, 1u);
        v378 = 257;
        v71 = AGCLLVMBuilder::tryDeducePointeeType(v69, v70);
        v72 = (uint64_t *)(v68 + 32);
        isConstantSampler = v320;
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v72, v71, (uint64_t)v69, 0, (uint64_t)v376);
        goto LABEL_363;
      }
LABEL_357:
      v364 = 3;
      *(_QWORD *)&v365 = 0;
      goto LABEL_84;
    }
    v81 = *((unsigned __int8 *)a3 + 38);
    if (*((_BYTE *)a3 + 38))
    {
      if (HIDWORD(v351))
      {
        v364 = 1;
        v82 = *((_QWORD *)v18 + 4 * v81 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
      }
      else if ((_DWORD)v351 == 3)
      {
        v364 = 1;
        v82 = llvm::ConstantInt::get();
      }
      else
      {
        v82 = 0;
        v364 = 3;
      }
      *(_QWORD *)&v365 = v82;
      if (!v303 || *a3 != 8 && *a3 != 3)
      {
LABEL_84:
        if (v311)
          v366[2] = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), *((llvm::Value **)v18 + 4 * *((unsigned __int8 *)a3 + 40)+ -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)), 1);
        if (*((_BYTE *)a3 + 41))
          v367 = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 41) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
        v48 = *a3;
        if (*a3 == 8 || v48 == 3)
        {
          DefaultRoundingMode = a3[6];
          v50 = *(_QWORD *)a1;
          if (!DefaultRoundingMode)
          {
            DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(a1 + *(_QWORD *)(v50 - 24)));
            v50 = *(_QWORD *)a1;
          }
          v51 = *(_QWORD *)(v50 - 24);
          v52 = *(_BYTE **)(v51 + v324 + 32);
          if (DefaultRoundingMode == 2 && !v52[1769])
          {
            v11 = (std::string *)(v304 + v51);
            v12 = "The specified rounding mode is not supported on this device.";
            goto LABEL_393;
          }
          v354[0] = AGCLLVMTargetLowerer::getRTZMode(v52, DefaultRoundingMode);
          v48 = *a3;
        }
        v53 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        if (*(_BYTE *)(*(_QWORD *)(v53 + v324 + 32) + 1771))
          v54 = v48 == 0;
        else
          v54 = 0;
        if (v54 && AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(a1 + v53)) == 1)
          LOBYTE(v354[1]) = 1;
        if (*((_BYTE *)a3 + 42))
        {
          Select = (uint64_t *)*((_QWORD *)v18
                              + 4 * *((unsigned __int8 *)a3 + 42)
                              + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
          v55 = *Select;
          if ((*(_DWORD *)(*Select + 8) & 0xFE) == 0x12)
            v55 = **(_QWORD **)(v55 + 16);
          v56 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          if (v55 == *(_QWORD *)(v56 + 200) && (v354[0] & 0xFFFFFFFE) == 2)
          {
            v57 = v56 + 32;
            v345 = *(_OWORD *)(v56 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v56 + 40));
            v347 = *(_DWORD *)(v57 + 104);
            AGCLLVMUserObject::buildEmulatedIsF16Format((_BYTE *)a1, &v345, (AGCLLVMUserObject *)v24);
            if (v346)
              llvm::MetadataTracking::untrack();
            v58 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v59 = *(_QWORD *)(v58 + 400);
            v342 = *(_OWORD *)(v58 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v58 + 40));
            v344 = *(_DWORD *)(v58 + 136);
            AGCLLVMTargetLowerer::buildRTZF16Value(v59, (uint64_t)&v342, Select, v354[0] == 3);
            if (v343)
              llvm::MetadataTracking::untrack();
            v378 = 257;
            Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
            v24 = (unsigned __int8 *)v318;
            isConstantSampler = v320;
          }
        }
        if (*((_BYTE *)a3 + 43))
          v369 = (llvm::CmpInst **)*((_QWORD *)v18
                                   + 4 * *((unsigned __int8 *)a3 + 43)
                                   + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
        if (*((_BYTE *)a3 + 44))
        {
          v60 = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 44) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
          v61 = (_QWORD *)(v60 + 24);
          if (*(_DWORD *)(v60 + 32) >= 0x41u)
            v61 = (_QWORD *)*v61;
          v62 = *(_BYTE *)v61;
        }
        else
        {
          if (v305 != 4)
          {
LABEL_130:
            GlobalVarValue = 0;
            v314 = *a3;
            if (ConstantSamplerGlobal || *a3 == 8)
              goto LABEL_161;
            __p[0] = (void *)4;
            __p[1] = 0;
            v340 = 0;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1))
            {
              if (HIDWORD(v351))
                v77 = "agc.nnorm_sampler_wrapper_non_1d";
              else
                v77 = "agc.nnorm_sampler_wrapper_1d";
              GlobalVariable = llvm::Module::getGlobalVariable();
              if (GlobalVariable)
              {
                v79 = GlobalVariable;
              }
              else
              {
                if (HIDWORD(v351))
                  v83 = "agc.nnorm_sampler_non_1d";
                else
                  v83 = "agc.nnorm_sampler_1d";
                v84 = 1;
                v85 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
                HIBYTE(v378) = 1;
                if (*v83)
                {
                  v376[0] = (void *)v83;
                  v86 = 3;
                }
                else
                {
                  v86 = 1;
                }
                LOBYTE(v378) = v86;
                llvm::GlobalVariable::GlobalVariable();
                *((_BYTE *)v85 + 80) |= 1u;
                v125 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v324 + 32) + 1700);
                v126 = __clz(v125) ^ 0x13F;
                if ((_DWORD)v125)
                  v127 = v126;
                else
                  v127 = 0;
                v302 = v127 | v302 & 0xFFFFFFFFFFFF0000;
                llvm::GlobalObject::setAlignment();
                llvm::GlobalObject::setSection();
                v128 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v129 = *(_QWORD *)(v128 + 376);
                v130 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v128 + 32), v85);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v129, v130);
                v376[0] = v85;
                llvm::ConstantStruct::get();
                v79 = llvm::User::operator new((llvm::User *)0x58);
                HIBYTE(v378) = 1;
                if (*v77)
                {
                  v376[0] = (void *)v77;
                  v84 = 3;
                }
                isConstantSampler = v320;
                LOBYTE(v378) = v84;
                LOBYTE(v301) = 0;
                v300 = 0x100000002;
                v299 = 0;
                llvm::GlobalVariable::GlobalVariable();
                *(_BYTE *)(v79 + 80) |= 1u;
                llvm::GlobalVariable::setInitializer();
                v376[0] = (void *)4;
                v376[1] = 0;
                v131 = v79;
                v377 = v79;
                if (v79 != -8192)
                {
                  v131 = v79;
                  if (v79 != -4096)
                  {
                    v131 = v79;
                    if (v79)
                    {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v376);
                      v131 = v377;
                    }
                  }
                }
                std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>((uint64_t *)(a1 + 824), v131, v376);
                v24 = (unsigned __int8 *)v318;
                if (v377 != -8192 && v377 != -4096 && v377)
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v376);
              }
              llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)__p, v79);
              GlobalVarValue = AGCLLVMBuilder::getGlobalVarValue(v340, v80);
              v16 = v319;
              goto LABEL_157;
            }
            if (*a3 == 3)
            {
              v76 = 0x807BFF0000002049;
              if (!a3[1])
              {
LABEL_137:
                v75 = v76 & 0xFFFFFFFFFFFF9FFFLL;
                goto LABEL_154;
              }
            }
            else
            {
              v75 = 0x807BFF0000002049;
              if (*a3 != 2)
                goto LABEL_154;
              v76 = 0x807BFF0000002000;
              if (!*((_BYTE *)a3 + 49))
              {
                v76 = ((*(_BYTE *)(a1 + 14) << 6) | (8 * *(_BYTE *)(a1 + 14)) | *(_BYTE *)(a1 + 14)) | 0x807BFF0000002000;
                if (!a3[1])
                  goto LABEL_137;
              }
            }
            v75 = v76 & 0xFFFFFFFFFFFF9FFFLL | 0x2000;
LABEL_154:
            v87 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            if (*(_DWORD *)(*(_QWORD *)(v87 + v324 + 32) + 1780))
            {
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(v87 + a1 + 40), v18);
              v88 = llvm::PointerType::get();
              GlobalVarValue = AGCLLVMUserObject::getBindlessConstantSampler(a1, v75, 0, v88);
              isConstantSampler = 1;
            }
            else
            {
              v89 = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(a1, v75, 0);
              llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)__p, v89);
              GlobalVarValue = AGCLLVMBuilder::getGlobalVarValue(v340, v90);
            }
LABEL_157:
            if (v340 != (AGCLLVMBuilder *)-8192 && v340 != (AGCLLVMBuilder *)-4096 && v340)
            {
              v91 = GlobalVarValue;
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)__p);
              GlobalVarValue = v91;
            }
LABEL_161:
            if (*((_BYTE *)a3 + 47))
            {
              v92 = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 46) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
              if (v92)
              {
                if (*(_BYTE *)(v92 + 16) == 16)
                {
                  v93 = (_QWORD *)(v92 + 24);
                  if (*(_DWORD *)(v92 + 32) >= 0x41u)
                    v93 = (_QWORD *)*v93;
                  v371 = *v93;
                }
              }
            }
            v307 = (llvm::Value *)GlobalVarValue;
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v18);
            v94 = (llvm::Value *)*((_QWORD *)v18
                                 + 4 * *((unsigned __int8 *)a3 + 34)
                                 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
            *(_QWORD *)&v362 = v94;
            v95 = a3[1];
            v97 = v95 == 2 && *a3 != 8;
            if (v95 == 3 || v97)
            {
              v94 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v94, 4);
              v309 = 0;
              v312 = 0;
LABEL_229:
              *(_QWORD *)&v362 = v94;
              goto LABEL_230;
            }
            if (!*((_BYTE *)a3 + 49))
            {
              v309 = 0;
              v312 = 0;
LABEL_230:
              v153 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
              v154 = a1 + v153;
              v155 = *(_BYTE **)(a1 + v153 + 368);
              if (v155[1765] && !*(_BYTE *)(a1 + 20))
              {
                if (*a3 == 2)
                {
                  v334 = *(_OWORD *)(v154 + 56);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v154 + 8));
                  v336 = *(_DWORD *)(v154 + 104);
                  (*(void (**)(_BYTE *, __int128 *, uint64_t, unsigned __int8 *, uint64_t *, _QWORD, _QWORD, _QWORD, int, uint64_t, int))(*(_QWORD *)v155 + 912))(v155, &v334, a1, v24, &v351, *((unsigned __int8 *)a3 + 39), *((unsigned __int8 *)a3 + 43), *((unsigned __int8 *)a3 + 41), v299, v300, v301);
                  if (v335)
                    llvm::MetadataTracking::untrack();
                }
                else if (*a3 == 3)
                {
                  if (a3[2] == 1)
                    *(_QWORD *)&v362 = AGCLLVMBuilder::clampToWidth((AGCLLVMBuilder *)(a1 + v153), (llvm::CmpInst **)v94, 0x10u, 0);
                  v322 = isConstantSampler;
                  v165 = (llvm::Value *)llvm::ConstantInt::get();
                  if (*((_BYTE *)a3 + 39))
                  {
                    v166 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v304;
                    v167 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, *((AGCLLVMUserObject **)v18 - 4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)), 2u);
                    v378 = 257;
                    v169 = AGCLLVMBuilder::tryDeducePointeeType(v167, v168);
                    v170 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v166 + 32), v169, (uint64_t)v167, 0, (uint64_t)v376);
                    v171 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                    v378 = 257;
                    v172 = (llvm::IRBuilderBase *)(v171 + 40);
                    v173 = (llvm::Value *)llvm::ConstantInt::get();
                    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v172, v170, v173, (const llvm::Twine *)v376);
                    v175 = (llvm::Value *)llvm::ConstantInt::get();
                    v341 = 257;
                    Sub = (llvm::Type **)llvm::IRBuilderBase::CreateSub(v172, Element, v175, (const llvm::Twine *)__p);
                    v177 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                    v178 = v363;
                    v179 = *v363;
                    v378 = 257;
                    ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc(v177, Sub, v179, (const llvm::Twine *)v376);
                    v341 = 257;
                    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v177, 34, v178, (uint64_t)ZExtOrTrunc, (uint64_t)__p);
                    v338 = 257;
                    v165 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v177, v165, ICmp, (const llvm::Twine *)&v337);
                  }
                  if (*((_BYTE *)a3 + 43))
                  {
                    v182 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                    v183 = v369;
                    v184 = llvm::ConstantInt::get();
                    v378 = 257;
                    v185 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v182, 34, v183, v184, (uint64_t)v376);
                    v341 = 257;
                    llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v182, v165, v185, (const llvm::Twine *)__p);
                  }
                  v24 = (unsigned __int8 *)v318;
                  v186 = (llvm::Value *)v362;
                  v187 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  if ((*(_DWORD *)(*(_QWORD *)v362 + 8) & 0xFE) == 0x12)
                  {
                    v378 = 257;
                    v188 = (llvm::IRBuilderBase *)(v187 + 40);
                    v189 = (llvm::Value *)llvm::ConstantInt::get();
                    llvm::IRBuilderBase::CreateExtractElement(v188, v186, v189, (const llvm::Twine *)v376);
                    v190 = (llvm::Value *)v362;
                    v191 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32;
                    llvm::ConstantInt::get();
                    v378 = 257;
                    v192 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
                    v341 = 257;
                    v193 = (llvm::Value *)llvm::ConstantInt::get();
                    *(_QWORD *)&v362 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v191 + 8), v190, v192, v193, (const llvm::Twine *)__p);
                    v16 = v319;
                    v24 = (unsigned __int8 *)v318;
                  }
                  else
                  {
                    llvm::ConstantInt::get();
                    v378 = 257;
                    *(_QWORD *)&v362 = llvm::IRBuilderBase::CreateSelect();
                  }
                  isConstantSampler = v322;
                }
              }
              BYTE2(v354[1]) = !v317;
              if (*((_BYTE *)a3 + 28))
                v156 = !v317;
              else
                v156 = 0;
              BYTE1(v354[1]) = v156;
              *(_QWORD *)&v357 = AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, (AGCLLVMUserObject *)v24, 2u);
              *((_QWORD *)&v357 + 1) = AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, (AGCLLVMUserObject *)v24, 3u);
              if (*a3 == 8 || *a3 == 3)
              {
                *(_QWORD *)&v355 = AGCLLVMUserObject::buildBindlessIndexAsPtr((AGCLLVMUserObject *)a1, (llvm::Value *)v24);
                *((_QWORD *)&v356 + 1) = AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, (AGCLLVMUserObject *)v24, 1u);
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1) & 1) != 0)
                  goto LABEL_241;
                v157 = 4;
                v158 = &v358;
              }
              else
              {
                v159 = AGCLLVMUserObject::buildBindlessIndexAsPtr((AGCLLVMUserObject *)a1, (llvm::Value *)v24);
                v157 = 0;
                *(_QWORD *)&v355 = v159;
                v158 = &v356;
              }
              *(_QWORD *)v158 = AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, (AGCLLVMUserObject *)v24, v157);
LABEL_241:
              if (v314 == 8)
              {
                v162 = *((unsigned __int8 *)a3 + 32);
                v359 = *(_WORD *)(a1 + 3564);
                *(_QWORD *)&v360 = *((_QWORD *)v18 + 4 * v162 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
                *((_QWORD *)&v360 + 1) = *((_QWORD *)v18 + 4 * v162 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 4);
                *(_QWORD *)&v361 = *((_QWORD *)v18 + 4 * v162 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 8);
                *((_QWORD *)&v361 + 1) = *((_QWORD *)v18 + 4 * v162 + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 12);
                v353 = a3[5];
                BYTE2(v354[2]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24))
                                                                    + 216))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) ^ 1;
                v163 = *((_QWORD *)v18 + 4 * *((unsigned __int8 *)a3 + 48) + -4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
                v164 = (_QWORD *)(v163 + 24);
                if (*(_DWORD *)(v163 + 32) >= 0x41u)
                  v164 = (_QWORD *)*v164;
                if (*v164)
                  v374 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
                goto LABEL_264;
              }
              if (v307)
              {
                v160 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                if (*(_DWORD *)(*(_QWORD *)(v160 + v324 + 32) + 1780))
                {
                  *((_QWORD *)&v355 + 1) = AGCLLVMUserObject::buildBindlessSamplerIndex((AGCLLVMUserObject *)a1, v307);
                  Value = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, (uint64_t)v307, 0);
                }
                else
                {
                  LODWORD(__p[0]) = 0;
                  v378 = 257;
                  Value = llvm::IRBuilderBase::CreateExtractValue(v160 + a1 + 40, (uint64_t)v307, (uint64_t)__p, 1, (uint64_t)v376);
                }
                *((_QWORD *)&v358 + 1) = Value;
                goto LABEL_264;
              }
              *((_QWORD *)&v355 + 1) = AGCLLVMUserObject::buildBindlessSamplerIndex((AGCLLVMUserObject *)a1, (llvm::Value *)ConstantSamplerGlobal);
              *((_QWORD *)&v358 + 1) = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, ConstantSamplerGlobal, 0);
              if ((isConstantSampler & 1) != 0)
              {
                if (v317)
                  goto LABEL_267;
                goto LABEL_275;
              }
              v215 = *(unsigned __int8 *)(ConstantSamplerGlobal + 16);
              if (!ConstantSamplerGlobal || (v216 = v215 - 28, v215 < 0x1C))
              {
                if (!ConstantSamplerGlobal || v215 != 5)
                  goto LABEL_322;
                v216 = *(unsigned __int16 *)(ConstantSamplerGlobal + 18);
              }
              if (v216 - 48 <= 2)
              {
                do
                {
                  v217 = *(_DWORD *)(ConstantSamplerGlobal + 20);
                  if ((v217 & 0x40000000) != 0)
                    v218 = *(uint64_t **)(ConstantSamplerGlobal - 8);
                  else
                    v218 = (uint64_t *)(ConstantSamplerGlobal - 32 * (v217 & 0x7FFFFFF));
                  ConstantSamplerGlobal = *v218;
                  v215 = *(unsigned __int8 *)(*v218 + 16);
                  if (ConstantSamplerGlobal)
                    v219 = v215 >= 0x1C;
                  else
                    v219 = 0;
                  if (v219)
                  {
                    v221 = v215 - 28;
                  }
                  else
                  {
                    if (ConstantSamplerGlobal)
                      v220 = v215 == 5;
                    else
                      v220 = 0;
                    if (!v220)
                      break;
                    v221 = *(unsigned __int16 *)(ConstantSamplerGlobal + 18);
                  }
                }
                while (v221 - 48 < 3);
              }
LABEL_322:
              if (v215 == 3)
              {
                if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)ConstantSamplerGlobal) & 1) == 0)
                {
                  v376[0] = 0;
                  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)(a1 + 696), *(_DWORD *)(a1 + 712), ConstantSamplerGlobal, v376))v222 = (char *)v376[0];
                  else
                    v222 = (char *)(*(_QWORD *)(a1 + 696) + 48 * *(unsigned int *)(a1 + 712));
                  v289 = (unsigned int *)(v222 + 40);
LABEL_375:
                  v194 = *v289;
                  if ((_DWORD)v194 != -1)
                    HIBYTE(v354[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, v194) & 1;
                  goto LABEL_265;
                }
                goto LABEL_264;
              }
              if (v215 > 0x14)
              {
LABEL_344:
                v194 = 0xFFFFFFFFLL;
                goto LABEL_265;
              }
              if (v215 == 16)
              {
                PtrToInt = ConstantSamplerGlobal;
              }
              else
              {
                PtrToInt = llvm::ConstantExpr::getPtrToInt();
                if (PtrToInt)
                  v290 = *(_BYTE *)(PtrToInt + 16) == 16;
                else
                  v290 = 0;
                if (!v290)
                {
                  PtrToInt = llvm::ConstantExpr::getPtrToInt();
                  if (*(_BYTE *)(PtrToInt + 16) != 16)
                    PtrToInt = 0;
                }
              }
              if (*(_DWORD *)(PtrToInt + 32) > 0x40u)
              {
                v291 = **(_QWORD **)(PtrToInt + 24);
                if ((v291 & 0x4000000000000000) != 0)
                  goto LABEL_344;
              }
              else
              {
                v291 = *(_QWORD *)(PtrToInt + 24);
                if ((v291 & 0x4000000000000000) != 0)
                  goto LABEL_344;
              }
              if (v291 < (unint64_t)*(unsigned int *)(a1 + 672))
              {
                v289 = (unsigned int *)(*(_QWORD *)(a1 + 664) + 4 * v291);
                goto LABEL_375;
              }
LABEL_264:
              v194 = 0xFFFFFFFFLL;
LABEL_265:
              if (v317)
              {
                if (!isConstantSampler)
                {
                  LOWORD(v376[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, v194);
                  v195 = v376;
                  goto LABEL_278;
                }
LABEL_267:
                v195 = (void **)&v348;
LABEL_278:
                v201 = (llvm::Value *)AGCLLVMUserObject::buildEmulatePCF((AGCLLVMUserObject *)a1, (uint64_t)&v351, v195);
                goto LABEL_279;
              }
              if (v311)
                v196 = isConstantSampler;
              else
                v196 = 1;
              if ((v196 & 1) == 0
                && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, v194) & 0x10) != 0)
              {
                v197 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v198 = *(_QWORD *)(v197 + 400);
                v331 = *(_OWORD *)(v197 + 88);
                llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v197 + 40));
                v333 = *(_DWORD *)(v197 + 136);
                v366[2] = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v198 + 40))(v198, &v331, v366[2], 0);
                if (v332)
                  llvm::MetadataTracking::untrack();
              }
LABEL_275:
              v199 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
              v200 = *(_QWORD *)(v199 + 400);
              v328 = *(_OWORD *)(v199 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v199 + 40));
              v330 = *(_DWORD *)(v199 + 136);
              v201 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v200 + 272))(v200, &v328, &v351);
              v202 = v329;
              if (v329)
                llvm::MetadataTracking::untrack();
LABEL_279:
              if (!v201)
              {
LABEL_370:
                llvm::Instruction::eraseFromParent(v18);
                goto LABEL_371;
              }
              v203 = (uint64_t)v201;
              if (v316 == 16)
              {
                v203 = (uint64_t)v201;
                if (!LOBYTE(v354[2]))
                {
                  v204 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  v205 = *(_QWORD *)(v204 + 400);
                  v325 = *(_OWORD *)(v204 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v204 + 40));
                  v327 = *(_DWORD *)(v204 + 136);
                  v203 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v205 + 288))(v205, &v325, v201);
                  v202 = v326;
                  if (v326)
                    llvm::MetadataTracking::untrack();
                }
              }
              if (v312)
              {
                v206 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v324 + 32);
                v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v206 + 840))(v206);
              }
              else
              {
                v207 = 0;
              }
              if (a3[1] == 2)
              {
                v208 = *(_BYTE *)(a1 + 20) == 0;
                if (v309)
                {
LABEL_289:
                  llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v309);
                  v209 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  *(_QWORD *)(v209 + 88) = v309;
                  *(_QWORD *)(v209 + 96) = (char *)v309 + 40;
LABEL_368:
                  v16 = v319;
                  goto LABEL_369;
                }
              }
              else
              {
                v208 = 0;
                if (v309)
                  goto LABEL_289;
              }
              v210 = *a3;
              if (*a3 == 2 && v207 | v208)
              {
                v211 = (llvm::Constant **)v201;
                if (v316 == 16)
                {
                  v212 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
                  LODWORD(__p[0]) = 0;
                  v378 = 257;
                  v211 = (llvm::Constant **)llvm::IRBuilderBase::CreateExtractValue(v212, (uint64_t)v201, (uint64_t)__p, 1, (uint64_t)v376);
                }
                v323 = v211;
                NullValue = (llvm::BasicBlock *)llvm::Constant::getNullValue(*v211, v202);
                if ((*((_DWORD *)*v211 + 2) & 0xFE) == 0x12)
                  v315 = (llvm::Constant *)**((_QWORD **)*v211 + 2);
                else
                  v315 = *v211;
                v223 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v304;
                v224 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, v318, 2u);
                v378 = 257;
                v226 = AGCLLVMBuilder::tryDeducePointeeType(v224, v225);
                v227 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v223 + 32), v226, (uint64_t)v224, 0, (uint64_t)v376);
                v228 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v229 = (llvm::IRBuilderBase *)(v228 + 40);
                v230 = (llvm::Value *)llvm::ConstantInt::get();
                v231 = llvm::IRBuilderBase::CreateExtractElement(v229, v227, v230, (const llvm::Twine *)v376);
                v232 = (llvm::Value *)v231;
                if (v208)
                {
                  LShr = (uint64_t *)v231;
                  if ((_QWORD)v365)
                  {
                    v234 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
                    v235 = *(_QWORD *)v232;
                    v378 = 257;
                    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v234, 39, v365, v235, (uint64_t)v376);
                    v237 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                    v378 = 257;
                    LShr = (uint64_t *)llvm::IRBuilderBase::CreateLShr(v237, v232, Cast, (const llvm::Twine *)v376);
                  }
                  v308 = v232;
                  v238 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  v239 = (llvm::Value *)v362;
                  v378 = 257;
                  v240 = (llvm::IRBuilderBase *)(v238 + 40);
                  v241 = (llvm::Value *)llvm::ConstantInt::get();
                  v242 = llvm::IRBuilderBase::CreateExtractElement(v240, v239, v241, (const llvm::Twine *)v376);
                  v243 = *LShr;
                  v341 = 257;
                  v313 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v240, 39, v242, v243, (uint64_t)__p);
                  v244 = (AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32);
                  v245 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, v318, 4u);
                  Load = (llvm::Value *)AGCLLVMBuilder::CreateLoad(v244, v245, "packedFormatAndAlpha");
                  v247 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                  v248 = (llvm::Value *)llvm::ConstantInt::get();
                  v376[0] = "alpha";
                  v378 = 259;
                  UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v247, Load, v248, (const llvm::Twine *)v376);
                  if (*((unsigned __int8 *)v315 + 8) <= 6u)
                  {
                    v250 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                    v378 = 257;
                    UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v250, UIToFP, v315, (const llvm::Twine *)v376);
                  }
                  v251 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), UIToFP, v315);
                  if ((*((_DWORD *)*v323 + 2) & 0xFE) == 0x12)
                  {
                    v252 = **(_QWORD **)(*(_QWORD *)NullValue + 16);
                    v253 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v254 = v253 + 32;
                    if (v252 == *(_QWORD *)(a1 + 208 + v253 + 32))
                    {
                      v378 = 257;
                      v251 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v253 + a1 + 40, 39, (uint64_t)v251, v252, (uint64_t)v376);
                      v254 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
                    }
                    v378 = 257;
                    v255 = (llvm::IRBuilderBase *)(a1 + v254 + 8);
                    v256 = (llvm::Value *)llvm::ConstantInt::get();
                    llvm::IRBuilderBase::CreateInsertElement(v255, NullValue, v251, v256, (const llvm::Twine *)v376);
                  }
                  v257 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                  v378 = 257;
                  v258 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v257, 35, v313, (uint64_t)LShr, (uint64_t)v376);
                  v259 = (uint64_t)LShr;
                  v260 = (llvm::Value *)v362;
                  if ((*(_DWORD *)(*(_QWORD *)v362 + 8) & 0xFE) == 0x12)
                  {
                    v261 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                    v378 = 257;
                    v262 = (llvm::IRBuilderBase *)(v261 + 40);
                    v263 = (llvm::Value *)llvm::ConstantInt::get();
                    v264 = llvm::IRBuilderBase::CreateExtractElement(v262, v260, v263, (const llvm::Twine *)v376);
                    v265 = *(_QWORD *)v308;
                    v341 = 257;
                    v266 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v262, 39, v264, v265, (uint64_t)__p);
                    v267 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                    v378 = 257;
                    v268 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v267, 35, v266, v259, (uint64_t)v376);
                    v341 = 257;
                    llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v267, v258, v268, (const llvm::Twine *)__p);
                  }
                  v378 = 257;
                }
                else
                {
                  if (!v207)
                    goto LABEL_366;
                  if (*((unsigned __int8 *)v315 + 8) <= 6u)
                  {
                    v269 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v270 = *(_QWORD *)(v269 + a1 + 168 + 32);
                    v378 = 257;
                    v232 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v269 + a1 + 40, 49, v231, v270, (uint64_t)v376);
                  }
                  v284 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v232, v315);
                  v285 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  v378 = 257;
                  v286 = (llvm::IRBuilderBase *)(v285 + 40);
                  v287 = (llvm::Value *)llvm::ConstantInt::get();
                  llvm::IRBuilderBase::CreateInsertElement(v286, NullValue, v284, v287, (const llvm::Twine *)v376);
                  v378 = 257;
                }
                v203 = llvm::IRBuilderBase::CreateSelect();
LABEL_366:
                if (v316 == 16)
                {
                  v288 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
                  LODWORD(__p[0]) = 0;
                  v378 = 257;
                  llvm::IRBuilderBase::CreateInsertValue(v288, (uint64_t)v201, v203, (uint64_t)__p, 1, (uint64_t)v376);
                }
                goto LABEL_368;
              }
              v16 = v319;
              if (v210 == 10)
              {
                v271 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v214 = (llvm::IRBuilderBase *)(v271 + 40);
              }
              else
              {
                if (v210 != 9)
                {
LABEL_369:
                  llvm::Value::replaceAllUsesWith();
                  goto LABEL_370;
                }
                v213 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v214 = (llvm::IRBuilderBase *)(v213 + 40);
              }
              v272 = (llvm::Value *)llvm::ConstantInt::get();
              llvm::IRBuilderBase::CreateExtractElement(v214, v201, v272, (const llvm::Twine *)v376);
              goto LABEL_369;
            }
            v321 = isConstantSampler;
            v98 = a3[2];
            v99 = a1 + 240;
            if (v98 == 1)
              v99 = a1 + 248;
            v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v99 + 32);
            v101 = AGCLLVMUserObject::buildImageTextureBufferLength((AGCLLVMUserObject *)a1, (llvm::Value *)v24);
            v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            (*(void (**)(uint64_t))(*(_QWORD *)v102 + 920))(v102);
            v103 = (llvm::Value *)llvm::ConstantInt::get();
            v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            (*(void (**)(uint64_t))(*(_QWORD *)v104 + 920))(v104);
            v105 = llvm::ConstantInt::get();
            v106 = (llvm::Value *)v362;
            v306 = (llvm::Value *)v105;
            if (v98 != 1)
            {
              v107 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32;
              v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
              if ((*(_DWORD *)(*(_QWORD *)v362 + 8) & 0xFE) == 0x12)
                v108 = llvm::FixedVectorType::get();
              if ((*(_DWORD *)(v108 + 8) & 0xFE) == 0x12)
                v109 = *(unsigned __int8 *)(**(_QWORD **)(v108 + 16) + 8);
              else
                v109 = *(_DWORD *)(v108 + 8);
              v110 = (llvm::IRBuilderBase *)(v107 + 8);
              v378 = 257;
              if (v109 > 6)
                FPExt = llvm::IRBuilderBase::CreateCast((uint64_t)v110, 39, (uint64_t)v106, v108, (uint64_t)v376);
              else
                FPExt = llvm::IRBuilderBase::CreateFPExt(v110, v106, (llvm::Type *)v108, (const llvm::Twine *)v376);
              v106 = (llvm::Value *)FPExt;
            }
            *(_QWORD *)&v362 = v106;
            v112 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v378 = 257;
            v312 = llvm::IRBuilderBase::CreateICmp(v112, 36, (llvm::CmpInst **)v106, v101, (uint64_t)v376);
            v113 = *a3;
            if (*a3 == 3)
            {
              v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v324 + 32);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 840))(v114))
              {
                v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 88);
                v376[0] = "skip_texture_buffer_write";
                v378 = 259;
                v309 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
                v116 = *(_QWORD *)(v115 + 40);
                if (v116 == v115 + 40)
                {
                  v119 = 0;
                }
                else
                {
                  v117 = (llvm::Instruction *)(v116 - 24);
                  if (v116)
                    v118 = v116 - 24;
                  else
                    v118 = 0;
                  if (*(unsigned __int8 *)(v118 + 16) - 29 >= 0xB)
                    v119 = 0;
                  else
                    v119 = v117;
                }
                llvm::Instruction::eraseFromParent(v119);
                v376[0] = "texture_buffer_write";
                v378 = 259;
                v132 = operator new();
                llvm::BasicBlock::BasicBlock();
                v133 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                *(_QWORD *)(v133 + 88) = v115;
                *(_QWORD *)(v133 + 96) = v115 + 40;
                llvm::IRBuilderBase::CreateCondBr((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v312, v132, (uint64_t)v309);
                v134 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                *(_QWORD *)(v134 + 88) = v132;
                *(_QWORD *)(v134 + 96) = v132 + 40;
                v122 = (llvm::Value *)v362;
LABEL_228:
                v135 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                v378 = 257;
                v136 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v135, v122, v103, (const llvm::Twine *)v376);
                v137 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                v378 = 257;
                v138 = (llvm::Type **)llvm::IRBuilderBase::CreateLShr(v137, (llvm::Value *)v362, v306, (const llvm::Twine *)v376);
                v139 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                v140 = **(llvm::Type ***)(v100 + 16);
                v378 = 257;
                TruncOrBitCast = llvm::IRBuilderBase::CreateTruncOrBitCast(v139, v136, v140, (const llvm::Twine *)v376);
                v142 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
                v143 = **(llvm::Type ***)(v100 + 16);
                v378 = 257;
                v144 = llvm::IRBuilderBase::CreateTruncOrBitCast(v142, v138, v143, (const llvm::Twine *)v376);
                v145 = (llvm::Value *)llvm::UndefValue::get();
                v146 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v147 = (llvm::IRBuilderBase *)(v146 + 40);
                v148 = (llvm::Value *)llvm::ConstantInt::get();
                InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v147, v145, TruncOrBitCast, v148, (const llvm::Twine *)v376);
                v150 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                v378 = 257;
                v151 = (llvm::IRBuilderBase *)(v150 + 40);
                v152 = (llvm::Value *)llvm::ConstantInt::get();
                v94 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v151, InsertElement, v144, v152, (const llvm::Twine *)v376);
                v16 = v319;
                v24 = (unsigned __int8 *)v318;
                isConstantSampler = v321;
                goto LABEL_229;
              }
              v113 = *a3;
            }
            if (v113 == 2
              && (v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v324 + 32),
                  (*(unsigned int (**)(uint64_t))(*(_QWORD *)v120 + 840))(v120)))
            {
              llvm::ConstantInt::get();
              v378 = 257;
            }
            else
            {
              v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
              (*(void (**)(uint64_t))(*(_QWORD *)v121 + 920))(v121);
              llvm::ConstantInt::get();
              v378 = 257;
            }
            v122 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            v309 = 0;
            *(_QWORD *)&v362 = v122;
            goto LABEL_228;
          }
          v62 = 0;
        }
        v372 = v62;
        goto LABEL_130;
      }
      v274 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v304;
      v275 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((_BYTE *)a1, (AGCLLVMUserObject *)v24, 7u);
      v378 = 257;
      v277 = AGCLLVMBuilder::tryDeducePointeeType(v275, v276);
      v278 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v274 + 32), v277, (uint64_t)v275, 0, (uint64_t)v376);
      v279 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v280 = (llvm::IRBuilderBase *)(v279 + 40);
      v281 = (llvm::Value *)v365;
      v282 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(v279 + 32), v278, *(llvm::Type **)v365);
      v378 = 257;
      v24 = (unsigned __int8 *)v318;
      v283 = v281;
      isConstantSampler = v320;
      AlignedLoad = llvm::IRBuilderBase::CreateAdd(v280, v283, v282, (const llvm::Twine *)v376);
    }
    else if (*((_BYTE *)a3 + 49))
    {
      v364 = 1;
      AlignedLoad = llvm::ConstantInt::get();
    }
    else
    {
      if (!BYTE1(v354[2]))
        goto LABEL_357;
      v364 = 0;
      AlignedLoad = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 152 + 32), v27);
    }
LABEL_363:
    *(_QWORD *)&v365 = AlignedLoad;
    goto LABEL_84;
  }
  v292 = std::string::basic_string[abi:nn180100]<0>(v376, "sample");
  if (*a3 == 1)
  {
    v293 = "sample_compare";
LABEL_397:
    MEMORY[0x1CAA2D494](v292, v293);
  }
  else if (*a3 == 5)
  {
    v293 = "gather_compare";
    goto LABEL_397;
  }
  std::operator+<char>();
  v295 = std::string::append(&v337, " must be known at compile time");
  v296 = (AGCLLVMBuilder *)v295->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
  v340 = v296;
  v295->__r_.__value_.__l.__size_ = 0;
  v295->__r_.__value_.__r.__words[2] = 0;
  v295->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v340) >= 0)
    v297 = __p;
  else
    v297 = (void **)__p[0];
  if (SHIBYTE(v340) >= 0)
    v298 = HIBYTE(v340);
  else
    v298 = (std::string::size_type)__p[1];
  std::string::append((std::string *)(v304 + *(_QWORD *)(*(_QWORD *)a1 - 24)), (const std::string::value_type *)v297, v298);
  if (SHIBYTE(v340) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (SHIBYTE(v377) < 0)
    operator delete(v376[0]);
  return 0;
}

uint64_t AGCLLVMUserObject::buildBindlessImageArgumentPointer(unsigned __int8 *a1, llvm::Value *a2, int a3)
{
  _BOOL8 v6;
  unsigned __int8 *v7;
  llvm::Type **v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  llvm::ValueHandleBase *v12;
  unsigned int v13;
  llvm::Type *v14;
  __int16 v15;
  llvm::Value *GlobalBufferBinding;
  uint64_t Cast;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  AGCLLVMBuilder *v25;
  uint64_t v26;
  int v27;
  llvm::Type **v28;
  llvm::Type **v29;
  llvm::Type *v30;
  uint64_t *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  uint64_t AlignedLoad;
  llvm::Value *v35;
  uint64_t GEP;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t v42;
  llvm::Type **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  char v80[32];
  __int16 v81;
  char v82[32];
  __int16 v83;
  char v84[32];
  __int16 v85;
  _QWORD v86[4];
  __int16 v87;

  v6 = a3 == 1;
  v7 = &a1[24 * v6];
  v8 = (llvm::Type **)*((_QWORD *)v7 + 297);
  if (!v8)
  {
    if ((v9 & 1) == 0
    {
      v53 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 416))(v53);
      v54 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8014 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 176))(v54);
      v55 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8018 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 664))(v55);
      v56 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E801C = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 424))(v56);
      v57 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8020 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 184))(v57);
      v58 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8024 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 672))(v58);
      v59 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8028 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 432))(v59);
      v60 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E802C = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 192))(v60);
      v61 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8030 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 696))(v61);
      v62 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8034 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 440))(v62);
      v63 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E8038 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 200))(v63);
      v64 = *(_QWORD *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 400] + 824);
      dword_1EF8E803C = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 704))(v64);
    }
    v10 = (&AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_index_names[2 * a1[3566]])[v6];
    if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) == 29)
      v11 = 2;
    else
      v11 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) != 7
         && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) != 22
         && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) != 8
         && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) != 3
         && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)] + 64))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]) != 4;
    v12 = (llvm::ValueHandleBase *)(v7 + 2360);
    v13 = AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_indices[6 * a1[3566] + 3 * v6 + v11];
    v14 = (llvm::Type *)llvm::PointerType::get();
    if (*v10)
    {
      v86[0] = "agc.texture_heap.";
      v86[2] = v10;
      v15 = 771;
    }
    else
    {
      v86[0] = "agc.texture_heap.";
      v15 = 259;
    }
    v87 = v15;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v14, (const llvm::Twine *)v86, v13, 0, 5, 1);
    llvm::ValueHandleBase::operator=(v12, (uint64_t)GlobalBufferBinding);
    v8 = (llvm::Type **)*((_QWORD *)v12 + 2);
  }
  Cast = 0;
  switch(a3)
  {
    case 0:
    case 1:
      v18 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v19 = llvm::PointerType::get();
      v87 = 257;
      Cast = llvm::IRBuilderBase::CreateCast(v18, 49, (uint64_t)v8, v19, (uint64_t)v86);
      break;
    case 2:
      v20 = (llvm::Type *)llvm::FixedVectorType::get();
      goto LABEL_18;
    case 3:
      return Cast;
    case 9:
      Cast = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], *(llvm::Type **)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 240]);
      v40 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v41 = (uint64_t *)(v40 + 40);
      v42 = *((_QWORD *)v40 + 30);
      v87 = 257;
      v43 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v40 + 40), 39, (uint64_t)a2, v42, (uint64_t)v86);
      llvm::IRBuilderBase::CreateAlignedStore(v41, v43, Cast, 0);
      break;
    default:
      v20 = *(llvm::Type **)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 232];
LABEL_18:
      v21 = llvm::PointerType::get();
      v22 = llvm::PointerType::get();
      v23 = llvm::PointerType::get();
      v24 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v25 = (AGCLLVMBuilder *)(v24 + 32);
      v26 = *((_QWORD *)v24 + 50);
      v27 = *(_DWORD *)(v26 + 1780);
      if (v27)
        v21 = v23;
      v28 = (llvm::Type **)(v26 + 1672);
      v29 = (llvm::Type **)(v24 + 216);
      if (v27)
        v29 = v28;
      v30 = *v29;
      Cast = AGCLLVMBuilder::createAllocaInEntryBlock(v25, v20);
      v31 = (uint64_t *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v87 = 257;
      v33 = AGCLLVMBuilder::tryDeducePointeeType(v8, v32);
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v31, v33, (uint64_t)v8, 0, (uint64_t)v86);
      v85 = 257;
      v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v31, 49, AlignedLoad, v21, (uint64_t)v84);
      v83 = 257;
      GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v31, v30, v35, a2, (const llvm::Twine *)v82);
      v81 = 257;
      v37 = llvm::IRBuilderBase::CreateCast((uint64_t)v31, 49, GEP, v22, (uint64_t)v80);
      switch(a3)
      {
        case 2:
          v38 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v39 = *((_QWORD *)v38 + 50);
          v77 = *(_OWORD *)(v38 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 40));
          v79 = *((_DWORD *)v38 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v39 + 632))(v39, &v77, v37, Cast);
          if (v78)
            goto LABEL_27;
          break;
        case 4:
          v44 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v45 = *((_QWORD *)v44 + 50);
          v65 = *(_OWORD *)(v44 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v44 + 40));
          v67 = *((_DWORD *)v44 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v45 + 664))(v45, &v65, v37, Cast);
          if (v66)
            goto LABEL_27;
          break;
        case 5:
          v47 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v48 = *((_QWORD *)v47 + 50);
          v74 = *(_OWORD *)(v47 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v47 + 40));
          v76 = *((_DWORD *)v47 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v48 + 640))(v48, &v74, v37, Cast);
          if (v75)
            goto LABEL_27;
          break;
        case 6:
          v49 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v50 = *((_QWORD *)v49 + 50);
          v71 = *(_OWORD *)(v49 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v49 + 40));
          v73 = *((_DWORD *)v49 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v50 + 648))(v50, &v71, v37, Cast);
          if (v72)
            goto LABEL_27;
          break;
        case 7:
          v51 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v52 = *((_QWORD *)v51 + 50);
          v68 = *(_OWORD *)(v51 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v51 + 40));
          v70 = *((_DWORD *)v51 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v52 + 656))(v52, &v68, v37, Cast);
          if (v69)
LABEL_27:
            llvm::MetadataTracking::untrack();
          break;
        default:
          return Cast;
      }
      break;
  }
  return Cast;
}

uint64_t AGCLLVMUserFragmentShader::hasSamplerImplicitDerivatives(AGCLLVMUserFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMAGPFragmentShader::supportsConstantSamplers(AGCLLVMAGPFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::isConstantSampler(AGCLLVMUserObject *this, llvm::Value *a2, unint64_t *a3, unint64_t *a4)
{
  llvm::Value *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  llvm::Value **v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t ElementAsInteger;
  llvm::Module *v20;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29[8];
  __int16 v30;

  if (!a2)
    return 0;
  v6 = a2;
  v8 = *((unsigned __int8 *)a2 + 16);
  v9 = v8 - 28;
  if (v8 >= 0x1C)
    goto LABEL_5;
  if (v8 == 5)
  {
    v9 = *((unsigned __int16 *)a2 + 9);
LABEL_5:
    v10 = v9 != 48;
    while ((v9 & 0xFFFFFFFE) == 0x30)
    {
      v11 = *((_DWORD *)v6 + 5);
      if ((v11 & 0x40000000) != 0)
        v12 = (llvm::Value **)*((_QWORD *)v6 - 1);
      else
        v12 = (llvm::Value **)((char *)v6 - 32 * (v11 & 0x7FFFFFF));
      v6 = *v12;
      v8 = *((unsigned __int8 *)*v12 + 16);
      if (v6)
        v13 = v8 >= 0x1C;
      else
        v13 = 0;
      if (v13)
      {
        v9 = v8 - 28;
      }
      else
      {
        if (v6)
          v14 = v8 == 5;
        else
          v14 = 0;
        if (!v14)
          goto LABEL_23;
        v9 = *((unsigned __int16 *)v6 + 9);
      }
    }
    goto LABEL_37;
  }
  v10 = 1;
LABEL_23:
  if (v8 == 16)
  {
    v16 = (uint64_t *)((char *)v6 + 24);
    v17 = *((_DWORD *)v6 + 8);
    goto LABEL_25;
  }
LABEL_37:
  if (v8 != 3)
    return 0;
  if ((llvm::GlobalValue::isDeclaration(v6) & 1) != 0)
    return 0;
  v25 = *((_QWORD *)v6 - 4);
  if (!v25)
    return 0;
  v26 = *(unsigned __int8 *)(v25 + 16);
  if (v26 == 14)
  {
    ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(*((llvm::ConstantDataSequential **)v6 - 4));
    v18 = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v25);
    goto LABEL_28;
  }
  if (v26 != 16)
    return 0;
  v16 = (uint64_t *)(v25 + 24);
  v17 = *(_DWORD *)(v25 + 32);
LABEL_25:
  if (v17 >= 0x41)
    v16 = (uint64_t *)*v16;
  v18 = 0;
  ElementAsInteger = *v16;
LABEL_28:
  v20 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  *(_QWORD *)v29 = "air.version";
  v30 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v20, (const llvm::Twine *)v29);
  if (!NamedMetadata)
  {
    if (!*((_BYTE *)this + 14))
      goto LABEL_46;
LABEL_44:
    if (ElementAsInteger < 0)
      goto LABEL_46;
    return 0;
  }
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (!Operand)
    goto LABEL_46;
  v23 = Operand;
  v28 = 0;
  v29[0] = 0;
  parseMDInt(0, Operand, v29, (_DWORD *)&v28 + 1);
  v29[0] = 1;
  parseMDInt(0, v23, v29, &v28);
  if (HIDWORD(v28) <= 1)
    goto LABEL_44;
  if (v28 <= 5 && HIDWORD(v28) == 2)
    goto LABEL_44;
  if (!v10)
    return 0;
LABEL_46:
  v27 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)this + v27 + 400) + 1775)
    && (!(*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + v27) + 64))((char *)this + v27)
     || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 7))
  {
    v18 = 0;
    ElementAsInteger &= 0xFFFFFFFFFF0FFFFFLL;
  }
  *a3 = ElementAsInteger;
  *a4 = v18;
  return 1;
}

uint64_t AGCLLVMUserObject::hasES1LodBias(AGCLLVMUserObject *this)
{
  return 0;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildSampleFunction(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v7;
  uint64_t SamplerFunction;
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  if ((*(_DWORD *)a3 - 6) < 3)
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, uint64_t))(*(_QWORD *)a1 + 1504))(a1, a3);
  if (*(_DWORD *)a3 == 3)
    v7 = AGCLLVMGen2TargetLowerer::convertWriteValue(a1, *(_DWORD *)(a3 + 8), *(llvm::Value **)(a3 + 224));
  else
    v7 = 0;
  SamplerFunction = AGCLLVMGen2TargetLowerer::getSamplerFunction((uint64_t)a1, (int *)a3);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage((uint64_t)a1, (int *)a3, (uint64_t)v7, SamplerFunction);
}

uint64_t AGCLLVMGen2TargetLowerer::getSamplerFunction(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const std::string::value_type *v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  const std::string::value_type *v32;
  uint64_t *v33;
  const std::string::value_type *v34;
  unsigned int v35;
  const char *v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const std::string::value_type *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t v46;
  const std::string::value_type *v47;
  uint64_t v48;
  uint64_t v49;
  std::string v50;
  void *v51[2];
  _QWORD v52[20];

  v52[18] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  if (v4)
    v6 = a2[1];
  else
    v6 = *a2 == 3;
  if (a2[2] == 6)
    v7 = 7;
  else
    v7 = a2[2];
  v8 = **((_QWORD **)a2 + 17);
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  else
    v9 = *(_DWORD *)(v8 + 8);
  v48 = *((_QWORD *)a2 + 25);
  v10 = *((_QWORD *)a2 + 27);
  v49 = *((_QWORD *)a2 + 19);
  v51[0] = v52;
  v51[1] = (void *)0x1000000000;
  v11 = (char **)(a1 + 1896);
  if ((v5 & 0xFFFFFFFE) == 4)
    v11 = (char **)(a1 + 1904);
  if (v5 == 3)
    v11 = (char **)(a1 + 1912);
  std::string::basic_string[abi:nn180100]<0>(&v50, *v11);
  if (*a2 != 3)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 192));
  }
  v12 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v12);
  v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v13);
  v14 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v14);
  if (*(_BYTE *)(a1 + 2240))
  {
    v15 = **((_QWORD **)a2 + 17);
    if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12)
      goto LABEL_21;
    v16 = *(uint64_t **)(v15 + 16);
  }
  else
  {
    v16 = (uint64_t *)(a1 + 200);
  }
  v15 = *v16;
LABEL_21:
  if (v15 == *(_QWORD *)(a1 + 200))
  {
    v17 = ".i";
  }
  else if (v15 == *(_QWORD *)(a1 + 192))
  {
    v17 = ".ci16";
  }
  else
  {
    v17 = (const std::string::value_type *)&unk_1C3E4D9BB;
  }
  switch(v6)
  {
    case 0:
      std::string::append(&v50, ".1d");
      if (v9 != 13)
        v15 = *(_QWORD *)(a1 + 168);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v15);
      if (!v49)
        goto LABEL_62;
      std::string::append(&v50, ".array");
      v18 = *(_QWORD *)(a1 + 192);
      goto LABEL_61;
    case 1:
      std::string::append(&v50, ".2d");
      if (v9 == 13)
        v19 = llvm::FixedVectorType::get();
      else
        v19 = *(_QWORD *)(a1 + 224);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v19);
      if (v10)
        std::string::append(&v50, ".msaa");
      if (v49)
      {
        std::string::append(&v50, ".array");
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 192));
      }
      if (v9 == 13)
        goto LABEL_63;
      if (v48)
      {
        std::string::append(&v50, ".shadow");
        v21 = *(_QWORD *)(a1 + 168);
LABEL_50:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v21);
      }
      goto LABEL_64;
    case 2:
      std::string::append(&v50, ".cube");
      if (v9 == 13)
        v20 = "stf";
      else
        v20 = *(const std::string::value_type **)(a1 + 2208);
      std::string::append(&v50, v20);
      if (!*(_BYTE *)(a1 + 1750) && v9 == 13)
      {
        v22 = 0;
        goto LABEL_122;
      }
      if (*(_BYTE *)(a1 + 2216))
      {
        v23 = *(_QWORD *)(a1 + 224);
      }
      else
      {
        if (v9 != 13)
        {
          v24 = (uint64_t *)(a1 + 288);
          goto LABEL_57;
        }
        v23 = llvm::FixedVectorType::get();
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v23);
      v24 = (uint64_t *)(a1 + 192);
LABEL_57:
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *v24);
      if (v49)
      {
        std::string::append(&v50, ".array");
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 192));
      }
      if (v48)
      {
        std::string::append(&v50, ".shadow");
        v18 = *(_QWORD *)(a1 + 168);
LABEL_61:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v18);
      }
LABEL_62:
      if (v9 == 13)
LABEL_63:
        std::string::append(&v50, v17);
LABEL_64:
      switch(a2[40])
      {
        case 0:
          v25 = *(_QWORD *)(a1 + 152);
          goto LABEL_73;
        case 1:
          v26 = 192;
          if (v9 != 13)
            v26 = 152;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + v26));
          std::string::append(&v50, ".lod");
          break;
        case 2:
          std::string::append(&v50, ".grad");
          v27 = a2[1];
          if (v27 > 3)
            v28 = 0;
          else
            v28 = dword_1C3E386B0[v27];
          if (*(_BYTE *)(a1 + 2216))
            v29 = v4 == 2;
          else
            v29 = 0;
          v30 = v29;
          v31 = v28 - v30;
          if (v28 != v30)
          {
            do
            {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 224));
              --v31;
            }
            while (v31);
          }
          break;
        case 3:
          if (*((_QWORD *)a2 + 27) || (v5 & 0xFFFFFFFE) == 4 && (std::string::append(&v50, ".gather"), *a2 == 4))
          {
            v25 = *(_QWORD *)(a1 + 192);
LABEL_73:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v25);
          }
          break;
        default:
          break;
      }
      if (*((_QWORD *)a2 + 18))
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 192));
        std::string::append(&v50, ".offset");
      }
      if (*a2 == 3)
      {
        if (v7 == 8 || v7 == 4)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 304));
          v32 = ".4xi16";
LABEL_92:
          std::string::append(&v50, v32);
          goto LABEL_108;
        }
        if ((v7 & 0xFFFFFFFB) == 3)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 312));
          v32 = ".4xi32";
          goto LABEL_92;
        }
        v46 = 288;
        if (v7 == 1)
        {
          v46 = 280;
          v47 = ".4xh";
        }
        else
        {
          v47 = ".4xf";
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + v46));
        std::string::append(&v50, v47);
        if (a2[4] == 1)
        {
          v32 = ".rtz";
          goto LABEL_92;
        }
      }
      else
      {
        if (v7 == 8 || v7 == 4)
        {
          v33 = (uint64_t *)(a1 + 304);
          v34 = ".4xi16";
        }
        else
        {
          v35 = v7 & 0xFFFFFFFB;
          v36 = ".4xf";
          v37 = (uint64_t *)(a1 + 288);
          if (v7 == 1)
          {
            v37 = (uint64_t *)(a1 + 280);
            v36 = ".4xh";
          }
          v38 = v35 == 3;
          if (v35 == 3)
            v33 = (uint64_t *)(a1 + 312);
          else
            v33 = v37;
          if (v38)
            v34 = ".4xi32";
          else
            v34 = v36;
        }
        v39 = *v33;
        std::string::append(&v50, v34);
        v40 = *(_QWORD *)(a1 + 184);
        v52[16] = v39;
        v52[17] = v40;
        llvm::StructType::get();
      }
LABEL_108:
      if (v49)
        std::string::append(&v50, ".i16");
      v41 = a2[40];
      v42 = ".f16";
      if (!v41)
        goto LABEL_114;
      if (v41 == 1)
      {
        if (v9 == 13)
          v42 = ".i16";
LABEL_114:
        std::string::append(&v50, v42);
      }
      if (*a2 != 3)
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(_QWORD *)(a1 + 152));
      llvm::FunctionType::get();
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        v43 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (!v50.__r_.__value_.__r.__words[0])
          goto LABEL_121;
      }
      else
      {
        v43 = &v50;
      }
      strlen((const char *)v43);
LABEL_121:
      llvm::Module::getOrInsertFunction();
      v22 = v44;
LABEL_122:
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (v51[0] != v52)
        free(v51[0]);
      return v22;
    case 3:
      std::string::append(&v50, ".3d");
      if (v9 == 13)
      {
        std::string::append(&v50, v17);
        v21 = llvm::FixedVectorType::get();
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 288);
      }
      goto LABEL_50;
    default:
      goto LABEL_64;
  }
}

uint64_t AGCLLVMUserObject::buildBindlessSamplerIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t Cast;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  v4 = (char *)this + v3 + 32;
  v5 = (char *)this + v3 + 40;
  if (*(_DWORD *)(*((_QWORD *)v4 + 46) + 1780)
    && (v6 = *((_QWORD *)v4 + 25),
        v12 = 257,
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + v3 + 40, 47, (uint64_t)a2, v6, (uint64_t)v11),
        v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40,
        Cast))
  {
    v8 = Cast;
    v9 = llvm::PointerType::get();
    v12 = 257;
  }
  else
  {
    v8 = llvm::ConstantInt::get();
    v9 = llvm::PointerType::get();
    v12 = 257;
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)v5, 48, v8, v9, (uint64_t)v11);
}

uint64_t AGCLLVMUserObject::buildBindlessIndexAsPtr(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const char *v7;
  __int16 v8;

  result = AGCLLVMUserObject::buildBindlessIndex(this, a2);
  if (result)
  {
    v4 = result;
    v5 = llvm::PointerType::get();
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v7 = "bindless_index_as_ptr";
    v8 = 259;
    return llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, v4, v5, (uint64_t)&v7);
  }
  return result;
}

uint64_t AGCLLVMUserObject::getTextureBiasStateForUnit(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMAGPFragmentShader::AGCLLVMAGPFragmentShader(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v12;
  uint64_t v13;
  llvm::StringMapImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  const char *v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  size_t v37;

  v12 = AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(a1, a2 + 1, a3, a4, a5, 0);
  v13 = *a2;
  *(_QWORD *)v12 = *a2;
  *(_QWORD *)(v12 + *(_QWORD *)(v13 - 24)) = a2[17];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 32) = a2[18];
  *(_QWORD *)(v12 + 4320) = a2[19];
  v14 = (llvm::StringMapImpl *)(v12 + 5880);
  *(_OWORD *)(v12 + 5880) = 0u;
  *(_QWORD *)(v12 + 5896) = 0x1000000000;
  *(_QWORD *)(v12 + 5912) = v12 + 5928;
  *(_QWORD *)(v12 + 5920) = 0x800000000;
  *(_DWORD *)(v12 + 6440) = 0;
  *(_BYTE *)(v12 + 6444) = 0;
  *(_OWORD *)(v12 + 6448) = 0u;
  *(_OWORD *)(v12 + 6464) = 0u;
  *(_QWORD *)(v12 + 6480) = 0;
  v15 = 6488;
  do
  {
    v16 = (_QWORD *)(a1 + v15);
    v16[1] = 0;
    v16[2] = 0;
    *v16 = 4;
    v17 = a1 + v15 + 24;
    v15 += 24;
  }
  while (v17 != v12 + 6608);
  v18 = 0;
  v19 = a1 + 6616;
  do
  {
    *(_QWORD *)(a1 + v18 + 6608) = v19 + v18 + 8;
    *(_QWORD *)(v19 + v18) = 0x300000000;
    v18 += 32;
  }
  while (v18 != 160);
  v20 = 0;
  v21 = a1 + 6776;
  do
  {
    *(_QWORD *)(a1 + v20 + 6768) = v21 + v20 + 8;
    *(_QWORD *)(v21 + v20) = 0x300000000;
    v20 += 32;
  }
  while (v20 != 160);
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) & 1, (*(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) >> 1) & 1);
  v22 = *(_QWORD *)(a4 + 16);
  *(_BYTE *)(a1 + 18) = (*(_BYTE *)(v22 + 60) & 8) != 0;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2760) = (*(_DWORD *)(v22 + 60) & 0x4000000) != 0;
  *(_DWORD *)(a1 + 5876) = *(_DWORD *)(v22 + 56);
  *(_QWORD *)(a1 + 3304) = *(_QWORD *)(v22 + 16);
  *(_BYTE *)(a1 + 20) = (*(_BYTE *)(v22 + 60) & 4) != 0;
  if (a6 && a7)
  {
    v23 = (int *)((char *)a6 + *a6);
    v24 = (int *)((char *)a7 + *a7);
    v25 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v25 >= 5u && (v26 = v25[2]) != 0)
      v27 = (int *)((char *)v23 + v26 + *(unsigned int *)((char *)v23 + v26));
    else
      v27 = 0;
    v28 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v28 >= 5u && (v29 = v28[2]) != 0)
      v30 = (char *)v24 + v29 + *(unsigned int *)((char *)v24 + v29);
    else
      v30 = 0;
    if (*v27)
    {
      v31 = 0;
      v32 = v30 + 4;
      v33 = (const char *)(v27 + 2);
      v34 = v27 + 2;
      do
      {
        v35 = *(_DWORD *)&v32[4 * v31];
        v36 = *((unsigned int *)v33 - 1);
        v37 = strlen(&v33[v36]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v14, (char *)v34 + v36, v37) + 8) = v35;
        ++v31;
        ++v34;
        v33 += 4;
      }
      while (v31 < *v27);
    }
  }
  return a1;
}

uint64_t AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  __int128 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unint64_t v23;
  uint64_t v24;
  unint64_t i;
  unsigned __int8 *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t j;
  uint64_t String;
  uint64_t v32;
  BOOL v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::MDString *v63;
  _QWORD *v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t Function;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  const char *v82;
  __int16 v83;

  v11 = a1 + 4944;
  v12 = (__int128 *)(a4 + 8);
  v13 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, (uint64_t)a3, "air.fragment", *(_QWORD *)(a4 + 8), a6, 0);
  AGCLLVMFragmentShader::AGCLLVMFragmentShader((uint64_t)(v13 + 540), a2 + 7, a5, 0);
  v14 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = a2[13];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32) = a2[14];
  *(_QWORD *)(a1 + 4320) = a2[15];
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  v15 = -256;
  do
  {
    v16 = a1 + v15;
    *(_QWORD *)(v16 + 5216) = 4;
    *(_OWORD *)(v16 + 5224) = 0uLL;
    v15 += 32;
  }
  while (v15);
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  v17 = -256;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  do
  {
    v18 = a1 + v17;
    *(_QWORD *)(v18 + 5472) = 4;
    *(_OWORD *)(v18 + 5480) = 0uLL;
    v17 += 32;
  }
  while (v17);
  *(_BYTE *)(v11 + 520) = 0;
  *(_BYTE *)(v11 + 524) = 0;
  *(_QWORD *)(a1 + 5472) = 4;
  *(_QWORD *)(a1 + 5488) = 0;
  *(_QWORD *)(a1 + 5480) = 0;
  *(_QWORD *)(a1 + 5496) = 4;
  *(_QWORD *)(a1 + 5512) = 0;
  *(_QWORD *)(a1 + 5504) = 0;
  *(_QWORD *)(a1 + 5520) = 4;
  *(_QWORD *)(a1 + 5536) = 0;
  *(_QWORD *)(a1 + 5528) = 0;
  *(_QWORD *)(a1 + 5544) = 4;
  *(_QWORD *)(a1 + 5560) = 0;
  *(_QWORD *)(a1 + 5552) = 0;
  *(_QWORD *)(a1 + 5568) = 4;
  *(_QWORD *)(a1 + 5584) = 0;
  *(_QWORD *)(a1 + 5576) = 0;
  *(_DWORD *)(a1 + 5592) = (unsigned __int16)**(_DWORD **)(a4 + 8) >> 12;
  *(_QWORD *)(a1 + 5600) = 4;
  *(_QWORD *)(a1 + 5616) = 0;
  *(_QWORD *)(a1 + 5608) = 0;
  *(_QWORD *)(a1 + 5624) = 4;
  *(_QWORD *)(a1 + 5640) = 0;
  *(_QWORD *)(a1 + 5632) = 0;
  *(_QWORD *)(a1 + 5648) = 4;
  *(_QWORD *)(a1 + 5664) = 0;
  *(_QWORD *)(a1 + 5656) = 0;
  *(_QWORD *)(a1 + 5672) = 4;
  *(_QWORD *)(a1 + 5688) = 0;
  *(_QWORD *)(a1 + 5680) = 0;
  *(_QWORD *)(a1 + 5696) = 4;
  *(_QWORD *)(a1 + 5712) = 0;
  *(_QWORD *)(a1 + 5704) = 0;
  *(_QWORD *)(a1 + 5720) = 4;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 5728) = 0;
  *(_QWORD *)(a1 + 5744) = 4;
  *(_QWORD *)(a1 + 5760) = 0;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_QWORD *)(a1 + 5768) = 4;
  *(_QWORD *)(a1 + 5784) = 0;
  *(_QWORD *)(a1 + 5776) = 0;
  *(_QWORD *)(a1 + 5792) = &off_1E7ECEBF8;
  v19 = *v12;
  *(_QWORD *)(a1 + 5816) = *((_QWORD *)v12 + 2);
  *(_OWORD *)(a1 + 5800) = v19;
  *(_BYTE *)(v11 + 891) = 0;
  *(_QWORD *)(a1 + 5824) = 0;
  *(_WORD *)(a1 + 5832) = 0;
  *(_QWORD *)(v11 + 892) = 0x500000000;
  *(_WORD *)(v11 + 900) = 0;
  *(_QWORD *)(a1 + 5848) = 0;
  *(_QWORD *)(a1 + 5864) = 0;
  *(_QWORD *)(a1 + 5856) = 0;
  *(_DWORD *)(a1 + 5872) = 0;
  v20 = *(_QWORD *)(a4 + 16);
  *(_BYTE *)(a1 + 3712) = *(_BYTE *)(v20 + 61) & 1;
  *(_BYTE *)(a1 + 3713) = (*(_DWORD *)(v20 + 60) & 0x200) != 0;
  v82 = "air.fragment";
  v83 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a3, (const llvm::Twine *)&v82);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v23 = *(unsigned int *)(Operand + 8);
  if (v23 >= 4)
  {
    v24 = Operand;
    for (i = 3; i < v23; ++i)
    {
      v26 = *(unsigned __int8 **)(v24 - 8 * v23 + 8 * i);
      v27 = *v26;
      v28 = v27 > 0x22 || ((0x7FFFFFFF0uLL >> v27) & 1) == 0;
      if (!v28)
      {
        v29 = *((unsigned int *)v26 + 2);
        if ((_DWORD)v29)
        {
          for (j = 0; j < v29; ++j)
          {
            if (isStringMDNode(*(llvm::MDString **)&v26[8 * j + -8 * v29], "air.fragment_rate"))
            {
              String = llvm::MDString::getString(*(llvm::MDString **)&v26[8 * j + 8 + -8 * *((unsigned int *)v26 + 2)]);
              if (v32 == 5)
              {
                v33 = *(_DWORD *)String == 1869377379 && *(_BYTE *)(String + 4) == 114;
                v34 = v33;
              }
              else
              {
                v34 = 0;
              }
              *(_DWORD *)(a1 + 5872) = v34;
              if ((((*(_DWORD *)(*(_QWORD *)(a1 + 4912) + 32) >> 12) ^ (*(_DWORD *)(*(_QWORD *)(a1 + 4912) + 32) >> 8)) & 0xF) == 0)
                *(_DWORD *)(a1 + 5872) = 0;
            }
            v29 = *((unsigned int *)v26 + 2);
          }
          v23 = *(unsigned int *)(v24 + 8);
        }
      }
    }
  }
  v35 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v35)
  {
    for (k = 0; k != v35; ++k)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * k);
      if (v37)
      {
        v38 = llvm::MDString::getString(*(llvm::MDString **)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8));
        switch(v39)
        {
          case 12:
            if (*(_QWORD *)v38 == 0x69736F702E726961 && *(_DWORD *)(v38 + 8) == 1852795252)
              *(_BYTE *)(v11 + 887) = 1;
            break;
          case 15:
            if (*(_QWORD *)v38 == 0x6E696F702E726961 && *(_QWORD *)(v38 + 7) == 0x64726F6F635F746ELL)
              *(_BYTE *)(v11 + 889) = 1;
            break;
          case 16:
            if (*(_QWORD *)v38 == 0x6E6F72662E726961 && *(_QWORD *)(v38 + 8) == 0x676E696361665F74)
              *(_BYTE *)(v11 + 888) = 1;
            break;
          case 18:
            if (*(_QWORD *)v38 == 0x706D61732E726961
              && *(_QWORD *)(v38 + 8) == 0x5F6B73616D5F656CLL
              && *(_WORD *)(v38 + 16) == 28265)
            {
              v45 = *(unsigned int *)(v37 + 8);
              if (v37 - 8 * v45 + 16 == v37)
              {
                v48 = 0;
              }
              else
              {
                v46 = -8 * v45;
                v47 = v37 + 16;
                do
                {
                  v48 = isStringMDNode(*(llvm::MDString **)(v47 + v46), "air.post_depth_coverage");
                  if (v48)
                    break;
                  v28 = v46 == -24;
                  v46 += 8;
                }
                while (!v28);
              }
              *(_BYTE *)(v11 + 912) = v48;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  v49 = **(_DWORD **)(a1 + 5800);
  v50 = (v49 & 0x60000) == 0x40000 && ((v49 & 0x10000) != 0 || (*(_BYTE *)(*(_QWORD *)(a1 + 4912) + 33) & 0xE) != 0);
  *(_BYTE *)(v11 + 890) = v50;
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = *(unsigned int *)(v51 + 8);
    if ((_DWORD)v52)
    {
      v53 = 0;
      while (1)
      {
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 72) - 8 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8) + 8 * v53);
        v55 = llvm::MDString::getString(*(llvm::MDString **)(v54 - 8 * *(unsigned int *)(v54 + 8)));
        v57 = (_QWORD *)v55;
        v58 = v56;
        if (v56 == 12)
          break;
        if (v56 != 9)
          goto LABEL_90;
        if (*(_QWORD *)v55 != 0x747065642E726961 || *(_BYTE *)(v55 + 8) != 104)
          goto LABEL_90;
        *(_BYTE *)(v11 + 891) = 1;
        *(_DWORD *)(a1 + 5840) = 0;
        v60 = *(unsigned int *)(v54 + 8);
        if (v60 >= 2)
        {
          v62 = 1;
          while (1)
          {
            v61 = v54 - 8 * v60;
            v63 = *(llvm::MDString **)(v61 + 8 * v62);
            if (!*(_BYTE *)v63)
              break;
            if (v60 == ++v62)
              goto LABEL_127;
          }
          v66 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v61 + 8 * v62));
          if (v67 == 19)
          {
            v68 = *v66 == 0x747065642E726961 && v66[1] == 0x66696C6175715F68;
            if (v68 && *(_QWORD *)((char *)v66 + 11) == 0x72656966696C6175)
              v63 = *(llvm::MDString **)(v54 - 8 * *(unsigned int *)(v54 + 8) + 8 * (v62 + 1));
          }
          v70 = (_QWORD *)llvm::MDString::getString(v63);
          switch(v71)
          {
            case 11:
              if (*v70 == 0x616572672E726961 && *(_QWORD *)((char *)v70 + 3) == 0x726574616572672ELL)
              {
                v72 = 1;
                goto LABEL_125;
              }
              break;
            case 8:
              v73 = 2 * (*v70 == 0x7373656C2E726961);
              goto LABEL_126;
            case 7:
              v72 = 0;
              v73 = 0;
              if (*(_DWORD *)v70 != 779250017 || *(_DWORD *)((char *)v70 + 3) != 2037276974)
                goto LABEL_126;
LABEL_125:
              v73 = v72;
LABEL_126:
              *(_DWORD *)(v11 + 892) = v73;
              goto LABEL_127;
          }
          v73 = 0;
          goto LABEL_126;
        }
LABEL_127:
        if (++v53 == v52)
          goto LABEL_128;
      }
      if (*(_QWORD *)v55 != 0x65766F632E726961 || *(_DWORD *)(v55 + 8) != 1701273970)
      {
LABEL_90:
        if (!AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)v55, v56))
        {
          if (v58 == 11 && *v57 == 0x6E6574732E726961 && *(_QWORD *)((char *)v57 + 3) == 0x6C69636E6574732ELL)
            *(_BYTE *)(v11 + 913) = 1;
          goto LABEL_127;
        }
      }
      *(_BYTE *)(v11 + 900) = 1;
      goto LABEL_127;
    }
  }
LABEL_128:
  Function = llvm::Module::getFunction();
  if (Function)
    v77 = *(_QWORD *)(Function + 8) != 0;
  else
    v77 = 0;
  *(_BYTE *)(v11 + 901) = v77;
  *(_QWORD *)(a1 + 5848) = Function;
  v78 = llvm::Module::getFunction();
  if (v78)
    v79 = *(_QWORD *)(v78 + 8) != 0;
  else
    v79 = 0;
  v80 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_BYTE *)(v80 + 456) = v79;
  *(_QWORD *)(v80 + 3280) = v78;
  return a1;
}

uint64_t AGCLLVMUserFragmentShader::isSampleMaskVariant(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  result = 0;
  switch(a2)
  {
    case 15:
      v4 = *a1;
      v5 = *(uint64_t *)((char *)a1 + 7);
      v6 = v4 == 0x706D61732E726961;
      goto LABEL_14;
    case 18:
      v7 = *a1;
      v8 = a1[1];
      v9 = *((unsigned __int16 *)a1 + 8);
      v11 = v7 == 0x706D61732E726961 && v8 == 0x5F6B73616D5F656CLL && v9 == 28265;
      goto LABEL_17;
    case 21:
      v12 = *a1;
      v13 = a1[1];
      v5 = *(uint64_t *)((char *)a1 + 13);
      v14 = v12 == 0x6F6C6F632E726961;
      v15 = 0x656C706D61735F72;
      goto LABEL_11;
    case 22:
      v16 = *a1;
      v13 = a1[1];
      v5 = *(uint64_t *)((char *)a1 + 14);
      v14 = v16 == 0x747361722E726961;
      v15 = 0x6C706D61735F7265;
LABEL_11:
      v6 = v14 && v13 == v15;
LABEL_14:
      v11 = v6 && v5 == 0x6B73616D5F656C70;
LABEL_17:
      result = v11;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMFragmentShader::AGCLLVMFragmentShader(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v7 = a2[1];
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = a2[2];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32) = a2[3];
  *(_DWORD *)(a1 + 8) = 0;
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[4];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32) = a2[5];
  bzero((void *)(a1 + 16), 0x240uLL);
  for (i = 0; i != 576; i += 72)
  {
    v10 = a1 + i;
    *(_QWORD *)(v10 + 68) = 0;
    *(_QWORD *)(v10 + 60) = 0;
    *(_BYTE *)(v10 + 76) = 0;
    *(_BYTE *)(v10 + 80) = 0;
    *(_DWORD *)(v10 + 84) = 0;
  }
  *(_QWORD *)(a1 + 592) = a3;
  *(_OWORD *)(a1 + 600) = 0u;
  if (a4)
    AGCLLVMFragmentShader::initCompile((AGCLLVMFragmentShader *)a1);
  return a1;
}

uint64_t AGCLLVMUserShader::enableStatistics(uint64_t this, int a2, int a3)
{
  uint64_t v5;

  v5 = this;
  if ((a2 & 1) != 0 || a3)
  {
    this = llvm::Module::getOrInsertNamedMetadata();
    if (a2)
    {
      this = llvm::Module::getOrInsertNamedMetadata();
      *(_BYTE *)(v5 + 44) = 1;
    }
    if (a3)
      return llvm::Module::getOrInsertNamedMetadata();
  }
  return this;
}

uint64_t AGCLLVMUserObject::setupArgumentBuffers(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  BOOL v28;
  const char *v29;
  char *v30;
  int v31;
  llvm::LLVMContext *v32;
  std::string *v33;
  int32x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  llvm::LLVMContext *v45;
  llvm::Value *ResourceArrayIndex;
  uint64_t v47;
  llvm::Value *v48;
  uint64_t GEP;
  llvm::LLVMContext *v50;
  std::string *v51;
  int32x2_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Type **v63;
  llvm::LLVMContext *v64;
  llvm::Value *v65;
  uint64_t v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t *v69;
  llvm::Value *v70;
  llvm::Type *v71;
  uint64_t v72;
  llvm::Type *v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t AlignedLoad;
  char *v79;
  llvm::Type *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t v97;
  uint64_t *v98;
  llvm::Type *v99;
  llvm::Type **InsertValue;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  llvm::Value *AllocaInEntryBlock;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Type **Cast;
  uint64_t v110;
  llvm::Type *v111;
  llvm::Value *v112;
  llvm::Type *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Value;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  llvm::Type **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::GetElementPtrInst *v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t **v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  llvm::GetElementPtrInst *v152;
  AGCArgumentBuffer *v153;
  unint64_t v154;
  int v155;
  char *v156;
  llvm::Value *v157;
  uint64_t v158;
  llvm::Type *v159;
  llvm::Value *v160;
  llvm::IRBuilderBase *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  std::string::size_type v168;
  const std::string::value_type *v169;
  std::string::size_type v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  std::string::size_type v174;
  const std::string::value_type *v175;
  std::string::size_type v176;
  unsigned __int8 v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int *v181;
  int v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint8x8_t v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  BOOL v199;
  llvm::PHINode *v200;
  uint64_t v201;
  const void *v202;
  const void **v203;
  unsigned int *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  llvm::Instruction *v215;
  std::string *v216;
  std::string::size_type v217;
  std::string *v218;
  std::string::size_type v219;
  std::string *v220;
  std::string::size_type size;
  _DWORD *v222;
  uint8x8_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  llvm::Type **v230;
  char *v231;
  llvm::Value *v232;
  llvm::Type *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  llvm::Instruction *v243;
  unint64_t v244;
  uint8x8_t v245;
  _QWORD **v246;
  _QWORD *k;
  unint64_t v248;
  __int128 v249;
  float v250;
  _BOOL8 v251;
  unint64_t v252;
  unint64_t v253;
  int8x8_t v254;
  void *v255;
  void *v256;
  uint64_t v257;
  _QWORD **v258;
  unint64_t v259;
  uint8x8_t v260;
  unint64_t v261;
  uint8x8_t v262;
  uint64_t v263;
  _QWORD *m;
  unint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD *v273;
  unsigned int v274;
  AGCLLVMUserObject *v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  AGCLLVMUserObject *v280;
  uint64_t v281;
  llvm::Type **v282;
  llvm::Type **v283;
  char *v284;
  llvm::Value *v285;
  llvm::Type *v286;
  llvm::Type **v287;
  char *v288;
  llvm::Value *v289;
  llvm::Type *v290;
  void *v291;
  std::string *v292;
  std::string::size_type v293;
  std::string *v294;
  std::string::size_type v295;
  const std::string::value_type *v296;
  std::string::size_type v297;
  llvm::Use *v298;
  llvm::Use *v299;
  const void *v300;
  const void *v301;
  const void **v302;
  std::string::size_type *v303;
  int v304;
  _QWORD *v305;
  _QWORD *i;
  unint64_t v307;
  _QWORD *v308;
  float v309;
  _BOOL8 v310;
  unint64_t v311;
  unint64_t v312;
  int8x8_t prime;
  void *v314;
  void *v315;
  uint64_t v316;
  _QWORD **v317;
  unint64_t v318;
  uint8x8_t v319;
  unint64_t v320;
  uint8x8_t v321;
  uint64_t v322;
  _QWORD *j;
  unint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  unint64_t v327;
  llvm::Value *ResourceId;
  llvm::Value *v329;
  unsigned __int8 **v330;
  uint64_t v331;
  unsigned int v332;
  char v333;
  unsigned __int8 *v334;
  int v335;
  AGCLLVMUserObject *v336;
  llvm::PHINode *v337;
  uint64_t v338;
  const void *v339;
  const void **v340;
  _BYTE *v341;
  std::string::size_type v342;
  std::string::size_type v343;
  llvm::Instruction *v344;
  llvm::Instruction *v345;
  char v346;
  std::string *v347;
  std::string::size_type v348;
  std::string *v349;
  std::string::size_type v350;
  llvm::Use **v351;
  std::string::size_type v352;
  void *v353;
  _QWORD *v354;
  _QWORD *v355;
  void *v356;
  _QWORD *v357;
  _QWORD *v358;
  void *v359;
  _QWORD *v360;
  _QWORD *v361;
  void *v362;
  uint64_t v363;
  void **v364;
  std::string::size_type v365;
  std::string *v366;
  std::string::size_type v367;
  std::string *v368;
  std::string::size_type v369;
  const std::string::value_type *v370;
  std::string::size_type v371;
  uint64_t *v373;
  uint64_t *v374;
  unint64_t v375;
  __int128 v376;
  _QWORD *v377;
  unsigned __int8 **v378;
  unsigned __int8 **v379;
  char *v380;
  unint64_t v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  llvm::Type **v390;
  unint64_t v391;
  char *v392;
  unsigned int data;
  llvm::Type *v394;
  llvm::Type *v395;
  llvm::Type *v396;
  llvm::Type *v397;
  uint64_t *v398;
  char *v399;
  uint64_t v400;
  uint64_t v402;
  uint64_t v403;
  int v404;
  void *v405[2];
  int64_t v406;
  std::string v407;
  __int16 v408;
  _QWORD v409[2];
  uint64_t *v410;
  BOOL v411;
  llvm::Use *v412;
  _QWORD v413[2];
  llvm::GetElementPtrInst *v414;
  _QWORD v415[3];
  unsigned int __val;
  void *v417[2];
  void *v418[2];
  float v419;
  void *v420[2];
  void *v421[2];
  float v422;
  void *v423[2];
  void *v424[2];
  int v425;
  std::string v426;
  int v427;
  _WORD v428[32];
  std::string v429;
  llvm::Use *v430[2];
  _QWORD v431[2];
  __int16 v432;
  _BYTE __p[24];
  unint64_t v434;
  uint64_t v435;
  char v436;
  std::string v437;
  __int16 v438;
  void *v439[2];
  _QWORD v440[6];

  v1 = this;
  v440[4] = *MEMORY[0x1E0C80C00];
  v405[0] = 0;
  v405[1] = 0;
  v406 = 0;
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1755))
  {
    v2 = *((unsigned int *)this + 798);
    if ((_DWORD)v2)
    {
      v3 = (uint64_t *)*((_QWORD *)this + 398);
      v4 = 8 * v2;
      while (1)
      {
        v5 = *v3;
        if (*(_BYTE *)(*v3 + 1))
        {
          if (*(_BYTE *)(v5 + 2))
            break;
        }
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_7;
      }
      std::to_string(&v437, *(_DWORD *)(v5 + 48));
      v366 = std::string::insert(&v437, 0, "buffer(");
      v367 = v366->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
      v426.__r_.__value_.__r.__words[2] = v367;
      v366->__r_.__value_.__l.__size_ = 0;
      v366->__r_.__value_.__r.__words[2] = 0;
      v366->__r_.__value_.__r.__words[0] = 0;
      v368 = std::string::append(&v426, "): Argument buffer participates in modification as well as resource use");
      v369 = v368->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v369;
      v368->__r_.__value_.__l.__size_ = 0;
      v368->__r_.__value_.__r.__words[2] = 0;
      v368->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v370 = __p;
      else
        v370 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v371 = __p[23];
      else
        v371 = *(_QWORD *)&__p[8];
      std::string::append((std::string *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8), v370, v371);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v426.__r_.__value_.__l.__data_);
      if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v437.__r_.__value_.__l.__data_);
      goto LABEL_663;
    }
  }
LABEL_7:
  if (*((_DWORD *)this + 812))
  {
    v6 = (int32x2_t *)((char *)this + 3240);
    v399 = (char *)this + 8;
    v389 = (char *)this + 200;
    v385 = (char *)this + 208;
    while (1)
    {
      v7 = *((_QWORD *)v1 + 405);
      v8 = *((unsigned int *)v1 + 814);
      v9 = v7 + 48 * v8;
      if ((_DWORD)v8)
      {
        v10 = 48 * v8;
        while ((*(_QWORD *)(v7 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 48;
          v10 -= 48;
          if (!v10)
          {
            v7 = v9;
            break;
          }
        }
      }
      v11 = *(_QWORD *)(v7 + 24);
      v12 = *(_QWORD *)(v7 + 40);
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(v6, v7);
      if ((*(_DWORD *)(v12 + 8) & 0xFFFFFFFC) != 4)
        goto LABEL_663;
      v13 = *(unsigned __int8 *)(v11 + 16);
      if (v13 == 62 && v11 != 0)
      {
        v18 = (uint64_t *)*((_QWORD *)v1 + 403);
        if (!v18)
LABEL_667:
          abort();
        v19 = *(_DWORD *)(*(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 32);
        while (1)
        {
          while (1)
          {
            v20 = *((_DWORD *)v18 + 8);
            if (v19 >= v20)
              break;
            v18 = (uint64_t *)*v18;
            if (!v18)
              goto LABEL_667;
          }
          if (v20 >= v19)
            break;
          v18 = (uint64_t *)v18[1];
          if (!v18)
            goto LABEL_667;
        }
        v402 = v18[5];
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v11);
        if (v12 && *(_DWORD *)(v12 + 8) == 7)
        {
          v430[0] = 0;
          AGCArgumentBuffer::lookup(*(AGCArgumentBuffer **)(v402 + 56), (const llvm::GetElementPtrInst *)v11, v430, __p);
          v21 = (char *)v430[0];
          v22 = (char *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
          *(_QWORD *)__p = &__p[16];
          *(_QWORD *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v22, (char *)v430[0]);
          AGCArgumentBuffer::Constant::remapToTier1Indices(&v426, v12, __p);
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v426, v21, (char *)v11);
          v23 = *(_QWORD *)(v402 + 16);
          v24 = *(uint64_t **)(v402 + 112);
          v25 = (uint64_t)&v399[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
          v438 = 257;
          llvm::IRBuilderBase::CreateGEP(v25, v23, v24, (uint64_t **)v426.__r_.__value_.__l.__data_, LODWORD(v426.__r_.__value_.__r.__words[1]), (uint64_t)&v437);
          if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
            free(v426.__r_.__value_.__l.__data_);
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
          v26 = "constant_gep";
        }
        else
        {
          v437.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437.__r_.__value_.__r.__words[2];
          v437.__r_.__value_.__l.__size_ = 0x400000000;
          v30 = (char *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
          *(_QWORD *)__p = &__p[16];
          *(_QWORD *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v30, (char *)v11);
          v31 = *(_DWORD *)(v12 + 8);
          v390 = (llvm::Type **)v11;
          if (v12 && v31 == 5)
          {
            v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429.__r_.__value_.__r.__words[2];
            v429.__r_.__value_.__l.__size_ = 0x400000000;
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 0);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 1);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 2);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 3);
            v33 = (std::string *)v429.__r_.__value_.__r.__words[0];
            if (LODWORD(v429.__r_.__value_.__r.__words[1]))
            {
              v34 = v6;
              v395 = (llvm::Type *)(v429.__r_.__value_.__r.__words[0] + 4 * LODWORD(v429.__r_.__value_.__r.__words[1]));
              do
              {
                v35 = *(_QWORD *)(*(_QWORD *)v1 - 24);
                v36 = *(_QWORD *)(v402 + 16);
                v37 = *(uint64_t **)(v402 + 112);
                switch(LODWORD(v33->__r_.__value_.__l.__data_))
                {
                  case 0:
                    v38 = 0;
                    break;
                  case 1:
                    v38 = 0;
                    break;
                  case 2:
                    v38 = 1;
                    break;
                  case 3:
                    v38 = 1;
                    break;
                  default:
                    v38 = 1;
                    break;
                }
                v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__r.__words[2];
                v426.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v12 + 112))
                  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v426, v12 + 104);
                v39 = *(unsigned int *)(v12 + 192);
                if ((_DWORD)v39)
                {
                  v40 = *(unsigned int **)(v12 + 184);
                  v41 = &v40[2 * v39];
                  do
                  {
                    v42 = *v40;
                    v43 = v40[1];
                    v40 += 2;
                    *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * v43) = *(_QWORD *)(*(_QWORD *)__p + 8 * v42);
                  }
                  while (v40 != v41);
                }
                v44 = (llvm::Type **)((char *)this + v35 + 40);
                llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v35 + 104), v32);
                *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if ((v38 & 1) != 0)
                {
                  ResourceArrayIndex = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, v44, __p);
                  v47 = LODWORD(v426.__r_.__value_.__r.__words[1]);
                  *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 8) = ResourceArrayIndex;
                }
                else
                {
                  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v35 + 104), v45);
                  *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  v48 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, v44, __p);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v426, (uint64_t)v48);
                  v47 = LODWORD(v426.__r_.__value_.__r.__words[1]);
                }
                v432 = 257;
                GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)&v399[v35 + 32], v36, v37, (uint64_t **)v426.__r_.__value_.__l.__data_, v47, (uint64_t)v430);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, GEP);
                v1 = this;
                if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
                  free(v426.__r_.__value_.__l.__data_);
                v33 = (std::string *)((char *)v33 + 4);
              }
              while (v33 != (std::string *)v395);
              v33 = (std::string *)v429.__r_.__value_.__r.__words[0];
              v6 = v34;
            }
            if (v33 != (std::string *)&v429.__r_.__value_.__r.__words[2])
              free(v33);
            v26 = "texture_gep";
          }
          else if (v12 && v31 == 6)
          {
            v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429.__r_.__value_.__r.__words[2];
            v429.__r_.__value_.__l.__size_ = 0x300000000;
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 0);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v429, 2);
            v51 = (std::string *)v429.__r_.__value_.__r.__words[0];
            if (LODWORD(v429.__r_.__value_.__r.__words[1]))
            {
              v52 = v6;
              v396 = (llvm::Type *)(v429.__r_.__value_.__r.__words[0] + 4 * LODWORD(v429.__r_.__value_.__r.__words[1]));
              do
              {
                v53 = *(_QWORD *)(*(_QWORD *)v1 - 24);
                v54 = *(_QWORD *)(v402 + 16);
                v55 = *(uint64_t **)(v402 + 112);
                v56 = LODWORD(v51->__r_.__value_.__l.__data_) != 1;
                if (LODWORD(v51->__r_.__value_.__l.__data_) == 2)
                  v56 = 1;
                if (LODWORD(v51->__r_.__value_.__l.__data_))
                  v57 = v56;
                else
                  v57 = 0;
                v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__r.__words[2];
                v426.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v12 + 112))
                  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v426, v12 + 104);
                v58 = *(unsigned int *)(v12 + 192);
                if ((_DWORD)v58)
                {
                  v59 = *(unsigned int **)(v12 + 184);
                  v60 = &v59[2 * v58];
                  do
                  {
                    v61 = *v59;
                    v62 = v59[1];
                    v59 += 2;
                    *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * v62) = *(_QWORD *)(*(_QWORD *)__p + 8 * v61);
                  }
                  while (v59 != v60);
                }
                v63 = (llvm::Type **)((char *)this + v53 + 40);
                llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v53 + 104), v50);
                *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v57)
                {
                  v65 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, v63, __p);
                  v66 = LODWORD(v426.__r_.__value_.__r.__words[1]);
                  *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 8) = v65;
                }
                else
                {
                  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v53 + 104), v64);
                  *(_QWORD *)(v426.__r_.__value_.__r.__words[0] + 8 * LODWORD(v426.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  v67 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, v63, __p);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v426, (uint64_t)v67);
                  v66 = LODWORD(v426.__r_.__value_.__r.__words[1]);
                }
                v432 = 257;
                v68 = llvm::IRBuilderBase::CreateGEP((uint64_t)&v399[v53 + 32], v54, v55, (uint64_t **)v426.__r_.__value_.__l.__data_, v66, (uint64_t)v430);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, v68);
                v1 = this;
                if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
                  free(v426.__r_.__value_.__l.__data_);
                v51 = (std::string *)((char *)v51 + 4);
              }
              while (v51 != (std::string *)v396);
              v51 = (std::string *)v429.__r_.__value_.__r.__words[0];
              v6 = v52;
            }
            if (v51 != (std::string *)&v429.__r_.__value_.__r.__words[2])
              free(v51);
            v26 = "sampler_gep";
          }
          else
          {
            if (v31 == 4)
              v85 = v12;
            else
              v85 = 0;
            v86 = *(_QWORD *)(*(_QWORD *)v1 - 24);
            v87 = &v399[v86];
            v88 = *(_QWORD *)(v402 + 16);
            v89 = *(uint64_t **)(v402 + 112);
            AGCArgumentBuffer::Buffer::remapToTier1Indices(&v426, v85, (llvm::Type **)((char *)v1 + v86 + 40), __p);
            v432 = 257;
            v90 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v87 + 32), v88, v89, (uint64_t **)v426.__r_.__value_.__l.__data_, LODWORD(v426.__r_.__value_.__r.__words[1]), (uint64_t)v430);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, v90);
            if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
              free(v426.__r_.__value_.__l.__data_);
            v26 = "buffer_gep";
          }
          v91 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
          v92 = *(_QWORD *)(v402 + 16);
          v93 = *(uint64_t **)(v402 + 112);
          v430[0] = *(llvm::Use **)(*(_QWORD *)v437.__r_.__value_.__l.__data_
                                  - 32 * (*(_DWORD *)(*(_QWORD *)v437.__r_.__value_.__l.__data_ + 20) & 0x7FFFFFF)
                                  + 32);
          v430[1] = (llvm::Use *)llvm::ConstantInt::get();
          v431[0] = llvm::ConstantInt::get();
          v428[0] = 257;
          v94 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v91 + 40), v92, v93, (uint64_t **)v430, 3, (uint64_t)&v426);
          v95 = llvm::ConstantInt::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, v94);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, v95);
          v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__r.__words[2];
          v426.__r_.__value_.__l.__size_ = 0x400000000;
          if (LODWORD(v437.__r_.__value_.__r.__words[1]))
          {
            v96 = (uint64_t **)v437.__r_.__value_.__r.__words[0];
            v97 = 8 * LODWORD(v437.__r_.__value_.__r.__words[1]);
            do
            {
              v98 = *v96++;
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v426, *v98);
              v97 -= 8;
            }
            while (v97);
          }
          v99 = (llvm::Type *)llvm::StructType::get();
          InsertValue = (llvm::Type **)llvm::UndefValue::get();
          LODWORD(v429.__r_.__value_.__l.__data_) = 0;
          if (LODWORD(v437.__r_.__value_.__r.__words[1]))
          {
            v101 = 0;
            do
            {
              v102 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
              v103 = *(_QWORD *)(v437.__r_.__value_.__r.__words[0] + 8 * v101);
              v432 = 257;
              InsertValue = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v102, (uint64_t)InsertValue, v103, (uint64_t)&v429, 1, (uint64_t)v430);
              v101 = LODWORD(v429.__r_.__value_.__l.__data_) + 1;
              LODWORD(v429.__r_.__value_.__l.__data_) = v101;
            }
            while (LODWORD(v437.__r_.__value_.__r.__words[1]) > v101);
          }
          AllocaInEntryBlock = (llvm::Value *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)+ 32), v99);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), InsertValue, (uint64_t)AllocaInEntryBlock, 0);
          v11 = (uint64_t)v390;
          AGCLLVMUserObject::addrSpaceReconciliation(v1, AllocaInEntryBlock, *v390);
          if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
            free(v426.__r_.__value_.__l.__data_);
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
          if ((std::string::size_type *)v437.__r_.__value_.__l.__data_ != &v437.__r_.__value_.__r.__words[2])
            free(v437.__r_.__value_.__l.__data_);
        }
        v105 = 1;
        BYTE1(v435) = 1;
        if (*v26)
        {
          *(_QWORD *)__p = v26;
          v105 = 3;
        }
        LOBYTE(v435) = v105;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
        goto LABEL_145;
      }
      if (v13 != 60 || v11 == 0)
        break;
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v11);
      *(_QWORD *)__p = &__p[16];
      *(_QWORD *)&__p[8] = 0x400000000;
      v27 = *(_DWORD *)(v12 + 8);
      if (v12)
        v28 = v27 == 5;
      else
        v28 = 0;
      if (v28)
      {
        AGCArgumentBuffer::Texture::typeSet((AGCArgumentBuffer::Texture *)&v426, *(AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400), *(llvm::LLVMContext **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 392));
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v426);
        if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
          free(v426.__r_.__value_.__l.__data_);
        AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(v1, (llvm::Type **)v11, (uint64_t)__p);
        v29 = "texture_load";
      }
      else if (v12 && v27 == 6)
      {
        AGCArgumentBuffer::Sampler::typeSet((AGCArgumentBuffer::Sampler *)&v426, *(AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400), *(llvm::LLVMContext **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 392));
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v426);
        if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
          free(v426.__r_.__value_.__l.__data_);
        AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(v1, (llvm::Type **)v11, (uint64_t)__p);
        v29 = "sampler_load";
      }
      else
      {
        v69 = (uint64_t *)v11;
        v70 = *(llvm::Value **)(v11 - 32);
        v71 = (llvm::Type *)llvm::PointerType::get();
        v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
        v72 = llvm::StructType::get();
        v73 = (llvm::Type *)llvm::PointerType::get();
        v74 = (uint64_t *)AGCLLVMUserObject::addrSpaceReconciliation(v1, v70, v73);
        v75 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v437.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
        v437.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
        v428[0] = 257;
        v76 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v75 + 40), v72, v74, (uint64_t **)&v437, 2, (uint64_t)&v426);
        v77 = (uint64_t *)&v399[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
        v428[0] = 257;
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v77, v71, v76, 0, (uint64_t)&v426);
        v79 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v80 = (llvm::Type *)*((_QWORD *)v79 + 30);
        v428[0] = 257;
        v81 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v79 + 5, v80, AlignedLoad, 0, (uint64_t)&v426);
        v82 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
        v11 = (uint64_t)v69;
        v83 = *v69;
        v428[0] = 257;
        llvm::IRBuilderBase::CreateCast(v82, 48, v81, v83, (uint64_t)&v426);
        v29 = "buffer_load";
      }
      v84 = 1;
      HIBYTE(v428[0]) = 1;
      if (*v29)
      {
        v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        v84 = 3;
      }
      LOBYTE(v428[0]) = v84;
      llvm::Value::setName();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
      if (*(_BYTE **)__p != &__p[16])
        free(*(void **)__p);
LABEL_145:
      if (!*((_DWORD *)v1 + 812))
        goto LABEL_146;
    }
    if (v13 != 61 || v11 == 0)
      goto LABEL_663;
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v11);
    *(_QWORD *)__p = &__p[16];
    *(_QWORD *)&__p[8] = 0x400000000;
    v17 = *(_DWORD *)(v12 + 8);
    if (v12 && v17 == 5)
    {
      AGCArgumentBuffer::Texture::typeSet((AGCArgumentBuffer::Texture *)&v426, *(AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400), *(llvm::LLVMContext **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 392));
    }
    else
    {
      if (!v12 || v17 != 6)
      {
        v106 = *(_QWORD *)(*(_QWORD *)v1 - 24);
        v107 = *(_QWORD *)(v11 - 64);
        v108 = *(_QWORD *)&v385[v106 + 32];
        v428[0] = 257;
        Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v1 + v106 + 40, 47, v107, v108, (uint64_t)&v426);
        v110 = v11;
        v426.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
        v426.__r_.__value_.__l.__size_ = llvm::PointerType::get();
        v426.__r_.__value_.__r.__words[2] = *(_QWORD *)&v389[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
        v111 = (llvm::Type *)llvm::StructType::get();
        v112 = *(llvm::Value **)(v11 - 32);
        v113 = (llvm::Type *)llvm::PointerType::get();
        v114 = AGCLLVMUserObject::addrSpaceReconciliation(v1, v112, v113);
        v115 = (uint64_t *)&v399[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
        v428[0] = 257;
        v116 = llvm::IRBuilderBase::CreateAlignedLoad(v115, v111, v114, 0, (uint64_t)&v426);
        v117 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
        LODWORD(v437.__r_.__value_.__l.__data_) = 0;
        v428[0] = 257;
        Value = llvm::IRBuilderBase::CreateExtractValue(v117, v116, (uint64_t)&v437, 1, (uint64_t)&v426);
        v119 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
        LODWORD(v437.__r_.__value_.__l.__data_) = 1;
        v428[0] = 257;
        v120 = llvm::IRBuilderBase::CreateExtractValue(v119, v116, (uint64_t)&v437, 1, (uint64_t)&v426);
        v121 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
        LODWORD(v437.__r_.__value_.__l.__data_) = 2;
        v428[0] = 257;
        v122 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v121, v116, (uint64_t)&v437, 1, (uint64_t)&v426);
        v123 = Value;
        v11 = v110;
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), Cast, v123, 0);
        v124 = v120;
        v1 = this;
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v122, v124, 0);
LABEL_143:
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
        if (*(_BYTE **)__p != &__p[16])
          free(*(void **)__p);
        goto LABEL_145;
      }
      AGCArgumentBuffer::Sampler::typeSet((AGCArgumentBuffer::Sampler *)&v426, *(AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400), *(llvm::LLVMContext **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 392));
    }
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v426);
    if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
      free(v426.__r_.__value_.__l.__data_);
    AGCLLVMUserObject::replaceArgumentBufferStoreTextureOrSampler(v1, v11, (uint64_t)__p);
    goto LABEL_143;
  }
LABEL_146:
  v125 = *((unsigned int *)v1 + 798);
  if ((_DWORD)v125)
  {
    v126 = *((_QWORD *)v1 + 398);
    v127 = v126 + 8 * v125;
    v382 = (char *)v1 + 368;
    v392 = (char *)v1 + 8;
    v374 = (uint64_t *)((char *)v1 + 952);
    v378 = (unsigned __int8 **)((char *)v1 + 3040);
    v379 = (unsigned __int8 **)((char *)v1 + 2992);
    v373 = (uint64_t *)((char *)v1 + 976);
    LOBYTE(v128) = 1;
    v381 = v127;
    while ((v128 & 1) == 0)
    {
      v128 = 0;
LABEL_640:
      v126 += 8;
      if (v126 == v127)
        goto LABEL_643;
    }
    v129 = *(_QWORD *)v126;
    *(_OWORD *)v423 = 0u;
    *(_OWORD *)v424 = 0u;
    v425 = 1065353216;
    *(_OWORD *)v420 = 0u;
    *(_OWORD *)v421 = 0u;
    v422 = 1.0;
    *(_OWORD *)v417 = 0u;
    *(_OWORD *)v418 = 0u;
    v419 = 1.0;
    __val = *(_DWORD *)(v129 + 48);
    v404 = *(unsigned __int8 *)(*(_QWORD *)&v382[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32] + 1755);
    v415[0] = v1;
    v415[1] = v423;
    v415[2] = &__val;
    v439[0] = v440;
    v439[1] = (void *)0x400000000;
    v130 = *(_QWORD *)(v129 + 8);
    if (*(_BYTE *)(v129 + 3) && (v131 = *(_QWORD *)(v130 + 8)) != 0)
    {
      v132 = 0;
      do
      {
        v133 = *(_QWORD *)(v131 + 24);
        if (*(_BYTE *)(v133 + 16) == 60)
        {
          ++v132;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v439, v133);
        }
        v131 = *(_QWORD *)(v131 + 8);
      }
      while (v131);
      v134 = v132 + 1;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v439, *(_QWORD *)(v129 + 8));
      if (v132 == -1)
      {
LABEL_624:
        v128 = 1;
        if (!v404)
          llvm::Value::replaceAllUsesWith();
        goto LABEL_626;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v439, v130);
      v134 = 1;
    }
    v135 = 0;
    v384 = v134;
    v383 = v126;
    v391 = v129;
LABEL_160:
    v386 = v135;
    v136 = *((_QWORD *)v439[0] + v135);
    v137 = *(_QWORD *)(v136 + 8);
    if (!v137)
      goto LABEL_623;
    v400 = v136;
LABEL_162:
    v138 = *(llvm::GetElementPtrInst **)(v137 + 24);
    v139 = *(_QWORD *)(v137 + 8);
    v413[0] = 4;
    v413[1] = 0;
    v414 = v138;
    if (v138 != (llvm::GetElementPtrInst *)-8192 && v138 != (llvm::GetElementPtrInst *)-4096 && v138 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v413);
    if (*(_BYTE *)(v136 + 16) == 21)
      v141 = v136;
    else
      v141 = 0;
    v403 = v139;
    if (AGCLLVMUserObject::isAllocaStoreForDebugger(*((_BYTE *)v1 + 45), (uint64_t)v138, v141))
    {
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v138);
      v142 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
      v143 = *(_QWORD *)(v129 + 112);
      v144 = *(_QWORD *)v136;
      LOWORD(v435) = 257;
      v145 = llvm::IRBuilderBase::CreateCast(v142, 49, v143, v144, (uint64_t)__p);
      v146 = (uint64_t *)((char *)v138 - 64);
      if (*((_QWORD *)v138 - 8))
      {
        **((_QWORD **)v138 - 6) = *((_QWORD *)v138 - 7);
        v147 = *((_QWORD *)v138 - 7);
        if (v147)
          *(_QWORD *)(v147 + 16) = *((_QWORD *)v138 - 6);
      }
      *v146 = v145;
      if (v145)
      {
        v150 = *(_QWORD *)(v145 + 8);
        v148 = (uint64_t **)(v145 + 8);
        v149 = v150;
        *((_QWORD *)v138 - 7) = v150;
        if (v150)
          *(_QWORD *)(v149 + 16) = (char *)v138 - 56;
        *((_QWORD *)v138 - 6) = v148;
        *v148 = v146;
      }
      v151 = 6;
      goto LABEL_439;
    }
    v152 = v414;
    if (v414 && *((_BYTE *)v414 + 16) == 62)
    {
      v412 = 0;
      v411 = 0;
      v153 = AGCArgumentBuffer::lookup(*(AGCArgumentBuffer **)(v129 + 56), v414, &v412, &v411);
      if (!v153 || (v154 = (unint64_t)v153, v155 = *((_DWORD *)v153 + 2), (v155 & 0xFFFFFFFC) != 4))
      {
        if (!v404)
          goto LABEL_437;
        std::to_string(&v437, __val);
        v171 = std::string::insert(&v437, 0, "buffer(");
        v172 = v171->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        v426.__r_.__value_.__r.__words[2] = v172;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        v173 = std::string::append(&v426, "): Unable to map argument buffer access to resource");
        v174 = v173->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = v174;
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0)
          v175 = __p;
        else
          v175 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v176 = __p[23];
        else
          v176 = *(_QWORD *)&__p[8];
        std::string::append((std::string *)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24)], v175, v176);
        v136 = v400;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v426.__r_.__value_.__l.__data_);
        v129 = v391;
        if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_203;
        goto LABEL_204;
      }
      v156 = (char *)v412;
      if (v404 && v411 && v412 == v152 && AGCLLVMUserObject::isVoidPointerUseInIntrinsic(v1, v152))
      {
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v152);
        v129 = v391;
        v157 = *(llvm::Value **)(v391 + 112);
        v158 = *(_QWORD *)v157;
        if ((*(_DWORD *)(*(_QWORD *)v157 + 8) & 0xFE) == 0x12)
          v158 = **(_QWORD **)(v158 + 16);
        v159 = **(llvm::Type ***)(v158 + 16);
        v160 = (llvm::Value *)((_QWORD *)v152 - 4 * (*((_DWORD *)v152 + 5) & 0x7FFFFFF))[4];
        v161 = (llvm::IRBuilderBase *)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
        LOWORD(v435) = 257;
        v162 = llvm::IRBuilderBase::CreateGEP(v161, v159, v157, v160, (const llvm::Twine *)__p);
        v163 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
        v164 = *(_QWORD *)v152;
        LOWORD(v435) = 257;
        llvm::IRBuilderBase::CreateCast(v163, 49, v162, v164, (uint64_t)__p);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v152);
        goto LABEL_218;
      }
      AGCArgumentBuffer::Resource::getResourceIdBounds((AGCArgumentBuffer::Resource *)v154, v152);
      if (v177)
      {
        if (v155 == 7)
          goto LABEL_240;
        if (v155 != 4)
        {
          if (v155 == 5)
            v178 = v154;
          else
            v178 = 0;
          if (v155 == 6)
            v179 = v154;
          else
            v179 = 0;
          v180 = **(_QWORD **)(*(_QWORD *)v152 + 16);
          v397 = (llvm::Type *)v180;
          if (*(_BYTE *)(v180 + 8) == 15)
            v180 = **(_QWORD **)(v180 + 16);
          v129 = v391;
          if (!v404 && !*(_BYTE *)v391)
          {
            v151 = 6;
            v126 = v383;
            goto LABEL_438;
          }
          if (!v178)
          {
            LOBYTE(v434) = 0;
            *(_QWORD *)&__p[8] = v179;
            *(_QWORD *)&__p[16] = v180;
            _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v426, *(_DWORD *)(v179 + 236), __val);
            v304 = *(_DWORD *)(v179 + 240);
            *(_DWORD *)__p = v426.__r_.__value_.__l.__data_;
            *(_DWORD *)&__p[4] = v304;
            data = v426.__r_.__value_.__l.__data_;
            std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>(v373, v426.__r_.__value_.__l.__data_, __p);
            *((_BYTE *)v1 + 3659) = 1;
LABEL_553:
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v152);
            ResourceId = AGCArgumentBuffer::Resource::getResourceId(v154, (llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (uint64_t)v152);
            v329 = v152;
            if (v404)
              v329 = (llvm::Value *)llvm::UndefValue::get();
            v409[0] = vadd_s32(vdup_n_s32(data), (int32x2_t)AGCArgumentBuffer::Resource::getResourceIdBounds((AGCArgumentBuffer::Resource *)v154, v152));
            if (v178)
              v330 = v379;
            else
              v330 = v378;
            AGCLLVMUserObject::buildABResourceIntrinsic(v1, v330, v397, ResourceId, (AGCArgumentBuffer::Resource::Bounds *)v409, data, v329);
            llvm::Value::takeName();
            v331 = *((_QWORD *)v152 + 1);
            v136 = v400;
            while (1)
            {
              if (!v331)
              {
                v126 = v383;
                v129 = v391;
                goto LABEL_610;
              }
              v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__r.__words[2];
              v426.__r_.__value_.__l.__size_ = 0x800000000;
              v437.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437.__r_.__value_.__r.__words[2];
              v437.__r_.__value_.__l.__size_ = 0x800000000;
              *(_QWORD *)__p = &v435;
              *(_QWORD *)&__p[8] = &v435;
              *(_QWORD *)&__p[16] = 8;
              LODWORD(v434) = 0;
              v388 = *(_QWORD *)(v331 + 8);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v426, *(_QWORD *)(v331 + 24));
              v332 = v426.__r_.__value_.__r.__words[1];
              if (!LODWORD(v426.__r_.__value_.__r.__words[1]))
              {
LABEL_581:
                if (LODWORD(v437.__r_.__value_.__r.__words[1]))
                {
                  v342 = v437.__r_.__value_.__r.__words[0];
                  v343 = v437.__r_.__value_.__r.__words[0] + 8 * LODWORD(v437.__r_.__value_.__r.__words[1]);
                  do
                  {
                    v345 = *(llvm::Instruction **)(v343 - 8);
                    v343 -= 8;
                    v344 = v345;
                    if (v345)
                    {
                      llvm::Instruction::eraseFromParent(v344);
                      v342 = v437.__r_.__value_.__r.__words[0];
                    }
                  }
                  while (v343 != v342);
                }
                v346 = 1;
                v136 = v400;
                v1 = this;
                goto LABEL_600;
              }
              v333 = 0;
              while (1)
              {
                v334 = *(unsigned __int8 **)(v426.__r_.__value_.__r.__words[0] + 8 * v332 - 8);
                LODWORD(v426.__r_.__value_.__r.__words[1]) = v332 - 1;
                v335 = v334[16];
                v336 = v335 == 83 ? (AGCLLVMUserObject *)v334 : 0;
                if (v404 && v336)
                  break;
LABEL_576:
                if (v335 == 60)
                {
                  if (((v404 != 0) & v333) == 1)
                  {
                    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v334);
                    AGCLLVMUserObject::buildABResourceIntrinsic(this, v330, v397, ResourceId, (AGCArgumentBuffer::Resource::Bounds *)v409, data, v329);
                  }
                  llvm::Value::replaceAllUsesWith();
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, (uint64_t)v334);
                }
                v332 = v426.__r_.__value_.__r.__words[1];
                if (!LODWORD(v426.__r_.__value_.__r.__words[1]))
                  goto LABEL_581;
              }
              llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v430, (llvm::SmallPtrSetImplBase *)__p, v334);
              if ((AGCLLVMUserObject::IsPhiInputsEquivalent(v336, v337) & 1) != 0)
                break;
              std::to_string(&v407, __val);
              v347 = std::string::insert(&v407, 0, "buffer(");
              v348 = v347->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v429.__r_.__value_.__l.__data_ = *(_OWORD *)&v347->__r_.__value_.__l.__data_;
              v429.__r_.__value_.__r.__words[2] = v348;
              v347->__r_.__value_.__l.__size_ = 0;
              v347->__r_.__value_.__r.__words[2] = 0;
              v347->__r_.__value_.__r.__words[0] = 0;
              v349 = std::string::append(&v429, "): Unable to map argument buffer access to resource");
              v350 = v349->__r_.__value_.__r.__words[2];
              *(_OWORD *)v430 = *(_OWORD *)&v349->__r_.__value_.__l.__data_;
              v431[0] = v350;
              v349->__r_.__value_.__l.__size_ = 0;
              v349->__r_.__value_.__r.__words[2] = 0;
              v349->__r_.__value_.__r.__words[0] = 0;
              v1 = this;
              if (v431[0] >= 0)
                v351 = v430;
              else
                v351 = (llvm::Use **)v430[0];
              if (v431[0] >= 0)
                v352 = HIBYTE(v431[0]);
              else
                v352 = (std::string::size_type)v430[1];
              std::string::append((std::string *)&v392[*(_QWORD *)(*(_QWORD *)this - 24)], (const std::string::value_type *)v351, v352);
              if (SHIBYTE(v431[0]) < 0)
                operator delete(v430[0]);
              v136 = v400;
              if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v429.__r_.__value_.__l.__data_);
              if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v407.__r_.__value_.__l.__data_);
              v346 = 0;
LABEL_600:
              if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
                free(*(void **)&__p[8]);
              if ((std::string::size_type *)v437.__r_.__value_.__l.__data_ != &v437.__r_.__value_.__r.__words[2])
                free(v437.__r_.__value_.__l.__data_);
              if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
                free(v426.__r_.__value_.__l.__data_);
              v331 = v388;
              if ((v346 & 1) == 0)
              {
                v151 = 1;
                v126 = v383;
LABEL_608:
                v129 = v391;
LABEL_439:
                if (v414 != (llvm::GetElementPtrInst *)-8192 && v414 != (llvm::GetElementPtrInst *)-4096 && v414)
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v413);
                if (v151 && v151 != 6)
                {
                  v128 = 0;
LABEL_626:
                  if (v439[0] != v440)
                    free(v439[0]);
                  v354 = v418[0];
                  v127 = v381;
                  if (v418[0])
                  {
                    do
                    {
                      v355 = (_QWORD *)*v354;
                      operator delete(v354);
                      v354 = v355;
                    }
                    while (v355);
                  }
                  v356 = v417[0];
                  v417[0] = 0;
                  if (v356)
                    operator delete(v356);
                  v357 = v421[0];
                  if (v421[0])
                  {
                    do
                    {
                      v358 = (_QWORD *)*v357;
                      operator delete(v357);
                      v357 = v358;
                    }
                    while (v358);
                  }
                  v359 = v420[0];
                  v420[0] = 0;
                  if (v359)
                    operator delete(v359);
                  v360 = v424[0];
                  if (v424[0])
                  {
                    do
                    {
                      v361 = (_QWORD *)*v360;
                      operator delete(v360);
                      v360 = v361;
                    }
                    while (v361);
                  }
                  v362 = v423[0];
                  v423[0] = 0;
                  if (v362)
                    operator delete(v362);
                  goto LABEL_640;
                }
                v137 = v403;
                if (!v403)
                {
LABEL_623:
                  v135 = v386 + 1;
                  if (v386 + 1 == v384)
                    goto LABEL_624;
                  goto LABEL_160;
                }
                goto LABEL_162;
              }
            }
            v338 = *((_QWORD *)v336 + 1);
            while (v338)
            {
              v339 = *(const void **)(v338 + 24);
              v338 = *(_QWORD *)(v338 + 8);
              v340 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)__p, v339);
              if (*(_QWORD *)&__p[8] == *(_QWORD *)__p)
                v341 = &__p[20];
              else
                v341 = &__p[16];
              if ((const void **)(*(_QWORD *)&__p[8] + 8 * *(unsigned int *)v341) == v340)
              {
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v426, (uint64_t)v339);
                v333 = 1;
              }
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, (uint64_t)v334);
            v335 = v334[16];
            goto LABEL_576;
          }
          v436 = 0;
          *(_WORD *)&__p[8] = *(_WORD *)(v178 + 244);
          v181 = (int *)(v178 + 248);
          if (!*(_BYTE *)(v178 + 252))
            v181 = (int *)&RASTER_ORDER_GROUP_NONE;
          v182 = *v181;
          *(_DWORD *)&__p[16] = 0;
          *(_DWORD *)&__p[12] = v182;
          v434 = v178;
          v435 = v180;
          _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v426, *(_DWORD *)(v178 + 236), __val);
          v183 = *(_DWORD *)(v178 + 240);
          *(_DWORD *)__p = v426.__r_.__value_.__l.__data_;
          *(_DWORD *)&__p[4] = v183;
          data = v426.__r_.__value_.__l.__data_;
          std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>(v374, v426.__r_.__value_.__l.__data_, __p);
          *((_BYTE *)v1 + 3658) = 1;
          v184 = 0x9DDFEA08EB382D69 * (((8 * v178) + 8) ^ HIDWORD(v178));
          v185 = 0x9DDFEA08EB382D69 * (HIDWORD(v178) ^ (v184 >> 47) ^ v184);
          v186 = 0x9DDFEA08EB382D69 * (v185 ^ (v185 >> 47));
          v187 = (unint64_t)v417[1];
          if (v417[1])
          {
            v188 = (uint8x8_t)vcnt_s8((int8x8_t)v417[1]);
            v188.i16[0] = vaddlv_u8(v188);
            if (v188.u32[0] > 1uLL)
            {
              v129 = 0x9DDFEA08EB382D69 * (v185 ^ (v185 >> 47));
              if ((void *)v186 >= v417[1])
                v129 = v186 % (unint64_t)v417[1];
            }
            else
            {
              v129 = v186 & ((unint64_t)v417[1] - 1);
            }
            v305 = (_QWORD *)*((_QWORD *)v417[0] + v129);
            if (v305)
            {
              for (i = (_QWORD *)*v305; i; i = (_QWORD *)*i)
              {
                v307 = i[1];
                if (v307 == v186)
                {
                  if (i[2] == v178)
                    goto LABEL_552;
                }
                else
                {
                  if (v188.u32[0] > 1uLL)
                  {
                    if ((void *)v307 >= v417[1])
                      v307 %= (unint64_t)v417[1];
                  }
                  else
                  {
                    v307 &= (unint64_t)v417[1] - 1;
                  }
                  if (v307 != v129)
                    break;
                }
              }
            }
          }
          v308 = operator new(0x18uLL);
          *v308 = 0;
          v308[1] = v186;
          v308[2] = v178;
          v309 = (float)((unint64_t)v418[1] + 1);
          if (v187 && (float)(v419 * (float)v187) >= v309)
          {
LABEL_542:
            v325 = v417[0];
            v326 = (_QWORD *)*((_QWORD *)v417[0] + v129);
            if (v326)
            {
              *v308 = *v326;
            }
            else
            {
              *v308 = v418[0];
              v418[0] = v308;
              v325[v129] = v418;
              if (!*v308)
                goto LABEL_551;
              v327 = *(_QWORD *)(*v308 + 8);
              if ((v187 & (v187 - 1)) != 0)
              {
                if (v327 >= v187)
                  v327 %= v187;
              }
              else
              {
                v327 &= v187 - 1;
              }
              v326 = (char *)v417[0] + 8 * v327;
            }
            *v326 = v308;
LABEL_551:
            ++v418[1];
            *((_DWORD *)this + 832) += *(_DWORD *)(v178 + 240);
LABEL_552:
            v1 = this;
            goto LABEL_553;
          }
          v310 = (v187 & (v187 - 1)) != 0;
          if (v187 < 3)
            v310 = 1;
          v311 = v310 | (2 * v187);
          v312 = vcvtps_u32_f32(v309 / v419);
          if (v311 <= v312)
            prime = (int8x8_t)v312;
          else
            prime = (int8x8_t)v311;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v187 = (unint64_t)v417[1];
          }
          if (*(_QWORD *)&prime > v187)
            goto LABEL_508;
          if (*(_QWORD *)&prime < v187)
          {
            v320 = vcvtps_u32_f32((float)(unint64_t)v418[1] / v419);
            if (v187 < 3
              || (v321 = (uint8x8_t)vcnt_s8((int8x8_t)v187), v321.i16[0] = vaddlv_u8(v321), v321.u32[0] > 1uLL))
            {
              v320 = std::__next_prime(v320);
            }
            else
            {
              v322 = 1 << -(char)__clz(v320 - 1);
              if (v320 >= 2)
                v320 = v322;
            }
            if (*(_QWORD *)&prime <= v320)
              prime = (int8x8_t)v320;
            if (*(_QWORD *)&prime >= v187)
            {
              v187 = (unint64_t)v417[1];
            }
            else
            {
              if (prime)
              {
LABEL_508:
                if (*(_QWORD *)&prime >> 61)
LABEL_668:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v314 = operator new(8 * *(_QWORD *)&prime);
                v315 = v417[0];
                v417[0] = v314;
                if (v315)
                  operator delete(v315);
                v316 = 0;
                v417[1] = (void *)prime;
                do
                  *((_QWORD *)v417[0] + v316++) = 0;
                while (*(_QWORD *)&prime != v316);
                v317 = (_QWORD **)v418[0];
                if (v418[0])
                {
                  v318 = *((_QWORD *)v418[0] + 1);
                  v319 = (uint8x8_t)vcnt_s8(prime);
                  v319.i16[0] = vaddlv_u8(v319);
                  if (v319.u32[0] > 1uLL)
                  {
                    if (v318 >= *(_QWORD *)&prime)
                      v318 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v318 &= *(_QWORD *)&prime - 1;
                  }
                  *((_QWORD *)v417[0] + v318) = v418;
                  for (j = *v317; j; v318 = v324)
                  {
                    v324 = j[1];
                    if (v319.u32[0] > 1uLL)
                    {
                      if (v324 >= *(_QWORD *)&prime)
                        v324 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v324 &= *(_QWORD *)&prime - 1;
                    }
                    if (v324 != v318)
                    {
                      if (!*((_QWORD *)v417[0] + v324))
                      {
                        *((_QWORD *)v417[0] + v324) = v317;
                        goto LABEL_533;
                      }
                      *v317 = (_QWORD *)*j;
                      *j = **((_QWORD **)v417[0] + v324);
                      **((_QWORD **)v417[0] + v324) = j;
                      j = v317;
                    }
                    v324 = v318;
LABEL_533:
                    v317 = (_QWORD **)j;
                    j = (_QWORD *)*j;
                  }
                }
                v187 = (unint64_t)prime;
                goto LABEL_537;
              }
              v353 = v417[0];
              v417[0] = 0;
              if (v353)
                operator delete(v353);
              v187 = 0;
              v417[1] = 0;
            }
          }
LABEL_537:
          if ((v187 & (v187 - 1)) != 0)
          {
            if (v186 >= v187)
              v129 = v186 % v187;
            else
              v129 = v186;
          }
          else
          {
            v129 = (v187 - 1) & v186;
          }
          goto LABEL_542;
        }
LABEL_245:
        if (v404)
        {
          v437.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437.__r_.__value_.__r.__words[2];
          v437.__r_.__value_.__l.__size_ = 0x800000000;
          *(_QWORD *)__p = &v435;
          *(_QWORD *)&__p[8] = &v435;
          *(_QWORD *)&__p[16] = 8;
          LODWORD(v434) = 0;
          v430[0] = (llvm::Use *)v431;
          v430[1] = (llvm::Use *)0x800000000;
          v193 = *((_QWORD *)v152 + 1);
          v129 = v391;
          if (v193)
          {
            v387 = v177;
            do
            {
              v194 = *(_QWORD *)(v193 + 8);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, *(_QWORD *)(v193 + 24));
              v193 = v194;
            }
            while (v194);
            v195 = v437.__r_.__value_.__r.__words[1];
            if (LODWORD(v437.__r_.__value_.__r.__words[1]))
            {
              v380 = (char *)v152 + 32;
              v196 = 0x9DDFEA08EB382D69 * (((8 * v154) + 8) ^ HIDWORD(v154));
              v197 = 0x9DDFEA08EB382D69 * (HIDWORD(v154) ^ (v196 >> 47) ^ v196);
              v375 = 0x9DDFEA08EB382D69 * (v197 ^ (v197 >> 47));
              while (1)
              {
                v198 = *(uint64_t **)(v437.__r_.__value_.__r.__words[0] + 8 * v195 - 8);
                LODWORD(v437.__r_.__value_.__r.__words[1]) = v195 - 1;
                v409[0] = 4;
                v409[1] = 0;
                v410 = v198;
                if (v198 == (uint64_t *)-8192
                  || (v198 != (uint64_t *)-4096 ? (v199 = v198 == 0) : (v199 = 1), v199))
                {
                  if (!v198)
                    goto LABEL_270;
                }
                else
                {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v409);
                  if (!v198)
                    goto LABEL_270;
                }
                if (*((_BYTE *)v198 + 16) != 83)
                  goto LABEL_270;
                llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v426, (llvm::SmallPtrSetImplBase *)__p, v198);
                if ((AGCLLVMUserObject::IsPhiInputsEquivalent((AGCLLVMUserObject *)v198, v200) & 1) != 0)
                  break;
                std::to_string(&v407, __val);
                v216 = std::string::insert(&v407, 0, "buffer(");
                v217 = v216->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v429.__r_.__value_.__l.__data_ = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
                v429.__r_.__value_.__r.__words[2] = v217;
                v216->__r_.__value_.__l.__size_ = 0;
                v216->__r_.__value_.__r.__words[2] = 0;
                v216->__r_.__value_.__r.__words[0] = 0;
                v218 = std::string::append(&v429, "): Unable to map argument buffer access to resource");
                v219 = v218->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
                v426.__r_.__value_.__r.__words[2] = v219;
                v218->__r_.__value_.__l.__size_ = 0;
                v218->__r_.__value_.__r.__words[2] = 0;
                v218->__r_.__value_.__r.__words[0] = 0;
                if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v220 = &v426;
                else
                  v220 = (std::string *)v426.__r_.__value_.__r.__words[0];
                if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v426.__r_.__value_.__r.__words[2]);
                else
                  size = v426.__r_.__value_.__l.__size_;
                std::string::append((std::string *)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24)], (const std::string::value_type *)v220, size);
                if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v426.__r_.__value_.__l.__data_);
                v129 = v391;
                if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v429.__r_.__value_.__l.__data_);
                if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v407.__r_.__value_.__l.__data_);
                v151 = 1;
LABEL_420:
                if (v410 != (uint64_t *)-8192 && v410 != (uint64_t *)-4096 && v410)
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v409);
                if (v151 != 9 && v151)
                {
                  v136 = v400;
LABEL_471:
                  if ((_QWORD *)v430[0] != v431)
                    free(v430[0]);
                  if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
                    free(*(void **)&__p[8]);
                  if ((std::string::size_type *)v437.__r_.__value_.__l.__data_ != &v437.__r_.__value_.__r.__words[2])
                    free(v437.__r_.__value_.__l.__data_);
                  if (v151)
                    goto LABEL_439;
LABEL_610:
                  v151 = 0;
                  if (v404 && v414)
                  {
                    llvm::Instruction::eraseFromParent(v138);
                    v151 = 0;
                  }
                  goto LABEL_439;
                }
                v195 = v437.__r_.__value_.__r.__words[1];
                if (!LODWORD(v437.__r_.__value_.__r.__words[1]))
                  goto LABEL_458;
              }
              v201 = v198[1];
              while (v201)
              {
                while (1)
                {
                  v202 = *(const void **)(v201 + 24);
                  v201 = *(_QWORD *)(v201 + 8);
                  v203 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)__p, v202);
                  v204 = (unsigned int *)(*(_QWORD *)&__p[8] == *(_QWORD *)__p ? &__p[20] : &__p[16]);
                  if ((const void **)(*(_QWORD *)&__p[8] + 8 * *v204) == v203)
                    break;
                  if (!v201)
                    goto LABEL_270;
                }
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v437, (uint64_t)v202);
              }
LABEL_270:
              v205 = *((unsigned __int8 *)v410 + 16);
              if (v205 == 61)
              {
                v151 = 9;
                goto LABEL_419;
              }
              if (v205 != 60)
                goto LABEL_417;
              if (!v387)
                goto LABEL_309;
              if (llvm::GetElementPtrInst::hasAllConstantIndices(v152))
              {
                v206 = *(unsigned int *)(v154 + 232);
                v207 = *(unsigned int *)(v154 + 24);
                if ((_DWORD)v207)
                {
                  v208 = *(_QWORD *)(v154 + 16);
                  v209 = 16 * v207;
                  do
                  {
                    v210 = *(_QWORD *)&v380[32 * *(unsigned int *)(*(_QWORD *)v208 + 32)
                                          + -32 * (*((_DWORD *)v152 + 5) & 0x7FFFFFF)];
                    v211 = (_QWORD *)(v210 + 24);
                    if (*(_DWORD *)(v210 + 32) >= 0x41u)
                      v211 = (_QWORD *)*v211;
                    v206 = (v206 + *(_DWORD *)(*(_QWORD *)v208 + 28) * *(_DWORD *)v211);
                    v208 += 16;
                    v209 -= 16;
                  }
                  while (v209);
                }
                if (*(_BYTE *)v391)
                  (*(void (**)(AGCLLVMUserObject *, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1 + 288))(v1, v410, v206, __val);
                v212 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 80);
                if (v212)
                  v213 = v212 - 24;
                else
                  v213 = 0;
                v214 = *(_QWORD *)(v213 + 40);
                if (v214)
                  v215 = (llvm::Instruction *)(v214 - 24);
                else
                  v215 = 0;
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v215);
                if (v410)
                {
                  AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()((uint64_t)v415, v206, v154);
LABEL_415:
                  llvm::Value::replaceAllUsesWith();
                  goto LABEL_416;
                }
                v151 = 0;
LABEL_419:
                v129 = v391;
                goto LABEL_420;
              }
              v222 = &RASTER_ORDER_GROUP_NONE;
              if (*(_BYTE *)(v154 + 276))
                v222 = (_DWORD *)(v154 + 272);
              if (*v222 == -1)
              {
LABEL_309:
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v198);
                v225 = (char *)v412;
                v226 = &v380[-32 * (*((_DWORD *)v152 + 5) & 0x7FFFFFF)];
                v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__r.__words[2];
                v426.__r_.__value_.__l.__size_ = 0x800000000;
                llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v426, v226, (char *)v412);
                AGCArgumentBuffer::Buffer::remapToTier1Indices(&v429, v154, (llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), &v426);
                llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v429, v225, (char *)v152);
                v227 = *(_QWORD *)(v391 + 16);
                v228 = *(uint64_t **)(v391 + 112);
                v229 = (uint64_t)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
                v408 = 257;
                v230 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v229, v227, v228, (uint64_t **)v429.__r_.__value_.__l.__data_, LODWORD(v429.__r_.__value_.__r.__words[1]), (uint64_t)&v407);
                v231 = &v392[*(_QWORD *)(*(_QWORD *)v1 - 24)];
                v408 = 257;
                v233 = AGCLLVMBuilder::tryDeducePointeeType(v230, v232);
                v234 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v231 + 4, v233, (uint64_t)v230, 0, (uint64_t)&v407);
                v235 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40;
                v236 = *v198;
                v408 = 257;
                llvm::IRBuilderBase::CreateCast(v235, 48, v234, v236, (uint64_t)&v407);
                llvm::Value::replaceAllUsesWith();
                if ((std::string::size_type *)v429.__r_.__value_.__l.__data_ != &v429.__r_.__value_.__r.__words[2])
                  free(v429.__r_.__value_.__l.__data_);
                if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
                  free(v426.__r_.__value_.__l.__data_);
LABEL_416:
                if (!v410)
                {
LABEL_418:
                  v151 = 0;
                  goto LABEL_419;
                }
LABEL_417:
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v430, (uint64_t)v198);
                goto LABEL_418;
              }
              if (v420[1])
              {
                v223 = (uint8x8_t)vcnt_s8((int8x8_t)v420[1]);
                v223.i16[0] = vaddlv_u8(v223);
                if (v223.u32[0] > 1uLL)
                {
                  v224 = v375;
                  if ((void *)v375 >= v420[1])
                    v224 = v375 % (unint64_t)v420[1];
                }
                else
                {
                  v224 = v375 & ((unint64_t)v420[1] - 1);
                }
                v237 = (_QWORD *)*((_QWORD *)v420[0] + v224);
                if (v237)
                {
                  v238 = (_QWORD *)*v237;
                  if (*v237)
                  {
                    do
                    {
                      v239 = v238[1];
                      if (v239 == v375)
                      {
                        if (v238[2] == v154)
                        {
                          v377 = v238;
                          goto LABEL_414;
                        }
                      }
                      else
                      {
                        if (v223.u32[0] > 1uLL)
                        {
                          if ((void *)v239 >= v420[1])
                            v239 %= (unint64_t)v420[1];
                        }
                        else
                        {
                          v239 &= (unint64_t)v420[1] - 1;
                        }
                        if (v239 != v224)
                          break;
                      }
                      v238 = (_QWORD *)*v238;
                    }
                    while (v238);
                  }
                }
              }
              v240 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 80);
              if (v240)
                v241 = v240 - 24;
              else
                v241 = 0;
              v242 = *(_QWORD *)(v241 + 40);
              if (v242)
                v243 = (llvm::Instruction *)(v242 - 24);
              else
                v243 = 0;
              llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v243);
              v394 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(v154 + 264), (llvm::Type *)*(unsigned int *)(v154 + 240));
              v398 = (uint64_t *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), v394);
              v244 = (unint64_t)v420[1];
              if (v420[1])
              {
                v245 = (uint8x8_t)vcnt_s8((int8x8_t)v420[1]);
                v245.i16[0] = vaddlv_u8(v245);
                if (v245.u32[0] > 1uLL)
                {
                  v126 = v375;
                  if ((void *)v375 >= v420[1])
                    v126 = v375 % (unint64_t)v420[1];
                }
                else
                {
                  v126 = v375 & ((unint64_t)v420[1] - 1);
                }
                v246 = (_QWORD **)*((_QWORD *)v420[0] + v126);
                if (v246)
                {
                  for (k = *v246; k; k = (_QWORD *)*k)
                  {
                    v248 = k[1];
                    if (v248 == v375)
                    {
                      if (k[2] == v154)
                        goto LABEL_405;
                    }
                    else
                    {
                      if (v245.u32[0] > 1uLL)
                      {
                        if ((void *)v248 >= v420[1])
                          v248 %= (unint64_t)v420[1];
                      }
                      else
                      {
                        v248 &= (unint64_t)v420[1] - 1;
                      }
                      if (v248 != v126)
                        break;
                    }
                  }
                }
              }
              *(_QWORD *)&v249 = v154;
              *((_QWORD *)&v249 + 1) = v398;
              v376 = v249;
              k = operator new(0x20uLL);
              *k = 0;
              k[1] = v375;
              *((_OWORD *)k + 1) = v376;
              v250 = (float)((unint64_t)v421[1] + 1);
              if (v244 && (float)(v422 * (float)v244) >= v250)
              {
LABEL_395:
                v266 = v420[0];
                v267 = (_QWORD *)*((_QWORD *)v420[0] + v126);
                if (v267)
                {
                  *k = *v267;
                }
                else
                {
                  *k = v421[0];
                  v421[0] = k;
                  v266[v126] = v421;
                  if (!*k)
                  {
LABEL_404:
                    ++v421[1];
LABEL_405:
                    v377 = k;
                    if (*(_DWORD *)(v154 + 240))
                    {
                      v269 = 0;
                      do
                      {
                        v270 = *(_DWORD *)(v154 + 232);
                        v271 = *(unsigned int *)(v154 + 24);
                        if ((_DWORD)v271)
                        {
                          v272 = *(_DWORD **)(v154 + 16);
                          v273 = &v272[4 * v271];
                          v274 = v269;
                          v275 = this;
                          do
                          {
                            v276 = v272[2];
                            v277 = v274 / v276;
                            v274 %= v276;
                            v270 += *(_DWORD *)(*(_QWORD *)v272 + 28) * v277;
                            v272 += 4;
                          }
                          while (v272 != v273);
                        }
                        else
                        {
                          v275 = this;
                        }
                        v278 = *(_QWORD *)(*(_QWORD *)v275 - 24) + 32;
                        v429.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                        v429.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                        v428[0] = 257;
                        v279 = llvm::IRBuilderBase::CreateGEP((uint64_t)&v392[v278], (uint64_t)v394, v398, (uint64_t **)&v429, 2, (uint64_t)&v426);
                        v280 = v275;
                        v281 = v279;
                        v282 = (llvm::Type **)AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()((uint64_t)v415, v270, v154);
                        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v280 + *(_QWORD *)(*(_QWORD *)v280 - 24) + 40), v282, v281, 0);
                        ++v269;
                      }
                      while (v269 < *(unsigned int *)(v154 + 240));
                    }
                    v1 = this;
                    v126 = v383;
LABEL_414:
                    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), (llvm::Instruction *)v198);
                    v283 = (llvm::Type **)v377[3];
                    v284 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
                    v429.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                    v429.__r_.__value_.__l.__size_ = (std::string::size_type)AGCArgumentBuffer::Resource::getResourceId(v154, (llvm::Type **)((char *)v1+ *(_QWORD *)(*(_QWORD *)v1 - 24)+ 40), (uint64_t)v152);
                    v428[0] = 257;
                    v286 = AGCLLVMBuilder::tryDeducePointeeType(v283, v285);
                    v287 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v284 + 40), (uint64_t)v286, (uint64_t *)v283, (uint64_t **)&v429, 2, (uint64_t)&v426);
                    v288 = &v392[*(_QWORD *)(*(_QWORD *)v1 - 24)];
                    v428[0] = 257;
                    v290 = AGCLLVMBuilder::tryDeducePointeeType(v287, v289);
                    llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v288 + 4, v290, (uint64_t)v287, 0, (uint64_t)&v426);
                    goto LABEL_415;
                  }
                  v268 = *(_QWORD *)(*k + 8);
                  if ((v244 & (v244 - 1)) != 0)
                  {
                    if (v268 >= v244)
                      v268 %= v244;
                  }
                  else
                  {
                    v268 &= v244 - 1;
                  }
                  v267 = (char *)v420[0] + 8 * v268;
                }
                *v267 = k;
                goto LABEL_404;
              }
              v251 = (v244 & (v244 - 1)) != 0;
              if (v244 < 3)
                v251 = 1;
              v252 = v251 | (2 * v244);
              v253 = vcvtps_u32_f32(v250 / v422);
              if (v252 <= v253)
                v254 = (int8x8_t)v253;
              else
                v254 = (int8x8_t)v252;
              if (*(_QWORD *)&v254 == 1)
              {
                v254 = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&v254 & (*(_QWORD *)&v254 - 1)) != 0)
              {
                v254 = (int8x8_t)std::__next_prime(*(_QWORD *)&v254);
                v244 = (unint64_t)v420[1];
              }
              if (*(_QWORD *)&v254 > v244)
                goto LABEL_361;
              if (*(_QWORD *)&v254 < v244)
              {
                v261 = vcvtps_u32_f32((float)(unint64_t)v421[1] / v422);
                if (v244 < 3
                  || (v262 = (uint8x8_t)vcnt_s8((int8x8_t)v244), v262.i16[0] = vaddlv_u8(v262), v262.u32[0] > 1uLL))
                {
                  v261 = std::__next_prime(v261);
                }
                else
                {
                  v263 = 1 << -(char)__clz(v261 - 1);
                  if (v261 >= 2)
                    v261 = v263;
                }
                if (*(_QWORD *)&v254 <= v261)
                  v254 = (int8x8_t)v261;
                if (*(_QWORD *)&v254 >= v244)
                {
                  v244 = (unint64_t)v420[1];
                }
                else
                {
                  if (v254)
                  {
LABEL_361:
                    if (*(_QWORD *)&v254 >> 61)
                      goto LABEL_668;
                    v255 = operator new(8 * *(_QWORD *)&v254);
                    v256 = v420[0];
                    v420[0] = v255;
                    if (v256)
                      operator delete(v256);
                    v257 = 0;
                    v420[1] = (void *)v254;
                    do
                      *((_QWORD *)v420[0] + v257++) = 0;
                    while (*(_QWORD *)&v254 != v257);
                    v258 = (_QWORD **)v421[0];
                    if (v421[0])
                    {
                      v259 = *((_QWORD *)v421[0] + 1);
                      v260 = (uint8x8_t)vcnt_s8(v254);
                      v260.i16[0] = vaddlv_u8(v260);
                      if (v260.u32[0] > 1uLL)
                      {
                        if (v259 >= *(_QWORD *)&v254)
                          v259 %= *(_QWORD *)&v254;
                      }
                      else
                      {
                        v259 &= *(_QWORD *)&v254 - 1;
                      }
                      *((_QWORD *)v420[0] + v259) = v421;
                      for (m = *v258; m; v259 = v265)
                      {
                        v265 = m[1];
                        if (v260.u32[0] > 1uLL)
                        {
                          if (v265 >= *(_QWORD *)&v254)
                            v265 %= *(_QWORD *)&v254;
                        }
                        else
                        {
                          v265 &= *(_QWORD *)&v254 - 1;
                        }
                        if (v265 != v259)
                        {
                          if (!*((_QWORD *)v420[0] + v265))
                          {
                            *((_QWORD *)v420[0] + v265) = v258;
                            goto LABEL_386;
                          }
                          *v258 = (_QWORD *)*m;
                          *m = **((_QWORD **)v420[0] + v265);
                          **((_QWORD **)v420[0] + v265) = m;
                          m = v258;
                        }
                        v265 = v259;
LABEL_386:
                        v258 = (_QWORD **)m;
                        m = (_QWORD *)*m;
                      }
                    }
                    v244 = (unint64_t)v254;
                    goto LABEL_390;
                  }
                  v291 = v420[0];
                  v420[0] = 0;
                  if (v291)
                    operator delete(v291);
                  v244 = 0;
                  v420[1] = 0;
                }
              }
LABEL_390:
              if ((v244 & (v244 - 1)) != 0)
              {
                if (v375 >= v244)
                  v126 = v375 % v244;
                else
                  v126 = v375;
              }
              else
              {
                v126 = (v244 - 1) & v375;
              }
              goto LABEL_395;
            }
LABEL_458:
            v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v428;
            v426.__r_.__value_.__l.__size_ = (std::string::size_type)v428;
            v426.__r_.__value_.__r.__words[2] = 8;
            v427 = 0;
            v136 = v400;
            if (LODWORD(v430[1]))
            {
              v298 = (llvm::Use *)((char *)v430[0] + 8 * LODWORD(v430[1]));
              v299 = v298;
              do
              {
                v301 = (const void *)*((_QWORD *)v299 - 1);
                v299 = (llvm::Use *)((char *)v299 - 8);
                v300 = v301;
                if (v301)
                {
                  v302 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v426, v300);
                  v303 = v426.__r_.__value_.__l.__size_ == v426.__r_.__value_.__r.__words[0]
                       ? (std::string::size_type *)((char *)&v426.__r_.__value_.__r.__words[2] + 4)
                       : &v426.__r_.__value_.__r.__words[2];
                  if ((const void **)(v426.__r_.__value_.__l.__size_ + 8 * *(unsigned int *)v303) == v302)
                  {
                    llvm::Instruction::eraseFromParent(*((llvm::Instruction **)v298 - 1));
                    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v429, (llvm::SmallPtrSetImplBase *)&v426, *((void **)v298 - 1));
                  }
                }
                v298 = v299;
              }
              while (v299 != v430[0]);
              if (v426.__r_.__value_.__l.__size_ != v426.__r_.__value_.__r.__words[0])
                free((void *)v426.__r_.__value_.__l.__size_);
            }
          }
          else
          {
            v136 = v400;
          }
          v151 = 0;
          goto LABEL_471;
        }
LABEL_437:
        v151 = 6;
        v129 = v391;
        goto LABEL_438;
      }
      if (v155 == 4)
        goto LABEL_245;
      if (v155 == 7)
      {
LABEL_240:
        if (v404)
        {
          v189 = (char *)v152 - 32 * (*((_DWORD *)v152 + 5) & 0x7FFFFFF) + 32;
          *(_QWORD *)__p = &__p[16];
          *(_QWORD *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v189, v156);
          AGCArgumentBuffer::Constant::remapToTier1Indices(&v426, v154, __p);
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v426, v156, (char *)v152);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40), v152);
          v129 = v391;
          v190 = *(_QWORD *)(v391 + 16);
          v191 = *(uint64_t **)(v391 + 112);
          v192 = (uint64_t)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
          v438 = 257;
          llvm::IRBuilderBase::CreateGEP(v192, v190, v191, (uint64_t **)v426.__r_.__value_.__l.__data_, LODWORD(v426.__r_.__value_.__r.__words[1]), (uint64_t)&v437);
          llvm::Value::replaceAllUsesWith();
          llvm::Value::takeName();
          if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ != &v426.__r_.__value_.__r.__words[2])
            free(v426.__r_.__value_.__l.__data_);
          v136 = v400;
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
          goto LABEL_610;
        }
        goto LABEL_437;
      }
      v136 = v400;
      if (!v404)
      {
        v151 = 6;
        goto LABEL_608;
      }
      std::to_string(&v437, __val);
      v292 = std::string::insert(&v437, 0, "buffer(");
      v293 = v292->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
      v426.__r_.__value_.__r.__words[2] = v293;
      v292->__r_.__value_.__l.__size_ = 0;
      v292->__r_.__value_.__r.__words[2] = 0;
      v292->__r_.__value_.__r.__words[0] = 0;
      v294 = std::string::append(&v426, "): Argument buffer accessed with non-zero array index");
      v295 = v294->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v295;
      v294->__r_.__value_.__l.__size_ = 0;
      v294->__r_.__value_.__r.__words[2] = 0;
      v294->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v296 = __p;
      else
        v296 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v297 = __p[23];
      else
        v297 = *(_QWORD *)&__p[8];
      std::string::append((std::string *)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24)], v296, v297);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v129 = v391;
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_201;
    }
    else
    {
      if (!v404)
      {
LABEL_218:
        v151 = 6;
LABEL_438:
        v136 = v400;
        goto LABEL_439;
      }
      std::to_string(&v437, __val);
      v165 = std::string::insert(&v437, 0, "buffer(");
      v166 = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v426.__r_.__value_.__r.__words[2] = v166;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      v167 = std::string::append(&v426, "): Unable to map argument buffer access to resource");
      v168 = v167->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v168;
      v167->__r_.__value_.__l.__size_ = 0;
      v167->__r_.__value_.__r.__words[2] = 0;
      v167->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v169 = __p;
      else
        v169 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v170 = __p[23];
      else
        v170 = *(_QWORD *)&__p[8];
      std::string::append((std::string *)&v392[*(_QWORD *)(*(_QWORD *)v1 - 24)], v169, v170);
      v136 = v400;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
LABEL_201:
        operator delete(v426.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
LABEL_203:
      operator delete(v437.__r_.__value_.__l.__data_);
LABEL_204:
    v151 = 1;
    goto LABEL_439;
  }
  v128 = 1;
LABEL_643:
  v363 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v363 + 824))(__p, v363, *((unsigned int *)v1 + 828), *((unsigned int *)v1 + 829), *((unsigned int *)v1 + 830), *((unsigned int *)v1 + 831), *((unsigned int *)v1 + 832), *((unsigned int *)v1 + 833), *((unsigned __int8 *)v1 + 18));
  *(_OWORD *)v405 = *(_OWORD *)&__p[8];
  v406 = v434;
  if (__p[0])
  {
    std::string::append((std::string *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8), "Total number of indirect argument buffer resources exceeded for");
    if (v406 >= 0)
      v364 = v405;
    else
      v364 = (void **)v405[0];
    if (v406 >= 0)
      v365 = HIBYTE(v406);
    else
      v365 = (std::string::size_type)v405[1];
    std::string::append((std::string *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8), (const std::string::value_type *)v364, v365);
LABEL_663:
    v128 = 0;
  }
  if (SHIBYTE(v406) < 0)
    operator delete(v405[0]);
  return v128;
}

void AGCLLVMGen5TargetLowerer::exceededResourceLimits(AGCLLVMGen5TargetLowerer *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X7>, char *a6@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  unsigned int v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  char v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  unsigned int v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string __p;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  __int128 v60;
  uint64_t v61;
  std::string v62;

  std::string::basic_string[abi:nn180100]<0>(&v62, (char *)&unk_1C3E4D9BB);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a5);
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
  v14 = v13;
  if (v12 >= a2)
  {
    if (a4 <= 0x10 && v13 >= a3)
    {
      v28 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v56, a2);
    v15 = std::string::insert(&v56, 0, " buffers (");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v57, "/");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a5);
    std::to_string(&__p, v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v58, (const std::string::value_type *)p_p, size);
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v59, ")");
    v25 = v24->__r_.__value_.__r.__words[2];
    v60 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v61 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v26 = (const std::string::value_type *)&v60;
    else
      v26 = (const std::string::value_type *)v60;
    if (v61 >= 0)
      v27 = HIBYTE(v61);
    else
      v27 = *((_QWORD *)&v60 + 1);
    std::string::append(&v62, v26, v27);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)v60);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (v14 < a3)
  {
    std::to_string(&v56, a3);
    v29 = std::string::insert(&v56, 0, " textures (");
    v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v57, "/");
    v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
    std::to_string(&__p, v33);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &__p;
    else
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v35 = __p.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v58, (const std::string::value_type *)v34, v35);
    v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v59, ")");
    v39 = v38->__r_.__value_.__r.__words[2];
    v60 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v61 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v40 = (const std::string::value_type *)&v60;
    else
      v40 = (const std::string::value_type *)v60;
    if (v61 >= 0)
      v41 = HIBYTE(v61);
    else
      v41 = *((_QWORD *)&v60 + 1);
    std::string::append(&v62, v40, v41);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)v60);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (a4 >= 0x11)
  {
    std::to_string(&v56, a4);
    v42 = std::string::insert(&v56, 0, " samplers (");
    v43 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v57, "/");
    v45 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &__p;
    else
      v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v47 = __p.__r_.__value_.__l.__size_;
    v48 = std::string::append(&v58, (const std::string::value_type *)v46, v47);
    v49 = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v59, ")");
    v51 = v50->__r_.__value_.__r.__words[2];
    v60 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v61 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v52 = (const std::string::value_type *)&v60;
    else
      v52 = (const std::string::value_type *)v60;
    if (v61 >= 0)
      v53 = HIBYTE(v61);
    else
      v53 = *((_QWORD *)&v60 + 1);
    std::string::append(&v62, v52, v53);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)v60);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
  v28 = 1;
LABEL_80:
  *a6 = v28;
  v54 = (std::string *)(a6 + 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  else
  {
    *v54 = v62;
  }
}

uint64_t AGCLLVMUserVertexShader::constructFlatReply(AGCLLVMUserVertexShader *this)
{
  AGCLLVMUserVertexShader *v1;
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  AGCLLVMUserVertexShader *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  char v46;
  unint64_t v47;
  void *v48;
  char *v49;
  flatbuffers::FlatBufferBuilder *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  const unsigned __int8 *v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v73;
  int v74;
  unsigned int **v76;
  char *v77;
  void **v78;
  void *__p;
  _BYTE *v80;
  uint64_t v81;
  char *v82[2];
  _QWORD v83[65];
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91[8];
  unsigned __int8 v92;
  uint64_t v93;

  v1 = this;
  v93 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 1298);
  if (!*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1735))
  {
    if (*((_DWORD *)this + 1298))
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (char *)v1 + 8 * v19;
        v21 = (unsigned int *)*((_QWORD *)v20 + 641);
        v22 = *v21;
        if (*v21)
        {
          v23 = 0;
          v76 = (unsigned int **)(v20 + 5128);
          do
          {
            v24 = *((_QWORD *)v21 + 1);
            v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v23 + 1 >= v22)
            {
              v27 = 1;
            }
            else
            {
              v26 = v22 - v23;
              v27 = 1;
              while (v25 + v27 == *(_DWORD *)(v24 + 4 * (v23 + v27)))
              {
                if (v26 == ++v27)
                {
                  v27 = v26;
                  break;
                }
              }
            }
            v28 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
            v29 = v28 + 2472;
            v28[2542] = 1;
            v30 = *((_DWORD *)v28 + 626) - *((_DWORD *)v28 + 630) + *((_DWORD *)v28 + 628);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28 + 2472, 4, v27);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 6, v25);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 8, v19);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 10, v23);
            v31 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v29, v30);
            v38 = v31;
            if (v17 >= v18)
            {
              v39 = (v17 - v16) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
LABEL_84:
                abort();
              if ((v18 - v16) >> 1 > v40)
                v40 = (v18 - v16) >> 1;
              if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              if (v41)
              {
                if (v41 >> 62)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v42 = (char *)operator new(4 * v41);
              }
              else
              {
                v42 = 0;
              }
              v43 = &v42[4 * v39];
              *(_DWORD *)v43 = v38;
              v44 = v43 + 4;
              while (v17 != v16)
              {
                v45 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v43 - 1) = v45;
                v43 -= 4;
              }
              v18 = &v42[4 * v41];
              if (v16)
                operator delete(v16);
              v16 = v43;
              v17 = v44;
              v1 = this;
            }
            else
            {
              *(_DWORD *)v17 = v31;
              v17 += 4;
            }
            printMessage((char **)&AGCPrinter, "TF entry: (buf %d, slot %d, size %d) =  uvs(%d)", v32, v33, v34, v35, v36, v37, v19);
            v23 += v27;
            v21 = *v76;
            v22 = **v76;
          }
          while (v22 > v23);
          v2 = *((unsigned int *)v1 + 1298);
        }
        ++v19;
      }
      while (v19 < v2);
      goto LABEL_56;
    }
LABEL_55:
    v16 = 0;
    v17 = 0;
LABEL_56:
    v3 = 0;
    v4 = 0;
    goto LABEL_57;
  }
  if (!*((_DWORD *)this + 1298))
    goto LABEL_55;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = this;
  do
  {
    v8 = **((_DWORD **)v7 + v6 + 641);
    if ((unint64_t)v4 >= v5)
    {
      v9 = (v4 - v3) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        goto LABEL_84;
      if ((uint64_t)(v5 - (_QWORD)v3) >> 1 > v10)
        v10 = (uint64_t)(v5 - (_QWORD)v3) >> 1;
      if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v11);
      else
        v12 = 0;
      v13 = (char *)(v11 + 4 * v9);
      *(_DWORD *)v13 = v8;
      v14 = v13 + 4;
      while (v4 != v3)
      {
        v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      v5 = v11 + 4 * v12;
      if (v3)
        operator delete(v3);
      v3 = v13;
      v4 = v14;
    }
    else
    {
      *(_DWORD *)v4 = v8;
      v4 += 4;
    }
    ++v6;
    v7 = this;
  }
  while (v6 < *((unsigned int *)this + 1298));
  v16 = 0;
  v17 = 0;
  v1 = this;
LABEL_57:
  v77 = (char *)v1 + 4880;
  v46 = *((_BYTE *)v1 + 4880);
  __p = 0;
  v80 = 0;
  v81 = 0;
  v82[0] = (char *)v83;
  v82[1] = (char *)0x800000000;
  v83[64] = 0x1FFFFFFFFLL;
  v84 = v46;
  v91[7] = 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  memset(v91, 0, 26);
  v92 = 1;
  if (*((_DWORD *)v1 + 1088))
  {
    v47 = *((_QWORD *)v1 + 543);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&__p, v47);
      v47 += 64;
    }
    while (v47 < *((_QWORD *)v1 + 543) + ((unint64_t)*((unsigned int *)v1 + 1088) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&__p, *(const AGCLLVMTargetLowerer **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&__p, (AGCLLVMUserVertexShader *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 2472));
  if (v80 == __p)
    v48 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  else
    v48 = __p;
  v74 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 2472, (uint64_t)v48, (v80 - (_BYTE *)__p) >> 2);
  v49 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
  v50 = (flatbuffers::FlatBufferBuilder *)(v49 + 2472);
  v49[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v49 + 2472), v17 - v16, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v49 + 2472), v17 - v16, 4uLL);
  v51 = v17 - v16;
  if (v51)
    v52 = v16;
  else
    v52 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>> const&)::t;
  if (v51)
  {
    v53 = v51 >> 2;
    v54 = v52 - 4;
    do
    {
      v55 = v53 - 1;
      v56 = *(_DWORD *)&v54[4 * v53];
      flatbuffers::FlatBufferBuilder::Align(v50, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v50, *((_DWORD *)v49 + 626) - *((_DWORD *)v49 + 630) + *((_DWORD *)v49 + 628) - v56 + 4);
      v53 = v55;
    }
    while (v55);
  }
  v49[2542] = 0;
  v57 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v50, (unint64_t)v51 >> 2);
  if (v4 == v3)
    v58 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  else
    v58 = (const unsigned __int8 *)v3;
  v73 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v58, (v4 - v3) >> 2);
  v59 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v60 = v59 + 2472;
  v59[2542] = 1;
  v61 = *((_DWORD *)v59 + 626) - *((_DWORD *)v59 + 630) + *((_DWORD *)v59 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v59 + 2472, 4, v88);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 6, SDWORD1(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 8, DWORD2(v88) + *((_DWORD *)this + 1257));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 16, SDWORD1(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 10, SDWORD2(v86));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 12, SHIDWORD(v86));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 14, v87);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 18, SHIDWORD(v87));
  v62 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v60, v61);
  v63 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v64 = v63 + 2472;
  v63[2542] = 1;
  LODWORD(v60) = *((_DWORD *)v63 + 626) - *((_DWORD *)v63 + 630) + *((_DWORD *)v63 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v63 + 2472, 4, v91[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 6, v91[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 8, v91[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 16, v91[5]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 10, SDWORD2(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 12, SHIDWORD(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 14, v90);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 18, SHIDWORD(v90));
  LODWORD(v64) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v64, (__int16)v60);
  v65 = *(_QWORD *)this;
  v66 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v66[2542] = 1;
  v67 = v57;
  v68 = *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628);
  v69 = (*(uint64_t (**)(AGCLLVMUserVertexShader *))(v65 + 544))(this);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v66 + 2472, v69);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v66 + 2472, 6, v92, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v66 + 2472, 8, v77[152], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v66 + 2472, 10, *((_DWORD *)this + 1259));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v66 + 2472, 12, *((_DWORD *)this + 1260));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v66 + 2472, 14, *((_DWORD *)this + 1261));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v66 + 2472, 16, v62);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v66 + 2472, 18, (int)v64);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v66 + 2472, 20, LOBYTE(v91[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v66 + 2472, 22, v74);
  if (v67)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v66 + 2472, 24, *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628) - v67 + 4);
  }
  v70 = *((_DWORD *)this + 1298);
  if (v70)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v66 + 2472, 26, v70);
    if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1735))
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v66 + 2472, 28, v73);
  }
  v71 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v66 + 2472), v68);
  v78 = (void **)&v85;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v78);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v82);
  if (__p)
  {
    v80 = __p;
    operator delete(__p);
  }
  if (v3)
    operator delete(v3);
  if (v16)
    operator delete(v16);
  return v71;
}

uint64_t AGCLLVMUserFragmentShader::addWrapperPostfix(AGCLLVMUserFragmentShader *this, llvm::Value *a2)
{
  AGCLLVMUserFragmentShader *v2;
  _BYTE *v3;
  llvm::BasicBlock *v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  const char *v10;
  const char *Value;
  uint64_t *v12;
  llvm::Type **v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  llvm::Type **v22;
  llvm::Value *v23;
  llvm::Type *v24;
  llvm::Value *AlignedLoad;
  llvm::Value *v26;
  uint64_t Element;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t *v30;
  llvm::Type **v31;
  llvm::Type *v32;
  llvm::Value *v33;
  llvm::IRBuilderBase *v34;
  llvm::Type **v35;
  uint64_t v36;
  char *v37;
  char *v38;
  llvm::Type **v39;
  llvm::Type *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  char *v43;
  llvm::IRBuilderBase *v44;
  llvm::Value *v45;
  llvm::Type **InsertElement;
  char *v47;
  char *v48;
  uint64_t v49;
  llvm::GlobalVariable *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  const llvm::Twine *v56;
  llvm::Type **ConstInBoundsGEP2_32;
  unsigned int v58;
  unsigned int v59;
  const llvm::Twine *v60;
  llvm::Type **v61;
  uint64_t *v62;
  llvm::Value *v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t *v66;
  llvm::Value *v67;
  llvm::Type *v68;
  llvm::Value *v69;
  char *v70;
  AGCLLVMUserFragmentShader *v71;
  uint64_t v72;
  llvm::Value *Not;
  llvm::IRBuilderBase *v74;
  llvm::IRBuilderBase *v75;
  llvm::Value *v76;
  uint64_t *v77;
  llvm::Type **v78;
  llvm::Value *v79;
  llvm::Type *v80;
  llvm::Value *v81;
  llvm::IRBuilderBase *v82;
  llvm::Type **v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t Splat;
  llvm::Value *FSub;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  llvm::Type **v94;
  llvm::Type *v95;
  llvm::Value *v96;
  llvm::Value *Select;
  llvm::IRBuilderBase *v98;
  llvm::Type **v99;
  llvm::Value *FCmpHelper;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  llvm::IRBuilderBase *v109;
  llvm::Type *v110;
  llvm::User *PHI;
  AGCLLVMBuilder *v112;
  llvm::Value *v113;
  llvm::Value *v114;
  AGCLLVMBuilder *v115;
  llvm::Value *v116;
  llvm::Value *v117;
  uint64_t v118;
  AGCLLVMUserFragmentShader *v119;
  char *v120;
  llvm::Value *v121;
  llvm::IRBuilderBase *v122;
  llvm::Value *v123;
  llvm::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t FMul;
  uint64_t FDiv;
  char *v131;
  uint64_t v132;
  uint64_t FPCast;
  llvm::Value *v134;
  uint64_t *v135;
  llvm::Type **v136;
  llvm::Type *v137;
  llvm::Value *v138;
  uint64_t v139;
  llvm::IRBuilderBase *v140;
  llvm::Value *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  llvm::Value *v147;
  char *v148;
  llvm::IRBuilderBase *v149;
  llvm::Value *v150;
  llvm::IRBuilderBase *v151;
  llvm::Type **v152;
  char v153;
  uint64_t v154;
  uint64_t *v155;
  llvm::Type **v156;
  llvm::Type *v157;
  uint64_t v158;
  char *v159;
  uint64_t *v160;
  llvm::Type **v161;
  llvm::Type *v162;
  uint64_t v163;
  AGCLLVMBuilder *v164;
  llvm::Type **v165;
  llvm::Type *v166;
  uint64_t v167;
  llvm::Value *v168;
  llvm::Value *v169;
  llvm::Value *v170;
  llvm::Value *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  llvm::Type **v175;
  llvm::Type *v176;
  llvm::Value *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t *v181;
  llvm::Type **v182;
  llvm::Type *v183;
  uint64_t *v184;
  llvm::Type **v185;
  llvm::Type *v186;
  llvm::Value *v187;
  uint64_t v188;
  llvm::Value *v189;
  llvm::IRBuilderBase *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t inserted;
  AGCLLVMUserFragmentShader *v196;
  char *v197;
  llvm::Value *v198;
  llvm::IRBuilderBase *v199;
  llvm::Value *v200;
  llvm::Value *v201;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  llvm::Value *v208;
  llvm::Type **GlobalBufferBinding;
  llvm::Type *v210;
  uint64_t v211;
  unsigned int v212;
  llvm::Value *v213;
  uint64_t *v214;
  llvm::Type *v215;
  llvm::Value *v216;
  char *v217;
  llvm::Type *v218;
  uint64_t *v219;
  AGCLLVMUserFragmentShader *v220;
  llvm::CmpInst **Cast;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  llvm::Type *v228;
  llvm::Value *v229;
  uint64_t GEP;
  uint64_t *v231;
  char *v232;
  uint64_t v233;
  llvm::Type **v234;
  llvm::Value *v235;
  llvm::Type *v236;
  char *v237;
  uint64_t v238;
  llvm::Type **v239;
  llvm::Value *v240;
  llvm::Type *v241;
  char *v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  unint64_t v246;
  llvm::CallBase *v247;
  unsigned __int8 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  AGCLLVMFragmentShader *v254;
  char *v255;
  uint64_t *v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  int v260;
  unsigned int *v261;
  unsigned int v262;
  char *v263;
  _BYTE *v264;
  uint64_t *v265;
  unsigned int v266;
  uint64_t v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  BOOL v271;
  int v272;
  int v274;
  int IsNoOpForPassthrough;
  int v276;
  int v277;
  int v278;
  _QWORD *v279;
  llvm::Type *v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  llvm::Type *v286;
  uint64_t *v287;
  llvm::Value *v288;
  llvm::Type **v289;
  int v290;
  uint64_t v291;
  int *v292;
  int v293;
  _BYTE *v294;
  _BOOL8 v295;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  llvm::Type **Framebuffer;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  llvm::CmpInst **v306;
  llvm::Type *v307;
  llvm::Value *v308;
  _BOOL4 v309;
  uint64_t Xor;
  _BOOL4 v311;
  AGCLLVMUserFragmentShader *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int *v317;
  unsigned int v318;
  uint64_t v319;
  char *v320;
  char *v321;
  llvm::Type *v322;
  AGCLLVMUserFragmentShader *v323;
  unsigned int *v324;
  uint64_t v325;
  uint64_t v326;
  llvm::Type **v327;
  llvm::Type *v328;
  char *v329;
  unsigned __int8 *v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  llvm::CmpInst **v334;
  llvm::Value *v335;
  llvm::Value *v336;
  llvm::IRBuilderBase *v337;
  const llvm::Twine *v338;
  llvm::Value *v339;
  llvm::IRBuilderBase *v340;
  llvm::Value *v341;
  llvm::IRBuilderBase *v342;
  llvm::IRBuilderBase *v343;
  llvm::IRBuilderBase *v344;
  const llvm::Twine *v345;
  llvm::Value *v346;
  llvm::IRBuilderBase *v347;
  uint64_t v348;
  llvm::IRBuilderBase *v349;
  const llvm::Twine *v350;
  llvm::Value *v351;
  llvm::IRBuilderBase *v352;
  llvm::Value *v353;
  llvm::IRBuilderBase *v354;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  llvm::Value *v360;
  llvm::IRBuilderBase *v361;
  llvm::Value *v362;
  llvm::Value *v363;
  llvm::IRBuilderBase *v364;
  char *v365;
  AGCLLVMBuilder *v366;
  uint64_t *v367;
  uint64_t v368;
  llvm::Value *ICmp;
  llvm::Value *v370;
  char *v371;
  _BYTE *v372;
  AGCLLVMFragmentShader *v373;
  char *v375;
  char *v376;
  unsigned int v377;
  llvm::Type **v378;
  int v379;
  llvm::Value *v380;
  unsigned int v381;
  int v382;
  llvm::Value *v383;
  llvm::Type **v384;
  int v385;
  unsigned int v386;
  __int128 v387;
  uint64_t v388;
  int v389;
  __int128 v390;
  uint64_t v391;
  int v392;
  __int128 v393;
  uint64_t v394;
  int v395;
  __int128 v396;
  uint64_t v397;
  int v398;
  __int128 v399;
  llvm::Value *v400;
  int v401;
  __int128 v402;
  llvm::Value *v403;
  int v404;
  __int128 v405;
  uint64_t v406;
  int v407;
  __int128 v408;
  llvm::Value *v409;
  int v410;
  __int128 v411;
  uint64_t v412;
  int v413;
  __int128 v414;
  uint64_t v415;
  int v416;
  unsigned int v417[8];
  __int16 v418;
  __int128 v419;
  uint64_t v420;
  int v421;
  __int16 v422;
  char *v423;
  uint64_t v424;
  _BYTE v425[16];
  __int16 v426;
  _QWORD *v427;
  _QWORD v428[5];

  v2 = this;
  v428[3] = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 4944;
  if (!*((_BYTE *)this + 5845) || *((_BYTE *)this + 5862))
    goto LABEL_16;
  v4 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
  v423 = "feedback_output";
  v426 = 259;
  v5 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40), v5);
  v423 = "discard";
  v426 = 259;
  v6 = operator new();
  llvm::BasicBlock::BasicBlock();
  v7 = v6;
  v2 = this;
  llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5600), v7);
  v8 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
  v9 = *((_QWORD *)this + 702);
  *((_QWORD *)v8 + 11) = v9;
  *((_QWORD *)v8 + 12) = v9 + 40;
  if ((v3[520] & 4) != 0)
  {
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_RETURN_FOR_DEPTH_FEEDBACK_DISCARD", v10);
      if (Value)
      {
        if (*Value != 48 && atoi(Value))
        {
          llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserFragmentShader *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                         + 40));
          goto LABEL_15;
        }
      }
    }
  }
  if ((v3[520] & 2) != 0)
  {
    v12 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v13 = (llvm::Type **)llvm::ConstantInt::get();
    v14 = *((_QWORD *)this + 692);
    goto LABEL_13;
  }
  if ((v3[520] & 1) != 0)
  {
    v12 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v13 = (llvm::Type **)llvm::ConstantFP::get();
    v14 = *((_QWORD *)this + 695);
LABEL_13:
    llvm::IRBuilderBase::CreateAlignedStore(v12, v13, v14, 0);
  }
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v5);
LABEL_15:
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v15 + 11) = v5;
  *((_QWORD *)v15 + 12) = (char *)v5 + 40;
  if (!v3[520])
  {
    v109 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v110 = (llvm::Type *)llvm::FixedVectorType::get();
    v423 = "discard_BOOL";
    v426 = 259;
    PHI = llvm::IRBuilderBase::CreatePHI(v109, v110, 2, (const llvm::Twine *)&v423);
    v112 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
    v113 = (llvm::Value *)llvm::ConstantInt::get();
    v114 = AGCLLVMBuilder::splat(v112, 4, v113);
    llvm::PHINode::addIncoming(PHI, v114, *((llvm::BasicBlock **)this + 702));
    v115 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
    v116 = (llvm::Value *)llvm::ConstantInt::get();
    v117 = AGCLLVMBuilder::splat(v115, 4, v116);
    v380 = PHI;
    llvm::PHINode::addIncoming(PHI, v117, v4);
    goto LABEL_17;
  }
LABEL_16:
  v380 = 0;
LABEL_17:
  v16 = **((_DWORD **)v2 + 725);
  if ((v16 & 1) != 0)
  {
    v17 = *((_QWORD *)v2 + 619);
    v18 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v19 = v18 + 32;
    if (v17 == *((_QWORD *)v18 + 40) || v17 == *((_QWORD *)v18 + 39))
    {
      v20 = *((_QWORD *)v18 + 50);
      v408 = *(_OWORD *)(v18 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v18 + 40));
      v410 = *((_DWORD *)v19 + 26);
      v21 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
      v22 = (llvm::Type **)*((_QWORD *)v2 + 622);
      v418 = 257;
      v24 = AGCLLVMBuilder::tryDeducePointeeType(v22, v23);
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v21 + 5, v24, (uint64_t)v22, 0, (uint64_t)v417);
      v426 = 257;
      v26 = (llvm::Value *)llvm::ConstantInt::get();
      v2 = this;
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v21 + 5), AlignedLoad, v26, (const llvm::Twine *)&v423);
      v28 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, &v408, Element, (*(_DWORD *)(*((_QWORD *)this + 614) + 32) >> 8) & 0xF);
      v29 = v409;
      if (v409)
        llvm::MetadataTracking::untrack();
      v30 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v31 = (llvm::Type **)*((_QWORD *)this + 692);
      v426 = 257;
      v32 = AGCLLVMBuilder::tryDeducePointeeType(v31, v29);
      v33 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v30 + 5, v32, (uint64_t)v31, 0, (uint64_t)&v423);
      v34 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v426 = 257;
      v35 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v34, v33, v28, (const llvm::Twine *)&v423);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v35, *((_QWORD *)this + 692), 0);
      v16 = **((_DWORD **)this + 725);
    }
  }
  if ((v16 & 2) != 0)
  {
    v36 = *((_QWORD *)v2 + 619);
    v37 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v38 = v37 + 32;
    if (v36 == *((_QWORD *)v37 + 40) || v36 == *((_QWORD *)v37 + 39))
    {
      v39 = (llvm::Type **)*((_QWORD *)v2 + 622);
      v426 = 257;
      v40 = AGCLLVMBuilder::tryDeducePointeeType(v39, a2);
      v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v38 + 1, v40, (uint64_t)v39, 0, (uint64_t)&v423);
      v42 = (llvm::Value *)llvm::ConstantFP::get();
      v43 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
      v426 = 257;
      v44 = (llvm::IRBuilderBase *)(v43 + 40);
      v45 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement(v44, v41, v42, v45, (const llvm::Twine *)&v423);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40), InsertElement, *((_QWORD *)v2 + 622), 0);
      v16 = **((_DWORD **)v2 + 725);
    }
  }
  if ((v16 & 4) != 0)
  {
    v47 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v48 = (char *)*((_QWORD *)v47 + 25);
    v49 = *((_QWORD *)v47 + 29);
    v423 = v48;
    v424 = v49;
    llvm::StructType::get();
    v50 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v423 = "agc.coverage";
    v426 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v51 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v52 = *((_QWORD *)v51 + 47);
    v53 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v51 + 32), v50);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v52, v53);
    ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32), v50, 0, v54, v55, v56);
    v61 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32), v50, (llvm::Value *)1, v58, v59, v60);
    v62 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
    v426 = 257;
    v64 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v63);
    v65 = llvm::IRBuilderBase::CreateAlignedLoad(v62 + 5, v64, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)&v423);
    v66 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
    v426 = 257;
    v68 = AGCLLVMBuilder::tryDeducePointeeType(v61, v67);
    v69 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v66 + 5, v68, (uint64_t)v61, 0, (uint64_t)&v423);
    v70 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v71 = v2;
    v72 = *((_QWORD *)v70 + 50);
    v405 = *(_OWORD *)(v70 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v70 + 40));
    v407 = *((_DWORD *)v70 + 34);
    Not = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, &v405, v65, (*(_DWORD *)(*((_QWORD *)v71 + 614) + 32) >> 8) & 0xF);
    if (v406)
      llvm::MetadataTracking::untrack();
    v2 = this;
    if (*((_BYTE *)this + 14) && (**((_BYTE **)this + 725) & 8) != 0)
    {
      v74 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v426 = 257;
      Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v74, Not, (const llvm::Twine *)&v423);
    }
    v75 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v426 = 257;
    v76 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v75, Not, v69, (const llvm::Twine *)&v423);
    v77 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v78 = (llvm::Type **)*((_QWORD *)this + 692);
    v426 = 257;
    v80 = AGCLLVMBuilder::tryDeducePointeeType(v78, v79);
    v81 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v77 + 5, v80, (uint64_t)v78, 0, (uint64_t)&v423);
    v82 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v426 = 257;
    v83 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v82, v81, v76, (const llvm::Twine *)&v423);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v83, *((_QWORD *)this + 692), 0);
  }
  v372 = v3;
  if (v3[890])
  {
    if ((*(_DWORD *)(*((_QWORD *)v2 + 614) + 32) & 0xE00) != 0)
      v84 = (char *)v2 + 5720;
    else
      v84 = (char *)v2 + 5696;
    v85 = *((_QWORD *)v84 + 2);
    v86 = (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40;
    llvm::ConstantFP::get();
    Splat = llvm::ConstantDataVector::getSplat();
    v426 = 257;
    FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub(v86, v85, Splat, (uint64_t)&v423);
    v89 = AGCLLVMBuilder::buildDotProduct((AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32), FSub, FSub);
    v90 = llvm::ConstantFP::get();
    v91 = (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40;
    v426 = 257;
    v92 = llvm::IRBuilderBase::CreateFSub(v91, v90, (uint64_t)v89, (uint64_t)&v423);
    if (v3[520])
    {
      if ((v3[520] & 1) != 0)
      {
        llvm::ConstantFP::get();
        v426 = 257;
        FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
      }
      else
      {
        if ((v3[520] & 2) != 0)
        {
          v93 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
          v94 = (llvm::Type **)*((_QWORD *)v2 + 692);
          v426 = 257;
          v95 = AGCLLVMBuilder::tryDeducePointeeType(v94, a2);
          v96 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v93 + 5, v95, (uint64_t)v94, 0, (uint64_t)&v423);
          llvm::ConstantFP::get();
          v426 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantInt::get();
          llvm::ConstantInt::get();
          v426 = 257;
          v2 = this;
          Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
          v98 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
          v426 = 257;
          v99 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v98, v96, Select, (const llvm::Twine *)&v423);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40), v99, *((_QWORD *)v2 + 692), 0);
        }
        FCmpHelper = 0;
      }
    }
    else
    {
      v101 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
      v102 = *((_QWORD *)v101 + 50);
      v402 = *(_OWORD *)(v101 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v101 + 40));
      v404 = *((_DWORD *)v101 + 34);
      v103 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v102 + 24))(v102, &v402, v103, v92, 2, *((unsigned int *)v2 + 1456));
      a2 = v403;
      if (v403)
        llvm::MetadataTracking::untrack();
      FCmpHelper = 0;
      v3[524] = 1;
    }
    if ((*(_BYTE *)(*((_QWORD *)v2 + 614) + 33) & 0xE) == 0)
    {
      v104 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
      v105 = (uint64_t)(v104 + 32);
      v106 = *((_QWORD *)v104 + 50);
      v107 = *(_QWORD *)(v106 + 1536);
      if (v107)
        v108 = strlen(*(const char **)(v106 + 1536));
      else
        v108 = 0;
      v118 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v105, v107, v108, *(_QWORD *)(v105 + 168), *(_QWORD *)(v105 + 168));
      v119 = this;
      v120 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v121 = (llvm::Value *)*((_QWORD *)this + 714);
      v426 = 257;
      v122 = (llvm::IRBuilderBase *)(v120 + 40);
      v123 = (llvm::Value *)llvm::ConstantInt::get();
      *(_QWORD *)&v419 = llvm::IRBuilderBase::CreateExtractElement(v122, v121, v123, (const llvm::Twine *)&v423);
      v418 = 257;
      v124 = llvm::IRBuilderBase::CreateCall((uint64_t)v122, *(_QWORD *)(v118 + 24), v118, (uint64_t)&v419, 1, (uint64_t)v417);
      v125 = (uint64_t)v119 + *(_QWORD *)(*(_QWORD *)v119 - 24) + 40;
      v126 = llvm::ConstantFP::get();
      v426 = 257;
      v127 = llvm::IRBuilderBase::CreateFSub(v125, v126, (uint64_t)v124, (uint64_t)&v423);
      v128 = (uint64_t)v119 + *(_QWORD *)(*(_QWORD *)v119 - 24) + 40;
      v426 = 257;
      FMul = llvm::IRBuilderBase::CreateFMul(v128, (uint64_t)v124, v127, (uint64_t)&v423);
      v418 = 257;
      FDiv = llvm::IRBuilderBase::CreateFDiv(v128, v92, FMul, (uint64_t)v417);
      v131 = (char *)v119 + *(_QWORD *)(*(_QWORD *)v119 - 24);
      v132 = *((_QWORD *)v131 + 50);
      v399 = *(_OWORD *)(v131 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v131 + 40));
      v401 = *((_DWORD *)v131 + 34);
      FPCast = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v132 + 40))(v132, &v399, FDiv, 0);
      v134 = v400;
      if (v400)
        llvm::MetadataTracking::untrack();
      v135 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v136 = (llvm::Type **)*((_QWORD *)this + 622);
      v426 = 257;
      v137 = AGCLLVMBuilder::tryDeducePointeeType(v136, v134);
      v138 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v135 + 5, v137, (uint64_t)v136, 0, (uint64_t)&v423);
      v139 = *(_QWORD *)v138;
      v140 = (AGCLLVMUserFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v418 = 257;
      v141 = (llvm::Value *)llvm::ConstantInt::get();
      v142 = llvm::IRBuilderBase::CreateExtractElement(v140, v138, v141, (const llvm::Twine *)v417);
      v143 = *(_QWORD *)(*(_QWORD *)this - 24);
      v144 = **(_QWORD **)(v139 + 16);
      v422 = 257;
      if (*(_QWORD *)FPCast != v144)
      {
        v145 = (uint64_t *)((char *)this + v143 + 40);
        if (*(unsigned __int8 *)(FPCast + 16) > 0x14u)
        {
          v426 = 257;
          FPCast = llvm::CastInst::CreateFPCast();
          llvm::IRBuilderBase::Insert<llvm::Instruction>(v145, FPCast, (uint64_t)&v419);
        }
        else
        {
          v146 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)this + v143 + 112) + 256))(*(_QWORD *)((char *)this + v143 + 112), FPCast, v144);
          FPCast = v146;
          if (v146 && *(unsigned __int8 *)(v146 + 16) >= 0x1Cu)
            llvm::IRBuilderBase::Insert<llvm::Instruction>(v145, v146, (uint64_t)&v419);
        }
      }
      v426 = 257;
      v147 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v140, v142, FPCast, (uint64_t)&v423);
      v148 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v426 = 257;
      v149 = (llvm::IRBuilderBase *)(v148 + 40);
      v150 = (llvm::Value *)llvm::ConstantInt::get();
      v151 = v149;
      v2 = this;
      v152 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement(v151, v138, v147, v150, (const llvm::Twine *)&v423);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40), v152, *((_QWORD *)v2 + 622), 0);
      v3 = v372;
    }
  }
  else
  {
    FCmpHelper = 0;
  }
  v153 = v3[520];
  if ((v153 & 1) != 0)
  {
    v159 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v160 = (uint64_t *)(v159 + 40);
    if ((*(_BYTE *)(*((_QWORD *)v2 + 725) + 1) & 8) != 0)
    {
      v164 = (AGCLLVMBuilder *)(v159 + 32);
      v165 = (llvm::Type **)*((_QWORD *)this + 622);
      v418 = 257;
      v166 = AGCLLVMBuilder::tryDeducePointeeType(v165, a2);
      v167 = llvm::IRBuilderBase::CreateAlignedLoad(v160, v166, (uint64_t)v165, 0, (uint64_t)v417);
      v426 = 257;
      v168 = (llvm::Value *)llvm::ConstantInt::get();
      v169 = (llvm::Value *)v167;
      v2 = this;
      v170 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v160, v169, v168, (const llvm::Twine *)&v423);
      v171 = AGCLLVMBuilder::f32Extend(v164, v170, 1);
      v163 = AGCLLVMUserFragmentShader::buildAlphaQuantize(this, v171);
    }
    else
    {
      v161 = (llvm::Type **)*((_QWORD *)v2 + 695);
      v426 = 257;
      v162 = AGCLLVMBuilder::tryDeducePointeeType(v161, a2);
      v163 = llvm::IRBuilderBase::CreateAlignedLoad(v160, v162, (uint64_t)v161, 0, (uint64_t)&v423);
    }
    v172 = v163;
    v173 = *(_QWORD *)(*(_QWORD *)v2 - 24);
    if (v3[890])
    {
      v426 = 257;
      v189 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
      v190 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
      v426 = 257;
      llvm::IRBuilderBase::CreateAnd(v190, v189, FCmpHelper, (const llvm::Twine *)&v423);
      llvm::ConstantFP::get();
      llvm::ConstantFP::get();
      v426 = 257;
      v191 = llvm::IRBuilderBase::CreateSelect();
      v192 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
      v193 = *((_QWORD *)v192 + 50);
      v396 = *(_OWORD *)(v192 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v192 + 40));
      v398 = *((_DWORD *)v192 + 34);
      v194 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v193 + 24))(v193, &v396, v191, v194, 4, *((unsigned int *)v2 + 1456));
      if (!v397)
        goto LABEL_89;
    }
    else
    {
      v179 = (char *)v2 + v173;
      v180 = *(_QWORD *)((char *)v2 + v173 + 400);
      v393 = *(_OWORD *)((char *)v2 + v173 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserFragmentShader *)((char *)v2 + v173 + 40));
      v395 = *((_DWORD *)v179 + 34);
      (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v180 + 24))(v180, &v393, v172, *((_QWORD *)v2 + 698), *((unsigned int *)v2 + 1398), *((unsigned int *)v2 + 1456));
      if (!v394)
        goto LABEL_89;
    }
LABEL_88:
    llvm::MetadataTracking::untrack();
LABEL_89:
    v3[524] = 1;
    goto LABEL_107;
  }
  if ((v3[520] & 0xC) != 0)
  {
    if ((v3[520] & 4) != 0)
    {
      v181 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
      v182 = (llvm::Type **)*((_QWORD *)v2 + 686);
      v426 = 257;
      v183 = AGCLLVMBuilder::tryDeducePointeeType(v182, a2);
      v154 = llvm::IRBuilderBase::CreateAlignedLoad(v181 + 5, v183, (uint64_t)v182, 0, (uint64_t)&v423);
      v153 = v3[520];
      if ((v153 & 8) != 0)
      {
LABEL_66:
        v155 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
        v156 = (llvm::Type **)*((_QWORD *)v2 + 689);
        v426 = 257;
        v157 = AGCLLVMBuilder::tryDeducePointeeType(v156, a2);
        v158 = llvm::IRBuilderBase::CreateAlignedLoad(v155 + 5, v157, (uint64_t)v156, 0, (uint64_t)&v423);
        if ((v3[520] & 2) == 0)
        {
LABEL_93:
          v206 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 400);
          v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v206 + 880))(v206);
          if (v154 && v207)
          {
            GlobalBufferBinding = (llvm::Type **)*((_QWORD *)v2 + 733);
            if (!GlobalBufferBinding)
            {
              v210 = (llvm::Type *)llvm::PointerType::get();
              v423 = "agc.viewport_depth_range_pointer_global";
              v426 = 259;
              v211 = *(_QWORD *)(*(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 400) + 824);
              v212 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v211 + 264))(v211);
              GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(v2, v210, (const llvm::Twine *)&v423, v212, 0, 5, 0);
              *((_QWORD *)v2 + 733) = GlobalBufferBinding;
            }
            if (!*((_QWORD *)v2 + 720))
            {
              v3[914] = 1;
              (*(void (**)(char **__return_ptr, AGCLLVMUserFragmentShader *, _QWORD, const char *, uint64_t))(*(_QWORD *)v2 + 512))(&v423, v2, *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 232), "air.viewport_array_index", 24);
              v213 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)v2, (unsigned int *)&v423);
              llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)v2 + 5744), (uint64_t)v213);
              if (v427 != v428)
                free(v427);
              GlobalBufferBinding = (llvm::Type **)*((_QWORD *)v2 + 733);
            }
            v214 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
            v426 = 257;
            v215 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v208);
            v216 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v214 + 5, v215, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v423);
            v217 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
            v218 = (llvm::Type *)*((_QWORD *)v217 + 29);
            v426 = 257;
            v219 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v217 + 5, v218, (uint64_t)v216, 0, (uint64_t)&v423);
            v220 = v2;
            Cast = (llvm::CmpInst **)*((_QWORD *)v2 + 720);
            v222 = *v219;
            if (*Cast != (llvm::CmpInst *)*v219)
            {
              v223 = (uint64_t)v220 + *(_QWORD *)(*(_QWORD *)v220 - 24) + 40;
              v426 = 257;
              Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(v223, 39, (uint64_t)Cast, v222, (uint64_t)&v423);
            }
            v224 = (uint64_t *)((char *)v220 + *(_QWORD *)(*(_QWORD *)v220 - 24) + 40);
            v426 = 257;
            llvm::IRBuilderBase::CreateICmp(v224, 36, Cast, (uint64_t)v219, (uint64_t)&v423);
            llvm::ConstantInt::get();
            v418 = 257;
            v225 = llvm::IRBuilderBase::CreateSelect();
            v226 = llvm::PointerType::get();
            v227 = (char *)v220 + *(_QWORD *)(*(_QWORD *)v220 - 24);
            v228 = (llvm::Type *)*((_QWORD *)v227 + 29);
            v229 = (llvm::Value *)llvm::ConstantInt::get();
            v426 = 257;
            GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v227 + 40), v228, v216, v229, (const llvm::Twine *)&v423);
            v418 = 257;
            v231 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(v227 + 40), 49, GEP, v226, (uint64_t)v417);
            v232 = (char *)v220 + *(_QWORD *)(*(_QWORD *)v220 - 24);
            v233 = *((_QWORD *)v232 + 32);
            *(_QWORD *)&v419 = v225;
            *((_QWORD *)&v419 + 1) = llvm::ConstantInt::get();
            v426 = 257;
            v234 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v232 + 40), v233, v231, (uint64_t **)&v419, 2, (uint64_t)&v423);
            v418 = 257;
            v236 = AGCLLVMBuilder::tryDeducePointeeType(v234, v235);
            llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v232 + 5, v236, (uint64_t)v234, 0, (uint64_t)v417);
            v237 = (char *)v220 + *(_QWORD *)(*(_QWORD *)v220 - 24);
            v238 = *((_QWORD *)v237 + 32);
            *(_QWORD *)&v419 = v225;
            *((_QWORD *)&v419 + 1) = llvm::ConstantInt::get();
            v426 = 257;
            v239 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v237 + 40), v238, v231, (uint64_t **)&v419, 2, (uint64_t)&v423);
            v418 = 257;
            v241 = AGCLLVMBuilder::tryDeducePointeeType(v239, v240);
            llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v237 + 5, v241, (uint64_t)v239, 0, (uint64_t)v417);
            v426 = 257;
            llvm::IRBuilderBase::CreateFCmpHelper();
            v418 = 257;
            llvm::IRBuilderBase::CreateSelect();
            v426 = 257;
            llvm::IRBuilderBase::CreateFCmpHelper();
            v418 = 257;
            v154 = llvm::IRBuilderBase::CreateSelect();
            v2 = v220;
            v3 = v372;
          }
          v242 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
          v243 = *((_QWORD *)v242 + 50);
          v390 = *(_OWORD *)(v242 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v242 + 40));
          v392 = *((_DWORD *)v242 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v243 + 608))(v243, &v390, v154, v158);
          if (v391)
            llvm::MetadataTracking::untrack();
          v3[524] = 1;
          v2 = this;
          goto LABEL_107;
        }
LABEL_84:
        v184 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
        v185 = (llvm::Type **)*((_QWORD *)v2 + 692);
        v426 = 257;
        v186 = AGCLLVMBuilder::tryDeducePointeeType(v185, a2);
        v187 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v184 + 5, v186, (uint64_t)v185, 0, (uint64_t)&v423);
        if (v3[900])
        {
          v188 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 400);
          if (*(_QWORD *)(v188 + 1592))
            strlen(*(const char **)(v188 + 1592));
          inserted = AGCLLVMBuilder::getOrInsertFunction<>();
          v196 = this;
          v197 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v426 = 257;
          v198 = llvm::IRBuilderBase::CreateCall((uint64_t)(v197 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&v423);
          v199 = (AGCLLVMUserFragmentShader *)((char *)v196 + *(_QWORD *)(*(_QWORD *)v196 - 24) + 40);
          v200 = (llvm::Value *)llvm::ConstantInt::get();
          v426 = 257;
          v201 = v198;
          v2 = this;
          Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v199, v200, v201, (const llvm::Twine *)&v423);
          v203 = (AGCLLVMUserFragmentShader *)((char *)v196 + *(_QWORD *)(*(_QWORD *)v196 - 24) + 40);
          v426 = 257;
          v187 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v203, v187, Shl, (const llvm::Twine *)&v423);
          v3 = v372;
        }
        v204 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
        v205 = llvm::ConstantInt::get();
        v426 = 257;
        llvm::IRBuilderBase::CreateICmp(v204, 33, (llvm::CmpInst **)v187, v205, (uint64_t)&v423);
        llvm::ConstantFP::getNaN();
        v426 = 257;
        v2 = this;
        v154 = llvm::IRBuilderBase::CreateSelect();
        if (*((int *)this + 1082) <= 1)
          *((_DWORD *)this + 1082) = 2;
        goto LABEL_93;
      }
    }
    else
    {
      v154 = 0;
      if ((v3[520] & 8) != 0)
        goto LABEL_66;
    }
    v158 = 0;
    if ((v153 & 2) == 0)
      goto LABEL_93;
    goto LABEL_84;
  }
  if ((v3[520] & 2) == 0)
    goto LABEL_107;
  v174 = (uint64_t *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24));
  v175 = (llvm::Type **)*((_QWORD *)v2 + 692);
  v426 = 257;
  v176 = AGCLLVMBuilder::tryDeducePointeeType(v175, a2);
  v177 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v174 + 5, v176, (uint64_t)v175, 0, (uint64_t)&v423);
  if (!v3[524])
  {
    v356 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v357 = *((_QWORD *)v356 + 50);
    v387 = *(_OWORD *)(v356 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v356 + 40));
    v389 = *((_DWORD *)v356 + 34);
    (*(void (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v357 + 616))(v357, &v387, v177);
    if (!v388)
      goto LABEL_89;
    goto LABEL_88;
  }
  if (!v3[918])
  {
    if (v3[900] && (*(_BYTE *)(*((_QWORD *)v2 + 614) + 33) & 0xE) != 0)
    {
      v178 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 400);
      if (*(_QWORD *)(v178 + 1592))
        strlen(*(const char **)(v178 + 1592));
      v358 = AGCLLVMBuilder::getOrInsertFunction<>();
      v359 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
      v426 = 257;
      v360 = llvm::IRBuilderBase::CreateCall((uint64_t)(v359 + 40), **(_QWORD **)(*(_QWORD *)v358 + 16), v358, 0, 0, (uint64_t)&v423);
      v361 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
      v362 = (llvm::Value *)llvm::ConstantInt::get();
      v426 = 257;
      v363 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v361, v362, v360, (const llvm::Twine *)&v423);
      v364 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
      v426 = 257;
      v177 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v364, v177, v363, (const llvm::Twine *)&v423);
    }
    v365 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
    v366 = (AGCLLVMBuilder *)(v365 + 32);
    v367 = (uint64_t *)(v365 + 40);
    v368 = llvm::ConstantInt::get();
    v426 = 257;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v367, 32, (llvm::CmpInst **)v177, v368, (uint64_t)&v423);
    v380 = AGCLLVMBuilder::splat(v366, 4, ICmp);
  }
LABEL_107:
  v244 = *(unsigned __int8 *)(*((_QWORD *)v2 + 614) + 32);
  v245 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v2 + 22) + 24) + 16);
  if (v245 == *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 176)
    || (v246 = *(unsigned int *)(*((_QWORD *)v2 + 9) + 8),
        v247 = *(llvm::CallBase **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24),
        ((llvm::CallBase::arg_end(v247) - ((_QWORD)v247 - 32 * (*((_DWORD *)v247 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0))
  {
    v248 = 0;
    if (v244)
    {
LABEL_131:
      v254 = (AGCLLVMUserFragmentShader *)((char *)v2 + 4320);
      v379 = v248;
      v376 = (char *)v2 + 4336;
      v255 = (char *)v2 + 8;
      v256 = &v415;
      v371 = (char *)v2 + 4688;
      v373 = (AGCLLVMUserFragmentShader *)((char *)v2 + 4320);
      v375 = (char *)v2 + 8;
      do
      {
        v257 = __clz(v244);
        v258 = v257 ^ 0x1F;
        v259 = 0x80000000 >> v257;
        v260 = *v3;
        v261 = (unsigned int *)*((_QWORD *)v2 + 725);
        v386 = v261[2];
        if ((v259 & v379) == 0)
        {
          v269 = 15;
LABEL_144:
          v385 = v269;
          goto LABEL_153;
        }
        v262 = *v261;
        if ((v262 & 0x20) != 0)
        {
          v270 = (v262 >> 6) & 0x1F;
          v271 = v270 > 0x10;
          v272 = (1 << v270) & 0x10014;
          if (v271 || v272 == 0)
            v269 = 15;
          else
            v269 = 0;
          goto LABEL_144;
        }
        v377 = v244;
        v263 = v255;
        v264 = v3;
        v265 = v256;
        v266 = v259;
        v267 = *((_QWORD *)v2 + 727);
        if (v267)
        {
          v268 = *(_DWORD *)(v267 + 16);
          if ((v268 & 1) != 0)
            goto LABEL_146;
        }
        else
        {
          v268 = *(_DWORD *)(*((_QWORD *)v2 + 726) + 4 * v258 + 24);
          if ((v268 & 1) != 0)
          {
LABEL_146:
            if (blendIsNoOpForPassthrough((v268 >> 21) & 7, (v268 >> 1) & 0x1F, (v268 >> 6) & 0x1F))
              v274 = 0;
            else
              v274 = 7;
            IsNoOpForPassthrough = blendIsNoOpForPassthrough(HIBYTE(v268) & 7, (unsigned __int16)v268 >> 11, HIWORD(v268) & 0x1F);
            v276 = v274 | 8;
            if (IsNoOpForPassthrough)
              v276 = v274;
            v385 = v276;
            v254 = v373;
            goto LABEL_152;
          }
        }
        v385 = 0;
LABEL_152:
        v259 = v266;
        v256 = v265;
        v3 = v264;
        v255 = v263;
        v244 = v377;
LABEL_153:
        v277 = v259 & v260;
        if ((v259 & v260) != 0)
          v278 = 15;
        else
          v278 = 0;
        if (v277)
        {
          v382 = v278;
          v279 = (_QWORD *)((char *)v2 + 32 * v258);
          v280 = (llvm::Type *)v279[619];
          v281 = v279[622];
          v282 = (uint64_t *)&v255[*(_QWORD *)(*(_QWORD *)v2 - 24) + 32];
          v426 = 257;
          v383 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v282, v280, v281, 0, (uint64_t)&v423);
          v285 = v279[654];
          v381 = v259;
          if (v285)
          {
            v286 = (llvm::Type *)v279[651];
            v287 = (uint64_t *)&v255[*(_QWORD *)(*(_QWORD *)v2 - 24) + 32];
            v426 = 257;
            v288 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v287, v286, v285, 0, (uint64_t)&v423);
          }
          else
          {
            v288 = 0;
          }
          v290 = **((_DWORD **)v2 + 725);
          v291 = *((_QWORD *)v2 + 727);
          if (v291)
            v292 = (int *)(v291 + 16);
          else
            v292 = (int *)(*((_QWORD *)v2 + 726) + 4 * v258 + 24);
          v293 = *v292;
          if (!(**((_DWORD **)v2 + 725) & 0x20 | *v292 & 1))
            goto LABEL_184;
          if (!*((_BYTE *)v254 + 72 * v258 + 76))
            goto LABEL_175;
          v294 = v3;
          if (*((_BYTE *)v2 + 14))
            v295 = 1;
          else
            v295 = *((_BYTE *)v2 + 32) == 0;
          v296 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
          v297 = *((_QWORD *)v296 + 50);
          v419 = *(_OWORD *)(v296 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v296 + 40));
          v421 = *((_DWORD *)v296 + 34);
          v383 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v297, (uint64_t)&v419, v383, (uint64_t)&v376[72 * v258 + 44], v295);
          if (v420)
            llvm::MetadataTracking::untrack();
          if (v288)
          {
            v298 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v299 = *((_QWORD *)v298 + 50);
            v414 = *(_OWORD *)(v298 + 88);
            v256 = &v415;
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v298 + 40));
            v416 = *((_DWORD *)v298 + 34);
            v288 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v299, (uint64_t)&v414, v288, (uint64_t)&v376[72 * v258 + 44], v295);
            if (v415)
              llvm::MetadataTracking::untrack();
            v254 = v373;
            v2 = this;
            v3 = v372;
LABEL_175:
            if ((v290 & 0x20) != 0)
            {
LABEL_176:
              if ((*(_DWORD *)(*((_QWORD *)v2 + 614) + 4 * v258) & 0x1Fu) > 0x15
                || ((1 << (*(_DWORD *)(*((_QWORD *)v2 + 614) + 4 * v258) & 0x1F)) & 0x331000) == 0)
              {
                Framebuffer = (llvm::Type **)AGCLLVMFragmentShader::buildReadFramebuffer(v254, v258);
                v301 = &v376[72 * v258];
                v383 = (llvm::Value *)AGCLLVMObject::buildConvertColor((uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24), (llvm::Type **)v383, *((llvm::Type **)v301 + 2), v301[42], v301[41], *((unsigned int *)v301 + 17), v302, v303);
                v306 = AGCLLVMObject::buildConvertColor((uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24), Framebuffer, *((llvm::Type **)v301 + 2), v301[42], v301[41], *((unsigned int *)v301 + 17), v304, v305);
                v308 = (llvm::Value *)v306;
                v309 = 0;
                v254 = v373;
                switch((**((_DWORD **)v2 + 725) >> 6) & 0x1F)
                {
                  case 1:
                    Xor = llvm::ConstantInt::get();
                    goto LABEL_230;
                  case 2:
                    v337 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v338 = (const llvm::Twine *)&v423;
                    v339 = v383;
                    goto LABEL_215;
                  case 3:
                    v340 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v341 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v340, (llvm::Value *)v306, (const llvm::Twine *)&v423);
                    v418 = 257;
                    v338 = (const llvm::Twine *)v417;
                    v337 = v340;
                    v254 = v373;
                    v339 = v383;
                    goto LABEL_216;
                  case 4:
                    goto LABEL_185;
                  case 5:
                    v342 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v339 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v342, v383, (const llvm::Twine *)&v423);
                    v418 = 257;
                    v338 = (const llvm::Twine *)v417;
                    v337 = v342;
                    v254 = v373;
LABEL_215:
                    v341 = v308;
LABEL_216:
                    Xor = llvm::IRBuilderBase::CreateAnd(v337, v339, v341, v338);
                    goto LABEL_230;
                  case 6:
                    v343 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    Xor = llvm::IRBuilderBase::CreateXor(v343, v383, v308, (const llvm::Twine *)&v423);
                    goto LABEL_230;
                  case 7:
                    v344 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v345 = (const llvm::Twine *)&v423;
                    v346 = v383;
                    goto LABEL_225;
                  case 8:
                    v347 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v348 = llvm::IRBuilderBase::CreateOr(v347, v383, (llvm::Value *)v306, (const llvm::Twine *)&v423);
                    goto LABEL_228;
                  case 9:
                    v347 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v348 = llvm::IRBuilderBase::CreateXor(v347, v383, (llvm::Value *)v306, (const llvm::Twine *)&v423);
                    goto LABEL_228;
                  case 0xA:
                    v349 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v350 = (const llvm::Twine *)&v423;
                    v351 = v308;
                    goto LABEL_229;
                  case 0xB:
                    v352 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v353 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v352, (llvm::Value *)v306, (const llvm::Twine *)&v423);
                    v418 = 257;
                    v345 = (const llvm::Twine *)v417;
                    v344 = v352;
                    v254 = v373;
                    v346 = v383;
                    goto LABEL_226;
                  case 0xC:
                    v349 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v350 = (const llvm::Twine *)&v423;
                    v351 = v383;
                    goto LABEL_229;
                  case 0xD:
                    v354 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v346 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v354, v383, (const llvm::Twine *)&v423);
                    v418 = 257;
                    v345 = (const llvm::Twine *)v417;
                    v344 = v354;
                    v254 = v373;
LABEL_225:
                    v353 = v308;
LABEL_226:
                    Xor = llvm::IRBuilderBase::CreateOr(v344, v346, v353, v345);
                    goto LABEL_230;
                  case 0xE:
                    v347 = (AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
                    v426 = 257;
                    v348 = llvm::IRBuilderBase::CreateAnd(v347, v383, (llvm::Value *)v306, (const llvm::Twine *)&v423);
LABEL_228:
                    v351 = (llvm::Value *)v348;
                    v418 = 257;
                    v350 = (const llvm::Twine *)v417;
                    v349 = v347;
                    v254 = v373;
LABEL_229:
                    Xor = llvm::IRBuilderBase::CreateNot(v349, v351, v350);
                    goto LABEL_230;
                  case 0xF:
                    Xor = llvm::Constant::getAllOnesValue(*v306, v307);
LABEL_230:
                    v383 = (llvm::Value *)Xor;
                    v309 = 0;
                    break;
                  case 0x10:
                    v309 = 0;
                    v383 = (llvm::Value *)v306;
                    break;
                  default:
                    v309 = 0;
                    v383 = 0;
                    goto LABEL_210;
                }
                goto LABEL_185;
              }
LABEL_184:
              v309 = 0;
LABEL_185:
              if (*((_BYTE *)v254 + 72 * v258 + 76))
              {
                v255 = v375;
                v259 = v381;
                v289 = (llvm::Type **)v383;
                if (*((_BYTE *)v254 + 72 * v258 + 56))
                {
                  if (*(_BYTE *)(*(_QWORD *)&v371[*(_QWORD *)(*(_QWORD *)v254 - 24) + 32] + 1731))
                    v311 = *((_BYTE *)v254 + 72 * v258 + 80) != 0;
                  else
                    v311 = 1;
                  v278 = v382;
                  if (v311 && !v309)
                  {
                    v312 = v2;
                    v313 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
                    v314 = *((_QWORD *)v313 + 50);
                    v411 = *(_OWORD *)(v313 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v313 + 40));
                    v413 = *((_DWORD *)v313 + 34);
                    v315 = AGCLLVMTargetLowerer::buildClampColor(v314, (uint64_t)&v411, v383, (uint64_t)&v376[72 * v258 + 44], 0);
                    if (v412)
                      llvm::MetadataTracking::untrack();
                    v259 = v381;
                    v3 = v372;
                    v278 = v382;
                    v289 = (llvm::Type **)v315;
                    v2 = v312;
                    v255 = v375;
                  }
                }
                else
                {
                  v278 = v382;
                }
              }
              else
              {
                v255 = v375;
                v259 = v381;
                v278 = v382;
                v289 = (llvm::Type **)v383;
              }
              goto LABEL_197;
            }
          }
          else
          {
            v3 = v294;
            v254 = v373;
            v2 = this;
            v256 = &v415;
            if ((v290 & 0x20) != 0)
              goto LABEL_176;
          }
          if ((v293 & 1) == 0
            || (*(_DWORD *)(*((_QWORD *)v2 + 614) + 4 * v258) & 0x1Fu) <= 0x12
            && ((1 << (*(_DWORD *)(*((_QWORD *)v2 + 614) + 4 * v258) & 0x1F)) & 0x40F30) != 0)
          {
            goto LABEL_184;
          }
          v316 = *((_QWORD *)v2 + 727);
          if (v316)
            v317 = (unsigned int *)(v316 + 16);
          else
            v317 = (unsigned int *)(*((_QWORD *)v2 + 726) + 4 * v258 + 24);
          v318 = *v317;
          v319 = (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
          v320 = &v376[72 * v258];
          v322 = (llvm::Type *)*((_QWORD *)v320 + 1);
          v321 = v320 + 8;
          v323 = v2;
          v324 = (unsigned int *)(v321 + 60);
          v384 = AGCLLVMObject::buildConvertColor(v319, (llvm::Type **)v383, v322, 0, 1, *((unsigned int *)v321 + 15), v283, v284);
          if (v288)
            v378 = AGCLLVMObject::buildConvertColor((uint64_t)v323 + *(_QWORD *)(*(_QWORD *)v323 - 24), (llvm::Type **)v288, *(llvm::Type **)v321, 0, 1, *v324, v325, v326);
          else
            v378 = 0;
          v327 = (llvm::Type **)AGCLLVMFragmentShader::buildReadFramebuffer(v373, v258);
          v328 = *(llvm::Type **)v321;
          v329 = &v376[72 * v258];
          v331 = v329[42];
          v330 = (unsigned __int8 *)(v329 + 42);
          v334 = AGCLLVMObject::buildConvertColor((uint64_t)v323 + *(_QWORD *)(*(_QWORD *)v323 - 24), v327, v328, v331, *(v330 - 1), *v324, v332, v333);
          v309 = v330[18] && ((*v317 >> 21) & 7) - 1 <= 1 && (HIBYTE(*v317) & 7) - 1 < 2u;
          v335 = (llvm::Value *)v334;
          v370 = (llvm::Value *)AGCLLVMUserFragmentShader::buildBlendEquation(this, v384, v378, (llvm::Value *)v334, (v318 >> 21) & 7, (v318 >> 1) & 0x1F, (v318 >> 6) & 0x1F, (uint64_t)(v330 + 2), *v330, 1u);
          v2 = this;
          v336 = (llvm::Value *)AGCLLVMUserFragmentShader::buildBlendEquation(this, v384, v378, v335, HIBYTE(v318) & 7, (unsigned __int16)v318 >> 11, HIWORD(v318) & 0x1F, (uint64_t)(v330 + 2), *v330, 0);
          v383 = (llvm::Value *)AGCLLVMBuilder::combineRGBA((AGCLLVMUserFragmentShader *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32), v370, v336);
          v3 = v372;
LABEL_210:
          v254 = v373;
          goto LABEL_185;
        }
        v289 = (llvm::Type **)llvm::UndefValue::get();
LABEL_197:
        v244 ^= v259;
        AGCLLVMFragmentShader::buildWriteFramebuffer(v254, v289, v258, v278 & v385 & ((v386 >> v258) & 1 | (8 * ((HIBYTE(v386) >> v258) & 1)) | (2 * ((BYTE1(v386) >> v258) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v386) >> v258) & 1))), v380);
      }
      while (v244);
    }
  }
  else
  {
    v423 = v425;
    v424 = 0x800000000;
    llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v423, v246, 0);
    if ((_DWORD)v246)
    {
      if (*(_BYTE *)(v245 + 8) == 16)
        AGCLLVMBuilder::unboxStruct((uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32, *((_BYTE **)v247 - 4 * (*((_DWORD *)v247 + 5) & 0x7FFFFFF)), (uint64_t)&v423);
      else
        *(_QWORD *)v423 = *((_QWORD *)v247 - 4 * (*((_DWORD *)v247 + 5) & 0x7FFFFFF));
      v249 = 0;
      v248 = 0;
      do
      {
        v250 = *(_QWORD *)(*((_QWORD *)v2 + 9) - 8 * *(unsigned int *)(*((_QWORD *)v2 + 9) + 8) + 8 * v249);
        if (isStringMDNode(*(llvm::MDString **)(v250 - 8 * *(unsigned int *)(v250 + 8)), "air.render_target"))
        {
          v251 = *(_QWORD *)&v423[8 * v249];
          if (v251)
          {
            if (*(_BYTE *)(v251 + 16) == 21)
            {
              v252 = *(_QWORD *)(*((_QWORD *)v2 + 11) + 8 * *(unsigned int *)(v251 + 32));
              if (v252
                && isStringMDNode(*(llvm::MDString **)(v252 - 8 * *(unsigned int *)(v252 + 8) + 8), "air.render_target"))
              {
                LODWORD(v419) = 0;
                LODWORD(v414) = 0;
                v417[0] = 2;
                parseMDInt(0, v252, v417, &v419);
                v417[0] = 1;
                parseMDInt(0, v250, v417, &v414);
                if ((_DWORD)v419 == (_DWORD)v414)
                  v253 = 1 << v419;
                else
                  LOBYTE(v253) = 0;
                v248 |= v253;
              }
              v2 = this;
            }
          }
        }
        ++v249;
      }
      while (v246 != v249);
    }
    else
    {
      v248 = 0;
    }
    if (v423 != v425)
      free(v423);
    v3 = v372;
    if (v244)
      goto LABEL_131;
  }
  return (*(uint64_t (**)(AGCLLVMUserFragmentShader *))(*(_QWORD *)v2 + 584))(v2);
}

void AGCLLVMAGPFragmentShaderGen6::setupPerPrimitiveVaryings(AGCLLVMAGPFragmentShaderGen6 *this)
{
  char *v2;
  unsigned __int8 *v3;
  llvm::IRBuilderBase *v4;
  llvm::Instruction *NextNonDebugInstruction;
  uint64_t v6;
  llvm::BasicBlock *v7;
  char *v8;
  uint64_t FirstInsertionPt;
  llvm::Value *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  uint64_t Shl;
  char *v14;
  uint64_t v15;
  llvm::Value *Cast;
  llvm::Value *v17;
  char *v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::IRBuilderBase *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::IRBuilderBase *v24;
  llvm::Value *v25;
  const AGCLLVMTargetLowerer *v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  llvm::IRBuilderBase *v33;
  llvm::Value *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  uint64_t Mul;
  uint64_t v40;
  llvm::Value *v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  unint64_t v45;
  uint64_t *v46;
  llvm::Value *Add;
  llvm::IRBuilderBase *v48;
  uint64_t v49;
  llvm::IRBuilderBase *v50;
  uint64_t v51;
  llvm::Value *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  llvm::Value *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  _BYTE v61[32];
  __int16 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void **v67[4];
  __int16 v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  void *__p[2];
  uint64_t v73;
  void **v74;
  uint64_t v75;
  void *v76[2];
  _QWORD v77[63];
  char v78;
  _BYTE v79[32];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _DWORD v84[8];
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 1832))
  {
    v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v69 = *(_OWORD *)(v2 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 40));
    v71 = *((_DWORD *)v2 + 34);
    v3 = (unsigned __int8 *)*((_QWORD *)this + 723);
    if (v3 && v3[16] >= 0x1Cu)
    {
      v4 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      NextNonDebugInstruction = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v3);
      llvm::IRBuilderBase::SetInsertPoint(v4, NextNonDebugInstruction);
    }
    else
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 21) + 80);
      if (v6)
        v7 = (llvm::BasicBlock *)(v6 - 24);
      else
        v7 = 0;
      v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v7);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)v8, (uint64_t)v7, FirstInsertionPt);
    }
    __p[0] = 0;
    __p[1] = 0;
    LODWORD(v73) = 0;
    v74 = 0;
    v75 = 0;
    v76[0] = v77;
    v76[1] = (void *)0x500000000;
    llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v76, 5uLL, -559038737);
    *(_OWORD *)__p = xmmword_1C3E37BD0;
    LODWORD(v73) = 0;
    v75 = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
    v10 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)__p);
    v11 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v68 = 257;
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = llvm::IRBuilderBase::CreateShl(v11, v10, v12, (const llvm::Twine *)v67);
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v15 = *((_QWORD *)v14 + 30);
    v68 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v14 + 40), 39, Shl, v15, (uint64_t)v67);
    if (v76[0] != v77)
      free(v76[0]);
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)__p, this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "agc.per_prim.primitive_address", 0x1EuLL, 1, 3, 1, 7, 0);
    v17 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)__p);
    v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v19 = *((_QWORD *)v18 + 30);
    v68 = 257;
    v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, (uint64_t)v17, v19, (uint64_t)v67);
    v21 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v68 = 257;
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v21, v20, v22, (const llvm::Twine *)v67);
    if (v76[0] != v77)
      free(v76[0]);
    v24 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    LOWORD(v75) = 257;
    v57 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v24, Cast, v23, (const llvm::Twine *)__p);
    *((_BYTE *)this + 6444) = 1;
    if (!*((_QWORD *)this + 911))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)__p, this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "air.amplification_id", 0x14uLL);
      v25 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7272), (uint64_t)v25);
      *((_BYTE *)this + 5860) = 1;
      if (v76[0] != v77)
        free(v76[0]);
    }
    v26 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v27 = *((_BYTE *)v26 + 1762);
    __p[0] = 0;
    __p[1] = 0;
    v73 = 0;
    v74 = v76;
    v75 = 0x800000000;
    v77[62] = 0xFFFFFFFFLL;
    v78 = v27;
    v84[7] = 0;
    memset(v79, 0, sizeof(v79));
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    memset(v84, 0, 26);
    v85 = 1;
    v28 = *((unsigned int *)this + 1480);
    if ((_DWORD)v28)
    {
      v29 = *((_QWORD *)this + 739);
      v30 = v28 << 6;
      do
      {
        GenericVaryingAllocator::addVarying((uint64_t)__p, v29);
        v29 += 64;
        v30 -= 64;
      }
      while (v30);
      v26 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    }
    GenericVaryingAllocator::allocate((GenericVaryingAllocator *)__p, v26);
    v65 = 0;
    v66 = 4 * DWORD1(v80);
    if (v78)
      v31 = (HIDWORD(v81) + 1) >> 1;
    else
      v31 = HIDWORD(v81);
    v32 = v31 + DWORD1(v80);
    v63 = 4 * v32;
    v64 = 4 * (v32 + DWORD1(v83));
    v33 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v34 = (llvm::Value *)llvm::ConstantInt::get();
    v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v36 = *((_QWORD *)this + 911);
    v37 = *((_QWORD *)v35 + 29);
    v68 = 257;
    v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v35 + 40), 39, v36, v37, (uint64_t)v67);
    v62 = 257;
    Mul = llvm::IRBuilderBase::CreateMul(v33, v34, v38, (const llvm::Twine *)v61);
    v40 = *((unsigned int *)this + 1832);
    if ((_DWORD)v40)
    {
      v41 = (llvm::Value *)Mul;
      v42 = *((_QWORD *)this + 915);
      v43 = v42 + 16 * v40;
      do
      {
        if ((_DWORD)v75)
        {
          v44 = v74;
          v45 = (unint64_t)v75 << 6;
          while (*((_DWORD *)v44 + 4) != *(_DWORD *)v42)
          {
            v44 += 8;
            v45 -= 64;
            if (!v45)
              goto LABEL_29;
          }
        }
        else
        {
LABEL_29:
          v44 = 0;
        }
        v46 = *(uint64_t **)(v42 + 8);
        Add = (llvm::Value *)llvm::ConstantInt::get();
        if (*((_BYTE *)v44 + 57))
        {
          v48 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v68 = 257;
          Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v48, Add, v41, (const llvm::Twine *)v67);
        }
        v49 = *(_QWORD *)(*(_QWORD *)this - 24);
        v50 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + v49 + 40);
        v51 = *(_QWORD *)((char *)this + v49 + 240);
        v68 = 257;
        v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v50, 39, (uint64_t)Add, v51, (uint64_t)v67);
        v62 = 257;
        v53 = llvm::IRBuilderBase::CreateAdd(v50, v57, v52, (const llvm::Twine *)v61);
        v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
        v55 = *v46;
        v68 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v54, 48, v53, v55, (uint64_t)v67);
        llvm::Value::replaceAllUsesWith();
        v42 += 16;
      }
      while (v42 != v43);
    }
    v56 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v58 = v69;
    v59 = v70;
    if (v70)
      llvm::MetadataTracking::track();
    v60 = v71;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v58, (uint64_t)(v56 + 8));
    if (v59)
      llvm::MetadataTracking::untrack();
    v67[0] = (void **)v79;
    std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](v67);
    llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)&v74);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v70)
      llvm::MetadataTracking::untrack();
  }
}

void `virtual thunk to'AGCLLVMAGPVertexShaderGen4::~AGCLLVMAGPVertexShaderGen4(AGCLLVMAGPVertexShaderGen4 *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E81E78;
  v1[1261] = &off_1E7E821C8;
  v1[1265] = &off_1E7E822B8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E726E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E81E78;
  v1[1261] = &off_1E7E821C8;
  v1[1265] = &off_1E7E822B8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E726E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t k;
  unsigned int v21;
  unsigned int v22;
  unint64_t m;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t j;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;

  v7 = result;
LABEL_2:
  v8 = (unsigned int *)(a2 - 16);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *v8;
        v46 = *(_DWORD *)i;
        if (*v8 >= *(_DWORD *)i)
        {
          if (v46 < v45)
            return result;
          v48 = *(_QWORD *)(a2 - 8);
          v47 = *(_QWORD *)(i + 8);
          if (v48 >= v47)
            return result;
        }
        else
        {
          v47 = *(_QWORD *)(i + 8);
          v48 = *(_QWORD *)(a2 - 8);
        }
        *(_DWORD *)i = v45;
        *(_DWORD *)(a2 - 16) = v46;
        *(_QWORD *)(i + 8) = v48;
        *(_QWORD *)(a2 - 8) = v47;
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)i, (unsigned int *)(i + 16), (unsigned int *)(a2 - 16));
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(i, i + 16, i + 32, a2 - 16);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(i, i + 16, i + 32, i + 48, (unsigned int *)(a2 - 16));
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v64 = (v11 - 2) >> 1;
            v65 = v64;
            while (1)
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = i + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v11)
                {
                  v69 = *(_DWORD *)(v68 + 16);
                  if (*(_DWORD *)v68 < v69
                    || v69 >= *(_DWORD *)v68 && *(_QWORD *)(i + 16 * v67 + 8) < *(_QWORD *)(v68 + 24))
                  {
                    v68 += 16;
                    v67 = 2 * v66 + 2;
                  }
                }
                v70 = i + 16 * v66;
                v71 = *(_DWORD *)v68;
                v72 = *(_DWORD *)v70;
                if (*(_DWORD *)v68 >= *(_DWORD *)v70)
                {
                  if (v72 < v71)
                  {
                    v73 = *(_QWORD *)(v70 + 8);
                    v74 = *(_QWORD *)(v68 + 8);
LABEL_131:
                    *(_DWORD *)v70 = v71;
                    *(_QWORD *)(v70 + 8) = v74;
                    if (v64 >= v67)
                    {
                      while (1)
                      {
                        v76 = 2 * v67;
                        v67 = (2 * v67) | 1;
                        v75 = i + 16 * v67;
                        v77 = v76 + 2;
                        if (v77 < (uint64_t)v11)
                        {
                          v78 = *(_DWORD *)(v75 + 16);
                          if (*(_DWORD *)v75 < v78
                            || v78 >= *(_DWORD *)v75 && *(_QWORD *)(i + 16 * v67 + 8) < *(_QWORD *)(v75 + 24))
                          {
                            v75 += 16;
                            v67 = v77;
                          }
                        }
                        v79 = *(_DWORD *)v75;
                        if (*(_DWORD *)v75 < v72)
                          break;
                        v80 = *(_QWORD *)(v75 + 8);
                        if (v72 >= v79 && v80 < v73)
                          break;
                        *(_DWORD *)v68 = v79;
                        *(_QWORD *)(v68 + 8) = v80;
                        v68 = v75;
                        if (v64 < v67)
                          goto LABEL_133;
                      }
                    }
                    v75 = v68;
LABEL_133:
                    *(_DWORD *)v75 = v72;
                    *(_QWORD *)(v75 + 8) = v73;
                    goto LABEL_134;
                  }
                  v74 = *(_QWORD *)(v68 + 8);
                  v73 = *(_QWORD *)(i + 16 * v66 + 8);
                  if (v74 >= v73)
                    goto LABEL_131;
                }
              }
LABEL_134:
              v65 = v66 - 1;
              if (!v66)
              {
                v89 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v90 = 0;
                  v91 = *(_DWORD *)i;
                  v92 = *(_QWORD *)(i + 8);
                  v93 = v89 - 2;
                  if (v89 < 2)
                    v93 = v89 - 1;
                  v94 = v93 >> 1;
                  v95 = i;
                  do
                  {
                    v96 = v95;
                    v97 = v90 + 1;
                    v95 += 16 * (v90 + 1);
                    v98 = 2 * v90;
                    result = (2 * v90) | 1;
                    v90 = result;
                    v99 = v98 + 2;
                    if (v99 < v89)
                    {
                      result = v95 + 16;
                      v100 = *(_DWORD *)(v95 + 16);
                      if (*(_DWORD *)v95 < v100
                        || v100 >= *(_DWORD *)v95 && *(_QWORD *)(v96 + 16 * v97 + 8) < *(_QWORD *)(v95 + 24))
                      {
                        v95 += 16;
                        v90 = v99;
                      }
                    }
                    *(_DWORD *)v96 = *(_DWORD *)v95;
                    *(_QWORD *)(v96 + 8) = *(_QWORD *)(v95 + 8);
                  }
                  while (v90 <= v94);
                  if (v95 == a2 - 16)
                  {
                    *(_DWORD *)v95 = v91;
                    *(_QWORD *)(v95 + 8) = v92;
                  }
                  else
                  {
                    *(_DWORD *)v95 = *(_DWORD *)(a2 - 16);
                    *(_QWORD *)(v95 + 8) = *(_QWORD *)(a2 - 8);
                    *(_DWORD *)(a2 - 16) = v91;
                    *(_QWORD *)(a2 - 8) = v92;
                    v101 = v95 - i + 16;
                    if (v101 >= 17)
                    {
                      v102 = (v101 >> 4) - 2;
                      v103 = v102 >> 1;
                      v104 = i + 16 * (v102 >> 1);
                      v105 = *(_DWORD *)v104;
                      v106 = *(_DWORD *)v95;
                      if (*(_DWORD *)v104 < *(_DWORD *)v95)
                      {
                        v107 = *(_QWORD *)(v95 + 8);
                        result = *(_QWORD *)(v104 + 8);
LABEL_176:
                        *(_DWORD *)v95 = v105;
                        *(_QWORD *)(v95 + 8) = result;
                        if (v102 >= 2)
                        {
                          while (1)
                          {
                            v109 = v103 - 1;
                            v103 = (v103 - 1) >> 1;
                            v108 = i + 16 * v103;
                            v110 = *(_DWORD *)v108;
                            if (*(_DWORD *)v108 >= v106)
                            {
                              if (v106 < v110)
                                break;
                              result = *(_QWORD *)(i + 16 * v103 + 8);
                              if (result >= v107)
                                break;
                            }
                            else
                            {
                              result = *(_QWORD *)(v108 + 8);
                            }
                            *(_DWORD *)v104 = v110;
                            *(_QWORD *)(v104 + 8) = result;
                            v104 = i + 16 * v103;
                            if (v109 <= 1)
                              goto LABEL_183;
                          }
                        }
                        v108 = v104;
LABEL_183:
                        *(_DWORD *)v108 = v106;
                        *(_QWORD *)(v108 + 8) = v107;
                        goto LABEL_185;
                      }
                      if (v106 >= v105)
                      {
                        result = *(_QWORD *)(i + 16 * v103 + 8);
                        v107 = *(_QWORD *)(v95 + 8);
                        if (result < v107)
                          goto LABEL_176;
                      }
                    }
                  }
LABEL_185:
                  a2 -= 16;
                  if (v89-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = i + 16 * (v11 >> 1);
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v7 + 16 * (v11 >> 1)), (unsigned int *)v7, (unsigned int *)(a2 - 16));
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)v7, (unsigned int *)(v7 + 16 * (v11 >> 1)), (unsigned int *)(a2 - 16));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v7 + 16), (unsigned int *)(v13 - 16), (unsigned int *)(a2 - 32));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v7 + 32), (unsigned int *)(v7 + 16 + 16 * v12), (unsigned int *)(a2 - 48));
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v13 - 16), (unsigned int *)v13, (unsigned int *)(v7 + 16 + 16 * v12));
            v14 = *(_DWORD *)v7;
            *(_DWORD *)v7 = *(_DWORD *)v13;
            *(_DWORD *)v13 = v14;
            v15 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v15;
          }
          --a3;
          v16 = *(_DWORD *)v7;
          if ((a4 & 1) == 0)
          {
            v17 = *(_DWORD *)(v7 - 16);
            if (v17 >= v16)
            {
              if (v16 < v17)
              {
                v18 = *(_QWORD *)(v7 + 8);
              }
              else
              {
                v18 = *(_QWORD *)(v7 + 8);
                if (*(_QWORD *)(v7 - 8) < v18)
                  goto LABEL_13;
              }
              v34 = *v8;
              if (v16 >= *v8 && (v34 < v16 || v18 >= *(_QWORD *)(a2 - 8)))
              {
                for (i = v7 + 16;
                      i < a2 && v16 >= *(_DWORD *)i && (*(_DWORD *)i < v16 || v18 >= *(_QWORD *)(i + 8));
              }
              else
              {
                i = v7;
                do
                {
                  v36 = *(_DWORD *)(i + 16);
                  i += 16;
                  v35 = v36;
                }
                while (v16 >= v36 && (v35 < v16 || v18 >= *(_QWORD *)(i + 8)));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 16; v16 < v34 || v34 >= v16 && v18 < *(_QWORD *)(j + 8); j -= 16)
                {
                  v38 = *(_DWORD *)(j - 16);
                  v34 = v38;
                }
              }
              if (i < j)
              {
                v39 = *(_DWORD *)i;
                v40 = *(_DWORD *)j;
                do
                {
                  *(_DWORD *)i = v40;
                  *(_DWORD *)j = v39;
                  v41 = *(_DWORD *)(i + 16);
                  i += 16;
                  v39 = v41;
                  v42 = *(_QWORD *)(i - 8);
                  *(_QWORD *)(i - 8) = *(_QWORD *)(j + 8);
                  *(_QWORD *)(j + 8) = v42;
                  while (v16 >= v39 && (v39 < v16 || v18 >= *(_QWORD *)(i + 8)))
                  {
                    v43 = *(_DWORD *)(i + 16);
                    i += 16;
                    v39 = v43;
                  }
                  do
                  {
                    do
                    {
                      v44 = *(_DWORD *)(j - 16);
                      j -= 16;
                      v40 = v44;
                    }
                    while (v16 < v44);
                  }
                  while (v40 >= v16 && v18 < *(_QWORD *)(j + 8));
                }
                while (i < j);
              }
              if (i - 16 != v7)
              {
                *(_DWORD *)v7 = *(_DWORD *)(i - 16);
                *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 8);
              }
              a4 = 0;
              *(_DWORD *)(i - 16) = v16;
              *(_QWORD *)(i - 8) = v18;
              continue;
            }
          }
LABEL_13:
          v19 = *(_QWORD *)(v7 + 8);
          for (k = v7 + 16; ; k += 16)
          {
            v21 = *(_DWORD *)k;
            if (*(_DWORD *)k >= v16 && (v16 < v21 || *(_QWORD *)(k + 8) >= v19))
              break;
          }
          if (k - 16 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v25 = *v8;
              m = a2 - 16;
              if (*v8 >= v16)
              {
                m = a2 - 16;
                do
                {
                  if (v16 >= v25)
                  {
                    if (*(_QWORD *)(m + 8) < v19 || k >= m)
                      break;
                  }
                  else if (k >= m)
                  {
                    break;
                  }
                  v27 = *(_DWORD *)(m - 16);
                  m -= 16;
                  v25 = v27;
                }
                while (v27 >= v16);
              }
            }
          }
          else
          {
            v22 = *v8;
            for (m = a2 - 16; v22 >= v16 && (v16 < v22 || *(_QWORD *)(m + 8) >= v19); m -= 16)
            {
              v24 = *(_DWORD *)(m - 16);
              v22 = v24;
            }
          }
          i = k;
          if (k < m)
          {
            v28 = *(_DWORD *)m;
            i = k;
            v29 = m;
            do
            {
              *(_DWORD *)i = v28;
              *(_DWORD *)v29 = v21;
              v30 = *(_QWORD *)(i + 8);
              *(_QWORD *)(i + 8) = *(_QWORD *)(v29 + 8);
              *(_QWORD *)(v29 + 8) = v30;
              do
              {
                do
                {
                  v31 = *(_DWORD *)(i + 16);
                  i += 16;
                  v21 = v31;
                }
                while (v31 < v16);
              }
              while (v16 >= v21 && *(_QWORD *)(i + 8) < v19);
              do
              {
                v32 = *(_DWORD *)(v29 - 16);
                v29 -= 16;
                v28 = v32;
              }
              while (v32 >= v16 && (v16 < v28 || *(_QWORD *)(v29 + 8) >= v19));
            }
            while (i < v29);
          }
          if (i - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(i - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 8);
          }
          *(_DWORD *)(i - 16) = v16;
          *(_QWORD *)(i - 8) = v19;
          if (k < m)
          {
LABEL_50:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>(v7, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(v7, i - 16);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v33)
              continue;
            goto LABEL_50;
          }
          a2 = i - 16;
          if (v33)
            return result;
          goto LABEL_2;
        }
        v49 = i + 16;
        v51 = i == a2 || v49 == a2;
        if ((a4 & 1) == 0)
        {
          if (v51)
            return result;
          while (1)
          {
            v82 = v7;
            v7 = v49;
            v83 = *(_DWORD *)(v82 + 16);
            v84 = *(_DWORD *)v82;
            if (v83 < *(_DWORD *)v82)
              break;
            if (v84 >= v83)
            {
              v85 = *(_QWORD *)(v82 + 24);
              if (v85 < *(_QWORD *)(v82 + 8))
                goto LABEL_157;
            }
LABEL_161:
            v49 = v7 + 16;
            if (v7 + 16 == a2)
              return result;
          }
          v85 = *(_QWORD *)(v82 + 24);
          do
          {
            do
            {
LABEL_157:
              v86 = v82;
              v87 = v84;
              v88 = *(_DWORD *)(v82 - 16);
              v82 -= 16;
              v84 = v88;
              *(_DWORD *)(v82 + 32) = v87;
              *(_QWORD *)(v82 + 40) = *(_QWORD *)(v82 + 24);
            }
            while (v83 < v88);
          }
          while (v84 >= v83 && v85 < *(_QWORD *)(v86 - 8));
          *(_DWORD *)v86 = v83;
          *(_QWORD *)(v86 + 8) = v85;
          goto LABEL_161;
        }
        if (v51)
          return result;
        v52 = 0;
        v53 = i;
        do
        {
          v54 = v53;
          v53 = v49;
          v55 = *(_DWORD *)(v54 + 16);
          v56 = *(_DWORD *)v54;
          if (v55 >= *(_DWORD *)v54)
          {
            if (v56 < v55)
              goto LABEL_117;
            v57 = *(_QWORD *)(v54 + 24);
            v58 = *(_QWORD *)(v54 + 8);
            if (v57 >= v58)
              goto LABEL_117;
          }
          else
          {
            v57 = *(_QWORD *)(v54 + 24);
            v58 = *(_QWORD *)(v54 + 8);
          }
          *(_DWORD *)(v54 + 16) = v56;
          *(_QWORD *)(v53 + 8) = v58;
          v59 = i;
          if (v54 == i)
            goto LABEL_116;
          v60 = v52;
          while (1)
          {
            v61 = *(_DWORD *)(i + v60 - 16);
            if (v55 >= v61)
              break;
            v62 = *(_QWORD *)(i + v60 - 8);
LABEL_113:
            v54 -= 16;
            v63 = i + v60;
            *(_DWORD *)v63 = v61;
            *(_QWORD *)(v63 + 8) = v62;
            v60 -= 16;
            if (!v60)
            {
              v59 = i;
              goto LABEL_116;
            }
          }
          if (v61 >= v55)
          {
            v59 = i + v60;
            v62 = *(_QWORD *)(i + v60 - 8);
            if (v57 >= v62)
              goto LABEL_116;
            goto LABEL_113;
          }
          v59 = v54;
LABEL_116:
          *(_DWORD *)v59 = v55;
          *(_QWORD *)(v59 + 8) = v57;
LABEL_117:
          v49 = v53 + 16;
          v52 += 16;
        }
        while (v53 + 16 != a2);
        return result;
    }
  }
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v6[0] = &off_1E7EB9AE8;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  v7[0] = &off_1E7EB9A58;
  v7[1] = v4;
  v8 = v7;
  replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(v2, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::vertexBuiltinRegisterDomain()
{
  return 2;
}

uint64_t AGCLLVMUserVertexShader::getMaxSharedRegisters(AGCLLVMUserVertexShader *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 844);
}

_QWORD *AGCLLVMGen4TargetConfig::createMetalVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  _QWORD *v11;

  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 1261), a2, *a3);
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v11, (uint64_t *)off_1E7E726E0, (uint64_t)a3, a4, a5, a6);
  *v11 = &off_1E7E72280;
  v11[1261] = &unk_1E7E725D8;
  v11[1265] = &unk_1E7E726C8;
  return v11 + 1261;
}

uint64_t AGCLLVMAGPVertexShader::debugTraceBufferEnabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 9459);
}

BOOL AGCLLVMAGPVertexShader::isPointSizePresent(uint64_t a1, uint64_t a2)
{
  return a2 || *(_BYTE *)(a1 + 9458) != 0;
}

uint64_t AGCLLVMObject::getTextureWriteFPRoundingMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::append(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned int *)(v3 + 8);
    if (!a2)
      goto LABEL_6;
  }
  else if (!a2)
  {
    goto LABEL_6;
  }
  v5 = (_DWORD *)(*(_QWORD *)v3 + 4 * v4);
  v6 = a2;
  do
  {
    *v5++ = -1;
    --v6;
  }
  while (v6);
  LODWORD(v4) = *(_DWORD *)(v3 + 8);
LABEL_6:
  *(_DWORD *)(v3 + 8) = v4 + a2;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = v16;
    do
    {
      v11 = v8;
      v12 = *(_QWORD *)(a1 + 8 + 8 * v9);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v10++ = v12;
      v8 = 1;
      v9 = 1;
    }
    while ((v11 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x1CAA2C6C0](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(a1, v16, v10);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x1CAA2C6C0](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

uint64_t llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  char *v3;
  _BYTE *v4;
  const char *v5;
  const char *Value;
  uint64_t v7;

  v2 = AGCLLVMUserVertexShader::setupShaderWrapper(this);
  if (*((_BYTE *)this + 14))
  {
    v3 = (char *)this + *((_QWORD *)*this - 3);
    if (**(_QWORD **)(*((_QWORD *)this[22] + 3) + 16) == *((_QWORD *)v3 + 22))
    {
      v4 = (_BYTE *)*((_QWORD *)v3 + 50);
      if (v4[1745])
        (*(void (**)(_BYTE *, llvm::Function *))(*(_QWORD *)v4 + 376))(v4, this[21]);
    }
  }
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_MTL_TESSELLATION_VS_WRITETHROUGH", v5);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
      {
        v7 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
        (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v7 + 408))(v7, this[21]);
      }
    }
  }
  return v2;
}

void AGCLLVMAGPVertexShaderRegular::simplifyGenericIR(AGCLLVMAGPVertexShaderRegular *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 10) >= 2u)
  {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 336), *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
    AGCLLVMObject::printIR((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), "After inliner in AGCLLVMAGPVertexShaderRegular::simplifyGenericIR", 0);
    *((_DWORD *)this + 10) = 1;
  }
  SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), a3, a4, a5, a6, a7, a8, a9);
}

BOOL AGCLLVMAGPVertexShaderRegular::constructReply(AGCLLVMAGPVertexShaderRegular *this)
{
  _BOOL8 result;
  int v3;
  int v4;
  int v5;
  char *v6;
  char *v7;
  int v8;
  flatbuffers::FlatBufferBuilder *v9;
  int v10;
  const char *v11;

  result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderRegular *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    v5 = AGCLLVMAGPVertexShader::constructMTLVertexInfo(this);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = v6 + 2472;
    v6[2542] = 1;
    v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v6 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v7, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v7, v5);
    v9 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v10 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v7, v8);
    flatbuffers::FlatBufferBuilder::Finish(v9, v10, v11);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::initCompile(AGCLLVMAGPVertexShaderRegular *this)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t Function;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  inited = AGCLLVMAGPVertexShader::initCompile(this);
  if ((_DWORD)inited)
  {
    v3 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1734))
    {
      Function = llvm::Module::getFunction();
      *((_QWORD *)this + 1257) = Function;
      if (!Function)
        *((_QWORD *)this + 1257) = llvm::Module::getFunction();
      v5 = llvm::Module::getFunction();
      *((_QWORD *)this + 1258) = v5;
      if (!v5)
        *((_QWORD *)this + 1258) = llvm::Module::getFunction();
      v6 = llvm::Module::getFunction();
      *((_QWORD *)this + 1259) = v6;
      if (!v6)
        *((_QWORD *)this + 1259) = llvm::Module::getFunction();
      v7 = llvm::Module::getFunction();
      *((_QWORD *)this + 1260) = v7;
      v3 = *(_QWORD *)this;
      if (!v7)
      {
        *((_QWORD *)this + 1260) = llvm::Module::getFunction();
        v3 = *(_QWORD *)this;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 400) + 1754))
      AGCLLVMUserShader::setUniformAtomicsMode(this);
  }
  return inited;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::replaceBuiltins(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t result;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Function;
  llvm::Function *v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v14;
  void (**v15)(_QWORD *, _QWORD);
  uint64_t *v16;
  void (*v17)(_QWORD *, _QWORD);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Instruction *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t i;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  llvm::Value **v34;
  llvm::Instruction *v35;
  llvm::Value **v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Type *v39;
  uint64_t v40;
  int v41;
  llvm::Type *v42;
  uint64_t v43;
  llvm::Value **v44;
  llvm::Value *v45;
  char *v46;
  uint64_t (*v47)(_QWORD);
  _QWORD *v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  _QWORD *v51;
  uint64_t (*v52)(_QWORD);
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t (*v56)(_QWORD);
  _QWORD *v57;
  uint64_t (*v58)(_QWORD);
  _QWORD *v59;
  uint64_t (*v60)(_QWORD);
  _QWORD *v61;
  _OWORD *v62;
  void *v63;
  uint64_t v64;
  llvm::Value *FPTrunc;
  char *v66;
  uint64_t v67;
  llvm::Value *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  llvm::Function *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t (**v77)(_QWORD);
  _BYTE *v78;
  _DWORD *v79;
  uint64_t v80;
  llvm::Value *v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  _QWORD v88[4];
  __int16 v89;
  uint64_t (**v90)(int, llvm::Value *);
  void *v91[2];
  _OWORD v92[5];
  int v93;
  uint64_t v94;
  _QWORD v95[29];
  AGCLLVMAGPFragmentShaderGen3 *v96;
  _OWORD v97[3];
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObject::replaceBuiltins(this);
  if (!(_DWORD)result)
    return result;
  v70 = result;
  v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v90, *v3);
  v96 = this;
  v90 = &off_1E7E68260;
  v95[25] = v3;
  if ((v4 & 1) == 0
  {
    AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_local_size.i32";
    dword_1ED8398D8 = 1;
    qword_1ED8398E0 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile;
    unk_1ED8398E8 = 0;
    dword_1ED8398F0 = 4;
    word_1ED8398F4 = 0;
    qword_1ED8398F8 = (uint64_t)"air.get_local_size.i16";
    dword_1ED839900 = 1;
    qword_1ED839908 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile;
    unk_1ED839910 = 0;
    dword_1ED839918 = 4;
    word_1ED83991C = 0;
    qword_1ED839920 = (uint64_t)"air.get_local_id.i32";
    dword_1ED839928 = 1;
    xmmword_1ED839930 = xmmword_1C3E37B90;
    dword_1ED839940 = 4;
    word_1ED839944 = 0;
    qword_1ED839948 = (uint64_t)"air.get_local_id.i16";
    dword_1ED839950 = 1;
    unk_1ED839958 = xmmword_1C3E37B90;
    dword_1ED839968 = 4;
    word_1ED83996C = 0;
    qword_1ED839970 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1ED839978 = 1;
    qword_1ED839980 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildTileIndex;
    unk_1ED839988 = 0;
    dword_1ED839990 = 2;
    word_1ED839994 = 0;
    qword_1ED839998 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1ED8399A0 = 1;
    qword_1ED8399A8 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildTileIndex;
    unk_1ED8399B0 = 0;
    dword_1ED8399B8 = 2;
    word_1ED8399BC = 0;
    qword_1ED8399C0 = (uint64_t)"air.get_thread_index_in_simdgroup.i32";
    dword_1ED8399C8 = 1;
    qword_1ED8399D0 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup;
    unk_1ED8399D8 = 0;
    dword_1ED8399E0 = 2;
    word_1ED8399E4 = 0;
    qword_1ED8399E8 = (uint64_t)"air.get_thread_index_in_simdgroup.i16";
    dword_1ED8399F0 = 1;
    qword_1ED8399F8 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup;
    unk_1ED839A00 = 0;
    dword_1ED839A08 = 2;
    word_1ED839A0C = 0;
    qword_1ED839A10 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i32";
    dword_1ED839A18 = 1;
    qword_1ED839A20 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup;
    unk_1ED839A28 = 0;
    dword_1ED839A30 = 2;
    word_1ED839A34 = 0;
    qword_1ED839A38 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i16";
    dword_1ED839A40 = 1;
    qword_1ED839A48 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup;
    unk_1ED839A50 = 0;
    dword_1ED839A58 = 2;
    word_1ED839A5C = 0;
  }
  v5 = 0;
  v6 = &v83;
  do
  {
    if (AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5])
      strlen((const char *)AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v8 = (llvm::Function *)Function;
      v9 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5];
      v79 = v9 + 4;
      if (*((_DWORD *)v9 + 8) == 10)
      {
        v13 = *(_QWORD *)(Function + 8);
        if (v13)
        {
          v14 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5];
          v15 = (void (**)(_QWORD *, _QWORD))(v14 + 2);
          v16 = v14 + 3;
          do
          {
            v17 = *v15;
            v18 = (_QWORD *)((char *)v96 + (*v16 >> 1));
            if ((*v16 & 1) != 0)
              v17 = *(void (**)(_QWORD *, _QWORD))(*v18 + v17);
            v19 = *(_QWORD *)(v13 + 8);
            v17(v18, *(_QWORD *)(v13 + 24));
            v13 = v19;
          }
          while (v19);
        }
        goto LABEL_106;
      }
      if (*((_DWORD *)v9 + 8) == 9)
      {
        v10 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5];
        v11 = (_BYTE *)v10[2];
        if (v11)
        {
          v12 = strlen((const char *)v10[2]);
          *(_QWORD *)&v97[0] = (char *)&v97[1] + 8;
          *(_OWORD *)((char *)v97 + 8) = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v97, v11, &v11[v12]);
        }
        else
        {
          *(_QWORD *)&v97[1] = 64;
          v97[0] = (unint64_t)&v97[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v97, ".", "");
        v69 = *((_QWORD *)&v97[0] + 1);
        if (*(_QWORD *)&v97[1] < *((_QWORD *)&v97[0] + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v69 = *((_QWORD *)&v97[0] + 1);
        }
        *((_QWORD *)&v97[0] + 1) = v69;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v97[0] != (_OWORD *)((char *)&v97[1] + 8))
          free(*(void **)&v97[0]);
        goto LABEL_106;
      }
      v20 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v21 = (*(_DWORD *)(v20 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5 + 4]) == 0;
      v22 = !v21;
      v73 = v5;
      if (v21)
        v23 = 1;
      else
        v23 = *(unsigned int *)(v20 + 32);
      v80 = v23;
      v71 = v93;
      v72 = (llvm::Function *)Function;
      v24 = *(_QWORD *)(Function + 8);
      if (!v24)
      {
LABEL_100:
        v93 = v71;
        v8 = v72;
        v5 = v73;
LABEL_106:
        llvm::Function::eraseFromParent(v8);
        goto LABEL_107;
      }
      v74 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5 + 1];
      v25 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v5];
      v78 = (char *)v25 + 36;
      v76 = v25 + 3;
      v77 = (uint64_t (**)(_QWORD))(v25 + 2);
      while (1)
      {
        v26 = *(llvm::Instruction **)(v24 + 24);
        v27 = *(_QWORD *)(v24 + 8);
        if (*(_DWORD *)v74 == 1)
        {
          v28 = 0;
        }
        else
        {
          if (*(_DWORD *)v74 != 2)
            goto LABEL_33;
          v28 = 121;
        }
        v93 = v28;
LABEL_33:
        v75 = v27;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v91, v26);
        v29 = llvm::UndefValue::get();
        if (v80)
        {
          for (i = 0; i != v80; ++i)
          {
            v81 = (llvm::Value *)v29;
            v31 = v6;
            v98 = 0;
            memset(v97, 0, sizeof(v97));
            v32 = llvm::CallBase::arg_end(v26) - (_QWORD)v26 + 32 * (*((_DWORD *)v26 + 5) & 0x7FFFFFF);
            if ((v32 & 0x1FFFFFFFE0) != 0)
            {
              v33 = (v32 >> 5);
              v34 = (llvm::Value **)v97;
              v35 = v26;
              do
              {
                v36 = (llvm::Value **)((char *)v35 - 32 * (*((_DWORD *)v26 + 5) & 0x7FFFFFF));
                v37 = *v36;
                *v34 = *v36;
                if (v22 && (*(_DWORD *)(*(_QWORD *)v37 + 8) & 0xFE) == 0x12)
                {
                  v89 = 257;
                  v38 = (llvm::Value *)llvm::ConstantInt::get();
                  *v34 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v91, v37, v38, (const llvm::Twine *)v88);
                }
                ++v34;
                v35 = (llvm::Instruction *)((char *)v35 + 32);
                --v33;
              }
              while (v33);
            }
            if (*v78)
            {
              v39 = **(llvm::Type ***)&v97[0];
              v6 = v31;
              if ((*(_DWORD *)(**(_QWORD **)&v97[0] + 8) & 0xFE) == 0x12)
                v39 = (llvm::Type *)**((_QWORD **)v39 + 2);
              v88[0] = llvm::Type::getPrimitiveSizeInBits(v39);
              v88[1] = v40;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v41 = 0;
              }
              else
              {
                v42 = (llvm::Type *)v95[4];
                if ((*(_DWORD *)(**(_QWORD **)&v97[0] + 8) & 0xFE) == 0x12)
                  v42 = (llvm::Type *)llvm::FixedVectorType::get();
                if ((v32 & 0x1FFFFFFFE0) != 0)
                {
                  v43 = (v32 >> 5);
                  v44 = (llvm::Value **)v97;
                  do
                  {
                    v45 = *v44;
                    v89 = 257;
                    *v44++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v91, v45, v42, (const llvm::Twine *)v88);
                    --v43;
                  }
                  while (v43);
                }
                v41 = 1;
              }
            }
            else
            {
              v41 = 0;
              v6 = v31;
            }
            v46 = (char *)v96 + *(_QWORD *)(*(_QWORD *)v96 - 24);
            v85 = v92[2];
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v91);
            v87 = v93;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)(v46 + 40));
            if (v86)
              llvm::MetadataTracking::untrack();
            switch(*v79)
            {
              case 1:
                v47 = *v77;
                v48 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v47 = *(uint64_t (**)(_QWORD))(*v48 + v47);
                v49 = v47(v48);
                goto LABEL_85;
              case 2:
                v52 = *v77;
                v53 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v52 = *(uint64_t (**)(_QWORD))(*v53 + v52);
                v54 = *(_QWORD *)v26;
                goto LABEL_76;
              case 3:
                v52 = *v77;
                v53 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v52 = *(uint64_t (**)(_QWORD))(*v53 + v52);
                v54 = *(_QWORD *)&v97[0];
LABEL_76:
                v49 = ((uint64_t (*)(_QWORD *, uint64_t))v52)(v53, v54);
                goto LABEL_85;
              case 4:
                v55 = (unsigned int *)(*(_QWORD *)&v97[0] + 24);
                if (*(_DWORD *)(*(_QWORD *)&v97[0] + 32) >= 0x41u)
                  v55 = *(unsigned int **)v55;
                v56 = *v77;
                v57 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v56 = *(uint64_t (**)(_QWORD))(*v57 + v56);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v56)(v57, *(_QWORD *)v26, *v55);
                goto LABEL_85;
              case 5:
                v50 = *v77;
                v51 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v50 = *(uint64_t (**)(_QWORD))(*v51 + v50);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v50)(v51, *(_QWORD *)&v97[0], *((_QWORD *)&v97[0] + 1));
                goto LABEL_85;
              case 6:
                v60 = *v77;
                v61 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v60 = *(uint64_t (**)(_QWORD))(*v61 + v60);
                v63 = (void *)*((_QWORD *)&v97[0] + 1);
                v62 = *(_OWORD **)&v97[0];
                v64 = *(_QWORD *)&v97[1];
                goto LABEL_84;
              case 7:
                v60 = *v77;
                v61 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v60 = *(uint64_t (**)(_QWORD))(*v61 + v60);
                v62 = v97;
                v63 = &unk_1C3E4D9BB;
                v64 = 0;
LABEL_84:
                v49 = ((uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))v60)(v61, v62, v63, v64);
                goto LABEL_85;
              case 8:
                v58 = *v77;
                v59 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v58 = *(uint64_t (**)(_QWORD))(*v59 + v58);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))v58)(v59, *(_QWORD *)v26, v97, &unk_1C3E4D9BB, 0);
LABEL_85:
                FPTrunc = (llvm::Value *)v49;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            v66 = (char *)v96 + *(_QWORD *)(*(_QWORD *)v96 - 24);
            v82 = *(_OWORD *)(v66 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v66 + 40));
            v84 = *((_DWORD *)v66 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, (uint64_t)v91);
            if (v83)
              llvm::MetadataTracking::untrack();
            if (v41)
            {
              v67 = *(_QWORD *)v26;
              if (v22 && (*(_DWORD *)(v67 + 8) & 0xFE) == 0x12)
                v67 = **(_QWORD **)(v67 + 16);
              v89 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v91, FPTrunc, (llvm::Type *)v67, (const llvm::Twine *)v88);
              if (!v22)
                goto LABEL_96;
            }
            else if (!v22)
            {
              goto LABEL_96;
            }
            v89 = 257;
            v68 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v91, v81, FPTrunc, v68, (const llvm::Twine *)v88);
LABEL_96:
            v29 = (uint64_t)FPTrunc;
          }
        }
        if (*(_QWORD *)v26 != v95[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v26);
        v24 = v75;
        if (!v75)
          goto LABEL_100;
      }
    }
LABEL_107:
    ++v5;
  }
  while (v5 != 10);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v95);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v94);
  if (v91[0] != v92)
    free(v91[0]);
  return v70;
}

BOOL AGCLLVMAGPVertexShaderGen4::constructReply(AGCLLVMAGPVertexShaderGen4 *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t **v17;
  char *v18;
  char *v19;
  int Key;
  int v21;
  const char *v22;
  unint64_t v23;
  int String;
  char *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  flatbuffers::FlatBufferBuilder *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  const char *v55;
  int v57;
  _BOOL4 v58;
  _BYTE v59[16];
  uint64_t **v60;

  v2 = AGCLLVMAGPVertexShaderRegular::constructReply(this);
  if (v2)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v4 = v3 + 2568;
    v5 = *((unsigned __int8 *)this + 5033);
    v6 = *((unsigned __int8 *)this + 5034);
    v7 = *((unsigned __int8 *)this + 5092);
    v8 = *((unsigned __int8 *)this + 5093);
    v9 = *((unsigned __int8 *)this + 5094);
    v10 = *((unsigned __int8 *)this + 5095);
    v3[2638] = 1;
    v11 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v3 + 2568, 14, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, v9, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, v7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 6, v6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, v5, 0);
    v12 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v4, v11);
    std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v59, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 1664);
    v13 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 1688);
    v58 = v2;
    if (v13)
    {
      if (v13 >> 62)
LABEL_49:
        abort();
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v13);
      v16 = &v14[4 * v15];
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = v60;
    v57 = v12;
    if (v60)
    {
      v18 = v14;
      while (1)
      {
        v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)v19 + 824))
          goto LABEL_18;
        v21 = *((char *)v17 + 39);
        v22 = v21 >= 0 ? (const char *)(v17 + 2) : (const char *)v17[2];
        v23 = v21 >= 0 ? *((unsigned __int8 *)v17 + 39) : (unint64_t)v17[3];
        String = flatbuffers::FlatBufferBuilder::CreateString((AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), v22, v23);
        v25 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v26 = v25 + 2568;
        v25[2638] = 1;
        v27 = *((_DWORD *)v25 + 650) - *((_DWORD *)v25 + 654) + *((_DWORD *)v25 + 652);
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v25 + 2568, 4, String);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v26, 6, *((unsigned int *)v17 + 10), 0);
        v28 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v26, v27);
        v29 = v28;
        if (v18 < v16)
          break;
        v31 = (v18 - v14) >> 2;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          goto LABEL_49;
        if ((v16 - v14) >> 1 > v32)
          v32 = (v16 - v14) >> 1;
        if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v33);
        else
          v34 = 0;
        v35 = (char *)(v33 + 4 * v31);
        *(_DWORD *)v35 = v29;
        v30 = v35 + 4;
        while (v18 != v14)
        {
          v36 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        v16 = (char *)(v33 + 4 * v34);
        if (v14)
          operator delete(v14);
        v14 = v35;
LABEL_19:
        v17 = (uint64_t **)*v17;
        v18 = v30;
        if (!v17)
          goto LABEL_37;
      }
      *(_DWORD *)v18 = v28;
      v18 += 4;
LABEL_18:
      v30 = v18;
      goto LABEL_19;
    }
    v30 = v14;
LABEL_37:
    v37 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v38 = (flatbuffers::FlatBufferBuilder *)(v37 + 2568);
    v37[2638] = 1;
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v37 + 2568), v30 - v14, 4uLL);
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v37 + 2568), v30 - v14, 4uLL);
    v39 = v30 - v14;
    if (v39)
      v40 = v14;
    else
      v40 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>,std::allocator<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>>>(std::vector<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>> const&)::t;
    if (v39)
    {
      v41 = v39 >> 2;
      v42 = v40 - 4;
      do
      {
        v43 = v41 - 1;
        v44 = *(_DWORD *)&v42[4 * v41];
        flatbuffers::FlatBufferBuilder::Align(v38, 4uLL);
        flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v38, *((_DWORD *)v37 + 650) - *((_DWORD *)v37 + 654) + *((_DWORD *)v37 + 652) - v44 + 4);
        v41 = v43;
      }
      while (v43);
    }
    v37[2638] = 0;
    v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v38, (unint64_t)v39 >> 2);
    v46 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46[2638] = 1;
    v47 = *((_DWORD *)v46 + 650) - *((_DWORD *)v46 + 654) + *((_DWORD *)v46 + 652);
    if (v45)
    {
      v48 = v45;
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v46 + 2568), 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v46 + 2568, 4, *((_DWORD *)v46 + 650) - *((_DWORD *)v46 + 654) + *((_DWORD *)v46 + 652) - v48 + 4);
    }
    v49 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v46 + 2568), v47);
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v59);
    if (v14)
      operator delete(v14);
    v50 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v51 = v50 + 2568;
    v52 = v49;
    v50[2638] = 1;
    v53 = *((_DWORD *)v50 + 650) - *((_DWORD *)v50 + 654) + *((_DWORD *)v50 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v50 + 2568, v52);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v51, v57);
    v54 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v51, v53);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), v54, v55);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    return v58;
  }
  return v2;
}

uint64_t AGCLLVMUserFragmentShader::wrapperCallingConvention(AGCLLVMUserFragmentShader *this)
{
  if ((*(_BYTE *)(*((_QWORD *)this + 614) + 33) & 0xE) != 0
    && (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1788)
     || *((int *)this + 1082) > 0))
  {
    return 103;
  }
  else
  {
    return 101;
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputIntrinsic(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      result = AGCLLVMBuilder::getOrInsertFunction<>();
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, a4);
  v10 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v7 + 16), v7, 0, 0, (uint64_t)v9);
}

BOOL AGCLLVMGen3TargetLowerer::vertexInputNeedsBias(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AGCLLVMAGPFragmentShader::improveDMAPromotionOpportunity(AGCLLVMAGPFragmentShader *this)
{
  AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(this);
  return 1;
}

uint64_t AGCLLVMAGPFragmentShader::adjustDfDyForInversion(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(AGCLLVMUserVertexShader *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v16;
  void **v17;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[8];
  for (i = 641; i != 645; ++i)
  {
    v6 = *((_QWORD *)this + i);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        MEMORY[0x1CAA2D674](v7, 0x1000C8052888210);
      MEMORY[0x1CAA2D68C](v6, 0x1010C4082113244);
    }
  }
  for (j = 0; j != -3360; j -= 24)
  {
    v9 = *(_QWORD *)((char *)this + j + 9416);
    if (v9 != -8192 && v9 != -4096 && v9 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserVertexShader *)((char *)this + j + 9400));
  }
  v11 = *((_QWORD *)this + 638);
  if (v11)
  {
    v12 = *((_QWORD *)this + 639);
    v13 = (void *)*((_QWORD *)this + 638);
    if (v12 != v11)
    {
      do
      {
        v14 = *(_QWORD *)(v12 - 8);
        if (v14 != -8192 && v14 != -4096 && v14 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v12 - 24));
        v12 -= 32;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 638);
    }
    *((_QWORD *)this + 639) = v11;
    operator delete(v13);
  }
  v17 = (void **)((char *)this + 4888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v17);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 543);
  v16 = (void *)*((_QWORD *)this + 540);
  if (v16)
  {
    *((_QWORD *)this + 541) = v16;
    operator delete(v16);
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 1);
}

uint64_t AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v22;

  v8 = a1 + 4880;
  v9 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, a3, "air.vertex", a4, a5, 0);
  v10 = *a2;
  *v9 = *a2;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24)) = a2[7];
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) = a2[8];
  v11 = *(_BYTE *)(*(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 400) + 1762);
  v9[540] = 0;
  *(_OWORD *)(v9 + 541) = 0u;
  v9[543] = (uint64_t)(v9 + 545);
  v9[544] = 0x800000000;
  v9[609] = 0xFFFFFFFFLL;
  *(_BYTE *)v8 = v11;
  *((_DWORD *)v9 + 1253) = 0;
  *(_OWORD *)(v9 + 621) = 0u;
  *(_OWORD *)(v9 + 623) = 0u;
  *(_OWORD *)(v9 + 617) = 0u;
  *(_OWORD *)(v9 + 619) = 0u;
  *(_OWORD *)(v9 + 613) = 0u;
  *(_OWORD *)(v9 + 615) = 0u;
  *(_OWORD *)(v9 + 611) = 0u;
  *(_OWORD *)((char *)v9 + 4994) = 0u;
  *(_BYTE *)(v8 + 136) = 1;
  v9[628] = 0;
  *(_WORD *)(v8 + 153) = 0;
  *(_BYTE *)(v8 + 181) = 0;
  *((_DWORD *)v9 + 1264) = 0;
  *(_QWORD *)(a1 + 5064) = llvm::ConstantInt::get();
  *(_QWORD *)(a1 + 5072) = llvm::ConstantInt::get();
  *(_WORD *)(a1 + 5080) = 0;
  *(_BYTE *)(v8 + 202) = 0;
  *(_DWORD *)(a1 + 5084) = 1;
  *(_DWORD *)(a1 + 5092) = 0;
  *(_BYTE *)(a1 + 5096) = 0;
  *(_OWORD *)(a1 + 5180) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_DWORD *)(a1 + 5196) = -1;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_QWORD *)(a1 + 5216) = llvm::ConstantInt::get();
  *(_QWORD *)(a1 + 5224) = llvm::ConstantInt::get();
  v12 = 6064;
  do
  {
    v13 = (_QWORD *)(a1 + v12);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = 4;
    v14 = a1 + v12 + 24;
    v12 += 24;
  }
  while (v14 != a1 + 9424);
  v15 = a3 + 168;
  v16 = *(char *)(a3 + 191);
  if (v16 < 0)
  {
    if (*(_QWORD *)(a3 + 176) != 20)
    {
LABEL_17:
      v22 = 0;
      goto LABEL_18;
    }
    v15 = *(_QWORD *)v15;
  }
  else if (v16 != 20)
  {
    goto LABEL_17;
  }
  v17 = *(_QWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  v19 = *(_DWORD *)(v15 + 16);
  v22 = v17 == 0x535F786574726556 && v18 == 0x6F72505F65746174 && v19 == 1835102823;
LABEL_18:
  *(_BYTE *)(v8 + 176) = v22;
  return a1;
}

uint64_t AGCLLVMUserVertexShader::wrapperCallingConvention(AGCLLVMUserVertexShader *this)
{
  return 102;
}

uint64_t AGCLLVMUserVertexShader::markInvariantOutputs(AGCLLVMUserVertexShader *this)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *Value;
  BOOL v12;
  uint64_t v13;
  uint64_t Function;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::Value **v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  llvm::Instruction *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD *v37[3];
  BOOL v38;

  v2 = (char *)this + 5056;
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v3))
  {
    v12 = MGGetBoolAnswer()
       && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v10)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    v2[1] = v12;
  }
  if (*v2 || (v2[1] || v2[3]) && *((_BYTE *)this + 32))
  {
    SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), v4, v5, v6, v7, v8, v9, (char)__p);
    v13 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (*(_QWORD *)(v13 + 1392))
      strlen(*(const char **)(v13 + 1392));
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v15 = *((_BYTE *)this + 32) && (!v2[3] || v2[1]) && v2[2] != 0;
      v16 = *(_QWORD *)this;
      v17 = *(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
      __p = 0;
      v34 = 0;
      v37[0] = 0;
      v37[1] = 0;
      v35 = 0;
      v36 = v37;
      v37[2] = v17;
      v38 = v15;
      v18 = *(_QWORD *)(Function + 8);
      if (v18)
      {
        do
        {
          v19 = (llvm::Value **)(*(_QWORD *)(v18 + 24) - 32 * (*(_DWORD *)(*(_QWORD *)(v18 + 24) + 20) & 0x7FFFFFF));
          v20 = (_QWORD *)((char *)*v19 + 24);
          if (*((_DWORD *)*v19 + 8) >= 0x41u)
            v20 = (_QWORD *)*v20;
          if ((*(_DWORD *)v20 & 0xFFFFFFFC) == 0)
            MarkInvariants::addSeed((uint64_t *)&__p, v19[4], 0);
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18);
        v16 = *(_QWORD *)this;
      }
      if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + *(_QWORD *)(v16 - 24) + 32)) & 1) == 0)
      {
        v22 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
        v23 = v22 + 24;
        for (i = *(_QWORD *)(v22 + 32); i != v23; i = *(_QWORD *)(i + 8))
        {
          v25 = i - 56;
          if (!i)
            v25 = 0;
          v26 = v25 + 72;
          for (j = *(_QWORD *)(v25 + 80); j != v26; j = *(_QWORD *)(j + 8))
          {
            v28 = j - 24;
            if (!j)
              v28 = 0;
            v29 = *(_QWORD *)(v28 + 48);
            if (v29 != v28 + 40)
            {
LABEL_53:
              while (j != v26)
              {
                if (v29)
                  v30 = (llvm::Instruction *)(v29 - 24);
                else
                  v30 = 0;
                if (llvm::FPMathOperator::classof((uint64_t)v30))
                  llvm::Instruction::setFast(v30);
                v29 = *(_QWORD *)(v29 + 8);
                v31 = j - 24;
                if (!j)
                  v31 = 0;
                if (v29 == v31 + 40)
                {
                  while (1)
                  {
                    j = *(_QWORD *)(j + 8);
                    if (j == v26)
                      goto LABEL_54;
                    v32 = j - 24;
                    if (!j)
                      v32 = 0;
                    v29 = *(_QWORD *)(v32 + 48);
                    if (v29 != v32 + 40)
                      goto LABEL_53;
                  }
                }
              }
              break;
            }
          }
LABEL_54:
          ;
        }
      }
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v37[0]);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserVertexShader::wrapperFunctionType(AGCLLVMUserVertexShader *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 1256);
  if ((_DWORD)v1)
  {
    v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(*((unsigned int *)this + 1256));
    v4 = 0;
    do
    {
      *(_QWORD *)&v3[v4] = *((_QWORD *)v2 + 21);
      v4 += 8;
    }
    while (8 * v1 != v4);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = llvm::FunctionType::get();
  if (v5)
    operator delete(v5);
  return v6;
}

uint64_t AGCLLVMUserVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t Function;
  llvm::Function *v4;
  llvm::Function *v5;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;
  void *v12[2];
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v2 = AGCLLVMUserObject::setupShaderWrapper((AGCLLVMUserObject *)this);
  if ((_DWORD)v2)
  {
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v4 = (llvm::Function *)Function;
      v12[0] = v13;
      v12[1] = (void *)0x1000000000;
      v5 = this[21];
      if ((*((_BYTE *)v5 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(this[21]);
        v7 = this[21];
        v6 = *((_QWORD *)v5 + 11);
        if ((*((_WORD *)v7 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(v7);
        v5 = v7;
      }
      else
      {
        v6 = *((_QWORD *)v5 + 11);
      }
      v8 = *((_QWORD *)v5 + 11) + 40 * *((_QWORD *)v5 + 12);
      while (v6 != v8)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v12, v6);
        v6 += 40;
      }
      v9 = *((_QWORD *)v4 + 1);
      while (v9)
      {
        v10 = *(llvm::Instruction **)(v9 + 24);
        v9 = *(_QWORD *)(v9 + 8);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v10);
      }
      llvm::Function::eraseFromParent(v4);
      if (v12[0] != v13)
        free(v12[0]);
    }
  }
  return v2;
}

uint64_t AGCLLVMUserVertexShader::setupShaderInputs(AGCLLVMUserVertexShader *this)
{
  llvm::IRBuilderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t AlignedLoad;
  uint64_t *v19;
  llvm::GlobalVariable *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Value *v26;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  const char **v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  const char **v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  const char *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v2 = (AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v3 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  if (v5)
    v6 = (llvm::Instruction *)(v5 - 24);
  else
    v6 = 0;
  llvm::IRBuilderBase::SetInsertPoint(v2, v6);
  v7 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v7 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v9 = *((_QWORD *)this + 22);
    v8 = *(_QWORD *)(v7 + 88);
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v7 = v9;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 88);
  }
  v10 = *(_QWORD *)(v7 + 88) + 40 * *(_QWORD *)(v7 + 96);
  if (v8 != v10)
  {
    v55 = *(_QWORD *)(v7 + 88) + 40 * *(_QWORD *)(v7 + 96);
    do
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v8 + 32));
      if (*(_QWORD *)(v8 + 8))
        v12 = v11 == 0;
      else
        v12 = 1;
      if (!v12
        && isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.vertex_transform_feedback"))
      {
        v62 = 0;
        v61 = 0;
        LODWORD(v56) = 3;
        parseMDInt(0, v11, (unsigned int *)&v56, (_DWORD *)&v62 + 1);
        LODWORD(v56) = 5;
        parseMDInt(0, v11, (unsigned int *)&v56, &v62);
        LODWORD(v56) = 7;
        parseMDInt(0, v11, (unsigned int *)&v56, &v61);
        v13 = (unsigned int *)operator new();
        *v13 = v62 >> 2;
        v14 = (void *)operator new[]();
        *((_QWORD *)v13 + 1) = v14;
        memset_pattern4(v14, &RASTER_ORDER_GROUP_NONE, 4 * *v13);
        v15 = HIDWORD(v62);
        v16 = (char *)this + 8 * HIDWORD(v62);
        *((_QWORD *)v16 + 641) = v13;
        v17 = *((_DWORD *)this + 1298);
        if (v17 <= (int)v15 + 1)
          v17 = v15 + 1;
        *((_DWORD *)this + 1298) = v17;
        AlignedLoad = *((_QWORD *)v16 + 645);
        if (!AlignedLoad)
        {
          v19 = (uint64_t *)(v16 + 5160);
          v20 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          v56 = "agc.tf_buffer";
          v54 = v54 & 0xFFFFFFFF00000000 | v15;
          v58 = v54;
          v60 = 2051;
          v21 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v21 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v23 = *((_QWORD *)v22 + 47);
          v24 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v22 + 32), v20);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v23, v24);
          v25 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8);
          v60 = 257;
          v27 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v20, v26);
          AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v25 + 4, v27, (uint64_t)v20, 0, (uint64_t)&v56);
          *v19 = AlignedLoad;
        }
        llvm::Value::replaceAllUsesWith();
        v28 = *(_QWORD *)(AlignedLoad + 8);
        if (v28)
        {
          while (1)
          {
            v29 = *(_QWORD *)(v28 + 24);
            v57 = 4;
            v58 = 0;
            v59 = 0;
            v30 = v29;
            do
            {
              v31 = *(unsigned __int8 *)(v30 + 16);
              if (v31 == 62)
              {
                v32 = *(_DWORD *)(v30 + 20);
                if ((v32 & 0x40000000) != 0)
                  v33 = *(_QWORD **)(v30 - 8);
                else
                  v33 = (_QWORD *)(v30 - 32 * (v32 & 0x7FFFFFF));
                if (*v33 == v29)
                {
                  v34 = v33[4];
                  v35 = (_QWORD *)(v34 + 24);
                  if (*(_DWORD *)(v34 + 32) >= 0x41u)
                    v35 = (_QWORD *)*v35;
                  LODWORD(v56) = *v35;
                }
              }
              else if (v31 == 61)
              {
                break;
              }
              v30 = *(_QWORD *)(*(_QWORD *)(v30 + 8) + 24);
            }
            while (v30);
            HIDWORD(v56) = HIDWORD(v62);
            llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v57, v30);
            v36 = (const char **)*((_QWORD *)this + 639);
            v37 = *((_QWORD *)this + 640);
            if ((unint64_t)v36 < v37)
            {
              *v36 = v56;
              v38 = v36 + 4;
              llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v36 + 1), 2u, &v57);
              goto LABEL_61;
            }
            v39 = *((_QWORD *)this + 638);
            v40 = ((uint64_t)v36 - v39) >> 5;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 59)
              abort();
            v42 = v37 - v39;
            if (v42 >> 4 > v41)
              v41 = v42 >> 4;
            v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v41;
            if (v43)
            {
              if (v43 >> 59)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v44 = (char *)operator new(32 * v43);
            }
            else
            {
              v44 = 0;
            }
            v45 = (const char **)&v44[32 * v40];
            v46 = &v44[32 * v43];
            *v45 = v56;
            v38 = v45 + 4;
            llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v45 + 1), 2u, &v57);
            v47 = (_QWORD *)*((_QWORD *)this + 639);
            v48 = (_QWORD *)*((_QWORD *)this + 638);
            if (v47 != v48)
              break;
            *((_QWORD *)this + 638) = v45;
            *((_QWORD *)this + 639) = v38;
            *((_QWORD *)this + 640) = v46;
            if (v47)
              goto LABEL_60;
LABEL_61:
            *((_QWORD *)this + 639) = v38;
            if (v59 != -8192 && v59 != -4096 && v59)
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v57);
            v28 = *(_QWORD *)(v28 + 8);
            if (!v28)
              goto LABEL_69;
          }
          do
          {
            v49 = (const char *)*(v47 - 4);
            v47 -= 4;
            *(v45 - 4) = v49;
            v45 -= 4;
            llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v45 + 1), 2u, v47 + 1);
          }
          while (v47 != v48);
          v50 = (_QWORD *)*((_QWORD *)this + 638);
          v47 = (_QWORD *)*((_QWORD *)this + 639);
          *((_QWORD *)this + 638) = v45;
          *((_QWORD *)this + 639) = v38;
          *((_QWORD *)this + 640) = v46;
          if (v47 != v50)
          {
            do
            {
              v51 = *(v47 - 1);
              if (v51 != -8192 && v51 != -4096 && v51 != 0)
                llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v47 - 3));
              v47 -= 4;
            }
            while (v47 != v50);
            v47 = v50;
          }
          if (!v47)
            goto LABEL_61;
LABEL_60:
          operator delete(v47);
          goto LABEL_61;
        }
LABEL_69:
        v10 = v55;
      }
      v8 += 40;
    }
    while (v8 != v10);
  }
  return 1;
}

uint64_t AGCLLVMUserVertexShader::addWrapperPostfix(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  llvm::LLVMContext *v3;
  char *v4;
  uint64_t v5;
  _BYTE v6[32];
  __int16 v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 24) + this + 400);
  if (*(_BYTE *)(v1 + 1813))
  {
    if (*(_BYTE *)(v1 + 1785))
    {
      v2 = (_QWORD *)this;
      if (!*(_BYTE *)(this + 3712))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 376))(this);
        if ((this & 1) == 0)
        {
          llvm::Type::getVoidTy(*(llvm::Type **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 392), v3);
          llvm::FunctionType::get();
          llvm::Module::getOrInsertFunction();
          v4 = (char *)v2 + *(_QWORD *)(*v2 - 24);
          v7 = 257;
          return (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)(v4 + 40), **(_QWORD **)(*(_QWORD *)v5 + 16), v5, 0, 0, (uint64_t)v6);
        }
      }
    }
  }
  return this;
}

uint64_t AGCLLVMUserVertexShader::createVIRead(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 50);
  v9 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v11 = *((_DWORD *)v5 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v6 + 456))(v6, &v9, a2, a3);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMAGPVertexShader::improveDMAPromotionOpportunity(AGCLLVMAGPVertexShader *this)
{
  AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(this);
  return 1;
}

_QWORD *AGCLLVMAGPVertexShader::createAGPVertexShaderObject(uint64_t a1, llvm::Module *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *result;
  uint64_t v13;
  const char *v14;
  __int16 v15;

  v14 = "air.vertex";
  v15 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v14);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (*(_DWORD *)(Operand + 8) == 4
    && isStringMDNode(*(llvm::MDString **)(*(_QWORD *)(Operand - 8) - 8 * *(unsigned int *)(*(_QWORD *)(Operand - 8) + 8)), "air.patch"))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Module *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32), a1, this, a3, a4, a5);
    if (!result)
      return result;
    return (_QWORD *)((char *)result + *(_QWORD *)(*result - 24));
  }
  v13 = **(_QWORD **)(a1 + 32);
  if ((*(_BYTE *)(a3 + 18) & 0x20) == 0)
    return (_QWORD *)(*(uint64_t (**)(void))(v13 + 72))();
  result = (_QWORD *)(*(uint64_t (**)(void))(v13 + 80))();
  if (result)
    return (_QWORD *)((char *)result + *(_QWORD *)(*result - 24));
  return result;
}

uint64_t AGCLLVMAGPVertexShader::constructFlatVertexInputs(AGCLLVMAGPVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShader::getNextUnlinkedVarying(uint64_t a1, uint64_t a2)
{
  int v2;
  size_t **v4;
  size_t *v5;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  int v16;
  int v17;
  void **v18;
  size_t *v19;
  __int128 __dst;
  uint64_t v21;

  if (!*(_BYTE *)(a1 + 9456) || !*(_DWORD *)(a1 + 9436))
    return 0;
  v4 = *(size_t ***)(a1 + 9424);
  if (*(_DWORD *)(a1 + 9432))
  {
    while (1)
    {
      v5 = *v4;
      if (*v4 && v5 + 1 != 0)
        break;
      ++v4;
    }
  }
  else
  {
    v5 = *v4;
  }
  v8 = *((_DWORD *)v5 + 2);
  v9 = BYTE2(v8);
  v10 = HIBYTE(v8) & 0x7F;
  v11 = v8 & 0xF;
  v12 = BYTE1(v8);
  v13 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v13;
  v14 = v9 == 1;
  switch(v11)
  {
    case 0:
      if (v9 == 1)
        v2 = 5;
      else
        v2 = 1;
      break;
    case 1:
      v15 = v9 == 1;
      v16 = 2;
      v17 = 6;
      goto LABEL_22;
    case 2:
      v15 = v9 == 1;
      v16 = 3;
      v17 = 7;
      goto LABEL_22;
    case 3:
      if (v9 == 1)
        v2 = 19;
      else
        v2 = 18;
      break;
    case 5:
      v15 = v9 == 1;
      v16 = 4;
      v17 = 8;
LABEL_22:
      if (v15)
        v2 = v17;
      else
        v2 = v16;
      break;
    default:
      break;
  }
  *(_DWORD *)a2 = v10;
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  v18 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = v14;
  *(_WORD *)(a2 + 57) = 0;
  *(_DWORD *)(a2 + 60) = v2;
  std::string::basic_string[abi:nn180100](&__dst, *v4 + 2, **v4);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = __dst;
  *(_QWORD *)(a2 + 40) = v21;
  v19 = *v4;
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer((llvm *)v19, (void *)(*v19 + 17));
  return 1;
}

uint64_t AGCLLVMAGPVertexShader::constructMTLVertexInfo(AGCLLVMAGPVertexShader *this)
{
  AGCLLVMAGPVertexShader *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  BOOL v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  int v67;
  char *v68;
  flatbuffers::FlatBufferBuilder *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  int v76;
  char *v77;
  flatbuffers::FlatBufferBuilder *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  int v85;
  char *v86;
  int v87;
  uint64_t v88;
  int v90;
  char *v91;
  char *v92;
  int *v93;
  char *v94;
  char *v95;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (char *)this + v2;
  if (*(_QWORD *)((char *)this + v2 + 856))
  {
    v4 = v3 + 856;
    v5 = *((_QWORD *)v3 + 108);
    v6 = v3 + 1416;
    if (v5)
      v6 = v4;
  }
  else
  {
    v6 = v3 + 1416;
  }
  v8 = *(unsigned int **)v6;
  v7 = *((_QWORD *)v6 + 1);
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = (int *)((char *)v8 + *v8);
    v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 5u)
    {
      v12 = v11[2];
      if (v11[2])
      {
        v13 = *(unsigned int *)((char *)v10 + v12);
        if (*(int *)((char *)v10 + v12 + v13))
        {
          v14 = 0;
          v15 = 0;
          v94 = 0;
          v95 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v93 = v10;
          while (1)
          {
            v19 = (uint64_t)&v10[v18] + v12 + v13;
            v20 = (int *)(v19 + 4 + *(unsigned int *)(v19 + 4));
            v21 = (unsigned __int16 *)((char *)v20 - *v20);
            v22 = *v21;
            if (v22 < 0xB)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              v23 = v21[5];
              if (v21[5])
                LODWORD(v23) = *(int *)((char *)v20 + v23);
            }
            v24 = *((_DWORD *)v1 + 2368);
            v25 = v23 - v24;
            if (v23 >= v24)
              break;
            v26 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
            v26[2542] = 1;
            v91 = v16;
            v92 = v14;
            if (v22 >= 5 && (v27 = v21[2]) != 0)
              v28 = *(int *)((char *)v20 + v27);
            else
              v28 = 0;
            v32 = v23;
            v33 = v26 + 2472;
            v34 = *((_DWORD *)v26 + 626);
            v35 = *((_DWORD *)v26 + 630);
            v90 = *((_DWORD *)v26 + 628);
            v36 = *((_QWORD *)this + 1183);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26 + 2472, 4, v28);
            v37 = v36 + 32 * v32;
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 6, *(_DWORD *)(v37 + 4));
            flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v33, 8, *(unsigned __int8 *)(v37 + 8), 0);
            v38 = 0;
            v39 = (unsigned __int16 *)((char *)v20 - *v20);
            if (*v39 >= 7u)
            {
              v40 = v39[3];
              if (v40)
                v38 = *(int *)((char *)v20 + v40);
              else
                v38 = 0;
            }
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 10, v38);
            v50 = (unsigned __int16 *)((char *)v20 - *v20);
            if (*v50 < 9u)
            {
              v53 = 0;
              v52 = v90;
            }
            else
            {
              v51 = v50[4];
              v52 = v90;
              if (v51)
                v53 = *(int *)((char *)v20 + v51);
              else
                v53 = 0;
            }
            v54 = v34 - v35 + v52;
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 12, v53);
            v55 = v36 + 32 * v32;
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 14, *(_DWORD *)(v55 + 20));
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 16, *(_DWORD *)(v55 + 24));
            flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v33, 18, *(unsigned __int8 *)(v55 + 28), 0);
            v56 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v33, v54);
            v57 = v56;
            if (v15 >= v95)
            {
              v16 = v91;
              v58 = (v15 - v92) >> 2;
              v59 = v58 + 1;
              v1 = this;
              if ((unint64_t)(v58 + 1) >> 62)
LABEL_97:
                abort();
              if ((v95 - v92) >> 1 > v59)
                v59 = (v95 - v92) >> 1;
              if ((unint64_t)(v95 - v92) >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              if (v60)
              {
                if (v60 >> 62)
LABEL_98:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v61 = (char *)operator new(4 * v60);
              }
              else
              {
                v61 = 0;
              }
              v65 = &v61[4 * v58];
              *(_DWORD *)v65 = v57;
              v66 = v65 + 4;
              while (v15 != v92)
              {
                v67 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v65 - 1) = v67;
                v65 -= 4;
              }
              v95 = &v61[4 * v60];
              if (v92)
                operator delete(v92);
              v14 = v65;
              v15 = v66;
              goto LABEL_72;
            }
            *(_DWORD *)v15 = v56;
            v15 += 4;
            v1 = this;
            v14 = v92;
            v10 = v93;
            v16 = v91;
LABEL_73:
            ++v18;
            v12 = *(unsigned __int16 *)((char *)v10 - *v10 + 4);
            v13 = *(unsigned int *)((char *)v10 + v12);
            if (v18 >= *(unsigned int *)((char *)v10 + v12 + v13))
            {
              v2 = *(_QWORD *)(*(_QWORD *)v1 - 24);
              goto LABEL_76;
            }
          }
          v29 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
          v29[2542] = 1;
          if (v22 >= 5 && (v30 = v21[2]) != 0)
            v31 = *(int *)((char *)v20 + v30);
          else
            v31 = 0;
          v41 = v29 + 2472;
          v42 = *((_DWORD *)v29 + 626) - *((_DWORD *)v29 + 630) + *((_DWORD *)v29 + 628);
          v43 = *((_QWORD *)v1 + 1249);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29 + 2472, 4, v31);
          flatbuffers::FlatBufferBuilder::AddElement<signed char>(v41, 6, *(char *)(v43 + 8 * v25 + 4));
          v44 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v41, v42);
          v45 = v44;
          if (v17 >= v94)
          {
            v46 = (v17 - v16) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              goto LABEL_97;
            if ((v94 - v16) >> 1 > v47)
              v47 = (v94 - v16) >> 1;
            if ((unint64_t)(v94 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            if (v48)
            {
              if (v48 >> 62)
                goto LABEL_98;
              v49 = (char *)operator new(4 * v48);
            }
            else
            {
              v49 = 0;
            }
            v62 = &v49[4 * v46];
            *(_DWORD *)v62 = v45;
            v63 = v62 + 4;
            while (v17 != v16)
            {
              v64 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v62 - 1) = v64;
              v62 -= 4;
            }
            v94 = &v49[4 * v48];
            if (v16)
              operator delete(v16);
            v16 = v62;
            v17 = v63;
          }
          else
          {
            *(_DWORD *)v17 = v44;
            v17 += 4;
          }
LABEL_72:
          v10 = v93;
          goto LABEL_73;
        }
      }
    }
  }
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
LABEL_76:
  v68 = (char *)v1 + v2;
  v69 = (AGCLLVMAGPVertexShader *)((char *)v1 + v2 + 2472);
  *((_BYTE *)v1 + v2 + 2542) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign(v69, v15 - v14, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(v69, v15 - v14, 4uLL);
  v70 = v15 - v14;
  if (v15 == v14)
    v71 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>> const&)::t;
  else
    v71 = v14;
  if (v15 != v14)
  {
    v72 = v70 >> 2;
    v73 = v71 - 4;
    do
    {
      v74 = v72 - 1;
      v75 = *(_DWORD *)&v73[4 * v72];
      flatbuffers::FlatBufferBuilder::Align(v69, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v69, *((_DWORD *)v68 + 626) - *((_DWORD *)v68 + 630) + *((_DWORD *)v68 + 628) - v75 + 4);
      v72 = v74;
    }
    while (v74);
  }
  v68[2542] = 0;
  v76 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v69, (unint64_t)v70 >> 2);
  v77 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v78 = (flatbuffers::FlatBufferBuilder *)(v77 + 2472);
  v77[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v77 + 2472), v17 - v16, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v77 + 2472), v17 - v16, 4uLL);
  v79 = v17 - v16;
  if (v17 == v16)
    v80 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>> const&)::t;
  else
    v80 = v16;
  if (v17 != v16)
  {
    v81 = v79 >> 2;
    v82 = v80 - 4;
    do
    {
      v83 = v81 - 1;
      v84 = *(_DWORD *)&v82[4 * v81];
      flatbuffers::FlatBufferBuilder::Align(v78, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v78, *((_DWORD *)v77 + 626) - *((_DWORD *)v77 + 630) + *((_DWORD *)v77 + 628) - v84 + 4);
      v81 = v83;
    }
    while (v83);
  }
  v77[2542] = 0;
  v85 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v78, (unint64_t)v79 >> 2);
  v86 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v86[2542] = 1;
  v87 = *((_DWORD *)v86 + 626) - *((_DWORD *)v86 + 630) + *((_DWORD *)v86 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v86 + 2472, 4, *((_DWORD *)this + 1256));
  if (v76)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v86 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v86 + 2472, 6, *((_DWORD *)v86 + 626) - *((_DWORD *)v86 + 630) + *((_DWORD *)v86 + 628) - v76 + 4);
  }
  if (v85)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v86 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v86 + 2472, 8, *((_DWORD *)v86 + 626) - *((_DWORD *)v86 + 630) + *((_DWORD *)v86 + 628) - v85 + 4);
  }
  v88 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v86 + 2472), v87);
  if (v16)
    operator delete(v16);
  if (v14)
    operator delete(v14);
  return v88;
}

uint64_t AGCLLVMAGPVertexShader::buildBackendRequest(AGCLLVMAGPVertexShader *this, llvm::AGX::CompileRequest *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;

  if (*((_DWORD *)this + 2368))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      llvm::AGX::CompileRequest::addDMAListEntry(a2);
      ++v5;
      v4 += 32;
    }
    while (v5 < *((unsigned int *)this + 2368));
  }
  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 464))(v6);
  if (!(_DWORD)result && *((_DWORD *)this + 2500))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = llvm::AGX::CompileRequest::addDMAListEntry(a2);
      ++v9;
      v8 += 8;
    }
    while (v9 < *((unsigned int *)this + 2500));
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShader::setupShaderOutputs(AGCLLVMAGPVertexShader *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *Mul;
  llvm::Value *Add;
  int v18;
  uint64_t v19;
  size_t **i;
  uint64_t v22;
  size_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *p_p;
  size_t *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v36;
  char *v37;
  const std::string::value_type *v38;
  std::string *v39;
  std::string::size_type size;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v46;
  std::string __dst;
  __int16 v48;
  std::string __p;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 5080;
  v9 = AGCLLVMUserVertexShader::setupShaderOutputs(this);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 22) + 24) + 16) == *((_QWORD *)v10 + 22)
    && *(_BYTE *)(*((_QWORD *)v10 + 50) + 1729))
  {
    __p.__r_.__value_.__r.__words[0] = llvm::ConstantFP::get();
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0];
    v50 = llvm::ConstantFP::get();
    v11 = (unsigned __int8 *)llvm::ConstantVector::get();
    v12 = (AGCLLVMAGPVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v13 = (llvm::Value *)*((_QWORD *)this + 654);
    v14 = (llvm::Value *)*((_QWORD *)this + 656);
    v15 = (llvm::Value *)*((_QWORD *)this + 655);
    v51 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v12, v14, v15, (const llvm::Twine *)&__p);
    v48 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v13, Mul, (const llvm::Twine *)&__dst);
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t)this, v11, Add, 0, v2[12], 4u);
  }
  v18 = *((_DWORD *)this + 2359);
  if (v18)
  {
    printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching vertex shader output type(s) or not written by vertex shader: ", v3, v4, v5, v6, v7, v8, v46);
    v19 = *((unsigned int *)this + 2358);
    if ((_DWORD)v19)
    {
      for (i = (size_t **)*((_QWORD *)this + 1178); !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      i = (size_t **)*((_QWORD *)this + 1178);
    }
    v22 = *((_QWORD *)this + 1178) + 8 * v19;
    if (i != (size_t **)v22)
    {
      v23 = *i;
      do
      {
        std::string::basic_string[abi:nn180100](&__p, v23 + 2, *v23);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        printMessage((char **)&AGCPrinter, "\t%s", v24, v25, v26, v27, v28, v29, (char)p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        do
        {
          v31 = i[1];
          ++i;
          v23 = v31;
          if (v31)
            v32 = v23 + 1 == 0;
          else
            v32 = 1;
        }
        while (v32);
      }
      while (i != (size_t **)v22);
    }
    v33 = *((unsigned int *)this + 2358);
    if ((_DWORD)v33)
    {
      for (j = *((_QWORD *)this + 1178); !*(_QWORD *)j || *(_QWORD *)j == -8; j += 8)
        ;
    }
    else
    {
      j = *((_QWORD *)this + 1178);
    }
    v36 = *((_QWORD *)this + 1178) + 8 * v33;
    if (j != v36)
    {
      v37 = (char *)this + 8;
      v38 = (const std::string::value_type *)&unk_1C3E4D9BB;
      do
      {
        std::string::append((std::string *)&v37[*(_QWORD *)(*(_QWORD *)this - 24)], v38);
        std::string::basic_string[abi:nn180100](&__dst, (void *)(*(_QWORD *)j + 16), **(_QWORD **)j);
        attribute_name(&__p, &__dst);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &__p;
        else
          v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)&v37[*(_QWORD *)(*(_QWORD *)this - 24)], (const std::string::value_type *)v39, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        do
        {
          v42 = *(_QWORD *)(j + 8);
          j += 8;
          v41 = v42;
          if (v42)
            v43 = v41 == -8;
          else
            v43 = 1;
        }
        while (v43);
        v38 = ",";
      }
      while (j != v36);
    }
  }
  if (*v2)
  {
    llvm::Module::getOrInsertNamedMetadata();
    if (*((_DWORD *)this + 1272) > 1u)
      v44 = 0;
    else
      v44 = llvm::MDString::get();
    __p.__r_.__value_.__r.__words[0] = v44;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  if (v18)
    return 0;
  else
    return v9;
}

BOOL AGCLLVMAGPVertexShader::validateReply(AGCLLVMAGPVertexShader *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  int *v5;
  unsigned int *v6;
  unsigned int *v7;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (*((_QWORD *)v1 + 87))
  {
    v2 = v1 + 696;
    v3 = *((_QWORD *)v1 + 88);
    v4 = v1 + 1256;
    if (v3)
      v4 = v2;
  }
  else
  {
    v4 = v1 + 1256;
  }
  v5 = (int *)(*(_QWORD *)v4 + **(unsigned int **)v4);
  v6 = (unsigned int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 4));
  v7 = (unsigned int *)((char *)v6
                      + *v6
                      + *(unsigned __int16 *)((char *)v6 + *v6 - *(unsigned int *)((char *)v6 + *v6) + 8));
  return *(unsigned int *)((char *)v7 + *v7) < 0x21;
}

uint64_t AGCLLVMAGPVertexShader::initCompile(AGCLLVMAGPVertexShader *this)
{
  uint64_t v2;
  llvm::Type *v3;
  uint64_t v4;
  unsigned int v5;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AGCLLVMUserObject::initCompile(this);
  if (*((_BYTE *)this + 5082))
  {
    v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
    v10 = v9;
    v2 = llvm::StructType::get();
    v3 = (llvm::Type *)llvm::PointerType::get();
    *((_QWORD *)this + 651) = v2;
    v7 = "agc.view_mappings_pointer_global";
    v8 = 259;
    v4 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v4);
    *((_QWORD *)this + 650) = AGCLLVMUserObject::createGlobalBufferBinding(this, v3, (const llvm::Twine *)&v7, v5, *((_DWORD *)this + 1271), 5, 0);
  }
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1752)
    || !AGCLLVMUserObject::detectTextureWrites(this))
  {
    return 1;
  }
  std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), "Texture writes not supported in vertex shaders");
  return 0;
}

llvm::Value *AGCLLVMTargetLowerer::CreateFabs(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *((_DWORD *)a2 + 6);
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(a1, (uint64_t)&v8, a3, "llvm.fabs");
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *AGCLLVMTargetBuilder::CreateFabs(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)this + 46);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = AGCLLVMTargetLowerer::CreateFabs(v4, &v7, (uint64_t *)a2);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltins::buildDfdy(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  llvm::Value *v21;

  v21 = a2;
  v4 = *(_QWORD *)(**((_QWORD **)this + 94) - 24) + *((_QWORD *)this + 94);
  v5 = v4 + 40;
  v6 = *(_DWORD *)(v4 + 136);
  v7 = (char *)this + 8;
  v18 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v20 = *((_DWORD *)this + 26);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v5);
  if (v19)
    llvm::MetadataTracking::untrack();
  *(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 94) - 24) + *((_QWORD *)this + 94) + 136) = v6;
  v8 = *(_QWORD *)a2;
  v10 = 1544;
  if (v8 == *((_QWORD *)this + 19))
    v10 = 1560;
  v9 = *((_QWORD *)this + 46);
  v11 = *(_QWORD *)(v9 + v10);
  if (v11)
    v12 = strlen(*(const char **)(v9 + v10));
  else
    v12 = 0;
  v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v11, v12, v8, v8);
  v17 = 257;
  v14 = llvm::IRBuilderBase::CreateCall((uint64_t)v7, *(_QWORD *)(v13 + 24), v13, (uint64_t)&v21, 1, (uint64_t)v16);
  return (*(uint64_t (**)(_QWORD, llvm::Value *))(**((_QWORD **)this + 94) + 32))(*((_QWORD *)this + 94), v14);
}

llvm::Value *AGCLLVMAirBuiltins::buildDfdx(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  llvm::Value *result;
  _BYTE v15[32];
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  llvm::Value *v20;

  v20 = a2;
  v4 = *(_QWORD *)(**((_QWORD **)this + 94) - 24) + *((_QWORD *)this + 94);
  v5 = v4 + 40;
  v6 = *(_DWORD *)(v4 + 136);
  v7 = (char *)this + 8;
  v17 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v19 = *((_DWORD *)this + 26);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v17, v5);
  if (v18)
    llvm::MetadataTracking::untrack();
  v8 = *(_QWORD *)a2;
  v10 = 1536;
  if (v8 == *((_QWORD *)this + 19))
    v10 = 1552;
  v9 = *((_QWORD *)this + 46);
  v11 = *(_QWORD *)(v9 + v10);
  if (v11)
    v12 = strlen(*(const char **)(v9 + v10));
  else
    v12 = 0;
  v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v11, v12, v8, v8);
  v16 = 257;
  result = llvm::IRBuilderBase::CreateCall((uint64_t)v7, *(_QWORD *)(v13 + 24), v13, (uint64_t)&v20, 1, (uint64_t)v15);
  *(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 94) - 24) + *((_QWORD *)this + 94) + 136) = v6;
  return result;
}

llvm::Value *AGCLLVMAirBuiltins::buildAny(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildAnyOrAll(this, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildNanFSaturate(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v5 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, BOOL))(*(_QWORD *)v4 + 40))(v4, &v8, a2, v5 == *((_QWORD *)this + 21));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildNanFMax(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 46);
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v7 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *, BOOL))(*(_QWORD *)v6 + 56))(v6, &v10, a2, a3, v7 == *((_QWORD *)this + 21));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildWidth(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v4;
  llvm::Value *v5;
  llvm::Value *Fabs;
  llvm::Value *v7;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = (char *)this + 8;
  v5 = AGCLLVMAirBuiltins::buildDfdx(this, a2);
  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v5);
  v7 = (llvm::Value *)AGCLLVMAirBuiltins::buildDfdy(this, a2);
  v8 = AGCLLVMTargetBuilder::CreateFabs(this, v7);
  v11 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)Fabs, (uint64_t)v8, (uint64_t)v10);
}

uint64_t AGCLLVMUserObject::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::setupInterpolationFunctions(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::getBindlessConstantSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  void **v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  llvm::GlobalVariable *GlobalVariable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Cast;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v49[2];
  unsigned __int8 v50;
  std::string v51;
  std::string v52;
  std::string __p;
  __int16 v54;
  void *v55[2];
  uint64_t v56;
  _QWORD v57[2];
  _QWORD v58[2];
  __int16 v59;
  _BYTE v60[48];
  void *v61;
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  __int16 v66;
  _BYTE v67[48];
  void *v68;
  char v69;
  uint64_t v70;
  __int128 v71;

  *(_QWORD *)&v71 = a2;
  *((_QWORD *)&v71 + 1) = a3;
  v6 = *(_QWORD **)(a1 + 896);
  v7 = *(_OWORD **)(a1 + 904);
  v8 = v6;
  if (v6 != (_QWORD *)v7)
  {
    while (*v8 != a2 || v8[1] != a3)
    {
      v8 += 2;
      if (v8 == (_QWORD *)v7)
        goto LABEL_7;
    }
  }
  if (v8 == (_QWORD *)v7)
  {
LABEL_7:
    v9 = ((char *)v7 - (char *)v6) >> 4;
    v10 = *(_QWORD *)(a1 + 912);
    if ((unint64_t)v7 >= v10)
    {
      v12 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v13 = v10 - (_QWORD)v6;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v14);
      else
        v15 = 0;
      v16 = (_OWORD *)(v14 + 16 * v9);
      v17 = v14 + 16 * v15;
      *v16 = v71;
      v11 = v16 + 1;
      v18 = *(char **)(a1 + 904);
      v19 = *(char **)(a1 + 896);
      if (v18 != v19)
      {
        do
        {
          *--v16 = *((_OWORD *)v18 - 1);
          v18 -= 16;
        }
        while (v18 != v19);
        v18 = *(char **)(a1 + 896);
      }
      *(_QWORD *)(a1 + 896) = v16;
      *(_QWORD *)(a1 + 904) = v11;
      *(_QWORD *)(a1 + 912) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v7 = v71;
      v11 = v7 + 1;
    }
    *(_QWORD *)(a1 + 904) = v11;
  }
  if (*(_BYTE *)(a1 + 3696))
  {
    v20 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
    v21 = llvm::ConstantInt::get();
    v66 = 257;
    return llvm::IRBuilderBase::CreateCast(v20, 48, v21, a4, (uint64_t)v64);
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v64);
    *(_QWORD *)&v67[*(_QWORD *)(v65[0] - 24)] = 16;
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v65, 48);
    v57[0] = &v71;
    v58[0] = 0;
    v59 = 270;
    llvm::Twine::str((llvm::Twine *)v57);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v57);
    *(_QWORD *)&v60[*(_QWORD *)(v58[0] - 24)] = 16;
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v58, 48);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71 + 8;
    __p.__r_.__value_.__r.__words[2] = 0;
    v54 = 270;
    llvm::Twine::str((llvm::Twine *)&__p);
    if (v56 >= 0)
      v25 = v55;
    else
      v25 = (void **)v55[0];
    if (v56 >= 0)
      v26 = HIBYTE(v56);
    else
      v26 = (uint64_t)v55[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)v25, v26);
    if (SHIBYTE(v56) < 0)
      operator delete(v55[0]);
    std::stringbuf::str();
    v27 = std::string::insert(&v51, 0, "agc.const_sampler_heap_index_");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v52, "_");
    v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str();
    if ((v50 & 0x80u) == 0)
      v31 = v49;
    else
      v31 = (void **)v49[0];
    if ((v50 & 0x80u) == 0)
      v32 = v50;
    else
      v32 = (std::string::size_type)v49[1];
    v33 = std::string::append(&__p, (const std::string::value_type *)v31, v32);
    v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)v55 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v56 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if ((char)v50 < 0)
      operator delete(v49[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v54 = 260;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      v36 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v36 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)(a1 + 232), *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232));
      llvm::GlobalObject::setAlignment();
      v37 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v38 = *(_QWORD *)(v37 + 376);
      v39 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v37 + 32), GlobalVariable);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v38, v39);
    }
    v40 = llvm::PointerType::get();
    v41 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
    v54 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(v41, 50, (uint64_t)GlobalVariable, v40, (uint64_t)&__p);
    v43 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
    v54 = 257;
    v22 = llvm::IRBuilderBase::CreateCast(v43, 49, Cast, a4, (uint64_t)&__p);
    if (SHIBYTE(v56) < 0)
      operator delete(v55[0]);
    v44 = *MEMORY[0x1E0DE4F50];
    v57[0] = v44;
    v45 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v57 + *(_QWORD *)(v44 - 24)) = v45;
    v47 = MEMORY[0x1E0DE4FB8] + 16;
    v58[0] = v46;
    v58[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v62 < 0)
      operator delete(v61);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA2D638](&v63);
    v64[0] = v44;
    *(_QWORD *)((char *)v64 + *(_QWORD *)(v44 - 24)) = v45;
    v65[0] = v46;
    v65[1] = v47;
    if (v69 < 0)
      operator delete(v68);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA2D638](&v70);
  }
  return v22;
}

uint64_t AGCLLVMUserObject::markNonMainFunctionInline(AGCLLVMUserObject *this, llvm::Function *a2, char a3)
{
  char isDeclaration;
  char *v7;
  uint64_t result;

  if ((*((_BYTE *)a2 + 33) & 0x20) != 0)
    isDeclaration = 1;
  else
    isDeclaration = llvm::GlobalValue::isDeclaration(a2);
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  llvm::Value::getName(a2);
  result = llvm::StringMapImpl::FindKey();
  if (((_DWORD)result == -1 || (int)result == (unint64_t)*((unsigned int *)v7 + 824)) && !*((_BYTE *)this + 15))
  {
    if ((isDeclaration & 1) == 0)
      *((_DWORD *)a2 + 8) = *((_DWORD *)a2 + 8) & 0xFFFFBFC0 | 0x4007;
    if (!*((_QWORD *)a2 + 1))
      return llvm::Function::eraseFromParent(a2);
  }
  else
  {
    result = llvm::GlobalValue::setLinkage((uint64_t)a2, 0);
  }
  if ((isDeclaration & 1) == 0)
  {
    ++*((_DWORD *)this + 10);
    if ((a3 & 1) == 0)
      return llvm::Function::addFnAttr();
  }
  return result;
}

uint64_t AGCLLVMUserObject::createSamplerHeapGlobal(AGCLLVMUserObject *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Type *v5;
  llvm::Value *GlobalBufferBinding;
  llvm::Type *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  if ((v2 & 1) == 0
  {
    v9 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    AGCLLVMUserObject::createSamplerHeapGlobal(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 456))(v9);
    v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E7FFC = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 216))(v10);
    v11 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E8000 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 680))(v11);
    v12 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E8004 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 464))(v12);
    v13 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E8008 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 224))(v13);
    v14 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E800C = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 688))(v14);
  }
  if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 29)
    v3 = 2;
  else
    v3 = (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 7
      && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 22
      && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 3
      && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 4;
  v4 = AGCLLVMUserObject::createSamplerHeapGlobal(void)::bind_indices[3
                                                                                  * *((unsigned __int8 *)this + 3696)
                                                                                  + v3];
  v5 = (llvm::Type *)llvm::PointerType::get();
  v15[0] = "agc.sampler_heap.";
  v15[2] = v4;
  v16 = 2051;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)v15, v4, 0, 5, 0);
  llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
  *((_BYTE *)GlobalBufferBinding + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v7);
  llvm::GlobalVariable::setInitializer();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ConstantInt::get();
  v15[0] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2456), (uint64_t)GlobalBufferBinding);
}

uint64_t AGCLLVMUserObject::addWrapperPrefix(AGCLLVMUserObject *this)
{
  return 1;
}

void AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  const char *v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  std::string v29;
  _BYTE v30[320];
  uint64_t v31;
  unsigned __int8 v32;
  char v33;

  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (dumpShaderToFile(v4) && a2[8] - a2[12] + a2[10])
  {
    flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)&v29);
    flatbuffers::Parser::Parser((flatbuffers::Parser *)v30, (const flatbuffers::IDLOptions *)&v29);
    flatbuffers::IDLOptions::~IDLOptions((void **)&v29.__r_.__value_.__l.__data_);
    v33 = 1;
    flatbuffers::Parser::Deserialize((flatbuffers::Parser *)v30, AGCCodeTranslatorG11::CompileReplyBinarySchema::data(void)::bfbsData);
    v5 = &v29;
    std::string::basic_string[abi:nn180100]<0>(&v29, "Translator");
    __p[0] = 0;
    __p[1] = 0;
    v28 = 0;
    std::string::insert(&v29, 0, "Target ");
    v6 = v32;
    if ((v32 & 0x80u) != 0)
      v6 = v31;
    if (v6)
      std::operator+<char>();
    flatbuffers::GenerateText();
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v29;
    else
      LOBYTE(v7) = v29.__r_.__value_.__s.__data_[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ Start %s Metadata %s shader %d ------\n", v8, v9, v10, v11, v12, v13, (char)v7);
    if (v28 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v5) = v29.__r_.__value_.__s.__data_[0];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    printMessage((char **)&AGCPrinter, "------ End %s Metadata %s shader %d ------\n", v21, v22, v23, v24, v25, v26, (char)v5);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    flatbuffers::Parser::~Parser((flatbuffers::Parser *)v30);
  }
}

char *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 12, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t GLCompilerCreate(void *__src, size_t __len, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v7[3];
  __int128 v8;
  uint64_t v9;
  void *__dst;
  char v11;

  v4 = std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  v8 = 0uLL;
  v9 = 0;
  memset(v7, 0, sizeof(v7));
  v5 = AGCCodeGenServiceCreateInternal((uint64_t)v4, a3, 0, &v8, v7);
  if (v11 < 0)
    operator delete(__dst);
  return v5;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t AGCCodeGenServiceCreateInternal(uint64_t a1, int a2, unsigned int a3, __int128 *a4, const void **a5)
{
  AGCEnv *v10;
  uint64_t v11;
  const char *v12;
  const char *Value;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  AGCLLVMUserShader *v30;
  uint64_t v31;
  uint64_t *TargetConfig;
  unsigned __int8 v33;
  const std::string::value_type *v34;
  std::string::size_type size;
  char *v36;
  llvm *LastDiagnostics;
  std::string::size_type i;
  std::string::size_type v39;
  _BYTE *v40;
  uint64_t v41;
  llvm *v42;
  std::string::size_type j;
  std::string::size_type v44;
  _BYTE *v45;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  const char *v50;
  _QWORD *v51;
  std::string v52;
  _BYTE v53[8];
  void *__p[2];
  std::string::size_type v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  std::string v59;
  std::string v60;

  v10 = (AGCEnv *)LLVMAGXRuntimeMajorVersion();
  if ((_DWORD)v10 != 1)
    return 0;
  AGCEnv::load(v10);
  v11 = *(unsigned __int8 *)(a1 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a1 + 8);
  if (v11)
    AGCEnv::deserialize(a1);
  if (!MGGetBoolAnswer()
    || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"USE_MONOLITHIC_COMPILER", v12)) == 0
    || *Value == 48
    || !atoi(Value))
  {
    if (MGGetBoolAnswer())
      AGCEnv::getValue((AGCEnv *)"MTL_MONOLITHIC_COMPILER", v14);
  }
  AGCPrinter = 0;
  if (MGGetBoolAnswer())
  {
    v22 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE", v15);
    if (v22)
    {
      if (*v22 != 48 && atoi(v22))
        initPrinter(&AGCPrinter, a3 < 2);
    }
  }
  printMessage((char **)&AGCPrinter, "Running LLVM version %d.", v16, v17, v18, v19, v20, v21, 23);
  AGCEnv::getVarValuesString(&v52);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v52;
  else
    LOBYTE(v29) = v52.__r_.__value_.__s.__data_[0];
  printMessage((char **)&AGCPrinter, "%s", v23, v24, v25, v26, v27, v28, (char)v29);
  AGCLLVMCtx::initialize(v30);
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_DWORD *)(v31 + 24) = a2;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_QWORD *)(v31 + 64) = 0;
  TargetConfig = AGCLLVMTargetConfig::createTargetConfig(a2);
  (*(void (**)(std::string *__return_ptr))(*TargetConfig + 216))(&v59);
  if ((v33 & 1) == 0
  {
    if (MGGetBoolAnswer())
      v51 = AGCEnv::getValue((AGCEnv *)"AGX_EXTRA_LLVM_ATTRIB", v50);
    else
      v51 = 0;
    AGCCodeGenService::AGCCodeGenService(unsigned int,Api,std::string const&,std::string const&)::agx_extra_llvm_attrib = (uint64_t)v51;
  }
  v34 = (const std::string::value_type *)AGCCodeGenService::AGCCodeGenService(unsigned int,Api,std::string const&,std::string const&)::agx_extra_llvm_attrib;
  if (AGCCodeGenService::AGCCodeGenService(unsigned int,Api,std::string const&,std::string const&)::agx_extra_llvm_attrib)
  {
    size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v59.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::append(&v59, ",");
      v34 = (const std::string::value_type *)AGCCodeGenService::AGCCodeGenService(unsigned int,Api,std::string const&,std::string const&)::agx_extra_llvm_attrib;
    }
    std::string::append(&v59, v34);
  }
  v58 = 0;
  if (os_parse_boot_arg_int() && v58 >= 1)
  {
    v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = v59.__r_.__value_.__l.__size_;
    if (v49)
      std::string::append(&v59, ",");
    std::string::append(&v59, "-gin-1087");
  }
  if (a2 <= 196615)
  {
    switch(a2)
    {
      case 65542:
      case 65543:
        v36 = "g9p-a0";
        goto LABEL_71;
      case 65545:
        v36 = "g11p-a0";
        goto LABEL_71;
      case 65546:
        v36 = "g11m-a0";
        goto LABEL_71;
      case 65547:
      case 65559:
        v36 = "g11g-a0";
        goto LABEL_71;
      case 65548:
        v36 = "g12p-a0";
        goto LABEL_71;
      case 65550:
        v36 = "g13p-a0";
        goto LABEL_71;
      case 65552:
        v36 = "g13g-a0";
        goto LABEL_71;
      case 65553:
        goto LABEL_34;
      case 65554:
        goto LABEL_41;
      case 65555:
        goto LABEL_39;
      case 65556:
        v36 = "g14c-a0";
        goto LABEL_71;
      case 65557:
        v36 = "g14d-a0";
        goto LABEL_71;
      case 65560:
        v36 = "g15g-a0";
        goto LABEL_71;
      case 65561:
        v36 = "g13s-a0";
        goto LABEL_71;
      case 65562:
        v36 = "g13c-a0";
        goto LABEL_71;
      case 65563:
        v36 = "g13d-a0";
        goto LABEL_71;
      case 65567:
        v36 = "g16p-a0";
        goto LABEL_71;
      case 65568:
        v36 = "g16g-a0";
        goto LABEL_71;
      case 65570:
        v36 = "g17p-a0";
        goto LABEL_71;
      default:
        goto LABEL_92;
    }
  }
  if (a2 <= 262174)
  {
    switch(a2)
    {
      case 196616:
        v36 = "g10p-b0";
        goto LABEL_71;
      case 196617:
        v36 = "g11p-b0";
        goto LABEL_71;
      case 196618:
        v36 = "g11m-b0";
        goto LABEL_71;
      case 196620:
        v36 = "g12p-b0";
        goto LABEL_71;
      case 196622:
        v36 = "g13p-b0";
        goto LABEL_71;
      case 196624:
        v36 = "g13g-b0";
        goto LABEL_71;
      case 196625:
      case 196630:
LABEL_34:
        v36 = "g14p";
        goto LABEL_71;
      case 196626:
LABEL_41:
        v36 = "g14g";
        goto LABEL_71;
      case 196627:
      case 196628:
LABEL_39:
        v36 = "g14s";
        goto LABEL_71;
      case 196629:
        v36 = "g14d";
        goto LABEL_71;
      case 196632:
        v36 = "g15g-b0";
        goto LABEL_71;
      case 196633:
        v36 = "g13s-b0";
        goto LABEL_71;
      case 196634:
        v36 = "g13c-b0";
        goto LABEL_71;
      case 196635:
        v36 = "g13d-b0";
        goto LABEL_71;
      case 196639:
        v36 = "g16p-b0";
        goto LABEL_71;
      case 196640:
        v36 = "g16g-b0";
        goto LABEL_71;
      default:
        goto LABEL_92;
    }
  }
  switch(a2)
  {
    case 262175:
      v36 = "g16p-b1";
      break;
    case 327684:
      v36 = "g5p-b0";
      break;
    case 327704:
      v36 = "g15g-c0";
      break;
    default:
LABEL_92:
      std::to_string(&v60, a2);
      v47 = std::string::insert(&v60, 0, "agc-target-");
      v48 = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v55 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      goto LABEL_72;
  }
LABEL_71:
  std::string::basic_string[abi:nn180100]<0>(__p, v36);
LABEL_72:
  llvm::AGX::AGXCompiler::create();
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  v56 = 1;
  if ((llvm::AGX::AGXCompiler::isValid((llvm::AGX::AGXCompiler *)&v57) & 1) != 0)
  {
    llvm::AGX::AGXCompiler::AGXCompiler();
    LastDiagnostics = (llvm *)llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)v53);
    v39 = v60.__r_.__value_.__l.__size_;
    for (i = v60.__r_.__value_.__r.__words[0]; i != v39; i += 8)
    {
      llvm::errs(LastDiagnostics);
      LastDiagnostics = (llvm *)llvm::AGX::operator<<();
      v40 = (_BYTE *)*((_QWORD *)LastDiagnostics + 4);
      if (*((_BYTE **)LastDiagnostics + 3) == v40)
      {
        LastDiagnostics = (llvm *)llvm::raw_ostream::write(LastDiagnostics, "\n");
      }
      else
      {
        *v40 = 10;
        ++*((_QWORD *)LastDiagnostics + 4);
      }
    }
    __p[0] = &v60;
    std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
    v41 = operator new();
    llvm::AGX::AGXCompiler::AGXCompiler();
    AGCLLVMCtx::AGCLLVMCtx(v41, (uint64_t)TargetConfig, (uint64_t)&v60, a3, a4, a5);
    *(_QWORD *)(v31 + 64) = v41;
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v60);
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)v53);
  }
  else
  {
    llvm::AGX::AGXCompiler::AGXCompiler();
    llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)__p);
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)__p);
    v44 = v60.__r_.__value_.__l.__size_;
    for (j = v60.__r_.__value_.__r.__words[0]; j != v44; j += 8)
    {
      llvm::errs(v42);
      v42 = (llvm *)llvm::AGX::operator<<();
      v45 = (_BYTE *)*((_QWORD *)v42 + 4);
      if (*((_BYTE **)v42 + 3) == v45)
      {
        v42 = (llvm *)llvm::raw_ostream::write(v42, "\n");
      }
      else
      {
        *v45 = 10;
        ++*((_QWORD *)v42 + 4);
      }
    }
    __p[0] = &v60;
    std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  }
  llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v57);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  return v31;
}

void AGCEnv::load(AGCEnv *this)
{
  AGCEnv *v1;
  NSObject *OSLog;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  AGCEnv *v9;
  int v10;
  NSObject *v11;
  _BOOL8 v12;
  AGCEnv *v13;
  std::locale::id *v14;
  const std::locale::facet *v15;
  unsigned __int8 v16;
  AGCEnv *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type size;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  const char **v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint32_t v31;
  uint64_t *v32;
  std::string *v33;
  NSObject *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  NSObject *v39;
  std::string *v40;
  NSObject *v41;
  void **v42;
  std::string v43;
  std::string v44;
  std::string __str;
  void *__p[2];
  char v47;
  _BYTE buf[12];
  __int16 v49;
  std::string::size_type v50;
  __int16 v51;
  std::string *v52;
  __int16 v53;
  std::string::size_type v54;
  __int128 v55;
  _BYTE v56[408];
  _QWORD v57[23];

  v57[20] = *MEMORY[0x1E0C80C00];
  v1 = (AGCEnv *)MGGetBoolAnswer();
  if (!(_DWORD)v1)
    return;
  OSLog = AGCEnv::getOSLog(v1);
  if (os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v55) = 136315138;
    *(_QWORD *)((char *)&v55 + 4) = "load";
    _os_log_debug_impl(&dword_1C3C54000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)&v55, 0xCu);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "/System/Library/PrivateFrameworks/AGXCompilerCore.framework/EnvVars.txt");
  v3 = MEMORY[0x1E0DE4FA8];
  v4 = MEMORY[0x1E0DE4FA8] + 64;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v57[0] = MEMORY[0x1E0DE4FA8] + 64;
  *(_QWORD *)&v55 = v6;
  *(_QWORD *)&v56[*(_QWORD *)(v6 - 24) - 16] = v7;
  *((_QWORD *)&v55 + 1) = 0;
  v8 = (std::ios_base *)&v56[*(_QWORD *)(v55 - 24) - 16];
  std::ios_base::init(v8, v56);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(_QWORD *)&v55 = v3 + 24;
  v57[0] = v4;
  MEMORY[0x1CAA2D50C](v56);
  v9 = (AGCEnv *)std::filebuf::open();
  if (!v9)
    std::ios_base::clear((std::ios_base *)&v56[*(_QWORD *)(v55 - 24) - 16], *(_DWORD *)&v56[*(_QWORD *)(v55 - 24) + 16] | 4);
  v10 = *(_DWORD *)&v56[*(_QWORD *)(v55 - 24) + 16] & 5;
  v11 = AGCEnv::getOSLog(v9);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3C54000, v11, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
    }
    goto LABEL_49;
  }
  if (v12)
  {
    v42 = __p;
    if (v47 < 0)
      v42 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v42;
    _os_log_debug_impl(&dword_1C3C54000, v11, OS_LOG_TYPE_DEBUG, "Reading environment variables from '%s'", buf, 0xCu);
  }
  AGCEnv::getStatusVariables((AGCEnv *)v12);
  AGCEnv::getEnvLookup(v13);
  memset(&__str, 0, sizeof(__str));
  v14 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)&v56[*(_QWORD *)(v55 - 24) - 16]);
    v15 = std::locale::use_facet((const std::locale *)buf, v14);
    v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale((std::locale *)buf);
    v17 = (AGCEnv *)std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, (uint64_t)&__str, v16);
    if ((v56[*(_QWORD *)(v55 - 24) + 16] & 5) != 0)
      break;
    v18 = std::string::find(&__str, 61, 0);
    if (v18 == -1)
    {
      v27 = AGCEnv::getOSLog((AGCEnv *)0xFFFFFFFFFFFFFFFFLL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C3C54000, v27, OS_LOG_TYPE_DEBUG, "Skipped line with no '=' character in EnvVars.txt", buf, 2u);
      }
    }
    else
    {
      v19 = v18;
      std::string::basic_string(&v44, &__str, 0, v18, (std::allocator<char> *)buf);
      std::string::basic_string(&v43, &__str, v19 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
      AGCEnv::trim(&v44);
      v20 = AGCEnv::trim(&v43);
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v44.__r_.__value_.__l.__size_;
      if (size)
      {
        v22 = AGCEnv::getStatusVariables(void)::status_vars;
        v23 = qword_1ED839C38 - AGCEnv::getStatusVariables(void)::status_vars;
        if (qword_1ED839C38 == AGCEnv::getStatusVariables(void)::status_vars)
        {
          v26 = (const char **)AGCEnv::getStatusVariables(void)::status_vars;
        }
        else
        {
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v44;
          else
            v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
          v25 = 8 * (v23 >> 3);
          v26 = (const char **)AGCEnv::getStatusVariables(void)::status_vars;
          while (1)
          {
            v20 = (std::string *)strcmp(*v26, (const char *)v24);
            if (!(_DWORD)v20)
              break;
            ++v26;
            v25 -= 8;
            if (!v25)
              goto LABEL_36;
          }
        }
        if (v26 == (const char **)(v22 + (v23 & 0xFFFFFFFFFFFFFFF8)))
        {
LABEL_36:
          v39 = AGCEnv::getOSLog((AGCEnv *)v20);
          if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            goto LABEL_37;
          v40 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v40;
          v29 = v39;
          v30 = "Read unknown variable from EnvVars.txt: %s";
          v31 = 12;
        }
        else
        {
          *(_QWORD *)buf = &v44;
          v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v44, (__int128 **)buf);
          v33 = std::string::operator=((std::string *)(v32 + 7), &v43);
          v34 = AGCEnv::getOSLog((AGCEnv *)v33);
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            goto LABEL_37;
          v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          v36 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v35 = v44.__r_.__value_.__l.__size_;
            v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          v37 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          v38 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v37 = v43.__r_.__value_.__l.__size_;
            v38 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v36;
          v49 = 2048;
          v50 = v35;
          v51 = 2080;
          v52 = v38;
          v53 = 2048;
          v54 = v37;
          v29 = v34;
          v30 = "%s[%zu] = %s[%zu]\n";
          v31 = 42;
        }
      }
      else
      {
        v28 = AGCEnv::getOSLog((AGCEnv *)v20);
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          goto LABEL_37;
        *(_WORD *)buf = 0;
        v29 = v28;
        v30 = "Skipped line with empty variable name in EnvVars.txt";
        v31 = 2;
      }
      _os_log_debug_impl(&dword_1C3C54000, v29, OS_LOG_TYPE_DEBUG, v30, buf, v31);
LABEL_37:
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
    }
  }
  v41 = AGCEnv::getOSLog(v17);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C3C54000, v41, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
  }
  v5 = (_QWORD *)MEMORY[0x1E0DE4F40];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_49:
  *(_QWORD *)&v55 = *v5;
  *(_QWORD *)&v56[*(_QWORD *)(v55 - 24) - 16] = v5[3];
  MEMORY[0x1CAA2D518](v56);
  std::istream::~istream();
  MEMORY[0x1CAA2D638](v57);
  if (v47 < 0)
    operator delete(__p[0]);
}

void AGCEnv::deserialize(uint64_t a1)
{
  AGCEnv *v2;
  uint64_t v3;
  AGCEnv *v4;
  NSObject *OSLog;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t *v11;
  std::string *v12;
  NSObject *v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  std::string *p_str;
  NSObject *v18;
  std::string __str;
  std::string v20;
  _BYTE buf[12];
  __int16 v22;
  std::string::size_type v23;
  __int16 v24;
  std::string *v25;
  __int16 v26;
  std::string::size_type v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (AGCEnv *)MGGetBoolAnswer();
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      AGCEnv::getEnvLookup(v2);
      OSLog = AGCEnv::getOSLog(v4);
      v6 = os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v6)
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "deserialize";
        _os_log_debug_impl(&dword_1C3C54000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", buf, 0xCu);
      }
      v7 = 0;
      do
      {
        v8 = *(unsigned __int8 *)(a1 + 23);
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(a1 + 8);
        if (v7 >= v8)
          break;
        v6 = std::string::find((const std::string *)a1, 10, v7);
        if (v6 == -1)
          break;
        v9 = v6;
        std::string::basic_string(&v20, (const std::string *)a1, v7, v6 - v7, (std::allocator<char> *)buf);
        v7 = v9 + 1;
        v6 = std::string::find((const std::string *)a1, 10, v9 + 1);
        v10 = v6;
        if (v6 != -1)
        {
          std::string::basic_string(&__str, (const std::string *)a1, v7, v6 - v7, (std::allocator<char> *)buf);
          *(_QWORD *)buf = &v20;
          v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v20, (__int128 **)buf);
          v12 = std::string::operator=((std::string *)(v11 + 7), &__str);
          v13 = AGCEnv::getOSLog((AGCEnv *)v12);
          v6 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v6)
          {
            size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &v20;
            else
              v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v20.__r_.__value_.__l.__size_;
            v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v16 = __str.__r_.__value_.__l.__size_;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v15;
            v22 = 2048;
            v23 = size;
            v24 = 2080;
            v25 = p_str;
            v26 = 2048;
            v27 = v16;
            _os_log_debug_impl(&dword_1C3C54000, v13, OS_LOG_TYPE_DEBUG, "\t%s[%zu] = %s[%zu]\n", buf, 0x2Au);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v7 = v10 + 1;
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      while (v10 != -1);
      v18 = AGCEnv::getOSLog((AGCEnv *)v6);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C3C54000, v18, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
      }
    }
  }
}

void initPrinter(_QWORD *a1, int a2)
{
  const char *v4;
  const char *Value;
  const char *v6;
  const std::string::value_type *v7;
  const char *v8;
  const char *v9;
  _BOOL4 v10;
  const char *v11;
  const char *v12;
  char *v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string::size_type size;
  std::string *v18;
  const std::string::value_type *v19;
  const char *v20;
  const std::string::value_type *v21;
  const std::string::value_type *v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t *v25;
  const char *v26;
  const char *v27;
  FILE *v28;
  const char *v29;
  int *v30;
  int v31;
  NSObject *v32;
  const char *v33;
  const char *v34;
  FILE *v35;
  const char *v36;
  int *v37;
  int v38;
  const char *v39;
  const std::string::value_type *v40;
  uint64_t *v41;
  const char *v42;
  const char *v43;
  pid_t v44;
  std::string *v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  const char *v49;
  const char *v50;
  const char *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::ios_base *v58;
  uint64_t v59;
  const char *v60;
  FILE *v61;
  const char *v62;
  int *v63;
  int v64;
  uint64_t *v65;
  int v66;
  uint64_t *v67;
  int v68;
  uint64_t *v69;
  int v70;
  std::string v71;
  stat v72;
  _BYTE buf[28];
  __int16 v74;
  uint64_t *v75;
  __int16 v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  getFilePath();
  if (byte_1EF8E8237 < 0)
  {
    *(_BYTE *)getFilePath(void)::file_path = 0;
    qword_1EF8E8228 = 0;
  }
  else
  {
    LOBYTE(getFilePath(void)::file_path) = 0;
    byte_1EF8E8237 = 0;
  }
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE_STDERR", v4);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
      {
        *a1 = MEMORY[0x1E0DE4A50];
LABEL_126:
        std::ostream::flush();
        return;
      }
    }
  }
  memset(&v71, 0, sizeof(v71));
  v7 = 0;
  if (MGGetBoolAnswer())
    v7 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_LOG_DIRECTORY", v6);
  if (MGGetBoolAnswer())
  {
    v9 = (const char *)AGCEnv::getValue((AGCEnv *)"USE_MONOLITHIC_COMPILER", v8);
    if (v9)
    {
      if (*v9 != 48 && atoi(v9))
      {
        v10 = 1;
        if (!v7)
          goto LABEL_33;
        goto LABEL_31;
      }
    }
  }
  if (!MGGetBoolAnswer()
    || (v12 = (const char *)AGCEnv::getValue((AGCEnv *)"MTL_MONOLITHIC_COMPILER", v11)) == 0
    || *v12 == 48)
  {
    if (stat("/private/var/mobile/Library/Logs/", &v72))
    {
LABEL_21:
      v13 = "/tmp/";
      goto LABEL_22;
    }
    goto LABEL_36;
  }
  v10 = atoi(v12) != 0;
  if (v7)
  {
LABEL_31:
    if (v10)
    {
      v16 = v7;
LABEL_37:
      std::string::append(&v71, v16);
      goto LABEL_38;
    }
  }
LABEL_33:
  if (!stat("/private/var/mobile/Library/Logs/", &v72))
  {
LABEL_36:
    v16 = "/private/var/mobile/Library/Logs/";
    goto LABEL_37;
  }
  if (!v10)
    goto LABEL_21;
  v13 = -[NSString UTF8String](NSHomeDirectory(), "UTF8String");
LABEL_22:
  std::string::basic_string[abi:nn180100]<0>(buf, v13);
  if (buf[23] >= 0)
    v14 = buf;
  else
    v14 = *(const std::string::value_type **)buf;
  if (buf[23] >= 0)
    v15 = buf[23];
  else
    v15 = *(_QWORD *)&buf[8];
  std::string::append(&v71, v14, v15);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_38:
  size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  v18 = &v71;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v71.__r_.__value_.__l.__size_;
    v18 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  if (v18->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(&v71, 47);
  if (a2)
    v19 = "OpenGL";
  else
    v19 = "Metal";
  std::string::append(&v71, v19);
  if (MGGetBoolAnswer())
  {
    v21 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_LOG_PREFIX", v20);
    if (v21)
    {
      v22 = v21;
      std::string::push_back(&v71, 47);
      std::string::append(&v71, v22);
    }
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v71;
  else
    v23 = (std::string *)v71.__r_.__value_.__r.__words[0];
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    v24 = v71.__r_.__value_.__l.__size_;
  v25 = &getFilePath(void)::file_path;
  std::string::append((std::string *)&getFilePath(void)::file_path, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (byte_1EF8E8237 >= 0)
    v26 = (const char *)&getFilePath(void)::file_path;
  else
    v26 = (const char *)getFilePath(void)::file_path;
  if (stat(v26, &v72))
  {
    if (byte_1EF8E8237 >= 0)
      v27 = (const char *)&getFilePath(void)::file_path;
    else
      v27 = (const char *)getFilePath(void)::file_path;
    if (mkpath_np(v27, 0x1FFu))
    {
      v28 = (FILE *)*MEMORY[0x1E0C80C10];
      if (byte_1EF8E8237 >= 0)
        v29 = (const char *)&getFilePath(void)::file_path;
      else
        v29 = (const char *)getFilePath(void)::file_path;
      v30 = __error();
      fprintf(v28, "AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n", "agc_file_printer.h", 514, "initPrinter", v29, *v30);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        if (byte_1EF8E8237 >= 0)
          v65 = &getFilePath(void)::file_path;
        else
          v65 = (uint64_t *)getFilePath(void)::file_path;
        v66 = *__error();
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "agc_file_printer.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 514;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "initPrinter";
        v74 = 2080;
        v75 = v65;
        v76 = 1024;
        v77 = v66;
        _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n", buf, 0x2Cu);
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        if (byte_1EF8E8237 < 0)
          v25 = (uint64_t *)getFilePath(void)::file_path;
        v31 = *__error();
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "agc_file_printer.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 514;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "initPrinter";
        v74 = 2080;
        v75 = v25;
        v76 = 1024;
        v77 = v31;
        v32 = MEMORY[0x1E0C81028];
        v33 = "AGC: AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n";
LABEL_84:
        _os_log_impl(&dword_1C3C54000, v32, OS_LOG_TYPE_INFO, v33, buf, 0x2Cu);
      }
    }
    else
    {
      if (byte_1EF8E8237 >= 0)
        v34 = (const char *)&getFilePath(void)::file_path;
      else
        v34 = (const char *)getFilePath(void)::file_path;
      if (chown(v34, 0x1F5u, 0xFFFFFFFF))
      {
        v35 = (FILE *)*MEMORY[0x1E0C80C10];
        if (byte_1EF8E8237 >= 0)
          v36 = (const char *)&getFilePath(void)::file_path;
        else
          v36 = (const char *)getFilePath(void)::file_path;
        v37 = __error();
        fprintf(v35, "AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", "agc_file_printer.h", 507, "initPrinter", v36, *v37);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          if (byte_1EF8E8237 >= 0)
            v69 = &getFilePath(void)::file_path;
          else
            v69 = (uint64_t *)getFilePath(void)::file_path;
          v70 = *__error();
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "agc_file_printer.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 507;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "initPrinter";
          v74 = 2080;
          v75 = v69;
          v76 = 1024;
          v77 = v70;
          _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", buf, 0x2Cu);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          if (byte_1EF8E8237 < 0)
            v25 = (uint64_t *)getFilePath(void)::file_path;
          v38 = *__error();
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "agc_file_printer.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 507;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "initPrinter";
          v74 = 2080;
          v75 = v25;
          v76 = 1024;
          v77 = v38;
          v32 = MEMORY[0x1E0C81028];
          v33 = "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n";
          goto LABEL_84;
        }
      }
    }
  }
  std::string::append((std::string *)&getFilePath(void)::file_path, "/");
  if (!MGGetBoolAnswer()
    || (v40 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_CLIENT_PROCESS_NAME", v39)) == 0)
  {
    if (a2)
      v40 = "agc_gl_status";
    else
      v40 = "agc_mtl_status";
  }
  v41 = &getFilePath(void)::file_path;
  std::string::append((std::string *)&getFilePath(void)::file_path, v40);
  if (!MGGetBoolAnswer()
    || (v43 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_FILE_NO_PID", v42)) == 0
    || *v43 == 48
    || !atoi(v43))
  {
    v44 = getpid();
    std::to_string(&v71, v44);
    v45 = std::string::insert(&v71, 0, "_");
    v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v47 = buf;
    else
      v47 = *(const std::string::value_type **)buf;
    if (buf[23] >= 0)
      v48 = buf[23];
    else
      v48 = *(_QWORD *)&buf[8];
    std::string::append((std::string *)&getFilePath(void)::file_path, v47, v48);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
  }
  LODWORD(v49) = MGGetBoolAnswer();
  if ((_DWORD)v49)
  {
    v49 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_FILE_MAX_SIZE_IN_BYTES", v50);
    if (v49)
    {
      if (*v49 == 48)
        LODWORD(v49) = 0;
      else
        LODWORD(v49) = atoi(v49);
    }
  }
  status_file_cap = (int)v49;
  if (byte_1EF8E8237 >= 0)
    v51 = (const char *)&getFilePath(void)::file_path;
  else
    v51 = (const char *)getFilePath(void)::file_path;
  v52 = stat(v51, &v72);
  v53 = (_QWORD *)operator new();
  v54 = MEMORY[0x1E0DE4FB0];
  v55 = MEMORY[0x1E0DE4FB0] + 64;
  v53[52] = MEMORY[0x1E0DE4FB0] + 64;
  v57 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v56 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v53 = v57;
  *(_QWORD *)((char *)v53 + *(_QWORD *)(v57 - 24)) = v56;
  v58 = (std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24));
  std::ios_base::init(v58, v53 + 1);
  v58[1].__vftable = 0;
  v58[1].__fmtflags_ = -1;
  *v53 = v54 + 24;
  v53[52] = v55;
  v59 = MEMORY[0x1CAA2D50C](v53 + 1);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v53[1] + 24))(v59, 0, 0);
  std::ofstream::open();
  *a1 = v53;
  if (!v52)
    goto LABEL_126;
  if (byte_1EF8E8237 >= 0)
    v60 = (const char *)&getFilePath(void)::file_path;
  else
    v60 = (const char *)getFilePath(void)::file_path;
  if (chown(v60, 0x1F5u, 0xFFFFFFFF))
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    if (byte_1EF8E8237 >= 0)
      v62 = (const char *)&getFilePath(void)::file_path;
    else
      v62 = (const char *)getFilePath(void)::file_path;
    v63 = __error();
    fprintf(v61, "AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", "agc_file_printer.h", 552, "initPrinter", v62, *v63);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      if (byte_1EF8E8237 >= 0)
        v67 = &getFilePath(void)::file_path;
      else
        v67 = (uint64_t *)getFilePath(void)::file_path;
      v68 = *__error();
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "agc_file_printer.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 552;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "initPrinter";
      v74 = 2080;
      v75 = v67;
      v76 = 1024;
      v77 = v68;
      _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", buf, 0x2Cu);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      if (byte_1EF8E8237 < 0)
        v41 = (uint64_t *)getFilePath(void)::file_path;
      v64 = *__error();
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "agc_file_printer.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 552;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "initPrinter";
      v74 = 2080;
      v75 = v41;
      v76 = 1024;
      v77 = v64;
      _os_log_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", buf, 0x2Cu);
    }
  }
  if (*a1)
    goto LABEL_126;
}

void AGCEnv::getVarValuesString(std::string *this)
{
  AGCEnv *v2;
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  AGCEnv *v7;
  const std::string::value_type *Value;
  const std::string::value_type *v9;

  std::string::basic_string[abi:nn180100]<0>(this, "Active environment variable values:\n");
  v2 = (AGCEnv *)MGGetBoolAnswer();
  if ((_DWORD)v2)
  {
    AGCEnv::getStatusVariables(v2);
    v4 = AGCEnv::getStatusVariables(void)::status_vars;
    if (qword_1ED839C38 != AGCEnv::getStatusVariables(void)::status_vars)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = *(AGCEnv **)(v4 + 8 * v5);
        Value = (const std::string::value_type *)AGCEnv::getValue(v7, v3);
        if (Value)
        {
          v9 = Value;
          std::string::append(this, (const std::string::value_type *)v7);
          std::string::append(this, "=");
          std::string::append(this, v9);
          std::string::append(this, "\n");
        }
        v5 = v6;
        v4 = AGCEnv::getStatusVariables(void)::status_vars;
        ++v6;
      }
      while (v5 < (qword_1ED839C38 - AGCEnv::getStatusVariables(void)::status_vars) >> 3);
    }
  }
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  int64_t v15;
  std::locale *v16;
  uint64_t v17;
  _BYTE v19[16];
  std::locale __b;
  char v21;

  MEMORY[0x1CAA2D56C](v19, a1);
  if (v19[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
      v9 = a2 + a3;
    else
      v9 = a2;
    v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v12 = *((_QWORD *)v6 + 3);
    v13 = v12 <= a3;
    v14 = v12 - a3;
    if (v13)
      v15 = 0;
    else
      v15 = v14;
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      std::string::basic_string[abi:nn180100](&__b, v15, (char)v10);
      v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v16, v15);
      if (v21 < 0)
        operator delete(__b.__locale_);
      if (v17 != v15)
        goto LABEL_24;
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x1CAA2D578](v19);
  return a1;
}

void getFilePath(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      getFilePath(void)::file_path = 0;
      qword_1EF8E8228 = 0;
      unk_1EF8E8230 = 0;
      __cxa_atexit(MEMORY[0x1E0DE44D0], &getFilePath(void)::file_path, &dword_1C3C54000);
    }
  }
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

BOOL std::less<std::string>::operator()[abi:nn180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(_QWORD *a1, __int128 **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&AGCEnv::getEnvLookup(void)::envlookup, &v12, a1);
  v4 = *v3;
  if (!*v3)
  {
    v5 = v3;
    v4 = (uint64_t *)operator new(0x50uLL);
    v10[1] = &qword_1ED839C20;
    v6 = (std::string *)(v4 + 4);
    v7 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v4[6] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    v4[7] = 0;
    v4[8] = 0;
    v4[9] = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)&AGCEnv::getEnvLookup(void)::envlookup, v12, v5, v4);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100]((uint64_t)v10);
  }
  return v4;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1CAA2D524](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    ++v6;
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

std::string *AGCEnv::trim(std::string *this)
{
  int v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  std::string *v7;
  unsigned int v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  char *v12;
  std::string::size_type v13;
  std::string *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char *v19;
  std::string *v20;

  v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = this->__r_.__value_.__r.__words[0];
  if (v2 >= 0)
    v4 = this;
  else
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v2 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  v6 = MEMORY[0x1E0C80978];
  if (size)
  {
    v7 = (std::string *)((char *)v4 + size);
    do
    {
      v8 = v4->__r_.__value_.__s.__data_[0];
      if ((v8 & 0x80000000) != 0)
      {
        if (!__maskrune(v8, 0x4000uLL))
          goto LABEL_15;
      }
      else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      v4 = (std::string *)((char *)v4 + 1);
      --size;
    }
    while (size);
    v4 = v7;
LABEL_15:
    LOBYTE(v2) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v3 = this->__r_.__value_.__r.__words[0];
  }
  if ((v2 & 0x80u) == 0)
    v9 = this;
  else
    v9 = (std::string *)v3;
  std::string::erase(this, 0, (char *)v4 - (char *)v9);
  v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = (char *)this + v10;
  if (v11 >= 0)
    v13 = (std::string::size_type)v12;
  else
    v13 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  if (v11 >= 0)
    v14 = this;
  else
    v14 = (std::string *)this->__r_.__value_.__r.__words[0];
  while ((std::string *)v13 != v14)
  {
    v16 = *(char *)--v13;
    v15 = v16;
    if ((v16 & 0x80000000) != 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
      {
LABEL_30:
        v14 = (std::string *)(v13 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x4000) == 0)
    {
      goto LABEL_30;
    }
  }
  v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v18 = (char)v17;
  v19 = (char *)this + v17;
  if (v18 >= 0)
  {
    v20 = this;
  }
  else
  {
    v19 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    v20 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(this, (char *)v14 - (char *)v20, v19 - (char *)v14);
}

void AGCCodeGenServiceDestroyInternal(_QWORD *a1)
{
  uint64_t v2;
  BOOL v3;
  AGCLLVMCtx *v4;

  v2 = OGLCodeGenService::oglCodeGenService;
  if (OGLCodeGenService::oglCodeGenService)
  {
    (*(void (**)(void))(OGLCodeGenService::oglCodeGenService + 8))();
    dlclose(*(void **)v2);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = 0;
    MEMORY[0x1CAA2D68C](v2, 0x80C40D6874129);
  }
  OGLCodeGenService::oglCodeGenService = 0;
  if (AGCPrinter)
    v3 = AGCPrinter == MEMORY[0x1E0DE4A50];
  else
    v3 = 1;
  if (v3)
  {
LABEL_9:
    if (a1)
      goto LABEL_10;
    return;
  }
  (*(void (**)(void))(*(_QWORD *)AGCPrinter + 8))();
  AGCPrinter = 0;
  getFilePath();
  if ((byte_1EF8E8237 & 0x80000000) == 0)
  {
    LOBYTE(getFilePath(void)::file_path) = 0;
    byte_1EF8E8237 = 0;
    goto LABEL_9;
  }
  *(_BYTE *)getFilePath(void)::file_path = 0;
  qword_1EF8E8228 = 0;
  if (a1)
  {
LABEL_10:
    v4 = (AGCLLVMCtx *)a1[8];
    if (v4)
    {
      AGCLLVMCtx::~AGCLLVMCtx(v4);
      MEMORY[0x1CAA2D68C]();
    }
    JUMPOUT(0x1CAA2D68CLL);
  }
}

uint64_t GLCompilerBuildRequest(_QWORD *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  int v9;

  v9 = 0;
  return AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, a4, a5, 0, &v9, a7, a8);
}

BOOL isComputeShader(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x1B || ((1 << a1) & 0x8070040) == 0)
    return a1 == 91 || a1 == 93;
  return result;
}

uint64_t AGCLLVMFragmentContextState::enableImgWBlkPBECmp(AGCLLVMFragmentContextState *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 65) >> 1) & 1;
}

uint64_t GLCompilerLogBuildRequest(int a1, void *a2, size_t a3, const void *a4, size_t a5, unsigned int a6, char *a7)
{
  uint64_t result;
  unsigned int v11;

  v11 = a6;
  result = GLCompilerLogBuildRequestInternal(a2, a3, a7, "state", &v11);
  if ((_DWORD)result)
    return GLCompilerLogBuildRequestInternal(a4, a5, a7, "bitcode", 0);
  return result;
}

void GLCompilerReleaseReply(uint64_t a1)
{
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t MTLCompilerCreate(uint64_t a1, unint64_t a2)
{
  int v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Internal;
  std::string v11;
  void *__p[2];
  char v13;
  void *__dst[2];
  char v15;

  v4 = *(_DWORD *)a1;
  v5 = *(unsigned int *)(a1 + 4);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = a1 + 12;
  std::string::basic_string[abi:nn180100](__dst, (void *)(a1 + 12), v5);
  std::string::basic_string[abi:nn180100](__p, (void *)(v7 + v5), v6);
  v8 = (v5 + v6 + 12);
  memset(&v11, 0, sizeof(v11));
  if (a2 > v8)
    std::string::append(&v11, (const std::string::value_type *)(a1 + v8), a2 - v8);
  Internal = AGCCodeGenServiceCreateInternal((uint64_t)&v11, v4, 2u, (__int128 *)__p, (const void **)__dst);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(__dst[0]);
  return Internal;
}

char *generateInternalErrorMessage(char **a1, int a2)
{
  char *v4;
  void *v5;
  std::string v7;

  std::string::basic_string[abi:nn180100]<0>(&v7, "Internal error during ");
  if ((a2 - 3) <= 5)
    std::string::append(&v7, off_1E7E60850[a2 - 3]);
  std::string::append(&v7, "function compilation");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v7.__r_.__value_.__r.__words[0];
    v4 = strdup(v7.__r_.__value_.__l.__data_);
    *a1 = v4;
    operator delete(v5);
  }
  else
  {
    v4 = strdup((const char *)&v7);
    *a1 = v4;
  }
  return v4;
}

uint64_t MTLCompilerBuildRequestWithSerializedBitcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, char **a13)
{
  char *v14;

  *a11 = 0;
  *a9 = 0;
  *a7 = 0;
  *a12 = 0;
  *a10 = 0;
  *a8 = 0;
  *a13 = generateInternalErrorMessage(&v14, 0);
  return 1;
}

uint64_t MTLCompilerBuildRequest(_QWORD *a1, char *a2, unint64_t a3, llvm::Module *a4, _QWORD *a5, _QWORD *a6, char **a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *InternalErrorMessage;
  char **v17;
  char *v18;
  int v19;

  v19 = 0;
  if (AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, 0, 0, a4, &v19, a5, a6))
  {
    result = 0;
    *a7 = 0;
  }
  else
  {
    v18 = (char *)a1[2];
    v17 = (char **)(a1 + 2);
    InternalErrorMessage = v18;
    if (!v18)
      InternalErrorMessage = generateInternalErrorMessage(v17, v19);
    *a7 = InternalErrorMessage;
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", v9, v10, v11, v12, v13, v14, (char)InternalErrorMessage);
    return 1;
  }
  return result;
}

void AGCEnv::getStatusVariables(AGCEnv *this)
{
  unsigned __int8 v1;
  uint64_t v2;

  if ((v1 & 1) == 0)
  {
    {
      AGCEnv::getStatusVariables(void)::status_vars = (uint64_t)operator new(0x128uLL);
      v2 = AGCEnv::getStatusVariables(void)::status_vars + 296;
      qword_1ED839C40 = AGCEnv::getStatusVariables(void)::status_vars + 296;
      memcpy((void *)AGCEnv::getStatusVariables(void)::status_vars, off_1E7E60880, 0x128uLL);
      qword_1ED839C38 = v2;
      __cxa_atexit((void (*)(void *))std::vector<char const*>::~vector[abi:nn180100], &AGCEnv::getStatusVariables(void)::status_vars, &dword_1C3C54000);
    }
  }
}

uint64_t std::vector<char const*>::~vector[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::map<std::string,std::string>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t AGCEnv::getOSLog(AGCEnv *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;

  v2 = &qword_1ED839000;
  if ((v1 & 1) == 0)
  {
    v2 = &qword_1ED839000;
    if (v4)
    {
      AGCEnv::getOSLog(void)::log = (uint64_t)os_log_create("com.apple.agx", "AGCEnv");
      v2 = &qword_1ED839000;
    }
  }
  return v2[393];
}

uint64_t GLCompilerLogBuildRequestInternal(const void *a1, size_t a2, const char *a3, const char *a4, unsigned int *a5)
{
  void *v10;
  void *v11;
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v17;

  if (!a2)
    return 1;
  v17 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX"), 1, 0, &v17) & 1) == 0)
  {
    syslog(3, "Unable to create log directory");
    return 0;
  }
  v10 = (void *)MEMORY[0x1E0CB3940];
  if (getFileDateFormatter(void)::onceToken != -1)
    dispatch_once(&getFileDateFormatter(void)::onceToken, &__block_literal_global);
  v11 = (void *)objc_msgSend(v10, "stringWithFormat:", CFSTR("%@/%s_%@_%s.log"), CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX"), a3, objc_msgSend((id)getFileDateFormatter(void)::formatter, "stringFromDate:", objc_msgSend(MEMORY[0x1E0C99D68], "date")), a4);
  v12 = fopen((const char *)objc_msgSend(v11, "UTF8String"), "wb");
  if (!v12)
  {
    objc_msgSend(v11, "UTF8String");
    syslog(3, "Failure to create log file: %s");
    return 0;
  }
  v13 = v12;
  if (a5 && fwrite(a5, 1uLL, 4uLL, v12) != 4 || (v14 = 1, v15 = fwrite(a1, 1uLL, a2, v13), fclose(v13), v15 != a2))
  {
    objc_msgSend(v11, "UTF8String");
    syslog(3, "Failed to write log file (wrote %zu bytes, expected %zu bytes): %s");
    return 0;
  }
  return v14;
}

uint64_t ___ZL20getFileDateFormatterv_block_invoke()
{
  getFileDateFormatter(void)::formatter = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend((id)getFileDateFormatter(void)::formatter, "setDateStyle:", 1);
  return objc_msgSend((id)getFileDateFormatter(void)::formatter, "setDateFormat:", CFSTR("yyyy_MM_dd_HH_mm_ssZZZ"));
}

uint64_t `anonymous namespace'::reportError(uint64_t a1)
{
  FILE **v2;
  const char *v3;

  v2 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("Error occured during IR replacement\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  return fprintf(*v2, "%s\n", v3);
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void ___ZN12_GLOBAL__N_120AGCReplacementIRInfoC2Ev_block_invoke()
{
  _QWORD *v0;
  const char *v1;
  int v2;
  _QWORD *Value;
  const char *v4;
  const std::string::value_type *v5;
  const char *v6;
  _BOOL4 v7;
  int v8;
  off_t st_size;
  char *v10;
  char *v11;
  uint64_t **v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t **v21;
  const char *v22;
  std::string *p_s;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  BOOL v32;
  std::string::size_type *v33;
  const char *v34;
  std::string::size_type *v35;
  std::string::size_type *v36;
  std::string::size_type *v37;
  char *v38;
  std::string *v39;
  _QWORD *v40;
  void *v41;
  size_t v42;
  char *v43;
  std::string v44[2];
  std::string __s;
  std::string v46;
  std::string v47;
  std::string __dst;
  std::string::size_type v49;
  stat __p[2];
  _QWORD v51[21];

  v51[19] = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)operator new();
  v0[2] = 0;
  v0[1] = 0;
  *v0 = v0 + 1;
  v2 = MGGetBoolAnswer();
  Value = 0;
  if (v2)
    Value = AGCEnv::getValue((AGCEnv *)"AGC_IR_REPLACEMENT_STATUS_FILE", v1);
  if ((MGGetBoolAnswer() & 1) == 0)
  {
      return;
    v7 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  v5 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_IR_REPLACEMENT_HASHES_FILE", v4);
    v7 = v5 != 0;
  else
    v7 = 0;
  {
LABEL_12:
    std::string::basic_string[abi:nn180100]<0>(__p, "Either AGC_IR_REPLACEMENT_STATUS_FILE or AGC_IR_REPLACEMENT_HASHES_FILE was set, but the other was not. These two environment variables must be set in tandem");
    if (SHIBYTE(__p[0].st_gid) < 0)
    {
      operator delete(*(void **)&__p[0].st_dev);
      if (!v7)
        return;
    }
    else if (!v7)
    {
      return;
    }
    goto LABEL_17;
  }
  if (!v7)
    return;
LABEL_17:
  v8 = open(v6, 0);
  memset(__p, 0, 144);
  fstat(v8, __p);
  st_size = __p[0].st_size;
  if (__p[0].st_size)
  {
    v10 = (char *)mmap(0, __p[0].st_size, 1, 1, v8, 0);
    if (v10 == (char *)-1)
      v11 = 0;
    else
      v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  close(v8);
  v41 = v11;
  v42 = st_size;
  v43 = v11;
  v14 = MEMORY[0x1E0DE4FA8];
  v15 = MEMORY[0x1E0DE4FA8] + 64;
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v51[0] = MEMORY[0x1E0DE4FA8] + 64;
  *(_QWORD *)&__p[0].st_dev = v16;
  *(_QWORD *)((char *)&__p[0].st_dev + *(_QWORD *)(v16 - 24)) = v17;
  __p[0].st_ino = 0;
  v18 = (std::ios_base *)((char *)__p + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24));
  std::ios_base::init(v18, &__p[0].st_uid);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  *(_QWORD *)&__p[0].st_dev = v14 + 24;
  v51[0] = v15;
  MEMORY[0x1CAA2D50C](&__p[0].st_uid);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)), *(_DWORD *)((char *)&__p[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) | 4);
  if (!__p[0].st_qspare[1])
  {
    std::string::basic_string[abi:nn180100]<0>(v44, "Unable to open file: ");
    v19 = std::string::append(v44, v5);
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[0].__r_.__value_.__l.__data_);
  }
  memset(&__s, 0, sizeof(__s));
  v21 = v12 + 1;
  v22 = "Unable to find hash";
  while (1)
  {
    std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&__s, 0xAu);
    if ((*((_BYTE *)&__p[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) & 5) != 0)
      break;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      p_s = &__s;
LABEL_34:
      strlen((const char *)p_s);
      goto LABEL_35;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__r.__words[0])
      goto LABEL_34;
LABEL_35:
    if (llvm::StringRef::find() == -1)
    {
      v27 = (char *)v22;
    }
    else
    {
      v24 = llvm::StringRef::find();
      if (v24 != -1)
      {
        v25 = v24 + 17;
        v26 = llvm::StringRef::find();
        if (v26 != -1)
        {
          std::string::basic_string[abi:nn180100](&__dst, &v43[v25], v26 - v25);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v46, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v46 = __s;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v47, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            v44[0] = v46;
            v44[1] = v47;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
          }
          else
          {
            v47 = __dst;
            v44[0] = v46;
            v44[1] = __dst;
          }
          goto LABEL_45;
        }
      }
      v27 = "Unable to find starting location of the replacement IR";
    }
    std::string::basic_string[abi:nn180100]<0>(&v46, v27);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    memset(v44, 0, sizeof(v44));
LABEL_45:
    if (v21 != (uint64_t **)v13 && !std::less<std::string>::operator()[abi:nn180100](v44, (_QWORD *)(v13 + 32)))
    {
      if (std::less<std::string>::operator()[abi:nn180100]((_QWORD *)(v13 + 32), v44))
      {
        v34 = v22;
        v35 = *(std::string::size_type **)(v13 + 8);
        v36 = v35;
        v37 = (std::string::size_type *)v13;
        if (v35)
        {
          do
          {
            v33 = v36;
            v36 = (std::string::size_type *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v33 = (std::string::size_type *)v37[2];
            v32 = *v33 == (_QWORD)v37;
            v37 = v33;
          }
          while (!v32);
        }
        if (v33 == (std::string::size_type *)v21 || std::less<std::string>::operator()[abi:nn180100](v44, v33 + 4))
        {
          if (v35)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          }
          else
          {
            __dst.__r_.__value_.__r.__words[0] = v13;
            v33 = (std::string::size_type *)(v13 + 8);
          }
        }
        else
        {
          v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v12, &__dst, v44);
        }
        v22 = v34;
LABEL_77:
        v13 = *v33;
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = v13;
        v49 = v13;
        v33 = &v49;
      }
      v38 = (char *)v13;
      v13 = (std::string::size_type)v33;
      if (v38)
        goto LABEL_83;
      goto LABEL_79;
    }
    v28 = *(uint64_t **)v13;
    v29 = (_QWORD *)v13;
    if (*v12 != (uint64_t *)v13)
    {
      v30 = *(uint64_t **)v13;
      v31 = (_QWORD *)v13;
      if (v28)
      {
        do
        {
          v29 = v30;
          v30 = (uint64_t *)v30[1];
        }
        while (v30);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v31[2];
          v32 = *v29 == (_QWORD)v31;
          v31 = v29;
        }
        while (v32);
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v29 + 4, v44))
      {
        v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v12, &__dst, v44);
        goto LABEL_77;
      }
    }
    if (v28)
    {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      v33 = v29 + 1;
      goto LABEL_77;
    }
    __dst.__r_.__value_.__r.__words[0] = v13;
LABEL_79:
    v38 = (char *)operator new(0x50uLL);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v46.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 1);
    v39 = (std::string *)(v38 + 32);
    if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v39, v44[0].__r_.__value_.__l.__data_, v44[0].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v44[0].__r_.__value_.__l.__data_;
      *((_QWORD *)v38 + 6) = *((_QWORD *)&v44[0].__r_.__value_.__l + 2);
    }
    *(std::string *)(v38 + 56) = v44[1];
    memset(&v44[1], 0, sizeof(std::string));
    v46.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v12, (uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t **)v13, (uint64_t *)v38);
    v46.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100]((uint64_t)&v46);
LABEL_83:
    v40 = (_QWORD *)*((_QWORD *)v38 + 1);
    if (v40)
    {
      do
      {
        v13 = (std::string::size_type)v40;
        v40 = (_QWORD *)*v40;
      }
      while (v40);
    }
    else
    {
      do
      {
        v13 = *((_QWORD *)v38 + 2);
        v32 = *(_QWORD *)v13 == (_QWORD)v38;
        v38 = (char *)v13;
      }
      while (!v32);
    }
    if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)&__p[0].st_dev = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&__p[0].st_dev + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                  + 24);
  MEMORY[0x1CAA2D518](&__p[0].st_uid);
  std::istream::~istream();
  MEMORY[0x1CAA2D638](v51);
  if (v41)
    munmap(v41, v42);
}

BOOL validateUserLocalMemoryUsage(unsigned int __val, unsigned int a2, std::string *a3)
{
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string __p;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  uint64_t v28;

  if (__val > a2)
  {
    std::to_string(&v22, __val);
    v6 = std::string::insert(&v22, 0, "Threadgroup memory size (");
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v23, ") ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v24, "exceeds the maximum threadgroup memory allowed (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v25, (const std::string::value_type *)p_p, size);
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v26, ")");
    v17 = v16->__r_.__value_.__r.__words[2];
    v27 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v28 >= 0)
      v18 = (const std::string::value_type *)&v27;
    else
      v18 = (const std::string::value_type *)v27;
    if (v28 >= 0)
      v19 = HIBYTE(v28);
    else
      v19 = *((_QWORD *)&v27 + 1);
    std::string::append(a3, v18, v19);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  return __val <= a2;
}

uint64_t validateUserMeshLocalMemoryUsage(unsigned int a1, unsigned int __val, unsigned int a3, unsigned int a4, unsigned int a5, std::string *a6)
{
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  unsigned int v14;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  void *v31;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;

  if (a1 > a3)
  {
    std::to_string(&v58, a1);
    v8 = std::string::insert(&v58, 0, "Threadgroup memory size (");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v59, ") ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v60, "exceeds the maximum threadgroup memory allowed (");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = a3;
LABEL_5:
    std::to_string(&v57, v14);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v57;
    else
      v23 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      size = v57.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v61, (const std::string::value_type *)v23, size);
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v62, ")");
    v28 = v27->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v29 = (const std::string::value_type *)&v63;
    else
      v29 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v30 = HIBYTE(v64);
    else
      v30 = *((_QWORD *)&v63 + 1);
    std::string::append(a6, v29, v30);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v31 = (void *)v58.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if (__val > a4)
  {
    std::to_string(&v58, __val);
    v17 = std::string::insert(&v58, 0, "Total mesh size (");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v59, ") ");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v60, "exceeds the maximum mesh size allowed (");
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v14 = a4;
    goto LABEL_5;
  }
  if (__val + a1 <= a5)
    return 1;
  std::to_string(&v56, a1);
  v34 = std::string::insert(&v56, 0, "Threadgroup memory size and mesh size (");
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v57, " + ");
  v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v55, __val);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v55;
  else
    v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v39 = v55.__r_.__value_.__l.__size_;
  v40 = std::string::append(&v58, (const std::string::value_type *)v38, v39);
  v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v59, ") ");
  v43 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append(&v60, "exceed the maximum limit allowed (");
  v45 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v54, a5);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v54;
  else
    v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    v47 = v54.__r_.__value_.__l.__size_;
  v48 = std::string::append(&v61, (const std::string::value_type *)v46, v47);
  v49 = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v62, ")");
  v51 = v50->__r_.__value_.__r.__words[2];
  v63 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v64 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0)
    v52 = (const std::string::value_type *)&v63;
  else
    v52 = (const std::string::value_type *)v63;
  if (v64 >= 0)
    v53 = HIBYTE(v64);
  else
    v53 = *((_QWORD *)&v63 + 1);
  std::string::append(a6, v52, v53);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_31:
    operator delete(v31);
  }
  return 0;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMUserObject::isIntersectionFunctionBufferIntersectionFunction(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMAGPFragmentShader::getPCFStateForUnit(AGCLLVMAGPFragmentShader *this, char a2)
{
  return 16 * ((*((_DWORD *)this + 1469) >> a2) & 1u);
}

BOOL AGCLLVMAGPFragmentShader::needsPCFClamp(AGCLLVMAGPFragmentShader *this)
{
  return *((_DWORD *)this + 1469) != 0;
}

uint64_t AGCLLVMUserObject::disableGin1122SWWA(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserFragmentShader::usesCustomBorderColor(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 726) + 64) >> 2) & 1;
}

uint64_t AGCLLVMUserObject::supportComputeSplitDispatch(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::getDrawBufferState(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::buildGin1122WA(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserShader::getTileConstant()
{
  return 0;
}

const char *AGCLLVMUserFragmentShader::dumpType(AGCLLVMUserFragmentShader *this)
{
  return "fragment";
}

uint64_t AGCLLVMUserFragmentShader::getShaderType(AGCLLVMUserFragmentShader *this)
{
  return 6;
}

uint64_t AGCLLVMUserFragmentShader::getTextureWriteFPRoundingMode(AGCLLVMUserFragmentShader *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 726) + 64) >> 4) & 3;
}

uint64_t AGCLLVMUserFragmentShader::enableImgWBlkPBECmp(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 726) + 65) >> 1) & 1;
}

void AGCLLVMAGPFragmentShader::getFragmentViewportOrLayerIdVarying(_QWORD *a1@<X0>, const llvm::Type *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int ComponentType;
  unsigned int v12;

  if ((*(_DWORD *)(a1[726] + 64) & 0x100) != 0)
    v10 = 3;
  else
    v10 = 1;
  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), a2, &v12);
  AGCLLVMAGPFragmentShader::getFragmentVarying(a5, a1, (uint64_t)a2, a3, a4, v10, 3, 1, ComponentType, 0);
}

uint64_t AGCLLVMAGPFragmentShader::getPrimitiveIdVarying@<X0>(AGCLLVMAGPFragmentShader *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  int ComponentType;
  uint64_t result;
  unsigned int v7;

  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), a2, &v7);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = a3 + 56;
  *(_QWORD *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(_QWORD *)a3 = 0x100000001;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  result = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
  *(_QWORD *)(a3 + 32) = result;
  return result;
}

uint64_t AGCLLVMAGPFragmentShader::getBarycentricCoordVarying@<X0>(AGCLLVMUserShader *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t result;
  char v13;
  unsigned int v14;
  int v15;
  uint64_t v16[2];
  uint64_t v17;

  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  v14 = 0;
  AGCLLVMAGPFragmentShader::agpParseStageIOMetadata(a1, a3, v16, (int *)&v17 + 1, (int *)&v17, &v15, &v14, &v13);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    a2 = **(_QWORD **)(a2 + 16);
  if (v14 == 2 && a2 == *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 216))
    v8 = 5;
  else
    v8 = v14;
  v10 = v17;
  v9 = HIDWORD(v17);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = a4 + 56;
  *(_QWORD *)(a4 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a4 + 40, 5uLL, -559038737);
  *(_DWORD *)(a4 + 8) = v10;
  *(_DWORD *)(a4 + 12) = v8;
  *(_DWORD *)a4 = 2;
  *(_DWORD *)(a4 + 4) = v9;
  v11 = v9 != 0;
  *(_DWORD *)(a4 + 16) = v11;
  result = AGCLLVMUserFragmentShader::setupInterpolation(a1, 8, v11, 2u);
  *(_QWORD *)(a4 + 32) = result;
  return result;
}

uint64_t AGCLLVMAGPFragmentShader::replacePullMode_Or_ParentVertex_Index(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = llvm::ConstantInt::get();
  v5 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v6 = *(_QWORD *)(a2 + 24);
  v9 = 257;
  return llvm::IRBuilderBase::CreateCast(v5, 48, v4, v6, (uint64_t)v8);
}

void AGCLLVMAGPFragmentShader::setupPullMode_Or_ParentVertex_Globals(AGCLLVMAGPFragmentShader *this)
{
  uint64_t i;
  llvm::Type *v3;
  llvm::ArrayType *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t Impl;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[2];
  __int16 v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;

  v20 = (char *)this + 6448;
  v19 = (char *)this + 288;
  v31 = *MEMORY[0x1E0C80C00];
  v18 = (char *)this + 6488;
  v17 = (char *)this + 6608;
  v16 = (char *)this + 6768;
  for (i = 1; i != 5; ++i)
  {
    v3 = (llvm::Type *)*(unsigned int *)&v20[4 * i];
    if ((_DWORD)v3)
    {
      v4 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)&v19[*(_QWORD *)(*(_QWORD *)this - 24) + 32], (llvm::Type *)i);
      llvm::ArrayType::get(v4, v3);
      v5 = llvm::User::operator new((llvm::User *)0x58);
      v27 = "agc.pullmode_or_parentvertex_";
      v22 = v22 & 0xFFFFFFFF00000000 | i;
      v29 = v22;
      v30 = 2051;
      v24[0] = &v27;
      v25[0] = "_component_coefficients";
      v26 = 770;
      v6 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v6 + 80) |= 1u;
      v21 = v21 & 0xFFFFFFFFFFFF0000 | 0x104;
      llvm::GlobalObject::setAlignment();
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v18[24 * i], v5);
      v24[0] = v25;
      v24[1] = (void *)0x400000000;
      v7 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, v7);
      llvm::ConstantInt::get();
      v8 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v9 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v10 = llvm::ValueAsMetadata::get();
      v23 = i;
      v11 = &v17[32 * i];
      if (*((_DWORD *)v11 + 2))
      {
        v12 = v10;
        v13 = 0;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)&v16[32 * v23] + 4 * v13) == 1)
            v14 = (const char *)v8;
          else
            v14 = (const char *)v9;
          v28 = 0;
          v29 = 0;
          v27 = v14;
          llvm::ConstantInt::get();
          v28 = llvm::ValueAsMetadata::get();
          v29 = v12;
          Impl = llvm::MDTuple::getImpl();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, Impl);
          ++v13;
        }
        while (v13 < *((unsigned int *)v11 + 2));
      }
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v24[0] != v25)
        free(v24[0]);
      i = v23;
    }
  }
}

uint64_t AGCLLVMUserFragmentShader::getSupportExternalVisibleFunctions(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 726) + 64) >> 6) & 1;
}

uint64_t AGCLLVMAGPFragmentShader::buildPixelPositionInTile(AGCLLVMAGPFragmentShader *this, llvm::Type *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = *((_QWORD *)v5 + 50);
  v9 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v11 = *((_DWORD *)v5 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v6 + 256))(v6, &v9, a2, a3);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMAGPFragmentShader::getBufferBoundsCheckMode(AGCLLVMAGPFragmentShader *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 726) + 60) >> 4) & 7;
}

uint64_t AGCLLVMAGPFragmentShader::getForwardProgressMode(AGCLLVMAGPFragmentShader *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 726) + 60) >> 31;
}

BOOL AGCLLVMAGPFragmentShader::enableSoftFaultOptimization(AGCLLVMAGPFragmentShader *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 726) + 63) & 0x40) == 0;
}

uint64_t AGCLLVMAGPFragmentShader::isDMAPromotionDisabled(AGCLLVMAGPFragmentShader *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 726) + 60) >> 7;
}

uint64_t AGCLLVMAGPFragmentShader::setupPerPrimitiveVarying(AGCLLVMAGPFragmentShader *this)
{
  return 0;
}

void `non-virtual thunk to'AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShader *)((char *)this + 2608));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShader *)((char *)this + 2608));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMObject::getMainDeserializedReply(AGCLLVMObject *this)
{
  return (uint64_t)this + 472;
}

void `virtual thunk to'AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMObject::getObjectName(AGCLLVMObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 3271) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 406), *((_QWORD *)this + 407));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 203);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 408);
  }
}

const char *`virtual thunk to'AGCLLVMUserFragmentShader::dumpType(AGCLLVMUserFragmentShader *this)
{
  return "fragment";
}

uint64_t `virtual thunk to'AGCLLVMUserFragmentShader::getShaderType(AGCLLVMUserFragmentShader *this)
{
  return 6;
}

uint64_t `virtual thunk to'AGCLLVMUserFragmentShader::getSupportExternalVisibleFunctions(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120) + 5808) + 64) >> 6) & 1;
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShader::getForwardProgressMode(AGCLLVMAGPFragmentShader *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 5808) + 60) >> 31;
}

void `virtual thunk to'AGCLLVMAGPFragmentShader::getCompilationKeyDescription(AGCLLVMAGPFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  AGCLLVMAGPFragmentShader::getCompilationKeyDescription((AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShader::constructReply(AGCLLVMAGPFragmentShader *this)
{
  return AGCLLVMAGPFragmentShader::constructReply((AGCLLVMAGPFragmentShader *)((char *)this
                                                                             + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t AGCLLVMObject::getCompiledObject(AGCLLVMObject *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 58) + 152);
}

uint64_t AGCLLVMObject::getCompiledObjectSize(AGCLLVMObject *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 58) + 160);
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShader::getBufferBoundsCheckMode(AGCLLVMAGPFragmentShader *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 5808) + 60) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMAGPFragmentShader::enableSoftFaultOptimization(AGCLLVMAGPFragmentShader *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 5808) + 63) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShader::isDMAPromotionDisabled(AGCLLVMAGPFragmentShader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 5808) + 60) >> 7;
}

uint64_t `virtual thunk to'AGCLLVMUserFragmentShader::getTextureWriteFPRoundingMode(AGCLLVMUserFragmentShader *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 5808) + 64) >> 4) & 3;
}

uint64_t `virtual thunk to'AGCLLVMUserFragmentShader::enableImgWBlkPBECmp(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 5808) + 65) >> 1) & 1;
}

uint64_t AGCLLVMObject::getSupportExternalVisibleFunctions(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::getForwardProgressMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::getBufferBoundsCheckMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::enableSoftFaultOptimization(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::isDMAPromotionDisabled(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::enableImgWBlkPBECmp(AGCLLVMObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::adjustDfDyForInversion(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMUserObject::improveDMAPromotionOpportunity(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::hasSamplerImplicitDerivatives(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::supportsConstantSamplers(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::usesCustomBorderColor(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::debugTraceBufferEnabled(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserFragmentShader::detectSideEffects(AGCLLVMUserFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::replacePullMode_Or_ParentVertex_Index()
{
  return 0;
}

void std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 3) = 257;
  *((_BYTE *)this + 16) = 1;
  *(_QWORD *)((char *)this + 17) = 0;
  *((_BYTE *)this + 25) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 4, "std::unique_ptr");
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 14, "T");
  *((_WORD *)this + 68) = 1;
  *((_BYTE *)this + 138) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)((char *)this + 165) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 42, "_generated");
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 1;
  *((_QWORD *)this + 49) = 0;
  *((_WORD *)this + 200) = 257;
  return this;
}

flatbuffers::Parser *flatbuffers::Parser::Parser(flatbuffers::Parser *this, const flatbuffers::IDLOptions *a2)
{
  char *v4;
  char *v5;
  _OWORD *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int16 v16;
  std::string *v17;
  __int128 v18;
  int v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  __int16 v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  std::string *v30;
  uint64_t v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void *__p[2];
  char v57;

  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 2) = 0xFFFFFFFF00000000;
  *((_BYTE *)this + 24) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  v4 = (char *)this + 232;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_BYTE *)this + 344) = 0;
  *((_OWORD *)this + 22) = xmmword_1C3E37B60;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 1;
  *((_WORD *)this + 208) = 256;
  v5 = (char *)this + 432;
  *((_QWORD *)this + 53) = 0;
  v6 = operator new(0x100uLL);
  *((_QWORD *)v4 + 27) = v6 + 16;
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v4[248] = 0;
  *((_QWORD *)v4 + 30) = 0;
  *((_OWORD *)v4 + 14) = 0u;
  *(_QWORD *)(v4 + 252) = 7;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_QWORD *)v4 + 33) = v5 + 72;
  *(_OWORD *)(v5 + 104) = 0u;
  *((_QWORD *)v4 + 36) = v5;
  *((_QWORD *)v4 + 37) = v5 + 104;
  *((_QWORD *)v4 + 25) = v6;
  *((_QWORD *)v4 + 26) = v6;
  *((_QWORD *)v4 + 40) = v5;
  *((_QWORD *)v4 + 41) = 0;
  *((_WORD *)v4 + 168) = 0;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 340) = 0u;
  *(_OWORD *)(v4 + 356) = 0u;
  *(_OWORD *)(v4 + 372) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  *((_QWORD *)v4 + 50) = v4 + 408;
  *((_OWORD *)v4 + 27) = 0u;
  *((_QWORD *)v4 + 53) = v4 + 432;
  *((_OWORD *)v4 + 28) = 0u;
  *((_QWORD *)v4 + 60) = 0;
  *((_QWORD *)v4 + 61) = 0;
  *((_QWORD *)v4 + 58) = 0;
  *((_QWORD *)v4 + 59) = v4 + 480;
  v7 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 506) = *(_OWORD *)((char *)a2 + 10);
  *((_OWORD *)v4 + 31) = v7;
  v8 = (std::string *)(v4 + 528);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 2);
    *((_QWORD *)v4 + 68) = *((_QWORD *)a2 + 6);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = (std::string *)((char *)this + 784);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 100) = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)this + 202) = *((_DWORD *)a2 + 20);
  v12 = (std::string *)((char *)this + 816);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v14 = (std::string *)((char *)this + 840);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v15 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 107) = *((_QWORD *)a2 + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v16 = *((_WORD *)a2 + 68);
  *((_BYTE *)this + 866) = *((_BYTE *)a2 + 138);
  *((_WORD *)this + 432) = v16;
  v17 = (std::string *)((char *)this + 872);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 111) = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  v19 = *((_DWORD *)a2 + 42);
  *((_BYTE *)this + 900) = *((_BYTE *)a2 + 172);
  *((_DWORD *)this + 224) = v19;
  v20 = (std::string *)((char *)this + 904);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v21 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 115) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v22 = (std::string *)((char *)this + 928);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v23 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 118) = *((_QWORD *)a2 + 27);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  *((_DWORD *)this + 238) = *((_DWORD *)a2 + 56);
  v24 = (std::string *)((char *)this + 960);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v25 = *(_OWORD *)((char *)a2 + 232);
    *((_QWORD *)this + 122) = *((_QWORD *)a2 + 31);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  v26 = *((_WORD *)a2 + 128);
  *((_BYTE *)this + 986) = *((_BYTE *)a2 + 258);
  *((_WORD *)this + 492) = v26;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
  v27 = (__int128 *)*((_QWORD *)a2 + 33);
  v28 = (__int128 *)*((_QWORD *)a2 + 34);
  if (v28 != v27)
  {
    v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3);
    if (v29 >= 0xAAAAAAAAAAAAAABLL)
      goto LABEL_119;
    v30 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v29);
    *((_QWORD *)this + 124) = v30;
    *((_QWORD *)this + 125) = v30;
    *((_QWORD *)this + 126) = &v30[v31];
    do
    {
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
      }
      else
      {
        v32 = *v27;
        v30->__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
      }
      v27 = (__int128 *)((char *)v27 + 24);
      ++v30;
    }
    while (v27 != v28);
    *((_QWORD *)this + 125) = v30;
  }
  v33 = (std::string *)((char *)this + 1016);
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v34 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 129) = *((_QWORD *)a2 + 38);
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
  }
  v35 = (std::string *)((char *)this + 1040);
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v35, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v36 = *(_OWORD *)((char *)a2 + 312);
    *((_QWORD *)this + 132) = *((_QWORD *)a2 + 41);
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
  }
  v37 = (std::string *)((char *)this + 1064);
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external(v37, *((const std::string::value_type **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v38 = *((_OWORD *)a2 + 21);
    *((_QWORD *)this + 135) = *((_QWORD *)a2 + 44);
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
  }
  v39 = (std::string *)((char *)this + 1088);
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v39, *((const std::string::value_type **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v40 = *(_OWORD *)((char *)a2 + 360);
    *((_QWORD *)this + 138) = *((_QWORD *)a2 + 47);
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
  }
  v41 = *((_OWORD *)a2 + 24);
  *((_WORD *)this + 564) = *((_WORD *)a2 + 200);
  *(_OWORD *)((char *)this + 1112) = v41;
  *((_BYTE *)this + 1136) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  if (*((_BYTE *)this + 984))
    *((_BYTE *)this + 416) = 1;
  v42 = (_OWORD *)operator new();
  v43 = v42;
  *v42 = 0u;
  v42[1] = 0u;
  *((_QWORD *)this + 38) = v42;
  v45 = (_QWORD *)*((_QWORD *)this + 35);
  v44 = *((_QWORD *)this + 36);
  if ((unint64_t)v45 < v44)
  {
    *v45 = v42;
    v46 = v45 + 1;
    goto LABEL_64;
  }
  v47 = (_QWORD *)*((_QWORD *)this + 34);
  v48 = v45 - v47;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_119:
    abort();
  v50 = v44 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v52 = (char *)operator new(8 * v51);
  }
  else
  {
    v52 = 0;
  }
  v53 = &v52[8 * v48];
  *(_QWORD *)v53 = v43;
  v46 = v53 + 8;
  if (v45 != v47)
  {
    do
    {
      v54 = *--v45;
      *((_QWORD *)v53 - 1) = v54;
      v53 -= 8;
    }
    while (v45 != v47);
    v45 = (_QWORD *)*((_QWORD *)this + 34);
  }
  *((_QWORD *)this + 34) = v53;
  *((_QWORD *)this + 35) = v46;
  *((_QWORD *)this + 36) = &v52[8 * v51];
  if (v45)
    operator delete(v45);
LABEL_64:
  *((_QWORD *)this + 35) = v46;
  *((_QWORD *)this + 37) = *((_QWORD *)this + 38);
  std::string::basic_string[abi:nn180100]<0>(__p, "deprecated");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "required");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "key");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "shared");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "hash");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "id");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "force_align");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "bit_flags");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "bit_flags_all");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "bit_flags_none");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "original_order");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "nested_flatbuffer");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "csharp_partial");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "streaming");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "idempotent");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "cpp_type");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "cpp_ptr_type");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "cpp_ptr_type_get");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "cpp_str_type");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "cpp_str_flex_ctor");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "native_inline");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "native_custom_alloc");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "native_type");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "native_default");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "flexbuffer");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "private");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "apple_internal");
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4 + 59, __p, (uint64_t)__p)+ 56) = 1;
  if (v57 < 0)
    operator delete(__p[0]);
  return this;
}

void flatbuffers::IDLOptions::~IDLOptions(void **this)
{
  void **v2;

  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  v2 = this + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void flatbuffers::Parser::~Parser(flatbuffers::Parser *this)
{
  void ***v2;
  void ***v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;

  v3 = (void ***)*((_QWORD *)this + 34);
  v2 = (void ***)*((_QWORD *)this + 35);
  while (v3 != v2)
  {
    v4 = *v3;
    if (*v3)
    {
      v32 = *v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
      MEMORY[0x1CAA2D68C](v4, 0x1020C4016EE4530);
      v2 = (void ***)*((_QWORD *)this + 35);
    }
    ++v3;
  }
  v5 = *((_QWORD *)this + 147);
  if (v5)
  {
    v6 = *((_QWORD *)this + 148);
    v7 = (void *)*((_QWORD *)this + 147);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        v6 -= 72;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 147);
    }
    *((_QWORD *)this + 148) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 1175) < 0)
    operator delete(*((void **)this + 144));
  flatbuffers::IDLOptions::~IDLOptions((void **)this + 91);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 89));
  v32 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((char **)this + 83));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 80));
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 67));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 63));
  v8 = (void *)*((_QWORD *)this + 57);
  if (v8)
  {
    *((_QWORD *)this + 58) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 54);
  if (v9)
  {
    *((_QWORD *)this + 55) = v9;
    operator delete(v9);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::Parser *)((char *)this + 336));
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  v10 = (void *)*((_QWORD *)this + 34);
  if (v10)
  {
    *((_QWORD *)this + 35) = v10;
    operator delete(v10);
  }
  v12 = (uint64_t *)*((_QWORD *)this + 31);
  v11 = (uint64_t *)*((_QWORD *)this + 32);
  if (v12 != v11)
  {
    do
    {
      v13 = *v12;
      if (*v12)
      {
        v15 = *(uint64_t **)(v13 + 176);
        v14 = *(uint64_t **)(v13 + 184);
        if (v15 != v14)
        {
          do
          {
            v16 = *v15;
            if (*v15)
            {
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v16 + 72);
              v32 = (void **)(v16 + 48);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v16 + 47) < 0)
                operator delete(*(void **)(v16 + 24));
              if (*(char *)(v16 + 23) < 0)
                operator delete(*(void **)v16);
              MEMORY[0x1CAA2D68C](v16, 0x10B2C40EE200C30);
              v14 = *(uint64_t **)(v13 + 184);
            }
            ++v15;
          }
          while (v15 != v14);
          v15 = *(uint64_t **)(v13 + 176);
        }
        if (v15)
        {
          *(_QWORD *)(v13 + 184) = v15;
          operator delete(v15);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v13 + 160));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v13 + 72);
        v32 = (void **)(v13 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v13 + 47) < 0)
          operator delete(*(void **)(v13 + 24));
        if (*(char *)(v13 + 23) < 0)
          operator delete(*(void **)v13);
        MEMORY[0x1CAA2D68C](v13, 0x10B2C401A85D49FLL);
        v11 = (uint64_t *)*((_QWORD *)this + 32);
      }
      ++v12;
    }
    while (v12 != v11);
    v12 = (uint64_t *)*((_QWORD *)this + 31);
  }
  if (v12)
  {
    *((_QWORD *)this + 32) = v12;
    operator delete(v12);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 29));
  v18 = (uint64_t *)*((_QWORD *)this + 25);
  v17 = (uint64_t *)*((_QWORD *)this + 26);
  if (v18 != v17)
  {
    do
    {
      v19 = *v18;
      if (*v18)
      {
        v21 = *(uint64_t **)(v19 + 208);
        v20 = *(uint64_t **)(v19 + 216);
        if (v21 != v20)
        {
          do
          {
            v22 = *v21;
            if (*v21)
            {
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v22 + 88);
              v32 = (void **)(v22 + 24);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v22 + 23) < 0)
                operator delete(*(void **)v22);
              MEMORY[0x1CAA2D68C](v22, 0x10B2C4072A4B994);
              v20 = *(uint64_t **)(v19 + 216);
            }
            ++v21;
          }
          while (v21 != v20);
          v21 = *(uint64_t **)(v19 + 208);
        }
        if (v21)
        {
          *(_QWORD *)(v19 + 216) = v21;
          operator delete(v21);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v19 + 192));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v19 + 72);
        v32 = (void **)(v19 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v19 + 47) < 0)
          operator delete(*(void **)(v19 + 24));
        if (*(char *)(v19 + 23) < 0)
          operator delete(*(void **)v19);
        MEMORY[0x1CAA2D68C](v19, 0x10B2C409EE52067);
        v17 = (uint64_t *)*((_QWORD *)this + 26);
      }
      ++v18;
    }
    while (v18 != v17);
    v18 = (uint64_t *)*((_QWORD *)this + 25);
  }
  if (v18)
  {
    *((_QWORD *)this + 26) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 23));
  v24 = (uint64_t *)*((_QWORD *)this + 19);
  v23 = (uint64_t *)*((_QWORD *)this + 20);
  if (v24 != v23)
  {
    do
    {
      v25 = *v24;
      if (*v24)
      {
        v26 = *(_QWORD *)(v25 + 224);
        *(_QWORD *)(v25 + 224) = 0;
        if (v26)
        {
          if (*(char *)(v26 + 23) < 0)
            operator delete(*(void **)v26);
          MEMORY[0x1CAA2D68C](v26, 0x1012C40EC159624);
        }
        v28 = *(uint64_t **)(v25 + 176);
        v27 = *(uint64_t **)(v25 + 184);
        if (v28 != v27)
        {
          do
          {
            v29 = *v28;
            if (*v28)
            {
              if (*(char *)(v29 + 207) < 0)
                operator delete(*(void **)(v29 + 184));
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v29 + 72);
              v32 = (void **)(v29 + 48);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v29 + 47) < 0)
                operator delete(*(void **)(v29 + 24));
              if (*(char *)(v29 + 23) < 0)
                operator delete(*(void **)v29);
              MEMORY[0x1CAA2D68C](v29, 0x10B2C40559199D4);
              v27 = *(uint64_t **)(v25 + 184);
            }
            ++v28;
          }
          while (v28 != v27);
          v28 = *(uint64_t **)(v25 + 176);
        }
        if (v28)
        {
          *(_QWORD *)(v25 + 184) = v28;
          operator delete(v28);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v25 + 160));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v25 + 72);
        v32 = (void **)(v25 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v25 + 47) < 0)
          operator delete(*(void **)(v25 + 24));
        if (*(char *)(v25 + 23) < 0)
          operator delete(*(void **)v25);
        MEMORY[0x1CAA2D68C](v25, 0x10B2C4058EA06FBLL);
        v23 = (uint64_t *)*((_QWORD *)this + 20);
      }
      ++v24;
    }
    while (v24 != v23);
    v24 = (uint64_t *)*((_QWORD *)this + 19);
  }
  if (v24)
  {
    *((_QWORD *)this + 20) = v24;
    operator delete(v24);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  v31 = (_QWORD *)*((_QWORD *)this + 13);
  v30 = (_QWORD *)*((_QWORD *)this + 14);
  if (v31 != v30)
  {
    do
    {
      if (*v31)
      {
        MEMORY[0x1CAA2D68C](*v31, 0x1020C4001A1C0B8);
        v30 = (_QWORD *)*((_QWORD *)this + 14);
      }
      ++v31;
    }
    while (v31 != v30);
    v31 = (_QWORD *)*((_QWORD *)this + 13);
  }
  if (v31)
  {
    *((_QWORD *)this + 14) = v31;
    operator delete(v31);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 11));
  v32 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0)
          operator delete(*(void **)(v4 + 32));
        MEMORY[0x1CAA2D68C](v4, 0x1032C40E9BF265ALL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v8, a2))
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_BYTE *)v6 + 56) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v9 = (uint64_t *)v6;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

const char *AGCEnv::getBool(AGCEnv *this, const char *a2)
{
  const char *result;

  result = (const char *)AGCEnv::getValue(this, a2);
  if (result)
  {
    if (*result == 48)
      return 0;
    else
      return (const char *)(atoi(result) != 0);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a1);
}

uint64_t printHexDump(char **a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, int a6)
{
  uint64_t result;
  char *v12;
  const std::locale::facet *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  char *v22;
  std::locale::id *v23;
  const std::locale::facet *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  _QWORD v27[13];
  char v28;
  uint64_t v29;
  std::locale v30;

  result = isValidToPrintMessage(a1);
  if ((_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
    if (a6)
    {
      v12 = *a1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"{", 1);
      std::ios_base::getloc((const std::ios_base *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 24)]);
      v13 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
    }
    if (a3)
    {
      v14 = 0;
      v15 = a4;
      v16 = a4 - 1;
      do
      {
        if (a6 && !(v14 % v15))
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\t", 1);
        v17 = *a1;
        v18 = strlen(a5);
        v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)a5, v18);
        *(_QWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 24) + 24] = 2;
        std::operator<<[abi:nn180100]<std::char_traits<char>>(v19, 48);
        *(_DWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 24) + 8] = *(_DWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 24) + 8] & 0xFFFFFFB5 | 8;
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
        if (v14 % v15 == v16)
        {
          std::ios_base::getloc((const std::ios_base *)&(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 24)]);
          v21 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
          std::locale::~locale(&v30);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v14;
      }
      while (a3 != v14);
    }
    if ((a6 & 1) != 0)
    {
      v22 = *a1;
      std::ios_base::getloc((const std::ios_base *)&(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 24)]);
      v23 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      v24 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"}", 1);
      std::ios_base::getloc((const std::ios_base *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 24)]);
      v25 = std::locale::use_facet(&v30, v23);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
    }
    std::ostream::flush();
    v27[0] = *MEMORY[0x1E0DE4F50];
    v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v27[2] = v26;
    v27[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete((void *)v27[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1CAA2D638](&v29);
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

_QWORD *std::operator<<[abi:nn180100]<std::char_traits<char>>(_QWORD *a1, char a2)
{
  char *v4;
  const std::locale::facet *v5;
  std::locale v7;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = std::string::basic_string[abi:nn180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 65));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void llvm::SmallVectorTemplateBase<GenericVarying,false>::grow(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2;
  v4 = (char *)*a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = &v4[64 * v5];
    v7 = v2;
    do
    {
      v8 = *(_OWORD *)v4;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)v7 = v8;
      v9 = *(_OWORD *)(v4 + 24);
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v4 + 5);
      *(_OWORD *)(v7 + 24) = v9;
      *((_QWORD *)v4 + 4) = 0;
      *((_QWORD *)v4 + 5) = 0;
      *((_QWORD *)v4 + 3) = 0;
      *(_OWORD *)(v7 + 48) = *((_OWORD *)v4 + 3);
      v4 += 64;
      v7 += 64;
    }
    while (v4 != v6);
    v4 = (char *)*a1;
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        if (v4[v11 - 17] < 0)
          operator delete(*(void **)&v4[v11 - 40]);
        v11 -= 64;
      }
      while (v11);
      v4 = (char *)*a1;
    }
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = v3;
  *((_DWORD *)a1 + 3) = 0;
}

void GenericVarying::getComponentSemantic(std::string *a1, void *a2, size_t a3, unsigned int a4)
{
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string __dst;
  std::string v12;
  void *__p[2];
  char v14;

  std::string::basic_string[abi:nn180100]<0>(__p, "xyzw");
  if (a2)
    std::string::basic_string[abi:nn180100](&__dst, a2, a3);
  else
    memset(&__dst, 0, sizeof(__dst));
  v8 = std::string::append(&__dst, ".agc_comp.");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = __p;
  if (v14 < 0)
    v10 = (void **)__p[0];
  std::string::push_back(&v12, *((_BYTE *)v10 + a4));
  *a1 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(__p[0]);
}

void llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2;
  v4 = (char *)*a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = &v4[80 * v5];
    v7 = (_QWORD *)(v2 + 40);
    v8 = (uint64_t)(v4 + 40);
    do
    {
      v9 = *(_OWORD *)(v8 - 40);
      v10 = *(_QWORD *)(v8 - 8);
      *(_OWORD *)(v7 - 3) = *(_OWORD *)(v8 - 24);
      *(_OWORD *)(v7 - 5) = v9;
      *(v7 - 1) = v10;
      *v7 = v7 + 2;
      v7[1] = 0x500000000;
      if (*(_DWORD *)(v8 + 8))
        v7 = (_QWORD *)llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v7, v8);
      v11 = v8 - 40;
      v7 += 10;
      v8 += 80;
    }
    while ((char *)(v11 + 80) != v6);
    v12 = *((unsigned int *)a1 + 2);
    v4 = (char *)*a1;
    if ((_DWORD)v12)
    {
      v13 = 80 * v12;
      do
      {
        v14 = *(char **)&v4[v13 - 40];
        if (&v4[v13 - 24] != v14)
          free(v14);
        v13 -= 80;
      }
      while (v13);
      v4 = (char *)*a1;
    }
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = v3;
  *((_DWORD *)a1 + 3) = 0;
}

llvm::Type *AGCLLVMBuilder::tryDeducePointeeType(llvm::Type **this, llvm::Value *a2)
{
  llvm::Type *v3;
  unsigned int v4;

  v3 = *this;
  if ((llvm::Type::isOpaquePointerTy(*this) & 1) == 0)
    return (llvm::Type *)**((_QWORD **)v3 + 2);
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0x1B)
  {
    if (v4 != 5)
    {
      if (v4 <= 3)
        return this[3];
      return 0;
    }
    if (*((_WORD *)this + 9) != 34)
      return 0;
    return (llvm::Type *)llvm::GEPOperator::getResultElementType((llvm::GEPOperator *)this);
  }
  if (v4 != 59)
  {
    if (v4 != 62)
      return 0;
    return (llvm::Type *)llvm::GEPOperator::getResultElementType((llvm::GEPOperator *)this);
  }
  return this[8];
}

uint64_t llvm::IRBuilderBase::CreateGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72)
                                                                                           + 48))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5, 0);
  if (!v12)
  {
    v12 = llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v12, a6);
  }
  return v12;
}

uint64_t AGCLLVMAGPFragmentShader::calculateInterpolationCoords(AGCLLVMAGPFragmentShader *this, unsigned int a2, llvm::Value *a3)
{
  uint64_t v5;
  char v6;
  char v7;
  char *v8;
  uint64_t v9;
  llvm::Type *v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t inserted;
  uint64_t v14;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  llvm::Value *FPToUI;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Type *v21;
  llvm::Value *UIToFP;
  char *v23;
  llvm::IRBuilderBase *v24;
  llvm::Value *v25;
  uint64_t Element;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t InsertElement;
  char *v31;
  llvm::Value *v32;
  llvm::IRBuilderBase *v33;
  llvm::Value *v34;
  char *v35;
  llvm::Value *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  char *v39;
  uint64_t FAdd;
  char v43;
  _BYTE v44[32];
  __int16 v45;
  _BYTE v46[32];
  __int16 v47;
  _QWORD v48[2];
  _QWORD v49[4];

  v49[2] = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
    llvm::FixedVectorType::get();
  v5 = 0;
  v49[0] = llvm::UndefValue::get();
  v49[1] = v49[0];
  v48[0] = v49[0];
  v48[1] = v49[0];
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = *((_QWORD *)v8 + 50);
    v10 = (llvm::Type *)*((_QWORD *)v8 + 28);
    v43 = v6;
    if (*(_BYTE *)(v9 + 1786))
    {
      v11 = 1584;
      if ((v7 & 1) != 0)
        v11 = 1576;
      if (*(_QWORD *)(v9 + v11))
        strlen(*(const char **)(v9 + v11));
      inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      v14 = *(_QWORD *)(*(_QWORD *)this - 24);
      v15 = (AGCLLVMAGPFragmentShader *)((char *)this + v14 + 40);
      v47 = 257;
      v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this + v14 + 40, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v46);
      v45 = 257;
      FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v15, v16, v10, (const llvm::Twine *)v44);
      v18 = (AGCLLVMAGPFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v19 = (llvm::Value *)llvm::ConstantInt::get();
      v47 = 257;
      v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v18, FPToUI, v19, (const llvm::Twine *)v46);
    }
    else
    {
      v12 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPFragmentShader *, llvm::Type *, uint64_t))(*(_QWORD *)this + 608))(this, v10, v5);
    }
    v20 = *(_QWORD *)(*(_QWORD *)this - 24);
    v21 = *(llvm::Type **)((char *)this + v20 + 200);
    v47 = 257;
    UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP((AGCLLVMAGPFragmentShader *)((char *)this + v20 + 40), v12, v21, (const llvm::Twine *)v46);
    v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v47 = 257;
    v24 = (llvm::IRBuilderBase *)(v23 + 40);
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v24, a3, v25, (const llvm::Twine *)v46);
    if (a2)
    {
      v27 = (llvm::Value *)Element;
      v28 = 0;
      do
      {
        v29 = (uint64_t)v27;
        InsertElement = (uint64_t)UIToFP;
        if (a2 >= 2)
        {
          v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v32 = (llvm::Value *)v49[v5];
          v47 = 257;
          v33 = (llvm::IRBuilderBase *)(v31 + 40);
          v34 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = llvm::IRBuilderBase::CreateInsertElement(v33, v32, UIToFP, v34, (const llvm::Twine *)v46);
          v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v36 = (llvm::Value *)v48[v5];
          v47 = 257;
          v37 = (llvm::IRBuilderBase *)(v35 + 40);
          v38 = (llvm::Value *)llvm::ConstantInt::get();
          v29 = llvm::IRBuilderBase::CreateInsertElement(v37, v36, v27, v38, (const llvm::Twine *)v46);
        }
        v49[v5] = InsertElement;
        v48[v5] = v29;
        ++v28;
      }
      while (a2 != v28);
    }
    else
    {
      InsertElement = v49[v5];
      v29 = v48[v5];
    }
    v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v47 = 257;
    FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)v39, InsertElement, v29, (uint64_t)v46);
    v6 = 0;
    v49[v5] = FAdd;
    v5 = 1;
  }
  while ((v43 & 1) != 0);
  return v49[0];
}

uint64_t AGCLLVMAGPFragmentShader::interpolateAtOffset(_QWORD *a1, _OWORD *a2, unsigned int a3, llvm::Type **a4, llvm::Value *a5)
{
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **GEP;
  char *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::Value *AlignedLoad;
  uint64_t i;
  char *v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  llvm::Value *Element;
  char *v23;
  llvm::Value *v24;
  llvm::IRBuilderBase *v25;
  llvm::Value *v26;
  uint64_t FAdd;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t FMul;
  char *v33;
  uint64_t v34;
  llvm::Value *v35;
  char *v36;
  AGCLLVMBuilder *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  AGCLLVMBuilder *v40;
  llvm::Value *v41;
  AGCLLVMBuilder *v42;
  llvm::Value *v43;
  AGCLLVMBuilder *v44;
  llvm::Value *v45;
  llvm::Type **v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Value *Cast;
  uint64_t v52;
  llvm::Value *v53;
  llvm::IRBuilderBase *v54;
  llvm::CmpInst **v55;
  llvm::IRBuilderBase *v56;
  llvm::Value *v57;
  llvm::CmpInst **LShr;
  llvm::IRBuilderBase *v59;
  llvm::CmpInst **v60;
  llvm::IRBuilderBase *v61;
  llvm::Value *v62;
  llvm::CmpInst **v63;
  uint64_t *v64;
  llvm::Value *v65;
  llvm::Value *ICmp;
  uint64_t *v67;
  llvm::Value *v68;
  uint64_t *v69;
  llvm::Value *v70;
  uint64_t *v71;
  llvm::Value *v72;
  llvm::IRBuilderBase *v73;
  llvm::Value *v74;
  llvm::IRBuilderBase *v75;
  llvm::Value *v76;
  llvm::IRBuilderBase *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *v80;
  llvm::IRBuilderBase *v81;
  llvm::Value *v82;
  _OWORD *v84;
  llvm::Value *v86;
  llvm::Value *v87;
  llvm::Value *v89;
  _BYTE v90[32];
  __int16 v91;
  uint64_t *v92[4];
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
  {
    v9 = llvm::UndefValue::get();
    v95 = v9;
    v96 = v9;
    v97 = v9;
    if (!a3)
    {
      FAdd = v9;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::FixedVectorType::get();
    v95 = llvm::UndefValue::get();
    v96 = v95;
    v97 = v95;
  }
  v84 = a2;
  v10 = 0;
  do
  {
    GEP = a4;
    if (*(_BYTE *)(**((_QWORD **)*a4 + 2) + 8) == 17)
    {
      v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v92[0] = (uint64_t *)llvm::ConstantInt::get();
      v92[1] = (uint64_t *)llvm::ConstantInt::get();
      v91 = 257;
      v14 = AGCLLVMBuilder::tryDeducePointeeType(a4, v13);
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v12 + 40), (uint64_t)v14, (uint64_t *)a4, v92, 2, (uint64_t)v90);
    }
    v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v91 = 257;
    v16 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v8);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v15 + 32), v16, (uint64_t)GEP, 0, (uint64_t)v90);
    for (i = 0; i != 3; ++i)
    {
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v91 = 257;
      v20 = (llvm::IRBuilderBase *)(v19 + 40);
      v21 = (llvm::Value *)llvm::ConstantInt::get();
      Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, AlignedLoad, v21, (const llvm::Twine *)v90);
      if (a3 >= 2)
      {
        v23 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v24 = (llvm::Value *)*(&v95 + i);
        v91 = 257;
        v25 = (llvm::IRBuilderBase *)(v23 + 40);
        v26 = (llvm::Value *)llvm::ConstantInt::get();
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v25, v24, Element, v26, (const llvm::Twine *)v90);
      }
      *(&v95 + i) = (uint64_t)Element;
    }
    ++v10;
  }
  while (v10 != a3);
  FAdd = v97;
  a2 = v84;
LABEL_13:
  v94 = *a2;
  for (j = 8; j != -8; j -= 8)
  {
    v29 = *(uint64_t *)((char *)&v95 + j);
    v30 = *(_QWORD *)((char *)&v94 + j);
    v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v91 = 257;
    FMul = llvm::IRBuilderBase::CreateFMul(v31, v29, v30, (uint64_t)v90);
    v91 = 257;
    FAdd = llvm::IRBuilderBase::CreateFAdd(v31, FMul, FAdd, (uint64_t)v90);
  }
  if (a5)
  {
    v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v34 = (uint64_t)(v33 + 40);
    v35 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v33 + 32), a3, a5);
    v91 = 257;
    FAdd = llvm::IRBuilderBase::CreateFDiv(v34, FAdd, (uint64_t)v35, (uint64_t)v90);
  }
  v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_BYTE *)(*((_QWORD *)v36 + 50) + 1773))
  {
    v37 = (AGCLLVMBuilder *)(v36 + 32);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v39 = AGCLLVMBuilder::splat(v37, a3, v38);
    v40 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    v41 = (llvm::Value *)llvm::ConstantInt::get();
    v87 = AGCLLVMBuilder::splat(v40, a3, v41);
    v42 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    v43 = (llvm::Value *)llvm::ConstantInt::get();
    v86 = AGCLLVMBuilder::splat(v42, a3, v43);
    v44 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    v45 = (llvm::Value *)llvm::ConstantInt::get();
    v89 = AGCLLVMBuilder::splat(v44, a3, v45);
    v46 = (llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24));
    llvm::Type::getFPMantissaWidth(v46[25]);
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    v48 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v46 + 4), a3, v47);
    v49 = *(_QWORD *)(*a1 - 24);
    v50 = *(_QWORD *)((char *)a1 + v49 + 232);
    if (a3 >= 2)
    {
      v50 = llvm::FixedVectorType::get();
      v49 = *(_QWORD *)(*a1 - 24);
    }
    v91 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v49 + 40, 49, v95, v50, (uint64_t)v90);
    v52 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v91 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v52, 49, v96, v50, (uint64_t)v90);
    v54 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v55 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v54, Cast, v39, (const llvm::Twine *)v90);
    v56 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v57 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v56, Cast, v87, (const llvm::Twine *)v90);
    v93 = 257;
    LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v56, v57, v48, (const llvm::Twine *)v92);
    v59 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v60 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v59, v53, v39, (const llvm::Twine *)v90);
    v61 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v61, v53, v87, (const llvm::Twine *)v90);
    v93 = 257;
    v63 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v61, v62, v48, (const llvm::Twine *)v92);
    v64 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v65 = (llvm::Value *)v55;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v64, 33, v55, (uint64_t)v86, (uint64_t)v90);
    v67 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v68 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v67, 32, LShr, (uint64_t)v86, (uint64_t)v90);
    v69 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v70 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v69, 33, v60, (uint64_t)v86, (uint64_t)v90);
    v71 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v71, 32, v63, (uint64_t)v86, (uint64_t)v90);
    v73 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v74 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v73, ICmp, v68, (const llvm::Twine *)v90);
    v75 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v76 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v75, v70, v72, (const llvm::Twine *)v90);
    v77 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v78 = llvm::IRBuilderBase::CreateAnd(v77, v65, v89, (const llvm::Twine *)v90);
    v79 = *(_QWORD *)v74;
    v93 = 257;
    v80 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v77, 38, v78, v79, (uint64_t)v92);
    v81 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v91 = 257;
    v82 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v81, v74, v76, (const llvm::Twine *)v90);
    v93 = 257;
    llvm::IRBuilderBase::CreateAnd(v81, v82, v80, (const llvm::Twine *)v92);
    v91 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return FAdd;
}

uint64_t llvm::IRBuilderBase::CreateFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = llvm::IRBuilderBase::foldConstant(a1, 21, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateUIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 43, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPToUI(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 41, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED8398A0) = qword_1ED8398A0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 25, 8);
  v9 = v8;
  v10 = v8 + 24;
  if (a2)
    memcpy((void *)(v8 + 24), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 10;
  *(_WORD *)(v9 + 20) = 1;
  *(_BYTE *)(v9 + 22) = -1;
  *i = v9;
  ++dword_1ED83989C;
  for (i = (uint64_t *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map));
        !*i || *i == -8;
  return i;
}

void AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getDrawBufferState(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return *((_QWORD *)this + 614);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildPixelPositionInTile(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v7 + 256))(v7, &v11, a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

void `non-virtual thunk to'AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 3000));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 3000));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShaderGen3::constructReply(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return AGCLLVMAGPFragmentShaderGen3::constructReply((AGCLLVMAGPFragmentShaderGen3 *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this
                                                                                                 - 152)));
}

uint64_t `virtual thunk to'AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit(AGCLLVMAGPFragmentShaderGen3 *this, unsigned int *a2)
{
  return AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildTileIndex(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  llvm::GlobalVariable *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t *v18;
  llvm::Type **v19;
  llvm::Type *v20;
  uint64_t AlignedLoad;
  llvm::Value *Cast;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v24;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  __int128 v30;
  llvm::Value *v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  _QWORD v36[4];
  __int16 v37;

  if (!*((_QWORD *)this + 906))
  {
    v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v36[0] = "agc.tile.count.x";
    v37 = 259;
    v5 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v5 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = *((_QWORD *)v6 + 47);
    v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7232), (uint64_t)v4);
  }
  v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 680))(v9);
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v33 = *(_OWORD *)(v11 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v11 + 40));
  v35 = *((_DWORD *)v11 + 34);
  v12 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v10, (uint64_t)&v33, (uint64_t)a2, 0);
  if (v34)
    llvm::MetadataTracking::untrack();
  v13 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 680))(v13);
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v30 = *(_OWORD *)(v15 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v15 + 40));
  v32 = *((_DWORD *)v15 + 34);
  v16 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v14, (uint64_t)&v30, (uint64_t)a2, 1);
  v17 = v31;
  if (v31)
    llvm::MetadataTracking::untrack();
  v18 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v19 = (llvm::Type **)*((_QWORD *)this + 906);
  v37 = 257;
  v20 = AGCLLVMBuilder::tryDeducePointeeType(v19, v17);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v18, v20, (uint64_t)v19, 0, (uint64_t)v36);
  v29 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, AlignedLoad, (uint64_t)a2, (uint64_t)v28);
  v27 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v18, v16, Cast, (const llvm::Twine *)v26);
  v24 = (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v37 = 257;
  return llvm::IRBuilderBase::CreateAdd(v24, Mul, v12, (const llvm::Twine *)v36);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  uint64_t inserted;
  char *v5;
  llvm::Value *v6;
  uint64_t Cast;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;
  void *v12;
  __int128 v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, "llvm.agx2.simd.element", "");
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v11 = 257;
  v6 = llvm::IRBuilderBase::CreateCall((uint64_t)v5, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v10);
  v9[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 38, (uint64_t)v6, (uint64_t)a2, (uint64_t)v9);
  if (v12 != v14)
    free(v12);
  return Cast;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  uint64_t inserted;
  char *v5;
  llvm::Value *v6;
  uint64_t Cast;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;
  void *v12;
  __int128 v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, "llvm.agx2.simd.group", "");
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v11 = 257;
  v6 = llvm::IRBuilderBase::CreateCall((uint64_t)v5, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v10);
  v9[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 38, (uint64_t)v6, (uint64_t)a2, (uint64_t)v9);
  if (v12 != v14)
    free(v12);
  return Cast;
}

uint64_t std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](_QWORD *a1)
{
  void *v2;

  if (!a1[1])
    return *a1;
  std::__throw_overflow_error[abi:nn180100]();
  return std::bitset<128ul>::operator>>=[abi:nn180100](v2);
}

char *std::bitset<128ul>::operator>>=[abi:nn180100](char *__dst, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  int v31;

  if (a2 >= 0x80)
    v4 = 128;
  else
    v4 = a2;
  v5 = v4 >> 6;
  v6 = &__dst[8 * (v4 >> 6)];
  if ((v4 & 0x3F) != 0)
  {
    if (a2 <= 0x7F)
    {
      v7 = v4 & 0x3F;
      v8 = 128 - v4 >= 64 - (v4 & 0x3F) ? 64 - (v4 & 0x3F) : 128 - v4;
      v9 = 128 - v4 - v8;
      v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - (v4 & 0x3Fu) - v8)) & (-1 << v7) & *(_QWORD *)v6;
      v11 = v8 >= 0x40 ? 64 : v8;
      *(_QWORD *)__dst = *(_QWORD *)__dst & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v11) | (v10 >> v7);
      v12 = v11 >> 6;
      v13 = &__dst[8 * (v11 >> 6)];
      v14 = v8 - v11;
      if (v14 < 1)
        LODWORD(v14) = v11 & 0x3F;
      else
        *(_QWORD *)v13 = (v10 >> (v11 + v7)) | *(_QWORD *)v13 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v14);
      v15 = (64 - v14);
      v16 = -1 << v14;
      v17 = v14;
      if (v9 < 64)
      {
        v25 = v6 + 8;
      }
      else
      {
        v18 = *(_QWORD *)v13;
        v19 = 8 * v12;
        v20 = __dst;
        do
        {
          v21 = v9;
          v22 = &v20[v19];
          v23 = *(_QWORD *)&v20[8 * v5 + 8];
          v24 = v18 & ~v16 | (v23 << v17);
          v18 = *(_QWORD *)&v20[v19 + 8] & v16 | (v23 >> v15);
          *(_QWORD *)v22 = v24;
          *((_QWORD *)v22 + 1) = v18;
          v9 = v21 - 64;
          v20 += 8;
        }
        while (v21 > 0x7F);
        v25 = &v20[8 * v5 + 8];
        v13 = &v20[8 * v12];
      }
      if (v9 >= 1)
      {
        v26 = *(_QWORD *)v25 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9);
        if (v9 >= (unint64_t)v15)
          v27 = v15;
        else
          v27 = v9;
        *(_QWORD *)v13 = *(_QWORD *)v13 & ~((0xFFFFFFFFFFFFFFFFLL >> (v15 - v27)) & v16) | (v26 << v17);
        v28 = v9 - v27;
        if (v28 >= 1)
          *(_QWORD *)&v13[((unint64_t)(v27 + v17) >> 3) & 0x1FFFFFFFFFFFFFF8] = *(_QWORD *)&v13[((unint64_t)(v27 + v17) >> 3) & 0x1FFFFFFFFFFFFFF8] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v28) | (v26 >> v27);
      }
    }
  }
  else
  {
    if ((v4 & 0xC0) >= 0x41)
    {
LABEL_29:
      v30 = &__dst[8 * ((128 - v4) >> 6)];
      v31 = (128 - v4) & 0x3F;
      std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>((uint64_t)&v30, v4);
      return __dst;
    }
    memmove(__dst, v6, (128 - (unint64_t)(v4 & 0xC0)) >> 3);
  }
  if (v4)
    goto LABEL_29;
  return __dst;
}

unint64_t *std::bitset<128ul>::operator<<=[abi:nn180100](unint64_t *__src, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  int64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v19;
  int v20;

  if (a2 >= 0x80)
    v3 = 128;
  else
    v3 = a2;
  v4 = 128 - v3;
  v5 = (128 - v3) >> 6;
  if (((128 - (_DWORD)v3) & 0x3F) != 0)
  {
    if (a2 <= 0x7F)
    {
      v6 = &__src[v5];
      v7 = v4 & 0xFFFFFFFFFFFFFFC0;
      v8 = __src + 1;
      v9 = (((0xFFFFFFFFFFFFFFFFLL >> -((0x80 - v3) & 0x3F)) & *v6) << (v3 + 0x80)) | __src[1] & ~(-1 << (v3 + 0x80));
      __src[1] = v9;
      v10 = 64 - ((v3 + 0x80) & 0x3F);
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -((v3 + 0x80) & 0x3F);
      if ((uint64_t)(v4 & 0xFFFFFFFFFFFFFFC0) >= 64)
      {
        v12 = __src;
        do
        {
          v13 = v7;
          v14 = v12[v5 - 1];
          v15 = v9 & ~v11 | (v14 >> v10);
          v9 = *v12 & v11 | (v14 << ((v3 + 0x80) & 0x3F));
          *v12 = v9;
          v12[1] = v15;
          --v12;
          v7 = v13 - 64;
        }
        while (v13 > 0x7F);
        v6 = &v12[v5];
        v8 = v12 + 1;
      }
      if (v7 >= 1)
      {
        v16 = *(v6 - 1) & (-1 << -(char)v7);
        v17 = v7 >= (unint64_t)(((_DWORD)v3 - 128) & 0x3F) ? ((_DWORD)v3 - 128) & 0x3F : v7;
        *v8 = *v8 & ~((-1 << (((v3 + 0x80) & 0x3F) - v17)) & v11) | (v16 >> v10);
        if (v7 - v17 >= 1)
          *(v8 - 1) = *(v8 - 1) & ~(-1 << (v17 - v7)) | (v16 << (v7 + ((v17 - v7) & 0x3F)));
      }
    }
  }
  else if ((uint64_t)(v4 & 0xFFFFFFFFFFFFFFC0) >= 1 && (v4 | 0x3F) >= 0x7F)
  {
    memmove(&__src[-v5 + 2], __src, (v4 & 0xFFFFFFFFFFFFFFC0) >> 3);
  }
  if (v3)
  {
    v19 = __src;
    v20 = 0;
    std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>((uint64_t)&v19, v3);
  }
  return __src;
}

_BYTE *AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v39[2];
  unsigned int v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v8 = a5;
  v11 = result;
  v45 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 *)(a2 + 8);
  if (!a2 || v12 != 16)
  {
    if (!a2 || v12 != 17)
    {
      if ((_DWORD)a6)
      {
        v29 = *(_QWORD *)(a4 + 8);
        if (!v29)
          return result;
        v30 = a4 + 8;
        do
        {
          v31 = *(_DWORD *)(v29 + 28);
          v32 = v31 >= a5;
          if (v31 >= a5)
            v33 = (uint64_t *)v29;
          else
            v33 = (uint64_t *)(v29 + 8);
          if (v32)
            v30 = v29;
          v29 = *v33;
        }
        while (*v33);
        if (v30 == a4 + 8 || *(_DWORD *)(v30 + 28) > a5)
          return result;
        v8 = *(_DWORD *)(v30 + 32);
      }
      v39[0] = a2;
      v40 = v8;
      v34 = *(_QWORD *)(a7 + 24);
      if (v34)
        return (_BYTE *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, unsigned int *))(*(_QWORD *)v34 + 48))(v34, v39, a3, &v40);
      std::__throw_bad_function_call[abi:nn180100]();
      return (_BYTE *)std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100](v35, v36);
    }
    v18 = *(_QWORD *)(a4 + 8);
    if (!v18)
      return result;
    v19 = a4 + 8;
    do
    {
      v20 = *(_DWORD *)(v18 + 28);
      v21 = v20 >= a5;
      if (v20 >= a5)
        v22 = (uint64_t *)v18;
      else
        v22 = (uint64_t *)(v18 + 8);
      if (v21)
        v19 = v18;
      v18 = *v22;
    }
    while (*v22);
    if (v19 == a4 + 8 || *(_DWORD *)(v19 + 28) > a5 || !*(_QWORD *)(a2 + 32))
      return result;
    LODWORD(v23) = 0;
    v24 = *(_DWORD *)(v19 + 32);
    while (1)
    {
      v39[0] = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(v11 + 232), *(llvm::Type **)(a2 + 24));
      v39[1] = v25;
      v26 = llvm::TypeSize::operator unsigned long long();
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a3, v23);
      v27 = *(_QWORD *)(a2 + 24);
      std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v41, a7);
      AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(v11, v27, a3, a4, (v24 + v23 * v26), (_DWORD)v23 == 0, v41);
      result = v42;
      if (v42 == v41)
        break;
      if (v42)
      {
        v28 = 5;
LABEL_31:
        result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v28))();
      }
      --*(_DWORD *)(a3 + 8);
      v23 = (v23 + 1);
      if (*(_QWORD *)(a2 + 32) <= v23)
        return result;
    }
    result = v41;
    v28 = 4;
    goto LABEL_31;
  }
  result = (_BYTE *)llvm::DataLayout::getStructLayout();
  if (*(_DWORD *)(a2 + 12))
  {
    v13 = 0;
    v14 = result + 16;
    while (1)
    {
      v15 = *(_DWORD *)&v14[8 * v13];
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a3, v13);
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v13);
      std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v43, a7);
      AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(v11, v16, a3, a4, v15 + v8, a6, v43);
      result = v44;
      if (v44 == v43)
        break;
      if (v44)
      {
        v17 = 5;
LABEL_9:
        result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
      }
      --*(_DWORD *)(a3 + 8);
      if (++v13 >= (unint64_t)*(unsigned int *)(a2 + 12))
        return result;
    }
    result = v43;
    v17 = 4;
    goto LABEL_9;
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x1C3CB61D8);
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E7E68308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7E68308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **Value;
  uint64_t result;
  BOOL v13;
  _QWORD v14[4];
  __int16 v15;

  v4 = *a4;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 40;
  v8 = *v5;
  v9 = *(_QWORD *)a3;
  v10 = *(unsigned int *)(a3 + 8);
  v15 = 257;
  Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v7, v8, v9, v10, (uint64_t)v14);
  v14[0] = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(_QWORD *)(v6 + 6976), *(_DWORD *)(v6 + 6992), v4, v14);
  if ((_DWORD)result)
    v13 = v14[0] == *(_QWORD *)(v6 + 6976) + 40 * *(unsigned int *)(v6 + 6992);
  else
    v13 = 1;
  if (!v13)
    return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 40), Value, *(_QWORD *)(v14[0] + 32), 0);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::__throw_overflow_error[abi:nn180100]()
{
  uint64_t v0;
  _QWORD *v1;
  llvm::Type *v2;
  void *v3;
  size_t v4;

  std::__libcpp_verbose_abort("overflow_error was thrown in -fno-exceptions mode with message \"%s\"", "bitset to_ullong overflow error");
  AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying(v0, v1, v2, v3, v4);
}

void AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying(uint64_t a1, _QWORD *a2, llvm::Type *a3, void *a4, size_t a5)
{
  int ComponentType;
  unsigned int v11;

  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32), a3, &v11);
  AGCLLVMAGPFragmentShader::getFragmentVarying(a1, a2, (uint64_t)a3, a4, a5, 1, 3, 1, ComponentType, 0);
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7E682C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7E682C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  llvm::Type *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Instruction *v23;
  uint64_t NextNonDebugInstruction;
  llvm::IRBuilderBase *v25;
  llvm::Instruction *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Cast;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _BYTE v35[32];
  __int16 v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_WORD *)(v7 + 3564) + *a4;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 400);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 680))(v9);
  v10 = (llvm::Type *)v6;
  if (*(_BYTE *)(v6 + 8) == 15)
    v10 = **(llvm::Type ***)(v6 + 16);
  v11 = v8 % (unint64_t)llvm::DataLayout::getABITypeAlignment((llvm::DataLayout *)(v7 + 232), v10);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 400);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 680))(v12);
  v14 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v15 = v14 + 32;
  v37 = *(_OWORD *)(v14 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 40));
  v39 = *(_DWORD *)(v15 + 104);
  if (v11)
  {
    v16 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 4912) + 32) >> 12;
    v17 = *(unsigned __int16 *)(v7 + 4312);
    v18 = (llvm::Value *)llvm::ConstantInt::get();
    v19 = (uint64_t)AGCLLVMGen3TargetLowerer::splitUnalignedLoads(v13, &v37, 0, v16, v17, v6, v18, 0, 0);
  }
  else
  {
    v20 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 4912) + 32) >> 12;
    v21 = *(unsigned __int16 *)(v7 + 4312);
    v22 = llvm::ConstantInt::get();
    v19 = AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v13, &v37, 0, 0, v20, v21, (llvm::Type ***)v6, v22, 0, 0);
  }
  v23 = (llvm::Instruction *)v19;
  if (v38)
    llvm::MetadataTracking::untrack();
  NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v23);
  v25 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  if (NextNonDebugInstruction)
  {
    v26 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v23);
    llvm::IRBuilderBase::SetInsertPoint(v25, v26);
  }
  else
  {
    v27 = *((_QWORD *)v23 + 5);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 88) = v27;
    *((_QWORD *)v25 + 7) = v27 + 40;
  }
  v28 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
  v36 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v28, 49, (uint64_t)v23, v6, (uint64_t)v35);
  v30 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
  v31 = **(_QWORD **)(a1 + 8);
  v32 = *(_QWORD *)a3;
  v33 = *(unsigned int *)(a3 + 8);
  v36 = 257;
  result = llvm::IRBuilderBase::CreateInsertValue(v30, v31, Cast, v32, v33, (uint64_t)v35);
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

_QWORD *llvm::TrackingMDRef::operator=(_QWORD *a1, _QWORD *a2)
{
  if (a2 != a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack();
    *a1 = *a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack();
      *a2 = 0;
    }
  }
  return a1;
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7E68278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7E68278;
  a2[1] = v2;
  return result;
}

llvm::ValueHandleBase *std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, llvm::Type **a2, uint64_t a3, int *a4)
{
  llvm::Type *v4;
  int v5;
  uint64_t v6;
  llvm::BasicBlock **v7;
  uint64_t Alloca;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  llvm::ValueHandleBase *result;
  llvm::Type *v15;
  _QWORD v16[2];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *a4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (llvm::BasicBlock **)(*(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 40);
  v18 = 257;
  Alloca = llvm::IRBuilderBase::CreateAlloca(v7, v4, 0, (const llvm::Twine *)&v15);
  v15 = v4;
  v16[0] = 4;
  v16[1] = 0;
  v17 = Alloca;
  if (Alloca != -8192 && Alloca != -4096 && Alloca != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v16);
  v19 = 0;
  v10 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(_QWORD *)(v6 + 6976), *(_DWORD *)(v6 + 6992), v5, &v19);
  v11 = v19;
  if ((v10 & 1) == 0)
  {
    v12 = *(_DWORD *)(v6 + 6984);
    v13 = *(_DWORD *)(v6 + 6992);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(v6 + 6988) > v13 >> 3)
    {
LABEL_10:
      ++*(_DWORD *)(v6 + 6984);
      if (*(_DWORD *)v11 != -1)
        --*(_DWORD *)(v6 + 6988);
      *(_DWORD *)v11 = v5;
      *(_OWORD *)(v11 + 8) = xmmword_1C3E37BB0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      goto LABEL_13;
    }
    llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::grow(v6 + 6976, v13);
    v19 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(_QWORD *)(v6 + 6976), *(_DWORD *)(v6 + 6992), v5, &v19);
    v11 = v19;
    goto LABEL_10;
  }
LABEL_13:
  *(_QWORD *)(v11 + 8) = v15;
  result = llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 16), v16);
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17)
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  return result;
}

_DWORD *llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = (_QWORD *)((char *)v4 + 16);
      do
      {
        v14 = *((_DWORD *)v13 - 4);
        if (v14 <= 0xFFFFFFFD)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *((_DWORD *)v13 - 4);
          *((_QWORD *)v15 + 1) = *(v13 - 1);
          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v15 + 4), 2u, v13);
          ++*(_DWORD *)(a1 + 8);
          v16 = v13[2];
          if (v16 != -8192 && v16 != -4096)
          {
            if (v16)
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
          }
        }
        v13 += 5;
        v12 -= 40;
      }
      while (v12);
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 40 * v17;
      do
      {
        *result = -1;
        result += 10;
        v18 -= 40;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::setupROGTable(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  __n128 *v35;
  void *v36;
  __n128 *v37;
  std::string::size_type v38;
  _DWORD *v39;
  BOOL v40;
  uint64_t v42;
  std::string v44;
  std::string v45;
  std::string __dst;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __n128 v52;
  void *v53;
  size_t v54;

  v7 = *(unsigned int *)(a1 + 4312);
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8 != (_DWORD)v7)
  {
    if (v8 <= v7)
      llvm::SmallVectorImpl<unsigned int>::append(a2, v7 - v8);
    else
      *(_DWORD *)(a2 + 8) = v7;
  }
  if (*(_BYTE *)(a1 + 7260))
    goto LABEL_6;
  v10 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v10)
  {
    for (i = *a4; !*(_QWORD *)i || *(_QWORD *)i == -8; i += 8)
      ;
  }
  else
  {
    i = *a4;
  }
  v42 = *a4 + 8 * v10;
  if (i == v42)
  {
LABEL_6:
    v9 = 1;
  }
  else
  {
    v13 = *(_DWORD **)i;
    v9 = 1;
    do
    {
      v14 = v13[3];
      v15 = v13[4];
      if (v15 <= 1)
        v15 = 1;
      v16 = v15 * v14;
      if (v13[2] + a3 < v15 * v14 + v13[2] + a3)
      {
        v17 = v13[6];
        v18 = 4 * (v13[2] + a3);
        do
        {
          v19 = *(_DWORD *)(*(_QWORD *)a2 + v18);
          if (v19 == -1)
          {
            *(_DWORD *)(*(_QWORD *)a2 + v18) = v17;
          }
          else if (((v19 != v17) & v9) == 1)
          {
            v20 = **(_QWORD **)i;
            v51.__r_.__value_.__r.__words[0] = *(_QWORD *)i + 48;
            v51.__r_.__value_.__l.__size_ = v20;
            v50.__r_.__value_.__s.__data_[0] = 64;
            llvm::StringRef::split(&v52, (__n128 *)&v51, (uint64_t)&v50, 1);
            if (v53)
              std::string::basic_string[abi:nn180100](&__dst, v53, v54);
            else
              memset(&__dst, 0, sizeof(__dst));
            v21 = std::string::insert(&__dst, 0, "Raster order group for imageblock field ");
            v22 = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v47.__r_.__value_.__r.__words[2] = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            v23 = std::string::append(&v47, " in output struct (");
            v24 = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v48.__r_.__value_.__r.__words[2] = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v45, v17);
            if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &v45;
            else
              v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
            if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
            else
              size = v45.__r_.__value_.__l.__size_;
            v27 = std::string::append(&v48, (const std::string::value_type *)v25, size);
            v28 = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__r.__words[2] = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            v29 = std::string::append(&v49, ") does not match raster order group in input struct (");
            v30 = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__r.__words[2] = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v44, *(_DWORD *)(*(_QWORD *)a2 + v18));
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &v44;
            else
              v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v32 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
            else
              v32 = v44.__r_.__value_.__l.__size_;
            v33 = std::string::append(&v50, (const std::string::value_type *)v31, v32);
            v34 = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            v51.__r_.__value_.__r.__words[2] = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            v35 = (__n128 *)std::string::append(&v51, ")");
            v36 = (void *)v35[1].n128_u64[0];
            v52 = *v35;
            v53 = v36;
            v35->n128_u64[1] = 0;
            v35[1].n128_u64[0] = 0;
            v35->n128_u64[0] = 0;
            if (SHIBYTE(v53) >= 0)
              v37 = &v52;
            else
              v37 = (__n128 *)v52.n128_u64[0];
            if (SHIBYTE(v53) >= 0)
              v38 = HIBYTE(v53);
            else
              v38 = v52.n128_u64[1];
            std::string::append((std::string *)(a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), (const std::string::value_type *)v37, v38);
            if (SHIBYTE(v53) < 0)
              operator delete((void *)v52.n128_u64[0]);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v49.__r_.__value_.__l.__data_);
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v45.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v48.__r_.__value_.__l.__data_);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v47.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v9 = 0;
          }
          v18 += 4;
          --v16;
        }
        while (v16);
      }
      do
      {
        v39 = *(_DWORD **)(i + 8);
        i += 8;
        v13 = v39;
        if (v39)
          v40 = v13 + 2 == 0;
        else
          v40 = 1;
      }
      while (v40);
    }
    while (i != v42);
  }
  return v9 & 1;
}

BOOL AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap(uint64_t *a1, int a2, llvm::StringMapImpl *a3, uint64_t a4)
{
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;

  i = a1;
  if (a2)
  {
    for (i = a1; !*i || *i == -8; ++i)
      ;
  }
  v8 = &a1[a2];
  if (i != v8)
  {
    v9 = *i;
    do
    {
      if (*((_DWORD *)a3 + 3))
      {
        v10 = llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(a3, (const void *)(v9 + 48), *(_QWORD *)v9);
        v11 = *i;
        v9 = *v10;
      }
      else
      {
        v11 = v9;
      }
      v12 = *(_DWORD *)(v9 + 8);
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a4, *(_DWORD *)(v11 + 8), (_DWORD *)(v11 + 8))+ 8) = v12;
      do
      {
        v13 = i[1];
        ++i;
        v9 = v13;
        if (v13)
          v14 = v9 == -8;
        else
          v14 = 1;
      }
      while (v14);
    }
    while (i != v8);
  }
  return *(_QWORD *)(a4 + 16) != 0;
}

uint64_t llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 49));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 49, 8);
  v11 = v10;
  v12 = v10 + 48;
  if (a3)
    memcpy((void *)(v10 + 48), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 24) = -1;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 40) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

__n128 llvm::StringRef::split(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = llvm::StringRef::find();
  if (v7 == -1)
  {
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
    result = *a2;
    *a1 = *a2;
  }
  else
  {
    v10 = a2->n128_u64[0];
    v9 = a2->n128_u64[1];
    if (v9 >= v7)
      v11 = v7;
    else
      v11 = a2->n128_u64[1];
    v12 = v7 + a4;
    if (v9 < v7 + a4)
      v12 = a2->n128_u64[1];
    a1->n128_u64[0] = v10;
    a1->n128_u64[1] = v11;
    a1[1].n128_u64[0] = v10 + v12;
    a1[1].n128_u64[1] = v9 - v12;
  }
  return result;
}

void AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  AGCLLVMObject *v2;
  char *v3;

  *(_QWORD *)this = &off_1E7E616D0;
  v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7464);
  *((_QWORD *)this + 933) = &unk_1E7E61A80;
  *((_QWORD *)this + 937) = &unk_1E7E61B70;
  *((_QWORD *)this + 540) = &unk_1E7E61980;
  v3 = (char *)*((_QWORD *)this + 915);
  if (v3 != (char *)this + 7336)
    free(v3);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;

  *(_QWORD *)this = &off_1E7E616D0;
  v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7464);
  *((_QWORD *)this + 933) = &unk_1E7E61A80;
  *((_QWORD *)this + 937) = &unk_1E7E61B70;
  *((_QWORD *)this + 540) = &unk_1E7E61980;
  v3 = (char *)*((_QWORD *)this + 915);
  if (v3 != (char *)this + 7336)
    free(v3);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMAGPFragmentShaderGen4::getPrimitiveIdVarying(AGCLLVMAGPFragmentShaderGen4 *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int ComponentType;
  int Key;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  __n128 v12;
  unsigned int v13[2];
  uint64_t v14;
  int v15;
  void *__p[2];
  __int128 v17;
  BOOL v18;
  BOOL v19;
  char v20;
  int v21;

  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), a2, v13);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = a3 + 56;
  *(_QWORD *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  if ((*(_BYTE *)(*((_QWORD *)this + 726) + 65) & 1) == 0
    || (Key = llvm::StringMapImpl::FindKey(), Key == -1)
    || Key == (unint64_t)*((unsigned int *)this + 1472))
  {
    *(_DWORD *)(a3 + 4) = 1;
    *(_QWORD *)(a3 + 32) = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, *(unsigned int *)(a3 + 16), *(_DWORD *)a3);
  }
  else
  {
    v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 5880), "agc.per_prim.primitive_id", 0x19uLL)+ 8);
    v8 = *((unsigned int *)this + 1480);
    v13[0] = 1;
    v13[1] = ComponentType;
    v14 = 0x300000003;
    v15 = v8;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = ComponentType == 1;
    v19 = v7 < 0;
    v20 = 0;
    if (ComponentType == 1)
      v9 = 19;
    else
      v9 = 18;
    if (ComponentType == 1)
      v10 = 21;
    else
      v10 = 20;
    if (v7 >= 0)
      v11 = v9;
    else
      v11 = v10;
    v21 = v11;
    MEMORY[0x1CAA2D494](__p, "agc.per_prim.primitive_id");
    v12 = llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)this + 5912, (unint64_t)v13);
    *(_DWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 4) = 0x300000003;
    *(_QWORD *)(a3 + 32) = (*(uint64_t (**)(AGCLLVMAGPFragmentShaderGen4 *, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 648))(this, v8, 1, 0, v12);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
  }
}

void AGCLLVMAGPFragmentShaderGen4::setupPerPrimitiveVaryings(AGCLLVMAGPFragmentShaderGen4 *this)
{
  char *v2;
  unsigned __int8 *v3;
  llvm::IRBuilderBase *v4;
  llvm::Instruction *NextNonDebugInstruction;
  uint64_t v6;
  llvm::BasicBlock *v7;
  char *v8;
  uint64_t FirstInsertionPt;
  llvm::Value *v10;
  char *v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  char *v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  const AGCLLVMTargetLowerer *v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  llvm::IRBuilderBase *v31;
  llvm::Value *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  llvm::IRBuilderBase *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *Add;
  llvm::Value *v44;
  llvm::IRBuilderBase *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  unint64_t v52;
  uint64_t *v53;
  llvm::Value *v54;
  llvm::IRBuilderBase *v55;
  llvm::IRBuilderBase *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  llvm::Value *Mul;
  llvm::Value *v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  _BYTE v69[32];
  __int16 v70;
  _BYTE v71[32];
  __int16 v72;
  _BYTE v73[32];
  __int16 v74;
  int v75;
  int v76;
  int v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void *v86[2];
  _BYTE v87[24];
  void *__p;
  void *v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  void *v93;
  _QWORD v94[63];
  char v95;
  _BYTE v96[32];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _DWORD v101[8];
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 1832))
  {
    v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v79 = *(_OWORD *)(v2 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 40));
    v81 = *((_DWORD *)v2 + 34);
    v3 = (unsigned __int8 *)*((_QWORD *)this + 723);
    if (v3 && v3[16] >= 0x1Cu)
    {
      v4 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      NextNonDebugInstruction = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v3);
      llvm::IRBuilderBase::SetInsertPoint(v4, NextNonDebugInstruction);
    }
    else
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 21) + 80);
      if (v6)
        v7 = (llvm::BasicBlock *)(v6 - 24);
      else
        v7 = 0;
      v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v7);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)v8, (uint64_t)v7, FirstInsertionPt);
    }
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)&__p, this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "agc.per_prim.primitive_address_2", 0x20uLL, 1, 3, 1, 7, 0);
    v10 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&__p);
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v12 = *((_QWORD *)v11 + 30);
    LOWORD(v85) = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 39, (uint64_t)v10, v12, (uint64_t)&v82);
    if (v93 != v94)
      free(v93);
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)&__p, this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "agc.per_prim.primitive_address", 0x1EuLL, 1, 3, 1, 7, 0);
    v14 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&__p);
    v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v16 = *((_QWORD *)v15 + 30);
    LOWORD(v85) = 257;
    v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v15 + 40), 39, (uint64_t)v14, v16, (uint64_t)&v82);
    v18 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    LOWORD(v85) = 257;
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v18, v17, v19, (const llvm::Twine *)&v82);
    if (v93 != v94)
      free(v93);
    v21 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    LOWORD(v92) = 257;
    v65 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v21, Cast, Shl, (const llvm::Twine *)&__p);
    if (!*((_QWORD *)this + 911))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&__p, this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "air.amplification_id", 0x14uLL);
      v22 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7272), (uint64_t)v22);
      *((_BYTE *)this + 5860) = 1;
      if (v93 != v94)
        free(v93);
    }
    if (!*((_QWORD *)this + 914))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&__p, this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), "air.amplification_count", 0x17uLL);
      v23 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7296), (uint64_t)v23);
      *((_BYTE *)this + 5861) = 1;
      if (v93 != v94)
        free(v93);
    }
    v24 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v25 = *((_BYTE *)v24 + 1762);
    __p = 0;
    v89 = 0;
    v90 = 0;
    v91 = &v93;
    v92 = 0x800000000;
    v94[62] = 0xFFFFFFFFLL;
    v95 = v25;
    v101[7] = 0;
    memset(v96, 0, sizeof(v96));
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    memset(v101, 0, 26);
    v102 = 1;
    v26 = *((unsigned int *)this + 1480);
    if ((_DWORD)v26)
    {
      v27 = *((_QWORD *)this + 739);
      v28 = v26 << 6;
      do
      {
        GenericVaryingAllocator::addVarying((uint64_t)&__p, v27);
        v27 += 64;
        v28 -= 64;
      }
      while (v28);
      v24 = *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    }
    GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&__p, v24);
    v77 = 0;
    v78 = 4 * DWORD1(v97);
    if (v95)
      v29 = (HIDWORD(v98) + 1) >> 1;
    else
      v29 = HIDWORD(v98);
    v30 = v29 + DWORD1(v97);
    v75 = 4 * v30;
    v76 = 4 * (v30 + DWORD1(v100));
    v31 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v33 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v34 = *((_QWORD *)this + 911);
    v35 = *((_QWORD *)v33 + 29);
    LOWORD(v85) = 257;
    v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v33 + 40), 39, v34, v35, (uint64_t)&v82);
    v74 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v31, v32, v36, (const llvm::Twine *)v73);
    v37 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v39 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v41 = (llvm::Value *)*((_QWORD *)this + 914);
    LOWORD(v85) = 257;
    v42 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v39, v40, v41, (const llvm::Twine *)&v82);
    v74 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v37, v38, v42, (const llvm::Twine *)v73);
    v82 = 0uLL;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86[0] = v87;
    v86[1] = (void *)0x500000000;
    llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v86, 5uLL, -559038737);
    v83 = 0;
    v82 = xmmword_1C3E37BC0;
    v85 = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
    v44 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t)this, (unsigned int *)&v82);
    v45 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v74 = 257;
    v46 = llvm::IRBuilderBase::CreateMul(v45, Add, v44, (const llvm::Twine *)v73);
    v47 = *((unsigned int *)this + 1832);
    if ((_DWORD)v47)
    {
      v48 = (llvm::Value *)v46;
      v49 = *((_QWORD *)this + 915);
      v50 = v49 + 16 * v47;
      do
      {
        if ((_DWORD)v92)
        {
          v51 = v91;
          v52 = (unint64_t)v92 << 6;
          while (*((_DWORD *)v51 + 4) != *(_DWORD *)v49)
          {
            v51 += 8;
            v52 -= 64;
            if (!v52)
              goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          v51 = 0;
        }
        v53 = *(uint64_t **)(v49 + 8);
        v54 = (llvm::Value *)llvm::ConstantInt::get();
        if (*((_BYTE *)v51 + 57))
        {
          v55 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v74 = 257;
          v54 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v55, v54, Mul, (const llvm::Twine *)v73);
        }
        v56 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v74 = 257;
        v57 = llvm::IRBuilderBase::CreateAdd(v56, v54, v48, (const llvm::Twine *)v73);
        v58 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 240);
        v72 = 257;
        v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v56, 39, v57, v58, (uint64_t)v71);
        v70 = 257;
        v60 = llvm::IRBuilderBase::CreateAdd(v56, v65, v59, (const llvm::Twine *)v69);
        v61 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
        v62 = *v53;
        v74 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v61, 48, v60, v62, (uint64_t)v73);
        llvm::Value::replaceAllUsesWith();
        v49 += 16;
      }
      while (v49 != v50);
    }
    v63 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v66 = v79;
    v67 = v80;
    if (v80)
      llvm::MetadataTracking::track();
    v68 = v81;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v66, (uint64_t)(v63 + 8));
    if (v67)
      llvm::MetadataTracking::untrack();
    if (v86[0] != v87)
      free(v86[0]);
    *(_QWORD *)&v82 = v96;
    std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
    llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)&v91);
    if (__p)
    {
      v89 = __p;
      operator delete(__p);
    }
    if (v80)
      llvm::MetadataTracking::untrack();
  }
}

uint64_t AGCLLVMAGPFragmentShaderGen4::setupPerPrimitiveVarying(AGCLLVMAGPFragmentShaderGen4 *this, unsigned int a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  if (a3 != 1)
    llvm::FixedVectorType::get();
  v5 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  v6 = *((_DWORD *)this + 1832);
  if (v6 >= *((_DWORD *)this + 1833))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *((_DWORD *)this + 1832);
  }
  v7 = (_QWORD *)(*((_QWORD *)this + 915) + 16 * v6);
  *v7 = a2;
  v7[1] = v5;
  ++*((_DWORD *)this + 1832);
  return v5;
}

void `non-virtual thunk to'AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;

  v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7E616D0;
  v3 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 3144);
  *((_QWORD *)this + 393) = &unk_1E7E61A80;
  *((_QWORD *)this + 397) = &unk_1E7E61B70;
  *(_QWORD *)this = &unk_1E7E61980;
  v4 = (char *)*((_QWORD *)this + 375);
  if (v4 != (char *)this + 3016)
    free(v4);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject(v3);
}

{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;

  v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7E616D0;
  v3 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 3144);
  *((_QWORD *)this + 393) = &unk_1E7E61A80;
  *((_QWORD *)this + 397) = &unk_1E7E61B70;
  *(_QWORD *)this = &unk_1E7E61980;
  v4 = (char *)*((_QWORD *)this + 375);
  if (v4 != (char *)this + 3016)
    free(v4);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject(v3);
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E616D0;
  v1[933] = &unk_1E7E61A80;
  v1[937] = &unk_1E7E61B70;
  v1[540] = &unk_1E7E61980;
  v2 = (_QWORD *)v1[915];
  if (v2 != v1 + 917)
    free(v2);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
}

{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E616D0;
  v1[933] = &unk_1E7E61A80;
  v1[937] = &unk_1E7E61B70;
  v1[540] = &unk_1E7E61980;
  v2 = (_QWORD *)v1[915];
  if (v2 != v1 + 917)
    free(v2);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1E7E61B80);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 152))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 6));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EC0938;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 56;
      result = (uint64_t)v3 + 64;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 104 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7E67FA0;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 96;
      result = (uint64_t)v3 + 104;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 104 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7E67F78;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 96;
      result = (uint64_t)v3 + 104;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  uint64_t v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7E67FA0;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(_QWORD *)(v4 + 32) = v10;
    *(_QWORD *)(v4 + 40) = v4 + 72;
    *(_QWORD *)(v4 + 48) = v4 + 72;
    *(_QWORD *)(v4 + 56) = 4;
    *(_DWORD *)(v4 + 64) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 40;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7E67F50;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  uint64_t v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7E67F78;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(_QWORD *)(v4 + 32) = v10;
    *(_QWORD *)(v4 + 40) = v4 + 72;
    *(_QWORD *)(v4 + 48) = v4 + 72;
    *(_QWORD *)(v4 + 56) = 4;
    *(_DWORD *)(v4 + 64) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 40;
}

_QWORD *AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(_QWORD *result, unsigned int *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  void *v13;
  const void **v14;
  uint64_t v15;
  unsigned int *v16;
  llvm::SmallPtrSetImplBase *v17;
  unsigned int v18;
  BOOL v19;
  _BYTE v21[24];

  v4 = result[1];
  if (v4)
  {
    v8 = result;
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 24);
      v10 = *(unsigned __int8 *)(v9 + 16);
      v11 = v9 && v10 >= 0x1C;
      if (v11 && v10 - 29 < 0xB)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return result;
    }
LABEL_13:
    v13 = *(void **)(v9 + 40);
    v14 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)a2, v13);
    v15 = *((_QWORD *)a2 + 1);
    if (v15 == *(_QWORD *)a2)
      v16 = a2 + 5;
    else
      v16 = a2 + 4;
    if ((const void **)(v15 + 8 * *v16) == v14)
    {
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v21, a3, v13);
      v17 = (llvm::SmallPtrSetImplBase *)llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](a4, (llvm::Value *)v13);
      result = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v21, v17, v8);
    }
    else
    {
      result = (_QWORD *)AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(v13, a2, a3, a4);
    }
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        break;
      v9 = *(_QWORD *)(v4 + 24);
      v18 = *(unsigned __int8 *)(v9 + 16);
      if (v9)
        v19 = v18 >= 0x1C;
      else
        v19 = 0;
      if (v19 && v18 - 29 < 0xB)
        goto LABEL_13;
    }
  }
  return result;
}

_QWORD *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7EC0938;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 6;
    v4[6] = 0;
    v4[7] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

_QWORD *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7E67F50;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = 48 * a2;
    v3 = (uint64_t *)(result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  llvm::ValueHandleBase *v3;
  uint64_t v4;
  uint64_t v6;

  if (a2)
  {
    v2 = (unint64_t)a2 << 6;
    v3 = (llvm::ValueHandleBase *)(result + 40);
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *((_QWORD *)v3 + 2);
        if (v6 != -8192 && v6 != -4096 && v6 != 0)
        {
          result = llvm::ValueHandleBase::RemoveFromUseList(v3);
          v4 = *((_QWORD *)v3 - 2);
        }
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v3 - 32));
      v3 = (llvm::ValueHandleBase *)((char *)v3 + 64);
      v2 -= 64;
    }
    while (v2);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v2 = 104 * a2;
    v3 = (uint64_t *)(a1 + 24);
    do
    {
      v4 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = (void *)v3[3];
        if (v5 != (void *)v3[2])
        {
          free(v5);
          v4 = *v3;
        }
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

_DWORD *llvm::PHINode::addIncoming(_DWORD *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;

  v5 = this;
  v6 = this[5];
  if ((v6 & 0x7FFFFFF) == this[15])
  {
    this = (_DWORD *)llvm::PHINode::growOperands((llvm::PHINode *)this);
    v6 = v5[5];
  }
  v7 = (v6 + 1) & 0x7FFFFFF;
  v5[5] = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  v8 = (v7 - 1);
  if ((v6 & 0x40000000) != 0)
    v9 = (_DWORD *)*((_QWORD *)v5 - 1);
  else
    v9 = &v5[-8 * v7];
  v10 = &v9[8 * v8];
  if (*(_QWORD *)v10)
  {
    **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  }
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v14 = *((_QWORD *)a2 + 1);
    v13 = (_QWORD *)((char *)a2 + 8);
    v12 = v14;
    v15 = &v9[8 * v8];
    *((_QWORD *)v15 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v15 + 2;
    *((_QWORD *)v15 + 2) = v13;
    *v13 = v10;
  }
  v16 = v5[5];
  v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0)
    v18 = (_DWORD *)*((_QWORD *)v5 - 1);
  else
    v18 = &v5[-8 * v17];
  *(_QWORD *)&v18[8 * v5[15] + 2 * (v17 - 1)] = a3;
  return this;
}

llvm::CallbackVH *llvm::CallbackVH::CallbackVH(llvm::CallbackVH *this, llvm::Value *a2)
{
  llvm::ValueHandleBase *v3;

  *((_QWORD *)this + 1) = 2;
  *((_QWORD *)this + 2) = 0;
  v3 = (llvm::CallbackVH *)((char *)this + 8);
  *((_QWORD *)v3 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v3);
  *(_QWORD *)this = MEMORY[0x1E0DE2A88] + 16;
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 48 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7E67F50;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int32x2_t *v8;
  _QWORD *v9;
  _BYTE v10[16];
  uint64_t v11;
  int32x2_t *v12;
  void *v13;
  _QWORD v14[2];
  uint64_t v15;
  int32x2_t *v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v12 = v4;
  v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v11, &v17))v5 = (uint64_t)v17;
  else
    v5 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  result = (uint64_t)v12;
  if (*(_QWORD *)v12 + 48 * v12[2].u32[0] != v5)
  {
    v7 = *(_QWORD *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase(v12, v5);
    v8 = v12;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v13, a2);
    v13 = &unk_1E7E67F50;
    v16 = v8;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    v17 = &unk_1E7E67F50;
    v20 = v16;
    v21 = v7;
    v22 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      v9 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v8, (uint64_t)&v17, v22);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    if (v15 != -8192 && v15 != -4096 && v15)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase(int32x2_t *a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD v5[4];

  v5[1] = 0;
  v5[2] = -8192;
  v5[0] = 2;
  v5[3] = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v5);
  *(_QWORD *)(a2 + 32) = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 6);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 6);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((unint64_t)v8 << 6, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  v9 = (void *)(v3 << 6);
  if ((_DWORD)v3)
  {
    v10 = (_QWORD *)((char *)v4 + 32);
    v11 = v3 << 6;
    do
    {
      v12 = *(v10 - 1);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v15 = v18;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v18 + 8), v10 - 3);
        *(_QWORD *)(v15 + 32) = *v10;
        llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v15 + 40), 3u, v10 + 1);
        ++*(_DWORD *)(a1 + 8);
        v16 = v10[3];
        if (v16 != -8192 && v16 != -4096 && v16)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v10 + 1));
      }
      v13 = *(v10 - 1);
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v10 - 3));
      v10 += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return llvm::deallocate_buffer(v4, v9);
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v10 = v2;
  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if ((_DWORD)result)
  {
    v4 = v11;
    v5 = v11[7];
    if (v5 != -8192 && v5 != -4096 && v5 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 + 5));
    v12[1] = 0;
    v12[2] = -8192;
    v11 = &unk_1E7EC0938;
    v12[0] = 2;
    v12[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v12);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  llvm::Value *v7;
  int32x2_t *v8;
  __n128 v9;
  llvm::Value *v10;
  _BYTE v11[16];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  void *v15;
  _BYTE v16[16];
  uint64_t v17;
  int32x2_t *v18;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v16, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v15 = &unk_1E7EC0938;
  v18 = v4;
  v10 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v17, &v10);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 6);
  if (v5)
    v7 = v10;
  else
    v7 = (llvm::Value *)v6;
  if ((llvm::Value *)(*(_QWORD *)v18 + ((unint64_t)v18[2].u32[0] << 6)) != v7)
  {
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v13, 3u, (_QWORD *)v7 + 5);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v18, v7);
    v8 = v18;
    v10 = a2;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 3u, v13);
    llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(&v9, (uint64_t)v8, &v10);
    if (v12 != -8192 && v12 != -4096 && v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    if (v14 != -8192 && v14 != -4096 && v14)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
  }
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(int32x2_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int32x2_t result;
  _QWORD v7[4];

  v4 = a2[7];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a2 + 5));
  v7[1] = 0;
  v7[2] = -8192;
  v7[0] = 2;
  v7[3] = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v7);
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

__n128 llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(__n128 *a1, uint64_t a2, llvm::Value **a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  void *v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;

  v5 = a3 + 1;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v12, *a3);
  v12 = &unk_1E7EC0938;
  v15 = a2;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v17, (LODWORD(v13[0]) >> 1) & 3, v13);
  v16 = &unk_1E7EC0938;
  v19 = v15;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, 3u, v5);
  v22 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v18, &v22);
  v7 = v22;
  if ((v6 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v7 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a2, (uint64_t)&v16, (uint64_t)v22);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v7 + 1), v17);
    v7[4] = v19;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v7 + 5), 3u, v20);
    v8 = 1;
  }
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned int *)(a2 + 16);
  if (v21 != -8192 && v21 != -4096 && v21)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
  if (v18 != -8192 && v18 != -4096 && v18)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v17);
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = v9 + (v10 << 6);
  *a1 = result;
  a1[1].n128_u8[0] = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](result);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!a2)
    return (uint64_t *)(a1 + 16 * a2);
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v4 = (uint64_t *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v6 = 1;
    while (v5 != -4096)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_QWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (uint64_t *)(a1 + 16 * v3);
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

void std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const void **llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find(llvm::SmallPtrSetImplBase *a1, const void *a2)
{
  const void **result;
  uint64_t v4;
  uint64_t v5;
  const void **v6;

  result = llvm::SmallPtrSetImplBase::find_imp(a1, a2);
  v4 = *((_QWORD *)a1 + 1);
  v5 = 16;
  if (v4 == *(_QWORD *)a1)
    v5 = 20;
  v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)a1 + v5));
  if (v6 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v6)
        return v6;
    }
  }
  return result;
}

uint64_t llvm::SwitchInst::setDefaultDest(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(result - 8);
  else
    v3 = result - 32 * (v2 & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v3 + 32))
  {
    **(_QWORD **)(v3 + 48) = *(_QWORD *)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 40);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 48);
  }
  *v4 = a2;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 8);
    v7 = v8;
    *(_QWORD *)(v3 + 40) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v3 + 40;
    *(_QWORD *)(v3 + 48) = v6;
    *v6 = v4;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 104 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 104 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v17;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 104 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(a1);
  if (v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 104 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v17);
        v12 = v17;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v17 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
        ++*(_DWORD *)(a1 + 8);
        v13 = (void *)v9[3];
        if (v13 != (void *)v9[2])
          free(v13);
      }
      v14 = *v9;
      if (*v9 != -8192 && v14 != -4096 && v14 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 13;
      v10 -= 104;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(104 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  void *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (void *)v10[6];
    if (v5 != (void *)v10[5])
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_1E7E67F78;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  _QWORD *v5;
  int32x2_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BYTE v15[16];
  uint64_t v16;
  int32x2_t *v17;
  void *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v15, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v17 = v4;
  v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v16, &v22))v5 = v22;
  else
    v5 = (_QWORD *)(*(_QWORD *)v4 + 104 * v4[2].u32[0]);
  if ((_QWORD *)(*(_QWORD *)v17 + 104 * v17[2].u32[0]) != v5)
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v6 = v17;
    v7 = (void *)v5[6];
    if (v7 != (void *)v5[5])
      free(v7);
    v23[1] = 0;
    v24 = -8192;
    v22 = &unk_1E7E67F78;
    v23[0] = 2;
    v25 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), v23);
    v8 = v24;
    v5[4] = v25;
    if (v8 != -8192 && v8 != -4096 && v8)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    v9 = (uint64_t)v17;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v18, a2);
    v18 = &unk_1E7E67F78;
    v21 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v23, (LODWORD(v19[0]) >> 1) & 3, v19);
    v22 = &unk_1E7E67F78;
    v25 = v21;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v28 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v24, &v28) & 1) == 0)
    {
      v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v22, v28);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 8), v23);
      *(_QWORD *)(v10 + 32) = v25;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    }
    if (v27 != v26)
      free(v27);
    if (v24 != -8192 && v24 != -4096 && v24)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    if (v20 != -8192 && v20 != -4096 && v20)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
    if (v12 != v11)
      free(v12);
    if (v14 != v13)
      free(v14);
  }
  if (v16 != -8192 && v16 != -4096)
  {
    if (v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
  }
}

uint64_t llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  llvm::Instruction *v10;
  _QWORD *Successor;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;

  v2 = a1 + 96;
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
    v4 = *(_QWORD *)(v3 - 24);
    v5 = *(_QWORD *)(v4 + 40);
    if (v5 == v4 + 40
      || ((v6 = (llvm::Instruction *)(v5 - 24), v5) ? (v7 = v5 - 24) : (v7 = 0),
          *(unsigned __int8 *)(v7 + 16) - 29 > 0xA))
    {
      result = 0;
    }
    else
    {
      result = llvm::Instruction::getNumSuccessors(v6);
    }
    if (*(_DWORD *)(v3 - 8) == (_DWORD)result)
      break;
    v9 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
    v10 = *(llvm::Instruction **)(v9 - 16);
    ++*(_DWORD *)(v9 - 8);
    Successor = (_QWORD *)llvm::Instruction::getSuccessor(v10);
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v19, (llvm::SmallPtrSetImplBase *)a1, Successor);
    if ((_BYTE)v20)
    {
      v12 = (_QWORD *)Successor[5];
      if (v12 == Successor + 5)
      {
        v15 = 0;
      }
      else
      {
        v13 = v12 - 3;
        if (v12)
          v14 = v12 - 3;
        else
          v14 = 0;
        if (*((unsigned __int8 *)v14 + 16) - 29 >= 0xB)
          v15 = 0;
        else
          v15 = v13;
      }
      v19[0] = Successor;
      v19[1] = v15;
      v20 = 0;
      v16 = llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>(v2, (unint64_t)v19);
      v17 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
      v18 = *(_OWORD *)v16;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v17 = v18;
      ++*(_DWORD *)(a1 + 104);
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

uint64_t *llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *((unsigned int *)a1 + 2);
    if (v5 >= v4)
    {
      if (v4)
      {
        v6 = *a2;
        v7 = *a2 + 24 * v4;
        v8 = *a1;
        do
        {
          *(_QWORD *)v8 = *(_QWORD *)v6;
          v9 = *(_QWORD *)(v6 + 8);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v6 + 16);
          *(_QWORD *)(v8 + 8) = v9;
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*((_DWORD *)a1 + 3) >= v4)
    {
      if ((_DWORD)v5)
      {
        v10 = *a2;
        v11 = *a2 + 24 * v5;
        v12 = *a1;
        do
        {
          *(_QWORD *)v12 = *(_QWORD *)v10;
          v13 = *(_QWORD *)(v10 + 8);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v10 + 16);
          *(_QWORD *)(v12 + 8) = v13;
          v10 += 24;
          v12 += 24;
        }
        while (v10 != v11);
LABEL_14:
        v14 = *((unsigned int *)a2 + 2);
        if (v5 != v14)
          memcpy((void *)(*a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v14 - (*a2 + 24 * v5));
LABEL_16:
        *((_DWORD *)a1 + 2) = v4;
        return a1;
      }
    }
    else
    {
      *((_DWORD *)a1 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = *((_DWORD *)a2 + 2);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v7)
    {
      if (v7)
      {
        v9 = *(_DWORD **)a1;
        v10 = v4 + 24 * v7;
        do
        {
          *(_QWORD *)v9 = *(_QWORD *)v4;
          v11 = *(_QWORD *)(v4 + 8);
          v9[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v9 + 1) = v11;
          v4 += 24;
          v9 += 6;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v7)
    {
      if ((_DWORD)v8)
      {
        v12 = v4 + 24 * v8;
        v13 = *(_DWORD **)a1;
        do
        {
          *(_QWORD *)v13 = *(_QWORD *)v4;
          v14 = *(_QWORD *)(v4 + 8);
          v13[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v13 + 1) = v14;
          v4 += 24;
          v13 += 6;
        }
        while (v4 != v12);
LABEL_18:
        v15 = *((unsigned int *)a2 + 2);
        if (v8 != v15)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v8), (const void *)(*a2 + 24 * v8), *a2 + 24 * v15 - (*a2 + 24 * v8));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v7;
LABEL_21:
        *((_DWORD *)a2 + 2) = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v8 = 0;
    goto LABEL_18;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v17;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 104 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(a1);
  if (v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 104 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v17);
        v12 = v17;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v17 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
        ++*(_DWORD *)(a1 + 8);
        v13 = (void *)v9[3];
        if (v13 != (void *)v9[2])
          free(v13);
      }
      v14 = *v9;
      if (*v9 != -8192 && v14 != -4096 && v14 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 13;
      v10 -= 104;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(104 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  void *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (void *)v10[6];
    if (v5 != (void *)v10[5])
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_1E7E67FA0;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  _QWORD *v5;
  int32x2_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BYTE v15[16];
  uint64_t v16;
  int32x2_t *v17;
  void *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v15, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v17 = v4;
  v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v16, &v22))v5 = v22;
  else
    v5 = (_QWORD *)(*(_QWORD *)v4 + 104 * v4[2].u32[0]);
  if ((_QWORD *)(*(_QWORD *)v17 + 104 * v17[2].u32[0]) != v5)
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v6 = v17;
    v7 = (void *)v5[6];
    if (v7 != (void *)v5[5])
      free(v7);
    v23[1] = 0;
    v24 = -8192;
    v22 = &unk_1E7E67FA0;
    v23[0] = 2;
    v25 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), v23);
    v8 = v24;
    v5[4] = v25;
    if (v8 != -8192 && v8 != -4096 && v8)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    v9 = (uint64_t)v17;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v18, a2);
    v18 = &unk_1E7E67FA0;
    v21 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v23, (LODWORD(v19[0]) >> 1) & 3, v19);
    v22 = &unk_1E7E67FA0;
    v25 = v21;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    v28 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v24, &v28) & 1) == 0)
    {
      v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v22, v28);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 8), v23);
      *(_QWORD *)(v10 + 32) = v25;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    }
    if (v27 != v26)
      free(v27);
    if (v24 != -8192 && v24 != -4096 && v24)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    if (v20 != -8192 && v20 != -4096 && v20)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
    if (v12 != v11)
      free(v12);
    if (v14 != v13)
      free(v14);
  }
  if (v16 != -8192 && v16 != -4096)
  {
    if (v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
  }
}

void AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  AGCLLVMObject *v2;
  char *v3;

  *(_QWORD *)this = &off_1E7E660F0;
  v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7464);
  *((_QWORD *)this + 933) = &off_1E7E664A0;
  *((_QWORD *)this + 937) = &off_1E7E66590;
  *((_QWORD *)this + 540) = &off_1E7E663A0;
  v3 = (char *)*((_QWORD *)this + 915);
  if (v3 != (char *)this + 7336)
    free(v3);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;

  *(_QWORD *)this = &off_1E7E660F0;
  v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7464);
  *((_QWORD *)this + 933) = &off_1E7E664A0;
  *((_QWORD *)this + 937) = &off_1E7E66590;
  *((_QWORD *)this + 540) = &off_1E7E663A0;
  v3 = (char *)*((_QWORD *)this + 915);
  if (v3 != (char *)this + 7336)
    free(v3);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMAGPFragmentShaderGen6::getPrimitiveIdVarying(AGCLLVMAGPFragmentShaderGen6 *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int ComponentType;
  int Key;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  __n128 v12;
  unsigned int v13[2];
  uint64_t v14;
  int v15;
  void *__p[2];
  __int128 v17;
  BOOL v18;
  BOOL v19;
  char v20;
  int v21;

  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), a2, v13);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = a3 + 56;
  *(_QWORD *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  if ((*(_BYTE *)(*((_QWORD *)this + 726) + 65) & 1) == 0
    || (Key = llvm::StringMapImpl::FindKey(), Key == -1)
    || Key == (unint64_t)*((unsigned int *)this + 1472))
  {
    *(_DWORD *)(a3 + 4) = 1;
    *(_QWORD *)(a3 + 32) = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, *(unsigned int *)(a3 + 16), *(_DWORD *)a3);
  }
  else
  {
    v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 5880), "agc.per_prim.primitive_id", 0x19uLL)+ 8);
    v8 = *((unsigned int *)this + 1480);
    v13[0] = 1;
    v13[1] = ComponentType;
    v14 = 0x300000003;
    v15 = v8;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = ComponentType == 1;
    v19 = v7 < 0;
    v20 = 0;
    if (ComponentType == 1)
      v9 = 19;
    else
      v9 = 18;
    if (ComponentType == 1)
      v10 = 21;
    else
      v10 = 20;
    if (v7 >= 0)
      v11 = v9;
    else
      v11 = v10;
    v21 = v11;
    MEMORY[0x1CAA2D494](__p, "agc.per_prim.primitive_id");
    v12 = llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)this + 5912, (unint64_t)v13);
    *(_DWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 4) = 0x300000003;
    *(_QWORD *)(a3 + 32) = (*(uint64_t (**)(AGCLLVMAGPFragmentShaderGen6 *, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 648))(this, v8, 1, 0, v12);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
  }
}

void `non-virtual thunk to'AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;

  v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7E660F0;
  v3 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 3144);
  *((_QWORD *)this + 393) = &off_1E7E664A0;
  *((_QWORD *)this + 397) = &off_1E7E66590;
  *(_QWORD *)this = &off_1E7E663A0;
  v4 = (char *)*((_QWORD *)this + 375);
  if (v4 != (char *)this + 3016)
    free(v4);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject(v3);
}

{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;

  v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7E660F0;
  v3 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 3144);
  *((_QWORD *)this + 393) = &off_1E7E664A0;
  *((_QWORD *)this + 397) = &off_1E7E66590;
  *(_QWORD *)this = &off_1E7E663A0;
  v4 = (char *)*((_QWORD *)this + 375);
  if (v4 != (char *)this + 3016)
    free(v4);
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1E7E62128);
  AGCLLVMObject::~AGCLLVMObject(v3);
  JUMPOUT(0x1CAA2D68CLL);
}

llvm::raw_ostream *llvm::LLT::dump(llvm::LLT *this)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::dbgs(this);
  v3 = (llvm *)llvm::LLT::print(this, v2);
  result = (llvm::raw_ostream *)llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

unsigned int *AGCLLVMUserMeshShaderAnalysis::compile(AGCLLVMUserMeshShaderAnalysis *this)
{
  llvm::Module *v2;
  unsigned int *result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v17;
  unint64_t v18;
  _BOOL4 v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  _BOOL4 v41;
  _BOOL4 v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  unsigned __int8 *v48;
  __int128 v49;
  int v50;
  __int128 __p;
  __int128 v52;
  char v53;
  char v54;
  char v55;
  int v56;

  v2 = (llvm::Module *)*((_QWORD *)this + 503);
  *(_QWORD *)&v49 = "air.mesh";
  WORD4(__p) = 259;
  result = (unsigned int *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v49);
  if (!result)
    return result;
  result = (unsigned int *)llvm::NamedMDNode::getOperand((llvm::NamedMDNode *)result);
  if (!result)
    return result;
  v4 = *(_QWORD *)&result[-2 * result[2] + 4];
  v5 = *(unsigned int *)(v4 + 8);
  if (!(_DWORD)v5)
    return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(_QWORD *)this + 136))(this);
  v6 = 0;
  v7 = (_DWORD *)((char *)this + 4040);
  v8 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v4 - 8 * v5 + 8 * v6);
        if (!v9 || !isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8), "air.mesh"))
          goto LABEL_74;
        if ((v8 & 1) != 0)
        {
          v10 = *(unsigned __int8 **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 16);
          if (v10)
          {
            v11 = *v10;
            if (v11 <= 0x22
              && ((0x7FFFFFFF0uLL >> v11) & 1) != 0
              && *((_DWORD *)v10 + 2) == 6
              && isStringMDNode(*((llvm::MDString **)v10 - 6), "air.mesh_type_info"))
            {
              v13 = &v10[-8 * *((unsigned int *)v10 + 2)];
              v14 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
              if (v14)
              {
                v15 = *v14;
                if (v15 <= 0x22 && ((0x7FFFFFFF0uLL >> v15) & 1) != 0)
                {
                  v17 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
                  if (v17)
                  {
                    v18 = *v17;
                    if (v18 <= 0x22 && ((0x7FFFFFFF0uLL >> v18) & 1) != 0)
                    {
                      LODWORD(v49) = 3;
                      v48 = v17;
                      if (parseMDInt(0, (uint64_t)v10, (unsigned int *)&v49, (_DWORD *)this + 1009))
                      {
                        LODWORD(v49) = 4;
                        if (parseMDInt(0, (uint64_t)v10, (unsigned int *)&v49, v7))
                        {
                          v20 = parseMDPrimitiveType((uint64_t)v10, (int *)this + 1011);
                          v21 = v48;
                          if (v20)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_64:
        v8 = 0;
        result = 0;
        ++v6;
        v5 = *(unsigned int *)(v4 + 8);
        if (v6 >= v5)
          return result;
      }
      v22 = *((unsigned int *)v14 + 2);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v47 = v7;
        do
        {
          v24 = *(unsigned __int8 **)&v14[8 * v23 + -8 * v22];
          if (!v24)
            goto LABEL_64;
          v25 = *v24;
          if (v25 > 0x22 || ((0x7FFFFFFF0uLL >> v25) & 1) == 0)
            goto LABEL_64;
          if (*((_BYTE *)this + 4033))
          {
            v27 = 1;
            while (1)
            {
              v28 = *((unsigned int *)v24 + 2);
              v29 = v27 >= v28;
              if (v27 >= v28)
                break;
              if (isStringMDNode(*(llvm::MDString **)&v24[8 * v27++ + -8 * v28], "air.shared"))
              {
                v29 = 0;
                break;
              }
            }
            v7 = v47;
          }
          else
          {
            v29 = 0;
          }
          AGCLLVMUserMeshShaderAnalysis::addGenericVarying((uint64_t)this, (uint64_t)v24, 0, v29);
          ++v23;
          v22 = *((unsigned int *)v14 + 2);
          v21 = v48;
        }
        while (v23 < v22);
      }
      v31 = *((unsigned int *)v21 + 2);
      if ((_DWORD)v31)
        break;
      ++v6;
      v5 = *(unsigned int *)(v4 + 8);
      v8 = 1;
      if (v6 >= v5)
        return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(_QWORD *)this + 136))(this);
    }
    v45 = 0;
    v44 = 0;
    v32 = 0;
    while (1)
    {
      v33 = *(unsigned __int8 **)&v21[8 * v32 + -8 * v31];
      if (!v33)
        break;
      v34 = *v33;
      if (v34 > 0x22 || ((0x7FFFFFFF0uLL >> v34) & 1) == 0)
        break;
      if (*((_BYTE *)this + 4033))
      {
        v46 = v32;
        v36 = v7;
        v37 = 1;
        while (1)
        {
          v38 = *((unsigned int *)v33 + 2);
          v39 = v37 >= v38;
          if (v37 >= v38)
            break;
          if (isStringMDNode(*(llvm::MDString **)&v33[8 * v37++ + -8 * v38], "air.shared"))
          {
            v39 = 0;
            break;
          }
        }
        v7 = v36;
        v32 = v46;
      }
      else
      {
        v39 = 0;
      }
      if ((AGCLLVMUserMeshShaderAnalysis::addGenericVarying((uint64_t)this, (uint64_t)v33, 1, v39) & 1) != 0)
      {
        v44 = 1;
      }
      else
      {
        v41 = isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_id");
        BYTE4(v45) |= v41;
        v42 = v45;
        if (v41)
          v42 = v39;
        LODWORD(v45) = v42;
      }
      v21 = v48;
      ++v32;
      v31 = *((unsigned int *)v48 + 2);
      if (v32 >= v31)
      {
        v8 = 1;
        goto LABEL_67;
      }
    }
    v8 = 0;
LABEL_67:
    if ((v45 & 0x100000000) != 0 || ((*((_BYTE *)this + 4032) == 0) & v44) == 1)
    {
      v49 = xmmword_1C3E37BF0;
      v50 = 0;
      __p = 0u;
      v52 = 0u;
      v53 = 0;
      v54 = v45 & 1;
      v55 = 0;
      if ((v45 & 1) != 0)
        v43 = 20;
      else
        v43 = 18;
      v56 = v43;
      MEMORY[0x1CAA2D494]();
      GenericVaryingAllocator::addVarying((uint64_t)this + 3320, (unint64_t)&v49);
      if (SBYTE7(v52) < 0)
        operator delete((void *)__p);
    }
LABEL_74:
    ++v6;
    v5 = *(unsigned int *)(v4 + 8);
  }
  while (v6 < v5);
  if ((v8 & 1) != 0)
    return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(_QWORD *)this + 136))(this);
  else
    return 0;
}

void AGCLLVMUserMeshShaderAnalysis::~AGCLLVMUserMeshShaderAnalysis(AGCLLVMUserMeshShaderAnalysis *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E7E68350;
  *((_QWORD *)this + 4) = &unk_1E7E68440;
  v3 = (void **)((char *)this + 3888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 418);
  v2 = (void *)*((_QWORD *)this + 415);
  if (v2)
  {
    *((_QWORD *)this + 416) = v2;
    operator delete(v2);
  }
  AGCLLVMObject::~AGCLLVMObject(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E7E68350;
  *((_QWORD *)this + 4) = &unk_1E7E68440;
  v3 = (void **)((char *)this + 3888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 418);
  v2 = (void *)*((_QWORD *)this + 415);
  if (v2)
  {
    *((_QWORD *)this + 416) = v2;
    operator delete(v2);
  }
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMUserMeshShaderAnalysis::dumpType(AGCLLVMUserMeshShaderAnalysis *this)
{
  return "mesh_analysis";
}

uint64_t AGCLLVMUserMeshShaderAnalysis::getShaderType(AGCLLVMUserMeshShaderAnalysis *this)
{
  return 2;
}

_QWORD *AGCLLVMUserMeshShaderAnalysis::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, (char *)&unk_1C3E4D9BB);
}

uint64_t AGCLLVMUserMeshShaderAnalysis::constructReply(AGCLLVMUserMeshShaderAnalysis *this)
{
  char *v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  int v7;
  _BOOL4 VaryingSignature;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  flatbuffers::FlatBufferBuilder *v13;
  __int16 v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v2 = (char *)this + 2472;
  *((_BYTE *)this + 2542) = 1;
  v3 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this + 2472, 4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, 0);
  v4 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v2, v3);
  GenericVaryingAllocator::allocate((AGCLLVMUserMeshShaderAnalysis *)((char *)this + 3320), *((const AGCLLVMTargetLowerer **)this + 50));
  GenericVaryingAllocator::serialize((AGCLLVMUserMeshShaderAnalysis *)((char *)this + 3320), (flatbuffers::FlatBufferBuilder *)v2);
  v5 = *((_QWORD *)this + 416) - *((_QWORD *)this + 415);
  if (v5)
    v6 = (void *)*((_QWORD *)this + 415);
  else
    v6 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  v7 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)v2, (uint64_t)v6, v5 >> 2);
  v45 = 0;
  VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)this + 3320, (flatbuffers::FlatBufferBuilder *)v2, (_DWORD *)&v45 + 1, &v45);
  *((_BYTE *)this + 2542) = 1;
  v9 = *((_QWORD *)this + 313);
  v10 = *((_QWORD *)this + 315);
  v11 = *((_QWORD *)this + 314);
  if (VaryingSignature)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 10, SHIDWORD(v45));
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 12, v45);
  }
  v12 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v2, (unsigned __int16)v9 - (unsigned __int16)v10 + (unsigned __int16)v11);
  v13 = AGCLLVMObject::constructFlatReply(this);
  v15 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14);
  *((_BYTE *)this + 2542) = 1;
  v16 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 4, v4);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, *((_DWORD *)this + 1009));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, *((_DWORD *)this + 1010));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v2, 10, *((char *)this + 4044));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 12, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 14, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 16, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 18, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 60, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 20, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 22, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 28, *((unsigned __int8 *)this + 4008), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 30, v7);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 32, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 34, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 36, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 38, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 40, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 42, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 44, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 46, 0, 0);
  v17 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v2, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v2, 54, v17);
  v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v2, v16);
  *((_BYTE *)this + 2542) = 1;
  v19 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v2, v15);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v2, v18);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v2, v12);
  v20 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v2, v19);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)v2, v20, v21);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, v2);
  v36 = 0;
  v37 = 0;
  v38 = xmmword_1C3E37B60;
  v39 = 0u;
  v40 = 0u;
  v41 = 0x1000000000000;
  v42 = 1;
  v43 = 256;
  v44 = 0;
  v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v36, 0);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v36, v22, v23);
  v24 = (const void *)v40;
  v25 = (v39 - v40 + DWORD2(v39));
  v26 = (*((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628));
  v27 = (v25 + 7) & 0x1FFFFFFF8;
  v28 = (v26 + 7) & 0x1FFFFFFF8;
  v29 = v28 + v27 + 376;
  v30 = (char *)malloc_type_calloc(1uLL, v29 + 40, 0x7843BC0uLL);
  *(_DWORD *)v30 = -17958193;
  *((_QWORD *)v30 + 4) = 0x13800000019;
  *((_DWORD *)v30 + 4) = 2;
  v31 = v27 + v28 + 8;
  *((_QWORD *)v30 + 8) = v31;
  *((_QWORD *)v30 + 9) = 368;
  *((_QWORD *)v30 + 10) = v31;
  *((_DWORD *)v30 + 24) = 3;
  *(_OWORD *)(v30 + 120) = *(_OWORD *)"__TEXT";
  *((_DWORD *)v30 + 38) = 368;
  *((_QWORD *)v30 + 18) = 8;
  *((_QWORD *)v30 + 46) = 0;
  *(_OWORD *)(v30 + 200) = *(_OWORD *)"__GPU_METADATA";
  *((_DWORD *)v30 + 58) = 376;
  *((_QWORD *)v30 + 28) = v27;
  memcpy(v30 + 376, v24, v25);
  *(_OWORD *)(v30 + 280) = *(_OWORD *)"__GPU_LD_MD";
  *((_DWORD *)v30 + 78) = v27 + 376;
  *((_QWORD *)v30 + 38) = v28;
  memcpy(&v30[((_DWORD)v27 + 376) & 0xFFFFFFF8], *((const void **)this + 315), v26);
  v32 = (uint64_t)&v30[*((unsigned int *)v30 + 9) + 32];
  *(_QWORD *)v32 = 0x1800000002;
  *(_DWORD *)(v32 + 8) = v29;
  *(_DWORD *)(v32 + 12) = 1;
  v33 = (v29 + 16);
  *(_DWORD *)(v32 + 16) = v33;
  *(_DWORD *)(v32 + 20) = 20;
  strcpy(&v30[v33], "__agc.ctx_switch");
  v34 = &v30[*(unsigned int *)(v32 + 8)];
  *(_DWORD *)v34 = 1;
  *((_WORD *)v34 + 2) = 270;
  *((_QWORD *)this + 59) = v30;
  *((_QWORD *)this + 60) = v29 + 40;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v36);
  return 1;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 22, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

BOOL parseMDPrimitiveType(uint64_t a1, int *a2)
{
  int v4;
  _BOOL8 result;

  if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.line"))
  {
    v4 = 1;
  }
  else if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.point"))
  {
    v4 = 0;
  }
  else
  {
    result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.triangle");
    if (!result)
      return result;
    v4 = 2;
  }
  *a2 = v4;
  return 1;
}

uint64_t AGCLLVMUserMeshShaderAnalysis::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm::MDString *v8;
  const char *v9;
  const char *v10;
  BOOL v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  void *String;
  size_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 __p;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  int v31;
  unsigned int v32;

  v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3)
    v9 = "air.primitive_data";
  else
    v9 = "air.vertex_data";
  if (isStringMDNode(v8, v9))
  {
    v32 = 0;
  }
  else
  {
    if (a3)
      v10 = "air.mesh_primitive_data";
    else
      v10 = "air.mesh_vertex_data";
    v11 = isStringMDNode(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)), v10);
    result = 0;
    v32 = 0;
    if (!v11)
      return result;
  }
  LODWORD(v21) = 1;
  result = parseMDInt(0, a2, (unsigned int *)&v21, &v32);
  if ((_DWORD)result)
  {
    result = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (result)
    {
      if (*(_BYTE *)result)
      {
        return 0;
      }
      else
      {
        if (a3)
          v13 = 3;
        else
          v13 = 0;
        if (v32 < 0xFFFFFFFA)
          v14 = ((a3 != 0) | (2 * v32)) + 6;
        else
          v14 = ~v32;
        v21 = 1;
        v22 = v13;
        v23 = 0;
        v24 = v14;
        v27 = 0;
        v28 = 0;
        v29 = a4;
        v30 = 0;
        if (a4)
          v15 = 10;
        else
          v15 = 1;
        if (a4)
          v16 = 20;
        else
          v16 = 18;
        if (a3)
          v15 = v16;
        v31 = v15;
        String = (void *)llvm::MDString::getString((llvm::MDString *)result);
        if (String)
        {
          std::string::basic_string[abi:nn180100](&v19, String, v18);
        }
        else
        {
          v19 = 0uLL;
          v20 = 0;
        }
        __p = v19;
        v26 = v20;
        GenericVaryingAllocator::addVarying(a1 + 3320, (unint64_t)&v21);
        if (SHIBYTE(v26) < 0)
          operator delete((void *)__p);
        return 1;
      }
    }
  }
  return result;
}

void AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(AGCLLVMUserMeshShader *this)
{
  uint64_t v1;

  AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
}

{
  uint64_t v1;

  AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E7E68460;
  *((_QWORD *)this + 756) = &unk_1E7E68798;
  *((_QWORD *)this + 760) = &unk_1E7E68888;
  v7 = (void **)((char *)this + 5264);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v7);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 590);
  v2 = (void *)*((_QWORD *)this + 587);
  if (v2)
  {
    *((_QWORD *)this + 588) = v2;
    operator delete(v2);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4568);
  v3 = *((_QWORD *)this + 569);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4536));
  *(_QWORD *)this = off_1E7E68908;
  *((_QWORD *)this + 756) = &off_1E7E68C00;
  *((_QWORD *)this + 760) = &off_1E7E68CF0;
  v4 = *((_QWORD *)this + 564);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4496));
  v5 = *((_QWORD *)this + 561);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4472));
  std::__hash_table<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>>>::~__hash_table((uint64_t)this + 4432);
  v6 = *((_QWORD *)this + 553);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4408));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E688A0);
}

uint64_t AGCLLVMUserMeshShader::initCompile(AGCLLVMUserMeshShader *this)
{
  uint64_t v2;
  BOOL *v3;
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  std::string *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  std::string v21;
  void *v22[2];
  std::string::size_type v23;
  std::string v24;
  void *v25[2];
  std::string::size_type v26;
  __int128 v27;
  std::string::size_type v28;
  __int16 v29;
  void *v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((_QWORD *)this + 565) + 20), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1092);
  if ((_DWORD)v2)
  {
    v3 = (BOOL *)this + 4384;
    AGCLLVMUserObjectShaderBase::initCompile(this);
    if (*((_BYTE *)this + 4405))
    {
      v30[0] = *(void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      v30[1] = v30[0];
      v4 = llvm::StructType::get();
      v5 = (llvm::Type *)llvm::PointerType::get();
      *((_QWORD *)this + 676) = v4;
      *(_QWORD *)&v27 = "agc.view_mappings_pointer_global";
      v29 = 259;
      v6 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
      *((_QWORD *)this + 675) = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)&v27, v7, *((_DWORD *)this + 1140), 5, 0);
    }
    v8 = (std::string *)std::string::basic_string[abi:nn180100]<0>(v30, "air.get_global_size");
    v9 = std::string::append(v8, ".i32");
    v10 = v9->__r_.__value_.__r.__words[2];
    v27 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v28 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (llvm::Module::getFunction())
    {
      *v3 = 1;
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v24, "air.get_global_size");
      v11 = std::string::append(&v24, ".i16");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)v25 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v26 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (llvm::Module::getFunction())
      {
        *v3 = 1;
      }
      else
      {
        std::string::basic_string[abi:nn180100]<0>(&v21, "air.get_num_groups");
        v13 = std::string::append(&v21, ".i32");
        v14 = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v23 = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (llvm::Module::getFunction())
        {
          *v3 = 1;
        }
        else
        {
          std::string::basic_string[abi:nn180100]<0>(&v18, "air.get_num_groups");
          v15 = std::string::append(&v18, ".i16");
          v16 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v20 = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          *v3 = llvm::Module::getFunction() != 0;
          if (SHIBYTE(v20) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23) < 0)
          operator delete(v22[0]);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (v31 < 0)
      operator delete(v30[0]);
    std::string::basic_string[abi:nn180100]<0>(&v27, "air.object_threadgroup_position_in_grid");
    *((_BYTE *)this + 4385) = llvm::Module::getFunction() != 0;
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
  return v2;
}

uint64_t AGCLLVMUserMeshShader::addWrapperPostfix(AGCLLVMUserMeshShader *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  llvm::CmpInst **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t ICmp;
  llvm::Value *v16;
  char *v17;
  llvm::Type **v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  llvm::Type *v22;
  uint64_t AlignedLoad;
  uint64_t v24;
  llvm::Type **Cast;
  uint64_t *v26;
  llvm::Type **PrimCountPointer;
  llvm::Value *v28;
  llvm::Type *v29;
  llvm::CmpInst **v30;
  uint64_t *v31;
  uint64_t v32;
  llvm::Value *Select;
  llvm::IRBuilderBase *v34;
  llvm::Value *v35;
  llvm::Value *Mul;
  const char *v37;
  const char *Value;
  uint64_t v39;
  llvm::IRBuilderBase *v40;
  llvm::Type *v41;
  llvm::Value *PointerCast;
  llvm::CmpInst **v43;
  llvm::IRBuilderBase *v44;
  llvm::Value *v45;
  llvm::Value *Add;
  llvm::Value *v47;
  uint64_t UDiv;
  llvm::BasicBlock *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  llvm::Type *v56;
  llvm::User *PHI;
  char *v58;
  llvm::Type *v59;
  llvm::User *v60;
  llvm::Value *v61;
  char *v62;
  llvm::Type *v63;
  llvm::Type **GEP;
  uint64_t *v65;
  llvm::Value *v66;
  llvm::Type *v67;
  llvm::Value *v68;
  llvm::Type **InsertElement;
  uint64_t v70;
  char v71;
  char v72;
  llvm::CmpInst **v73;
  char *v74;
  llvm::IRBuilderBase *v75;
  llvm::Value *v76;
  llvm::CmpInst **Element;
  uint64_t *v78;
  uint64_t v79;
  llvm::IRBuilderBase *v80;
  llvm::Value *v81;
  llvm::CmpInst **v82;
  uint64_t *v83;
  uint64_t v84;
  llvm::Value *v85;
  llvm::IRBuilderBase *v86;
  llvm::Value *v87;
  llvm::IRBuilderBase *v88;
  char *v89;
  llvm::IRBuilderBase *v90;
  llvm::Value *v91;
  llvm::IRBuilderBase *v92;
  llvm::Value *v93;
  llvm::CmpInst **v94;
  llvm::IRBuilderBase *v95;
  llvm::Value *v96;
  uint64_t LShr;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  llvm::Value *v102;
  llvm::IRBuilderBase *v103;
  llvm::Value *v104;
  llvm::Value *v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  llvm::Type *v110;
  llvm::User *v111;
  llvm::Value *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  llvm::Value *v116;
  llvm::IRBuilderBase *v117;
  llvm::Value *v118;
  uint64_t v119;
  llvm::Value *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  llvm::Value *v126;
  llvm::IRBuilderBase *v127;
  llvm::Value *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  llvm::BasicBlock *v132;
  llvm::BasicBlock *v133;
  uint64_t v134;
  llvm::BasicBlock *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  llvm::Type *v139;
  llvm::User *v140;
  llvm::Value *v141;
  llvm::IRBuilderBase *v142;
  llvm::CmpInst **v143;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  llvm::Value *v149;
  char *v150;
  llvm::IRBuilderBase *v151;
  llvm::Value *v152;
  llvm::Value *v153;
  uint64_t *v154;
  uint64_t v155;
  char *v156;
  llvm::Value *v157;
  llvm::BasicBlock *v158;
  llvm::BasicBlock *v159;
  char *v160;
  uint64_t v161;
  llvm::BasicBlock *v162;
  char *v163;
  char *v164;
  llvm::Type *v165;
  llvm::User *v166;
  llvm::Value *v167;
  llvm::IRBuilderBase *v168;
  llvm::CmpInst **v169;
  uint64_t *v170;
  uint64_t v171;
  char *v172;
  unsigned int v173;
  llvm::Type **v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  llvm::Value *v186;
  llvm::Value *v187;
  char *v188;
  llvm::IRBuilderBase *v189;
  llvm::Value *v190;
  llvm::Value *v191;
  uint64_t *v192;
  uint64_t v193;
  char *v194;
  llvm::Value *v195;
  llvm::Value *v196;
  llvm::Value *VertexAmpCount;
  llvm::BasicBlock *v198;
  llvm::BasicBlock *v199;
  uint64_t v200;
  llvm::BasicBlock *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  llvm::Type *v205;
  llvm::User *v206;
  llvm::Value *v207;
  llvm::BasicBlock *v208;
  llvm::IRBuilderBase *v209;
  llvm::CmpInst **v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  llvm::Value *v216;
  char *v217;
  llvm::IRBuilderBase *v218;
  llvm::Value *v219;
  llvm::Value *v220;
  uint64_t *v221;
  uint64_t v222;
  char *v223;
  llvm::Type **v224;
  llvm::BasicBlock *v225;
  llvm::BasicBlock *v226;
  uint64_t v227;
  llvm::BasicBlock *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  llvm::Type *v232;
  llvm::User *v233;
  llvm::Value *v234;
  llvm::IRBuilderBase *v235;
  llvm::CmpInst **v236;
  uint64_t *v237;
  uint64_t v238;
  char *v239;
  unint64_t v240;
  llvm::Value *v241;
  uint64_t v242;
  uint64_t v243;
  llvm::Value *v244;
  char *v245;
  llvm::IRBuilderBase *v246;
  llvm::Value *v247;
  llvm::Value *v248;
  uint64_t *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  llvm::IRBuilderBase *v257;
  llvm::Value *v258;
  llvm::Value *v259;
  llvm::Value *v260;
  uint64_t v261;
  llvm::IRBuilderBase *v262;
  llvm::Type *v263;
  llvm::Value *v264;
  llvm::BasicBlock *v265;
  llvm::BasicBlock *v266;
  uint64_t v267;
  llvm::BasicBlock *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  llvm::Type *v272;
  llvm::User *v273;
  llvm::Value *v274;
  llvm::IRBuilderBase *v275;
  llvm::CmpInst **v276;
  uint64_t *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  llvm::Type *v281;
  llvm::IRBuilderBase *v282;
  llvm::Type **v283;
  llvm::Type *v284;
  llvm::Value *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  llvm::IRBuilderBase *v289;
  llvm::Value *v290;
  llvm::Value *v291;
  uint64_t *v292;
  uint64_t v293;
  char *v294;
  llvm::CmpInst **v295;
  llvm::Value *v296;
  llvm::IRBuilderBase *v297;
  llvm::Type *v298;
  llvm::Value *v299;
  char *v300;
  llvm::Type *v301;
  llvm::Value *v302;
  llvm::Value *v303;
  llvm::Value *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  llvm::BasicBlock *v309;
  llvm::BasicBlock *v310;
  llvm::BasicBlock *v311;
  llvm::BasicBlock *v312;
  char *v313;
  char *v314;
  llvm::Type *v315;
  llvm::User *v316;
  llvm::Value *v317;
  llvm::IRBuilderBase *v318;
  llvm::CmpInst **v319;
  uint64_t *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  llvm::Type *v324;
  llvm::User *v325;
  llvm::Value *v326;
  char *v327;
  llvm::Type *v328;
  llvm::IRBuilderBase *v329;
  llvm::Value *v330;
  llvm::Type **v331;
  char *v332;
  llvm::Type *v333;
  llvm::IRBuilderBase *v334;
  llvm::Type *v335;
  llvm::Value *v336;
  llvm::Type **v337;
  llvm::IRBuilderBase *v338;
  llvm::Type *v339;
  llvm::Value *v340;
  char *v341;
  uint64_t v342;
  llvm::IRBuilderBase *v343;
  llvm::Value *v344;
  llvm::Value *v345;
  uint64_t *v346;
  uint64_t v347;
  char *v348;
  llvm::IRBuilderBase *v349;
  llvm::Value *v350;
  llvm::Value *v351;
  uint64_t *v352;
  uint64_t v353;
  char *v354;
  uint64_t *v355;
  uint64_t v356;
  llvm::Value *v357;
  uint64_t *v358;
  uint64_t v359;
  llvm::Value *v360;
  llvm::IRBuilderBase *v361;
  llvm::IRBuilderBase *v362;
  llvm::Type **v363;
  unsigned int v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  llvm::BasicBlock *v372;
  char *v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t Function;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  llvm::BasicBlock *v400;
  char *v401;
  llvm::Value *v402;
  llvm::Type **v403;
  llvm::Type **v404;
  llvm::Type **v405;
  llvm::Value *v406;
  uint64_t v407;
  llvm::IRBuilderBase *v408;
  llvm::CmpInst **v409;
  uint64_t *v410;
  uint64_t v411;
  char *v412;
  int v413;
  char *v414;
  char *v415;
  char *v416;
  int v417;
  llvm::BasicBlock *v418;
  char *v419;
  int v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  llvm::IRBuilderBase *v425;
  uint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  uint64_t result;
  char *v438;
  llvm::Value *Not;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  llvm::CmpInst **v443;
  llvm::Value *v444;
  llvm::BasicBlock *v445;
  llvm::BasicBlock *v446;
  llvm::Value *v447;
  uint64_t v448;
  llvm::Type **v449;
  llvm::BasicBlock *v450;
  llvm::BasicBlock *v451;
  llvm::BasicBlock *v452;
  llvm::BasicBlock *v453;
  llvm::BasicBlock *v454;
  llvm::BasicBlock *v455;
  uint64_t v456;
  unsigned int v457;
  uint64_t v458;
  llvm::Value *v459;
  llvm::Value *v460;
  llvm::Value *v461;
  llvm::Value *v462;
  llvm::Value *v463;
  llvm::Value *v464;
  llvm::Value *v465;
  llvm::Value *v466;
  llvm::Value *v467;
  llvm::Value *v468;
  llvm::Value *v469;
  __int128 v470;
  uint64_t v471;
  int v472;
  __int128 v473;
  uint64_t v474;
  int v475;
  __int128 v476;
  uint64_t v477;
  int v478;
  __int128 v479;
  uint64_t v480;
  int v481;
  __int128 v482;
  uint64_t v483;
  int v484;
  __int128 v485;
  uint64_t v486;
  int v487;
  __int128 v488;
  uint64_t v489;
  int v490;
  __int128 v491;
  uint64_t v492;
  int v493;
  __int128 v494;
  uint64_t v495;
  int v496;
  __int128 v497;
  uint64_t v498;
  int v499;
  __int128 v500;
  uint64_t v501;
  int v502;
  __int128 v503;
  uint64_t v504;
  int v505;
  __int128 v506;
  uint64_t v507;
  int v508;
  __int128 v509;
  uint64_t v510;
  int v511;
  __int16 v512;
  __int128 v513;
  uint64_t v514;
  int v515;
  _QWORD v516[3];
  __int128 v517;
  __int128 v518;
  __int16 v519;
  uint64_t v520;

  v520 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v517 = llvm::ConstantInt::get();
  *((_QWORD *)&v517 + 1) = llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)&v517, 2);
  *(_QWORD *)&v517 = "exit";
  v519 = 259;
  v446 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *((_QWORD *)v2 + 50);
  v506 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 40));
  v508 = *((_DWORD *)v2 + 34);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 312))(v3, &v506);
  if (v507)
    llvm::MetadataTracking::untrack();
  v4 = llvm::FunctionType::get();
  *(_QWORD *)&v517 = "agc.mesh.write_uvb";
  v519 = 259;
  v5 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v6 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x1CAA2CE58](v6, v4, 7, 0xFFFFFFFFLL, &v517, v5);
  llvm::Function::addFnAttr();
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v519 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v7 + 40), **(_QWORD **)(*(_QWORD *)v6 + 16), v6, 0, 0, (uint64_t)&v517);
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v446);
  *(_QWORD *)&v517 = "entry";
  v519 = 259;
  v8 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v517 = "exit";
  v519 = 259;
  v9 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v517 = "simdGrp0";
  v519 = 259;
  v10 = operator new();
  llvm::BasicBlock::BasicBlock();
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v11 + 11) = v8;
  *((_QWORD *)v11 + 12) = v8 + 40;
  v12 = (llvm::CmpInst **)AGCLLVMUserObjectShaderBase::buildSimdGroupIndexInThreadgroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = llvm::ConstantInt::get();
  v519 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(v13, 32, v12, v14, (uint64_t)&v517);
  v445 = (llvm::BasicBlock *)v9;
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v10, v9);
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v17 + 11) = v10;
  *((_QWORD *)v17 + 12) = v10 + 40;
  v18 = (llvm::Type **)*((_QWORD *)this + 569);
  v19 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (!v18)
  {
    v175 = (char *)this + v19;
    v176 = *(_QWORD *)((char *)this + v19 + 400);
    v473 = *(_OWORD *)((char *)this + v19 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserMeshShader *)((char *)this + v19 + 40));
    v475 = *((_DWORD *)v175 + 34);
    v177 = llvm::ConstantInt::get();
    v178 = llvm::ConstantInt::get();
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v176 + 336))(v176, &v473, v177, v178);
    if (v474)
      llvm::MetadataTracking::untrack();
    v179 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v180 = *((_QWORD *)v179 + 50);
    v470 = *(_OWORD *)(v179 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v179 + 40));
    v472 = *((_DWORD *)v179 + 34);
    v181 = llvm::ConstantInt::get();
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v180 + 344))(v180, &v470, v181);
    if (v471)
      llvm::MetadataTracking::untrack();
    goto LABEL_99;
  }
  v20 = (char *)this + 4564;
  v21 = (uint64_t *)((char *)this + v19 + 40);
  v519 = 257;
  v22 = AGCLLVMBuilder::tryDeducePointeeType(v18, v16);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v21, v22, (uint64_t)v18, 0, (uint64_t)&v517);
  v24 = *((_QWORD *)this + 542);
  v512 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v21, 48, AlignedLoad, v24, (uint64_t)&v509);
  v26 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  PrimCountPointer = (llvm::Type **)AGCLLVMUserMeshShader::getPrimCountPointer(this, Cast);
  v519 = 257;
  v29 = AGCLLVMBuilder::tryDeducePointeeType(PrimCountPointer, v28);
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v29, (uint64_t)PrimCountPointer, 0, (uint64_t)&v517);
  v31 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v32 = llvm::ConstantInt::get();
  v519 = 257;
  llvm::IRBuilderBase::CreateICmp(v31, 37, v30, v32, (uint64_t)&v517);
  llvm::ConstantInt::get();
  v512 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v34 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v519 = 257;
  v456 = (uint64_t)Select;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v34, Select, v35, (const llvm::Twine *)&v517);
  v449 = Cast;
  v453 = Mul;
  if (MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_MESH_DISABLE_INDEX_CLAMPING", v37)) != 0
    && *Value != 48
    && atoi(Value))
  {
    v39 = llvm::ConstantInt::get();
  }
  else
  {
    v40 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v41 = (llvm::Type *)*((_QWORD *)this + 544);
    v519 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v40, Cast, v41, (const llvm::Twine *)&v517);
    v43 = (llvm::CmpInst **)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    v44 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v45 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v44, Mul, v45, (const llvm::Twine *)&v517);
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    v512 = 257;
    UDiv = llvm::IRBuilderBase::CreateUDiv(v44, Add, v47, (const llvm::Twine *)&v509);
    v49 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "clamp_index_list";
    v519 = 259;
    v50 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "clamp_index_list_done";
    v519 = 259;
    v51 = operator new();
    llvm::BasicBlock::BasicBlock();
    v52 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v53 = llvm::IRBuilderBase::CreateICmp(v52, 36, v43, UDiv, (uint64_t)&v517);
    v448 = v51;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v53, v50, v51);
    v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v450 = (llvm::BasicBlock *)v50;
    *((_QWORD *)v54 + 11) = v50;
    *((_QWORD *)v54 + 12) = v50 + 40;
    v55 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v56 = (llvm::Type *)*((_QWORD *)v55 + 28);
    v519 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v55 + 40), v56, 2, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(PHI, (llvm::Value *)v43, v49);
    v58 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v59 = (llvm::Type *)*((_QWORD *)v58 + 28);
    v519 = 257;
    v60 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v58 + 40), v59, 2, (const llvm::Twine *)&v517);
    v61 = (llvm::Value *)llvm::ConstantInt::get();
    v443 = (llvm::CmpInst **)v60;
    v451 = v49;
    llvm::PHINode::addIncoming(v60, v61, v49);
    v62 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v63 = (llvm::Type *)*((_QWORD *)v62 + 34);
    v519 = 257;
    v447 = PHI;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v62 + 40), v63, PointerCast, PHI, (const llvm::Twine *)&v517);
    v65 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v519 = 257;
    v67 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v66);
    v441 = (uint64_t)GEP;
    v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v65 + 5, v67, (uint64_t)GEP, 0, (uint64_t)&v517);
    InsertElement = (llvm::Type **)llvm::UndefValue::get();
    v70 = 0;
    v71 = 1;
    do
    {
      v72 = v71;
      v73 = (llvm::CmpInst **)v70;
      v74 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v519 = 257;
      v75 = (llvm::IRBuilderBase *)(v74 + 40);
      v76 = (llvm::Value *)llvm::ConstantInt::get();
      Element = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v75, v68, v76, (const llvm::Twine *)&v517);
      if (*((_DWORD *)this + 1150) <= 0xFFu)
      {
        v78 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v79 = llvm::ConstantInt::get();
        v519 = 257;
        llvm::IRBuilderBase::CreateICmp(v78, 36, Element, v79, (uint64_t)&v517);
        v461 = (llvm::Value *)InsertElement;
        llvm::ConstantInt::get();
        llvm::ConstantInt::get();
        v512 = 257;
        v459 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        v80 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v519 = 257;
        v81 = (llvm::Value *)llvm::ConstantInt::get();
        v82 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v80, (llvm::Value *)Element, v81, (const llvm::Twine *)&v517);
        v83 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v84 = llvm::ConstantInt::get();
        v519 = 257;
        llvm::IRBuilderBase::CreateICmp(v83, 36, v82, v84, (uint64_t)&v517);
        llvm::ConstantInt::get();
        llvm::ConstantInt::get();
        v512 = 257;
        v85 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        v86 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v519 = 257;
        v87 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v86, v459, v85, (const llvm::Twine *)&v517);
        v88 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v519 = 257;
        Element = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v88, v87, (llvm::Value *)Element, (const llvm::Twine *)&v517);
        v89 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v519 = 257;
        v90 = (llvm::IRBuilderBase *)(v89 + 40);
        v91 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement(v90, v461, (llvm::Value *)Element, v91, (const llvm::Twine *)&v517);
      }
      v92 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v519 = 257;
      v93 = (llvm::Value *)llvm::ConstantInt::get();
      v94 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v92, (llvm::Value *)Element, v93, (const llvm::Twine *)&v517);
      v95 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v519 = 257;
      v96 = (llvm::Value *)llvm::ConstantInt::get();
      LShr = llvm::IRBuilderBase::CreateLShr(v95, (llvm::Value *)Element, v96, (const llvm::Twine *)&v517);
      v98 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v519 = 257;
      llvm::IRBuilderBase::CreateICmp(v98, 34, v94, LShr, (uint64_t)&v517);
      v512 = 257;
      v70 = llvm::IRBuilderBase::CreateSelect();
      v71 = 0;
    }
    while ((v72 & 1) != 0);
    v99 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    llvm::IRBuilderBase::CreateICmp(v99, 34, v73, v70, (uint64_t)&v517);
    v512 = 257;
    v100 = llvm::IRBuilderBase::CreateSelect();
    if (*((_DWORD *)this + 1150) < 0x100u)
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), InsertElement, v441, 0);
    v101 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    llvm::IRBuilderBase::CreateICmp(v101, 36, v443, v100, (uint64_t)&v517);
    v512 = 257;
    v102 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    llvm::PHINode::addIncoming(v443, v102, v450);
    v103 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v104 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v105 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v103, v447, v104, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v447, v105, v450);
    v106 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v107 = llvm::IRBuilderBase::CreateICmp(v106, 36, (llvm::CmpInst **)v105, UDiv, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v107, (uint64_t)v450, v448);
    v108 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v108 + 11) = v448;
    *((_QWORD *)v108 + 12) = v448 + 40;
    v109 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v110 = (llvm::Type *)*((_QWORD *)v109 + 28);
    v519 = 257;
    v111 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v109 + 40), v110, 2, (const llvm::Twine *)&v517);
    v112 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v111, v112, v451);
    llvm::PHINode::addIncoming(v111, v102, v450);
    v113 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 688))(v113);
    v115 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v509 = *(_OWORD *)(v115 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v115 + 40));
    v511 = *((_DWORD *)v115 + 34);
    v116 = AGCLLVMGen5TargetLowerer::buildReduce(v114, &v509, (uint64_t)"simd_max.u.i16", 14, v111);
    v20 = (char *)this + 4564;
    Cast = v449;
    if (v510)
      llvm::MetadataTracking::untrack();
    v117 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v118 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v39 = llvm::IRBuilderBase::CreateAdd(v117, v116, v118, (const llvm::Twine *)&v517);
  }
  v119 = v39;
  v458 = v39;
  if (v20[73])
  {
    v120 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    v121 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v122 = *((_QWORD *)v121 + 50);
    v509 = *(_OWORD *)(v121 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v121 + 40));
    v511 = *((_DWORD *)v121 + 34);
    v123 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v122 + 328))(v122, &v509);
    if (v510)
      llvm::MetadataTracking::untrack();
    v124 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v125 = *((_QWORD *)v124 + 30);
    v519 = 257;
    v126 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v124 + 40), 47, v123, v125, (uint64_t)&v517);
    v127 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v128 = (llvm::Value *)llvm::ConstantInt::get();
    v129 = llvm::IRBuilderBase::CreateLShr(v127, v126, v128, (const llvm::Twine *)&v517);
    v130 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v131 = *((_QWORD *)v130 + 29);
    v519 = 257;
    v466 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v130 + 40), 38, v129, v131, (uint64_t)&v517);
    v132 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "primaddr_write_body_start";
    v519 = 259;
    v133 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primaddr_write_body_write";
    v519 = 259;
    v134 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primaddr_write_body_end";
    v519 = 259;
    v135 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primaddr_write_done";
    v519 = 259;
    v136 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v133);
    v137 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v137 + 11) = v133;
    *((_QWORD *)v137 + 12) = (char *)v133 + 40;
    v138 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v139 = (llvm::Type *)*((_QWORD *)v138 + 28);
    v519 = 257;
    v140 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v138 + 40), v139, 2, (const llvm::Twine *)&v517);
    v141 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v140, v141, v132);
    v142 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v143 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v142, v140, v120, (const llvm::Twine *)&v517);
    v144 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v119 = v458;
    v145 = llvm::IRBuilderBase::CreateICmp(v144, 36, v143, v458, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v145, v134, (uint64_t)v135);
    v146 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v146 + 11) = v134;
    *((_QWORD *)v146 + 12) = v134 + 40;
    v147 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v148 = *((_QWORD *)v147 + 29);
    v519 = 257;
    v149 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v147 + 40), 39, (uint64_t)v143, v148, (uint64_t)&v517);
    Cast = v449;
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v449, 0, 0xFFFFFFFE, v149, v466, 0);
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v135);
    v150 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v150 + 11) = v135;
    *((_QWORD *)v150 + 12) = (char *)v135 + 40;
    v151 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v152 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v153 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v151, v140, v152, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v140, v153, v135);
    v154 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v155 = llvm::IRBuilderBase::CreateICmp(v154, 36, (llvm::CmpInst **)v153, v458, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v155, (uint64_t)v133, v136);
    v156 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v156 + 11) = v136;
    *((_QWORD *)v156 + 12) = v136 + 40;
    v20 = (char *)this + 4564;
  }
  if (v20[70] && !v20[71])
  {
    v157 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalLinearID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    v158 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "primid_write_body_start";
    v519 = 259;
    v159 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primid_write_body_write";
    v519 = 259;
    v160 = v20;
    v161 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primid_write_body_end";
    v519 = 259;
    v162 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primid_write_done";
    v519 = 259;
    v462 = (llvm::Value *)operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v159);
    v163 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v163 + 11) = v159;
    *((_QWORD *)v163 + 12) = (char *)v159 + 40;
    v164 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v165 = (llvm::Type *)*((_QWORD *)v164 + 28);
    v519 = 257;
    v166 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v164 + 40), v165, 2, (const llvm::Twine *)&v517);
    v167 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v166, v167, v158);
    v168 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v169 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v168, v166, v157, (const llvm::Twine *)&v517);
    v170 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v171 = llvm::IRBuilderBase::CreateICmp(v170, 36, v169, v456, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v171, v161, (uint64_t)v162);
    v172 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v172 + 11) = v161;
    *((_QWORD *)v172 + 12) = v161 + 40;
    if (v160[72])
    {
      v173 = *((_DWORD *)this + 1140);
      v174 = v449;
      if (!v173)
      {
LABEL_34:
        llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v162);
        v188 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        *((_QWORD *)v188 + 11) = v162;
        *((_QWORD *)v188 + 12) = (char *)v162 + 40;
        v189 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v190 = (llvm::Value *)llvm::ConstantInt::get();
        v519 = 257;
        v191 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v189, v166, v190, (const llvm::Twine *)&v517);
        llvm::PHINode::addIncoming(v166, v191, v162);
        v192 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v519 = 257;
        v193 = llvm::IRBuilderBase::CreateICmp(v192, 36, (llvm::CmpInst **)v191, v456, (uint64_t)&v517);
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v193, (uint64_t)v159, (uint64_t)v462);
        v194 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        *((_QWORD *)v194 + 11) = v462;
        *((_QWORD *)v194 + 12) = (char *)v462 + 40;
        v20 = (char *)this + 4564;
        Cast = v174;
        v119 = v458;
        goto LABEL_35;
      }
    }
    else
    {
      v173 = 1;
      v174 = v449;
    }
    v182 = 0;
    v183 = v173;
    do
    {
      v184 = *(_QWORD *)(*(_QWORD *)this - 24);
      v185 = *(_QWORD *)((char *)this + v184 + 232);
      v519 = 257;
      v186 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v184 + 40, 39, (uint64_t)v169, v185, (uint64_t)&v517);
      v187 = (llvm::Value *)llvm::ConstantInt::get();
      AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v174, 1, 0xFFFFFFFF, v186, (llvm::Value *)v169, v187);
      ++v182;
    }
    while (v183 != v182);
    goto LABEL_34;
  }
LABEL_35:
  if (*v20)
  {
    v195 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v196);
    v198 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "amp_count_write_body_start";
    v519 = 259;
    v199 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_count_write_body_write";
    v519 = 259;
    v200 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_count_write_body_end";
    v519 = 259;
    v201 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_count_write_done";
    v519 = 259;
    v202 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v199);
    v203 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v203 + 11) = v199;
    *((_QWORD *)v203 + 12) = (char *)v199 + 40;
    v204 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v205 = (llvm::Type *)*((_QWORD *)v204 + 28);
    v519 = 257;
    v206 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v204 + 40), v205, 2, (const llvm::Twine *)&v517);
    v207 = (llvm::Value *)llvm::ConstantInt::get();
    v208 = v198;
    Cast = v449;
    llvm::PHINode::addIncoming(v206, v207, v208);
    v209 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v210 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v209, v206, v195, (const llvm::Twine *)&v517);
    v211 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v212 = llvm::IRBuilderBase::CreateICmp(v211, 36, v210, v458, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v212, v200, (uint64_t)v201);
    v213 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v213 + 11) = v200;
    *((_QWORD *)v213 + 12) = v200 + 40;
    v20 = (char *)this + 4564;
    v214 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v215 = *((_QWORD *)v214 + 29);
    v519 = 257;
    v216 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v214 + 40), 39, (uint64_t)v210, v215, (uint64_t)&v517);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v449, 1, 0xFFFFFFFA, v216, VertexAmpCount, 0);
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v201);
    v217 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v217 + 11) = v201;
    *((_QWORD *)v217 + 12) = (char *)v201 + 40;
    v218 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v219 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v220 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v218, v206, v219, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v206, v220, v201);
    v221 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v119 = v458;
    v222 = llvm::IRBuilderBase::CreateICmp(v221, 36, (llvm::CmpInst **)v220, v458, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v222, (uint64_t)v199, v202);
    v223 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v223 + 11) = v202;
    *((_QWORD *)v223 + 12) = v202 + 40;
  }
  if (v20[2])
  {
    v463 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    v224 = Cast;
    v225 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "amp_id_write_body_start";
    v519 = 259;
    v226 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_id_write_body_write";
    v519 = 259;
    v227 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_id_write_body_end";
    v519 = 259;
    v228 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "amp_id_write_done";
    v519 = 259;
    v229 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v226);
    v230 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v467 = v226;
    *((_QWORD *)v230 + 11) = v226;
    *((_QWORD *)v230 + 12) = (char *)v226 + 40;
    v231 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v232 = (llvm::Type *)*((_QWORD *)v231 + 28);
    v519 = 257;
    v233 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v231 + 40), v232, 2, (const llvm::Twine *)&v517);
    v234 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v233, v234, v225);
    v235 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v236 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v235, v233, v463, (const llvm::Twine *)&v517);
    v237 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v238 = llvm::IRBuilderBase::CreateICmp(v237, 36, v236, v119, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v238, v227, (uint64_t)v228);
    v239 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v239 + 11) = v227;
    *((_QWORD *)v239 + 12) = v227 + 40;
    if (*((_DWORD *)this + 1140))
    {
      v240 = 0;
      do
      {
        v241 = (llvm::Value *)llvm::ConstantInt::get();
        v242 = *(_QWORD *)(*(_QWORD *)this - 24);
        v243 = *(_QWORD *)((char *)this + v242 + 232);
        v519 = 257;
        v244 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v242 + 40, 39, (uint64_t)v236, v243, (uint64_t)&v517);
        AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v224, 0, 0xFFFFFFFB, v244, v241, v241);
        ++v240;
      }
      while (v240 < *((unsigned int *)this + 1140));
    }
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v228);
    v245 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v245 + 11) = v228;
    *((_QWORD *)v245 + 12) = (char *)v228 + 40;
    v246 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v247 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v248 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v246, v233, v247, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v233, v248, v228);
    v249 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v119 = v458;
    v250 = llvm::IRBuilderBase::CreateICmp(v249, 36, (llvm::CmpInst **)v248, v458, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v250, (uint64_t)v467, v229);
    v251 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v251 + 11) = v229;
    *((_QWORD *)v251 + 12) = v229 + 40;
    Cast = v224;
  }
  v252 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v253 = *((_QWORD *)v252 + 50);
  v503 = *(_OWORD *)(v252 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v252 + 40));
  v505 = *((_DWORD *)v252 + 34);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v253 + 336))(v253, &v503, v456, v119);
  if (v504)
    llvm::MetadataTracking::untrack();
  v254 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v255 = *((_QWORD *)v254 + 50);
  v500 = *(_OWORD *)(v254 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v254 + 40));
  v502 = *((_DWORD *)v254 + 34);
  v256 = llvm::ConstantInt::get();
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v255 + 344))(v255, &v500, v256);
  if (v501)
    llvm::MetadataTracking::untrack();
  v257 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v258 = (llvm::Value *)llvm::ConstantInt::get();
  v519 = 257;
  v259 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v257, v453, v258, (const llvm::Twine *)&v517);
  v260 = (llvm::Value *)llvm::ConstantInt::get();
  v512 = 257;
  v261 = llvm::IRBuilderBase::CreateUDiv(v257, v259, v260, (const llvm::Twine *)&v509);
  v262 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v263 = (llvm::Type *)*((_QWORD *)this + 542);
  v519 = 257;
  v464 = llvm::IRBuilderBase::CreatePointerCast(v262, Cast, v263, (const llvm::Twine *)&v517);
  v264 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
  v265 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
  *(_QWORD *)&v517 = "index_write_body_start";
  v519 = 259;
  v266 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v517 = "index_write_body_write";
  v519 = 259;
  v267 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v517 = "index_write_body_end";
  v519 = 259;
  v268 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v517 = "index_write_done";
  v519 = 259;
  v269 = operator new();
  llvm::BasicBlock::BasicBlock();
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v266);
  v270 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v270 + 11) = v266;
  *((_QWORD *)v270 + 12) = (char *)v266 + 40;
  v271 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v272 = (llvm::Type *)*((_QWORD *)v271 + 28);
  v519 = 257;
  v273 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v271 + 40), v272, 2, (const llvm::Twine *)&v517);
  v274 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::PHINode::addIncoming(v273, v274, v265);
  v275 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v519 = 257;
  v276 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v275, v273, v264, (const llvm::Twine *)&v517);
  v277 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v519 = 257;
  v278 = llvm::IRBuilderBase::CreateICmp(v277, 36, v276, v261, (uint64_t)&v517);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v278, v267, (uint64_t)v268);
  v279 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v279 + 11) = v267;
  *((_QWORD *)v279 + 12) = v267 + 40;
  v280 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v281 = (llvm::Type *)*((_QWORD *)v280 + 29);
  v282 = (llvm::IRBuilderBase *)(v280 + 40);
  v519 = 257;
  v283 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v280 + 40), v281, v464, v273, (const llvm::Twine *)&v517);
  v284 = (llvm::Type *)*((_QWORD *)this + 540);
  v512 = 257;
  v285 = llvm::IRBuilderBase::CreatePointerCast(v282, v283, v284, (const llvm::Twine *)&v509);
  v286 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v287 = *((_QWORD *)v286 + 50);
  v509 = *(_OWORD *)(v286 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v286 + 40));
  v511 = *((_DWORD *)v286 + 34);
  (*(void (**)(uint64_t, __int128 *, llvm::User *, llvm::Value *))(*(_QWORD *)v287 + 352))(v287, &v509, v273, v285);
  if (v510)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v268);
  v288 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v288 + 11) = v268;
  *((_QWORD *)v288 + 12) = (char *)v268 + 40;
  v289 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v290 = (llvm::Value *)llvm::ConstantInt::get();
  v519 = 257;
  v291 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v289, v273, v290, (const llvm::Twine *)&v517);
  llvm::PHINode::addIncoming(v273, v291, v268);
  v292 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v519 = 257;
  v293 = llvm::IRBuilderBase::CreateICmp(v292, 36, (llvm::CmpInst **)v291, v261, (uint64_t)&v517);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v293, (uint64_t)v266, v269);
  v294 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v294 + 11) = v269;
  *((_QWORD *)v294 + 12) = v269 + 40;
  v295 = (llvm::CmpInst **)v458;
  if (*((_BYTE *)this + 4632))
  {
    v296 = (llvm::Value *)*((_QWORD *)this + 747);
    v297 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v298 = (llvm::Type *)*((_QWORD *)this + 540);
    v519 = 257;
    v299 = llvm::IRBuilderBase::CreatePointerCast(v297, v449, v298, (const llvm::Twine *)&v517);
    v300 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v301 = (llvm::Type *)*((_QWORD *)v300 + 27);
    v519 = 257;
    v454 = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v300 + 40), v301, v299, v296, (const llvm::Twine *)&v517);
    v302 = (llvm::Value *)llvm::ConstantInt::get();
    v304 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    if (*((_BYTE *)this + 4633))
    {
      v305 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v306 = AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v303);
      v307 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224);
      v519 = 257;
      v308 = llvm::IRBuilderBase::CreateCast((uint64_t)v305, 38, v306, v307, (uint64_t)&v517);
    }
    else
    {
      v308 = llvm::ConstantInt::get();
    }
    v465 = (llvm::Value *)v308;
    v309 = *(llvm::BasicBlock **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
    *(_QWORD *)&v517 = "primattr_write_body_start";
    v519 = 259;
    v310 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primattr_write_body_write";
    v519 = 259;
    v311 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primattr_write_body_end";
    v519 = 259;
    v312 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v517 = "primattr_write_done";
    v519 = 259;
    v460 = (llvm::Value *)operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v310);
    v313 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v313 + 11) = v310;
    *((_QWORD *)v313 + 12) = (char *)v310 + 40;
    v314 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v315 = (llvm::Type *)*((_QWORD *)v314 + 28);
    v519 = 257;
    v316 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v314 + 40), v315, 2, (const llvm::Twine *)&v517);
    v317 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v316, v317, v309);
    v318 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v319 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v318, v316, v304, (const llvm::Twine *)&v517);
    v320 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v321 = llvm::IRBuilderBase::CreateICmp(v320, 36, v319, v456, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v321, (uint64_t)v311, (uint64_t)v312);
    v322 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v322 + 11) = v311;
    *((_QWORD *)v322 + 12) = (char *)v311 + 40;
    v323 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v324 = (llvm::Type *)*((_QWORD *)v323 + 28);
    v519 = 257;
    v325 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v323 + 40), v324, 2, (const llvm::Twine *)&v517);
    v326 = (llvm::Value *)llvm::ConstantInt::get();
    v468 = v310;
    llvm::PHINode::addIncoming(v325, v326, v310);
    v327 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v328 = (llvm::Type *)*((_QWORD *)v327 + 27);
    v329 = (llvm::IRBuilderBase *)(v327 + 40);
    v519 = 257;
    v330 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(v327 + 40), v302, v325, (const llvm::Twine *)&v517);
    v512 = 257;
    v331 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v329, v328, v454, v330, (const llvm::Twine *)&v509);
    v332 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v333 = (llvm::Type *)*((_QWORD *)v332 + 29);
    v334 = (llvm::IRBuilderBase *)(v332 + 40);
    v335 = (llvm::Type *)*((_QWORD *)this + 542);
    v519 = 257;
    v336 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v332 + 40), v331, v335, (const llvm::Twine *)&v517);
    v512 = 257;
    v337 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v334, v333, v336, v316, (const llvm::Twine *)&v509);
    v338 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v339 = (llvm::Type *)*((_QWORD *)this + 540);
    v519 = 257;
    v340 = llvm::IRBuilderBase::CreatePointerCast(v338, v337, v339, (const llvm::Twine *)&v517);
    v341 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v342 = *((_QWORD *)v341 + 50);
    v509 = *(_OWORD *)(v341 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v341 + 40));
    v511 = *((_DWORD *)v341 + 34);
    (*(void (**)(uint64_t, __int128 *, llvm::User *, llvm::User *, llvm::Value *))(*(_QWORD *)v342 + 360))(v342, &v509, v316, v325, v340);
    if (v510)
      llvm::MetadataTracking::untrack();
    v343 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v344 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v345 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v343, v325, v344, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v325, v345, v311);
    v346 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v347 = llvm::IRBuilderBase::CreateICmp(v346, 36, (llvm::CmpInst **)v345, (uint64_t)v465, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v347, (uint64_t)v311, (uint64_t)v312);
    v348 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v348 + 11) = v312;
    *((_QWORD *)v348 + 12) = (char *)v312 + 40;
    v349 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v350 = (llvm::Value *)llvm::ConstantInt::get();
    v519 = 257;
    v351 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v349, v316, v350, (const llvm::Twine *)&v517);
    llvm::PHINode::addIncoming(v316, v351, v312);
    v352 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v519 = 257;
    v353 = llvm::IRBuilderBase::CreateICmp(v352, 36, (llvm::CmpInst **)v351, v456, (uint64_t)&v517);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v353, (uint64_t)v468, (uint64_t)v460);
    v354 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v354 + 11) = v460;
    *((_QWORD *)v354 + 12) = (char *)v460 + 40;
    v295 = (llvm::CmpInst **)v458;
  }
  v355 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v356 = llvm::ConstantInt::get();
  v519 = 257;
  v357 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v355, 37, v295, v356, (uint64_t)&v517);
  v358 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v359 = llvm::ConstantInt::get();
  v519 = 257;
  v360 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v358, 37, v295, v359, (uint64_t)&v517);
  v361 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v519 = 257;
  v440 = (uint64_t)v357;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v361, v357, (const llvm::Twine *)&v517);
  v362 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v519 = 257;
  v444 = v360;
  v442 = llvm::IRBuilderBase::CreateNot(v362, v360, (const llvm::Twine *)&v517);
  v363 = v449;
  if (*((_DWORD *)this + 1150))
  {
    v364 = 0;
    v365 = (char *)this + 336;
    while (1)
    {
      v366 = *(_QWORD *)(*(_QWORD *)this - 24);
      v367 = *(_QWORD *)((char *)this + v366 + 400);
      v368 = (char *)this + v366 + 32;
      switch(v364 >> 5)
      {
        case 0u:
          v497 = *(_OWORD *)((char *)this + v366 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserMeshShader *)((char *)this + v366 + 40));
          v499 = *((_DWORD *)v368 + 26);
          v369 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v367 + 344))(v367, &v497, v369);
          v368 = (char *)this + 8;
          if (v498)
            goto LABEL_71;
          break;
        case 1u:
          v494 = *(_OWORD *)((char *)this + v366 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserMeshShader *)((char *)this + v366 + 40));
          v496 = *((_DWORD *)v368 + 26);
          v390 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v367 + 344))(v367, &v494, v390);
          v368 = (char *)this + 8;
          if (v495)
            goto LABEL_71;
          break;
        case 2u:
          v491 = *(_OWORD *)((char *)this + v366 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMUserMeshShader *)((char *)this + v366 + 40));
          v493 = *((_DWORD *)v368 + 26);
          v370 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v367 + 344))(v367, &v491, v370);
          v368 = (char *)this + 8;
          if (v492)
LABEL_71:
            llvm::MetadataTracking::untrack();
          break;
        case 3u:
          *(_QWORD *)&v517 = "fence_4_96";
          v519 = 259;
          v371 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "write_uvb_96";
          v519 = 259;
          v372 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (uint64_t)v444, v371, (uint64_t)v372);
          v373 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v373 + 11) = v371;
          *((_QWORD *)v373 + 12) = v371 + 40;
          v374 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v375 = *((_QWORD *)v374 + 50);
          v488 = *(_OWORD *)(v374 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v374 + 40));
          v490 = *((_DWORD *)v374 + 34);
          v376 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v375 + 344))(v375, &v488, v376);
          if (!v489)
            goto LABEL_69;
          goto LABEL_63;
        case 4u:
          *(_QWORD *)&v517 = "fence_4_128";
          v519 = 259;
          v377 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "fence_5_128";
          v519 = 259;
          v378 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "write_uvb_128_else";
          v519 = 259;
          v379 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "write_uvb_128";
          v519 = 259;
          v372 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v440, v378, v379);
          v380 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v380 + 11) = v379;
          *((_QWORD *)v380 + 12) = v379 + 40;
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v442, v377, (uint64_t)v372);
          v381 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v381 + 11) = v377;
          *((_QWORD *)v381 + 12) = v377 + 40;
          v382 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v383 = *((_QWORD *)v382 + 50);
          v485 = *(_OWORD *)(v382 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v382 + 40));
          v487 = *((_DWORD *)v382 + 34);
          v384 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v383 + 344))(v383, &v485, v384);
          if (v486)
            llvm::MetadataTracking::untrack();
          llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v372);
          v385 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v385 + 11) = v378;
          *((_QWORD *)v385 + 12) = v378 + 40;
          v386 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v387 = *((_QWORD *)v386 + 50);
          v482 = *(_OWORD *)(v386 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v386 + 40));
          v484 = *((_DWORD *)v386 + 34);
          v388 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v387 + 344))(v387, &v482, v388);
          if (v483)
            llvm::MetadataTracking::untrack();
          goto LABEL_69;
        case 5u:
          *(_QWORD *)&v517 = "fence_5_160";
          v519 = 259;
          v424 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "write_uvb_160";
          v519 = 259;
          v372 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          v425 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v519 = 257;
          v426 = llvm::IRBuilderBase::CreateAnd(v425, Not, v444, (const llvm::Twine *)&v517);
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v426, v424, (uint64_t)v372);
          v427 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v427 + 11) = v424;
          *((_QWORD *)v427 + 12) = v424 + 40;
          v428 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v429 = *((_QWORD *)v428 + 50);
          v479 = *(_OWORD *)(v428 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v428 + 40));
          v481 = *((_DWORD *)v428 + 34);
          v430 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v429 + 344))(v429, &v479, v430);
          if (!v480)
            goto LABEL_69;
          goto LABEL_63;
        case 6u:
          *(_QWORD *)&v517 = "fence_5_192";
          v519 = 259;
          v431 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v517 = "write_uvb_192";
          v519 = 259;
          v372 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v442, v431, (uint64_t)v372);
          v432 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v432 + 11) = v431;
          *((_QWORD *)v432 + 12) = v431 + 40;
          v433 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v434 = *((_QWORD *)v433 + 50);
          v476 = *(_OWORD *)(v433 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v433 + 40));
          v478 = *((_DWORD *)v433 + 34);
          v435 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v434 + 344))(v434, &v476, v435);
          if (!v477)
            goto LABEL_69;
LABEL_63:
          llvm::MetadataTracking::untrack();
LABEL_69:
          llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v372);
          v389 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v389 + 11) = v372;
          *((_QWORD *)v389 + 12) = (char *)v372 + 40;
          v365 = (char *)this + 336;
          v368 = (char *)this + 8;
          break;
        default:
          break;
      }
      v469 = (llvm::Value *)llvm::ConstantInt::get();
      Function = llvm::Module::getFunction();
      v392 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v509 = *(_OWORD *)(v392 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v392 + 40));
      v511 = *((_DWORD *)v392 + 34);
      if (Function)
        goto LABEL_86;
      v457 = v364;
      v393 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224);
      *(_QWORD *)&v517 = *v363;
      *((_QWORD *)&v517 + 1) = v393;
      *(_QWORD *)&v518 = v393;
      v394 = llvm::FunctionType::get();
      *(_QWORD *)&v517 = "agc.mesh.write_varyings";
      v519 = 259;
      v395 = *(_QWORD *)&v365[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
      Function = llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x1CAA2CE58](Function, v394, 7, 0xFFFFFFFFLL, &v517, v395);
      *(_QWORD *)&v517 = "entry";
      v519 = 259;
      v396 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "pos_loop";
      v519 = 259;
      v452 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "shared_loop";
      v519 = 259;
      v397 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "amp_loop";
      v519 = 259;
      v398 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "point_size_loop";
      v519 = 259;
      v399 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "clip_dist_loop";
      v519 = 259;
      v455 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v517 = "exit";
      v519 = 259;
      v400 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v401 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v401 + 11) = v396;
      *((_QWORD *)v401 + 12) = v396 + 40;
      v402 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
      if ((*(_WORD *)(Function + 18) & 1) == 0)
        break;
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v404 = *(llvm::Type ***)(Function + 88);
      if ((*(_WORD *)(Function + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v403 = *(llvm::Type ***)(Function + 88);
        if ((*(_WORD *)(Function + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
          v405 = *(llvm::Type ***)(Function + 88);
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      v403 = *(llvm::Type ***)(Function + 88);
      v405 = v403;
LABEL_79:
      v406 = (llvm::Value *)(v403 + 5);
      v407 = (uint64_t)(v405 + 10);
      v408 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v519 = 257;
      v409 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v408, v406, v402, (const llvm::Twine *)&v517);
      v410 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v519 = 257;
      v411 = llvm::IRBuilderBase::CreateICmp(v410, 36, v409, v407, (uint64_t)&v517);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v411, (uint64_t)v452, (uint64_t)v400);
      v412 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v412 + 11) = v452;
      *((_QWORD *)v412 + 12) = (char *)v452 + 40;
      v413 = *((unsigned __int8 *)this + 4616);
      LODWORD(v517) = 0;
      AGCLLVMUserMeshShader::buildWriteVaryings(this, v404, v406, v397, v413, (unsigned int *)&v517, 1);
      v414 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v414 + 11) = v397;
      *((_QWORD *)v414 + 12) = v397 + 40;
      v517 = xmmword_1C3DEFF70;
      v518 = unk_1C3DEFF80;
      AGCLLVMUserMeshShader::buildWriteVaryings(this, v404, v406, v398, 0, (unsigned int *)&v517, 8);
      v415 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v415 + 11) = v398;
      *((_QWORD *)v415 + 12) = v398 + 40;
      v517 = xmmword_1C3DEFF90;
      v518 = unk_1C3DEFFA0;
      AGCLLVMUserMeshShader::buildWriteVaryings(this, v404, v406, v399, 1, (unsigned int *)&v517, 8);
      v416 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v416 + 11) = v399;
      *((_QWORD *)v416 + 12) = v399 + 40;
      if (*((_BYTE *)this + 4625))
      {
        v417 = *((unsigned __int8 *)this + 4626);
        LODWORD(v517) = 22;
        v418 = v455;
        AGCLLVMUserMeshShader::buildWriteVaryings(this, v404, v406, (uint64_t)v455, v417, (unsigned int *)&v517, 1);
      }
      else
      {
        v418 = v455;
        llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v455);
      }
      v363 = v449;
      v365 = (char *)this + 336;
      v419 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v419 + 11) = v418;
      *((_QWORD *)v419 + 12) = (char *)v418 + 40;
      if (*((_DWORD *)this + 1155))
      {
        v420 = *((unsigned __int8 *)this + 4624);
        LODWORD(v517) = 25;
        AGCLLVMUserMeshShader::buildWriteVaryings(this, v404, v406, (uint64_t)v400, v420, (unsigned int *)&v517, 1);
      }
      else
      {
        llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v400);
      }
      v368 = (char *)this + 8;
      v421 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v421 + 11) = v400;
      *((_QWORD *)v421 + 12) = (char *)v400 + 40;
      llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserMeshShader *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                 + 40));
      v364 = v457;
LABEL_86:
      v422 = *(_QWORD *)(*(_QWORD *)this - 24);
      v513 = v509;
      v514 = v510;
      if (v510)
        llvm::MetadataTracking::track();
      v515 = v511;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v513, (uint64_t)&v368[v422 + 32]);
      if (v514)
        llvm::MetadataTracking::untrack();
      v516[0] = v363;
      v516[1] = v469;
      v516[2] = v458;
      v423 = (uint64_t)&v368[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
      v519 = 257;
      llvm::IRBuilderBase::CreateCall(v423, *(_QWORD *)(Function + 24), Function, (uint64_t)v516, 3, (uint64_t)&v517);
      if (v510)
        llvm::MetadataTracking::untrack();
      v364 += 32;
      if (v364 >= *((_DWORD *)this + 1150))
        goto LABEL_99;
    }
    v403 = *(llvm::Type ***)(Function + 88);
    v404 = v403;
LABEL_78:
    v405 = v403;
    goto LABEL_79;
  }
LABEL_99:
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v445);
  v436 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v436 + 11) = v445;
  *((_QWORD *)v436 + 12) = (char *)v445 + 40;
  result = llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserMeshShader *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                      + 40));
  v438 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v438 + 11) = v446;
  *((_QWORD *)v438 + 12) = (char *)v446 + 40;
  return result;
}

uint64_t AGCLLVMUserObjectShaderBase::wrapperFunctionType(AGCLLVMUserObjectShaderBase *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMUserObjectShaderBase::wrapperCallingConvention(AGCLLVMUserObjectShaderBase *this)
{
  return 106;
}

uint64_t AGCLLVMUserMeshShader::setupShaderInputs(AGCLLVMUserMeshShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  llvm::Instruction *v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  llvm::Type **v27;
  llvm::Value *VertexAmpId;
  int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int Key;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  llvm *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *i;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  size_t **v75;
  char *v76;
  uint64_t v78;
  size_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  size_t *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v92;
  const std::string::value_type *v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t k;
  int *v108;
  BOOL v109;
  int v110;
  int v111;
  uint64_t v112;
  char *v113;
  uint64_t m;
  int v115;
  char *v116;
  unsigned int *v117;
  BOOL v118;
  char *v119;
  unsigned int *v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  int v126;
  int *v127;
  BOOL v128;
  int v129;
  int v130;
  uint64_t v131;
  char *v132;
  uint64_t n;
  int v134;
  char *v135;
  unsigned int *v136;
  BOOL v137;
  char *v138;
  unsigned int *v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  char *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  BOOL v148;
  char *v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  char *v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  BOOL v158;
  char *v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  char *v163;
  int v164;
  unsigned int v165;
  uint32x2_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  llvm::Type **v181;
  uint64_t v182;
  llvm::IRBuilderBase *v183;
  llvm::Type *v184;
  llvm::Value *v185;
  char *v186;
  llvm::Type **v187;
  llvm::Value *v188;
  llvm::Type *v189;
  llvm::Value *AlignedLoad;
  llvm::Type *v191;
  llvm::IRBuilderBase *v192;
  uint64_t GEP;
  llvm::Type *v194;
  uint64_t *v195;
  _BYTE *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  llvm::Type **v200;
  llvm::Value *v201;
  llvm::Type *v202;
  uint64_t v203;
  uint64_t v204;
  llvm::Type **Cast;
  uint64_t VpLayerIdOffsetPointer;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  llvm::Type **v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  llvm::Type **v217;
  _BOOL4 v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unint64_t v223;
  unint64_t v225;
  unint64_t v226;
  _BOOL4 v227;
  unint64_t v229;
  unint64_t v230;
  char v232;
  _DWORD *v233;
  int32x2_t *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  _DWORD *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  GenericVaryingAllocator *v248;
  char *v249;
  char v250[32];
  __int16 v251;
  std::string v252;
  __int16 v253;
  _BYTE __dst[20];
  _BYTE v255[36];
  BOOL v256;
  __int16 v257;
  int v258;
  _QWORD v259[2];
  char v260;
  _QWORD v261[3];
  char v262;
  char *v263;
  const char *v264;
  unint64_t v265;
  char v266;
  char *v267;
  const char *v268;
  unint64_t v269;
  char v270;
  char *v271;
  const char *v272;
  unint64_t v273;
  char v274;
  char *v275;
  const char *v276;
  unint64_t v277;
  char v278;
  char *v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 22);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v239 = v4;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    v6 = *((_QWORD *)this + 22);
    v5 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
  }
  v243 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v5 == v243)
  {
LABEL_322:
    AGCLLVMUserObjectShaderBase::setupShaderInputs(this);
    return 1;
  }
  v234 = (int32x2_t *)((char *)this + 5316);
  v7 = (char *)this + 4405;
  v242 = (char *)this + 4668;
  v241 = (char *)this + 4676;
  v240 = (_DWORD *)((char *)this + 4684);
  v233 = (_DWORD *)((char *)this + 4620);
  v8 = (unsigned int *)((char *)this + 4568);
  v248 = (AGCLLVMUserMeshShader *)((char *)this + 4696);
  v237 = (char *)this + 8;
  v238 = (char *)this + 368;
  v9 = (char *)this + 5424;
  v236 = (char *)this + 4656;
  v235 = (char *)this + 192;
  v249 = (char *)this + 5424;
  do
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v5 + 32));
    if (*(_QWORD *)(v5 + 8))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (v11)
    {
      v12 = 1;
      goto LABEL_283;
    }
    v13 = *(_QWORD *)(v239 + 40);
    if (v13)
      v14 = (llvm::Instruction *)(v13 - 24);
    else
      v14 = 0;
    AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v14, *((_QWORD *)this + 6));
    v15 = isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.mesh");
    v16 = v10 - 8 * *(unsigned int *)(v10 + 8);
    v247 = v5;
    if (!v15)
    {
      v12 = 1;
      if (isStringMDNode(*(llvm::MDString **)(v16 + 8), "air.amplification_id"))
      {
        v27 = (llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
        VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
        AGCLLVMBuilder::truncateToSmall(v27, VertexAmpId, *(llvm::Type **)v5);
        llvm::Value::replaceAllUsesWith();
        v7[160] = 1;
      }
      goto LABEL_283;
    }
    v17 = *(unsigned __int8 **)(v16 + 16);
    if (!v17)
    {
      v24 = 0;
      goto LABEL_45;
    }
    v18 = *v17;
    v19 = v18 > 0x22 || ((0x7FFFFFFF0uLL >> v18) & 1) == 0;
    if (v19 || *((_DWORD *)v17 + 2) != 6 || !isStringMDNode(*((llvm::MDString **)v17 - 6), "air.mesh_type_info"))
    {
      v24 = 0;
      goto LABEL_45;
    }
    v20 = &v17[-8 * *((unsigned int *)v17 + 2)];
    v21 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    if (!v21)
      goto LABEL_39;
    v22 = *v21;
    if (v22 > 0x22 || ((0x7FFFFFFF0uLL >> v22) & 1) == 0)
      goto LABEL_39;
    v24 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
    if (v24)
    {
      v25 = *v24;
      if (v25 <= 0x22 && ((0x7FFFFFFF0uLL >> v25) & 1) != 0)
      {
        LODWORD(v259[0]) = 3;
        if (parseMDInt(0, (uint64_t)v17, (unsigned int *)v259, (_DWORD *)this + 1150))
        {
          LODWORD(v259[0]) = 4;
          if ((parseMDInt(0, (uint64_t)v17, (unsigned int *)v259, (_DWORD *)this + 1151) & 1) != 0)
          {
            v219 = parseMDPrimitiveType((uint64_t)v17, (int *)this + 1153);
            *((_DWORD *)this + 1152) = (*((_DWORD *)this + 1150) + 3) & 0xFFFFFFFC;
            if (v219)
            {
              v220 = *((unsigned int *)v21 + 2);
              if (!(_DWORD)v220)
              {
                v29 = 1;
                goto LABEL_320;
              }
              v221 = 0;
              while (1)
              {
                v222 = *(unsigned __int8 **)&v21[8 * v221 + -8 * v220];
                if (!v222)
                  break;
                v223 = *v222;
                if (v223 > 0x22 || ((0x7FFFFFFF0uLL >> v223) & 1) == 0)
                  break;
                v246 = v221;
                if (*v7)
                {
                  v225 = 1;
                  while (1)
                  {
                    v226 = *((unsigned int *)v222 + 2);
                    v227 = v225 >= v226;
                    if (v225 >= v226)
                      break;
                    if (isStringMDNode(*(llvm::MDString **)&v222[8 * v225++ + -8 * v226], "air.shared"))
                      goto LABEL_300;
                  }
                }
                else
                {
LABEL_300:
                  v227 = 0;
                }
                AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v222, 0, (uint64_t)v242, (uint64_t)v241, v240);
                if ((AGCLLVMUserMeshShader::addGenericVarying((uint64_t)this, (uint64_t)v222, 0, v227) & 1) == 0)
                {
                  if (isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.position"))
                  {
                    v7[211] = v227;
                    v229 = *((unsigned int *)v222 + 2);
                    if (v229 >= 2)
                    {
                      v230 = 1;
                      while (!isStringMDNode(*(llvm::MDString **)&v222[8 * v230 + -8 * v229], "air.invariant"))
                      {
                        ++v230;
                        v229 = *((unsigned int *)v222 + 2);
                        if (v230 >= v229)
                          goto LABEL_302;
                      }
                      v7[123] = 1;
                    }
                  }
                  else if (isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.point_size"))
                  {
                    v7[220] = 1;
                    v7[221] = v227;
                  }
                  else
                  {
                    if (!isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.clip_distance"))break;
                    *v233 = 1;
                    v7[219] = v227;
                    LODWORD(v259[0]) = 1;
                    if (*((_DWORD *)v222 + 2) >= 2u)
                    {
                      do
                      {
                        if ((parseMDInt("air.clip_distance_array_size", (uint64_t)v222, (unsigned int *)v259, v233) & 1) != 0)
                          break;
                        ++LODWORD(v259[0]);
                      }
                      while (LODWORD(v259[0]) < *((_DWORD *)v222 + 2));
                    }
                  }
                }
LABEL_302:
                v221 = v246 + 1;
                v220 = *((unsigned int *)v21 + 2);
                v29 = 1;
                if (v246 + 1 >= v220)
                  goto LABEL_320;
              }
            }
            v29 = 0;
LABEL_320:
            v9 = (char *)this + 5424;
            goto LABEL_46;
          }
        }
        goto LABEL_40;
      }
LABEL_39:
      v24 = 0;
    }
LABEL_40:
    v9 = (char *)this + 5424;
LABEL_45:
    v29 = 0;
    *((_DWORD *)this + 1152) = (*((_DWORD *)this + 1150) + 3) & 0xFFFFFFFC;
LABEL_46:
    if (v7[211])
      v30 = 1;
    else
      v30 = v7[219] != 0;
    v7[219] = v30;
    v7[211] = v30;
    if (!v29)
    {
      v244 = 0;
      goto LABEL_78;
    }
    v31 = *((unsigned int *)v24 + 2);
    if (!(_DWORD)v31)
    {
      v244 = 1;
      goto LABEL_78;
    }
    v32 = 0;
    while (1)
    {
      v33 = *(unsigned __int8 **)&v24[8 * v32 + -8 * v31];
      if (!v33)
        break;
      v34 = *v33;
      if (v34 > 0x22 || ((0x7FFFFFFF0uLL >> v34) & 1) == 0)
        break;
      if (*v7)
      {
        v36 = 1;
        while (1)
        {
          v37 = *((unsigned int *)v33 + 2);
          v38 = v36 >= v37;
          if (v36 >= v37)
            break;
          if (isStringMDNode(*(llvm::MDString **)&v33[8 * v36++ + -8 * v37], "air.shared"))
            goto LABEL_61;
        }
      }
      else
      {
LABEL_61:
        v38 = 0;
      }
      AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v33, 1u, (uint64_t)v242, (uint64_t)v241, v240);
      if ((AGCLLVMUserMeshShader::addGenericVarying((uint64_t)this, (uint64_t)v33, 1, v38) & 1) != 0)
        goto LABEL_70;
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.render_target_array_index"))
      {
        v7[222] = 1;
LABEL_69:
        v7[228] |= v38;
        goto LABEL_70;
      }
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.viewport_array_index"))
      {
        v7[224] = 1;
        goto LABEL_69;
      }
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_culled"))
      {
        v7[226] = 1;
        goto LABEL_69;
      }
      if (!isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_id"))
        break;
      v7[230] = 1;
      v7[231] = v38;
LABEL_70:
      ++v32;
      v31 = *((unsigned int *)v24 + 2);
      if (v32 >= v31)
      {
        v244 = 1;
        goto LABEL_77;
      }
    }
    v244 = 0;
LABEL_77:
    v9 = (char *)this + 5424;
LABEL_78:
    v40 = 0;
    v262 = v7[231];
    v266 = v7[228];
    v270 = v266;
    v274 = *v7;
    v259[0] = "agc.per_prim.primitive_address";
    v259[1] = 0xFFFFFFFE00000000;
    v260 = 0;
    v261[0] = (char *)this + 4637;
    v261[1] = "agc.per_prim.primitive_id";
    v261[2] = 0xFFFFFFFF00000001;
    v263 = (char *)this + 4634;
    v264 = "air.render_target_array_index";
    v265 = 0xFFFFFFFC00000001;
    v267 = (char *)this + 4628;
    v268 = "air.viewport_array_index";
    v269 = 0xFFFFFFFD00000001;
    v271 = (char *)this + 4630;
    v272 = "air.amplification_id";
    v273 = 0xFFFFFFFB00000000;
    v275 = (char *)this + 4566;
    v276 = "air.amplification_count";
    v277 = 0xFFFFFFFA00000001;
    v278 = 0;
    v279 = (char *)this + 4564;
    do
    {
      v41 = v259[v40];
      v42 = v259[v40 + 1];
      v43 = HIDWORD(v259[v40 + 1]);
      v44 = LOBYTE(v259[v40 + 2]);
      if (v41)
        strlen((const char *)v259[v40]);
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 1144))
      {
        v52 = 0;
      }
      else
      {
        v53 = v7;
        v54 = *(llvm **)(*(_QWORD *)v8 + 8 * Key);
        v55 = v8;
        v56 = *((_DWORD *)v54 + 2);
        v57 = v55;
        llvm::StringMapImpl::RemoveKey();
        llvm::deallocate_buffer(v54, (void *)(*(_QWORD *)v54 + 17));
        if (v43 >= 0xFFFFFFFA)
          v58 = ~v43;
        else
          v58 = ((v42 != 0) | (2 * v43)) + 6;
        GenericVarying::GenericVarying((uint64_t)__dst, HIBYTE(v56) & 0x7F, BYTE2(v56), v56 & 0xF, BYTE1(v56), v58, v44 != 0);
        MEMORY[0x1CAA2D494](&v255[4], v41);
        GenericVaryingAllocator::addVarying((uint64_t)v248, (unint64_t)__dst);
        if ((v255[27] & 0x80000000) != 0)
          operator delete(*(void **)&v255[4]);
        v52 = 1;
        v8 = v57;
        v7 = v53;
        v9 = (char *)this + 5424;
      }
      *(_BYTE *)v261[v40] = v52;
      v40 += 4;
    }
    while (v40 != 24);
    if (v7[222])
    {
      v59 = 1;
      v5 = v247;
      v12 = v244;
    }
    else
    {
      v5 = v247;
      v12 = v244;
      if (v7[224])
        v59 = 1;
      else
        v59 = v7[226] != 0;
    }
    v7[227] = v59;
    if (v7[162])
    {
      v60 = *((_QWORD *)this + 590);
      v61 = *((unsigned int *)this + 1182);
      if (v61 >= 2)
      {
        v62 = v60 + 64;
        v63 = (v61 << 6) - 64;
        do
        {
          if (*(_DWORD *)(v60 + 16) < *(_DWORD *)(v62 + 16))
            v60 = v62;
          v62 += 64;
          v63 -= 64;
        }
        while (v63);
      }
      v64 = *((unsigned int *)this + 1144);
      if ((_DWORD)v64)
      {
        for (i = (uint64_t *)*((_QWORD *)this + 571); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = (uint64_t *)*((_QWORD *)this + 571);
      }
      v67 = *((_QWORD *)this + 571) + 8 * v64;
      if (i != (uint64_t *)v67)
      {
        v68 = *(_DWORD *)(v60 + 16);
        v69 = *i;
        do
        {
          v70 = *(_DWORD *)(v69 + 8);
          *(_DWORD *)__dst = HIBYTE(v70) & 0x7F;
          *(_DWORD *)&__dst[4] = BYTE2(v70);
          ++v68;
          *(_DWORD *)&__dst[8] = v70 & 0xF;
          *(_DWORD *)&__dst[12] = BYTE1(v70);
          *(_DWORD *)&__dst[16] = v68;
          memset(&v255[4], 0, 32);
          v256 = BYTE2(v70) == 1;
          v257 = 0;
          switch(v70 & 0xF)
          {
            case 0u:
              if (BYTE2(v70) == 1)
                v71 = 5;
              else
                v71 = 1;
              goto LABEL_129;
            case 1u:
              if (BYTE2(v70) == 1)
                v71 = 6;
              else
                v71 = 2;
              goto LABEL_129;
            case 2u:
              if (BYTE2(v70) == 1)
                v71 = 7;
              else
                v71 = 3;
              goto LABEL_129;
            case 3u:
              if (BYTE2(v70) == 1)
                v71 = 19;
              else
                v71 = 18;
              goto LABEL_129;
            case 5u:
              if (BYTE2(v70) == 1)
                v71 = 8;
              else
                v71 = 4;
LABEL_129:
              v258 = v71;
              break;
            default:
              break;
          }
          MEMORY[0x1CAA2D494](&v255[4], v69 + 16);
          GenericVaryingAllocator::addVarying((uint64_t)v248, (unint64_t)__dst);
          if ((v255[27] & 0x80000000) != 0)
            operator delete(*(void **)&v255[4]);
          do
          {
            v72 = i[1];
            ++i;
            v69 = v72;
            if (v72)
              v73 = v69 == -8;
            else
              v73 = 1;
          }
          while (v73);
        }
        while (i != (uint64_t *)v67);
      }
      llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(v8);
      v5 = v247;
      v9 = (char *)this + 5424;
      v12 = v244;
    }
    if (*((_DWORD *)this + 1145))
    {
      printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching mesh shader output type(s) or not written by mesh shader: ", v46, v47, v48, v49, v50, v51, v232);
      v74 = *((unsigned int *)this + 1144);
      if ((_DWORD)v74)
      {
        v75 = (size_t **)*((_QWORD *)this + 571);
        v76 = (char *)this + 8;
        while (!*v75 || *v75 + 1 == 0)
          ++v75;
      }
      else
      {
        v75 = (size_t **)*((_QWORD *)this + 571);
        v76 = (char *)this + 8;
      }
      v78 = *((_QWORD *)this + 571) + 8 * v74;
      if (v75 != (size_t **)v78)
      {
        v79 = *v75;
        do
        {
          std::string::basic_string[abi:nn180100](__dst, v79 + 2, *v79);
          if (v255[3] >= 0)
            v86 = __dst;
          else
            LOBYTE(v86) = __dst[0];
          printMessage((char **)&AGCPrinter, "\t%s", v80, v81, v82, v83, v84, v85, (char)v86);
          if ((v255[3] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          do
          {
            v87 = v75[1];
            ++v75;
            v79 = v87;
            if (v87)
              v88 = v79 + 1 == 0;
            else
              v88 = 1;
          }
          while (v88);
        }
        while (v75 != (size_t **)v78);
      }
      v89 = *((unsigned int *)this + 1144);
      if ((_DWORD)v89)
      {
        for (j = *((_QWORD *)this + 571); !*(_QWORD *)j || *(_QWORD *)j == -8; j += 8)
          ;
      }
      else
      {
        j = *((_QWORD *)this + 571);
      }
      v92 = *((_QWORD *)this + 571) + 8 * v89;
      if (j != v92)
      {
        v93 = (const std::string::value_type *)&unk_1C3E4D9BB;
        do
        {
          std::string::append((std::string *)&v76[*(_QWORD *)(*(_QWORD *)this - 24)], v93);
          std::string::basic_string[abi:nn180100](&v252, (void *)(*(_QWORD *)j + 16), **(_QWORD **)j);
          attribute_name((std::string *)__dst, &v252);
          if (v255[3] >= 0)
            v94 = __dst;
          else
            v94 = *(const std::string::value_type **)__dst;
          if (v255[3] >= 0)
            v95 = v255[3];
          else
            v95 = *(_QWORD *)&__dst[8];
          std::string::append((std::string *)&v76[*(_QWORD *)(*(_QWORD *)this - 24)], v94, v95);
          if ((v255[3] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          do
          {
            v97 = *(_QWORD *)(j + 8);
            j += 8;
            v96 = v97;
            if (v97)
              v98 = v96 == -8;
            else
              v98 = 1;
          }
          while (v98);
          v93 = ",";
        }
        while (j != v92);
      }
      v12 = 0;
      v5 = v247;
    }
    GenericVaryingAllocator::allocate(v248, *(const AGCLLVMTargetLowerer **)&v238[*(_QWORD *)(*(_QWORD *)this - 24) + 32]);
    v245 = v12;
    if (v12)
    {
      bzero(v9, 0x270uLL);
      *(_QWORD *)&v255[16] = 0;
      *(_OWORD *)&__dst[4] = 0u;
      *(_OWORD *)v255 = 0u;
      v99 = *((_DWORD *)this + 1151);
      *(_DWORD *)__dst = 4 * v99;
      *(_WORD *)&__dst[4] = *(_WORD *)(v7 + 227);
      v100 = *((_DWORD *)this + 1152);
      *(_DWORD *)&__dst[8] = 23;
      *(_DWORD *)&__dst[12] = 16 * v100;
      __dst[16] = 1;
      __dst[17] = v7[211];
      *(_DWORD *)&v255[4] = 4 * v100;
      v255[8] = v7[220];
      v255[9] = __dst[17];
      v101 = *((_DWORD *)this + 1155);
      *(_DWORD *)&v255[12] = 22;
      *(_QWORD *)&v255[16] = (4 * v100 * v101);
      *(_DWORD *)&v255[20] = v101 != 0;
      v255[21] = v7[219];
      *(_DWORD *)&v255[24] = 25;
      v102 = *((_DWORD *)this + 1153);
      if (v102 == 1)
        v103 = 2;
      else
        v103 = 1;
      if (v102 == 2)
        v104 = 3;
      else
        v104 = v103;
      v105 = (v104 * v99 + 15) & 0xFFFFFFF0;
      *((_DWORD *)this + 1172) = v105;
      *((_DWORD *)this + 1166) = v105;
      v106 = v105 + 16;
      if (*v7)
      {
        *((_DWORD *)this + 1354) = v106;
        v106 += (4 * *((_DWORD *)this + 1140) + 15) & 0xFFFFFFF0;
      }
      for (k = 0; k != 48; k += 12)
      {
        v108 = (int *)&__dst[k];
        if (__dst[k + 5])
          v109 = 1;
        else
          v109 = __dst[k + 4] == 0;
        if (!v109)
        {
          v110 = *v108;
          v111 = v108[2];
          if (v111 != 26)
          {
            v112 = llvm::ConstantInt::get();
            v113 = &v9[24 * v111];
            *(_QWORD *)v113 = v112;
            v113[12] = 0;
          }
          v106 += (v110 + 15) & 0xFFFFFFF0;
        }
      }
      for (m = 0; m != 128; m += 16)
      {
        v115 = *((_DWORD *)this + 1152);
        v116 = (char *)this + 4 * *(unsigned int *)&byte_1C3DEFFB0[m + 4];
        v117 = (unsigned int *)(v116 + 5312);
        if (byte_1C3DEFFB0[m])
          v118 = v7[851] == 0;
        else
          v118 = 1;
        if (v118)
        {
          v119 = v116 + 5288;
          if (byte_1C3DEFFB0[m])
            v120 = v117;
          else
            v120 = (unsigned int *)v119;
          v121 = *v120;
        }
        else
        {
          v121 = (*v117 + 1) >> 1;
        }
        v122 = *(_DWORD *)&byte_1C3DEFFB0[m + 8];
        if (v122 != 26)
        {
          v123 = llvm::ConstantInt::get();
          v124 = &v9[24 * v122];
          *(_QWORD *)v124 = v123;
          v124[12] = 0;
        }
        v106 += (4 * v115 * v121 + 15) & 0xFFFFFFF0;
      }
      v125 = 0;
      v126 = 0;
      *((_DWORD *)this + 1160) = v106;
      do
      {
        v127 = (int *)&__dst[v125];
        if (__dst[v125 + 5])
          v128 = __dst[v125 + 4] == 0;
        else
          v128 = 1;
        if (!v128)
        {
          v129 = *v127;
          v130 = v127[2];
          if (v130 != 26)
          {
            v131 = llvm::ConstantInt::get();
            v132 = &v249[24 * v130];
            *(_QWORD *)v132 = v131;
            v132[12] = 1;
          }
          v126 += (v129 + 15) & 0xFFFFFFF0;
        }
        v125 += 12;
      }
      while (v125 != 48);
      for (n = 0; n != 128; n += 16)
      {
        v134 = *((_DWORD *)this + 1152);
        v135 = (char *)this + 4 * *(unsigned int *)&byte_1C3DEFFB0[n + 4];
        v136 = (unsigned int *)(v135 + 5360);
        if (byte_1C3DEFFB0[n])
          v137 = v7[851] == 0;
        else
          v137 = 1;
        if (v137)
        {
          v138 = v135 + 5336;
          if (byte_1C3DEFFB0[n])
            v139 = v136;
          else
            v139 = (unsigned int *)v138;
          v140 = *v139;
        }
        else
        {
          v140 = (*v136 + 1) >> 1;
        }
        v141 = *(_DWORD *)&byte_1C3DEFFB0[n + 12];
        if (v141 != 26)
        {
          v142 = llvm::ConstantInt::get();
          v143 = &v249[24 * v141];
          *(_QWORD *)v143 = v142;
          v143[12] = 1;
        }
        v126 += (4 * v134 * v140 + 15) & 0xFFFFFFF0;
      }
      v144 = 0;
      v145 = 0;
      v146 = 0;
      *((_DWORD *)this + 1162) = v126;
      do
      {
        v147 = v144;
        if (byte_1C3DF00D8[16 * v145])
          v148 = v7[851] == 0;
        else
          v148 = 1;
        if (v148)
        {
          v149 = (char *)this + 5300;
          if (byte_1C3DF00D8[16 * v145])
            v149 = (char *)this + 5324;
          v150 = *(_DWORD *)v149;
        }
        else
        {
          v150 = (*((_DWORD *)this + 1331) + 1) >> 1;
        }
        v151 = *(_DWORD *)&byte_1C3DF00D8[16 * v145 + 8];
        if (v151 != 26)
        {
          v152 = llvm::ConstantInt::get();
          v153 = &v249[24 * v151];
          *(_QWORD *)v153 = v152;
          v153[12] = 0;
        }
        v146 += 4 * v150;
        v144 = 1;
        v145 = 1;
      }
      while ((v147 & 1) == 0);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      *((_DWORD *)this + 1161) = v146;
      v9 = (char *)this + 5424;
      do
      {
        v157 = v154;
        if (byte_1C3DF00D8[16 * v155])
          v158 = v7[851] == 0;
        else
          v158 = 1;
        if (v158)
        {
          v159 = (char *)this + 5372;
          if (!byte_1C3DF00D8[16 * v155])
            v159 = (char *)this + 5348;
          v160 = *(_DWORD *)v159;
        }
        else
        {
          v160 = (*((_DWORD *)this + 1343) + 1) >> 1;
        }
        v161 = *(_DWORD *)&byte_1C3DF00D8[16 * v155 + 12];
        if (v161 != 26)
        {
          v162 = llvm::ConstantInt::get();
          v163 = &v249[24 * v161];
          *(_QWORD *)v163 = v162;
          v163[12] = 1;
        }
        v156 += 4 * v160;
        v154 = 1;
        v155 = 1;
      }
      while ((v157 & 1) == 0);
      *((_DWORD *)this + 1163) = v156;
      *((_DWORD *)this + 1360) = 4;
      v164 = v7[851];
      *((_DWORD *)this + 1366) = *((_DWORD *)this + 1322);
      *((_DWORD *)this + 1372) = *((_DWORD *)this + 1323);
      *((_DWORD *)this + 1378) = *((_DWORD *)this + 1324);
      *((_DWORD *)this + 1384) = *((_DWORD *)this + 1327);
      *((_DWORD *)this + 1468) = *((_DWORD *)this + 1325);
      v165 = *((_DWORD *)this + 1328);
      if (v164)
      {
        v165 = (v165 + 1) >> 1;
        v166 = vshr_n_u32((uint32x2_t)vadd_s32(*v234, (int32x2_t)0x100000001), 1uLL);
        v167 = (*((_DWORD *)this + 1333) + 1) >> 1;
      }
      else
      {
        v166 = (uint32x2_t)*v234;
        v167 = *((_DWORD *)this + 1333);
      }
      v5 = v247;
      v12 = v245;
      *((_DWORD *)this + 1390) = v165;
      *((_DWORD *)this + 1396) = v166.i32[0];
      v8 = (unsigned int *)((char *)this + 4568);
      *((_DWORD *)this + 1402) = v166.i32[1];
      *((_DWORD *)this + 1408) = v167;
      *((_DWORD *)this + 1474) = *((_DWORD *)this + 1331);
      *((_DWORD *)this + 1420) = *((_DWORD *)this + 1334);
      *((_DWORD *)this + 1426) = *((_DWORD *)this + 1335);
      *((_DWORD *)this + 1432) = *((_DWORD *)this + 1336);
      *((_DWORD *)this + 1438) = *((_DWORD *)this + 1339);
      *((_DWORD *)this + 1480) = *((_DWORD *)this + 1337);
      v168 = *((_DWORD *)this + 1340);
      if (v164)
      {
        v168 = (v168 + 1) >> 1;
        v169 = (*((_DWORD *)this + 1341) + 1) >> 1;
        v170 = (*((_DWORD *)this + 1342) + 1) >> 1;
        v171 = (*((_DWORD *)this + 1345) + 1) >> 1;
        v172 = (*((_DWORD *)this + 1343) + 1) >> 1;
      }
      else
      {
        v169 = *((_DWORD *)this + 1341);
        v170 = *((_DWORD *)this + 1342);
        v171 = *((_DWORD *)this + 1345);
        v172 = *((_DWORD *)this + 1343);
      }
      *((_DWORD *)this + 1444) = v168;
      *((_DWORD *)this + 1450) = v169;
      *((_DWORD *)this + 1456) = v170;
      *((_DWORD *)this + 1462) = v171;
      *((_DWORD *)this + 1486) = v172;
      *((_DWORD *)this + 1492) = v7[220];
      *((_DWORD *)this + 1498) = v7[227];
      *((_DWORD *)this + 1504) = 0;
      *((_DWORD *)this + 1510) = *((_DWORD *)this + 1155);
      v173 = operator new(0x48uLL);
      v174 = 0;
      v175 = 0;
      v173[8] = 0x1900000016;
      *(_OWORD *)v173 = xmmword_1C3DF0030;
      *((_OWORD *)v173 + 1) = unk_1C3DF0040;
      *((_OWORD *)v173 + 2) = xmmword_1C3DF0050;
      *((_OWORD *)v173 + 3) = unk_1C3DF0060;
      *((_DWORD *)this + 1358) = 0;
      do
      {
        v176 = *(unsigned int *)((char *)v173 + v174);
        v177 = *(_DWORD *)&v249[24 * v175 + 16];
        if (v177 && v249[24 * v175 + 12])
          v178 = v177 << 16;
        else
          v178 = (unsigned __int16)*(_DWORD *)&v249[24 * v175 + 16];
        *(_DWORD *)&v249[24 * v176 + 8] = (unsigned __int16)(*(_WORD *)&v249[24 * v175 + 8] + v178) | ((unsigned __int16)(*(_WORD *)&v249[24 * v175 + 10] + HIWORD(v178)) << 16);
        v174 += 4;
        v175 = v176;
      }
      while (v174 != 72);
      operator delete(v173);
    }
    *((_DWORD *)this + 1164) = GenericVaryingAllocator::getTotalSharedComponentWords(v248);
    *((_DWORD *)this + 1165) = GenericVaryingAllocator::getTotalAmplifiedComponentWords(v248);
    *(_DWORD *)&v236[4 * v7[211]] += 4;
    *(_DWORD *)&v236[4 * v7[221]] += v7[220];
    *(_DWORD *)&v236[4 * v7[219]] += *((_DWORD *)this + 1155);
    if (v12)
    {
      v179 = *(_QWORD *)(*(_QWORD *)&v238[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 824);
      v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 328))(v179);
      v181 = (llvm::Type **)AGCLLVMUserObject::setupBufferArgumentData(this, *((_QWORD *)this + 542), v180, 0xFFFFFFFF, 0, 0, 0xFFFFFFFFLL);
      llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShader *)((char *)this + 4536), v182);
      v183 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v184 = *(llvm::Type **)v5;
      *(_WORD *)&v255[12] = 257;
      llvm::IRBuilderBase::CreatePointerCast(v183, v181, v184, (const llvm::Twine *)__dst);
      llvm::Value::replaceAllUsesWith();
    }
    if (*v7)
    {
      v185 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
      v7[160] = 1;
      v186 = &v237[*(_QWORD *)(*(_QWORD *)this - 24)];
      v187 = (llvm::Type **)*((_QWORD *)this + 675);
      *(_WORD *)&v255[12] = 257;
      v189 = AGCLLVMBuilder::tryDeducePointeeType(v187, v188);
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v186 + 4, v189, (uint64_t)v187, 0, (uint64_t)__dst);
      v191 = (llvm::Type *)*((_QWORD *)this + 676);
      v192 = (llvm::IRBuilderBase *)&v237[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
      *(_WORD *)&v255[12] = 257;
      GEP = llvm::IRBuilderBase::CreateGEP(v192, v191, AlignedLoad, v185, (const llvm::Twine *)__dst);
      v194 = (llvm::Type *)*((_QWORD *)this + 676);
      v195 = (uint64_t *)&v237[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
      *(_WORD *)&v255[12] = 257;
      v196 = (_BYTE *)llvm::IRBuilderBase::CreateAlignedLoad(v195, v194, GEP, 0, (uint64_t)__dst);
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x800000000;
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v196, (uint64_t)__dst);
      v197 = *(_QWORD *)(*(_QWORD *)this - 24);
      v198 = (char *)this + v197 + 40;
      v199 = &v237[v197];
      v200 = (llvm::Type **)*((_QWORD *)this + 569);
      v253 = 257;
      v202 = AGCLLVMBuilder::tryDeducePointeeType(v200, v201);
      v203 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v199 + 4, v202, (uint64_t)v200, 0, (uint64_t)&v252);
      v204 = *((_QWORD *)this + 542);
      v251 = 257;
      Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v198, 48, v203, v204, (uint64_t)v250);
      VpLayerIdOffsetPointer = AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, Cast, v185);
      v207 = AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, Cast, v185);
      v208 = *(_QWORD *)(*(_QWORD *)this - 24);
      v209 = (uint64_t *)((char *)this + v208 + 40);
      v210 = **(_QWORD **)__dst;
      v211 = *(_QWORD *)&v235[v208 + 32];
      v253 = 257;
      v212 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v209, 38, v210, v211, (uint64_t)&v252);
      llvm::IRBuilderBase::CreateAlignedStore(v209, v212, VpLayerIdOffsetPointer, 0);
      v213 = *(_QWORD *)(*(_QWORD *)this - 24);
      v214 = (uint64_t *)((char *)this + v213 + 40);
      v215 = *(_QWORD *)(*(_QWORD *)__dst + 8);
      v216 = *(_QWORD *)&v235[v213 + 32];
      v253 = 257;
      v217 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v214, 38, v215, v216, (uint64_t)&v252);
      llvm::IRBuilderBase::CreateAlignedStore(v214, v217, v207, 0);
      if (*(_BYTE **)__dst != &__dst[16])
        free(*(void **)__dst);
      v5 = v247;
      v9 = (char *)this + 5424;
      v12 = v245;
    }
LABEL_283:
    if (!v12)
      break;
    v5 += 40;
  }
  while (v5 != v243);
  if ((v12 & 1) != 0)
    goto LABEL_322;
  return 0;
}

uint64_t AGCLLVMUserMeshShader::replaceBuiltins(AGCLLVMUserMeshShader *this)
{
  uint64_t result;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t j;
  uint64_t v6;
  char *v7;
  int v8;
  __int128 *p_p;
  const void **v10;
  char *v11;
  uint64_t Function;
  const void **v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  int v26;
  uint64_t v27;
  uint64_t k;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  llvm::Instruction *v32;
  llvm::Value **v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Type *v36;
  uint64_t v37;
  int v38;
  llvm::Type *v39;
  uint64_t v40;
  void **v41;
  llvm::Value *v42;
  char *v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  const char *v47;
  _QWORD *v48;
  const char *v49;
  _QWORD *v50;
  void *v51;
  unsigned int *v52;
  const char *v53;
  _QWORD *v54;
  const char *v55;
  _QWORD *v56;
  const char *v57;
  _QWORD *v58;
  void **v59;
  void *v60;
  void *v61;
  llvm::Value *FPTrunc;
  char *v63;
  uint64_t v64;
  llvm::Value *v65;
  void *v66;
  AGCLLVMUserMeshShader *v67;
  unsigned int v68;
  uint64_t i;
  _BYTE *v70;
  int v71;
  const void **v72;
  char *v73;
  llvm::Function *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  const char **v78;
  _BYTE *v79;
  _DWORD *v80;
  uint64_t v81;
  llvm::Value *v82;
  void *v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  _QWORD v91[4];
  __int16 v92;
  void *v93[4];
  __int128 v94;
  uint64_t v95[3];
  uint64_t v96[3];
  uint64_t v97[3];
  uint64_t v98[3];
  uint64_t v99[3];
  uint64_t v100[3];
  uint64_t v101[3];
  uint64_t v102[3];
  uint64_t v103[3];
  uint64_t v104[3];
  uint64_t v105[3];
  uint64_t v106[3];
  uint64_t v107[3];
  uint64_t v108[3];
  uint64_t v109[3];
  uint64_t v110[3];
  uint64_t v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  uint64_t v114[3];
  uint64_t v115[3];
  uint64_t v116[3];
  __int128 __p;
  _BYTE v118[8];
  __int128 v119;
  _QWORD v120[3];
  __int128 v121[28];
  char *v122[2];
  uint64_t v123;
  const void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (**v127)(int, llvm::Value *);
  void *v128[2];
  _OWORD v129[5];
  int v130;
  uint64_t v131;
  _QWORD v132[29];
  AGCLLVMUserMeshShader *v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObjectShaderBase::replaceBuiltins(this);
  if (!(_DWORD)result)
    return result;
  v68 = result;
  v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v127, *v3);
  v67 = this;
  v133 = this;
  v127 = &off_1E7E694A0;
  v132[25] = v3;
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions, "air.set_position_mesh");
    dword_1EF8E82A8 = 0;
    dword_1EF8E82B0 = 1;
    qword_1EF8E82B8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPosition;
    unk_1EF8E82C0 = 0;
    dword_1EF8E82C8 = 6;
    word_1EF8E82CC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E82D0, "air.set_point_size_mesh");
    dword_1EF8E82E8 = 0;
    dword_1EF8E82F0 = 1;
    qword_1EF8E82F8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPointSize;
    unk_1EF8E8300 = 0;
    dword_1EF8E8308 = 6;
    word_1EF8E830C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8310, "air.set_clip_distance_mesh");
    dword_1EF8E8328 = 0;
    dword_1EF8E8330 = 1;
    qword_1EF8E8338 = (uint64_t)AGCLLVMUserMeshShader::buildSetClipDistance;
    unk_1EF8E8340 = 0;
    dword_1EF8E8348 = 7;
    word_1EF8E834C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8350, "air.set_render_target_array_index_mesh");
    dword_1EF8E8368 = 1;
    dword_1EF8E8370 = 1;
    qword_1EF8E8378 = (uint64_t)AGCLLVMUserMeshShader::buildSetLayerId;
    unk_1EF8E8380 = 0;
    dword_1EF8E8388 = 6;
    word_1EF8E838C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8390, "air.set_viewport_array_index_mesh");
    dword_1EF8E83A8 = 1;
    dword_1EF8E83B0 = 1;
    qword_1EF8E83B8 = (uint64_t)AGCLLVMUserMeshShader::buildSetViewportId;
    unk_1EF8E83C0 = 0;
    dword_1EF8E83C8 = 6;
    word_1EF8E83CC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E83D0, "air.set_primitive_id_mesh");
    dword_1EF8E83E8 = 0;
    dword_1EF8E83F0 = 1;
    qword_1EF8E83F8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveId;
    unk_1EF8E8400 = 0;
    dword_1EF8E8408 = 6;
    word_1EF8E840C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8410, "air.set_primitive_culled_mesh");
    dword_1EF8E8428 = 0;
    dword_1EF8E8430 = 1;
    qword_1EF8E8438 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveCulled;
    unk_1EF8E8440 = 0;
    dword_1EF8E8448 = 6;
    word_1EF8E844C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8450, "air.set_index_mesh");
    dword_1EF8E8468 = 0;
    dword_1EF8E8470 = 1;
    qword_1EF8E8478 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndex;
    unk_1EF8E8480 = 0;
    dword_1EF8E8488 = 6;
    word_1EF8E848C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8490, "air.set_indices_mesh.v2i8");
    dword_1EF8E84A8 = 0;
    dword_1EF8E84B0 = 1;
    qword_1EF8E84B8 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndices;
    qword_1EF8E84C0 = 0;
    dword_1EF8E84C8 = 6;
    word_1EF8E84CC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E84D0, "air.set_indices_mesh.v4i8");
    dword_1EF8E84E8 = 0;
    dword_1EF8E84F0 = 1;
    qword_1EF8E84F8 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndices;
    qword_1EF8E8500 = 0;
    dword_1EF8E8508 = 6;
    word_1EF8E850C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8510, "air.set_vertex_data_mesh");
    dword_1EF8E8528 = 2;
    dword_1EF8E8530 = 1;
    qword_1EF8E8538 = (uint64_t)AGCLLVMUserMeshShader::buildSetVertexData;
    qword_1EF8E8540 = 0;
    dword_1EF8E8548 = 7;
    word_1EF8E854C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8550, "air.set_primitive_data_mesh");
    dword_1EF8E8568 = 2;
    dword_1EF8E8570 = 1;
    qword_1EF8E8578 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveData;
    qword_1EF8E8580 = 0;
    dword_1EF8E8588 = 7;
    word_1EF8E858C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8590, "air.set_primitive_count_mesh");
    dword_1EF8E85A8 = 0;
    dword_1EF8E85B0 = 1;
    qword_1EF8E85B8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveCount;
    qword_1EF8E85C0 = 0;
    dword_1EF8E85C8 = 5;
    word_1EF8E85CC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E85D0, "air.object_threadgroup_position_in_grid");
    dword_1EF8E85E8 = 0;
    dword_1EF8E85F0 = 1;
    qword_1EF8E85F8 = (uint64_t)AGCLLVMUserMeshShader::buildOSTGGridPosition;
    qword_1EF8E8600 = 0;
    dword_1EF8E8608 = 1;
    word_1EF8E860C = 0;
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_1C3C54000);
  }
  for (i = 0; i != 14; ++i)
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&unk_1C3E4D9BB);
    v124 = (const void **)&v126;
    v125 = 0x100000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&v124, &__p, &v119);
    if ((v118[7] & 0x80000000) != 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:nn180100]<0>(&__p, ".i8");
    std::string::basic_string[abi:nn180100]<0>(&v119, ".i16");
    std::string::basic_string[abi:nn180100]<0>(v120, ".i32");
    v122[0] = (char *)&v123;
    v122[1] = (char *)0x300000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)v122, &__p, v121);
    for (j = 0; j != -9; j -= 3)
    {
      if (SHIBYTE(v120[j + 2]) < 0)
        operator delete((void *)v120[j]);
    }
    std::string::basic_string[abi:nn180100]<0>(v93, ".i1");
    std::string::basic_string[abi:nn180100]<0>(&v93[3], ".i8");
    std::string::basic_string[abi:nn180100]<0>(v95, ".i16");
    std::string::basic_string[abi:nn180100]<0>(v96, ".i32");
    std::string::basic_string[abi:nn180100]<0>(v97, ".f16");
    std::string::basic_string[abi:nn180100]<0>(v98, ".f32");
    std::string::basic_string[abi:nn180100]<0>(v99, ".v2i1");
    std::string::basic_string[abi:nn180100]<0>(v100, ".v2i8");
    std::string::basic_string[abi:nn180100]<0>(v101, ".v2i16");
    std::string::basic_string[abi:nn180100]<0>(v102, ".v2i32");
    std::string::basic_string[abi:nn180100]<0>(v103, ".v2f16");
    std::string::basic_string[abi:nn180100]<0>(v104, ".v2f32");
    std::string::basic_string[abi:nn180100]<0>(v105, ".v3i1");
    std::string::basic_string[abi:nn180100]<0>(v106, ".v3i8");
    std::string::basic_string[abi:nn180100]<0>(v107, ".v3i16");
    std::string::basic_string[abi:nn180100]<0>(v108, ".v3i32");
    std::string::basic_string[abi:nn180100]<0>(v109, ".v3f16");
    std::string::basic_string[abi:nn180100]<0>(v110, ".v3f32");
    std::string::basic_string[abi:nn180100]<0>(v111, ".v4i1");
    std::string::basic_string[abi:nn180100]<0>(v112, ".v4i8");
    std::string::basic_string[abi:nn180100]<0>(v113, ".v4i16");
    std::string::basic_string[abi:nn180100]<0>(v114, ".v4i32");
    std::string::basic_string[abi:nn180100]<0>(v115, ".v4f16");
    std::string::basic_string[abi:nn180100]<0>(v116, ".v4f32");
    *(_QWORD *)&__p = v118;
    *((_QWORD *)&__p + 1) = 0x1800000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&__p, (__int128 *)v93, &__p);
    v6 = 72;
    do
    {
      if (SHIBYTE(v93[v6 - 1]) < 0)
        operator delete((void *)v91[v6 + 2]);
      v6 -= 3;
    }
    while (v6 * 8);
    v7 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * i];
    v8 = *((_DWORD *)v7 + 6);
    if (v8 == 1)
    {
      p_p = (__int128 *)v122;
      goto LABEL_18;
    }
    if (v8 == 2)
    {
      p_p = &__p;
LABEL_18:
      llvm::SmallVectorImpl<std::string>::operator=((uint64_t)&v124, (uint64_t)p_p);
    }
    if (!(_DWORD)v125)
      goto LABEL_123;
    v10 = v124;
    v73 = (char *)&v124[3 * v125];
    v11 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * i];
    v75 = v11 + 32;
    v77 = (uint64_t *)(v11 + 48);
    v78 = (const char **)(v11 + 40);
    v70 = v11 + 61;
    v79 = v11 + 60;
    v80 = v11 + 56;
    do
    {
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v83, (const void **)v7, v10);
      Function = llvm::Module::getFunction();
      if (!Function)
        goto LABEL_120;
      v74 = (llvm::Function *)Function;
      if (*v80 == 10)
      {
        v16 = *(_QWORD *)(Function + 8);
        if (v16)
        {
          do
          {
            v17 = *v78;
            v18 = (_QWORD *)((char *)v133 + (*v77 >> 1));
            if ((*v77 & 1) != 0)
              v17 = *(const char **)(*v18 + v17);
            v19 = *(_QWORD *)(v16 + 8);
            ((void (*)(_QWORD *, _QWORD))v17)(v18, *(_QWORD *)(v16 + 24));
            v16 = v19;
          }
          while (v19);
        }
        goto LABEL_119;
      }
      if (*v80 == 9)
      {
        v13 = v10;
        v14 = (char *)*v78;
        if (*v78)
        {
          v15 = strlen(*v78);
          v93[0] = &v93[3];
          *(_OWORD *)&v93[1] = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v93, v14, &v14[v15]);
        }
        else
        {
          v93[2] = (void *)64;
          v93[0] = &v93[3];
          v93[1] = 0;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v93, ".", "");
        v66 = v93[1];
        v10 = v13;
        if (v93[2] < v93[1])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v66 = v93[1];
        }
        v93[1] = v66;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (v93[0] != &v93[3])
          free(v93[0]);
        goto LABEL_119;
      }
      v20 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v21 = (*(_DWORD *)(v20 + 8) & 0xFE) != 0x12 || *v70 == 0;
      v22 = !v21;
      v72 = v10;
      if (v21)
        v23 = 1;
      else
        v23 = *(unsigned int *)(v20 + 32);
      v81 = v23;
      v71 = v130;
      v24 = *(_QWORD *)(Function + 8);
      if (v24)
      {
        while (1)
        {
          v25 = *(llvm::Instruction **)(v24 + 24);
          v76 = *(_QWORD *)(v24 + 8);
          if (*v75 == 1)
            break;
          if (*v75 == 2)
          {
            v26 = 121;
LABEL_45:
            v130 = v26;
          }
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v128, v25);
          v27 = llvm::UndefValue::get();
          if (v81)
          {
            for (k = 0; k != v81; ++k)
            {
              v82 = (llvm::Value *)v27;
              v95[0] = 0;
              v94 = 0u;
              memset(v93, 0, sizeof(v93));
              v29 = llvm::CallBase::arg_end(v25) - (_QWORD)v25 + 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF);
              if ((v29 & 0x1FFFFFFFE0) != 0)
              {
                v30 = (v29 >> 5);
                v31 = v93;
                v32 = v25;
                do
                {
                  v33 = (llvm::Value **)((char *)v32 - 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
                  v34 = *v33;
                  *v31 = *v33;
                  if (v22 && (*(_DWORD *)(*(_QWORD *)v34 + 8) & 0xFE) == 0x12)
                  {
                    v92 = 257;
                    v35 = (llvm::Value *)llvm::ConstantInt::get();
                    *v31 = (void *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v128, v34, v35, (const llvm::Twine *)v91);
                  }
                  ++v31;
                  v32 = (llvm::Instruction *)((char *)v32 + 32);
                  --v30;
                }
                while (v30);
              }
              if (*v79)
              {
                v36 = *(llvm::Type **)v93[0];
                if ((*(_DWORD *)(*(_QWORD *)v93[0] + 8) & 0xFE) == 0x12)
                  v36 = (llvm::Type *)**((_QWORD **)v36 + 2);
                v91[0] = llvm::Type::getPrimitiveSizeInBits(v36);
                v91[1] = v37;
                if (llvm::TypeSize::operator unsigned long long() == 32)
                {
                  v38 = 0;
                }
                else
                {
                  v39 = (llvm::Type *)v132[4];
                  if ((*(_DWORD *)(*(_QWORD *)v93[0] + 8) & 0xFE) == 0x12)
                    v39 = (llvm::Type *)llvm::FixedVectorType::get();
                  if ((v29 & 0x1FFFFFFFE0) != 0)
                  {
                    v40 = (v29 >> 5);
                    v41 = v93;
                    do
                    {
                      v42 = (llvm::Value *)*v41;
                      v92 = 257;
                      *v41++ = (void *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v128, v42, v39, (const llvm::Twine *)v91);
                      --v40;
                    }
                    while (v40);
                  }
                  v38 = 1;
                }
              }
              else
              {
                v38 = 0;
              }
              v43 = (char *)v133 + *(_QWORD *)(*(_QWORD *)v133 - 24);
              v88 = v129[2];
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v128);
              v90 = v130;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)(v43 + 40));
              if (v89)
                llvm::MetadataTracking::untrack();
              switch(*v80)
              {
                case 1:
                  v44 = *v78;
                  v45 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v44 = *(const char **)(*v45 + v44);
                  v46 = ((uint64_t (*)(_QWORD *))v44)(v45);
                  goto LABEL_97;
                case 2:
                  v49 = *v78;
                  v50 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v49 = *(const char **)(*v50 + v49);
                  v51 = *(void **)v25;
                  goto LABEL_89;
                case 3:
                  v49 = *v78;
                  v50 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v49 = *(const char **)(*v50 + v49);
                  v51 = v93[0];
LABEL_89:
                  v46 = ((uint64_t (*)(_QWORD *, void *))v49)(v50, v51);
                  goto LABEL_97;
                case 4:
                  v52 = (unsigned int *)((char *)v93[0] + 24);
                  if (*((_DWORD *)v93[0] + 8) >= 0x41u)
                    v52 = *(unsigned int **)v52;
                  v53 = *v78;
                  v54 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v53 = *(const char **)(*v54 + v53);
                  v46 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v53)(v54, *(_QWORD *)v25, *v52);
                  goto LABEL_97;
                case 5:
                  v47 = *v78;
                  v48 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v47 = *(const char **)(*v48 + v47);
                  v46 = ((uint64_t (*)(_QWORD *, void *, void *))v47)(v48, v93[0], v93[1]);
                  goto LABEL_97;
                case 6:
                  v57 = *v78;
                  v58 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v57 = *(const char **)(*v58 + v57);
                  v59 = (void **)v93[0];
                  v60 = v93[1];
                  v61 = v93[2];
                  goto LABEL_96;
                case 7:
                  v57 = *v78;
                  v58 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v57 = *(const char **)(*v58 + v57);
                  v59 = v93;
                  v60 = &unk_1C3E4D9BB;
                  v61 = 0;
LABEL_96:
                  v46 = ((uint64_t (*)(_QWORD *, void **, void *, void *))v57)(v58, v59, v60, v61);
                  goto LABEL_97;
                case 8:
                  v55 = *v78;
                  v56 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                  if ((*v77 & 1) != 0)
                    v55 = *(const char **)(*v56 + v55);
                  v46 = ((uint64_t (*)(_QWORD *, _QWORD, void **, void *, _QWORD))v55)(v56, *(_QWORD *)v25, v93, &unk_1C3E4D9BB, 0);
LABEL_97:
                  FPTrunc = (llvm::Value *)v46;
                  break;
                default:
                  FPTrunc = 0;
                  break;
              }
              v63 = (char *)v133 + *(_QWORD *)(*(_QWORD *)v133 - 24);
              v85 = *(_OWORD *)(v63 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v63 + 40));
              v87 = *((_DWORD *)v63 + 34);
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v128);
              if (v86)
                llvm::MetadataTracking::untrack();
              if (v38)
              {
                v64 = *(_QWORD *)v25;
                if (v22 && (*(_DWORD *)(v64 + 8) & 0xFE) == 0x12)
                  v64 = **(_QWORD **)(v64 + 16);
                v92 = 257;
                FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v128, FPTrunc, (llvm::Type *)v64, (const llvm::Twine *)v91);
              }
              if (v22)
              {
                v92 = 257;
                v65 = (llvm::Value *)llvm::ConstantInt::get();
                FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v128, v82, FPTrunc, v65, (const llvm::Twine *)v91);
              }
              v27 = (uint64_t)FPTrunc;
            }
          }
          if (*(_QWORD *)v25 != v132[1])
            llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v25);
          v24 = v76;
          if (!v76)
            goto LABEL_113;
        }
        v26 = 0;
        goto LABEL_45;
      }
LABEL_113:
      v130 = v71;
      v7 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * i];
      v10 = v72;
LABEL_119:
      llvm::Function::eraseFromParent(v74);
LABEL_120:
      if (v84 < 0)
        operator delete(v83);
      v10 += 3;
    }
    while (v10 != (const void **)v73);
LABEL_123:
    llvm::SmallVector<std::string,24u>::~SmallVector((char **)&__p);
    llvm::SmallVector<std::string,24u>::~SmallVector(v122);
    llvm::SmallVector<std::string,24u>::~SmallVector((char **)&v124);
  }
  AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(v67, 7, 3);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v132);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v131);
  if (v128[0] != v129)
    free(v128[0]);
  return v68;
}

uint64_t AGCLLVMUserObjectShaderBase::improveDMAPromotionOpportunity(AGCLLVMUserObjectShaderBase *this)
{
  AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(this);
  return 1;
}

uint64_t AGCLLVMUserMeshShader::markInvariantOutputs(AGCLLVMUserMeshShader *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *Value;
  BOOL v11;
  uint64_t Function;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD *v32[3];
  char v33;

  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v2))
  {
    v11 = MGGetBoolAnswer()
       && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v9)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    *((_BYTE *)this + 4528) = v11;
  }
  if (*((_BYTE *)this + 4528))
  {
    if (*((_BYTE *)this + 32))
    {
      SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), v3, v4, v5, v6, v7, v8, (char)__p);
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v13 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        v14 = *(_QWORD **)((char *)this + v13 + 336);
        __p = 0;
        v29 = 0;
        v32[0] = 0;
        v32[1] = 0;
        v30 = 0;
        v31 = v32;
        v32[2] = v14;
        v33 = 0;
        v15 = *(_QWORD *)(Function + 8);
        if (v15)
        {
          do
          {
            MarkInvariants::addSeed((uint64_t *)&__p, *(llvm::Value **)(*(_QWORD *)(v15 + 24)- 32 * (*(_DWORD *)(*(_QWORD *)(v15 + 24) + 20) & 0x7FFFFFF)+ 32), 0);
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
          v13 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        }
        if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + v13)) & 1) == 0)
        {
          v17 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
          v18 = v17 + 24;
          for (i = *(_QWORD *)(v17 + 32); i != v18; i = *(_QWORD *)(i + 8))
          {
            v20 = i - 56;
            if (!i)
              v20 = 0;
            v21 = v20 + 72;
            for (j = *(_QWORD *)(v20 + 80); j != v21; j = *(_QWORD *)(j + 8))
            {
              v23 = j - 24;
              if (!j)
                v23 = 0;
              v24 = *(_QWORD *)(v23 + 48);
              if (v24 != v23 + 40)
              {
LABEL_40:
                while (j != v21)
                {
                  if (v24)
                    v25 = (llvm::Instruction *)(v24 - 24);
                  else
                    v25 = 0;
                  if (llvm::FPMathOperator::classof((uint64_t)v25))
                    llvm::Instruction::setFast(v25);
                  v24 = *(_QWORD *)(v24 + 8);
                  v26 = j - 24;
                  if (!j)
                    v26 = 0;
                  if (v24 == v26 + 40)
                  {
                    while (1)
                    {
                      j = *(_QWORD *)(j + 8);
                      if (j == v21)
                        goto LABEL_41;
                      v27 = j - 24;
                      if (!j)
                        v27 = 0;
                      v24 = *(_QWORD *)(v27 + 48);
                      if (v24 != v27 + 40)
                        goto LABEL_40;
                    }
                  }
                }
                break;
              }
            }
LABEL_41:
            ;
          }
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v32[0]);
        if (__p)
        {
          v29 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::getMaxSharedRegisters(AGCLLVMUserObjectShaderBase *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserObjectShaderBase::supportsConstantSamplers(AGCLLVMUserObjectShaderBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::getPCFStateForUnit(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserObjectShaderBase::needsPCFClamp(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserMeshShader::usesCustomBorderColor(AGCLLVMUserMeshShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 565) + 16) >> 5) & 1;
}

uint64_t AGCLLVMUserObjectShaderBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserObjectShaderBase *this)
{
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  else
    return 0;
}

uint64_t AGCLLVMUserMeshShader::needsPayloadInvalidate(AGCLLVMUserMeshShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserMeshShader::buildGlobalSize(AGCLLVMUserMeshShader *this, llvm::Type *a2, int a3)
{
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  _BYTE v10[32];
  __int16 v11;

  v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserMeshShader *))(*(_QWORD *)this + 504))(this);
  v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v8 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v11 = 257;
  return llvm::IRBuilderBase::CreateMul(v8, v6, v7, (const llvm::Twine *)v10);
}

llvm::Type **AGCLLVMUserMeshShader::buildNumGroups(AGCLLVMUserMeshShader *this, llvm::Type *a2)
{
  char *v4;
  uint64_t v5;
  llvm::Type **v6;
  llvm::Type *v7;
  llvm::Value *PointerCast;
  char *v9;
  llvm::Type *v10;
  llvm::Value *v11;
  llvm::Type **GEP;
  uint64_t *v13;
  llvm::Value *v14;
  llvm::Type *v15;
  llvm::Type **AlignedLoad;
  llvm::IRBuilderBase *v17;
  _BYTE v19[32];
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = *((_QWORD *)v4 + 50);
  v21 = *(_OWORD *)(v4 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 40));
  v23 = *((_DWORD *)v4 + 34);
  v6 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 320))(v5, &v21);
  v7 = (llvm::Type *)llvm::PointerType::get();
  v20 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v4 + 40), v6, v7, (const llvm::Twine *)v19);
  if (v22)
    llvm::MetadataTracking::untrack();
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v10 = (llvm::Type *)*((_QWORD *)v9 + 29);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v9 + 40), v10, PointerCast, v11, (const llvm::Twine *)v19);
  v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v20 = 257;
  v15 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v14);
  AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)GEP, 0, (uint64_t)v19);
  v17 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v20 = 257;
  return llvm::IRBuilderBase::CreateZExtOrTrunc(v17, AlignedLoad, a2, (const llvm::Twine *)v19);
}

const char *AGCLLVMUserMeshShader::dumpType(AGCLLVMUserMeshShader *this)
{
  return "mesh";
}

uint64_t AGCLLVMUserMeshShader::getShaderType(AGCLLVMUserMeshShader *this)
{
  return 2;
}

void AGCLLVMUserMeshShader::getCompilationKeyDescription(AGCLLVMUserMeshShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t i;
  char *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35;
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  std::string v57;
  std::string v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  std::string v63;
  void *v64[2];
  char v65;
  void *v66;
  std::string::size_type v67;
  unsigned __int8 v68;
  std::string v69;
  std::string __p;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v57, "AGCMeshContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v55, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v58);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v58.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v58.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v4
                                                                                               + *(_QWORD *)(v58.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v71, (const void **)v55, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v58.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + *(_QWORD *)(v58.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v58.__r_.__value_.__r.__words[2] = v5;
  v59 = MEMORY[0x1E0DE4FB8] + 16;
  if (v61 < 0)
    operator delete(v60);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](&v62);
  std::string::basic_string[abi:nn180100]<0>(v53, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v72, (const void **)v53, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v51, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v73, (const void **)v51, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v49, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v74, (const void **)v49, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "maxVertexAmplificationCount");
  _agcFieldString<unsigned int>(&v75, (const void **)v47, v3[4] & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v45, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned int>(&v76, (const void **)v45, (v3[4] >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v43, "customBorderColor");
  _agcFieldString<unsigned int>(&v77, (const void **)v43, (v3[4] >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v78, (const void **)v41, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v39, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v79, (const void **)v39, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v80, (const void **)v37, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v35, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v81, (const void **)&v35, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v82, (const void **)v33, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v83, (const void **)v31, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v29, "enableStackShadow");
  _agcFieldString<unsigned int>(&v84, (const void **)v29, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v27, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v85, (const void **)v27, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v25, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v86, (const void **)v25, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v23, "addDefaultPointSize");
  _agcFieldString<unsigned int>(&v87, (const void **)v23, (v3[4] >> 6) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v88, (const void **)v21, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v19, "noObjectShader");
  _agcFieldString<unsigned int>(&v89, (const void **)v19, (v3[4] >> 8) & 1);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v69 = v57;
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v69, 0);
  std::string::basic_string[abi:nn180100]<0>(v64, "{");
  _agcIndentedLine(&v66, (std::string::value_type *)v64, 0);
  if ((v68 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&v66;
  else
    v6 = (const std::string::value_type *)v66;
  if ((v68 & 0x80u) == 0)
    v7 = v68;
  else
    v7 = v67;
  v8 = std::string::append(&__p, v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v68 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  for (i = 0; i != 57; i += 3)
  {
    v11 = (char *)&v71 + i * 8;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[i + 2]) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    else
      __p = *(std::string *)v11;
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v63, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v63 = __p;
    _agcIndentedLine(&v66, (std::string::value_type *)&v63, 1);
    if ((v68 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&v66;
    else
      v13 = (const std::string::value_type *)v66;
    if ((v68 & 0x80u) == 0)
      v14 = v68;
    else
      v14 = v67;
    std::string::append(&v58, v13, v14);
    if ((char)v68 < 0)
      operator delete(v66);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
        continue;
    }
    else if ((v12 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v66, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v66, 0);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v58;
  else
    v15 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, size);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v68 < 0)
    operator delete(v66);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v18 = 57;
  do
  {
    if (v71.__r_.__value_.__s.__data_[v18 * 8 - 1] < 0)
      operator delete((void *)__p.__r_.__value_.__r.__words[v18 + 1]);
    v18 -= 3;
  }
  while (v18 * 8);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserMeshShader::getBufferBoundsCheckMode(AGCLLVMUserMeshShader *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserMeshShader::getForwardProgressMode(AGCLLVMUserMeshShader *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 31;
}

BOOL AGCLLVMUserMeshShader::enableSoftFaultOptimization(AGCLLVMUserMeshShader *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserMeshShader::isDMAPromotionDisabled(AGCLLVMUserMeshShader *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 565) + 12) >> 7;
}

uint64_t AGCLLVMUserMeshShader::constructReply(AGCLLVMUserMeshShader *this)
{
  char *v2;
  char *v3;
  int v4;
  int v5;
  char v6;
  unint64_t v7;
  void *v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  flatbuffers::FlatBufferBuilder *v24;
  int v25;
  const char *v26;
  int v27;
  char *v28;
  flatbuffers::FlatBufferBuilder *v29;
  int v30;
  flatbuffers::FlatBufferBuilder *v31;
  int v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  int *v39;
  unsigned int *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  int *v44;
  unsigned int *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int *v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type size;
  std::string *v64;
  std::string::size_type v65;
  void **v66;
  std::string::size_type v67;
  unsigned int v68;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  void *__p[2];
  uint64_t v80;
  void *v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84[2];
  _QWORD v85[65];
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int v93[8];
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (!AGCDeserializedReply::deserialize((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160)))return 0;
  AGCLLVMObject::validateBackendReply((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  v73 = AGCLLVMUserObject::constructFlatReply(this);
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = v2 + 2472;
  v2[2542] = 1;
  v4 = *((_DWORD *)v2 + 626) - *((_DWORD *)v2 + 630) + *((_DWORD *)v2 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2 + 2472, 4, *((_DWORD *)this + 1098));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, *((_DWORD *)this + 1099));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, *((_DWORD *)this + 1100));
  v5 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v3, v4);
  v6 = *((_BYTE *)this + 5256);
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84[0] = (char *)v85;
  v84[1] = (char *)0x800000000;
  v85[64] = 0x1FFFFFFFFLL;
  v86 = v6;
  v93[7] = 0;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  memset(v93, 0, 26);
  v94 = 1;
  if (*((_DWORD *)this + 1182))
  {
    v7 = *((_QWORD *)this + 590);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&v81, v7);
      v7 += 64;
    }
    while (v7 < *((_QWORD *)this + 590) + ((unint64_t)*((unsigned int *)this + 1182) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v81, *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v81, (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  if (v82 == v81)
    v8 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  else
    v8 = v81;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v8, (v82 - (_BYTE *)v81) >> 2);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = v10 + 2472;
  v10[2542] = 1;
  v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v10 + 2472, 4, v90);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, SDWORD1(v90));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, SDWORD2(v90));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 16, SDWORD1(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, SDWORD2(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, SHIDWORD(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 14, v89);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 18, SHIDWORD(v89));
  v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v15 = v14 + 2472;
  v14[2542] = 1;
  v16 = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14 + 2472, 4, v93[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 6, v93[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 8, v93[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 16, v93[5]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 10, SDWORD2(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 12, SHIDWORD(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 14, v92);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 18, SHIDWORD(v92));
  v17 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v15, v16);
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v19 = v18 + 2472;
  v18[2542] = 1;
  v20 = *((_DWORD *)v18 + 626) - *((_DWORD *)v18 + 630) + *((_DWORD *)v18 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18 + 2472, 4, v5);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 6, *((_DWORD *)this + 1150));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 8, *((_DWORD *)this + 1151));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v19, 10, *((char *)this + 4612));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 12, *((_DWORD *)this + 1164));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 14, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 16, *((_DWORD *)this + 1160) - *((_DWORD *)this + 1166));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 18, *((_DWORD *)this + 1162));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 60, *((_DWORD *)this + 1166));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 20, *((_DWORD *)this + 1161));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 22, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 24, v13);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 26, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 28, LOBYTE(v93[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 30, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 32, *((unsigned __int8 *)this + 4625), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 34, *((_DWORD *)this + 1155));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 36, *((unsigned __int8 *)this + 4629), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 38, *((unsigned __int8 *)this + 4627), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 40, *((unsigned __int8 *)this + 4631), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 42, *((unsigned __int8 *)this + 4616), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 44, *((unsigned __int8 *)this + 4626), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 46, *((unsigned __int8 *)this + 4633), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 48, *((_DWORD *)this + 1092));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 50, *((unsigned __int8 *)this + 4384), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 52, *((unsigned __int8 *)this + 4632), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 54, *((_DWORD *)this + 1140));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 56, *((unsigned __int8 *)this + 12), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 58, *((unsigned __int8 *)this + 4385), 0);
  v21 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v19, v20);
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v23 = v22 + 2472;
  v22[2542] = 1;
  LODWORD(v19) = *((_DWORD *)v22 + 626) - *((_DWORD *)v22 + 630) + *((_DWORD *)v22 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v22 + 2472, v73);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v23, v21);
  v24 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
  v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v23, (__int16)v19);
  flatbuffers::FlatBufferBuilder::Finish(v24, v25, v26);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v27 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
  v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v29 = (flatbuffers::FlatBufferBuilder *)(v28 + 2568);
  v28[2638] = 1;
  v30 = *((_DWORD *)v28 + 650) - *((_DWORD *)v28 + 654) + *((_DWORD *)v28 + 652);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v28 + 2568, v27);
  v31 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
  v32 = flatbuffers::FlatBufferBuilder::EndTable(v29, v30);
  flatbuffers::FlatBufferBuilder::Finish(v31, v32, v33);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  v34 = *(_QWORD *)(*(_QWORD *)this - 24);
  v35 = (char *)this + v34;
  v36 = (char *)this + v34 + 696;
  if (*(_QWORD *)v36)
  {
    if (*((_QWORD *)v35 + 88))
      v37 = (_QWORD *)((char *)this + v34 + 696);
    else
      v37 = v35 + 1256;
  }
  else
  {
    v37 = v35 + 1256;
  }
  v39 = (int *)(*v37 + *(unsigned int *)*v37);
  v40 = (unsigned int *)((char *)v39 + *(unsigned __int16 *)((char *)v39 - *v39 + 4));
  v41 = (int *)((char *)v40 + *v40);
  if (*(_QWORD *)v36)
  {
    v42 = *((_QWORD *)v35 + 88);
    v43 = v35 + 1256;
    if (!v42)
      v36 = v43;
  }
  else
  {
    v36 = v35 + 1256;
  }
  v44 = 0;
  v45 = (unsigned int *)((char *)v41 + *(unsigned __int16 *)((char *)v41 - *v41 + 8));
  if (*(_QWORD *)v36 && *((_QWORD *)v36 + 1))
    v44 = (int *)(*(_QWORD *)v36 + **(unsigned int **)v36);
  v46 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v46 >= 5u && (v47 = v46[2]) != 0)
    v48 = (int *)((char *)v44 + v47 + *(unsigned int *)((char *)v44 + v47));
  else
    v48 = 0;
  v49 = (unsigned __int16 *)((char *)v48 - *v48);
  if (*v49 >= 0x3Du && (v50 = v49[30]) != 0)
    v51 = *(int *)((char *)v48 + v50);
  else
    v51 = 0;
  v52 = *(unsigned int *)((char *)v45 + *v45);
  v70 = *((_DWORD *)this + 1150);
  v71 = *((_DWORD *)this + 1169);
  v72 = *((_DWORD *)this + 1167);
  v74 = *((_DWORD *)this + 1168);
  v53 = *((_DWORD *)this + 1151);
  v54 = *((_DWORD *)this + 1170);
  v55 = *((_DWORD *)this + 1140);
  v56 = *((_DWORD *)this + 1171);
  v57 = *(_DWORD *)(*(_QWORD *)((char *)this + v34 + 400) + 908);
  if (v56 > v57)
  {
    std::to_string(&v76, v56);
    v58 = std::string::insert(&v76, 0, "Mesh unique scalar count of ");
    v59 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v77, " exceeds limit of ");
    v61 = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v75, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 908));
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &v75;
    else
      v62 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      size = v75.__r_.__value_.__l.__size_;
    v64 = std::string::append(&v78, (const std::string::value_type *)v62, size);
    v65 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v80 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (v80 >= 0)
      v66 = __p;
    else
      v66 = (void **)__p[0];
    if (v80 >= 0)
      v67 = HIBYTE(v80);
    else
      v67 = (std::string::size_type)__p[1];
    std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (const std::string::value_type *)v66, v67);
    if (SHIBYTE(v80) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v52 > 0x20)
  {
    v38 = 0;
  }
  else
  {
    v68 = validateUserMeshLocalMemoryUsage(v51, ((v70 + 3) & 0xFFFFFFFC) * v72 + v53 * v74 + (v71 * ((v70 + 3) & 0xFFFFFFFC) + v54 * v53) * v55, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 900), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 896), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 904), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8));
    if (v56 <= v57)
      v38 = v68;
    else
      v38 = 0;
  }
  __p[0] = &v87;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v84);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  return v38;
}

void `virtual thunk to'AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(AGCLLVMUserMeshShader *this)
{
  uint64_t v1;

  AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader((AGCLLVMUserMeshShader *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader((AGCLLVMUserMeshShader *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserMeshShader::dumpType(AGCLLVMUserMeshShader *this)
{
  return "mesh";
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShader::getShaderType(AGCLLVMUserMeshShader *this)
{
  return 2;
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShader::getForwardProgressMode(AGCLLVMUserMeshShader *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4520) + 12) >> 31;
}

void `virtual thunk to'AGCLLVMUserMeshShader::getCompilationKeyDescription(AGCLLVMUserMeshShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserMeshShader::getCompilationKeyDescription((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShader::constructReply(AGCLLVMUserMeshShader *this)
{
  return AGCLLVMUserMeshShader::constructReply((AGCLLVMUserMeshShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShader::getBufferBoundsCheckMode(AGCLLVMUserMeshShader *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4520) + 12) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserMeshShader::enableSoftFaultOptimization(AGCLLVMUserMeshShader *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShader::isDMAPromotionDisabled(AGCLLVMUserMeshShader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4520) + 12) >> 7;
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserObjectShaderBase *this)
{
  AGCLLVMUserObject *v1;

  v1 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216));
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  else
    return 0;
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache(AGCLLVMUserObjectShaderBase::FunctionStateCache *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 38);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 288));
  v4 = *((_QWORD *)this + 35);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 264));
  v6 = *((_QWORD *)this + 32);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 240));
  v8 = *((_QWORD *)this + 29);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 216));
  v9 = *((_QWORD *)this + 26);
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 192));
  v10 = *((_QWORD *)this + 23);
  if (v10 != -8192 && v10 != -4096 && v10)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 168));
  v11 = *((_QWORD *)this + 20);
  if (v11 != -8192 && v11 != -4096 && v11)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 144));
  v12 = *((_QWORD *)this + 17);
  if (v12 != -8192 && v12 != -4096 && v12)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 120));
  v13 = *((_QWORD *)this + 14);
  if (v13 != -8192 && v13 != -4096 && v13)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 96));
  v14 = *((_QWORD *)this + 11);
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 72));
  v15 = *((_QWORD *)this + 8);
  if (v15 != -8192 && v15 != -4096 && v15)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 48));
  v16 = *((_QWORD *)this + 5);
  if (v16 != -8192 && v16 != -4096 && v16)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 24));
  v17 = *((_QWORD *)this + 2);
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17)
      llvm::ValueHandleBase::RemoveFromUseList(this);
  }
}

uint64_t AGCLLVMUserObjectShaderBase::needsPayloadInvalidate(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

llvm::Value *llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  llvm::Value *PointerCast;
  BOOL v7;

  PointerCast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      PointerCast = (llvm::Value *)llvm::CastInst::CreatePointerCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)PointerCast, (uint64_t)a4);
    }
    else
    {
      PointerCast = (llvm::Value *)(*(uint64_t (**)(_QWORD, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9)
                                                                                                  + 232))(*((_QWORD *)this + 9), a2, a3);
      if (PointerCast)
        v7 = *((unsigned __int8 *)PointerCast + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)PointerCast, (uint64_t)a4);
    }
  }
  return PointerCast;
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return a2;
    v10 = 38;
  }
  else
  {
    v10 = 39;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t AGCLLVMUserMeshShader::buildSetPosition(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t BuiltinPointer;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  v7 = (char *)this + 168;
  v8 = AGCLLVMBuilder::unboxVector((AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), a4, (llvm::Value **)v13);
  if (v8)
  {
    v9 = 0;
    v10 = v8;
    do
    {
      BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0, v9, a3, *(llvm::Type **)&v7[*(_QWORD *)(*(_QWORD *)this - 24) + 32]);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *((llvm::Type ***)v13 + v9++), BuiltinPointer, 0);
    }
    while (v10 != v9);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPointSize(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  uint64_t BuiltinPointer;

  BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x16u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, BuiltinPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetClipDistance(AGCLLVMUserObjectShaderBase *a1, uint64_t a2)
{
  llvm::Type **v4;
  uint64_t v5;
  unsigned int *v6;
  llvm::Type **v7;
  uint64_t BuiltinPointer;

  v4 = *(llvm::Type ***)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(unsigned int **)v6;
  v7 = *(llvm::Type ***)(a2 + 24);
  BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(a1, v4, 0x19u, *v6, *(llvm::Value **)(a2 + 16), *(llvm::Type **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v7, BuiltinPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetLayerId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  llvm::Value *Cast;
  uint64_t *v12;
  llvm::Value *VertexAmpId;
  llvm::Type **VpLayerIdOffsetPointer;
  llvm::Value *v15;
  llvm::Type *v16;
  uint64_t AlignedLoad;
  char *v18;
  llvm::IRBuilderBase *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Type **BuiltinPointer;
  uint64_t *v24;
  uint64_t v25;
  uint64_t Select;
  char *v27;
  uint64_t v28;
  llvm::Type **v29;
  llvm::IRBuilderBase *v30;
  llvm::Type *v31;
  llvm::Value *PointerCast;
  uint64_t v34;
  __int16 v35;
  _BYTE v36[32];
  __int16 v37;

  v8 = (char *)this + 4405;
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v10 = *((_QWORD *)v9 + 29);
  v37 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 40), 39, (uint64_t)a4, v10, (uint64_t)v36);
  if (*v8)
  {
    v12 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    VpLayerIdOffsetPointer = (llvm::Type **)AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, a2, VertexAmpId);
    v37 = 257;
    v16 = AGCLLVMBuilder::tryDeducePointeeType(VpLayerIdOffsetPointer, v15);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v16, (uint64_t)VpLayerIdOffsetPointer, 0, (uint64_t)v36);
    v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v19 = (llvm::IRBuilderBase *)(v18 + 40);
    v20 = *((_QWORD *)v18 + 29);
    v37 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, AlignedLoad, v20, (uint64_t)v36);
    v35 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, Cast, v21, (const llvm::Twine *)&v34);
  }
  if (v8[223])
  {
    v22 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFC, a3, Cast, v22);
  }
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v24 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v25 = llvm::ConstantInt::get();
  v37 = 257;
  llvm::IRBuilderBase::CreateICmp(v24, 37, (llvm::CmpInst **)Cast, v25, (uint64_t)v36);
  llvm::ConstantInt::get();
  v35 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v28 = *((_QWORD *)v27 + 28);
  v37 = 257;
  v29 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v27 + 40), 38, Select, v28, (uint64_t)v36);
  v30 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v31 = (llvm::Type *)*((_QWORD *)this + 541);
  v37 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v30, BuiltinPointer, v31, (const llvm::Twine *)v36);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v29, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetViewportId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  llvm::Value *Cast;
  uint64_t *v12;
  llvm::Value *VertexAmpId;
  llvm::Type **VpLayerIdOffsetPointer;
  llvm::Value *v15;
  llvm::Type *v16;
  uint64_t AlignedLoad;
  char *v18;
  llvm::IRBuilderBase *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Type **BuiltinPointer;
  uint64_t *v24;
  uint64_t v25;
  uint64_t Select;
  char *v27;
  uint64_t v28;
  llvm::Type **v29;
  char *v30;
  llvm::Type *v31;
  llvm::IRBuilderBase *v32;
  llvm::Type *v33;
  llvm::Value *PointerCast;
  llvm::Value *v35;
  uint64_t GEP;
  _BYTE v38[32];
  __int16 v39;
  _BYTE v40[32];
  __int16 v41;

  v8 = (char *)this + 4405;
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v10 = *((_QWORD *)v9 + 29);
  v41 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 40), 39, (uint64_t)a4, v10, (uint64_t)v40);
  if (*v8)
  {
    v12 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    VpLayerIdOffsetPointer = (llvm::Type **)AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, a2, VertexAmpId);
    v41 = 257;
    v16 = AGCLLVMBuilder::tryDeducePointeeType(VpLayerIdOffsetPointer, v15);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v16, (uint64_t)VpLayerIdOffsetPointer, 0, (uint64_t)v40);
    v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v19 = (llvm::IRBuilderBase *)(v18 + 40);
    v20 = *((_QWORD *)v18 + 29);
    v41 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, AlignedLoad, v20, (uint64_t)v40);
    v39 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, Cast, v21, (const llvm::Twine *)v38);
  }
  if (v8[225])
  {
    v22 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFD, a3, Cast, v22);
  }
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v24 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v25 = llvm::ConstantInt::get();
  v41 = 257;
  llvm::IRBuilderBase::CreateICmp(v24, 37, (llvm::CmpInst **)Cast, v25, (uint64_t)v40);
  llvm::ConstantInt::get();
  v39 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v28 = *((_QWORD *)v27 + 27);
  v41 = 257;
  v29 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v27 + 40), 38, Select, v28, (uint64_t)v40);
  v30 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v31 = (llvm::Type *)*((_QWORD *)v30 + 27);
  v32 = (llvm::IRBuilderBase *)(v30 + 40);
  v33 = (llvm::Type *)*((_QWORD *)this + 540);
  v41 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v30 + 40), BuiltinPointer, v33, (const llvm::Twine *)v40);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v39 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v32, v31, PointerCast, v35, (const llvm::Twine *)v38);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v29, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *VertexAmpId;

  if (*((_BYTE *)this + 4634))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFF, a3, a4, VertexAmpId);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveCulled(llvm::Type **this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Type **BuiltinPointer;
  char *v7;
  uint64_t v8;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::Type **Shl;
  char *v13;
  llvm::Type *v14;
  llvm::IRBuilderBase *v15;
  llvm::Type *v16;
  llvm::Value *PointerCast;
  llvm::Value *v18;
  uint64_t GEP;
  _WORD v21[20];
  _BYTE v22[32];
  __int16 v23;

  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer((AGCLLVMUserObjectShaderBase *)this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *((_QWORD *)*this - 3) + 232));
  v7 = (char *)this + *((_QWORD *)*this - 3);
  v8 = *((_QWORD *)v7 + 27);
  v23 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v22);
  v10 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
  v23 = 257;
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl(v10, Cast, v11, (const llvm::Twine *)v22);
  v13 = (char *)this + *((_QWORD *)*this - 3);
  v14 = (llvm::Type *)*((_QWORD *)v13 + 27);
  v15 = (llvm::IRBuilderBase *)(v13 + 40);
  v16 = this[540];
  v23 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v13 + 40), BuiltinPointer, v16, (const llvm::Twine *)v22);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v21[16] = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v15, v14, PointerCast, v18, (const llvm::Twine *)v21);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40), Shl, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetIndex(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  llvm::IRBuilderBase *v7;
  llvm::Type *v8;
  llvm::Value *PointerCast;
  char *v10;
  llvm::Type *v11;
  uint64_t GEP;
  _BYTE v14[32];
  __int16 v15;

  v7 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v8 = (llvm::Type *)*((_QWORD *)this + 540);
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v7, a2, v8, (const llvm::Twine *)v14);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = (llvm::Type *)*((_QWORD *)v10 + 27);
  v15 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, PointerCast, a3, (const llvm::Twine *)v14);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetIndices(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  llvm::Type *v8;
  llvm::Type *v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *PointerCast;
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  llvm::Value *UDiv;
  llvm::IRBuilderBase *v15;
  uint64_t GEP;
  _BYTE v18[32];
  __int16 v19;

  v8 = *a4;
  v9 = (llvm::Type *)llvm::PointerType::get();
  v10 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v19 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v10, a2, v9, (const llvm::Twine *)v18);
  v12 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v12, a3, v13, (const llvm::Twine *)v18);
  v15 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v19 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v15, v8, PointerCast, UDiv, (const llvm::Twine *)v18);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetVertexData(AGCLLVMUserObjectShaderBase *this, uint64_t a2)
{
  uint64_t v3;
  llvm::Type **v4;
  _QWORD *v5;
  unsigned int v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *VertexAmpId;

  v4 = *(llvm::Type ***)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v5 = (_QWORD *)*v5;
  v6 = *(_DWORD *)v5;
  v7 = *(llvm::Value **)(a2 + 16);
  v8 = *(llvm::Value **)(a2 + 24);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v4, 0, v6, v7, v8, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveData(AGCLLVMUserObjectShaderBase *this, uint64_t a2)
{
  uint64_t v3;
  llvm::Type **v4;
  _QWORD *v5;
  unsigned int v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *VertexAmpId;

  v4 = *(llvm::Type ***)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v5 = (_QWORD *)*v5;
  v6 = *(_DWORD *)v5;
  v7 = *(llvm::Value **)(a2 + 16);
  v8 = *(llvm::Value **)(a2 + 24);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v4, 1, v6, v7, v8, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveCount(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  llvm::Type **Cast;
  uint64_t PrimCountPointer;
  _BYTE v11[32];
  __int16 v12;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = (uint64_t *)(v5 + 40);
  v7 = *((_QWORD *)v5 + 28);
  v12 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v5 + 40), 38, (uint64_t)a3, v7, (uint64_t)v11);
  PrimCountPointer = AGCLLVMUserMeshShader::getPrimCountPointer(this, a2);
  llvm::IRBuilderBase::CreateAlignedStore(v6, Cast, PrimCountPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildOSTGGridPosition(AGCLLVMUserMeshShader *this)
{
  char *v2;
  llvm::Type *v3;
  uint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Type **GEP;
  llvm::Type *v8;
  llvm::Value *PointerCast;
  char *v10;
  llvm::Type *v11;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (llvm::Type *)*((_QWORD *)v2 + 27);
  v4 = *((_QWORD *)v2 + 50);
  v16 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 40));
  v18 = *((_DWORD *)v2 + 34);
  v5 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 320))(v4, &v16);
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v2 + 40), v3, v5, v6, (const llvm::Twine *)v14);
  v8 = (llvm::Type *)llvm::PointerType::get();
  v13[16] = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v2 + 40), GEP, v8, (const llvm::Twine *)v13);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = (llvm::Type *)*((_QWORD *)v10 + 38);
  v15 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v10 + 5, v11, (uint64_t)PointerCast, 0, (uint64_t)v14);
}

void llvm::SmallVectorImpl<std::string>::append<std::string const*,void>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::string,false>::grow(a1);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>(a2, a3, (std::string *)(*(_QWORD *)a1 + 24 * v7));
  *(_DWORD *)(a1 + 8) += v6;
}

uint64_t llvm::SmallVectorImpl<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *i;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v8 = *(const std::string **)a2;
        v9 = *(std::string **)a1;
        v10 = 24 * v4;
        do
        {
          std::string::operator=(v9++, v8++);
          v10 -= 24;
        }
        while (v10);
        v11 = *(std::string **)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v11 = *(std::string **)a1;
        v9 = *(std::string **)a1;
      }
      for (i = &v11[v5]; i != v9; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v12 = *(const std::string **)a2;
        v13 = *(std::string **)a1;
        v14 = 24 * v5;
        do
        {
          std::string::operator=(v13++, v12++);
          v14 -= 24;
        }
        while (v14);
        goto LABEL_19;
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(std::string **)a1;
        v7 = v5;
        do
        {
          if (SHIBYTE(v6[v7 - 1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v6[v7 - 1].__r_.__value_.__l.__data_);
          --v7;
        }
        while (v7 * 24);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1);
    }
    v5 = 0;
LABEL_19:
    std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>((__int128 *)(*(_QWORD *)a2 + 24 * v5), (__int128 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8)), (std::string *)(*(_QWORD *)a1 + 24 * v5));
LABEL_20:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

char **llvm::SmallVector<std::string,24u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void llvm::SmallVectorTemplateBase<std::string,false>::grow(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2;
  v4 = *(_QWORD **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 24 * v5;
    v7 = v2;
    do
    {
      v8 = *(_OWORD *)v4;
      *(_QWORD *)(v7 + 16) = v4[2];
      *(_OWORD *)v7 = v8;
      v7 += 24;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v4 += 3;
      v6 -= 24;
    }
    while (v6);
    v4 = *(_QWORD **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 3 * v9;
      do
      {
        if (SHIBYTE(v4[v10 - 1]) < 0)
          operator delete((void *)v4[v10 - 3]);
        v10 -= 3;
      }
      while (v10 * 8);
      v4 = *(_QWORD **)a1;
    }
  }
  if (v4 != (_QWORD *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = 0;
}

void std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>(__int128 *a1, __int128 *a2, std::string *this)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      v5 = (__int128 *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
}

uint64_t AGCLLVMUserMeshShader::getPrimCountPointer(AGCLLVMUserMeshShader *this, llvm::Type **a2)
{
  llvm::IRBuilderBase *v3;
  llvm::Type *v4;
  llvm::Value *PointerCast;
  char *v6;
  llvm::Type *v7;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  v3 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v4 = (llvm::Type *)*((_QWORD *)this + 541);
  v11 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v3, a2, v4, (const llvm::Twine *)v10);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v7 = (llvm::Type *)*((_QWORD *)v6 + 28);
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v11 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v6 + 40), v7, PointerCast, v8, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMUserMeshShader::buildSetVaryingData(uint64_t a1, llvm::Type **a2, int a3, unsigned int a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7)
{
  int v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::Value **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *BasePointer;
  llvm::Type *v26;
  llvm::IRBuilderBase *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  llvm::Value *v32;
  llvm::Value *VertexAmpCount;
  llvm::Value *v34;
  llvm::IRBuilderBase *v35;
  llvm::Value *Mul;
  llvm::Value *v37;
  llvm::Value *Add;
  llvm::IRBuilderBase *v39;
  uint64_t i;
  llvm::IRBuilderBase *v41;
  llvm::Value *v42;
  llvm::Type *v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  const llvm::Twine *v48;
  llvm::IRBuilderBase *v49;
  llvm::Type *v50;
  llvm::IRBuilderBase *v51;
  llvm::Value *v52;
  uint64_t GEP;
  unsigned int v54;
  char v56;
  __int16 v57;
  _BYTE v58[32];
  __int16 v59;
  _BYTE v60[32];
  __int16 v61;
  llvm::Value *v62[2];
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v8 = ((a3 != 0) | (2 * a4)) + 6;
  if (a4 >= 0xFFFFFFFA)
    v8 = ~a4;
  v9 = *(unsigned int *)(a1 + 4728);
  if (!(_DWORD)v9)
    return llvm::UndefValue::get();
  v13 = *(_QWORD *)(a1 + 4720);
  v14 = v9 << 6;
  while (*(_DWORD *)(v13 + 16) != v8)
  {
    v13 += 64;
    v14 -= 64;
    if (!v14)
      return llvm::UndefValue::get();
  }
  *(_OWORD *)v62 = 0u;
  v63 = 0u;
  v16 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), a6, v62);
  v17 = v16;
  v18 = *(_QWORD *)v62[0];
  v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1);
  if (*(_QWORD *)v62[0] == v19[26] || v18 == v19[27] || v18 == v19[28])
  {
    v18 = v19[29];
    if (v16)
    {
      v20 = v62;
      v54 = v16;
      v21 = v16;
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v23 = (uint64_t)*v20;
        v24 = *(_QWORD *)(v22 + a1 + 200 + 32);
        v61 = 257;
        *v20++ = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v22 + a1 + 40, 39, v23, v24, (uint64_t)v60);
        --v21;
      }
      while (v21);
      v17 = v54;
    }
  }
  BasePointer = AGCLLVMUserMeshShader::getBasePointer((_QWORD *)a1, a2, a3, *(_DWORD *)(v13 + 60), v18, a7);
  v26 = (llvm::Type *)v18;
  if (a3 == 1)
  {
    v27 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    v28 = v18;
    v29 = llvm::ConstantInt::get();
    v30 = v17;
    v31 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
    VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount((AGCLLVMUserObjectShaderBase *)a1, v32);
    v34 = (llvm::Value *)llvm::ConstantInt::get();
    v61 = 257;
    v35 = (llvm::IRBuilderBase *)v31;
    v17 = v30;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v35, VertexAmpCount, v34, (const llvm::Twine *)v60);
    v59 = 257;
    v37 = (llvm::Value *)v29;
    v26 = (llvm::Type *)v28;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v27, v37, Mul, (const llvm::Twine *)v58);
    v39 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    v61 = 257;
    a5 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v39, a5, Add, (const llvm::Twine *)v60);
  }
  if (v17)
  {
    for (i = 0;
          i != v17;
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Type **)v62[i++], GEP, 0))
    {
      if (*(_BYTE *)(v13 + 56))
      {
        v41 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v42 = (llvm::Value *)llvm::ConstantInt::get();
        v61 = 257;
        v43 = v26;
        v44 = llvm::IRBuilderBase::CreateMul(v41, a5, v42, (const llvm::Twine *)v60);
        v45 = (llvm::Value *)llvm::ConstantInt::get();
        v59 = 257;
        v46 = (llvm::Value *)v44;
        v26 = v43;
        v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v41, v46, v45, (const llvm::Twine *)v58);
        v57 = 257;
        v48 = (const llvm::Twine *)&v56;
        v49 = v41;
        v50 = v43;
      }
      else
      {
        v51 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v52 = (llvm::Value *)llvm::ConstantInt::get();
        v61 = 257;
        v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v51, a5, v52, (const llvm::Twine *)v60);
        v59 = 257;
        v48 = (const llvm::Twine *)v58;
        v49 = v51;
        v50 = v26;
      }
      GEP = llvm::IRBuilderBase::CreateGEP(v49, v50, BasePointer, v47, v48);
    }
  }
  return llvm::UndefValue::get();
}

llvm::Value *AGCLLVMUserMeshShader::getBasePointer(_QWORD *a1, llvm::Type **a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6)
{
  llvm::Type *v11;
  llvm::Type *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  llvm::Value *PointerCast;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *Mul;
  llvm::Value *Add;
  char *v23;
  llvm::Type *v24;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v26;
  _BYTE v28[32];
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  _BYTE v33[32];
  __int16 v34;

  v11 = (llvm::Type *)llvm::PointerType::get();
  v12 = (llvm::Type *)llvm::PointerType::get();
  v13 = *(_QWORD *)(*a1 - 24);
  if (a3)
  {
    v14 = (char *)a1 + v13;
    v15 = *(_QWORD *)((char *)a1 + v13 + 400);
    v30 = *(_OWORD *)((char *)a1 + v13 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)((char *)a1 + v13 + 40));
    v32 = *((_DWORD *)v14 + 34);
    PointerCast = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 328))(v15, &v30);
    if (v31)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v34 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)((char *)a1 + v13 + 40), a2, v11, (const llvm::Twine *)v33);
  }
  v17 = (uint64_t)&a1[3 * a4 + 678];
  v18 = *(llvm::Value **)v17;
  if (!*(_BYTE *)(v17 + 12))
    a6 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v34 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v20, a6, v19, (const llvm::Twine *)v33);
  v29 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v20, v18, Mul, (const llvm::Twine *)v28);
  v23 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v24 = (llvm::Type *)*((_QWORD *)v23 + 27);
  v34 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v23 + 40), v24, PointerCast, Add, (const llvm::Twine *)v33);
  v26 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v34 = 257;
  return llvm::IRBuilderBase::CreatePointerCast(v26, GEP, v12, (const llvm::Twine *)v33);
}

uint64_t llvm::IRBuilderBase::CreateUDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMUserMeshShader::getBuiltinPointer(AGCLLVMUserObjectShaderBase *a1, llvm::Type **a2, unsigned int a3, uint64_t a4, llvm::Value *a5, llvm::Type *a6)
{
  llvm::Value *VertexAmpId;
  llvm::Value *BasePointer;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *Add;
  llvm::IRBuilderBase *v16;
  _BYTE v18[32];
  __int16 v19;

  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(a1);
  BasePointer = AGCLLVMUserMeshShader::getBasePointer(a1, a2, 0, a3, (uint64_t)a6, VertexAmpId);
  v13 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a5, v14, (const llvm::Twine *)v18);
  v16 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v19 = 257;
  return llvm::IRBuilderBase::CreateGEP(v16, a6, BasePointer, Add, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Type *v6;
  llvm::Value *PointerCast;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *Mul;
  llvm::Value *v11;
  llvm::Value *Add;
  char *v13;
  llvm::Type *v14;
  _WORD v16[20];
  _BYTE v17[32];
  __int16 v18;

  v5 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v6 = (llvm::Type *)*((_QWORD *)this + 541);
  v18 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v5, a2, v6, (const llvm::Twine *)v17);
  v8 = (AGCLLVMUserMeshShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v18 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, a3, v9, (const llvm::Twine *)v17);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v16[16] = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, Mul, v11, (const llvm::Twine *)v16);
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v14 = (llvm::Type *)*((_QWORD *)v13 + 28);
  v18 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v13 + 40), v14, PointerCast, Add, (const llvm::Twine *)v17);
}

uint64_t AGCLLVMUserMeshShader::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm::MDString *v8;
  const char *v9;
  llvm::MDString *v10;
  const char *v11;
  _BOOL8 v12;
  llvm::MDString *v13;
  int Key;
  llvm *v16;
  unsigned int v17;
  int v18;
  int v20;
  void *String;
  size_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25[6];
  __int128 __p;
  uint64_t v27;
  unsigned int v28;

  v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3)
    v9 = "air.primitive_data";
  else
    v9 = "air.vertex_data";
  if (isStringMDNode(v8, v9))
  {
    v28 = 0;
  }
  else
  {
    v10 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (a3)
      v11 = "air.mesh_primitive_data";
    else
      v11 = "air.mesh_vertex_data";
    v12 = 0;
    v28 = 0;
    if (!isStringMDNode(v10, v11))
      return v12;
  }
  v25[0] = 1;
  if (!parseMDInt(0, a2, v25, &v28))
    return 0;
  v13 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (!v13 || *(_BYTE *)v13)
    return 0;
  llvm::MDString::getString(v13);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 4576))
    return 1;
  v16 = *(llvm **)(*(_QWORD *)(a1 + 4568) + 8 * Key);
  v17 = *((_DWORD *)v16 + 2);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v16, (void *)(*(_QWORD *)v16 + 17));
  v18 = v17 & 0xF;
  v12 = !a3 && v18 != 3 || a3 == 1 && v18 == 3;
  if (v28 < 0xFFFFFFFA)
    v20 = ((a3 != 0) | (2 * v28)) + 6;
  else
    v20 = ~v28;
  GenericVarying::GenericVarying((uint64_t)v25, HIBYTE(v17) & 0x7F, BYTE2(v17), v18, BYTE1(v17), v20, a4);
  String = (void *)llvm::MDString::getString(v13);
  if (String)
  {
    std::string::basic_string[abi:nn180100](&v23, String, v22);
  }
  else
  {
    v23 = 0uLL;
    v24 = 0;
  }
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__p);
  __p = v23;
  v27 = v24;
  GenericVaryingAllocator::addVarying(a1 + 4696, (unint64_t)v25);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__p);
  return v12;
}

unsigned int *llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result[3])
  {
    v1 = result;
    v2 = result[2];
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)v1;
        result = *(unsigned int **)(*(_QWORD *)v1 + v3);
        if (result != (unsigned int *)-8 && result != 0)
          result = (unsigned int *)llvm::deallocate_buffer((llvm *)result, (void *)(*(_QWORD *)result + 17));
        *(_QWORD *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

void attribute_name(std::string *a1, std::string *this)
{
  std::string::size_type v4;
  int v5;
  std::string __str;
  size_t __idx;
  char v8;

  __idx = 0;
  v4 = std::string::find(this, "generated(", 0, 0xAuLL);
  if (v4 == -1)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a1, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      a1->__r_.__value_.__r.__words[2] = this->__r_.__value_.__r.__words[2];
    }
  }
  else
  {
    std::string::basic_string(&__str, this, v4 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
    v5 = std::stoi(&__str, &__idx, 10);
    std::string::basic_string(a1, &__str, __idx, v5, (std::allocator<char> *)&v8);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

uint64_t GenericVaryingAllocator::getTotalSharedComponentWords(GenericVaryingAllocator *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  int v5;

  v1 = 0;
  v2 = 0;
  do
  {
    if (v1 <= 5 && ((1 << v1) & 0x27) != 0)
    {
      v3 = (char *)this + 4 * v1;
      v4 = *((_DWORD *)v3 + 148);
      v5 = *((_DWORD *)v3 + 154);
      if (*((_BYTE *)this + 560))
        v2 = v4 + (_DWORD)v2 + ((v5 + 1) >> 1);
      else
        v2 = (v4 + v2 + v5);
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t GenericVaryingAllocator::getTotalAmplifiedComponentWords(GenericVaryingAllocator *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  int v5;

  v1 = 0;
  v2 = 0;
  do
  {
    if (v1 <= 5 && ((1 << v1) & 0x27) != 0)
    {
      v3 = (char *)this + 4 * v1;
      v4 = *((_DWORD *)v3 + 160);
      v5 = *((_DWORD *)v3 + 166);
      if (*((_BYTE *)this + 560))
        v2 = v4 + (_DWORD)v2 + ((v5 + 1) >> 1);
      else
        v2 = (v4 + v2 + v5);
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t llvm::IRBuilderBase::CreateCondBr(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CAA2C108](v8, a3, a4, a2, 0);
  v11 = 257;
  return llvm::IRBuilderBase::Insert<llvm::Instruction>(a1, v8, (uint64_t)v10);
}

uint64_t llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  uint64_t Not;
  BOOL v6;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    Not = (*(uint64_t (**)(_QWORD, llvm::Value *))(**((_QWORD **)this + 9) + 208))(*((_QWORD *)this + 9), a2);
    if (Not)
      v6 = *(unsigned __int8 *)(Not + 16) >= 0x1Cu;
    else
      v6 = 0;
    if (v6)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Not, (uint64_t)a3);
  }
  else
  {
    Not = llvm::BinaryOperator::CreateNot();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Not, (uint64_t)a3);
  }
  return Not;
}

uint64_t AGCLLVMUserMeshShader::buildWriteVaryings(AGCLLVMUserObjectShaderBase *a1, llvm::Type **a2, llvm::Value *a3, uint64_t a4, int a5, unsigned int *a6, uint64_t a7)
{
  llvm::Value *v13;
  uint64_t v14;
  uint64_t VertexAmpCount;
  uint64_t v16;
  uint64_t Cast;
  llvm::IRBuilderBase *v18;
  llvm::Type *v19;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  char *v22;
  char *v23;
  llvm::Type *v24;
  llvm::User *PHI;
  llvm::Value *v26;
  _QWORD *v27;
  llvm::IRBuilderBase *v28;
  llvm::Value *v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *Add;
  llvm::IRBuilderBase *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::IRBuilderBase *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Value *v49;
  char *v50;
  llvm::Type *v51;
  llvm::IRBuilderBase *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v56;
  llvm::Type *v57;
  llvm::Value *v58;
  char *v59;
  llvm::Type *v60;
  uint64_t v61;
  int v62;
  llvm::Value *v63;
  int i;
  llvm::IRBuilderBase *v65;
  llvm::Value *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  llvm::Type *v71;
  llvm::Value *v72;
  llvm::IRBuilderBase *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  uint64_t *v76;
  uint64_t ICmp;
  llvm::BasicBlock *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  _QWORD *v83;
  llvm::Value *PointerCast;
  llvm::Value *v85;
  unsigned int *v86;
  llvm::Value *v87;
  __int128 v89;
  uint64_t v90;
  int v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  _QWORD v96[4];
  __int16 v97;

  v85 = (llvm::Value *)llvm::ConstantInt::get();
  if (a5)
  {
    v14 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
    VertexAmpCount = AGCLLVMUserObjectShaderBase::getVertexAmpCount(a1, v13);
    v16 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 224);
    v97 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(v14, 38, VertexAmpCount, v16, (uint64_t)v96);
  }
  else
  {
    Cast = llvm::ConstantInt::get();
  }
  v80 = Cast;
  v18 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v19 = (llvm::Type *)*((_QWORD *)a1 + 540);
  v97 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v18, a2, v19, (const llvm::Twine *)v96);
  v20 = *(llvm::BasicBlock **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88);
  v96[0] = "loop";
  v97 = 259;
  v21 = (llvm::BasicBlock *)operator new();
  v81 = a4;
  llvm::BasicBlock::BasicBlock();
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v21);
  v22 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v79 = v21;
  *((_QWORD *)v22 + 11) = v21;
  *((_QWORD *)v22 + 12) = (char *)v21 + 40;
  v23 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v24 = (llvm::Type *)*((_QWORD *)v23 + 28);
  v97 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v23 + 40), v24, 2, (const llvm::Twine *)v96);
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = PHI;
  llvm::PHINode::addIncoming(PHI, v26, v20);
  if (a7)
  {
    v27 = (_QWORD *)((char *)a1 + 192);
    v82 = &a6[a7];
    v83 = (_QWORD *)((char *)a1 + 5424);
    do
    {
      v28 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v29 = (llvm::Value *)llvm::ConstantInt::get();
      v30 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      v32 = AGCLLVMUserObjectShaderBase::getVertexAmpCount(a1, v31);
      v33 = *(_QWORD *)((char *)v27 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
      v97 = 257;
      v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v30, 38, v32, v33, (uint64_t)v96);
      v95 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v28, v29, v34, (const llvm::Twine *)v94);
      v36 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v97 = 257;
      v38 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v36, v37, v87, (const llvm::Twine *)v96);
      v95 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v36, Mul, v38, (const llvm::Twine *)v94);
      v40 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v97 = 257;
      v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v40, Add, v41, (const llvm::Twine *)v96);
      v43 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v44 = (llvm::Value *)llvm::ConstantInt::get();
      v97 = 257;
      v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v43, v42, v44, (const llvm::Twine *)v96);
      v46 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v47 = v83[3 * *a6];
      v48 = *(_QWORD *)((char *)v27 + v46 + 32);
      v97 = 257;
      v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v46 + 40, 38, v47, v48, (uint64_t)v96);
      v50 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v51 = (llvm::Type *)*((_QWORD *)v50 + 27);
      v52 = (llvm::IRBuilderBase *)(v50 + 40);
      v97 = 257;
      v53 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(v50 + 40), v87, v85, (const llvm::Twine *)v96);
      v95 = 257;
      v54 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v52, v53, v49, (const llvm::Twine *)v94);
      v93 = 257;
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v52, v51, PointerCast, v54, (const llvm::Twine *)v92);
      v56 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v57 = (llvm::Type *)*((_QWORD *)a1 + 542);
      v97 = 257;
      v58 = llvm::IRBuilderBase::CreatePointerCast(v56, GEP, v57, (const llvm::Twine *)v96);
      v59 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v60 = (llvm::Type *)*((_QWORD *)v59 + 29);
      v97 = 257;
      v61 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v59 + 40), v60, v58, a3, (const llvm::Twine *)v96);
      v86 = a6;
      v62 = v83[3 * *a6 + 2];
      if (v62)
      {
        v63 = (llvm::Value *)v61;
        for (i = 0; i != v62; ++i)
        {
          v65 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
          v66 = (llvm::Value *)llvm::ConstantInt::get();
          v97 = 257;
          v67 = llvm::IRBuilderBase::CreateAdd(v65, v66, v45, (const llvm::Twine *)v96);
          v68 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v69 = *((_QWORD *)v68 + 50);
          v89 = *(_OWORD *)(v68 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 40));
          v91 = *((_DWORD *)v68 + 34);
          (*(void (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, llvm::Value *))(*(_QWORD *)v69 + 368))(v69, &v89, a3, v67, v63);
          if (v90)
            llvm::MetadataTracking::untrack();
          v70 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v71 = (llvm::Type *)*((_QWORD *)v70 + 29);
          v72 = (llvm::Value *)llvm::ConstantInt::get();
          v97 = 257;
          v63 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v70 + 40), v71, v63, v72, (const llvm::Twine *)v96);
        }
      }
      a6 = v86 + 1;
    }
    while (v86 + 1 != v82);
  }
  v73 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v74 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v73, v87, v74, (const llvm::Twine *)v96);
  llvm::PHINode::addIncoming(v87, v75, v79);
  v76 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v97 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(v76, 36, (llvm::CmpInst **)v75, v80, (uint64_t)v96);
  return llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), ICmp, (uint64_t)v79, v81);
}

llvm::User *llvm::IRBuilderBase::CreatePHI(llvm::IRBuilderBase *this, llvm::Type *a2, int a3, const llvm::Twine *a4)
{
  llvm::User *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v7 = (llvm::User *)llvm::User::operator new((llvm::User *)0x40);
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(v7);
  if (llvm::FPMathOperator::classof((uint64_t)v7))
    llvm::IRBuilderBase::setFPAttrs((uint64_t)this, (uint64_t)v7);
  (*(void (**)(_QWORD, llvm::User *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v7, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
  v8 = *((unsigned int *)this + 2);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD **)this;
    v10 = &v9[2 * v8];
    do
    {
      llvm::Instruction::setMetadata();
      v9 += 2;
    }
    while (v9 != v10);
  }
  return v7;
}

void AGCLLVMUserMeshShaderAnalysis::AGCLLVMUserMeshShaderAnalysis(AGCLLVMObject *a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, char a5)
{
  uint64_t v8;
  char v9;

  AGCLLVMObject::AGCLLVMObject(a1, a2, *a3);
  *(_QWORD *)v8 = &off_1E7E68350;
  *(_QWORD *)(v8 + 32) = &unk_1E7E68440;
  v9 = *(_BYTE *)(*(_QWORD *)(v8 + 400) + 1762);
  *(_QWORD *)(v8 + 3328) = 0;
  *(_QWORD *)(v8 + 3336) = 0;
  *(_QWORD *)(v8 + 3320) = 0;
  *(_QWORD *)(v8 + 3344) = v8 + 3360;
  *(_QWORD *)(v8 + 3352) = 0x800000000;
  *(_QWORD *)(v8 + 3872) = 0x1FFFFFFFFLL;
  *(_BYTE *)(v8 + 3880) = v9;
  *(_DWORD *)(v8 + 4012) = 0;
  *(_OWORD *)(v8 + 3994) = 0u;
  *(_OWORD *)(v8 + 3984) = 0u;
  *(_OWORD *)(v8 + 3968) = 0u;
  *(_OWORD *)(v8 + 3952) = 0u;
  *(_OWORD *)(v8 + 3936) = 0u;
  *(_OWORD *)(v8 + 3920) = 0u;
  *(_OWORD *)(v8 + 3904) = 0u;
  *(_OWORD *)(v8 + 3888) = 0u;
  *(_BYTE *)(v8 + 4016) = 1;
  *(_BYTE *)(v8 + 4032) = a5;
  *(_QWORD *)(v8 + 4024) = a3;
  *(_BYTE *)(v8 + 4033) = (*(_DWORD *)(a4 + 16) & 0xE) != 0;
}

void AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v1;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
}

{
  uint64_t v1;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  uint64_t v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1E7E694C0;
  *((_QWORD *)this + 847) = &unk_1E7E697F8;
  *((_QWORD *)this + 851) = &unk_1E7E698E8;
  v2 = *((_QWORD *)this + 846);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 6752));
  v4 = (char *)*((_QWORD *)this + 676);
  if (v4 != (char *)this + 5424)
    free(v4);
  v10 = (void **)((char *)this + 5272);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v10);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 591);
  v5 = (void *)*((_QWORD *)this + 588);
  if (v5)
  {
    *((_QWORD *)this + 589) = v5;
    operator delete(v5);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4576);
  v6 = *((_QWORD *)this + 569);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 4536));
  *(_QWORD *)this = off_1E7E69968;
  *((_QWORD *)this + 847) = &off_1E7E69C60;
  *((_QWORD *)this + 851) = &off_1E7E69D50;
  v7 = *((_QWORD *)this + 564);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 4496));
  v8 = *((_QWORD *)this + 561);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 4472));
  std::__hash_table<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>>>::~__hash_table((uint64_t)this + 4432);
  v9 = *((_QWORD *)this + 553);
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 4408));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E69900);
}

uint64_t AGCLLVMUserMeshShaderSW::initCompile(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v2;
  BOOL *v3;
  std::string *v4;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;
  std::string v17;
  void *v18[2];
  std::string::size_type v19;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;
  void *v23;
  char v24;
  __int128 v25;
  std::string::size_type v26;

  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((_QWORD *)this + 565) + 20), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1092);
  if ((_DWORD)v2)
  {
    v3 = (BOOL *)this + 4384;
    AGCLLVMUserObjectShaderBase::initCompile(this);
    v4 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&v23, "air.get_global_size");
    v5 = std::string::append(v4, ".i32");
    v6 = v5->__r_.__value_.__r.__words[2];
    v25 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v26 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (llvm::Module::getFunction())
    {
      *v3 = 1;
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v20, "air.get_global_size");
      v7 = std::string::append(&v20, ".i16");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)v21 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v22 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (llvm::Module::getFunction())
      {
        *v3 = 1;
      }
      else
      {
        std::string::basic_string[abi:nn180100]<0>(&v17, "air.get_num_groups");
        v9 = std::string::append(&v17, ".i32");
        v10 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v18 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (llvm::Module::getFunction())
        {
          *v3 = 1;
        }
        else
        {
          std::string::basic_string[abi:nn180100]<0>(&v14, "air.get_num_groups");
          v11 = std::string::append(&v14, ".i16");
          v12 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v16 = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          *v3 = llvm::Module::getFunction() != 0;
          if (SHIBYTE(v16) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v14.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v19) < 0)
          operator delete(v18[0]);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (v24 < 0)
      operator delete(v23);
    std::string::basic_string[abi:nn180100]<0>(&v25, "air.object_threadgroup_position_in_grid");
    *((_BYTE *)this + 4385) = llvm::Module::getFunction() != 0;
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
  return v2;
}

uint64_t AGCLLVMUserMeshShaderSW::addWrapperPrefix(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t GridProperties;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  char *v7;
  llvm::CmpInst **v8;
  uint64_t *v9;
  uint64_t ICmp;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 1, 1);
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  if ((*(_BYTE *)(*((_QWORD *)this + 565) + 17) & 1) == 0)
  {
    v3 = operator new();
    llvm::BasicBlock::BasicBlock();
    v22[0] = "bounds_check_done";
    v23 = 259;
    v4 = operator new();
    llvm::BasicBlock::BasicBlock();
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    LODWORD(v24[0]) = 0;
    v23 = 257;
    Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v5, GridProperties, (uint64_t)v24, 1, (uint64_t)v22);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    LODWORD(v24[0]) = 4;
    v23 = 257;
    v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)v24, 1, (uint64_t)v22);
    v9 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v23 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v9, 37, v8, Value, (uint64_t)v22);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v3, v4);
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v11 + 11) = v3;
    *((_QWORD *)v11 + 12) = v3 + 40;
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserMeshShaderSW *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                 + 40));
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v12 + 11) = v4;
    *((_QWORD *)v12 + 12) = v4 + 40;
  }
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  LODWORD(v24[0]) = 0;
  v23 = 257;
  v14 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v13, GridProperties, (uint64_t)v24, 1, (uint64_t)v22);
  v24[0] = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 3, 0);
  v24[1] = v14;
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v16 = (uint64_t)(v15 + 32);
  v17 = *((_QWORD *)v15 + 22);
  v18 = llvm::PointerType::get();
  v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v16, (uint64_t)"air.gpe.emit_nop_token", 22, v17, v18, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v23 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(_QWORD *)(v19 + 24), v19, (uint64_t)v24, 2, (uint64_t)v22);
  AGCLLVMTargetBuilder::CreateBarrier((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32));
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::wrapperPrefixData(AGCLLVMUserMeshShaderSW *this)
{
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 816) + 52))
    return 0;
  llvm::ConstantInt::get();
  return llvm::ConstantVector::getSplat();
}

uint64_t AGCLLVMUserMeshShaderSW::setupShaderInputs(AGCLLVMUserMeshShaderSW *this)
{
  AGCLLVMUserMeshShaderSW *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  llvm::Instruction *v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unsigned int *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v41;
  unint64_t v42;
  llvm::Type **v43;
  llvm::Value *VertexAmpId;
  BOOL v45;
  unint64_t v46;
  unint64_t i;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int Key;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _BYTE *v69;
  llvm *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *j;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  size_t **k;
  uint64_t v96;
  size_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  size_t *v105;
  BOOL v106;
  uint64_t v107;
  uint64_t m;
  uint64_t v110;
  const std::string::value_type *v111;
  const std::string::value_type *v112;
  std::string::size_type v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  int v117;
  int v118;
  BOOL v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t n;
  int *v127;
  BOOL v128;
  int v129;
  int v130;
  uint64_t v131;
  char *v132;
  uint64_t ii;
  int v134;
  char *v135;
  unsigned int *v136;
  BOOL v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  int v145;
  int *v146;
  BOOL v147;
  int v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t jj;
  int v153;
  char *v154;
  unsigned int *v155;
  BOOL v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  char *v162;
  char v163;
  uint64_t v164;
  int v165;
  char v166;
  BOOL v167;
  unsigned int *v168;
  unsigned int v169;
  int v170;
  uint64_t v171;
  char *v172;
  char v173;
  uint64_t v174;
  int v175;
  char v176;
  BOOL v177;
  unsigned int *v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  char *v182;
  int v183;
  unsigned int v184;
  uint32x2_t v185;
  unsigned int v186;
  unsigned int v187;
  uint32x2_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t *Cast;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  int v209;
  char v211;
  _DWORD *v212;
  _DWORD *v213;
  _DWORD *v214;
  _DWORD *v215;
  llvm::ValueHandleBase *v216;
  int32x2_t *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t *v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  _DWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int *v236;
  char *v237;
  unsigned int *v238;
  unsigned int *v239;
  unsigned int *v240;
  GenericVaryingAllocator *v241;
  std::string v242;
  _BYTE __dst[20];
  _BYTE v244[36];
  BOOL v245;
  __int16 v246;
  int v247;
  _QWORD v248[2];
  char v249;
  _QWORD v250[3];
  char v251;
  char *v252;
  const char *v253;
  unint64_t v254;
  char v255;
  char *v256;
  const char *v257;
  unint64_t v258;
  char v259;
  char *v260;
  const char *v261;
  unint64_t v262;
  char v263;
  char *v264;
  const char *v265;
  unint64_t v266;
  char v267;
  char *v268;
  const char *v269;
  unint64_t v270;
  char v271;
  char *v272;
  uint64_t v273;

  v1 = this;
  v273 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 22);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v226 = v4;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    v6 = *((_QWORD *)v1 + 22);
    v5 = *(uint64_t **)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)v1 + 22));
    v2 = v6;
  }
  else
  {
    v5 = *(uint64_t **)(v2 + 88);
  }
  v229 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v5 == (uint64_t *)v229)
  {
LABEL_358:
    AGCLLVMUserObjectShaderBase::setupShaderInputs(v1);
    return 1;
  }
  v217 = (int32x2_t *)((char *)v1 + 5324);
  v7 = (char *)v1 + 4405;
  v213 = (_DWORD *)((char *)v1 + 4608);
  v212 = (_DWORD *)((char *)v1 + 4612);
  v234 = (uint64_t)v1 + 4676;
  v233 = (uint64_t)v1 + 4684;
  v232 = (_DWORD *)((char *)v1 + 4692);
  v228 = (_DWORD *)((char *)v1 + 4632);
  v224 = (char *)v1 + 4649;
  v223 = (char *)v1 + 4646;
  v222 = (char *)v1 + 4640;
  v221 = (char *)v1 + 4642;
  v220 = (char *)v1 + 4566;
  v219 = (char *)v1 + 4564;
  v8 = (unsigned int *)((char *)v1 + 4576);
  v241 = (AGCLLVMUserMeshShaderSW *)((char *)v1 + 4704);
  v218 = (char *)v1 + 368;
  v9 = (char *)v1 + 5504;
  v239 = (unsigned int *)((char *)v1 + 5332);
  v236 = (unsigned int *)((char *)v1 + 5308);
  v237 = (char *)v1 + 8;
  v238 = (unsigned int *)((char *)v1 + 5380);
  v235 = (unsigned int *)((char *)v1 + 5356);
  v225 = (char *)v1 + 4668;
  v216 = (AGCLLVMUserMeshShaderSW *)((char *)v1 + 4536);
  v215 = (_DWORD *)((char *)v1 + 5856);
  v214 = (_DWORD *)((char *)v1 + 6528);
  v240 = (unsigned int *)v1;
  do
  {
    v10 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * *((unsigned int *)v5 + 8));
    if (v5[1])
      v11 = v10 == 0;
    else
      v11 = 1;
    if (v11)
    {
      v12 = 1;
      goto LABEL_338;
    }
    v13 = *(_QWORD *)(v226 + 40);
    if (v13)
      v14 = (llvm::Instruction *)(v13 - 24);
    else
      v14 = 0;
    AGCLLVMBuilder::SetInsertPoint((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32, v14, *((_QWORD *)v1 + 6));
    v15 = isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.mesh");
    v16 = v10 - 8 * *(unsigned int *)(v10 + 8);
    if (!v15)
    {
      v12 = 1;
      if (isStringMDNode(*(llvm::MDString **)(v16 + 8), "air.amplification_id"))
      {
        v43 = (llvm::Type **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32);
        VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(v1);
        AGCLLVMBuilder::truncateToSmall(v43, VertexAmpId, (llvm::Type *)*v5);
        llvm::Value::replaceAllUsesWith();
        v7[160] = 1;
      }
      goto LABEL_338;
    }
    v227 = v5;
    v17 = *(unsigned __int8 **)(v16 + 16);
    if (!v17)
      goto LABEL_34;
    v18 = *v17;
    v19 = v18 > 0x22 || ((0x7FFFFFFF0uLL >> v18) & 1) == 0;
    if (v19 || *((_DWORD *)v17 + 2) != 6 || !isStringMDNode(*((llvm::MDString **)v17 - 6), "air.mesh_type_info"))
      goto LABEL_34;
    v20 = &v17[-8 * *((unsigned int *)v17 + 2)];
    v21 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    if (!v21)
      goto LABEL_347;
    v22 = *v21;
    if (v22 <= 0x22 && ((0x7FFFFFFF0uLL >> v22) & 1) != 0)
    {
      v24 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
      if (v24)
      {
        v206 = *v24;
        if (v206 > 0x22 || ((0x7FFFFFFF0uLL >> v206) & 1) == 0)
        {
LABEL_347:
          v24 = 0;
          goto LABEL_35;
        }
        LODWORD(v248[0]) = 3;
        if (parseMDInt(0, (uint64_t)v17, (unsigned int *)v248, v213))
        {
          LODWORD(v248[0]) = 4;
          if (parseMDInt(0, (uint64_t)v17, (unsigned int *)v248, v212))
          {
            if (isStringMDNode(*(llvm::MDString **)&v17[-8 * *((unsigned int *)v17 + 2) + 40], "air.line"))
            {
              v209 = 1;
LABEL_356:
              *((_DWORD *)v1 + 1156) = v209;
              v25 = 1;
              goto LABEL_36;
            }
            if (isStringMDNode(*(llvm::MDString **)&v17[-8 * *((unsigned int *)v17 + 2) + 40], "air.point"))
            {
              v209 = 0;
              goto LABEL_356;
            }
            if (isStringMDNode(*(llvm::MDString **)&v17[-8 * *((unsigned int *)v17 + 2) + 40], "air.triangle"))
            {
              v209 = 2;
              goto LABEL_356;
            }
          }
        }
      }
    }
    else
    {
LABEL_34:
      v24 = 0;
      v21 = 0;
    }
LABEL_35:
    v25 = 0;
LABEL_36:
    *((_DWORD *)v1 + 1154) = (*((_DWORD *)v1 + 1152) + 3) & 0xFFFFFFFC;
    v26 = *((_DWORD *)v1 + 1156);
    if (v26 == 1)
      v27 = 2;
    else
      v27 = 1;
    if (v26 == 2)
      v28 = 3;
    else
      v28 = v27;
    *((_DWORD *)v1 + 1155) = (v28 * *((_DWORD *)v1 + 1153) + 3) & 0xFFFFFFFC;
    if (v25)
    {
      v29 = *((unsigned int *)v21 + 2);
      if ((_DWORD)v29)
      {
        v30 = 0;
        while (1)
        {
          v31 = *(unsigned __int8 **)&v21[8 * v30 + -8 * v29];
          if (!v31)
            break;
          v32 = *v31;
          if (v32 > 0x22 || ((0x7FFFFFFF0uLL >> v32) & 1) == 0)
            break;
          if (*v7)
          {
            v34 = v8;
            v35 = v21;
            v36 = v24;
            v37 = 1;
            while (1)
            {
              v38 = *((unsigned int *)v31 + 2);
              v39 = v37 >= v38;
              if (v37 >= v38)
                break;
              if (isStringMDNode(*(llvm::MDString **)&v31[8 * v37++ + -8 * v38], "air.shared"))
              {
                v39 = 0;
                break;
              }
            }
            v24 = v36;
            v21 = v35;
            v8 = v34;
          }
          else
          {
            v39 = 0;
          }
          AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v31, 0, v234, v233, v232);
          if ((AGCLLVMUserMeshShaderSW::addGenericVarying((uint64_t)v1, (uint64_t)v31, 0, v39) & 1) == 0)
          {
            if (isStringMDNode(*(llvm::MDString **)&v31[-8 * *((unsigned int *)v31 + 2)], "air.position"))
            {
              v7[223] = 1;
              v7[224] = v39;
              v41 = *((unsigned int *)v31 + 2);
              if (v41 >= 2)
              {
                v42 = 1;
                while (!isStringMDNode(*(llvm::MDString **)&v31[8 * v42 + -8 * v41], "air.invariant"))
                {
                  ++v42;
                  v41 = *((unsigned int *)v31 + 2);
                  if (v42 >= v41)
                    goto LABEL_72;
                }
                v7[123] = 1;
              }
            }
            else if (isStringMDNode(*(llvm::MDString **)&v31[-8 * *((unsigned int *)v31 + 2)], "air.point_size"))
            {
              v7[232] = 1;
              v7[233] = v39;
            }
            else
            {
              if (!isStringMDNode(*(llvm::MDString **)&v31[-8 * *((unsigned int *)v31 + 2)], "air.clip_distance"))
                break;
              *v228 = 1;
              v7[231] = v39;
              LODWORD(v248[0]) = 1;
              if (*((_DWORD *)v31 + 2) >= 2u)
              {
                do
                {
                  if ((parseMDInt("air.clip_distance_array_size", (uint64_t)v31, (unsigned int *)v248, v228) & 1) != 0)
                    break;
                  ++LODWORD(v248[0]);
                }
                while (LODWORD(v248[0]) < *((_DWORD *)v31 + 2));
              }
            }
          }
LABEL_72:
          ++v30;
          v29 = *((unsigned int *)v21 + 2);
          if (v30 >= v29)
          {
            v25 = 1;
            goto LABEL_78;
          }
        }
        v25 = 0;
      }
      else
      {
        v25 = 1;
      }
    }
LABEL_78:
    if (v7[224])
      v45 = 1;
    else
      v45 = v7[231] != 0;
    v7[231] = v45;
    v7[224] = v45;
    if (v25)
    {
      v46 = *((unsigned int *)v24 + 2);
      if ((_DWORD)v46)
      {
        for (i = 0; i < v46; ++i)
        {
          v48 = *(unsigned __int8 **)&v24[8 * i + -8 * v46];
          if (!v48)
            goto LABEL_108;
          v49 = *v48;
          if (v49 > 0x22 || ((0x7FFFFFFF0uLL >> v49) & 1) == 0)
            goto LABEL_108;
          if (*v7)
          {
            v51 = 1;
            while (1)
            {
              v52 = *((unsigned int *)v48 + 2);
              v53 = v51 >= v52;
              if (v51 >= v52)
                break;
              if (isStringMDNode(*(llvm::MDString **)&v48[8 * v51++ + -8 * v52], "air.shared"))
              {
                v53 = 0;
                break;
              }
            }
          }
          else
          {
            v53 = 0;
          }
          AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v48, 1u, v234, v233, v232);
          if ((AGCLLVMUserMeshShaderSW::addGenericVarying((uint64_t)v1, (uint64_t)v48, 1, v53) & 1) == 0)
          {
            if (isStringMDNode(*(llvm::MDString **)&v48[-8 * *((unsigned int *)v48 + 2)], "air.render_target_array_index"))
            {
              v7[234] = 1;
LABEL_103:
              v7[240] |= v53;
              goto LABEL_104;
            }
            if (isStringMDNode(*(llvm::MDString **)&v48[-8 * *((unsigned int *)v48 + 2)], "air.viewport_array_index"))
            {
              v7[236] = 1;
              goto LABEL_103;
            }
            if (isStringMDNode(*(llvm::MDString **)&v48[-8 * *((unsigned int *)v48 + 2)], "air.primitive_culled"))
            {
              v7[238] = 1;
              goto LABEL_103;
            }
            if (!isStringMDNode(*(llvm::MDString **)&v48[-8 * *((unsigned int *)v48 + 2)], "air.primitive_id"))
              goto LABEL_108;
            v7[242] = 1;
            v7[243] = v53;
          }
LABEL_104:
          v46 = *((unsigned int *)v24 + 2);
        }
      }
      v230 = 1;
    }
    else
    {
LABEL_108:
      v230 = 0;
    }
    v55 = 0;
    v255 = v7[243];
    v259 = v7[240];
    v263 = v259;
    v267 = *v7;
    v248[0] = "agc.per_prim.primitive_address";
    v248[1] = 0xFFFFFFFE00000000;
    v249 = 0;
    v250[0] = v224;
    v250[1] = "agc.per_prim.primitive_address_2";
    v250[2] = 0xFFFFFFFD00000000;
    v251 = 0;
    v252 = v224;
    v253 = "agc.per_prim.primitive_id";
    v254 = 0xFFFFFFFF00000001;
    v256 = v223;
    v257 = "air.render_target_array_index";
    v258 = 0xFFFFFFFB00000001;
    v260 = v222;
    v261 = "air.viewport_array_index";
    v262 = 0xFFFFFFFC00000001;
    v264 = v221;
    v265 = "air.amplification_id";
    v266 = 0xFFFFFFFA00000000;
    v268 = v220;
    v269 = "air.amplification_count";
    v270 = 0xFFFFFFF900000001;
    v271 = 0;
    v272 = v219;
    do
    {
      v56 = v9;
      v57 = v248[v55];
      v58 = v248[v55 + 1];
      v59 = HIDWORD(v248[v55 + 1]);
      v60 = LOBYTE(v248[v55 + 2]);
      if (v57)
        strlen((const char *)v248[v55]);
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)v240[1146])
      {
        v68 = 0;
      }
      else
      {
        v69 = v7;
        v70 = *(llvm **)(*(_QWORD *)v8 + 8 * Key);
        v71 = v8;
        v72 = *((_DWORD *)v70 + 2);
        v73 = v71;
        llvm::StringMapImpl::RemoveKey();
        llvm::deallocate_buffer(v70, (void *)(*(_QWORD *)v70 + 17));
        if (v59 >= 0xFFFFFFF9)
          v74 = ~v59;
        else
          v74 = ((v58 != 0) | (2 * v59)) + 7;
        GenericVarying::GenericVarying((uint64_t)__dst, HIBYTE(v72) & 0x7F, BYTE2(v72), v72 & 0xF, BYTE1(v72), v74, v60 != 0);
        MEMORY[0x1CAA2D494](&v244[4], v57);
        GenericVaryingAllocator::addVarying((uint64_t)v241, (unint64_t)__dst);
        if ((v244[27] & 0x80000000) != 0)
          operator delete(*(void **)&v244[4]);
        v68 = 1;
        v8 = v73;
        v7 = v69;
      }
      v9 = v56;
      *(_BYTE *)v250[v55] = v68;
      v55 += 4;
    }
    while (v55 != 28);
    if (v7[234])
    {
      v75 = 1;
      v1 = (AGCLLVMUserMeshShaderSW *)v240;
      v76 = v230;
    }
    else
    {
      v1 = (AGCLLVMUserMeshShaderSW *)v240;
      v76 = v230;
      if (v7[236])
        v75 = 1;
      else
        v75 = v7[238] != 0;
    }
    v7[239] = v75;
    v7[162] = v75;
    if (v7[163])
    {
      v77 = *((_QWORD *)v1 + 591);
      v78 = *((unsigned int *)v1 + 1184);
      if (v78 >= 2)
      {
        v79 = v77 + 64;
        v80 = (v78 << 6) - 64;
        do
        {
          if (*(_DWORD *)(v77 + 16) < *(_DWORD *)(v79 + 16))
            v77 = v79;
          v79 += 64;
          v80 -= 64;
        }
        while (v80);
      }
      v81 = *((unsigned int *)v1 + 1146);
      if ((_DWORD)v81)
      {
        for (j = (uint64_t *)*((_QWORD *)v1 + 572); !*j || *j == -8; ++j)
          ;
      }
      else
      {
        j = (uint64_t *)*((_QWORD *)v1 + 572);
      }
      v84 = *((_QWORD *)v1 + 572) + 8 * v81;
      if (j != (uint64_t *)v84)
      {
        v85 = *(_DWORD *)(v77 + 16);
        v86 = *j;
        do
        {
          v87 = *(_DWORD *)(v86 + 8);
          *(_DWORD *)__dst = HIBYTE(v87) & 0x7F;
          *(_DWORD *)&__dst[4] = BYTE2(v87);
          ++v85;
          *(_DWORD *)&__dst[8] = v87 & 0xF;
          *(_DWORD *)&__dst[12] = BYTE1(v87);
          *(_DWORD *)&__dst[16] = v85;
          memset(&v244[4], 0, 32);
          v245 = BYTE2(v87) == 1;
          v246 = 0;
          switch(v87 & 0xF)
          {
            case 0u:
              if (BYTE2(v87) == 1)
                v88 = 5;
              else
                v88 = 1;
              goto LABEL_160;
            case 1u:
              v89 = BYTE2(v87) == 1;
              v88 = 2;
              v90 = 6;
              goto LABEL_151;
            case 2u:
              v89 = BYTE2(v87) == 1;
              v88 = 3;
              v90 = 7;
LABEL_151:
              if (v89)
                v88 = v90;
              goto LABEL_160;
            case 3u:
              if (BYTE2(v87) == 1)
                v88 = 19;
              else
                v88 = 18;
              goto LABEL_160;
            case 5u:
              if (BYTE2(v87) == 1)
                v88 = 8;
              else
                v88 = 4;
LABEL_160:
              v247 = v88;
              break;
            default:
              break;
          }
          MEMORY[0x1CAA2D494](&v244[4], v86 + 16);
          GenericVaryingAllocator::addVarying((uint64_t)v241, (unint64_t)__dst);
          if ((v244[27] & 0x80000000) != 0)
            operator delete(*(void **)&v244[4]);
          do
          {
            v91 = j[1];
            ++j;
            v86 = v91;
            if (v91)
              v92 = v86 == -8;
            else
              v92 = 1;
          }
          while (v92);
        }
        while (j != (uint64_t *)v84);
      }
      llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(v8);
      v76 = v230;
    }
    if (*((_DWORD *)v1 + 1147))
    {
      printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching mesh shader output type(s) or not written by mesh shader: ", v62, v63, v64, v65, v66, v67, v211);
      v93 = *((unsigned int *)v1 + 1146);
      if ((_DWORD)v93)
      {
        for (k = (size_t **)*((_QWORD *)v1 + 572); !*k || *k + 1 == 0; ++k)
          ;
      }
      else
      {
        k = (size_t **)*((_QWORD *)v1 + 572);
      }
      v96 = *((_QWORD *)v1 + 572) + 8 * v93;
      if (k != (size_t **)v96)
      {
        v97 = *k;
        do
        {
          std::string::basic_string[abi:nn180100](__dst, v97 + 2, *v97);
          if (v244[3] >= 0)
            v104 = __dst;
          else
            LOBYTE(v104) = __dst[0];
          printMessage((char **)&AGCPrinter, "\t%s", v98, v99, v100, v101, v102, v103, (char)v104);
          if ((v244[3] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          do
          {
            v105 = k[1];
            ++k;
            v97 = v105;
            if (v105)
              v106 = v97 + 1 == 0;
            else
              v106 = 1;
          }
          while (v106);
        }
        while (k != (size_t **)v96);
      }
      v107 = *((unsigned int *)v1 + 1146);
      if ((_DWORD)v107)
      {
        for (m = *((_QWORD *)v1 + 572); !*(_QWORD *)m || *(_QWORD *)m == -8; m += 8)
          ;
      }
      else
      {
        m = *((_QWORD *)v1 + 572);
      }
      v110 = *((_QWORD *)v1 + 572) + 8 * v107;
      if (m != v110)
      {
        v111 = (const std::string::value_type *)&unk_1C3E4D9BB;
        do
        {
          std::string::append((std::string *)&v237[*(_QWORD *)(*(_QWORD *)v1 - 24)], v111);
          std::string::basic_string[abi:nn180100](&v242, (void *)(*(_QWORD *)m + 16), **(_QWORD **)m);
          attribute_name((std::string *)__dst, &v242);
          if (v244[3] >= 0)
            v112 = __dst;
          else
            v112 = *(const std::string::value_type **)__dst;
          if (v244[3] >= 0)
            v113 = v244[3];
          else
            v113 = *(_QWORD *)&__dst[8];
          std::string::append((std::string *)&v237[*(_QWORD *)(*(_QWORD *)v1 - 24)], v112, v113);
          if ((v244[3] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v242.__r_.__value_.__l.__data_);
          do
          {
            v115 = *(_QWORD *)(m + 8);
            m += 8;
            v114 = v115;
            if (v115)
              v116 = v114 == -8;
            else
              v116 = 1;
          }
          while (v116);
          v111 = ",";
        }
        while (m != v110);
      }
      v76 = 0;
    }
    GenericVaryingAllocator::allocate(v241, *(const AGCLLVMTargetLowerer **)&v218[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32]);
    v231 = v76;
    if (v76)
    {
      bzero(v9, 0x4E0uLL);
      *(_QWORD *)&v244[16] = 0;
      *(_OWORD *)&__dst[4] = 0u;
      *(_OWORD *)v244 = 0u;
      v117 = *((_DWORD *)v1 + 1153);
      *(_DWORD *)__dst = 4 * v117;
      *(_WORD *)&__dst[4] = *(_WORD *)(v7 + 239);
      v118 = *((_DWORD *)v1 + 1154);
      *(_DWORD *)&__dst[8] = 23;
      *(_DWORD *)&__dst[12] = 16 * v118;
      v119 = 1;
      __dst[16] = 1;
      __dst[17] = v7[224];
      *(_DWORD *)&v244[4] = 4 * v118;
      v244[8] = v7[232];
      v244[9] = __dst[17];
      v120 = *((_DWORD *)v1 + 1158);
      *(_DWORD *)&v244[12] = 22;
      *(_QWORD *)&v244[16] = (4 * v118 * v120);
      *(_DWORD *)&v244[20] = v120 != 0;
      v244[21] = v7[231];
      *(_DWORD *)&v244[24] = 25;
      if (*v7)
      {
        AGCLLVMUserObjectShaderBase::getVertexAmpId(v1);
        v117 = *((_DWORD *)v1 + 1153);
        v119 = *v7 == 0;
      }
      v121 = *((_DWORD *)v1 + 1156);
      if (v121 == 1)
        v122 = 2;
      else
        v122 = 1;
      if (v121 == 2)
        v123 = 3;
      else
        v123 = v122;
      v124 = (v123 * v117 + 15) & 0xFFFFFFF0;
      *((_DWORD *)v1 + 1174) = v124;
      v125 = v124 + 16;
      if (!v119)
      {
        *((_DWORD *)v1 + 1374) = v125;
        v125 += (4 * *((_DWORD *)v1 + 1140) + 15) & 0xFFFFFFF0;
      }
      for (n = 0; n != 48; n += 12)
      {
        v127 = (int *)&__dst[n];
        if (__dst[n + 5])
          v128 = 1;
        else
          v128 = __dst[n + 4] == 0;
        if (!v128)
        {
          v129 = *v127;
          v130 = v127[2];
          if (v130 != 26)
          {
            v131 = llvm::ConstantInt::get();
            v132 = &v9[48 * v130];
            *(_QWORD *)v132 = v131;
            v132[12] = 0;
          }
          v125 += (v129 + 15) & 0xFFFFFFF0;
        }
      }
      for (ii = 0; ii != 96; ii += 16)
      {
        v134 = *((_DWORD *)v1 + 1154);
        v135 = (char *)v1 + 4 * *(unsigned int *)&byte_1C3DF0078[ii + 4];
        v136 = (unsigned int *)(v135 + 5320);
        if (byte_1C3DF0078[ii])
          v137 = v7[859] == 0;
        else
          v137 = 1;
        if (v137)
        {
          v138 = (unsigned int *)(v135 + 5296);
          if (byte_1C3DF0078[ii])
            v139 = v136;
          else
            v139 = v138;
          v140 = *v139;
        }
        else
        {
          v140 = (*v136 + 1) >> 1;
        }
        v141 = *(_DWORD *)&byte_1C3DF0078[ii + 8];
        if (v141 != 26)
        {
          v142 = llvm::ConstantInt::get();
          v143 = &v9[48 * v141];
          *(_QWORD *)v143 = v142;
          v143[12] = 0;
        }
        v125 += (4 * v134 * v140 + 15) & 0xFFFFFFF0;
      }
      v144 = 0;
      v145 = 0;
      *((_DWORD *)v1 + 1163) = v125;
      do
      {
        v146 = (int *)&__dst[v144];
        if (__dst[v144 + 5])
          v147 = __dst[v144 + 4] == 0;
        else
          v147 = 1;
        if (!v147)
        {
          v148 = *v146;
          v149 = v146[2];
          if (v149 != 26)
          {
            v150 = llvm::ConstantInt::get();
            v151 = &v9[48 * v149];
            *(_QWORD *)v151 = v150;
            v151[12] = 1;
          }
          v145 += (v148 + 15) & 0xFFFFFFF0;
        }
        v144 += 12;
      }
      while (v144 != 48);
      for (jj = 0; jj != 96; jj += 16)
      {
        v153 = *((_DWORD *)v1 + 1154);
        v154 = (char *)v1 + 4 * *(unsigned int *)&byte_1C3DF0078[jj + 4];
        v155 = (unsigned int *)(v154 + 5368);
        if (byte_1C3DF0078[jj])
          v156 = v7[859] == 0;
        else
          v156 = 1;
        if (v156)
        {
          v157 = (unsigned int *)(v154 + 5344);
          if (byte_1C3DF0078[jj])
            v158 = v155;
          else
            v158 = v157;
          v159 = *v158;
        }
        else
        {
          v159 = (*v155 + 1) >> 1;
        }
        v160 = *(_DWORD *)&byte_1C3DF0078[jj + 12];
        if (v160 != 26)
        {
          v161 = llvm::ConstantInt::get();
          v162 = &v9[48 * v160];
          *(_QWORD *)v162 = v161;
          v162[12] = 1;
        }
        v145 += (4 * v153 * v159 + 15) & 0xFFFFFFF0;
      }
      v163 = 0;
      v164 = 0;
      v165 = 0;
      *((_DWORD *)v1 + 1165) = v145;
      do
      {
        v166 = v163;
        if (byte_1C3DF00D8[16 * v164])
          v167 = v7[859] == 0;
        else
          v167 = 1;
        if (v167)
        {
          v168 = v239;
          if (!byte_1C3DF00D8[16 * v164])
            v168 = v236;
          v169 = *v168;
        }
        else
        {
          v169 = (*v239 + 1) >> 1;
        }
        v170 = *(_DWORD *)&byte_1C3DF00D8[16 * v164 + 8];
        if (v170 != 26)
        {
          v171 = llvm::ConstantInt::get();
          v172 = &v9[48 * v170];
          *(_QWORD *)v172 = v171;
          v172[12] = 0;
        }
        v165 += 4 * v169;
        v163 = 1;
        v164 = 1;
      }
      while ((v166 & 1) == 0);
      v173 = 0;
      v174 = 0;
      v175 = 0;
      *((_DWORD *)v1 + 1164) = v165;
      do
      {
        v176 = v173;
        if (byte_1C3DF00D8[16 * v174])
          v177 = v7[859] == 0;
        else
          v177 = 1;
        if (v177)
        {
          v178 = v238;
          if (!byte_1C3DF00D8[16 * v174])
            v178 = v235;
          v179 = *v178;
        }
        else
        {
          v179 = (*v238 + 1) >> 1;
        }
        v180 = *(_DWORD *)&byte_1C3DF00D8[16 * v174 + 12];
        if (v180 != 26)
        {
          v181 = llvm::ConstantInt::get();
          v182 = &v9[48 * v180];
          *(_QWORD *)v182 = v181;
          v182[12] = 1;
        }
        v175 += 4 * v179;
        v173 = 1;
        v174 = 1;
      }
      while ((v176 & 1) == 0);
      *((_DWORD *)v1 + 1166) = v175;
      *((_DWORD *)v1 + 1380) = 4;
      v183 = v7[859];
      *((_DWORD *)v1 + 1392) = *((_DWORD *)v1 + 1324);
      *((_DWORD *)v1 + 1404) = *((_DWORD *)v1 + 1325);
      *((_DWORD *)v1 + 1416) = *((_DWORD *)v1 + 1326);
      *((_DWORD *)v1 + 1596) = *((_DWORD *)v1 + 1327);
      v184 = *((_DWORD *)v1 + 1330);
      if (v183)
      {
        v184 = (v184 + 1) >> 1;
        v185 = vshr_n_u32((uint32x2_t)vadd_s32(*v217, (int32x2_t)0x100000001), 1uLL);
      }
      else
      {
        v185 = (uint32x2_t)*v217;
      }
      *((_DWORD *)v1 + 1440) = v184;
      *v215 = v185.i32[1];
      *((_DWORD *)v1 + 1452) = v185.i32[0];
      *((_DWORD *)v1 + 1608) = *((_DWORD *)v1 + 1333);
      *((_DWORD *)v1 + 1500) = *((_DWORD *)v1 + 1336);
      *((_DWORD *)v1 + 1512) = *((_DWORD *)v1 + 1337);
      *((_DWORD *)v1 + 1524) = *((_DWORD *)v1 + 1338);
      *((_DWORD *)v1 + 1620) = *((_DWORD *)v1 + 1339);
      v186 = *((_DWORD *)v1 + 1342);
      if (v183)
      {
        v186 = (v186 + 1) >> 1;
        v187 = (*((_DWORD *)v1 + 1343) + 1) >> 1;
        v188 = vshr_n_u32((uint32x2_t)vadd_s32(*(int32x2_t *)((char *)v1 + 5376), (int32x2_t)0x100000001), 1uLL);
      }
      else
      {
        v187 = *((_DWORD *)v1 + 1343);
        v188 = *(uint32x2_t *)((char *)v1 + 5376);
      }
      *((_DWORD *)v1 + 1548) = v186;
      *((_DWORD *)v1 + 1560) = v187;
      *((_DWORD *)v1 + 1572) = v188.i32[0];
      *v214 = v188.i32[1];
      *((_DWORD *)v1 + 1644) = v7[232];
      *((_DWORD *)v1 + 1656) = v7[239];
      *((_DWORD *)v1 + 1668) = 0;
      *((_DWORD *)v1 + 1680) = *((_DWORD *)v1 + 1158);
      v189 = operator new(0x38uLL);
      v190 = 0;
      v191 = 0;
      v189[6] = 0x1900000016;
      *(_OWORD *)v189 = xmmword_1C3DF00F8;
      *((_OWORD *)v189 + 1) = unk_1C3DF0108;
      *((_OWORD *)v189 + 2) = xmmword_1C3DF0118;
      *((_DWORD *)v1 + 1378) = 0;
      do
      {
        v192 = *(unsigned int *)((char *)v189 + v190);
        v193 = *(_DWORD *)&v9[48 * v191 + 16];
        if (v193 && v9[48 * v191 + 12])
          v194 = v193 << 16;
        else
          v194 = (unsigned __int16)*(_DWORD *)&v9[48 * v191 + 16];
        *(_DWORD *)&v9[48 * v192 + 8] = (unsigned __int16)(*(_WORD *)&v9[48 * v191 + 8] + v194) | ((unsigned __int16)(*(_WORD *)&v9[48 * v191 + 10] + HIWORD(v194)) << 16);
        v190 += 4;
        v191 = v192;
      }
      while (v190 != 56);
      operator delete(v189);
    }
    *((_DWORD *)v1 + 1167) = GenericVaryingAllocator::getTotalSharedComponentWords(v241);
    *((_DWORD *)v1 + 1168) = GenericVaryingAllocator::getTotalAmplifiedComponentWords(v241);
    *(_DWORD *)&v225[4 * v7[224]] += 4;
    *(_DWORD *)&v225[4 * v7[233]] += v7[232];
    *(_DWORD *)&v225[4 * v7[231]] += *((_DWORD *)v1 + 1158);
    if (v7[236])
      v195 = 1;
    else
      v195 = v7[234];
    v12 = v231;
    *(_DWORD *)&v225[4 * v7[240]] += v195;
    if (v231)
    {
      v196 = *(_QWORD *)(*(_QWORD *)v1 - 24);
      Cast = (uint64_t *)llvm::ConstantInt::get();
      v198 = *v227;
      *(_WORD *)&v244[12] = 257;
      v199 = *Cast;
      if (*Cast == v198)
      {
        v12 = v231;
      }
      else
      {
        v200 = *(_DWORD *)(v199 + 8);
        v201 = v200;
        if ((*(_DWORD *)(v199 + 8) & 0xFE) == 0x12)
          v201 = *(unsigned __int8 *)(**(_QWORD **)(v199 + 16) + 8);
        v202 = (uint64_t)v1 + v196 + 40;
        v12 = v231;
        if (v201 == 15
          && ((*(_DWORD *)(v198 + 8) & 0xFE) != 0x12
            ? (v203 = *(_DWORD *)(v198 + 8))
            : (v203 = *(unsigned __int8 *)(**(_QWORD **)(v198 + 16) + 8)),
              v203 == 13))
        {
          v204 = 47;
        }
        else
        {
          if ((*(_DWORD *)(v199 + 8) & 0xFE) == 0x12)
            v200 = *(unsigned __int8 *)(**(_QWORD **)(v199 + 16) + 8);
          if (v200 == 13
            && ((*(_DWORD *)(v198 + 8) & 0xFE) != 0x12
              ? (v205 = *(_DWORD *)(v198 + 8))
              : (v205 = *(unsigned __int8 *)(**(_QWORD **)(v198 + 16) + 8)),
                v205 == 15))
          {
            v204 = 48;
          }
          else
          {
            v204 = 49;
          }
        }
        Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast(v202, v204, (uint64_t)Cast, v198, (uint64_t)__dst);
      }
      llvm::Value::replaceAllUsesWith();
      llvm::ValueHandleBase::operator=(v216, (uint64_t)Cast);
    }
    if (*v7)
    {
      llvm::Module::getOrInsertNamedMetadata();
      *(_QWORD *)__dst = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    v5 = v227;
LABEL_338:
    if (!v12)
      break;
    v5 += 5;
  }
  while (v5 != (uint64_t *)v229);
  if ((v12 & 1) != 0)
    goto LABEL_358;
  return 0;
}

uint64_t AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(AGCLLVMUserMeshShaderSW *this)
{
  llvm::LLVMContext **v2;
  unsigned __int8 v3;
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  int v7;
  __int128 *p_p;
  const void **v9;
  char *v10;
  uint64_t Function;
  char *v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Instruction *v23;
  int v24;
  uint64_t v25;
  uint64_t k;
  unint64_t v27;
  uint64_t v28;
  void **v29;
  llvm::Instruction *v30;
  llvm::Value **v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Type *v34;
  uint64_t v35;
  int v36;
  llvm::Type *v37;
  uint64_t v38;
  void **v39;
  llvm::Value *v40;
  char *v41;
  const char *v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  _QWORD *v46;
  const char *v47;
  _QWORD *v48;
  void *v49;
  unsigned int *v50;
  const char *v51;
  _QWORD *v52;
  const char *v53;
  _QWORD *v54;
  const char *v55;
  _QWORD *v56;
  void **v57;
  void *v58;
  void *v59;
  llvm::Value *FPTrunc;
  char *v61;
  uint64_t v62;
  llvm::Value *v63;
  void *v64;
  llvm::Value *v65;
  AGCLLVMUserObjectShaderBase *v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  char *v71;
  char *v72;
  const void **v73;
  llvm::Function *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  const char **v78;
  _BYTE *v79;
  _DWORD *v80;
  uint64_t v81;
  llvm::Value *v82;
  void *v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  _QWORD v91[4];
  __int16 v92;
  void *v93[4];
  __int128 v94;
  uint64_t v95[3];
  uint64_t v96[3];
  uint64_t v97[3];
  uint64_t v98[3];
  uint64_t v99[3];
  uint64_t v100[3];
  uint64_t v101[3];
  uint64_t v102[3];
  uint64_t v103[3];
  uint64_t v104[3];
  uint64_t v105[3];
  uint64_t v106[3];
  uint64_t v107[3];
  uint64_t v108[3];
  uint64_t v109[3];
  uint64_t v110[3];
  uint64_t v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  uint64_t v114[3];
  uint64_t v115[3];
  uint64_t v116[3];
  __int128 __p;
  _BYTE v118[8];
  __int128 v119;
  _QWORD v120[3];
  __int128 v121[28];
  char *v122[2];
  uint64_t v123;
  const void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (**v127)(int, llvm::Value *);
  void *v128[2];
  _OWORD v129[5];
  int v130;
  uint64_t v131;
  _QWORD v132[29];
  AGCLLVMUserMeshShaderSW *v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v127, *v2);
  v67 = this;
  v133 = this;
  v127 = &off_1E7E6A500;
  v132[25] = v2;
  if ((v3 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions, "air.set_position_mesh");
    dword_1EF8E8630 = 0;
    byte_1EF8E8634 = 0;
    dword_1EF8E8638 = 1;
    qword_1EF8E8640 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPosition;
    unk_1EF8E8648 = 0;
    dword_1EF8E8650 = 6;
    word_1EF8E8654 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8658, "air.set_point_size_mesh");
    dword_1EF8E8670 = 0;
    byte_1EF8E8674 = 0;
    dword_1EF8E8678 = 1;
    qword_1EF8E8680 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPointSize;
    unk_1EF8E8688 = 0;
    dword_1EF8E8690 = 6;
    word_1EF8E8694 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8698, "air.set_clip_distance_mesh");
    dword_1EF8E86B0 = 0;
    byte_1EF8E86B4 = 0;
    dword_1EF8E86B8 = 1;
    qword_1EF8E86C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetClipDistance;
    unk_1EF8E86C8 = 0;
    dword_1EF8E86D0 = 7;
    word_1EF8E86D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E86D8, "air.set_render_target_array_index_mesh");
    dword_1EF8E86F0 = 1;
    byte_1EF8E86F4 = 0;
    dword_1EF8E86F8 = 1;
    qword_1EF8E8700 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetLayerId;
    unk_1EF8E8708 = 0;
    dword_1EF8E8710 = 6;
    word_1EF8E8714 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8718, "air.set_viewport_array_index_mesh");
    dword_1EF8E8730 = 1;
    byte_1EF8E8734 = 0;
    dword_1EF8E8738 = 1;
    qword_1EF8E8740 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetViewportId;
    unk_1EF8E8748 = 0;
    dword_1EF8E8750 = 6;
    word_1EF8E8754 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8758, "air.set_primitive_id_mesh");
    dword_1EF8E8770 = 0;
    byte_1EF8E8774 = 0;
    dword_1EF8E8778 = 1;
    qword_1EF8E8780 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveId;
    unk_1EF8E8788 = 0;
    dword_1EF8E8790 = 6;
    word_1EF8E8794 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8798, "air.set_primitive_culled_mesh");
    dword_1EF8E87B0 = 0;
    byte_1EF8E87B4 = 0;
    dword_1EF8E87B8 = 1;
    qword_1EF8E87C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveCulled;
    unk_1EF8E87C8 = 0;
    dword_1EF8E87D0 = 6;
    word_1EF8E87D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E87D8, "air.set_index_mesh");
    dword_1EF8E87F0 = 0;
    byte_1EF8E87F4 = 0;
    dword_1EF8E87F8 = 1;
    qword_1EF8E8800 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndex;
    unk_1EF8E8808 = 0;
    dword_1EF8E8810 = 6;
    word_1EF8E8814 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8818, "air.set_indices_mesh.v2i8");
    dword_1EF8E8830 = 0;
    byte_1EF8E8834 = 0;
    dword_1EF8E8838 = 1;
    qword_1EF8E8840 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndices;
    qword_1EF8E8848 = 0;
    dword_1EF8E8850 = 6;
    word_1EF8E8854 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8858, "air.set_indices_mesh.v4i8");
    dword_1EF8E8870 = 0;
    byte_1EF8E8874 = 0;
    dword_1EF8E8878 = 1;
    qword_1EF8E8880 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndices;
    qword_1EF8E8888 = 0;
    dword_1EF8E8890 = 6;
    word_1EF8E8894 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8898, "air.set_vertex_data_mesh");
    dword_1EF8E88B0 = 2;
    byte_1EF8E88B4 = 0;
    dword_1EF8E88B8 = 1;
    qword_1EF8E88C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetVertexData;
    qword_1EF8E88C8 = 0;
    dword_1EF8E88D0 = 7;
    word_1EF8E88D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E88D8, "air.set_primitive_data_mesh");
    dword_1EF8E88F0 = 2;
    byte_1EF8E88F4 = 0;
    dword_1EF8E88F8 = 1;
    qword_1EF8E8900 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveData;
    qword_1EF8E8908 = 0;
    dword_1EF8E8910 = 7;
    word_1EF8E8914 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8918, "air.set_primitive_count_mesh");
    dword_1EF8E8930 = 0;
    byte_1EF8E8934 = 0;
    dword_1EF8E8938 = 1;
    qword_1EF8E8940 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveCount;
    qword_1EF8E8948 = 0;
    dword_1EF8E8950 = 5;
    word_1EF8E8954 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8958, "agc.gpe.get_payload_id");
    dword_1EF8E8970 = 0;
    byte_1EF8E8974 = 0;
    dword_1EF8E8978 = 1;
    qword_1EF8E8980 = (uint64_t)AGCLLVMUserMeshShaderSW::getGlobalLinearGroupID;
    qword_1EF8E8988 = 0;
    dword_1EF8E8990 = 1;
    word_1EF8E8994 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8998, "air.object_threadgroup_position_in_grid");
    dword_1EF8E89B0 = 0;
    byte_1EF8E89B4 = 0;
    dword_1EF8E89B8 = 1;
    qword_1EF8E89C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildOSTGGridPosition;
    qword_1EF8E89C8 = 0;
    dword_1EF8E89D0 = 1;
    word_1EF8E89D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E89D8, "air.get_global_size");
    dword_1EF8E89F0 = 1;
    byte_1EF8E89F4 = 1;
    dword_1EF8E89F8 = 1;
    qword_1EF8E8A00 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGlobalSizeUbergrid;
    qword_1EF8E8A08 = 0;
    dword_1EF8E8A10 = 4;
    word_1EF8E8A14 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8A18, "air.get_global_id");
    dword_1EF8E8A30 = 1;
    byte_1EF8E8A34 = 1;
    dword_1EF8E8A38 = 1;
    qword_1EF8E8A40 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGlobalIDUbergrid;
    qword_1EF8E8A48 = 0;
    dword_1EF8E8A50 = 4;
    word_1EF8E8A54 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8A58, "air.get_num_groups");
    dword_1EF8E8A70 = 1;
    byte_1EF8E8A74 = 1;
    dword_1EF8E8A78 = 1;
    qword_1EF8E8A80 = (uint64_t)AGCLLVMUserMeshShaderSW::buildNumGroupsUbergrid;
    qword_1EF8E8A88 = 0;
    dword_1EF8E8A90 = 4;
    word_1EF8E8A94 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8A98, "air.get_group_id");
    dword_1EF8E8AB0 = 1;
    byte_1EF8E8AB4 = 1;
    dword_1EF8E8AB8 = 1;
    qword_1EF8E8AC0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGroupIDSW;
    qword_1EF8E8AC8 = 0;
    dword_1EF8E8AD0 = 4;
    word_1EF8E8AD4 = 0;
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_470, 0, &dword_1C3C54000);
  }
  for (i = 0; i != 19; ++i)
  {
    v72 = &AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * i];
    if (!v72[28] || (*(_BYTE *)(*((_QWORD *)v67 + 565) + 17) & 1) == 0)
    {
      std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&unk_1C3E4D9BB);
      v124 = (const void **)&v126;
      v125 = 0x100000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&v124, &__p, &v119);
      if ((v118[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      std::string::basic_string[abi:nn180100]<0>(&__p, ".i8");
      std::string::basic_string[abi:nn180100]<0>(&v119, ".i16");
      std::string::basic_string[abi:nn180100]<0>(v120, ".i32");
      v122[0] = (char *)&v123;
      v122[1] = (char *)0x300000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)v122, &__p, v121);
      for (j = 0; j != -9; j -= 3)
      {
        if (SHIBYTE(v120[j + 2]) < 0)
          operator delete((void *)v120[j]);
      }
      std::string::basic_string[abi:nn180100]<0>(v93, ".i1");
      std::string::basic_string[abi:nn180100]<0>(&v93[3], ".i8");
      std::string::basic_string[abi:nn180100]<0>(v95, ".i16");
      std::string::basic_string[abi:nn180100]<0>(v96, ".i32");
      std::string::basic_string[abi:nn180100]<0>(v97, ".f16");
      std::string::basic_string[abi:nn180100]<0>(v98, ".f32");
      std::string::basic_string[abi:nn180100]<0>(v99, ".v2i1");
      std::string::basic_string[abi:nn180100]<0>(v100, ".v2i8");
      std::string::basic_string[abi:nn180100]<0>(v101, ".v2i16");
      std::string::basic_string[abi:nn180100]<0>(v102, ".v2i32");
      std::string::basic_string[abi:nn180100]<0>(v103, ".v2f16");
      std::string::basic_string[abi:nn180100]<0>(v104, ".v2f32");
      std::string::basic_string[abi:nn180100]<0>(v105, ".v3i1");
      std::string::basic_string[abi:nn180100]<0>(v106, ".v3i8");
      std::string::basic_string[abi:nn180100]<0>(v107, ".v3i16");
      std::string::basic_string[abi:nn180100]<0>(v108, ".v3i32");
      std::string::basic_string[abi:nn180100]<0>(v109, ".v3f16");
      std::string::basic_string[abi:nn180100]<0>(v110, ".v3f32");
      std::string::basic_string[abi:nn180100]<0>(v111, ".v4i1");
      std::string::basic_string[abi:nn180100]<0>(v112, ".v4i8");
      std::string::basic_string[abi:nn180100]<0>(v113, ".v4i16");
      std::string::basic_string[abi:nn180100]<0>(v114, ".v4i32");
      std::string::basic_string[abi:nn180100]<0>(v115, ".v4f16");
      std::string::basic_string[abi:nn180100]<0>(v116, ".v4f32");
      *(_QWORD *)&__p = v118;
      *((_QWORD *)&__p + 1) = 0x1800000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&__p, (__int128 *)v93, &__p);
      v6 = 72;
      do
      {
        if (SHIBYTE(v93[v6 - 1]) < 0)
          operator delete((void *)v91[v6 + 2]);
        v6 -= 3;
      }
      while (v6 * 8);
      v7 = *(_DWORD *)&AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * i + 24];
      if (v7 == 1)
      {
        p_p = (__int128 *)v122;
      }
      else
      {
        if (v7 != 2)
          goto LABEL_20;
        p_p = &__p;
      }
      llvm::SmallVectorImpl<std::string>::operator=((uint64_t)&v124, (uint64_t)p_p);
LABEL_20:
      if (!(_DWORD)v125)
      {
LABEL_125:
        llvm::SmallVector<std::string,24u>::~SmallVector((char **)&__p);
        llvm::SmallVector<std::string,24u>::~SmallVector(v122);
        llvm::SmallVector<std::string,24u>::~SmallVector((char **)&v124);
        continue;
      }
      v9 = v124;
      v71 = (char *)&v124[3 * v125];
      v10 = &AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * i];
      v75 = v10 + 32;
      v77 = (uint64_t *)(v10 + 48);
      v78 = (const char **)(v10 + 40);
      v68 = v10 + 61;
      v69 = i;
      v79 = v10 + 60;
      v80 = v10 + 56;
      while (1)
      {
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v83, (const void **)v72, v9);
        Function = llvm::Module::getFunction();
        if (Function)
          break;
LABEL_122:
        if (v84 < 0)
          operator delete(v83);
        v9 += 3;
        if (v9 == (const void **)v71)
          goto LABEL_125;
      }
      v73 = v9;
      v74 = (llvm::Function *)Function;
      if (*v80 == 10)
      {
        v14 = *(_QWORD *)(Function + 8);
        if (v14)
        {
          do
          {
            v15 = *v78;
            v16 = (_QWORD *)((char *)v133 + (*v77 >> 1));
            if ((*v77 & 1) != 0)
              v15 = *(const char **)(*v16 + v15);
            v17 = *(_QWORD *)(v14 + 8);
            ((void (*)(_QWORD *, _QWORD))v15)(v16, *(_QWORD *)(v14 + 24));
            v14 = v17;
          }
          while (v17);
        }
        goto LABEL_121;
      }
      if (*v80 == 9)
      {
        v12 = (char *)*v78;
        if (*v78)
        {
          v13 = strlen(*v78);
          v93[0] = &v93[3];
          *(_OWORD *)&v93[1] = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v93, v12, &v12[v13]);
        }
        else
        {
          v93[2] = (void *)64;
          v93[0] = &v93[3];
          v93[1] = 0;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v93, ".", "");
        v64 = v93[1];
        if (v93[2] < v93[1])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v64 = v93[1];
        }
        v93[1] = v64;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (v93[0] != &v93[3])
          free(v93[0]);
        goto LABEL_121;
      }
      v18 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v19 = (*(_DWORD *)(v18 + 8) & 0xFE) != 0x12 || *v68 == 0;
      v20 = !v19;
      if (v19)
        v21 = 1;
      else
        v21 = *(unsigned int *)(v18 + 32);
      v81 = v21;
      v70 = v130;
      v22 = *(_QWORD *)(Function + 8);
      if (!v22)
      {
LABEL_115:
        v130 = v70;
        i = v69;
LABEL_121:
        llvm::Function::eraseFromParent(v74);
        v9 = v73;
        goto LABEL_122;
      }
      while (1)
      {
        v23 = *(llvm::Instruction **)(v22 + 24);
        v76 = *(_QWORD *)(v22 + 8);
        if (*v75 == 1)
        {
          v24 = 0;
        }
        else
        {
          if (*v75 != 2)
            goto LABEL_47;
          v24 = 121;
        }
        v130 = v24;
LABEL_47:
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v128, v23);
        v25 = llvm::UndefValue::get();
        if (v81)
        {
          for (k = 0; k != v81; ++k)
          {
            v82 = (llvm::Value *)v25;
            v95[0] = 0;
            v94 = 0u;
            memset(v93, 0, sizeof(v93));
            v27 = llvm::CallBase::arg_end(v23) - (_QWORD)v23 + 32 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF);
            if ((v27 & 0x1FFFFFFFE0) != 0)
            {
              v28 = (v27 >> 5);
              v29 = v93;
              v30 = v23;
              do
              {
                v31 = (llvm::Value **)((char *)v30 - 32 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF));
                v32 = *v31;
                *v29 = *v31;
                if (v20 && (*(_DWORD *)(*(_QWORD *)v32 + 8) & 0xFE) == 0x12)
                {
                  v92 = 257;
                  v33 = (llvm::Value *)llvm::ConstantInt::get();
                  *v29 = (void *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v128, v32, v33, (const llvm::Twine *)v91);
                }
                ++v29;
                v30 = (llvm::Instruction *)((char *)v30 + 32);
                --v28;
              }
              while (v28);
            }
            if (*v79)
            {
              v34 = *(llvm::Type **)v93[0];
              if ((*(_DWORD *)(*(_QWORD *)v93[0] + 8) & 0xFE) == 0x12)
                v34 = (llvm::Type *)**((_QWORD **)v34 + 2);
              v91[0] = llvm::Type::getPrimitiveSizeInBits(v34);
              v91[1] = v35;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v36 = 0;
              }
              else
              {
                v37 = (llvm::Type *)v132[4];
                if ((*(_DWORD *)(*(_QWORD *)v93[0] + 8) & 0xFE) == 0x12)
                  v37 = (llvm::Type *)llvm::FixedVectorType::get();
                if ((v27 & 0x1FFFFFFFE0) != 0)
                {
                  v38 = (v27 >> 5);
                  v39 = v93;
                  do
                  {
                    v40 = (llvm::Value *)*v39;
                    v92 = 257;
                    *v39++ = (void *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v128, v40, v37, (const llvm::Twine *)v91);
                    --v38;
                  }
                  while (v38);
                }
                v36 = 1;
              }
            }
            else
            {
              v36 = 0;
            }
            v41 = (char *)v133 + *(_QWORD *)(*(_QWORD *)v133 - 24);
            v88 = v129[2];
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v128);
            v90 = v130;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)(v41 + 40));
            if (v89)
              llvm::MetadataTracking::untrack();
            switch(*v80)
            {
              case 1:
                v42 = *v78;
                v43 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v42 = *(const char **)(*v43 + v42);
                v44 = ((uint64_t (*)(_QWORD *))v42)(v43);
                goto LABEL_98;
              case 2:
                v47 = *v78;
                v48 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v47 = *(const char **)(*v48 + v47);
                v49 = *(void **)v23;
                goto LABEL_90;
              case 3:
                v47 = *v78;
                v48 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v47 = *(const char **)(*v48 + v47);
                v49 = v93[0];
LABEL_90:
                v44 = ((uint64_t (*)(_QWORD *, void *))v47)(v48, v49);
                goto LABEL_98;
              case 4:
                v50 = (unsigned int *)((char *)v93[0] + 24);
                if (*((_DWORD *)v93[0] + 8) >= 0x41u)
                  v50 = *(unsigned int **)v50;
                v51 = *v78;
                v52 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v51 = *(const char **)(*v52 + v51);
                v44 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v51)(v52, *(_QWORD *)v23, *v50);
                goto LABEL_98;
              case 5:
                v45 = *v78;
                v46 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v45 = *(const char **)(*v46 + v45);
                v44 = ((uint64_t (*)(_QWORD *, void *, void *))v45)(v46, v93[0], v93[1]);
                goto LABEL_98;
              case 6:
                v55 = *v78;
                v56 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v55 = *(const char **)(*v56 + v55);
                v57 = (void **)v93[0];
                v58 = v93[1];
                v59 = v93[2];
                goto LABEL_97;
              case 7:
                v55 = *v78;
                v56 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v55 = *(const char **)(*v56 + v55);
                v57 = v93;
                v58 = &unk_1C3E4D9BB;
                v59 = 0;
LABEL_97:
                v44 = ((uint64_t (*)(_QWORD *, void **, void *, void *))v55)(v56, v57, v58, v59);
                goto LABEL_98;
              case 8:
                v53 = *v78;
                v54 = (_QWORD *)((char *)v133 + (*v77 >> 1));
                if ((*v77 & 1) != 0)
                  v53 = *(const char **)(*v54 + v53);
                v44 = ((uint64_t (*)(_QWORD *, _QWORD, void **, void *, _QWORD))v53)(v54, *(_QWORD *)v23, v93, &unk_1C3E4D9BB, 0);
LABEL_98:
                FPTrunc = (llvm::Value *)v44;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            v61 = (char *)v133 + *(_QWORD *)(*(_QWORD *)v133 - 24);
            v85 = *(_OWORD *)(v61 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v61 + 40));
            v87 = *((_DWORD *)v61 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v128);
            if (v86)
              llvm::MetadataTracking::untrack();
            if (v36)
            {
              v62 = *(_QWORD *)v23;
              if (v20 && (*(_DWORD *)(v62 + 8) & 0xFE) == 0x12)
                v62 = **(_QWORD **)(v62 + 16);
              v92 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v128, FPTrunc, (llvm::Type *)v62, (const llvm::Twine *)v91);
              if (!v20)
                goto LABEL_109;
            }
            else if (!v20)
            {
              goto LABEL_109;
            }
            v92 = 257;
            v63 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v128, v82, FPTrunc, v63, (const llvm::Twine *)v91);
LABEL_109:
            v25 = (uint64_t)FPTrunc;
          }
        }
        if (*(_QWORD *)v23 != v132[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v23);
        v22 = v76;
        if (!v76)
          goto LABEL_115;
      }
    }
  }
  v65 = (llvm::Value *)*((_QWORD *)v67 + 569);
  if (v65)
    AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(v67, v65);
  AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(v67, 7, 1);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v132);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v131);
  if (v128[0] != v129)
    free(v128[0]);
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::markInvariantOutputs(AGCLLVMUserMeshShaderSW *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *Value;
  BOOL v11;
  uint64_t Function;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD *v32[3];
  char v33;

  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v2))
  {
    v11 = MGGetBoolAnswer()
       && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v9)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    *((_BYTE *)this + 4528) = v11;
  }
  if (*((_BYTE *)this + 4528))
  {
    if (*((_BYTE *)this + 32))
    {
      SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), v3, v4, v5, v6, v7, v8, (char)__p);
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v13 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        v14 = *(_QWORD **)((char *)this + v13 + 336);
        __p = 0;
        v29 = 0;
        v32[0] = 0;
        v32[1] = 0;
        v30 = 0;
        v31 = v32;
        v32[2] = v14;
        v33 = 0;
        v15 = *(_QWORD *)(Function + 8);
        if (v15)
        {
          do
          {
            MarkInvariants::addSeed((uint64_t *)&__p, *(llvm::Value **)(*(_QWORD *)(v15 + 24)- 32 * (*(_DWORD *)(*(_QWORD *)(v15 + 24) + 20) & 0x7FFFFFF)+ 32), 0);
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
          v13 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        }
        if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + v13)) & 1) == 0)
        {
          v17 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
          v18 = v17 + 24;
          for (i = *(_QWORD *)(v17 + 32); i != v18; i = *(_QWORD *)(i + 8))
          {
            v20 = i - 56;
            if (!i)
              v20 = 0;
            v21 = v20 + 72;
            for (j = *(_QWORD *)(v20 + 80); j != v21; j = *(_QWORD *)(j + 8))
            {
              v23 = j - 24;
              if (!j)
                v23 = 0;
              v24 = *(_QWORD *)(v23 + 48);
              if (v24 != v23 + 40)
              {
LABEL_40:
                while (j != v21)
                {
                  if (v24)
                    v25 = (llvm::Instruction *)(v24 - 24);
                  else
                    v25 = 0;
                  if (llvm::FPMathOperator::classof((uint64_t)v25))
                    llvm::Instruction::setFast(v25);
                  v24 = *(_QWORD *)(v24 + 8);
                  v26 = j - 24;
                  if (!j)
                    v26 = 0;
                  if (v24 == v26 + 40)
                  {
                    while (1)
                    {
                      j = *(_QWORD *)(j + 8);
                      if (j == v21)
                        goto LABEL_41;
                      v27 = j - 24;
                      if (!j)
                        v27 = 0;
                      v24 = *(_QWORD *)(v27 + 48);
                      if (v24 != v27 + 40)
                        goto LABEL_40;
                    }
                  }
                }
                break;
              }
            }
LABEL_41:
            ;
          }
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v32[0]);
        if (__p)
        {
          v29 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(AGCLLVMUserMeshShaderSW *this)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  const double *v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::IRBuilderBase *v79;
  llvm::Value *v80;
  llvm::Value *LShr;
  llvm::IRBuilderBase *v82;
  llvm::Value *v83;
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v85;
  llvm::Type *v86;
  llvm::IRBuilderBase *v87;
  llvm::Value *v88;
  llvm::Value *Mul;
  llvm::Value *GEP;
  llvm::IRBuilderBase *v91;
  llvm::Type **v92;
  llvm::Value *v93;
  llvm::Type *v94;
  uint64_t AlignedLoad;
  uint64_t v96;
  uint64_t v97;
  llvm::Value *v98;
  llvm::IRBuilderBase *v99;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::Value *v102;
  llvm::Value *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  llvm::Value *v109;
  uint64_t v110;
  char *v111;
  llvm::Value *v112;
  llvm::Value *v113;
  llvm::IRBuilderBase *v114;
  llvm::IRBuilderBase *v115;
  llvm::Value *v116;
  llvm::Value *v117;
  llvm::IRBuilderBase *v118;
  llvm::Value *v119;
  llvm::Value *v120;
  llvm::IRBuilderBase *v121;
  llvm::Value *v122;
  llvm::Value *v123;
  llvm::IRBuilderBase *v124;
  llvm::Value *v125;
  llvm::Value *v126;
  llvm::IRBuilderBase *v127;
  llvm::Value *v128;
  llvm::Value *v129;
  llvm::IRBuilderBase *v130;
  llvm::Value *v131;
  llvm::Value *v132;
  llvm::IRBuilderBase *v133;
  llvm::Value *v134;
  llvm::Value *v135;
  llvm::IRBuilderBase *v136;
  llvm::Value *v137;
  llvm::Value *v138;
  llvm::IRBuilderBase *v139;
  llvm::Value *v140;
  llvm::Value *v141;
  llvm::IRBuilderBase *v142;
  llvm::Value *v143;
  llvm::Value *v144;
  llvm::IRBuilderBase *v145;
  llvm::Value *v146;
  llvm::Value *v147;
  llvm::IRBuilderBase *v148;
  llvm::Value *v149;
  llvm::Value *v150;
  llvm::IRBuilderBase *v151;
  uint64_t v152;
  llvm::IRBuilderBase *v153;
  llvm::Value *v154;
  llvm::Value *Sub;
  llvm::Value *v156;
  char *v157;
  llvm::Value *v158;
  llvm::IRBuilderBase *v159;
  llvm::Value *v160;
  llvm::Value *v161;
  llvm::IRBuilderBase *v162;
  llvm::Value *v163;
  llvm::Value *v164;
  llvm::IRBuilderBase *v165;
  uint64_t v166;
  llvm::Value *v167;
  llvm::Value *v168;
  llvm::IRBuilderBase *v169;
  llvm::IRBuilderBase *v170;
  llvm::Value *v171;
  llvm::Value *v172;
  llvm::IRBuilderBase *v173;
  llvm::Value *v174;
  int v175;
  llvm::Value *v176;
  uint64_t v177;
  llvm::Value *v178;
  llvm::IRBuilderBase *v179;
  llvm::IRBuilderBase *v180;
  llvm::Value *v181;
  llvm::IRBuilderBase *v182;
  llvm::Value *BasePointer;
  char *v184;
  llvm::Type *v185;
  uint64_t *v186;
  llvm::Type **v187;
  llvm::Value *v188;
  llvm::Type *v189;
  llvm::Value *v190;
  llvm::IRBuilderBase *v191;
  llvm::Value *v192;
  llvm::Value *Add;
  llvm::IRBuilderBase *v194;
  llvm::Value *v195;
  llvm::Value *AShr;
  llvm::Value *v197;
  llvm::Value *v198;
  llvm::IRBuilderBase *v199;
  llvm::Value *v200;
  uint64_t v201;
  llvm::Value *v202;
  llvm::Value *v203;
  llvm::Value *v204;
  llvm::Type *v205;
  llvm::Type **v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  llvm::Type *v210;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v212;
  llvm::Type *v213;
  llvm::Value *v214;
  llvm::IRBuilderBase *v215;
  llvm::Type **v216;
  uint64_t *v217;
  llvm::Value *v218;
  llvm::Type *v219;
  _BYTE *v220;
  uint64_t v221;
  char *v222;
  llvm::IRBuilderBase *v223;
  uint64_t v224;
  llvm::Value *v225;
  uint64_t v226;
  char *v227;
  llvm::IRBuilderBase *v228;
  uint64_t v229;
  llvm::Value *v230;
  uint64_t v231;
  char *v232;
  llvm::IRBuilderBase *v233;
  llvm::Value *v234;
  uint64_t v235;
  llvm::Value *v236;
  llvm::IRBuilderBase *v237;
  llvm::Value *v238;
  llvm::Value *Shl;
  uint64_t v240;
  char *v241;
  llvm::Type *v242;
  llvm::Value *v243;
  llvm::Type **v244;
  uint64_t *v245;
  llvm::Value *v246;
  llvm::Type *v247;
  llvm::Value *v248;
  uint64_t i;
  char *v250;
  llvm::IRBuilderBase *v251;
  llvm::Value *v252;
  uint64_t Element;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  llvm::IRBuilderBase *v257;
  uint64_t v258;
  uint64_t v259;
  llvm::IRBuilderBase *v260;
  uint64_t v261;
  llvm::Value *v262;
  llvm::Value *v263;
  llvm::Value *v264;
  llvm::Value *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  llvm::Value *v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  BOOL v278;
  int v279;
  BOOL v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  llvm::IRBuilderBase *v284;
  char *v285;
  uint64_t v286;
  llvm::Value *v287;
  uint64_t v288;
  llvm::Value *v289;
  uint64_t v290;
  uint64_t v291;
  llvm::Value *v292;
  llvm::Value *v293;
  unsigned int v294;
  llvm::IRBuilderBase *v295;
  llvm::Value *v296;
  llvm::Value *v297;
  llvm::Value *v298;
  llvm::Value *v299;
  llvm::Type **v300;
  uint64_t *v301;
  llvm::Value *v302;
  llvm::Type *v303;
  llvm::Value *v304;
  llvm::IRBuilderBase *v305;
  llvm::Value *v306;
  uint64_t v307;
  int v308;
  llvm::Value *v309;
  llvm::Constant **v310;
  llvm::Type *v311;
  llvm::Value *NullValue;
  llvm::Value *v313;
  uint64_t InsertElement;
  llvm::IRBuilderBase *v315;
  llvm::Value *v316;
  llvm::IRBuilderBase *v317;
  llvm::Value *v318;
  llvm::Value *v319;
  llvm::Value *v320;
  llvm::Type **v321;
  uint64_t *v322;
  llvm::Value *v323;
  llvm::Type *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm::IRBuilderBase *v328;
  llvm::Value *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  llvm::IRBuilderBase *v333;
  llvm::Value *v334;
  llvm::Constant **v335;
  llvm::Type *v336;
  llvm::Value *v337;
  llvm::Value *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  llvm::Type *v342;
  llvm::Value *v343;
  llvm::Type **v344;
  uint64_t *v345;
  llvm::Value *v346;
  llvm::Type *v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  llvm::IRBuilderBase *v351;
  llvm::Value *v352;
  uint64_t v353;
  llvm::Value *v354;
  llvm::Value *v355;
  llvm::Value *v356;
  llvm::Value *v357;
  unsigned int v358;
  char *v359;
  llvm::Type *v360;
  llvm::IRBuilderBase *v361;
  llvm::Value *v362;
  llvm::Value *v363;
  llvm::Type **v364;
  llvm::Value *v365;
  llvm::Type *v366;
  uint64_t v367;
  llvm::IRBuilderBase *v368;
  llvm::Value *v369;
  uint64_t v370;
  llvm::IRBuilderBase *v371;
  uint64_t v372;
  uint64_t v373;
  llvm::Value *v374;
  llvm::Value *v375;
  llvm::Value *v376;
  llvm::Value *v377;
  uint64_t v378;
  char *v379;
  llvm::Value *v380;
  uint64_t v381;
  _BYTE *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  llvm::IRBuilderBase *v387;
  llvm::Value *v388;
  llvm::Value *v389;
  llvm::Value *v390;
  llvm::IRBuilderBase *v391;
  llvm::Type *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  llvm::Value *v396;
  llvm::IRBuilderBase *v397;
  llvm::Value *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  char *v404;
  uint64_t v405;
  llvm::IRBuilderBase *v406;
  llvm::Value *v407;
  llvm::Value *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  llvm::IRBuilderBase *v422;
  llvm::Value *v423;
  llvm::Value *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  llvm::IRBuilderBase *v434;
  llvm::Value *v435;
  uint64_t v436;
  llvm::Value *v437;
  llvm::Value *v438;
  llvm::Value *v439;
  llvm::Value *v440;
  uint64_t v441;
  llvm::IRBuilderBase *v442;
  llvm::Value *v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  char *v455;
  uint64_t v456;
  llvm::IRBuilderBase *v457;
  llvm::Value *v458;
  llvm::Value *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void *__p;
  llvm::Value *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  llvm::Value *v477;
  int v478;
  llvm::Value *v479;
  _BYTE *v480;
  uint64_t v481;
  uint64_t v482;
  llvm::Value *v483;
  uint64_t v484;
  llvm::Type *v485;
  uint64_t v486;
  llvm::CmpInst **v487;
  llvm::Value *UDiv;
  llvm::Value *v489;
  llvm::Value *v490;
  llvm::Value *v491;
  llvm::Value *v492;
  char v493[32];
  __int16 v494;
  llvm::Value *VertexAmpCount;
  _QWORD v496[6];
  uint64_t v497;
  uint64_t v498;
  char v499;
  uint64_t v500;
  uint64_t v501;
  _QWORD v502[4];
  __int16 v503;
  _QWORD v504[2];
  void *v505[2];
  _BYTE v506[16];
  __int16 v507;
  uint64_t v508;
  llvm::Value *v509;
  __int16 v510;
  uint64_t v511;
  llvm::Value *v512;
  __int16 v513;
  uint64_t v514;

  v514 = *MEMORY[0x1E0C80C00];
  v500 = 0;
  v501 = 0;
  v499 = 0;
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (uint64_t *)(v2 + 32);
  v4 = *((_QWORD *)v2 + 50);
  v5 = *(_QWORD *)(v4 + 1392);
  if (v5)
    v6 = strlen(*(const char **)(v4 + 1392));
  else
    v6 = 0;
  v481 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v3, v5, v6, v3[18], v3[24], v3[21]);
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = (uint64_t *)(v7 + 32);
  v9 = *((_QWORD *)v7 + 50);
  v10 = *(_QWORD *)(v9 + 1448);
  if (v10)
    v11 = strlen(*(const char **)(v9 + 1448));
  else
    v11 = 0;
  v486 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v8, v10, v11, v8[18], v8[24], v8[21]);
  v498 = 0;
  v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v13 = (uint64_t *)(v12 + 32);
  v14 = *((_QWORD *)v12 + 50);
  v15 = *(_QWORD *)(v14 + 1376);
  if (v15)
    v16 = strlen(*(const char **)(v14 + 1376));
  else
    v16 = 0;
  v498 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v13, v15, v16, v13[18], v13[24], v13[25]);
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v18 = (uint64_t *)(v17 + 32);
  v19 = *((_QWORD *)v17 + 50);
  v20 = *(_QWORD *)(v19 + 1384);
  if (v20)
    v21 = strlen(*(const char **)(v19 + 1384));
  else
    v21 = 0;
  v475 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v18, v20, v21, v18[18], v18[24], v18[21]);
  v497 = 0;
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v23 = (uint64_t *)(v22 + 32);
  v24 = *((_QWORD *)v22 + 50);
  v25 = *(_QWORD *)(v24 + 1432);
  if (v25)
    v26 = strlen(*(const char **)(v24 + 1432));
  else
    v26 = 0;
  v497 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v23, v25, v26, v23[18], v23[24], v23[25]);
  v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v28 = (uint64_t *)(v27 + 32);
  v29 = *((_QWORD *)v27 + 50);
  v30 = *(_QWORD *)(v29 + 1440);
  if (v30)
    v31 = strlen(*(const char **)(v29 + 1440));
  else
    v31 = 0;
  v474 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v28, v30, v31, v28[18], v28[24], v28[21]);
  v32 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v33 = (uint64_t *)(v32 + 32);
  v34 = *((_QWORD *)v32 + 50);
  v35 = *(_QWORD *)(v34 + 1400);
  if (v35)
    v36 = strlen(*(const char **)(v34 + 1400));
  else
    v36 = 0;
  v471 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v33, v35, v36, v33[18], v33[24], v33[21]);
  v37 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v38 = (uint64_t *)(v37 + 32);
  v39 = *((_QWORD *)v37 + 50);
  v40 = *(_QWORD *)(v39 + 1456);
  if (v40)
    v41 = strlen(*(const char **)(v39 + 1456));
  else
    v41 = 0;
  v469 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v38, v40, v41, v38[18], v38[24], v38[21]);
  v42 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v43 = (uint64_t *)(v42 + 32);
  v44 = *((_QWORD *)v42 + 50);
  v45 = *(_QWORD *)(v44 + 1408);
  if (v45)
    v46 = strlen(*(const char **)(v44 + 1408));
  else
    v46 = 0;
  v470 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v43, v45, v46, v43[18], v43[24], v43[21]);
  v47 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v48 = (uint64_t *)(v47 + 32);
  v49 = *((_QWORD *)v47 + 50);
  v50 = *(_QWORD *)(v49 + 1464);
  if (v50)
    v51 = strlen(*(const char **)(v49 + 1464));
  else
    v51 = 0;
  v468 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v48, v50, v51, v48[18], v48[24], v48[21]);
  v52 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v53 = (uint64_t *)(v52 + 32);
  v54 = *((_QWORD *)v52 + 50);
  v55 = *(_QWORD *)(v54 + 1416);
  if (v55)
    v56 = strlen(*(const char **)(v54 + 1416));
  else
    v56 = 0;
  v484 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v53, v55, v56, v53[18], v53[24], v53[25]);
  v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v58 = (uint64_t *)(v57 + 32);
  v59 = *((_QWORD *)v57 + 50);
  v60 = *(_QWORD *)(v59 + 1472);
  if (v60)
    v61 = strlen(*(const char **)(v59 + 1472));
  else
    v61 = 0;
  v482 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v58, v60, v61, v58[18], v58[24], v58[25]);
  v496[0] = &v501;
  v496[1] = this;
  v496[2] = &v499;
  v496[3] = &v497;
  v496[4] = &v500;
  v496[5] = &v498;
  v62 = *(_QWORD *)(*(_QWORD *)this - 24);
  v63 = (char *)operator new(0x30uLL);
  v64 = 0;
  v65 = (const double *)((char *)this + v62 + 200);
  v66 = vld1q_dup_f64(v65);
  do
  {
    *(float64x2_t *)&v63[v64] = v66;
    v64 += 16;
  }
  while (v64 != 48);
  v480 = (char *)this + 4405;
  __p = v63;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v68 = v67;
  *(_WORD *)(v67 + 18) = *(_WORD *)(v67 + 18) & 0xC00F | 0x660;
  v505[0] = "entry";
  v507 = 259;
  operator new();
  v69 = llvm::BasicBlock::BasicBlock();
  v70 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v70 + 11) = v69;
  *((_QWORD *)v70 + 12) = v69 + 40;
  v71 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 376) = (char *)this + 5408;
  if ((*(_BYTE *)(v68 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v68);
    v71 = *(_QWORD *)this;
  }
  v72 = *(_QWORD *)(v68 + 88) + 200;
  v73 = (char *)this + *(_QWORD *)(v71 - 24);
  v74 = *((_QWORD *)v73 + 29);
  v507 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v73 + 40), 49, v72, v74, (uint64_t)v505);
  v76 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  if (*((_BYTE *)this + 4567))
  {
    v77 = (llvm::Value *)llvm::ConstantInt::get();
    v507 = 257;
    v78 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v76, Cast, v77, (const llvm::Twine *)v505);
    v79 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v80 = (llvm::Value *)llvm::ConstantInt::get();
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v79, Cast, v80, (const llvm::Twine *)v505);
    v82 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v83 = (llvm::Value *)llvm::ConstantInt::get();
    v507 = 257;
    UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v82, v78, v83, (const llvm::Twine *)v505);
    EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
    v86 = v85;
    v87 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v88 = (llvm::Value *)llvm::ConstantInt::get();
    v507 = 257;
    v473 = LShr;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v87, LShr, v88, (const llvm::Twine *)v505);
    v513 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v87, v86, EmulationStateBuffer, Mul, (const llvm::Twine *)&v511);
    v91 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v92 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v91, v86, GEP, v78, (const llvm::Twine *)v505);
    v513 = 257;
    v94 = AGCLLVMBuilder::tryDeducePointeeType(v92, v93);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v91, v94, (uint64_t)v92, 0, (uint64_t)&v511);
    v96 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
    v510 = 257;
    v97 = llvm::IRBuilderBase::CreateCast((uint64_t)v91, 39, AlignedLoad, v96, (uint64_t)&v508);
  }
  else
  {
    v98 = (llvm::Value *)llvm::ConstantInt::get();
    v507 = 257;
    v97 = llvm::IRBuilderBase::CreateAnd(v76, Cast, v98, (const llvm::Twine *)v505);
    v99 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v100 = (llvm::Value *)llvm::ConstantInt::get();
    v473 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v99, Cast, v100, (const llvm::Twine *)v505);
    UDiv = 0;
  }
  v101 = (llvm::Value *)llvm::ConstantInt::get();
  v102 = (llvm::Value *)llvm::ConstantInt::get();
  VertexAmpCount = v102;
  if (*v480)
  {
    VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v103);
    v104 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v105 = (uint64_t)(v104 + 32);
    v106 = *((_QWORD *)v104 + 50);
    v107 = *(_QWORD *)(v106 + 1488);
    if (v107)
      v108 = strlen(*(const char **)(v106 + 1488));
    else
      v108 = 0;
    v110 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v105, v107, v108, *(_QWORD *)(v105 + 200), *(_QWORD *)(v105 + 200));
    v111 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v507 = 257;
    v101 = llvm::IRBuilderBase::CreateCall((uint64_t)v111, *(_QWORD *)(v110 + 24), v110, (uint64_t)&VertexAmpCount, 1, (uint64_t)v505);
    v109 = VertexAmpCount;
  }
  else
  {
    v109 = v102;
  }
  v112 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v109, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2768));
  v479 = v101;
  AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v101, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2768));
  *((_QWORD *)this + 691) = llvm::ConstantInt::get();
  v113 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 692) = v113;
  v492 = (llvm::Value *)v97;
  if (*((_BYTE *)this + 4629))
  {
    v114 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v113 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v114, v113, v112, (const llvm::Twine *)v505);
  }
  *((_QWORD *)this + 693) = v113;
  v115 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v116 = (llvm::Value *)*((_QWORD *)this + 691);
  v507 = 257;
  *((_QWORD *)this + 697) = llvm::IRBuilderBase::CreateAdd(v115, v116, v113, (const llvm::Twine *)v505);
  v117 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 698) = v117;
  *((_QWORD *)this + 699) = v117;
  v118 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v119 = (llvm::Value *)*((_QWORD *)this + 697);
  v507 = 257;
  *((_QWORD *)this + 703) = llvm::IRBuilderBase::CreateAdd(v118, v119, v117, (const llvm::Twine *)v505);
  v120 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 704) = v120;
  *((_QWORD *)this + 705) = v120;
  v121 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v122 = (llvm::Value *)*((_QWORD *)this + 703);
  v507 = 257;
  *((_QWORD *)this + 709) = llvm::IRBuilderBase::CreateAdd(v121, v122, v120, (const llvm::Twine *)v505);
  v123 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 710) = v123;
  *((_QWORD *)this + 711) = v123;
  v124 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v125 = (llvm::Value *)*((_QWORD *)this + 709);
  v507 = 257;
  *((_QWORD *)this + 721) = llvm::IRBuilderBase::CreateAdd(v124, v125, v123, (const llvm::Twine *)v505);
  v126 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 722) = v126;
  *((_QWORD *)this + 723) = v126;
  v127 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v128 = (llvm::Value *)*((_QWORD *)this + 721);
  v507 = 257;
  *((_QWORD *)this + 727) = llvm::IRBuilderBase::CreateAdd(v127, v128, v126, (const llvm::Twine *)v505);
  v129 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 728) = v129;
  *((_QWORD *)this + 729) = v129;
  v130 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v131 = (llvm::Value *)*((_QWORD *)this + 727);
  v507 = 257;
  *((_QWORD *)this + 733) = llvm::IRBuilderBase::CreateAdd(v130, v131, v129, (const llvm::Twine *)v505);
  v132 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 734) = v132;
  *((_QWORD *)this + 735) = v132;
  v133 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v134 = (llvm::Value *)*((_QWORD *)this + 733);
  v507 = 257;
  *((_QWORD *)this + 751) = llvm::IRBuilderBase::CreateAdd(v133, v134, v132, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 752) = llvm::ConstantInt::get();
  v135 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 753) = v135;
  v136 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v137 = (llvm::Value *)*((_QWORD *)this + 751);
  v507 = 257;
  *((_QWORD *)this + 757) = llvm::IRBuilderBase::CreateAdd(v136, v137, v135, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 758) = llvm::ConstantInt::get();
  v138 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 759) = v138;
  v139 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v140 = (llvm::Value *)*((_QWORD *)this + 757);
  v507 = 257;
  *((_QWORD *)this + 763) = llvm::IRBuilderBase::CreateAdd(v139, v140, v138, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 764) = llvm::ConstantInt::get();
  v141 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 765) = v141;
  v142 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v143 = (llvm::Value *)*((_QWORD *)this + 763);
  v507 = 257;
  *((_QWORD *)this + 775) = llvm::IRBuilderBase::CreateAdd(v142, v143, v141, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 776) = llvm::ConstantInt::get();
  v144 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 777) = v144;
  v145 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v146 = (llvm::Value *)*((_QWORD *)this + 775);
  v507 = 257;
  *((_QWORD *)this + 781) = llvm::IRBuilderBase::CreateAdd(v145, v146, v144, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 782) = llvm::ConstantInt::get();
  v147 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 783) = v147;
  v148 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v149 = (llvm::Value *)*((_QWORD *)this + 781);
  v507 = 257;
  *((_QWORD *)this + 787) = llvm::IRBuilderBase::CreateAdd(v148, v149, v147, (const llvm::Twine *)v505);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  *((_QWORD *)this + 788) = llvm::ConstantInt::get();
  v150 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 789) = v150;
  v151 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  v152 = llvm::ConstantInt::get();
  v153 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v154 = (llvm::Value *)llvm::ConstantInt::get();
  v507 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v153, v112, v154, (const llvm::Twine *)v505);
  v513 = 257;
  v156 = (llvm::Value *)v152;
  v157 = (char *)this + 4405;
  v158 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v151, v156, Sub, (const llvm::Twine *)&v511);
  v510 = 257;
  *((_QWORD *)this + 789) = llvm::IRBuilderBase::CreateAdd(v151, v150, v158, (const llvm::Twine *)&v508);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords((AGCLLVMUserMeshShaderSW *)((char *)this + 4704));
  v159 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v160 = (llvm::Value *)llvm::ConstantInt::get();
  v507 = 257;
  v161 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v159, v160, v112, (const llvm::Twine *)v505);
  v162 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v163 = (llvm::Value *)*((_QWORD *)this + 751);
  v507 = 257;
  *((_QWORD *)this + 823) = llvm::IRBuilderBase::CreateAdd(v162, v163, v161, (const llvm::Twine *)v505);
  v164 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 824) = v164;
  if (*((_BYTE *)this + 4638))
  {
    v165 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v164 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v165, v164, v112, (const llvm::Twine *)v505);
  }
  *((_QWORD *)this + 825) = v164;
  v166 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)this + v166 + 400) + 1748))
  {
    v175 = *((unsigned __int8 *)this + 4645);
    v176 = (llvm::Value *)*((_QWORD *)this + 823);
    v507 = 257;
    *((_QWORD *)this + 829) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserMeshShaderSW *)((char *)this + v166 + 40), v176, v164, (const llvm::Twine *)v505);
    v177 = llvm::ConstantInt::get();
    v178 = (llvm::Value *)v177;
    *((_QWORD *)this + 830) = v177;
    if (v175)
    {
      v179 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v172 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v179, v178, v112, (const llvm::Twine *)v505);
      v178 = (llvm::Value *)*((_QWORD *)this + 830);
    }
    else
    {
      v172 = (llvm::Value *)v177;
    }
    *((_QWORD *)this + 831) = v172;
    v174 = (llvm::Value *)*((_QWORD *)this + 829);
    *((_QWORD *)this + 835) = v174;
    *((_QWORD *)this + 836) = v178;
    *((_QWORD *)this + 837) = v172;
  }
  else
  {
    v167 = (llvm::Value *)*((_QWORD *)this + 823);
    v507 = 257;
    *((_QWORD *)this + 829) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserMeshShaderSW *)((char *)this + v166 + 40), v167, v164, (const llvm::Twine *)v505);
    v168 = (llvm::Value *)llvm::ConstantInt::get();
    *((_QWORD *)this + 830) = v168;
    if (*((_BYTE *)this + 4645))
    {
      v169 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v168 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v169, v168, v112, (const llvm::Twine *)v505);
    }
    *((_QWORD *)this + 831) = v168;
    v170 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v171 = (llvm::Value *)*((_QWORD *)this + 829);
    v507 = 257;
    *((_QWORD *)this + 835) = llvm::IRBuilderBase::CreateAdd(v170, v171, v168, (const llvm::Twine *)v505);
    v172 = (llvm::Value *)llvm::ConstantInt::get();
    *((_QWORD *)this + 836) = v172;
    if (*((_BYTE *)this + 4645))
    {
      v173 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v172 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v173, v172, v112, (const llvm::Twine *)v505);
    }
    *((_QWORD *)this + 837) = v172;
    v174 = (llvm::Value *)*((_QWORD *)this + 835);
  }
  v180 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v507 = 257;
  *((_QWORD *)this + 841) = llvm::IRBuilderBase::CreateAdd(v180, v174, v172, (const llvm::Twine *)v505);
  v181 = (llvm::Value *)llvm::ConstantInt::get();
  *((_QWORD *)this + 842) = v181;
  if (*((_BYTE *)this + 4629))
  {
    v182 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v181 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v182, v181, v112, (const llvm::Twine *)v505);
  }
  *((_QWORD *)this + 843) = v181;
  v487 = (llvm::CmpInst **)llvm::ConstantInt::get();
  if (*((_BYTE *)this + 4644) || *((_BYTE *)this + 4643))
  {
    BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(this, v473, 0, 0x17u, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), v479);
    v184 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v185 = (llvm::Type *)*((_QWORD *)v184 + 29);
    v186 = (uint64_t *)(v184 + 40);
    v507 = 257;
    v187 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v184 + 40), v185, BasePointer, UDiv, (const llvm::Twine *)v505);
    v513 = 257;
    v189 = AGCLLVMBuilder::tryDeducePointeeType(v187, v188);
    v190 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v186, v189, (uint64_t)v187, 0, (uint64_t)&v511);
    v191 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v192 = (llvm::Value *)llvm::ConstantInt::get();
    v507 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v191, v190, v192, (const llvm::Twine *)v505);
    v194 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v507 = 257;
    v195 = (llvm::Value *)llvm::ConstantInt::get();
    AShr = (llvm::Value *)llvm::IRBuilderBase::CreateAShr(v194, v190, v195, (const llvm::Twine *)v505);
    v197 = (llvm::Value *)llvm::ConstantInt::get();
    v513 = 257;
    v198 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v194, AShr, v197, (const llvm::Twine *)&v511);
    if (*((_BYTE *)this + 4643))
    {
      v199 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v200 = (llvm::Value *)llvm::ConstantInt::get();
      v201 = llvm::IRBuilderBase::CreateAShr(v199, v190, v200, (const llvm::Twine *)v505);
      v202 = (llvm::Value *)llvm::ConstantInt::get();
      v513 = 257;
      v203 = (llvm::Value *)v201;
      v157 = (char *)this + 4405;
      v487 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v199, v203, v202, (const llvm::Twine *)&v511);
    }
    if (*v157)
    {
      v511 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      v512 = (llvm::Value *)v511;
      v205 = (llvm::Type *)llvm::StructType::get();
      v206 = (llvm::Type **)*((_QWORD *)this + 846);
      if (!v206)
      {
        v207 = llvm::PointerType::get();
        v505[0] = "agc.view_mappings_pointer_global";
        v507 = 259;
        v208 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
        v209 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 256))(v208);
        v210 = (llvm::Type *)v207;
        v157 = (char *)this + 4405;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v210, (const llvm::Twine *)v505, v209, *((_DWORD *)this + 1140), 5, 0);
        llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShaderSW *)((char *)this + 6752), (uint64_t)GlobalBufferBinding);
        v206 = (llvm::Type **)*((_QWORD *)this + 846);
      }
      v212 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v507 = 257;
      v213 = AGCLLVMBuilder::tryDeducePointeeType(v206, v204);
      v214 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v212 + 5, v213, (uint64_t)v206, 0, (uint64_t)v505);
      v215 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v216 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v215, v205, v214, v479, (const llvm::Twine *)v505);
      v217 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v507 = 257;
      v219 = AGCLLVMBuilder::tryDeducePointeeType(v216, v218);
      v220 = (_BYTE *)llvm::IRBuilderBase::CreateAlignedLoad(v217 + 5, v219, (uint64_t)v216, 0, (uint64_t)v505);
      v505[0] = v506;
      v505[1] = (void *)0x800000000;
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v220, (uint64_t)v505);
      v221 = *((_QWORD *)v505[0] + 1);
      v222 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v223 = (llvm::IRBuilderBase *)(v222 + 40);
      v224 = *((_QWORD *)v222 + 29);
      v513 = 257;
      v225 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v222 + 40), 39, v221, v224, (uint64_t)&v511);
      v510 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v223, Add, v225, (const llvm::Twine *)&v508);
      v226 = *(_QWORD *)v505[0];
      v227 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v228 = (llvm::IRBuilderBase *)(v227 + 40);
      v229 = *((_QWORD *)v227 + 29);
      v513 = 257;
      v230 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v227 + 40), 39, v226, v229, (uint64_t)&v511);
      v510 = 257;
      v198 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v228, v198, v230, (const llvm::Twine *)&v508);
      if (v505[0] != v506)
        free(v505[0]);
    }
    if (v157[234] || v157[236])
    {
      if (v157[240])
        v231 = v482;
      else
        v231 = v484;
      v232 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v233 = (llvm::IRBuilderBase *)(v232 + 40);
      v234 = (llvm::Value *)*((_QWORD *)this + 829);
      v235 = *((_QWORD *)v232 + 28);
      v507 = 257;
      v236 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v232 + 40), 38, (uint64_t)v479, v235, (uint64_t)v505);
      v513 = 257;
      v504[0] = llvm::IRBuilderBase::CreateAdd(v233, v234, v236, (const llvm::Twine *)&v511);
      v237 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v510 = 257;
      v238 = (llvm::Value *)llvm::ConstantInt::get();
      Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v237, v198, v238, (const llvm::Twine *)&v508);
      v503 = 257;
      v504[1] = llvm::IRBuilderBase::CreateOr(v237, Add, Shl, (const llvm::Twine *)v502);
      v494 = 257;
      v240 = (uint64_t)v233;
      v157 = (char *)this + 4405;
      llvm::IRBuilderBase::CreateCall(v240, **(_QWORD **)(*(_QWORD *)v231 + 16), v231, (uint64_t)v504, 2, (uint64_t)v493);
    }
  }
  if (v157[223])
  {
    v241 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v242 = (llvm::Type *)*((_QWORD *)v241 + 40);
    v243 = AGCLLVMUserMeshShaderSW::getBasePointer(this, v473, 0, 0, (uint64_t)v242, v479);
    v507 = 257;
    v244 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v241 + 40), v242, v243, v492, (const llvm::Twine *)v505);
    v489 = (AGCLLVMUserMeshShaderSW *)((char *)this + 8);
    v245 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8);
    v507 = 257;
    v247 = AGCLLVMBuilder::tryDeducePointeeType(v244, v246);
    v248 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v245 + 4, v247, (uint64_t)v244, 0, (uint64_t)v505);
    for (i = 0; i != 4; ++i)
    {
      v250 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v507 = 257;
      v251 = (llvm::IRBuilderBase *)(v250 + 40);
      v252 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement(v251, v248, v252, (const llvm::Twine *)v505);
      if (v157[238])
      {
        v254 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v255 = llvm::ConstantInt::get();
        v507 = 257;
        llvm::IRBuilderBase::CreateICmp(v254, 34, v487, v255, (uint64_t)v505);
        llvm::ConstantFP::get();
        v513 = 257;
        v157 = (char *)this + 4405;
        Element = llvm::IRBuilderBase::CreateSelect();
      }
      v256 = *(_QWORD *)(*(_QWORD *)this - 24);
      if (v157[224])
      {
        v257 = (AGCLLVMUserMeshShaderSW *)((char *)this + v256 + 40);
        v258 = llvm::ConstantInt::get();
        v259 = *(_QWORD *)(*(_QWORD *)this - 24);
        v260 = (AGCLLVMUserMeshShaderSW *)((char *)this + v259 + 40);
        v261 = *(_QWORD *)((char *)this + v259 + 224);
        v507 = 257;
        v262 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v260, 38, (uint64_t)v479, v261, (uint64_t)v505);
        v263 = (llvm::Value *)llvm::ConstantInt::get();
        v513 = 257;
        v264 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v260, v262, v263, (const llvm::Twine *)&v511);
        v510 = 257;
        v265 = (llvm::Value *)v258;
        v157 = (char *)this + 4405;
        v266 = llvm::IRBuilderBase::CreateAdd(v257, v265, v264, (const llvm::Twine *)&v508);
        v267 = (char *)v489 + *(_QWORD *)(*(_QWORD *)this - 24);
        v511 = v266;
        v512 = (llvm::Value *)Element;
        v507 = 257;
        v268 = v486;
        v269 = **(_QWORD **)(*(_QWORD *)v486 + 16);
        v270 = (uint64_t)(v267 + 32);
      }
      else
      {
        v271 = v256 + 32;
        v511 = llvm::ConstantInt::get();
        v512 = (llvm::Value *)Element;
        v507 = 257;
        v268 = v481;
        v269 = **(_QWORD **)(*(_QWORD *)v481 + 16);
        v270 = (uint64_t)v489 + v271;
      }
      llvm::IRBuilderBase::CreateCall(v270, v269, v268, (uint64_t)&v511, 2, (uint64_t)v505);
    }
  }
  v272 = *((unsigned int *)this + 1184);
  v273 = (char *)this + 192;
  v274 = v492;
  if ((_DWORD)v272)
  {
    v275 = 0;
    v478 = 0;
    v276 = *((_QWORD *)this + 591);
    v476 = v276 + (v272 << 6);
    v490 = (AGCLLVMUserMeshShaderSW *)((char *)this + 8);
    while (1)
    {
      v277 = *(_DWORD *)(v276 + 16);
      v278 = v277 > 6;
      v279 = (1 << v277) & 0x67;
      v280 = v278 || v279 == 0;
      if (v280 && *(_DWORD *)(v276 + 8) != 3)
      {
        v282 = (char *)this + 168;
        if (*(_DWORD *)(v276 + 4) == 1)
          v282 = (char *)this + 152;
        v485 = *(llvm::Type **)&v282[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
        v483 = AGCLLVMUserMeshShaderSW::getBasePointer(this, v473, 0, *(_DWORD *)(v276 + 60), (uint64_t)v485, v479);
        v283 = *(_QWORD *)(*(_QWORD *)this - 24);
        v284 = (AGCLLVMUserMeshShaderSW *)((char *)this + v283 + 40);
        v285 = (char *)this + 48 * *(unsigned int *)(v276 + 60) + 5504;
        v287 = (llvm::Value *)*((_QWORD *)v285 + 3);
        v286 = *((_QWORD *)v285 + 4);
        v288 = *(_QWORD *)&v273[v283 + 32];
        v507 = 257;
        v289 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v284, 38, v286, v288, (uint64_t)v505);
        v290 = *(_QWORD *)(*(_QWORD *)this - 24);
        v291 = *(_QWORD *)&v273[v290 + 32];
        v513 = 257;
        v292 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v290 + 40, 38, (uint64_t)v479, v291, (uint64_t)&v511);
        v510 = 257;
        v293 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v284, v289, v292, (const llvm::Twine *)&v508);
        v503 = 257;
        v477 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v284, v287, v293, (const llvm::Twine *)v502);
        if (*(_DWORD *)v276)
          break;
      }
      v281 = v275;
LABEL_97:
      v276 += 64;
      v275 = v281;
      if (v276 == v476)
        goto LABEL_125;
    }
    v294 = 0;
    while (1)
    {
      v281 = v294 + *(_DWORD *)(v276 + 52);
      if (!*(_BYTE *)(v276 + 56))
      {
        v315 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v316 = (llvm::Value *)llvm::ConstantInt::get();
        v317 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v318 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v319 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v317, v274, v318, (const llvm::Twine *)v505);
        v513 = 257;
        v320 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v315, v316, v319, (const llvm::Twine *)&v511);
        v510 = 257;
        v321 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v315, v485, v483, v320, (const llvm::Twine *)&v508);
        v322 = (uint64_t *)((char *)v490 + *(_QWORD *)(*(_QWORD *)this - 24));
        v507 = 257;
        v324 = AGCLLVMBuilder::tryDeducePointeeType(v321, v323);
        v325 = llvm::IRBuilderBase::CreateAlignedLoad(v322 + 4, v324, (uint64_t)v321, 0, (uint64_t)v505);
        if (*(_BYTE *)(v276 + 57))
          v326 = v474;
        else
          v326 = v475;
        v327 = llvm::ConstantInt::get();
        if (*(_BYTE *)(v276 + 57))
        {
          v328 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          v329 = (llvm::Value *)llvm::ConstantInt::get();
          v507 = 257;
          v327 = llvm::IRBuilderBase::CreateAdd(v328, v477, v329, (const llvm::Twine *)v505);
        }
        v330 = (char *)v490 + *(_QWORD *)(*(_QWORD *)this - 24);
        v511 = v327;
        v512 = (llvm::Value *)v325;
        v507 = 257;
        llvm::IRBuilderBase::CreateCall((uint64_t)(v330 + 32), **(_QWORD **)(*(_QWORD *)v326 + 16), v326, (uint64_t)&v511, 2, (uint64_t)v505);
        v281 = v275;
        v274 = v492;
        goto LABEL_123;
      }
      v295 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v296 = (llvm::Value *)llvm::ConstantInt::get();
      v507 = 257;
      v297 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v295, v274, v296, (const llvm::Twine *)v505);
      v298 = (llvm::Value *)llvm::ConstantInt::get();
      v513 = 257;
      v299 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v295, v297, v298, (const llvm::Twine *)&v511);
      v510 = 257;
      v300 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v295, v485, v483, v299, (const llvm::Twine *)&v508);
      v301 = (uint64_t *)((char *)v490 + *(_QWORD *)(*(_QWORD *)this - 24));
      v507 = 257;
      v303 = AGCLLVMBuilder::tryDeducePointeeType(v300, v302);
      v304 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v301 + 4, v303, (uint64_t)v300, 0, (uint64_t)v505);
      if (*(_BYTE *)(v276 + 57))
      {
        v305 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v306 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v307 = llvm::IRBuilderBase::CreateAdd(v305, v477, v306, (const llvm::Twine *)v505);
        v308 = *(_DWORD *)(v276 + 60);
        v309 = (llvm::Value *)v501;
        if (!v501 || v478 != v308 || (_DWORD)v275 != (v281 & 0xFFFFFFFE))
        {
          AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()((llvm::Value *)v496);
          v310 = (llvm::Constant **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
          NullValue = (llvm::Value *)llvm::Constant::getNullValue(v310[31], v311);
          v507 = 257;
          v313 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v310 + 5), NullValue, v304, v313, (const llvm::Twine *)v505);
          v500 = v307;
          v501 = InsertElement;
          v499 = 1;
LABEL_121:
          v478 = v308;
          goto LABEL_122;
        }
      }
      else
      {
        v331 = llvm::ConstantInt::get();
        v308 = *(_DWORD *)(v276 + 60);
        v309 = (llvm::Value *)v501;
        if (!v501 || v478 != v308 || (_DWORD)v275 != (v281 & 0xFFFFFFFE))
        {
          AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()((llvm::Value *)v496);
          v335 = (llvm::Constant **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
          v337 = (llvm::Value *)llvm::Constant::getNullValue(v335[31], v336);
          v507 = 257;
          v338 = (llvm::Value *)llvm::ConstantInt::get();
          v339 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v335 + 5), v337, v304, v338, (const llvm::Twine *)v505);
          v500 = v331;
          v501 = v339;
          v499 = 0;
          goto LABEL_121;
        }
      }
      v332 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v507 = 257;
      v333 = (llvm::IRBuilderBase *)(v332 + 40);
      v334 = (llvm::Value *)llvm::ConstantInt::get();
      v501 = llvm::IRBuilderBase::CreateInsertElement(v333, v309, v304, v334, (const llvm::Twine *)v505);
      AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()((llvm::Value *)v496);
      v281 = v275;
LABEL_122:
      v274 = v492;
      v273 = (char *)this + 192;
LABEL_123:
      ++v294;
      v275 = v281;
      if (v294 >= *(_DWORD *)v276)
        goto LABEL_97;
    }
  }
LABEL_125:
  AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()((llvm::Value *)v496);
  v340 = (uint64_t)v479;
  if (*((_BYTE *)this + 4637))
  {
    v341 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v342 = (llvm::Type *)*((_QWORD *)v341 + 25);
    v343 = AGCLLVMUserMeshShaderSW::getBasePointer(this, v473, 0, 0x16u, (uint64_t)v342, v479);
    v507 = 257;
    v344 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v341 + 40), v342, v343, v274, (const llvm::Twine *)v505);
    v345 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v507 = 257;
    v347 = AGCLLVMBuilder::tryDeducePointeeType(v344, v346);
    v348 = llvm::IRBuilderBase::CreateAlignedLoad(v345 + 5, v347, (uint64_t)v344, 0, (uint64_t)v505);
    if (*((_BYTE *)this + 4638))
      v349 = v469;
    else
      v349 = v471;
    v350 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v351 = (llvm::IRBuilderBase *)(v350 + 40);
    v352 = (llvm::Value *)*((_QWORD *)this + 823);
    v353 = *((_QWORD *)v350 + 28);
    v507 = 257;
    v354 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v350 + 40), 38, (uint64_t)v479, v353, (uint64_t)v505);
    v513 = 257;
    v502[0] = llvm::IRBuilderBase::CreateAdd(v351, v352, v354, (const llvm::Twine *)&v511);
    v502[1] = v348;
    v510 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v351, **(_QWORD **)(*(_QWORD *)v349 + 16), v349, (uint64_t)v502, 2, (uint64_t)&v508);
  }
  if (*((_DWORD *)this + 1158))
  {
    v355 = AGCLLVMUserMeshShaderSW::getBasePointer(this, v473, 0, 0x19u, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200), v479);
    v356 = (llvm::Value *)(*((_BYTE *)this + 4636) ? v468 : v470);
    if (*((_DWORD *)this + 1158))
    {
      v357 = v355;
      v358 = 0;
      v491 = v356;
      do
      {
        v359 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v360 = (llvm::Type *)*((_QWORD *)v359 + 25);
        v361 = (llvm::IRBuilderBase *)(v359 + 40);
        v362 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v363 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v361, v274, v362, (const llvm::Twine *)v505);
        v513 = 257;
        v364 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v361, v360, v357, v363, (const llvm::Twine *)&v511);
        v510 = 257;
        v366 = AGCLLVMBuilder::tryDeducePointeeType(v364, v365);
        v367 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v361, v366, (uint64_t)v364, 0, (uint64_t)&v508);
        v368 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v369 = (llvm::Value *)llvm::ConstantInt::get();
        v370 = *(_QWORD *)(*(_QWORD *)this - 24);
        v371 = (AGCLLVMUserMeshShaderSW *)((char *)this + v370 + 40);
        v372 = *(_QWORD *)((char *)this + v370 + 224);
        v507 = 257;
        v373 = llvm::IRBuilderBase::CreateCast((uint64_t)v371, 38, v340, v372, (uint64_t)v505);
        v374 = (llvm::Value *)llvm::ConstantInt::get();
        v513 = 257;
        v375 = (llvm::Value *)v373;
        v340 = (uint64_t)v479;
        v376 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v371, v375, v374, (const llvm::Twine *)&v511);
        v510 = 257;
        v377 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v368, v369, v376, (const llvm::Twine *)&v508);
        v378 = *(_QWORD *)(*(_QWORD *)this - 24);
        v379 = (char *)this + v378 + 8;
        v380 = (llvm::Value *)*((_QWORD *)this + 841);
        v507 = 257;
        v508 = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserMeshShaderSW *)((char *)this + v378 + 40), v380, v377, (const llvm::Twine *)v505);
        v509 = (llvm::Value *)v367;
        v274 = v492;
        v513 = 257;
        llvm::IRBuilderBase::CreateCall((uint64_t)(v379 + 32), **(_QWORD **)(*(_QWORD *)v491 + 16), (uint64_t)v491, (uint64_t)&v508, 2, (uint64_t)&v511);
        ++v358;
      }
      while (v358 < *((_DWORD *)this + 1158));
    }
  }
  v381 = *((unsigned int *)this + 1184);
  v382 = (char *)this + 4405;
  if ((_DWORD)v381)
  {
    v383 = *((_QWORD *)this + 591);
    v384 = v381 << 6;
    v385 = v381 << 6;
    v386 = v383;
    do
    {
      if (*(_DWORD *)(v386 + 16) == 1)
        goto LABEL_142;
      v386 += 64;
      v385 -= 64;
    }
    while (v385);
    v386 = 0;
LABEL_142:
    while (*(_DWORD *)(v383 + 16) != 2)
    {
      v383 += 64;
      v384 -= 64;
      if (!v384)
        goto LABEL_154;
    }
    if (v386 && v383)
    {
      v387 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v388 = (llvm::Value *)llvm::ConstantInt::get();
      v507 = 257;
      v389 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v387, v473, v388, (const llvm::Twine *)v505);
      v390 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 6, 0);
      v391 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v393 = llvm::IRBuilderBase::CreateGEP(v391, v392, v390, v389, (const llvm::Twine *)v505);
      v394 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v395 = *((_QWORD *)v394 + 30);
      v507 = 257;
      v396 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v394 + 40), 47, v393, v395, (uint64_t)v505);
      v397 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v507 = 257;
      v398 = (llvm::Value *)llvm::ConstantInt::get();
      v399 = llvm::IRBuilderBase::CreateLShr(v397, v396, v398, (const llvm::Twine *)v505);
      v400 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v401 = *((_QWORD *)v400 + 29);
      v507 = 257;
      v402 = llvm::IRBuilderBase::CreateCast((uint64_t)(v400 + 40), 38, v399, v401, (uint64_t)v505);
      v403 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v404 = v403 + 32;
      v405 = v498;
      if (*v480)
      {
        v406 = (llvm::IRBuilderBase *)(v403 + 40);
        v407 = (llvm::Value *)*((_QWORD *)this + 6 * *(unsigned int *)(v386 + 60) + 691);
        v408 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v508 = llvm::IRBuilderBase::CreateAdd(v406, v407, v408, (const llvm::Twine *)v505);
        v509 = (llvm::Value *)v402;
        v513 = 257;
        v409 = **(_QWORD **)(*(_QWORD *)v405 + 16);
        v410 = (uint64_t)(v404 + 8);
        v411 = &v508;
        v412 = &v511;
      }
      else
      {
        v511 = llvm::ConstantInt::get();
        v512 = (llvm::Value *)v402;
        v507 = 257;
        v409 = **(_QWORD **)(*(_QWORD *)v405 + 16);
        v410 = (uint64_t)(v404 + 8);
        v411 = &v511;
        v412 = (uint64_t *)v505;
      }
      llvm::IRBuilderBase::CreateCall(v410, v409, v405, (uint64_t)v411, 2, (uint64_t)v412);
      v413 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v414 = *((_QWORD *)v413 + 30);
      v507 = 257;
      v415 = llvm::IRBuilderBase::CreateCast((uint64_t)(v413 + 40), 47, v393, v414, (uint64_t)v505);
      v416 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v417 = *((_QWORD *)v416 + 29);
      v507 = 257;
      v418 = llvm::IRBuilderBase::CreateCast((uint64_t)(v416 + 40), 38, v415, v417, (uint64_t)v505);
      v340 = (uint64_t)v479;
      v419 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v420 = v419 + 32;
      v421 = v498;
      if (*v480)
      {
        v422 = (llvm::IRBuilderBase *)(v419 + 40);
        v423 = (llvm::Value *)*((_QWORD *)this + 6 * *(unsigned int *)(v383 + 60) + 691);
        v424 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v508 = llvm::IRBuilderBase::CreateAdd(v422, v423, v424, (const llvm::Twine *)v505);
        v509 = (llvm::Value *)v418;
        v513 = 257;
        v425 = **(_QWORD **)(*(_QWORD *)v421 + 16);
        v426 = (uint64_t)(v420 + 8);
        v427 = &v508;
        v428 = &v511;
      }
      else
      {
        v511 = llvm::ConstantInt::get();
        v512 = (llvm::Value *)v418;
        v507 = 257;
        v425 = **(_QWORD **)(*(_QWORD *)v421 + 16);
        v426 = (uint64_t)(v420 + 8);
        v427 = &v511;
        v428 = (uint64_t *)v505;
      }
      llvm::IRBuilderBase::CreateCall(v426, v425, v421, (uint64_t)v427, 2, (uint64_t)v428);
      v382 = (char *)this + 4405;
    }
LABEL_154:
    v429 = *((unsigned int *)this + 1184);
    if ((_DWORD)v429)
    {
      v430 = *((_QWORD *)this + 591);
      v431 = v429 << 6;
      while (*(_DWORD *)(v430 + 16) != 5)
      {
        v430 += 64;
        v431 -= 64;
        if (!v431)
          goto LABEL_163;
      }
      v432 = *(_QWORD *)(*(_QWORD *)this - 24);
      if (*v382)
      {
        v433 = (char *)this + v432;
        v434 = (llvm::IRBuilderBase *)(v433 + 40);
        v435 = (llvm::Value *)*((_QWORD *)this + 6 * *(unsigned int *)(v430 + 60) + 691);
        v436 = *((_QWORD *)v433 + 28);
        v507 = 257;
        v437 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v433 + 40), 38, v340, v436, (uint64_t)v505);
        v438 = (llvm::Value *)*((_QWORD *)this + 6 * *(unsigned int *)(v430 + 60) + 692);
        v513 = 257;
        v439 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v434, v437, v438, (const llvm::Twine *)&v511);
        v510 = 257;
        v440 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v434, v435, v439, (const llvm::Twine *)&v508);
        v441 = v497;
        v442 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v443 = (llvm::Value *)llvm::ConstantInt::get();
        v507 = 257;
        v508 = llvm::IRBuilderBase::CreateAdd(v442, v440, v443, (const llvm::Twine *)v505);
        v509 = (llvm::Value *)v340;
        v513 = 257;
        v382 = (char *)this + 4405;
        v444 = **(_QWORD **)(*(_QWORD *)v441 + 16);
        v445 = &v508;
        v446 = &v511;
        v447 = (uint64_t)v442;
        v448 = v441;
      }
      else
      {
        v449 = (char *)this + v432;
        v450 = v498;
        v511 = llvm::ConstantInt::get();
        v512 = (llvm::Value *)v340;
        v507 = 257;
        v444 = **(_QWORD **)(*(_QWORD *)v450 + 16);
        v447 = (uint64_t)(v449 + 40);
        v445 = &v511;
        v446 = (uint64_t *)v505;
        v448 = v450;
      }
      llvm::IRBuilderBase::CreateCall(v447, v444, v448, (uint64_t)v445, 2, (uint64_t)v446);
LABEL_163:
      v451 = *((unsigned int *)this + 1184);
      if ((_DWORD)v451)
      {
        v452 = *((_QWORD *)this + 591);
        v453 = v451 << 6;
        while (*(_DWORD *)(v452 + 16) != 6)
        {
          v452 += 64;
          v453 -= 64;
          if (!v453)
            goto LABEL_172;
        }
        v454 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v455 = v454 + 32;
        v456 = v498;
        if (*v382)
        {
          v457 = (llvm::IRBuilderBase *)(v454 + 40);
          v458 = (llvm::Value *)*((_QWORD *)this + 6 * *(unsigned int *)(v452 + 60) + 691);
          v459 = (llvm::Value *)llvm::ConstantInt::get();
          v507 = 257;
          v508 = llvm::IRBuilderBase::CreateAdd(v457, v458, v459, (const llvm::Twine *)v505);
          v509 = VertexAmpCount;
          v513 = 257;
          v460 = **(_QWORD **)(*(_QWORD *)v456 + 16);
          v461 = (uint64_t)(v455 + 8);
          v462 = &v508;
          v463 = &v511;
        }
        else
        {
          v511 = llvm::ConstantInt::get();
          v512 = VertexAmpCount;
          v507 = 257;
          v460 = **(_QWORD **)(*(_QWORD *)v456 + 16);
          v461 = (uint64_t)(v455 + 8);
          v462 = &v511;
          v463 = (uint64_t *)v505;
        }
        llvm::IRBuilderBase::CreateCall(v461, v460, v456, (uint64_t)v462, 2, (uint64_t)v463);
      }
    }
  }
LABEL_172:
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
  llvm::Module::getOrInsertNamedMetadata();
  v464 = *((unsigned int *)this + 1354);
  if ((_DWORD)v464)
  {
    v465 = *((_QWORD *)this + 676);
    v466 = 8 * v464;
    do
    {
      v465 += 8;
      llvm::NamedMDNode::addOperand();
      v466 -= 8;
    }
    while (v466);
  }
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 376) = (char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 2776;
  operator delete(__p);
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::usesCustomBorderColor(AGCLLVMUserMeshShaderSW *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 565) + 16) >> 5) & 1;
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalSize(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2)
{
  llvm::Type **v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  char *v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type **GEP;
  uint64_t *v18;
  llvm::Value *v19;
  llvm::Type *v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *Cast;
  llvm::Type **v24;
  llvm::Type *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  llvm::Value *v30;
  uint64_t *v31;
  llvm::Type *v32;
  llvm::Value *v33;
  char *v34;
  llvm::Type *v35;
  llvm::Value *v36;
  llvm::Type **v37;
  uint64_t *v38;
  llvm::Value *v39;
  llvm::Type *v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::IRBuilderBase *v43;
  _BYTE v45[32];
  __int16 v46;
  _QWORD v47[2];
  uint64_t v48;
  __int16 v49;

  v4 = (llvm::Type **)*((_QWORD *)this + 535);
  if (!v4)
  {
    v5 = (llvm::Type *)llvm::PointerType::get();
    v6 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6);
    v47[0] = "agc.indirect_wg_size_buffer_pointer.";
    v48 = v7;
    v49 = 2051;
    v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)v47, v9, 12, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShaderSW *)((char *)this + 4264), (uint64_t)GlobalBufferBinding);
    v4 = (llvm::Type **)*((_QWORD *)this + 535);
  }
  v11 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v49 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(v4, a2);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v12, (uint64_t)v4, 0, (uint64_t)v47);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v15 = (llvm::Type *)*((_QWORD *)v14 + 29);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v49 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v14 + 40), v15, AlignedLoad, v16, (const llvm::Twine *)v47);
  v18 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  v20 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v19);
  v21 = llvm::IRBuilderBase::CreateAlignedLoad(v18, v20, (uint64_t)GEP, 0, (uint64_t)v47);
  v46 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, v21, (uint64_t)a2, (uint64_t)v45);
  v24 = (llvm::Type **)*((_QWORD *)this + 538);
  if (!v24)
  {
    v25 = (llvm::Type *)llvm::PointerType::get();
    v26 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 360))(v26);
    v47[0] = "agc.indirect_wg_count_buffer_pointer.";
    v48 = v27;
    v49 = 2051;
    v28 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 360))(v28);
    v30 = AGCLLVMUserObject::createGlobalBufferBinding(this, v25, (const llvm::Twine *)v47, v29, 12, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShaderSW *)((char *)this + 4288), (uint64_t)v30);
    v24 = (llvm::Type **)*((_QWORD *)this + 538);
  }
  v31 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v49 = 257;
  v32 = AGCLLVMBuilder::tryDeducePointeeType(v24, v22);
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v31 + 5, v32, (uint64_t)v24, 0, (uint64_t)v47);
  v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v35 = (llvm::Type *)*((_QWORD *)v34 + 29);
  v36 = (llvm::Value *)llvm::ConstantInt::get();
  v49 = 257;
  v37 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v34 + 40), v35, v33, v36, (const llvm::Twine *)v47);
  v38 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  v40 = AGCLLVMBuilder::tryDeducePointeeType(v37, v39);
  v41 = llvm::IRBuilderBase::CreateAlignedLoad(v38, v40, (uint64_t)v37, 0, (uint64_t)v47);
  v46 = 257;
  v42 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v38, 38, v41, (uint64_t)a2, (uint64_t)v45);
  v43 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  return llvm::IRBuilderBase::CreateMul(v43, Cast, v42, (const llvm::Twine *)v47);
}

uint64_t AGCLLVMUserMeshShaderSW::buildNumGroups(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *Add;
  llvm::Value *v10;
  llvm::Value *Sub;
  llvm::IRBuilderBase *v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;

  v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserMeshShaderSW *))(*(_QWORD *)this + 496))(this);
  v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v8 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  v12 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserMeshShaderSW::replacePayloadBufferAccesses(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2)
{
  uint64_t inserted;
  char *v5;
  llvm::Value *v6;
  _BYTE v8[32];
  __int16 v9;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = 257;
  v6 = llvm::IRBuilderBase::CreateCall((uint64_t)(v5 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(this, a2, v6);
  return 1;
}

const char *AGCLLVMUserMeshShaderSW::dumpType(AGCLLVMUserMeshShaderSW *this)
{
  return "mesh";
}

uint64_t AGCLLVMUserMeshShaderSW::getShaderType(AGCLLVMUserMeshShaderSW *this)
{
  return 4;
}

void AGCLLVMUserMeshShaderSW::getCompilationKeyDescription(AGCLLVMUserMeshShaderSW *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t i;
  char *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35;
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  std::string v57;
  std::string v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  std::string v63;
  void *v64[2];
  char v65;
  void *v66;
  std::string::size_type v67;
  unsigned __int8 v68;
  std::string v69;
  std::string __p;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v57, "AGCMeshContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v55, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v58);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v58.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v58.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v4
                                                                                               + *(_QWORD *)(v58.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v71, (const void **)v55, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v58.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + *(_QWORD *)(v58.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v58.__r_.__value_.__r.__words[2] = v5;
  v59 = MEMORY[0x1E0DE4FB8] + 16;
  if (v61 < 0)
    operator delete(v60);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](&v62);
  std::string::basic_string[abi:nn180100]<0>(v53, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v72, (const void **)v53, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v51, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v73, (const void **)v51, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v49, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v74, (const void **)v49, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "maxVertexAmplificationCount");
  _agcFieldString<unsigned int>(&v75, (const void **)v47, v3[4] & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v45, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned int>(&v76, (const void **)v45, (v3[4] >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v43, "customBorderColor");
  _agcFieldString<unsigned int>(&v77, (const void **)v43, (v3[4] >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v78, (const void **)v41, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v39, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v79, (const void **)v39, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v80, (const void **)v37, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v35, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v81, (const void **)&v35, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v82, (const void **)v33, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v83, (const void **)v31, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v29, "enableStackShadow");
  _agcFieldString<unsigned int>(&v84, (const void **)v29, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v27, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v85, (const void **)v27, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v25, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v86, (const void **)v25, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v23, "addDefaultPointSize");
  _agcFieldString<unsigned int>(&v87, (const void **)v23, (v3[4] >> 6) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v88, (const void **)v21, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v19, "noObjectShader");
  _agcFieldString<unsigned int>(&v89, (const void **)v19, (v3[4] >> 8) & 1);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v69 = v57;
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v69, 0);
  std::string::basic_string[abi:nn180100]<0>(v64, "{");
  _agcIndentedLine(&v66, (std::string::value_type *)v64, 0);
  if ((v68 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&v66;
  else
    v6 = (const std::string::value_type *)v66;
  if ((v68 & 0x80u) == 0)
    v7 = v68;
  else
    v7 = v67;
  v8 = std::string::append(&__p, v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v68 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  for (i = 0; i != 57; i += 3)
  {
    v11 = (char *)&v71 + i * 8;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[i + 2]) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    else
      __p = *(std::string *)v11;
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v63, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v63 = __p;
    _agcIndentedLine(&v66, (std::string::value_type *)&v63, 1);
    if ((v68 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&v66;
    else
      v13 = (const std::string::value_type *)v66;
    if ((v68 & 0x80u) == 0)
      v14 = v68;
    else
      v14 = v67;
    std::string::append(&v58, v13, v14);
    if ((char)v68 < 0)
      operator delete(v66);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
        continue;
    }
    else if ((v12 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v66, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v66, 0);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v58;
  else
    v15 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, size);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v68 < 0)
    operator delete(v66);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v18 = 57;
  do
  {
    if (v71.__r_.__value_.__s.__data_[v18 * 8 - 1] < 0)
      operator delete((void *)__p.__r_.__value_.__r.__words[v18 + 1]);
    v18 -= 3;
  }
  while (v18 * 8);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserMeshShaderSW::getBufferBoundsCheckMode(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 4) & 7;
}

